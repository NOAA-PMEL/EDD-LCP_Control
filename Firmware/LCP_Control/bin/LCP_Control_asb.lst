
bin/LCP_Control_asb.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 23 00 10 09 12 01 00 fd 11 01 00 25 03 01 00     .#..........%...
    c010:	01 12 01 00 01 12 01 00 01 12 01 00 00 00 00 00     ................
	...
    c02c:	a1 d0 00 00 05 12 01 00 00 00 00 00 61 d1 00 00     ............a...
    c03c:	c5 d1 00 00 05 12 01 00 05 12 01 00 05 12 01 00     ................
    c04c:	05 12 01 00 05 12 01 00 05 12 01 00 05 12 01 00     ................
    c05c:	05 12 01 00 05 12 01 00 05 12 01 00 05 12 01 00     ................
    c06c:	05 12 01 00 05 12 01 00 51 30 01 00 4d da 01 00     ........Q0..M...
    c07c:	05 12 01 00 a9 be 01 00 05 12 01 00 05 12 01 00     ................
    c08c:	05 12 01 00 05 12 01 00 05 12 01 00 dd bc 01 00     ................
    c09c:	ad d3 00 00 cd d3 00 00 05 12 01 00 05 12 01 00     ................
    c0ac:	05 12 01 00 05 12 01 00 05 12 01 00 05 12 01 00     ................
    c0bc:	05 12 01 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	@ 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	@ 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	@ 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_dmul>:
    c478:	b570      	push	{r4, r5, r6, lr}
    c47a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
    c47e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
    c482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c486:	bf1d      	ittte	ne
    c488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c48c:	ea94 0f0c 	teqne	r4, ip
    c490:	ea95 0f0c 	teqne	r5, ip
    c494:	f000 f8de 	bleq	c654 <__aeabi_dmul+0x1dc>
    c498:	442c      	add	r4, r5
    c49a:	ea81 0603 	eor.w	r6, r1, r3
    c49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c4aa:	bf18      	it	ne
    c4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c4b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
    c4b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    c4b8:	d038      	beq.n	c52c <__aeabi_dmul+0xb4>
    c4ba:	fba0 ce02 	umull	ip, lr, r0, r2
    c4be:	f04f 0500 	mov.w	r5, #0
    c4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    c4c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
    c4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    c4ce:	f04f 0600 	mov.w	r6, #0
    c4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    c4d6:	f09c 0f00 	teq	ip, #0
    c4da:	bf18      	it	ne
    c4dc:	f04e 0e01 	orrne.w	lr, lr, #1
    c4e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
    c4e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
    c4e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
    c4ec:	d204      	bcs.n	c4f8 <__aeabi_dmul+0x80>
    c4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c4f2:	416d      	adcs	r5, r5
    c4f4:	eb46 0606 	adc.w	r6, r6, r6
    c4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c50c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
    c510:	bf88      	it	hi
    c512:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
    c516:	d81e      	bhi.n	c556 <__aeabi_dmul+0xde>
    c518:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
    c51c:	bf08      	it	eq
    c51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c522:	f150 0000 	adcs.w	r0, r0, #0
    c526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c52a:	bd70      	pop	{r4, r5, r6, pc}
    c52c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
    c530:	ea46 0101 	orr.w	r1, r6, r1
    c534:	ea40 0002 	orr.w	r0, r0, r2
    c538:	ea81 0103 	eor.w	r1, r1, r3
    c53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c540:	bfc2      	ittt	gt
    c542:	ebd4 050c 	rsbsgt	r5, r4, ip
    c546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c54a:	bd70      	popgt	{r4, r5, r6, pc}
    c54c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
    c550:	f04f 0e00 	mov.w	lr, #0
    c554:	3c01      	subs	r4, #1
    c556:	f300 80ab 	bgt.w	c6b0 <__aeabi_dmul+0x238>
    c55a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
    c55e:	bfde      	ittt	le
    c560:	2000      	movle	r0, #0
    c562:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
    c566:	bd70      	pople	{r4, r5, r6, pc}
    c568:	f1c4 0400 	rsb	r4, r4, #0
    c56c:	3c20      	subs	r4, #32
    c56e:	da35      	bge.n	c5dc <__aeabi_dmul+0x164>
    c570:	340c      	adds	r4, #12
    c572:	dc1b      	bgt.n	c5ac <__aeabi_dmul+0x134>
    c574:	f104 0414 	add.w	r4, r4, #20
    c578:	f1c4 0520 	rsb	r5, r4, #32
    c57c:	fa00 f305 	lsl.w	r3, r0, r5
    c580:	fa20 f004 	lsr.w	r0, r0, r4
    c584:	fa01 f205 	lsl.w	r2, r1, r5
    c588:	ea40 0002 	orr.w	r0, r0, r2
    c58c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
    c590:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
    c594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c598:	fa21 f604 	lsr.w	r6, r1, r4
    c59c:	eb42 0106 	adc.w	r1, r2, r6
    c5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c5a4:	bf08      	it	eq
    c5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c5aa:	bd70      	pop	{r4, r5, r6, pc}
    c5ac:	f1c4 040c 	rsb	r4, r4, #12
    c5b0:	f1c4 0520 	rsb	r5, r4, #32
    c5b4:	fa00 f304 	lsl.w	r3, r0, r4
    c5b8:	fa20 f005 	lsr.w	r0, r0, r5
    c5bc:	fa01 f204 	lsl.w	r2, r1, r4
    c5c0:	ea40 0002 	orr.w	r0, r0, r2
    c5c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
    c5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c5cc:	f141 0100 	adc.w	r1, r1, #0
    c5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c5d4:	bf08      	it	eq
    c5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c5da:	bd70      	pop	{r4, r5, r6, pc}
    c5dc:	f1c4 0520 	rsb	r5, r4, #32
    c5e0:	fa00 f205 	lsl.w	r2, r0, r5
    c5e4:	ea4e 0e02 	orr.w	lr, lr, r2
    c5e8:	fa20 f304 	lsr.w	r3, r0, r4
    c5ec:	fa01 f205 	lsl.w	r2, r1, r5
    c5f0:	ea43 0302 	orr.w	r3, r3, r2
    c5f4:	fa21 f004 	lsr.w	r0, r1, r4
    c5f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
    c5fc:	fa21 f204 	lsr.w	r2, r1, r4
    c600:	ea20 0002 	bic.w	r0, r0, r2
    c604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c60c:	bf08      	it	eq
    c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c612:	bd70      	pop	{r4, r5, r6, pc}
    c614:	f094 0f00 	teq	r4, #0
    c618:	d10f      	bne.n	c63a <__aeabi_dmul+0x1c2>
    c61a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
    c61e:	0040      	lsls	r0, r0, #1
    c620:	eb41 0101 	adc.w	r1, r1, r1
    c624:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
    c628:	bf08      	it	eq
    c62a:	3c01      	subeq	r4, #1
    c62c:	d0f7      	beq.n	c61e <__aeabi_dmul+0x1a6>
    c62e:	ea41 0106 	orr.w	r1, r1, r6
    c632:	f095 0f00 	teq	r5, #0
    c636:	bf18      	it	ne
    c638:	4770      	bxne	lr
    c63a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
    c63e:	0052      	lsls	r2, r2, #1
    c640:	eb43 0303 	adc.w	r3, r3, r3
    c644:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
    c648:	bf08      	it	eq
    c64a:	3d01      	subeq	r5, #1
    c64c:	d0f7      	beq.n	c63e <__aeabi_dmul+0x1c6>
    c64e:	ea43 0306 	orr.w	r3, r3, r6
    c652:	4770      	bx	lr
    c654:	ea94 0f0c 	teq	r4, ip
    c658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c65c:	bf18      	it	ne
    c65e:	ea95 0f0c 	teqne	r5, ip
    c662:	d00c      	beq.n	c67e <__aeabi_dmul+0x206>
    c664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c668:	bf18      	it	ne
    c66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c66e:	d1d1      	bne.n	c614 <__aeabi_dmul+0x19c>
    c670:	ea81 0103 	eor.w	r1, r1, r3
    c674:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
    c678:	f04f 0000 	mov.w	r0, #0
    c67c:	bd70      	pop	{r4, r5, r6, pc}
    c67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c682:	bf06      	itte	eq
    c684:	4610      	moveq	r0, r2
    c686:	4619      	moveq	r1, r3
    c688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c68c:	d019      	beq.n	c6c2 <__aeabi_dmul+0x24a>
    c68e:	ea94 0f0c 	teq	r4, ip
    c692:	d102      	bne.n	c69a <__aeabi_dmul+0x222>
    c694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c698:	d113      	bne.n	c6c2 <__aeabi_dmul+0x24a>
    c69a:	ea95 0f0c 	teq	r5, ip
    c69e:	d105      	bne.n	c6ac <__aeabi_dmul+0x234>
    c6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c6a4:	bf1c      	itt	ne
    c6a6:	4610      	movne	r0, r2
    c6a8:	4619      	movne	r1, r3
    c6aa:	d10a      	bne.n	c6c2 <__aeabi_dmul+0x24a>
    c6ac:	ea81 0103 	eor.w	r1, r1, r3
    c6b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
    c6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
    c6b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
    c6bc:	f04f 0000 	mov.w	r0, #0
    c6c0:	bd70      	pop	{r4, r5, r6, pc}
    c6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
    c6c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
    c6ca:	bd70      	pop	{r4, r5, r6, pc}

0000c6cc <__aeabi_ddiv>:
    c6cc:	b570      	push	{r4, r5, r6, lr}
    c6ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
    c6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
    c6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c6da:	bf1d      	ittte	ne
    c6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c6e0:	ea94 0f0c 	teqne	r4, ip
    c6e4:	ea95 0f0c 	teqne	r5, ip
    c6e8:	f000 f8a7 	bleq	c83a <__aeabi_ddiv+0x16e>
    c6ec:	eba4 0405 	sub.w	r4, r4, r5
    c6f0:	ea81 0e03 	eor.w	lr, r1, r3
    c6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c6fc:	f000 8088 	beq.w	c810 <__aeabi_ddiv+0x144>
    c700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c704:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
    c708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c710:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c720:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
    c724:	429d      	cmp	r5, r3
    c726:	bf08      	it	eq
    c728:	4296      	cmpeq	r6, r2
    c72a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
    c72e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
    c732:	d202      	bcs.n	c73a <__aeabi_ddiv+0x6e>
    c734:	085b      	lsrs	r3, r3, #1
    c736:	ea4f 0232 	mov.w	r2, r2, rrx
    c73a:	1ab6      	subs	r6, r6, r2
    c73c:	eb65 0503 	sbc.w	r5, r5, r3
    c740:	085b      	lsrs	r3, r3, #1
    c742:	ea4f 0232 	mov.w	r2, r2, rrx
    c746:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
    c74a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
    c74e:	ebb6 0e02 	subs.w	lr, r6, r2
    c752:	eb75 0e03 	sbcs.w	lr, r5, r3
    c756:	bf22      	ittt	cs
    c758:	1ab6      	subcs	r6, r6, r2
    c75a:	4675      	movcs	r5, lr
    c75c:	ea40 000c 	orrcs.w	r0, r0, ip
    c760:	085b      	lsrs	r3, r3, #1
    c762:	ea4f 0232 	mov.w	r2, r2, rrx
    c766:	ebb6 0e02 	subs.w	lr, r6, r2
    c76a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c76e:	bf22      	ittt	cs
    c770:	1ab6      	subcs	r6, r6, r2
    c772:	4675      	movcs	r5, lr
    c774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c778:	085b      	lsrs	r3, r3, #1
    c77a:	ea4f 0232 	mov.w	r2, r2, rrx
    c77e:	ebb6 0e02 	subs.w	lr, r6, r2
    c782:	eb75 0e03 	sbcs.w	lr, r5, r3
    c786:	bf22      	ittt	cs
    c788:	1ab6      	subcs	r6, r6, r2
    c78a:	4675      	movcs	r5, lr
    c78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c790:	085b      	lsrs	r3, r3, #1
    c792:	ea4f 0232 	mov.w	r2, r2, rrx
    c796:	ebb6 0e02 	subs.w	lr, r6, r2
    c79a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c79e:	bf22      	ittt	cs
    c7a0:	1ab6      	subcs	r6, r6, r2
    c7a2:	4675      	movcs	r5, lr
    c7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c7a8:	ea55 0e06 	orrs.w	lr, r5, r6
    c7ac:	d018      	beq.n	c7e0 <__aeabi_ddiv+0x114>
    c7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c7ca:	d1c0      	bne.n	c74e <__aeabi_ddiv+0x82>
    c7cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
    c7d0:	d10b      	bne.n	c7ea <__aeabi_ddiv+0x11e>
    c7d2:	ea41 0100 	orr.w	r1, r1, r0
    c7d6:	f04f 0000 	mov.w	r0, #0
    c7da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
    c7de:	e7b6      	b.n	c74e <__aeabi_ddiv+0x82>
    c7e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
    c7e4:	bf04      	itt	eq
    c7e6:	4301      	orreq	r1, r0
    c7e8:	2000      	moveq	r0, #0
    c7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
    c7ee:	bf88      	it	hi
    c7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
    c7f4:	f63f aeaf 	bhi.w	c556 <__aeabi_dmul+0xde>
    c7f8:	ebb5 0c03 	subs.w	ip, r5, r3
    c7fc:	bf04      	itt	eq
    c7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    c802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c806:	f150 0000 	adcs.w	r0, r0, #0
    c80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c80e:	bd70      	pop	{r4, r5, r6, pc}
    c810:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
    c814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c81c:	bfc2      	ittt	gt
    c81e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c826:	bd70      	popgt	{r4, r5, r6, pc}
    c828:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
    c82c:	f04f 0e00 	mov.w	lr, #0
    c830:	3c01      	subs	r4, #1
    c832:	e690      	b.n	c556 <__aeabi_dmul+0xde>
    c834:	ea45 0e06 	orr.w	lr, r5, r6
    c838:	e68d      	b.n	c556 <__aeabi_dmul+0xde>
    c83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c83e:	ea94 0f0c 	teq	r4, ip
    c842:	bf08      	it	eq
    c844:	ea95 0f0c 	teqeq	r5, ip
    c848:	f43f af3b 	beq.w	c6c2 <__aeabi_dmul+0x24a>
    c84c:	ea94 0f0c 	teq	r4, ip
    c850:	d10a      	bne.n	c868 <__aeabi_ddiv+0x19c>
    c852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c856:	f47f af34 	bne.w	c6c2 <__aeabi_dmul+0x24a>
    c85a:	ea95 0f0c 	teq	r5, ip
    c85e:	f47f af25 	bne.w	c6ac <__aeabi_dmul+0x234>
    c862:	4610      	mov	r0, r2
    c864:	4619      	mov	r1, r3
    c866:	e72c      	b.n	c6c2 <__aeabi_dmul+0x24a>
    c868:	ea95 0f0c 	teq	r5, ip
    c86c:	d106      	bne.n	c87c <__aeabi_ddiv+0x1b0>
    c86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c872:	f43f aefd 	beq.w	c670 <__aeabi_dmul+0x1f8>
    c876:	4610      	mov	r0, r2
    c878:	4619      	mov	r1, r3
    c87a:	e722      	b.n	c6c2 <__aeabi_dmul+0x24a>
    c87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c880:	bf18      	it	ne
    c882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c886:	f47f aec5 	bne.w	c614 <__aeabi_dmul+0x19c>
    c88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c88e:	f47f af0d 	bne.w	c6ac <__aeabi_dmul+0x234>
    c892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c896:	f47f aeeb 	bne.w	c670 <__aeabi_dmul+0x1f8>
    c89a:	e712      	b.n	c6c2 <__aeabi_dmul+0x24a>

0000c89c <__gedf2>:
    c89c:	f04f 3cff 	mov.w	ip, #4294967295
    c8a0:	e006      	b.n	c8b0 <__cmpdf2+0x4>
    c8a2:	bf00      	nop

0000c8a4 <__ledf2>:
    c8a4:	f04f 0c01 	mov.w	ip, #1
    c8a8:	e002      	b.n	c8b0 <__cmpdf2+0x4>
    c8aa:	bf00      	nop

0000c8ac <__cmpdf2>:
    c8ac:	f04f 0c01 	mov.w	ip, #1
    c8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
    c8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c8c0:	bf18      	it	ne
    c8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c8c6:	d01b      	beq.n	c900 <__cmpdf2+0x54>
    c8c8:	b001      	add	sp, #4
    c8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c8ce:	bf0c      	ite	eq
    c8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c8d4:	ea91 0f03 	teqne	r1, r3
    c8d8:	bf02      	ittt	eq
    c8da:	ea90 0f02 	teqeq	r0, r2
    c8de:	2000      	moveq	r0, #0
    c8e0:	4770      	bxeq	lr
    c8e2:	f110 0f00 	cmn.w	r0, #0
    c8e6:	ea91 0f03 	teq	r1, r3
    c8ea:	bf58      	it	pl
    c8ec:	4299      	cmppl	r1, r3
    c8ee:	bf08      	it	eq
    c8f0:	4290      	cmpeq	r0, r2
    c8f2:	bf2c      	ite	cs
    c8f4:	17d8      	asrcs	r0, r3, #31
    c8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c8fa:	f040 0001 	orr.w	r0, r0, #1
    c8fe:	4770      	bx	lr
    c900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c908:	d102      	bne.n	c910 <__cmpdf2+0x64>
    c90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c90e:	d107      	bne.n	c920 <__cmpdf2+0x74>
    c910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c918:	d1d6      	bne.n	c8c8 <__cmpdf2+0x1c>
    c91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c91e:	d0d3      	beq.n	c8c8 <__cmpdf2+0x1c>
    c920:	f85d 0b04 	ldr.w	r0, [sp], #4
    c924:	4770      	bx	lr
    c926:	bf00      	nop

0000c928 <__aeabi_cdrcmple>:
    c928:	4684      	mov	ip, r0
    c92a:	4610      	mov	r0, r2
    c92c:	4662      	mov	r2, ip
    c92e:	468c      	mov	ip, r1
    c930:	4619      	mov	r1, r3
    c932:	4663      	mov	r3, ip
    c934:	e000      	b.n	c938 <__aeabi_cdcmpeq>
    c936:	bf00      	nop

0000c938 <__aeabi_cdcmpeq>:
    c938:	b501      	push	{r0, lr}
    c93a:	f7ff ffb7 	bl	c8ac <__cmpdf2>
    c93e:	2800      	cmp	r0, #0
    c940:	bf48      	it	mi
    c942:	f110 0f00 	cmnmi.w	r0, #0
    c946:	bd01      	pop	{r0, pc}

0000c948 <__aeabi_dcmpeq>:
    c948:	f84d ed08 	str.w	lr, [sp, #-8]!
    c94c:	f7ff fff4 	bl	c938 <__aeabi_cdcmpeq>
    c950:	bf0c      	ite	eq
    c952:	2001      	moveq	r0, #1
    c954:	2000      	movne	r0, #0
    c956:	f85d fb08 	ldr.w	pc, [sp], #8
    c95a:	bf00      	nop

0000c95c <__aeabi_dcmplt>:
    c95c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c960:	f7ff ffea 	bl	c938 <__aeabi_cdcmpeq>
    c964:	bf34      	ite	cc
    c966:	2001      	movcc	r0, #1
    c968:	2000      	movcs	r0, #0
    c96a:	f85d fb08 	ldr.w	pc, [sp], #8
    c96e:	bf00      	nop

0000c970 <__aeabi_dcmple>:
    c970:	f84d ed08 	str.w	lr, [sp, #-8]!
    c974:	f7ff ffe0 	bl	c938 <__aeabi_cdcmpeq>
    c978:	bf94      	ite	ls
    c97a:	2001      	movls	r0, #1
    c97c:	2000      	movhi	r0, #0
    c97e:	f85d fb08 	ldr.w	pc, [sp], #8
    c982:	bf00      	nop

0000c984 <__aeabi_dcmpge>:
    c984:	f84d ed08 	str.w	lr, [sp, #-8]!
    c988:	f7ff ffce 	bl	c928 <__aeabi_cdrcmple>
    c98c:	bf94      	ite	ls
    c98e:	2001      	movls	r0, #1
    c990:	2000      	movhi	r0, #0
    c992:	f85d fb08 	ldr.w	pc, [sp], #8
    c996:	bf00      	nop

0000c998 <__aeabi_dcmpgt>:
    c998:	f84d ed08 	str.w	lr, [sp, #-8]!
    c99c:	f7ff ffc4 	bl	c928 <__aeabi_cdrcmple>
    c9a0:	bf34      	ite	cc
    c9a2:	2001      	movcc	r0, #1
    c9a4:	2000      	movcs	r0, #0
    c9a6:	f85d fb08 	ldr.w	pc, [sp], #8
    c9aa:	bf00      	nop

0000c9ac <__aeabi_d2uiz>:
    c9ac:	004a      	lsls	r2, r1, #1
    c9ae:	d211      	bcs.n	c9d4 <__aeabi_d2uiz+0x28>
    c9b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
    c9b4:	d211      	bcs.n	c9da <__aeabi_d2uiz+0x2e>
    c9b6:	d50d      	bpl.n	c9d4 <__aeabi_d2uiz+0x28>
    c9b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
    c9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c9c0:	d40e      	bmi.n	c9e0 <__aeabi_d2uiz+0x34>
    c9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c9c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    c9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c9ce:	fa23 f002 	lsr.w	r0, r3, r2
    c9d2:	4770      	bx	lr
    c9d4:	f04f 0000 	mov.w	r0, #0
    c9d8:	4770      	bx	lr
    c9da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c9de:	d102      	bne.n	c9e6 <__aeabi_d2uiz+0x3a>
    c9e0:	f04f 30ff 	mov.w	r0, #4294967295
    c9e4:	4770      	bx	lr
    c9e6:	f04f 0000 	mov.w	r0, #0
    c9ea:	4770      	bx	lr

0000c9ec <__aeabi_d2f>:
    c9ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c9f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
    c9f4:	bf24      	itt	cs
    c9f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
    c9fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
    c9fe:	d90d      	bls.n	ca1c <__aeabi_d2f+0x30>
    ca00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
    ca04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ca08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    ca0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
    ca10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    ca14:	bf08      	it	eq
    ca16:	f020 0001 	biceq.w	r0, r0, #1
    ca1a:	4770      	bx	lr
    ca1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
    ca20:	d121      	bne.n	ca66 <__aeabi_d2f+0x7a>
    ca22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
    ca26:	bfbc      	itt	lt
    ca28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
    ca2c:	4770      	bxlt	lr
    ca2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
    ca32:	ea4f 5252 	mov.w	r2, r2, lsr #21
    ca36:	f1c2 0218 	rsb	r2, r2, #24
    ca3a:	f1c2 0c20 	rsb	ip, r2, #32
    ca3e:	fa10 f30c 	lsls.w	r3, r0, ip
    ca42:	fa20 f002 	lsr.w	r0, r0, r2
    ca46:	bf18      	it	ne
    ca48:	f040 0001 	orrne.w	r0, r0, #1
    ca4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ca50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    ca54:	fa03 fc0c 	lsl.w	ip, r3, ip
    ca58:	ea40 000c 	orr.w	r0, r0, ip
    ca5c:	fa23 f302 	lsr.w	r3, r3, r2
    ca60:	ea4f 0343 	mov.w	r3, r3, lsl #1
    ca64:	e7cc      	b.n	ca00 <__aeabi_d2f+0x14>
    ca66:	ea7f 5362 	mvns.w	r3, r2, asr #21
    ca6a:	d107      	bne.n	ca7c <__aeabi_d2f+0x90>
    ca6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    ca70:	bf1e      	ittt	ne
    ca72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
    ca76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
    ca7a:	4770      	bxne	lr
    ca7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
    ca80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
    ca84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
    ca88:	4770      	bx	lr
    ca8a:	bf00      	nop
    ca8c:	0000      	movs	r0, r0
	...

0000ca90 <memchr>:
    ca90:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
    ca94:	2a10      	cmp	r2, #16
    ca96:	db2b      	blt.n	caf0 <memchr+0x60>
    ca98:	f010 0f07 	tst.w	r0, #7
    ca9c:	d008      	beq.n	cab0 <memchr+0x20>
    ca9e:	f810 3b01 	ldrb.w	r3, [r0], #1
    caa2:	3a01      	subs	r2, #1
    caa4:	428b      	cmp	r3, r1
    caa6:	d02d      	beq.n	cb04 <memchr+0x74>
    caa8:	f010 0f07 	tst.w	r0, #7
    caac:	b342      	cbz	r2, cb00 <memchr+0x70>
    caae:	d1f6      	bne.n	ca9e <memchr+0xe>
    cab0:	b4f0      	push	{r4, r5, r6, r7}
    cab2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cab6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    caba:	f022 0407 	bic.w	r4, r2, #7
    cabe:	f07f 0700 	mvns.w	r7, #0
    cac2:	2300      	movs	r3, #0
    cac4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    cac8:	3c08      	subs	r4, #8
    caca:	ea85 0501 	eor.w	r5, r5, r1
    cace:	ea86 0601 	eor.w	r6, r6, r1
    cad2:	fa85 f547 	uadd8	r5, r5, r7
    cad6:	faa3 f587 	sel	r5, r3, r7
    cada:	fa86 f647 	uadd8	r6, r6, r7
    cade:	faa5 f687 	sel	r6, r5, r7
    cae2:	b98e      	cbnz	r6, cb08 <memchr+0x78>
    cae4:	d1ee      	bne.n	cac4 <memchr+0x34>
    cae6:	bcf0      	pop	{r4, r5, r6, r7}
    cae8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
    caec:	f002 0207 	and.w	r2, r2, #7
    caf0:	b132      	cbz	r2, cb00 <memchr+0x70>
    caf2:	f810 3b01 	ldrb.w	r3, [r0], #1
    caf6:	3a01      	subs	r2, #1
    caf8:	ea83 0301 	eor.w	r3, r3, r1
    cafc:	b113      	cbz	r3, cb04 <memchr+0x74>
    cafe:	d1f8      	bne.n	caf2 <memchr+0x62>
    cb00:	2000      	movs	r0, #0
    cb02:	4770      	bx	lr
    cb04:	3801      	subs	r0, #1
    cb06:	4770      	bx	lr
    cb08:	2d00      	cmp	r5, #0
    cb0a:	bf06      	itte	eq
    cb0c:	4635      	moveq	r5, r6
    cb0e:	3803      	subeq	r0, #3
    cb10:	3807      	subne	r0, #7
    cb12:	f015 0f01 	tst.w	r5, #1
    cb16:	d107      	bne.n	cb28 <memchr+0x98>
    cb18:	3001      	adds	r0, #1
    cb1a:	f415 7f80 	tst.w	r5, #256	@ 0x100
    cb1e:	bf02      	ittt	eq
    cb20:	3001      	addeq	r0, #1
    cb22:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
    cb26:	3001      	addeq	r0, #1
    cb28:	bcf0      	pop	{r4, r5, r6, r7}
    cb2a:	3801      	subs	r0, #1
    cb2c:	4770      	bx	lr
    cb2e:	bf00      	nop

0000cb30 <memcpy>:
    cb30:	4684      	mov	ip, r0
    cb32:	ea41 0300 	orr.w	r3, r1, r0
    cb36:	f013 0303 	ands.w	r3, r3, #3
    cb3a:	d16d      	bne.n	cc18 <memcpy+0xe8>
    cb3c:	3a40      	subs	r2, #64	@ 0x40
    cb3e:	d341      	bcc.n	cbc4 <memcpy+0x94>
    cb40:	f851 3b04 	ldr.w	r3, [r1], #4
    cb44:	f840 3b04 	str.w	r3, [r0], #4
    cb48:	f851 3b04 	ldr.w	r3, [r1], #4
    cb4c:	f840 3b04 	str.w	r3, [r0], #4
    cb50:	f851 3b04 	ldr.w	r3, [r1], #4
    cb54:	f840 3b04 	str.w	r3, [r0], #4
    cb58:	f851 3b04 	ldr.w	r3, [r1], #4
    cb5c:	f840 3b04 	str.w	r3, [r0], #4
    cb60:	f851 3b04 	ldr.w	r3, [r1], #4
    cb64:	f840 3b04 	str.w	r3, [r0], #4
    cb68:	f851 3b04 	ldr.w	r3, [r1], #4
    cb6c:	f840 3b04 	str.w	r3, [r0], #4
    cb70:	f851 3b04 	ldr.w	r3, [r1], #4
    cb74:	f840 3b04 	str.w	r3, [r0], #4
    cb78:	f851 3b04 	ldr.w	r3, [r1], #4
    cb7c:	f840 3b04 	str.w	r3, [r0], #4
    cb80:	f851 3b04 	ldr.w	r3, [r1], #4
    cb84:	f840 3b04 	str.w	r3, [r0], #4
    cb88:	f851 3b04 	ldr.w	r3, [r1], #4
    cb8c:	f840 3b04 	str.w	r3, [r0], #4
    cb90:	f851 3b04 	ldr.w	r3, [r1], #4
    cb94:	f840 3b04 	str.w	r3, [r0], #4
    cb98:	f851 3b04 	ldr.w	r3, [r1], #4
    cb9c:	f840 3b04 	str.w	r3, [r0], #4
    cba0:	f851 3b04 	ldr.w	r3, [r1], #4
    cba4:	f840 3b04 	str.w	r3, [r0], #4
    cba8:	f851 3b04 	ldr.w	r3, [r1], #4
    cbac:	f840 3b04 	str.w	r3, [r0], #4
    cbb0:	f851 3b04 	ldr.w	r3, [r1], #4
    cbb4:	f840 3b04 	str.w	r3, [r0], #4
    cbb8:	f851 3b04 	ldr.w	r3, [r1], #4
    cbbc:	f840 3b04 	str.w	r3, [r0], #4
    cbc0:	3a40      	subs	r2, #64	@ 0x40
    cbc2:	d2bd      	bcs.n	cb40 <memcpy+0x10>
    cbc4:	3230      	adds	r2, #48	@ 0x30
    cbc6:	d311      	bcc.n	cbec <memcpy+0xbc>
    cbc8:	f851 3b04 	ldr.w	r3, [r1], #4
    cbcc:	f840 3b04 	str.w	r3, [r0], #4
    cbd0:	f851 3b04 	ldr.w	r3, [r1], #4
    cbd4:	f840 3b04 	str.w	r3, [r0], #4
    cbd8:	f851 3b04 	ldr.w	r3, [r1], #4
    cbdc:	f840 3b04 	str.w	r3, [r0], #4
    cbe0:	f851 3b04 	ldr.w	r3, [r1], #4
    cbe4:	f840 3b04 	str.w	r3, [r0], #4
    cbe8:	3a10      	subs	r2, #16
    cbea:	d2ed      	bcs.n	cbc8 <memcpy+0x98>
    cbec:	320c      	adds	r2, #12
    cbee:	d305      	bcc.n	cbfc <memcpy+0xcc>
    cbf0:	f851 3b04 	ldr.w	r3, [r1], #4
    cbf4:	f840 3b04 	str.w	r3, [r0], #4
    cbf8:	3a04      	subs	r2, #4
    cbfa:	d2f9      	bcs.n	cbf0 <memcpy+0xc0>
    cbfc:	3204      	adds	r2, #4
    cbfe:	d008      	beq.n	cc12 <memcpy+0xe2>
    cc00:	07d2      	lsls	r2, r2, #31
    cc02:	bf1c      	itt	ne
    cc04:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc08:	f800 3b01 	strbne.w	r3, [r0], #1
    cc0c:	d301      	bcc.n	cc12 <memcpy+0xe2>
    cc0e:	880b      	ldrh	r3, [r1, #0]
    cc10:	8003      	strh	r3, [r0, #0]
    cc12:	4660      	mov	r0, ip
    cc14:	4770      	bx	lr
    cc16:	bf00      	nop
    cc18:	2a08      	cmp	r2, #8
    cc1a:	d313      	bcc.n	cc44 <memcpy+0x114>
    cc1c:	078b      	lsls	r3, r1, #30
    cc1e:	d08d      	beq.n	cb3c <memcpy+0xc>
    cc20:	f010 0303 	ands.w	r3, r0, #3
    cc24:	d08a      	beq.n	cb3c <memcpy+0xc>
    cc26:	f1c3 0304 	rsb	r3, r3, #4
    cc2a:	1ad2      	subs	r2, r2, r3
    cc2c:	07db      	lsls	r3, r3, #31
    cc2e:	bf1c      	itt	ne
    cc30:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc34:	f800 3b01 	strbne.w	r3, [r0], #1
    cc38:	d380      	bcc.n	cb3c <memcpy+0xc>
    cc3a:	f831 3b02 	ldrh.w	r3, [r1], #2
    cc3e:	f820 3b02 	strh.w	r3, [r0], #2
    cc42:	e77b      	b.n	cb3c <memcpy+0xc>
    cc44:	3a04      	subs	r2, #4
    cc46:	d3d9      	bcc.n	cbfc <memcpy+0xcc>
    cc48:	3a01      	subs	r2, #1
    cc4a:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc4e:	f800 3b01 	strb.w	r3, [r0], #1
    cc52:	d2f9      	bcs.n	cc48 <memcpy+0x118>
    cc54:	780b      	ldrb	r3, [r1, #0]
    cc56:	7003      	strb	r3, [r0, #0]
    cc58:	784b      	ldrb	r3, [r1, #1]
    cc5a:	7043      	strb	r3, [r0, #1]
    cc5c:	788b      	ldrb	r3, [r1, #2]
    cc5e:	7083      	strb	r3, [r0, #2]
    cc60:	4660      	mov	r0, ip
    cc62:	4770      	bx	lr
	...

0000cc80 <strlen>:
    cc80:	b430      	push	{r4, r5}
    cc82:	f890 f000 	pld	[r0]
    cc86:	f020 0107 	bic.w	r1, r0, #7
    cc8a:	f06f 0c00 	mvn.w	ip, #0
    cc8e:	f010 0407 	ands.w	r4, r0, #7
    cc92:	f891 f020 	pld	[r1, #32]
    cc96:	f040 8048 	bne.w	cd2a <strlen+0xaa>
    cc9a:	f04f 0400 	mov.w	r4, #0
    cc9e:	f06f 0007 	mvn.w	r0, #7
    cca2:	e9d1 2300 	ldrd	r2, r3, [r1]
    cca6:	f891 f040 	pld	[r1, #64]	@ 0x40
    ccaa:	f100 0008 	add.w	r0, r0, #8
    ccae:	fa82 f24c 	uadd8	r2, r2, ip
    ccb2:	faa4 f28c 	sel	r2, r4, ip
    ccb6:	fa83 f34c 	uadd8	r3, r3, ip
    ccba:	faa2 f38c 	sel	r3, r2, ip
    ccbe:	bb4b      	cbnz	r3, cd14 <strlen+0x94>
    ccc0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ccc4:	fa82 f24c 	uadd8	r2, r2, ip
    ccc8:	f100 0008 	add.w	r0, r0, #8
    cccc:	faa4 f28c 	sel	r2, r4, ip
    ccd0:	fa83 f34c 	uadd8	r3, r3, ip
    ccd4:	faa2 f38c 	sel	r3, r2, ip
    ccd8:	b9e3      	cbnz	r3, cd14 <strlen+0x94>
    ccda:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ccde:	fa82 f24c 	uadd8	r2, r2, ip
    cce2:	f100 0008 	add.w	r0, r0, #8
    cce6:	faa4 f28c 	sel	r2, r4, ip
    ccea:	fa83 f34c 	uadd8	r3, r3, ip
    ccee:	faa2 f38c 	sel	r3, r2, ip
    ccf2:	b97b      	cbnz	r3, cd14 <strlen+0x94>
    ccf4:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ccf8:	f101 0120 	add.w	r1, r1, #32
    ccfc:	fa82 f24c 	uadd8	r2, r2, ip
    cd00:	f100 0008 	add.w	r0, r0, #8
    cd04:	faa4 f28c 	sel	r2, r4, ip
    cd08:	fa83 f34c 	uadd8	r3, r3, ip
    cd0c:	faa2 f38c 	sel	r3, r2, ip
    cd10:	2b00      	cmp	r3, #0
    cd12:	d0c6      	beq.n	cca2 <strlen+0x22>
    cd14:	2a00      	cmp	r2, #0
    cd16:	bf04      	itt	eq
    cd18:	3004      	addeq	r0, #4
    cd1a:	461a      	moveq	r2, r3
    cd1c:	ba12      	rev	r2, r2
    cd1e:	fab2 f282 	clz	r2, r2
    cd22:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    cd26:	bc30      	pop	{r4, r5}
    cd28:	4770      	bx	lr
    cd2a:	e9d1 2300 	ldrd	r2, r3, [r1]
    cd2e:	f004 0503 	and.w	r5, r4, #3
    cd32:	f1c4 0000 	rsb	r0, r4, #0
    cd36:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cd3a:	f014 0f04 	tst.w	r4, #4
    cd3e:	f891 f040 	pld	[r1, #64]	@ 0x40
    cd42:	fa0c f505 	lsl.w	r5, ip, r5
    cd46:	ea62 0205 	orn	r2, r2, r5
    cd4a:	bf1c      	itt	ne
    cd4c:	ea63 0305 	ornne	r3, r3, r5
    cd50:	4662      	movne	r2, ip
    cd52:	f04f 0400 	mov.w	r4, #0
    cd56:	e7aa      	b.n	ccae <strlen+0x2e>

0000cd58 <__aeabi_dcmpun>:
    cd58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cd5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd60:	d102      	bne.n	cd68 <__aeabi_dcmpun+0x10>
    cd62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cd66:	d10a      	bne.n	cd7e <__aeabi_dcmpun+0x26>
    cd68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd70:	d102      	bne.n	cd78 <__aeabi_dcmpun+0x20>
    cd72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd76:	d102      	bne.n	cd7e <__aeabi_dcmpun+0x26>
    cd78:	f04f 0000 	mov.w	r0, #0
    cd7c:	4770      	bx	lr
    cd7e:	f04f 0001 	mov.w	r0, #1
    cd82:	4770      	bx	lr

0000cd84 <__aeabi_d2iz>:
    cd84:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cd88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
    cd8c:	d215      	bcs.n	cdba <__aeabi_d2iz+0x36>
    cd8e:	d511      	bpl.n	cdb4 <__aeabi_d2iz+0x30>
    cd90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
    cd94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cd98:	d912      	bls.n	cdc0 <__aeabi_d2iz+0x3c>
    cd9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cd9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    cda2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cda6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
    cdaa:	fa23 f002 	lsr.w	r0, r3, r2
    cdae:	bf18      	it	ne
    cdb0:	4240      	negne	r0, r0
    cdb2:	4770      	bx	lr
    cdb4:	f04f 0000 	mov.w	r0, #0
    cdb8:	4770      	bx	lr
    cdba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cdbe:	d105      	bne.n	cdcc <__aeabi_d2iz+0x48>
    cdc0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
    cdc4:	bf08      	it	eq
    cdc6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
    cdca:	4770      	bx	lr
    cdcc:	f04f 0000 	mov.w	r0, #0
    cdd0:	4770      	bx	lr
    cdd2:	bf00      	nop

0000cdd4 <main>:

#define LCP_FREE_RTOS
//#define SENSORS_Test

int main(void)
{
    cdd4:	b500      	push	{lr}
    cdd6:	b083      	sub	sp, #12
    /** initialize mcu features */
    artemis_mcu_initialize();
    cdd8:	f00e fcc8 	bl	1b76c <artemis_mcu_initialize>

    /** initialize debug features */
    artemis_debug_initialize();
    cddc:	f00e fa62 	bl	1b2a4 <artemis_debug_initialize>

    /** 1 second delay */
    am_util_delay_ms(1000);
    cde0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    cde4:	f003 fa8a 	bl	102fc <am_util_delay_ms>

    /* clear the screen output, if wanted */
    //am_util_stdio_terminal_clear();

    /** Test the Debug output */
    ARTEMIS_DEBUG_PRINTF("\n*****************************\n");
    cde8:	4869      	ldr	r0, [pc, #420]	@ (cf90 <main+0x1bc>)
    cdea:	f004 f93d 	bl	11068 <am_util_stdio_printf>
    cdee:	4868      	ldr	r0, [pc, #416]	@ (cf90 <main+0x1bc>)
    cdf0:	f011 f8c2 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("DEBUG :: LCP Controlboard");
    cdf4:	4867      	ldr	r0, [pc, #412]	@ (cf94 <main+0x1c0>)
    cdf6:	f004 f937 	bl	11068 <am_util_stdio_printf>
    cdfa:	4866      	ldr	r0, [pc, #408]	@ (cf94 <main+0x1c0>)
    cdfc:	f011 f8bc 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\n*****************************\n");
    ce00:	4863      	ldr	r0, [pc, #396]	@ (cf90 <main+0x1bc>)
    ce02:	f004 f931 	bl	11068 <am_util_stdio_printf>
    ce06:	4862      	ldr	r0, [pc, #392]	@ (cf90 <main+0x1bc>)
    ce08:	f011 f8b6 	bl	1df78 <datalogger_log_debug>

    /** initialize time functions */
    artemis_time_initialize();
    ce0c:	f00e ff52 	bl	1bcb4 <artemis_time_initialize>

    /** LEDS just for testing */
	am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_BSP_GPIO_LED_GREEN);
    ce10:	4b61      	ldr	r3, [pc, #388]	@ (cf98 <main+0x1c4>)
    ce12:	201f      	movs	r0, #31
    ce14:	6819      	ldr	r1, [r3, #0]
    ce16:	f012 fc03 	bl	1f620 <am_hal_gpio_pinconfig>
	am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_BSP_GPIO_LED_RED);
    ce1a:	4b60      	ldr	r3, [pc, #384]	@ (cf9c <main+0x1c8>)
    ce1c:	2020      	movs	r0, #32
    ce1e:	6819      	ldr	r1, [r3, #0]
    ce20:	f012 fbfe 	bl	1f620 <am_hal_gpio_pinconfig>
	am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_BSP_GPIO_LED_BLUE);
    ce24:	4b5e      	ldr	r3, [pc, #376]	@ (cfa0 <main+0x1cc>)
    ce26:	201d      	movs	r0, #29
    ce28:	6819      	ldr	r1, [r3, #0]
    ce2a:	f012 fbf9 	bl	1f620 <am_hal_gpio_pinconfig>
	am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    ce2e:	4b5d      	ldr	r3, [pc, #372]	@ (cfa4 <main+0x1d0>)
	am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    ce30:	2101      	movs	r1, #1
	am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    ce32:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
	am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    ce36:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
    ce3a:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90

    /** initialize sensors */
    STATE_initialize(SYSST_SimpleProfiler_mode);

    /** create tasks for PreDeploy_mode, Profile_mode, Popup_mode */
    configASSERT(xTaskCreate( (TaskFunction_t) STATE_Predeploy, "PreDeploy_task", 512, NULL, tskIDLE_PRIORITY + 4UL, NULL) == pdPASS);
    ce3e:	2400      	movs	r4, #0
	am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    ce40:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
    STATE_initialize(SYSST_SimpleProfiler_mode);
    ce44:	2002      	movs	r0, #2
	am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    ce46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    configASSERT(xTaskCreate( (TaskFunction_t) STATE_Predeploy, "PreDeploy_task", 512, NULL, tskIDLE_PRIORITY + 4UL, NULL) == pdPASS);
    ce4a:	2504      	movs	r5, #4
    STATE_initialize(SYSST_SimpleProfiler_mode);
    ce4c:	f00d ff22 	bl	1ac94 <STATE_initialize>
    configASSERT(xTaskCreate( (TaskFunction_t) STATE_Predeploy, "PreDeploy_task", 512, NULL, tskIDLE_PRIORITY + 4UL, NULL) == pdPASS);
    ce50:	e9cd 5400 	strd	r5, r4, [sp]
    ce54:	4954      	ldr	r1, [pc, #336]	@ (cfa8 <main+0x1d4>)
    ce56:	4855      	ldr	r0, [pc, #340]	@ (cfac <main+0x1d8>)
    ce58:	4623      	mov	r3, r4
    ce5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
    ce5e:	f001 fdb7 	bl	e9d0 <xTaskCreate>
    ce62:	2801      	cmp	r0, #1
    ce64:	d00d      	beq.n	ce82 <main+0xae>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    ce66:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ce6a:	f383 8811 	msr	BASEPRI, r3
    ce6e:	f3bf 8f6f 	isb	sy
    ce72:	f3bf 8f4f 	dsb	sy
    ce76:	494e      	ldr	r1, [pc, #312]	@ (cfb0 <main+0x1dc>)
    ce78:	484e      	ldr	r0, [pc, #312]	@ (cfb4 <main+0x1e0>)
    ce7a:	2242      	movs	r2, #66	@ 0x42
    ce7c:	f004 f8f4 	bl	11068 <am_util_stdio_printf>
    ce80:	e7fe      	b.n	ce80 <main+0xac>
    configASSERT(xTaskCreate( (TaskFunction_t) STATE_Profiler, "Profiler_task", 512, NULL, tskIDLE_PRIORITY + 4UL, NULL) == pdPASS);
    ce82:	e9cd 5400 	strd	r5, r4, [sp]
    ce86:	494c      	ldr	r1, [pc, #304]	@ (cfb8 <main+0x1e4>)
    ce88:	484c      	ldr	r0, [pc, #304]	@ (cfbc <main+0x1e8>)
    ce8a:	4623      	mov	r3, r4
    ce8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    ce90:	f001 fd9e 	bl	e9d0 <xTaskCreate>
    ce94:	2801      	cmp	r0, #1
    ce96:	d00d      	beq.n	ceb4 <main+0xe0>
    ce98:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ce9c:	f383 8811 	msr	BASEPRI, r3
    cea0:	f3bf 8f6f 	isb	sy
    cea4:	f3bf 8f4f 	dsb	sy
    cea8:	4941      	ldr	r1, [pc, #260]	@ (cfb0 <main+0x1dc>)
    ceaa:	4842      	ldr	r0, [pc, #264]	@ (cfb4 <main+0x1e0>)
    ceac:	2243      	movs	r2, #67	@ 0x43
    ceae:	f004 f8db 	bl	11068 <am_util_stdio_printf>
    ceb2:	e7fe      	b.n	ceb2 <main+0xde>
    configASSERT(xTaskCreate( (TaskFunction_t) STATE_Popup, "Popup_task", 256, NULL, tskIDLE_PRIORITY + 3UL, NULL) == pdPASS);
    ceb4:	2303      	movs	r3, #3
    ceb6:	e9cd 3400 	strd	r3, r4, [sp]
    ceba:	4941      	ldr	r1, [pc, #260]	@ (cfc0 <main+0x1ec>)
    cebc:	4841      	ldr	r0, [pc, #260]	@ (cfc4 <main+0x1f0>)
    cebe:	4623      	mov	r3, r4
    cec0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    cec4:	f001 fd84 	bl	e9d0 <xTaskCreate>
    cec8:	2801      	cmp	r0, #1
    ceca:	d00d      	beq.n	cee8 <main+0x114>
    cecc:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ced0:	f383 8811 	msr	BASEPRI, r3
    ced4:	f3bf 8f6f 	isb	sy
    ced8:	f3bf 8f4f 	dsb	sy
    cedc:	4934      	ldr	r1, [pc, #208]	@ (cfb0 <main+0x1dc>)
    cede:	4835      	ldr	r0, [pc, #212]	@ (cfb4 <main+0x1e0>)
    cee0:	2244      	movs	r2, #68	@ 0x44
    cee2:	f004 f8c1 	bl	11068 <am_util_stdio_printf>
    cee6:	e7fe      	b.n	cee6 <main+0x112>

    ARTEMIS_DEBUG_PRINTF("\n*****************************\n");
    cee8:	4829      	ldr	r0, [pc, #164]	@ (cf90 <main+0x1bc>)
    ARTEMIS_DEBUG_PRINTF("Do not get here\n");

    am_util_delay_ms(500);
    while (1)
    {
        ARTEMIS_DEBUG_PRINTF("do not get here in case of RTOS\n");
    ceea:	4c37      	ldr	r4, [pc, #220]	@ (cfc8 <main+0x1f4>)
    ARTEMIS_DEBUG_PRINTF("\n*****************************\n");
    ceec:	f004 f8bc 	bl	11068 <am_util_stdio_printf>
    cef0:	4827      	ldr	r0, [pc, #156]	@ (cf90 <main+0x1bc>)
    cef2:	f011 f841 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("FreeRTOS here\n");
    cef6:	4835      	ldr	r0, [pc, #212]	@ (cfcc <main+0x1f8>)
    cef8:	f004 f8b6 	bl	11068 <am_util_stdio_printf>
    cefc:	4833      	ldr	r0, [pc, #204]	@ (cfcc <main+0x1f8>)
    cefe:	f011 f83b 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("scheduler is going to start\n");
    cf02:	4833      	ldr	r0, [pc, #204]	@ (cfd0 <main+0x1fc>)
    cf04:	f004 f8b0 	bl	11068 <am_util_stdio_printf>
    cf08:	4831      	ldr	r0, [pc, #196]	@ (cfd0 <main+0x1fc>)
    cf0a:	f011 f835 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("*****************************\n\n");
    cf0e:	4831      	ldr	r0, [pc, #196]	@ (cfd4 <main+0x200>)
    cf10:	f004 f8aa 	bl	11068 <am_util_stdio_printf>
    cf14:	482f      	ldr	r0, [pc, #188]	@ (cfd4 <main+0x200>)
    cf16:	f011 f82f 	bl	1df78 <datalogger_log_debug>
    vTaskStartScheduler();
    cf1a:	f001 ff13 	bl	ed44 <vTaskStartScheduler>
    ARTEMIS_DEBUG_PRINTF("Do not get here\n");
    cf1e:	482e      	ldr	r0, [pc, #184]	@ (cfd8 <main+0x204>)
    cf20:	f004 f8a2 	bl	11068 <am_util_stdio_printf>
    cf24:	482c      	ldr	r0, [pc, #176]	@ (cfd8 <main+0x204>)
    cf26:	f011 f827 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\n*****************************\n");
    cf2a:	4819      	ldr	r0, [pc, #100]	@ (cf90 <main+0x1bc>)
    cf2c:	f004 f89c 	bl	11068 <am_util_stdio_printf>
    cf30:	4817      	ldr	r0, [pc, #92]	@ (cf90 <main+0x1bc>)
    cf32:	f011 f821 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("FreeRTOS here\n");
    cf36:	4825      	ldr	r0, [pc, #148]	@ (cfcc <main+0x1f8>)
    cf38:	f004 f896 	bl	11068 <am_util_stdio_printf>
    cf3c:	4823      	ldr	r0, [pc, #140]	@ (cfcc <main+0x1f8>)
    cf3e:	f011 f81b 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("scheduler is going to start\n");
    cf42:	4823      	ldr	r0, [pc, #140]	@ (cfd0 <main+0x1fc>)
    cf44:	f004 f890 	bl	11068 <am_util_stdio_printf>
    cf48:	4821      	ldr	r0, [pc, #132]	@ (cfd0 <main+0x1fc>)
    cf4a:	f011 f815 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("*****************************\n\n");
    cf4e:	4821      	ldr	r0, [pc, #132]	@ (cfd4 <main+0x200>)
    cf50:	f004 f88a 	bl	11068 <am_util_stdio_printf>
    cf54:	481f      	ldr	r0, [pc, #124]	@ (cfd4 <main+0x200>)
    cf56:	f011 f80f 	bl	1df78 <datalogger_log_debug>
    vTaskStartScheduler();
    cf5a:	f001 fef3 	bl	ed44 <vTaskStartScheduler>
    ARTEMIS_DEBUG_PRINTF("Do not get here\n");
    cf5e:	481e      	ldr	r0, [pc, #120]	@ (cfd8 <main+0x204>)
    cf60:	f004 f882 	bl	11068 <am_util_stdio_printf>
    cf64:	481c      	ldr	r0, [pc, #112]	@ (cfd8 <main+0x204>)
    cf66:	f011 f807 	bl	1df78 <datalogger_log_debug>
    am_util_delay_ms(500);
    cf6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
    cf6e:	f003 f9c5 	bl	102fc <am_util_delay_ms>
        ARTEMIS_DEBUG_PRINTF("do not get here in case of RTOS\n");
    cf72:	4620      	mov	r0, r4
    cf74:	f004 f878 	bl	11068 <am_util_stdio_printf>
    cf78:	4620      	mov	r0, r4
    cf7a:	f010 fffd 	bl	1df78 <datalogger_log_debug>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    cf7e:	2001      	movs	r0, #1
    cf80:	f013 fed8 	bl	20d34 <am_hal_sysctrl_sleep>
        am_util_delay_ms(1000);
    cf84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    cf88:	f003 f9b8 	bl	102fc <am_util_delay_ms>
    while (1)
    cf8c:	e7f1      	b.n	cf72 <main+0x19e>
    cf8e:	bf00      	nop
    cf90:	0002a214 	.word	0x0002a214
    cf94:	0002a234 	.word	0x0002a234
    cf98:	00030fb4 	.word	0x00030fb4
    cf9c:	00030fb0 	.word	0x00030fb0
    cfa0:	00030fac 	.word	0x00030fac
    cfa4:	40010000 	.word	0x40010000
    cfa8:	0002a250 	.word	0x0002a250
    cfac:	0001ae61 	.word	0x0001ae61
    cfb0:	0002a260 	.word	0x0002a260
    cfb4:	0002a268 	.word	0x0002a268
    cfb8:	0002a27c 	.word	0x0002a27c
    cfbc:	0001afa1 	.word	0x0001afa1
    cfc0:	0002a28c 	.word	0x0002a28c
    cfc4:	0001ad09 	.word	0x0001ad09
    cfc8:	0002a2fc 	.word	0x0002a2fc
    cfcc:	0002a298 	.word	0x0002a298
    cfd0:	0002a2a8 	.word	0x0002a2a8
    cfd4:	0002a2c8 	.word	0x0002a2c8
    cfd8:	0002a2e8 	.word	0x0002a2e8

0000cfdc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    cfdc:	4808      	ldr	r0, [pc, #32]	@ (d000 <prvPortStartFirstTask+0x24>)
    cfde:	6800      	ldr	r0, [r0, #0]
    cfe0:	6800      	ldr	r0, [r0, #0]
    cfe2:	f380 8808 	msr	MSP, r0
    cfe6:	f04f 0000 	mov.w	r0, #0
    cfea:	f380 8814 	msr	CONTROL, r0
    cfee:	b662      	cpsie	i
    cff0:	b661      	cpsie	f
    cff2:	f3bf 8f4f 	dsb	sy
    cff6:	f3bf 8f6f 	isb	sy
    cffa:	df00      	svc	0
    cffc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    cffe:	0000      	.short	0x0000
    d000:	e000ed08 	.word	0xe000ed08

0000d004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    d004:	f8df 000c 	ldr.w	r0, [pc, #12]	@ d014 <vPortEnableVFP+0x10>
    d008:	6801      	ldr	r1, [r0, #0]
    d00a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
    d00e:	6001      	str	r1, [r0, #0]
    d010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    d012:	0000      	.short	0x0000
    d014:	e000ed88 	.word	0xe000ed88

0000d018 <prvTaskExitError>:
{
    d018:	b500      	push	{lr}
	configASSERT( uxCriticalNesting == ~0UL );
    d01a:	4b12      	ldr	r3, [pc, #72]	@ (d064 <prvTaskExitError+0x4c>)
    d01c:	681b      	ldr	r3, [r3, #0]
{
    d01e:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
    d020:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
    d022:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
    d024:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
    d026:	d10d      	bne.n	d044 <prvTaskExitError+0x2c>
    d028:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d02c:	f383 8811 	msr	BASEPRI, r3
    d030:	f3bf 8f6f 	isb	sy
    d034:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
    d038:	9b01      	ldr	r3, [sp, #4]
    d03a:	2b00      	cmp	r3, #0
    d03c:	d0fc      	beq.n	d038 <prvTaskExitError+0x20>
}
    d03e:	b003      	add	sp, #12
    d040:	f85d fb04 	ldr.w	pc, [sp], #4
    d044:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d048:	f383 8811 	msr	BASEPRI, r3
    d04c:	f3bf 8f6f 	isb	sy
    d050:	f3bf 8f4f 	dsb	sy
	configASSERT( uxCriticalNesting == ~0UL );
    d054:	4904      	ldr	r1, [pc, #16]	@ (d068 <prvTaskExitError+0x50>)
    d056:	4805      	ldr	r0, [pc, #20]	@ (d06c <prvTaskExitError+0x54>)
    d058:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
    d05c:	f004 f804 	bl	11068 <am_util_stdio_printf>
    d060:	e7fe      	b.n	d060 <prvTaskExitError+0x48>
    d062:	bf00      	nop
    d064:	10002300 	.word	0x10002300
    d068:	0002a320 	.word	0x0002a320
    d06c:	0002a268 	.word	0x0002a268

0000d070 <pxPortInitialiseStack>:
{
    d070:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    d072:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    d076:	4c07      	ldr	r4, [pc, #28]	@ (d094 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    d078:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    d07c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    d080:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    d084:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    d088:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
    d08c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d090:	3844      	subs	r0, #68	@ 0x44
    d092:	4770      	bx	lr
    d094:	0000d019 	.word	0x0000d019
	...

0000d0a0 <SVC_Handler>:
	__asm volatile (
    d0a0:	4b07      	ldr	r3, [pc, #28]	@ (d0c0 <pxCurrentTCBConst2>)
    d0a2:	6819      	ldr	r1, [r3, #0]
    d0a4:	6808      	ldr	r0, [r1, #0]
    d0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0aa:	f380 8809 	msr	PSP, r0
    d0ae:	f3bf 8f6f 	isb	sy
    d0b2:	f04f 0000 	mov.w	r0, #0
    d0b6:	f380 8811 	msr	BASEPRI, r0
    d0ba:	4770      	bx	lr
    d0bc:	f3af 8000 	nop.w

0000d0c0 <pxCurrentTCBConst2>:
    d0c0:	1000ac74 	.word	0x1000ac74

0000d0c4 <vPortEnterCritical>:
{
    d0c4:	b508      	push	{r3, lr}
    d0c6:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d0ca:	f383 8811 	msr	BASEPRI, r3
    d0ce:	f3bf 8f6f 	isb	sy
    d0d2:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    d0d6:	4a0e      	ldr	r2, [pc, #56]	@ (d110 <vPortEnterCritical+0x4c>)
    d0d8:	6813      	ldr	r3, [r2, #0]
    d0da:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
    d0dc:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
    d0de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
    d0e0:	d000      	beq.n	d0e4 <vPortEnterCritical+0x20>
}
    d0e2:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    d0e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    d0e8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
    d0ec:	b2db      	uxtb	r3, r3
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	d0f7      	beq.n	d0e2 <vPortEnterCritical+0x1e>
    d0f2:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d0f6:	f383 8811 	msr	BASEPRI, r3
    d0fa:	f3bf 8f6f 	isb	sy
    d0fe:	f3bf 8f4f 	dsb	sy
    d102:	4904      	ldr	r1, [pc, #16]	@ (d114 <vPortEnterCritical+0x50>)
    d104:	4804      	ldr	r0, [pc, #16]	@ (d118 <vPortEnterCritical+0x54>)
    d106:	f240 2206 	movw	r2, #518	@ 0x206
    d10a:	f003 ffad 	bl	11068 <am_util_stdio_printf>
    d10e:	e7fe      	b.n	d10e <vPortEnterCritical+0x4a>
    d110:	10002300 	.word	0x10002300
    d114:	0002a320 	.word	0x0002a320
    d118:	0002a268 	.word	0x0002a268

0000d11c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    d11c:	4a0c      	ldr	r2, [pc, #48]	@ (d150 <vPortExitCritical+0x34>)
{
    d11e:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
    d120:	6813      	ldr	r3, [r2, #0]
    d122:	b12b      	cbz	r3, d130 <vPortExitCritical+0x14>
	uxCriticalNesting--;
    d124:	3b01      	subs	r3, #1
    d126:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    d128:	b90b      	cbnz	r3, d12e <vPortExitCritical+0x12>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    d12a:	f383 8811 	msr	BASEPRI, r3
}
    d12e:	bd08      	pop	{r3, pc}
	__asm volatile
    d130:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d134:	f383 8811 	msr	BASEPRI, r3
    d138:	f3bf 8f6f 	isb	sy
    d13c:	f3bf 8f4f 	dsb	sy
	configASSERT( uxCriticalNesting );
    d140:	4904      	ldr	r1, [pc, #16]	@ (d154 <vPortExitCritical+0x38>)
    d142:	4805      	ldr	r0, [pc, #20]	@ (d158 <vPortExitCritical+0x3c>)
    d144:	f240 220d 	movw	r2, #525	@ 0x20d
    d148:	f003 ff8e 	bl	11068 <am_util_stdio_printf>
    d14c:	e7fe      	b.n	d14c <vPortExitCritical+0x30>
    d14e:	bf00      	nop
    d150:	10002300 	.word	0x10002300
    d154:	0002a320 	.word	0x0002a320
    d158:	0002a268 	.word	0x0002a268
    d15c:	00000000 	.word	0x00000000

0000d160 <PendSV_Handler>:
	__asm volatile
    d160:	f3ef 8009 	mrs	r0, PSP
    d164:	f3bf 8f6f 	isb	sy
    d168:	4b15      	ldr	r3, [pc, #84]	@ (d1c0 <pxCurrentTCBConst>)
    d16a:	681a      	ldr	r2, [r3, #0]
    d16c:	f01e 0f10 	tst.w	lr, #16
    d170:	bf08      	it	eq
    d172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    d176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d17a:	6010      	str	r0, [r2, #0]
    d17c:	e92d 0009 	stmdb	sp!, {r0, r3}
    d180:	f04f 0080 	mov.w	r0, #128	@ 0x80
    d184:	f380 8811 	msr	BASEPRI, r0
    d188:	f3bf 8f4f 	dsb	sy
    d18c:	f3bf 8f6f 	isb	sy
    d190:	f002 fa30 	bl	f5f4 <vTaskSwitchContext>
    d194:	f04f 0000 	mov.w	r0, #0
    d198:	f380 8811 	msr	BASEPRI, r0
    d19c:	bc09      	pop	{r0, r3}
    d19e:	6819      	ldr	r1, [r3, #0]
    d1a0:	6808      	ldr	r0, [r1, #0]
    d1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1a6:	f01e 0f10 	tst.w	lr, #16
    d1aa:	bf08      	it	eq
    d1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    d1b0:	f380 8809 	msr	PSP, r0
    d1b4:	f3bf 8f6f 	isb	sy
    d1b8:	4770      	bx	lr
    d1ba:	bf00      	nop
    d1bc:	f3af 8000 	nop.w

0000d1c0 <pxCurrentTCBConst>:
    d1c0:	1000ac74 	.word	0x1000ac74

0000d1c4 <SysTick_Handler>:
{
    d1c4:	b508      	push	{r3, lr}
    d1c6:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d1ca:	f383 8811 	msr	BASEPRI, r3
    d1ce:	f3bf 8f6f 	isb	sy
    d1d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
    d1d6:	f001 feef 	bl	efb8 <xTaskIncrementTick>
    d1da:	b128      	cbz	r0, d1e8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    d1dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    d1e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    d1e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
    d1e8:	2300      	movs	r3, #0
    d1ea:	f383 8811 	msr	BASEPRI, r3
}
    d1ee:	bd08      	pop	{r3, pc}

0000d1f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
    d1f0:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    d1f2:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    d1f6:	2b0f      	cmp	r3, #15
    d1f8:	d905      	bls.n	d206 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    d1fa:	4917      	ldr	r1, [pc, #92]	@ (d258 <vPortValidateInterruptPriority+0x68>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    d1fc:	4a17      	ldr	r2, [pc, #92]	@ (d25c <vPortValidateInterruptPriority+0x6c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    d1fe:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    d200:	7812      	ldrb	r2, [r2, #0]
    d202:	429a      	cmp	r2, r3
    d204:	d819      	bhi.n	d23a <vPortValidateInterruptPriority+0x4a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    d206:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    d20a:	4a15      	ldr	r2, [pc, #84]	@ (d260 <vPortValidateInterruptPriority+0x70>)
    d20c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
    d210:	6812      	ldr	r2, [r2, #0]
    d212:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    d216:	4293      	cmp	r3, r2
    d218:	d800      	bhi.n	d21c <vPortValidateInterruptPriority+0x2c>
	}
    d21a:	bd08      	pop	{r3, pc}
	__asm volatile
    d21c:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d220:	f383 8811 	msr	BASEPRI, r3
    d224:	f3bf 8f6f 	isb	sy
    d228:	f3bf 8f4f 	dsb	sy
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    d22c:	490d      	ldr	r1, [pc, #52]	@ (d264 <vPortValidateInterruptPriority+0x74>)
    d22e:	480e      	ldr	r0, [pc, #56]	@ (d268 <vPortValidateInterruptPriority+0x78>)
    d230:	f240 326b 	movw	r2, #875	@ 0x36b
    d234:	f003 ff18 	bl	11068 <am_util_stdio_printf>
    d238:	e7fe      	b.n	d238 <vPortValidateInterruptPriority+0x48>
    d23a:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d23e:	f383 8811 	msr	BASEPRI, r3
    d242:	f3bf 8f6f 	isb	sy
    d246:	f3bf 8f4f 	dsb	sy
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    d24a:	4906      	ldr	r1, [pc, #24]	@ (d264 <vPortValidateInterruptPriority+0x74>)
    d24c:	4806      	ldr	r0, [pc, #24]	@ (d268 <vPortValidateInterruptPriority+0x78>)
    d24e:	f240 325b 	movw	r2, #859	@ 0x35b
    d252:	f003 ff09 	bl	11068 <am_util_stdio_printf>
    d256:	e7fe      	b.n	d256 <vPortValidateInterruptPriority+0x66>
    d258:	e000e3f0 	.word	0xe000e3f0
    d25c:	10002b18 	.word	0x10002b18
    d260:	10002b14 	.word	0x10002b14
    d264:	0002a320 	.word	0x0002a320
    d268:	0002a268 	.word	0x0002a268

0000d26c <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
    d26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
    d270:	4b2c      	ldr	r3, [pc, #176]	@ (d324 <vPortSuppressTicksAndSleep+0xb8>)


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
    d272:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ d32c <vPortSuppressTicksAndSleep+0xc0>
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
    d276:	f8d3 a000 	ldr.w	sl, [r3]
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
    d27a:	f8d9 8000 	ldr.w	r8, [r9]
{
    d27e:	4604      	mov	r4, r0

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
    d280:	b672      	cpsid	i
	__asm volatile( "dsb" );
    d282:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    d286:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
    d28a:	f013 fcdb 	bl	20c44 <am_hal_stimer_counter_get>
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
    d28e:	4f26      	ldr	r7, [pc, #152]	@ (d328 <vPortSuppressTicksAndSleep+0xbc>)
    uint32_t curTime = am_hal_stimer_counter_get();
    d290:	4605      	mov	r5, r0
    elapsed_time = curTime - g_lastSTimerVal;
    d292:	683e      	ldr	r6, [r7, #0]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
    d294:	f002 fbfc 	bl	fa90 <eTaskConfirmSleepModeStatus>
    d298:	b158      	cbz	r0, d2b2 <vPortSuppressTicksAndSleep+0x46>
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
    d29a:	4554      	cmp	r4, sl
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
    d29c:	f8d9 3000 	ldr.w	r3, [r9]
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
    d2a0:	bf28      	it	cs
    d2a2:	4654      	movcs	r4, sl
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
    d2a4:	1b9b      	subs	r3, r3, r6
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
    d2a6:	1e62      	subs	r2, r4, #1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
    d2a8:	442b      	add	r3, r5
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
    d2aa:	fb08 f202 	mul.w	r2, r8, r2
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
    d2ae:	4293      	cmp	r3, r2
    d2b0:	d902      	bls.n	d2b8 <vPortSuppressTicksAndSleep+0x4c>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
    d2b2:	b662      	cpsie	i

	}
}
    d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ulReloadValue -= elapsed_time;
    d2b8:	4416      	add	r6, r2
    d2ba:	1b76      	subs	r6, r6, r5
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
    d2bc:	4631      	mov	r1, r6
    d2be:	2000      	movs	r0, #0
    d2c0:	f013 fcc6 	bl	20c50 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
    d2c4:	2001      	movs	r0, #1
    d2c6:	1831      	adds	r1, r6, r0
    d2c8:	f013 fcc2 	bl	20c50 <am_hal_stimer_compare_delta_set>
		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
    d2cc:	4620      	mov	r0, r4
    d2ce:	f00f f80f 	bl	1c2f0 <am_freertos_sleep>
		if( xModifiableIdleTime > 0 )
    d2d2:	b120      	cbz	r0, d2de <vPortSuppressTicksAndSleep+0x72>
			__asm volatile( "dsb" );
    d2d4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
    d2d8:	bf30      	wfi
			__asm volatile( "isb" );
    d2da:	f3bf 8f6f 	isb	sy
		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
    d2de:	4620      	mov	r0, r4
    d2e0:	f00f f80c 	bl	1c2fc <am_freertos_wakeup>
        New_Timer = am_hal_stimer_counter_get();
    d2e4:	f013 fcae 	bl	20c44 <am_hal_stimer_counter_get>
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
    d2e8:	683a      	ldr	r2, [r7, #0]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
    d2ea:	f8d9 1000 	ldr.w	r1, [r9]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
    d2ee:	1a82      	subs	r2, r0, r2
        New_Timer = am_hal_stimer_counter_get();
    d2f0:	4603      	mov	r3, r0
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
    d2f2:	fbb2 f0f1 	udiv	r0, r2, r1
    d2f6:	fb01 2210 	mls	r2, r1, r0, r2
    d2fa:	1a9b      	subs	r3, r3, r2
    d2fc:	603b      	str	r3, [r7, #0]
        vTaskStepTick( Delta_Sleep );
    d2fe:	f001 fe37 	bl	ef70 <vTaskStepTick>
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
    d302:	2003      	movs	r0, #3
    d304:	f013 fd04 	bl	20d10 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
    d308:	f8d9 1000 	ldr.w	r1, [r9]
    d30c:	2000      	movs	r0, #0
    d30e:	f013 fc9f 	bl	20c50 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
    d312:	f8d9 1000 	ldr.w	r1, [r9]
    d316:	2001      	movs	r0, #1
    d318:	4401      	add	r1, r0
    d31a:	f013 fc99 	bl	20c50 <am_hal_stimer_compare_delta_set>
		__asm volatile( "cpsie i" );
    d31e:	b662      	cpsie	i
}
    d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d324:	10002b0c 	.word	0x10002b0c
    d328:	10002b1c 	.word	0x10002b1c
    d32c:	10002b10 	.word	0x10002b10

0000d330 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
    d330:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
    d332:	4e1c      	ldr	r6, [pc, #112]	@ (d3a4 <xPortStimerTickHandler+0x74>)
{
    d334:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
    d336:	f013 fc85 	bl	20c44 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
    d33a:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
    d33c:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
    d33e:	1b09      	subs	r1, r1, r4
    d340:	2000      	movs	r0, #0
    d342:	f013 fc85 	bl	20c50 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
    d346:	6831      	ldr	r1, [r6, #0]
    d348:	2001      	movs	r0, #1
    d34a:	4401      	add	r1, r0
    d34c:	1b09      	subs	r1, r1, r4
    d34e:	f013 fc7f 	bl	20c50 <am_hal_stimer_compare_delta_set>
#endif
    
    timerCounts = curSTimer - g_lastSTimerVal;
    d352:	4915      	ldr	r1, [pc, #84]	@ (d3a8 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
    d354:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
    d356:	680b      	ldr	r3, [r1, #0]
    d358:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
    d35a:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
    d35e:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
    d362:	1a2d      	subs	r5, r5, r0
    d364:	600d      	str	r5, [r1, #0]
	__asm volatile
    d366:	f3ef 8111 	mrs	r1, BASEPRI
    d36a:	f04f 0080 	mov.w	r0, #128	@ 0x80
    d36e:	f380 8811 	msr	BASEPRI, r0
    d372:	f3bf 8f6f 	isb	sy
    d376:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
    d37a:	429a      	cmp	r2, r3
    d37c:	d80e      	bhi.n	d39c <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
    d37e:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
    d380:	f001 fe1a 	bl	efb8 <xTaskIncrementTick>
    d384:	2800      	cmp	r0, #0
    d386:	bf18      	it	ne
    d388:	2501      	movne	r5, #1
        while (numTicksElapsed--)
    d38a:	3c01      	subs	r4, #1
    d38c:	d1f8      	bne.n	d380 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
    d38e:	b12d      	cbz	r5, d39c <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    d390:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    d394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    d398:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
    d39c:	2300      	movs	r3, #0
    d39e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
    d3a2:	bd70      	pop	{r4, r5, r6, pc}
    d3a4:	10002b10 	.word	0x10002b10
    d3a8:	10002b1c 	.word	0x10002b1c

0000d3ac <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
    d3ac:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
    d3ae:	2000      	movs	r0, #0
    d3b0:	f013 fcb4 	bl	20d1c <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
    d3b4:	07c3      	lsls	r3, r0, #31
    d3b6:	d400      	bmi.n	d3ba <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
    d3b8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    d3ba:	2001      	movs	r0, #1
    d3bc:	f013 fca8 	bl	20d10 <am_hal_stimer_int_clear>
}
    d3c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
    d3c4:	2000      	movs	r0, #0
    d3c6:	f7ff bfb3 	b.w	d330 <xPortStimerTickHandler>
    d3ca:	bf00      	nop

0000d3cc <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
    d3cc:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
    d3ce:	2000      	movs	r0, #0
    d3d0:	f013 fca4 	bl	20d1c <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
    d3d4:	0783      	lsls	r3, r0, #30
    d3d6:	d400      	bmi.n	d3da <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
    d3d8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
    d3da:	2002      	movs	r0, #2
    d3dc:	f013 fc98 	bl	20d10 <am_hal_stimer_int_clear>
        gNumCmpB++;
    d3e0:	4a04      	ldr	r2, [pc, #16]	@ (d3f4 <am_stimer_cmpr1_isr+0x28>)
    d3e2:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
    d3e4:	2001      	movs	r0, #1
        gNumCmpB++;
    d3e6:	4403      	add	r3, r0
    d3e8:	6013      	str	r3, [r2, #0]
}
    d3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
    d3ee:	f7ff bf9f 	b.w	d330 <xPortStimerTickHandler>
    d3f2:	bf00      	nop
    d3f4:	10002b08 	.word	0x10002b08

0000d3f8 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
    d3f8:	b538      	push	{r3, r4, r5, lr}
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
    d3fa:	4b18      	ldr	r3, [pc, #96]	@ (d45c <vPortSetupTimerInterrupt+0x64>)
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
    d3fc:	4d18      	ldr	r5, [pc, #96]	@ (d460 <vPortSetupTimerInterrupt+0x68>)
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
    d3fe:	4a19      	ldr	r2, [pc, #100]	@ (d464 <vPortSetupTimerInterrupt+0x6c>)
    d400:	601a      	str	r2, [r3, #0]
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
    d402:	2120      	movs	r1, #32
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
    d404:	2003      	movs	r0, #3
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
    d406:	6029      	str	r1, [r5, #0]
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
    d408:	f013 fc78 	bl	20cfc <am_hal_stimer_int_enable>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d40c:	4b16      	ldr	r3, [pc, #88]	@ (d468 <vPortSetupTimerInterrupt+0x70>)
    d40e:	22e0      	movs	r2, #224	@ 0xe0
    d410:	f883 2317 	strb.w	r2, [r3, #791]	@ 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d414:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
    d418:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d41a:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d41e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    d422:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
    d424:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
    d428:	f013 fc02 	bl	20c30 <am_hal_stimer_config>
    d42c:	4604      	mov	r4, r0
    g_lastSTimerVal = am_hal_stimer_counter_get();
    d42e:	f013 fc09 	bl	20c44 <am_hal_stimer_counter_get>
    d432:	4b0e      	ldr	r3, [pc, #56]	@ (d46c <vPortSetupTimerInterrupt+0x74>)
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
    d434:	6829      	ldr	r1, [r5, #0]
    g_lastSTimerVal = am_hal_stimer_counter_get();
    d436:	6018      	str	r0, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
    d438:	2000      	movs	r0, #0
    d43a:	f013 fc09 	bl	20c50 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
    d43e:	6829      	ldr	r1, [r5, #0]
    d440:	2001      	movs	r0, #1
    d442:	4401      	add	r1, r0
    d444:	f013 fc04 	bl	20c50 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
    d448:	4809      	ldr	r0, [pc, #36]	@ (d470 <vPortSetupTimerInterrupt+0x78>)
    d44a:	4020      	ands	r0, r4
    d44c:	f440 7040 	orr.w	r0, r0, #768	@ 0x300
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
    d450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
    d454:	f040 0003 	orr.w	r0, r0, #3
    d458:	f013 bbea 	b.w	20c30 <am_hal_stimer_config>
    d45c:	10002b0c 	.word	0x10002b0c
    d460:	10002b10 	.word	0x10002b10
    d464:	07fffffe 	.word	0x07fffffe
    d468:	e000e100 	.word	0xe000e100
    d46c:	10002b1c 	.word	0x10002b1c
    d470:	7ffffcf0 	.word	0x7ffffcf0

0000d474 <xPortStartScheduler>:
{
    d474:	b570      	push	{r4, r5, r6, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    d476:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    d47a:	4a54      	ldr	r2, [pc, #336]	@ (d5cc <xPortStartScheduler+0x158>)
    d47c:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
    d480:	4291      	cmp	r1, r2
{
    d482:	b084      	sub	sp, #16
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    d484:	d075      	beq.n	d572 <xPortStartScheduler+0xfe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    d486:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
    d48a:	4b51      	ldr	r3, [pc, #324]	@ (d5d0 <xPortStartScheduler+0x15c>)
    d48c:	429a      	cmp	r2, r3
    d48e:	f000 808e 	beq.w	d5ae <xPortStartScheduler+0x13a>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    d492:	4b50      	ldr	r3, [pc, #320]	@ (d5d4 <xPortStartScheduler+0x160>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    d494:	4c50      	ldr	r4, [pc, #320]	@ (d5d8 <xPortStartScheduler+0x164>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    d496:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    d498:	4850      	ldr	r0, [pc, #320]	@ (d5dc <xPortStartScheduler+0x168>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    d49a:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    d49c:	b2d2      	uxtb	r2, r2
    d49e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    d4a0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    d4a2:	781b      	ldrb	r3, [r3, #0]
    d4a4:	b2db      	uxtb	r3, r3
    d4a6:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    d4aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    d4ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    d4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    d4b6:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    d4b8:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    d4ba:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    d4bc:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    d4be:	bf48      	it	mi
    d4c0:	2206      	movmi	r2, #6
    d4c2:	d50f      	bpl.n	d4e4 <xPortStartScheduler+0x70>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    d4c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4c8:	005b      	lsls	r3, r3, #1
    d4ca:	b2db      	uxtb	r3, r3
    d4cc:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    d4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4d4:	061b      	lsls	r3, r3, #24
    d4d6:	4611      	mov	r1, r2
    d4d8:	f102 32ff 	add.w	r2, r2, #4294967295
    d4dc:	d4f2      	bmi.n	d4c4 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
    d4de:	2904      	cmp	r1, #4
    d4e0:	d00f      	beq.n	d502 <xPortStartScheduler+0x8e>
    d4e2:	6001      	str	r1, [r0, #0]
	__asm volatile
    d4e4:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d4e8:	f383 8811 	msr	BASEPRI, r3
    d4ec:	f3bf 8f6f 	isb	sy
    d4f0:	f3bf 8f4f 	dsb	sy
    d4f4:	493a      	ldr	r1, [pc, #232]	@ (d5e0 <xPortStartScheduler+0x16c>)
    d4f6:	483b      	ldr	r0, [pc, #236]	@ (d5e4 <xPortStartScheduler+0x170>)
    d4f8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
    d4fc:	f003 fdb4 	bl	11068 <am_util_stdio_printf>
    d500:	e7fe      	b.n	d500 <xPortStartScheduler+0x8c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    d502:	9b02      	ldr	r3, [sp, #8]
    d504:	4a33      	ldr	r2, [pc, #204]	@ (d5d4 <xPortStartScheduler+0x160>)
	uxCriticalNesting = 0;
    d506:	4e38      	ldr	r6, [pc, #224]	@ (d5e8 <xPortStartScheduler+0x174>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    d508:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    d50c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    d510:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    d512:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    d514:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    d516:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
    d51a:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
    d51e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    d522:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
    d526:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
    d52a:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
    d52e:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
    d530:	f7ff ff62 	bl	d3f8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
    d534:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
    d536:	f7ff fd65 	bl	d004 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    d53a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
    d53e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
    d542:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
    d546:	f7ff fd49 	bl	cfdc <prvPortStartFirstTask>
	vTaskSwitchContext();
    d54a:	f002 f853 	bl	f5f4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
    d54e:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
    d550:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
    d552:	3301      	adds	r3, #1
    d554:	d11c      	bne.n	d590 <xPortStartScheduler+0x11c>
    d556:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d55a:	f383 8811 	msr	BASEPRI, r3
    d55e:	f3bf 8f6f 	isb	sy
    d562:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
    d566:	9b03      	ldr	r3, [sp, #12]
    d568:	2b00      	cmp	r3, #0
    d56a:	d0fc      	beq.n	d566 <xPortStartScheduler+0xf2>
}
    d56c:	2000      	movs	r0, #0
    d56e:	b004      	add	sp, #16
    d570:	bd70      	pop	{r4, r5, r6, pc}
    d572:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d576:	f383 8811 	msr	BASEPRI, r3
    d57a:	f3bf 8f6f 	isb	sy
    d57e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    d582:	4917      	ldr	r1, [pc, #92]	@ (d5e0 <xPortStartScheduler+0x16c>)
    d584:	4817      	ldr	r0, [pc, #92]	@ (d5e4 <xPortStartScheduler+0x170>)
    d586:	f240 128f 	movw	r2, #399	@ 0x18f
    d58a:	f003 fd6d 	bl	11068 <am_util_stdio_printf>
    d58e:	e7fe      	b.n	d58e <xPortStartScheduler+0x11a>
    d590:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d594:	f383 8811 	msr	BASEPRI, r3
    d598:	f3bf 8f6f 	isb	sy
    d59c:	f3bf 8f4f 	dsb	sy
	configASSERT( uxCriticalNesting == ~0UL );
    d5a0:	490f      	ldr	r1, [pc, #60]	@ (d5e0 <xPortStartScheduler+0x16c>)
    d5a2:	4810      	ldr	r0, [pc, #64]	@ (d5e4 <xPortStartScheduler+0x170>)
    d5a4:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
    d5a8:	f003 fd5e 	bl	11068 <am_util_stdio_printf>
    d5ac:	e7fe      	b.n	d5ac <xPortStartScheduler+0x138>
    d5ae:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d5b2:	f383 8811 	msr	BASEPRI, r3
    d5b6:	f3bf 8f6f 	isb	sy
    d5ba:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    d5be:	4908      	ldr	r1, [pc, #32]	@ (d5e0 <xPortStartScheduler+0x16c>)
    d5c0:	4808      	ldr	r0, [pc, #32]	@ (d5e4 <xPortStartScheduler+0x170>)
    d5c2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
    d5c6:	f003 fd4f 	bl	11068 <am_util_stdio_printf>
    d5ca:	e7fe      	b.n	d5ca <xPortStartScheduler+0x156>
    d5cc:	410fc271 	.word	0x410fc271
    d5d0:	410fc270 	.word	0x410fc270
    d5d4:	e000e400 	.word	0xe000e400
    d5d8:	10002b18 	.word	0x10002b18
    d5dc:	10002b14 	.word	0x10002b14
    d5e0:	0002a320 	.word	0x0002a320
    d5e4:	0002a268 	.word	0x0002a268
    d5e8:	10002300 	.word	0x10002300

0000d5ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    d5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5f0:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    d5f2:	f001 fcaf 	bl	ef54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    d5f6:	4a58      	ldr	r2, [pc, #352]	@ (d758 <pvPortMalloc+0x16c>)
    d5f8:	6815      	ldr	r5, [r2, #0]
    d5fa:	2d00      	cmp	r5, #0
    d5fc:	d078      	beq.n	d6f0 <pvPortMalloc+0x104>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    d5fe:	4b57      	ldr	r3, [pc, #348]	@ (d75c <pvPortMalloc+0x170>)
    d600:	681e      	ldr	r6, [r3, #0]
    d602:	4234      	tst	r4, r6
    d604:	d133      	bne.n	d66e <pvPortMalloc+0x82>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    d606:	b394      	cbz	r4, d66e <pvPortMalloc+0x82>
			{
				xWantedSize += xHeapStructSize;
    d608:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    d60c:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    d60e:	bf1c      	itt	ne
    d610:	f020 0007 	bicne.w	r0, r0, #7
    d614:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    d616:	b350      	cbz	r0, d66e <pvPortMalloc+0x82>
    d618:	f8df e15c 	ldr.w	lr, [pc, #348]	@ d778 <pvPortMalloc+0x18c>
    d61c:	f8de c000 	ldr.w	ip, [lr]
    d620:	4584      	cmp	ip, r0
    d622:	d324      	bcc.n	d66e <pvPortMalloc+0x82>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    d624:	4c4e      	ldr	r4, [pc, #312]	@ (d760 <pvPortMalloc+0x174>)
    d626:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    d628:	e003      	b.n	d632 <pvPortMalloc+0x46>
    d62a:	681a      	ldr	r2, [r3, #0]
    d62c:	b122      	cbz	r2, d638 <pvPortMalloc+0x4c>
				{
					pxPreviousBlock = pxBlock;
    d62e:	461c      	mov	r4, r3
					pxBlock = pxBlock->pxNextFreeBlock;
    d630:	4613      	mov	r3, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    d632:	6859      	ldr	r1, [r3, #4]
    d634:	4281      	cmp	r1, r0
    d636:	d3f8      	bcc.n	d62a <pvPortMalloc+0x3e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    d638:	42ab      	cmp	r3, r5
    d63a:	d018      	beq.n	d66e <pvPortMalloc+0x82>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    d63c:	461f      	mov	r7, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    d63e:	1a0a      	subs	r2, r1, r0
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    d640:	f857 8b08 	ldr.w	r8, [r7], #8
    d644:	f8c4 8000 	str.w	r8, [r4]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    d648:	2a10      	cmp	r2, #16
    d64a:	d931      	bls.n	d6b0 <pvPortMalloc+0xc4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    d64c:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    d64e:	0761      	lsls	r1, r4, #29
    d650:	d015      	beq.n	d67e <pvPortMalloc+0x92>
    d652:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d656:	f383 8811 	msr	BASEPRI, r3
    d65a:	f3bf 8f6f 	isb	sy
    d65e:	f3bf 8f4f 	dsb	sy
    d662:	4940      	ldr	r1, [pc, #256]	@ (d764 <pvPortMalloc+0x178>)
    d664:	4840      	ldr	r0, [pc, #256]	@ (d768 <pvPortMalloc+0x17c>)
    d666:	22c2      	movs	r2, #194	@ 0xc2
    d668:	f003 fcfe 	bl	11068 <am_util_stdio_printf>
    d66c:	e7fe      	b.n	d66c <pvPortMalloc+0x80>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    d66e:	f001 fded 	bl	f24c <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    d672:	f00e fe45 	bl	1c300 <vApplicationMallocFailedHook>
    d676:	2700      	movs	r7, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    d678:	4638      	mov	r0, r7
    d67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    d67e:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    d680:	4a37      	ldr	r2, [pc, #220]	@ (d760 <pvPortMalloc+0x174>)
						pxBlock->xBlockSize = xWantedSize;
    d682:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    d684:	4690      	mov	r8, r2
    d686:	6812      	ldr	r2, [r2, #0]
    d688:	4294      	cmp	r4, r2
    d68a:	d8fb      	bhi.n	d684 <pvPortMalloc+0x98>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    d68c:	f8d8 1004 	ldr.w	r1, [r8, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    d690:	f8d4 9004 	ldr.w	r9, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    d694:	eb08 0a01 	add.w	sl, r8, r1
    d698:	4554      	cmp	r4, sl
    d69a:	d053      	beq.n	d744 <pvPortMalloc+0x158>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    d69c:	eb04 0109 	add.w	r1, r4, r9
    d6a0:	428a      	cmp	r2, r1
    d6a2:	d045      	beq.n	d730 <pvPortMalloc+0x144>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    d6a4:	6022      	str	r2, [r4, #0]
    d6a6:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    d6a8:	45a0      	cmp	r8, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    d6aa:	bf18      	it	ne
    d6ac:	f8c8 4000 	strne.w	r4, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    d6b0:	4a2e      	ldr	r2, [pc, #184]	@ (d76c <pvPortMalloc+0x180>)
    d6b2:	6814      	ldr	r4, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    d6b4:	ebac 0001 	sub.w	r0, ip, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    d6b8:	430e      	orrs	r6, r1
					pxBlock->pxNextFreeBlock = NULL;
    d6ba:	2100      	movs	r1, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    d6bc:	42a0      	cmp	r0, r4
					pxBlock->pxNextFreeBlock = NULL;
    d6be:	e9c3 1600 	strd	r1, r6, [r3]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    d6c2:	bf38      	it	cc
    d6c4:	6010      	strcc	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    d6c6:	f8ce 0000 	str.w	r0, [lr]
	( void ) xTaskResumeAll();
    d6ca:	f001 fdbf 	bl	f24c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    d6ce:	077b      	lsls	r3, r7, #29
    d6d0:	d0d2      	beq.n	d678 <pvPortMalloc+0x8c>
    d6d2:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d6d6:	f383 8811 	msr	BASEPRI, r3
    d6da:	f3bf 8f6f 	isb	sy
    d6de:	f3bf 8f4f 	dsb	sy
    d6e2:	4920      	ldr	r1, [pc, #128]	@ (d764 <pvPortMalloc+0x178>)
    d6e4:	4820      	ldr	r0, [pc, #128]	@ (d768 <pvPortMalloc+0x17c>)
    d6e6:	f44f 7281 	mov.w	r2, #258	@ 0x102
    d6ea:	f003 fcbd 	bl	11068 <am_util_stdio_printf>
    d6ee:	e7fe      	b.n	d6ee <pvPortMalloc+0x102>
	uxAddress = ( size_t ) ucHeap;
    d6f0:	4b1f      	ldr	r3, [pc, #124]	@ (d770 <pvPortMalloc+0x184>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    d6f2:	481b      	ldr	r0, [pc, #108]	@ (d760 <pvPortMalloc+0x174>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    d6f4:	4e19      	ldr	r6, [pc, #100]	@ (d75c <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    d6f6:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
    d6f8:	4d1e      	ldr	r5, [pc, #120]	@ (d774 <pvPortMalloc+0x188>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    d6fa:	bf18      	it	ne
    d6fc:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    d6fe:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    d702:	bf18      	it	ne
    d704:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
    d708:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    d70a:	4a18      	ldr	r2, [pc, #96]	@ (d76c <pvPortMalloc+0x180>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    d70c:	6003      	str	r3, [r0, #0]
    d70e:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    d710:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    d712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    d714:	4a18      	ldr	r2, [pc, #96]	@ (d778 <pvPortMalloc+0x18c>)
    d716:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
    d718:	2200      	movs	r2, #0
    d71a:	6042      	str	r2, [r0, #4]
	pxEnd->pxNextFreeBlock = NULL;
    d71c:	e9c5 2200 	strd	r2, r2, [r5]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    d720:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
    d724:	6032      	str	r2, [r6, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    d726:	e9c1 5300 	strd	r5, r3, [r1]
}
    d72a:	4616      	mov	r6, r2
    d72c:	e769      	b.n	d602 <pvPortMalloc+0x16>
		pxBlockToInsert = pxIterator;
    d72e:	4644      	mov	r4, r8
		if( pxIterator->pxNextFreeBlock != pxEnd )
    d730:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    d732:	bf1c      	itt	ne
    d734:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    d736:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    d738:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    d73a:	bf1c      	itt	ne
    d73c:	4449      	addne	r1, r9
    d73e:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    d740:	6859      	ldr	r1, [r3, #4]
    d742:	e7b1      	b.n	d6a8 <pvPortMalloc+0xbc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    d744:	4489      	add	r9, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    d746:	eb08 0109 	add.w	r1, r8, r9
    d74a:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    d74c:	f8c8 9004 	str.w	r9, [r8, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    d750:	d0ed      	beq.n	d72e <pvPortMalloc+0x142>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    d752:	6859      	ldr	r1, [r3, #4]
    d754:	e7ac      	b.n	d6b0 <pvPortMalloc+0xc4>
    d756:	bf00      	nop
    d758:	10002b2c 	.word	0x10002b2c
    d75c:	10002b20 	.word	0x10002b20
    d760:	10002b30 	.word	0x10002b30
    d764:	0002a390 	.word	0x0002a390
    d768:	0002a268 	.word	0x0002a268
    d76c:	10002b24 	.word	0x10002b24
    d770:	10002b38 	.word	0x10002b38
    d774:	1000ab30 	.word	0x1000ab30
    d778:	10002b28 	.word	0x10002b28

0000d77c <vPortFree>:
	if( pv != NULL )
    d77c:	b340      	cbz	r0, d7d0 <vPortFree+0x54>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    d77e:	4a31      	ldr	r2, [pc, #196]	@ (d844 <vPortFree+0xc8>)
{
    d780:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    d782:	6812      	ldr	r2, [r2, #0]
    d784:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d788:	4213      	tst	r3, r2
    d78a:	4604      	mov	r4, r0
    d78c:	d011      	beq.n	d7b2 <vPortFree+0x36>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    d78e:	f850 1c08 	ldr.w	r1, [r0, #-8]
    d792:	b1f1      	cbz	r1, d7d2 <vPortFree+0x56>
    d794:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d798:	f383 8811 	msr	BASEPRI, r3
    d79c:	f3bf 8f6f 	isb	sy
    d7a0:	f3bf 8f4f 	dsb	sy
    d7a4:	4928      	ldr	r1, [pc, #160]	@ (d848 <vPortFree+0xcc>)
    d7a6:	4829      	ldr	r0, [pc, #164]	@ (d84c <vPortFree+0xd0>)
    d7a8:	f240 1217 	movw	r2, #279	@ 0x117
    d7ac:	f003 fc5c 	bl	11068 <am_util_stdio_printf>
    d7b0:	e7fe      	b.n	d7b0 <vPortFree+0x34>
    d7b2:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d7b6:	f383 8811 	msr	BASEPRI, r3
    d7ba:	f3bf 8f6f 	isb	sy
    d7be:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    d7c2:	4921      	ldr	r1, [pc, #132]	@ (d848 <vPortFree+0xcc>)
    d7c4:	4821      	ldr	r0, [pc, #132]	@ (d84c <vPortFree+0xd0>)
    d7c6:	f44f 728b 	mov.w	r2, #278	@ 0x116
    d7ca:	f003 fc4d 	bl	11068 <am_util_stdio_printf>
    d7ce:	e7fe      	b.n	d7ce <vPortFree+0x52>
    d7d0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    d7d2:	ea23 0302 	bic.w	r3, r3, r2
    d7d6:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
    d7da:	f1a0 0508 	sub.w	r5, r0, #8
				vTaskSuspendAll();
    d7de:	f001 fbb9 	bl	ef54 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
    d7e2:	481b      	ldr	r0, [pc, #108]	@ (d850 <vPortFree+0xd4>)
    d7e4:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d7e8:	6802      	ldr	r2, [r0, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    d7ea:	4b1a      	ldr	r3, [pc, #104]	@ (d854 <vPortFree+0xd8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
    d7ec:	440a      	add	r2, r1
    d7ee:	6002      	str	r2, [r0, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    d7f0:	461a      	mov	r2, r3
    d7f2:	681b      	ldr	r3, [r3, #0]
    d7f4:	429d      	cmp	r5, r3
    d7f6:	d8fb      	bhi.n	d7f0 <vPortFree+0x74>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    d7f8:	6850      	ldr	r0, [r2, #4]
    d7fa:	eb02 0c00 	add.w	ip, r2, r0
    d7fe:	4565      	cmp	r5, ip
    d800:	d00b      	beq.n	d81a <vPortFree+0x9e>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    d802:	1868      	adds	r0, r5, r1
    d804:	4283      	cmp	r3, r0
    d806:	d018      	beq.n	d83a <vPortFree+0xbe>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    d808:	f844 3c08 	str.w	r3, [r4, #-8]
	if( pxIterator != pxBlockToInsert )
    d80c:	42aa      	cmp	r2, r5
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    d80e:	bf18      	it	ne
    d810:	6015      	strne	r5, [r2, #0]
}
    d812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
    d816:	f001 bd19 	b.w	f24c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    d81a:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    d81c:	1850      	adds	r0, r2, r1
    d81e:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    d820:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    d822:	d1f6      	bne.n	d812 <vPortFree+0x96>
		if( pxIterator->pxNextFreeBlock != pxEnd )
    d824:	480c      	ldr	r0, [pc, #48]	@ (d858 <vPortFree+0xdc>)
    d826:	6800      	ldr	r0, [r0, #0]
    d828:	4283      	cmp	r3, r0
    d82a:	d0f2      	beq.n	d812 <vPortFree+0x96>
		pxBlockToInsert = pxIterator;
    d82c:	4615      	mov	r5, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    d82e:	e9d3 4000 	ldrd	r4, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    d832:	4401      	add	r1, r0
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    d834:	e9c5 4100 	strd	r4, r1, [r5]
    d838:	e7e8      	b.n	d80c <vPortFree+0x90>
		if( pxIterator->pxNextFreeBlock != pxEnd )
    d83a:	4807      	ldr	r0, [pc, #28]	@ (d858 <vPortFree+0xdc>)
    d83c:	6800      	ldr	r0, [r0, #0]
    d83e:	4283      	cmp	r3, r0
    d840:	d1f5      	bne.n	d82e <vPortFree+0xb2>
    d842:	e7e1      	b.n	d808 <vPortFree+0x8c>
    d844:	10002b20 	.word	0x10002b20
    d848:	0002a390 	.word	0x0002a390
    d84c:	0002a268 	.word	0x0002a268
    d850:	10002b28 	.word	0x10002b28
    d854:	10002b30 	.word	0x10002b30
    d858:	10002b2c 	.word	0x10002b2c

0000d85c <xPortGetFreeHeapSize>:
	return xFreeBytesRemaining;
    d85c:	4b01      	ldr	r3, [pc, #4]	@ (d864 <xPortGetFreeHeapSize+0x8>)
}
    d85e:	6818      	ldr	r0, [r3, #0]
    d860:	4770      	bx	lr
    d862:	bf00      	nop
    d864:	10002b28 	.word	0x10002b28

0000d868 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    d868:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    d86a:	201c      	movs	r0, #28
    d86c:	f7ff febe 	bl	d5ec <pvPortMalloc>

		if( pxEventBits != NULL )
    d870:	4604      	mov	r4, r0
    d872:	b120      	cbz	r0, d87e <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
    d874:	2300      	movs	r3, #0
    d876:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    d87a:	f000 f923 	bl	dac4 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
    d87e:	4620      	mov	r0, r4
    d880:	bd10      	pop	{r4, pc}
    d882:	bf00      	nop

0000d884 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
    d888:	2800      	cmp	r0, #0
    d88a:	d073      	beq.n	d974 <xEventGroupWaitBits+0xf0>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    d88c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
    d890:	460c      	mov	r4, r1
    d892:	d226      	bcs.n	d8e2 <xEventGroupWaitBits+0x5e>
	configASSERT( uxBitsToWaitFor != 0 );
    d894:	b971      	cbnz	r1, d8b4 <xEventGroupWaitBits+0x30>
    d896:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d89a:	f383 8811 	msr	BASEPRI, r3
    d89e:	f3bf 8f6f 	isb	sy
    d8a2:	f3bf 8f4f 	dsb	sy
    d8a6:	4952      	ldr	r1, [pc, #328]	@ (d9f0 <xEventGroupWaitBits+0x16c>)
    d8a8:	4852      	ldr	r0, [pc, #328]	@ (d9f4 <xEventGroupWaitBits+0x170>)
    d8aa:	f44f 72a1 	mov.w	r2, #322	@ 0x142
    d8ae:	f003 fbdb 	bl	11068 <am_util_stdio_printf>
    d8b2:	e7fe      	b.n	d8b2 <xEventGroupWaitBits+0x2e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    d8b4:	4617      	mov	r7, r2
    d8b6:	461e      	mov	r6, r3
    d8b8:	4605      	mov	r5, r0
    d8ba:	f002 f96f 	bl	fb9c <xTaskGetSchedulerState>
    d8be:	b9f8      	cbnz	r0, d900 <xEventGroupWaitBits+0x7c>
    d8c0:	9b06      	ldr	r3, [sp, #24]
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d165      	bne.n	d992 <xEventGroupWaitBits+0x10e>
	}
	#endif

	vTaskSuspendAll();
    d8c6:	f001 fb45 	bl	ef54 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    d8ca:	f8d5 8000 	ldr.w	r8, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
    d8ce:	2e00      	cmp	r6, #0
    d8d0:	d145      	bne.n	d95e <xEventGroupWaitBits+0xda>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    d8d2:	ea14 0f08 	tst.w	r4, r8
    d8d6:	d145      	bne.n	d964 <xEventGroupWaitBits+0xe0>
	xAlreadyYielded = xTaskResumeAll();
    d8d8:	f001 fcb8 	bl	f24c <xTaskResumeAll>
}
    d8dc:	4640      	mov	r0, r8
    d8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8e2:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d8e6:	f383 8811 	msr	BASEPRI, r3
    d8ea:	f3bf 8f6f 	isb	sy
    d8ee:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    d8f2:	493f      	ldr	r1, [pc, #252]	@ (d9f0 <xEventGroupWaitBits+0x16c>)
    d8f4:	483f      	ldr	r0, [pc, #252]	@ (d9f4 <xEventGroupWaitBits+0x170>)
    d8f6:	f240 1241 	movw	r2, #321	@ 0x141
    d8fa:	f003 fbb5 	bl	11068 <am_util_stdio_printf>
    d8fe:	e7fe      	b.n	d8fe <xEventGroupWaitBits+0x7a>
	vTaskSuspendAll();
    d900:	f001 fb28 	bl	ef54 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    d904:	f8d5 8000 	ldr.w	r8, [r5]
	if( xWaitForAllBits == pdFALSE )
    d908:	2e00      	cmp	r6, #0
    d90a:	d051      	beq.n	d9b0 <xEventGroupWaitBits+0x12c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    d90c:	ea34 0308 	bics.w	r3, r4, r8
    d910:	d028      	beq.n	d964 <xEventGroupWaitBits+0xe0>
		else if( xTicksToWait == ( TickType_t ) 0 )
    d912:	9b06      	ldr	r3, [sp, #24]
    d914:	2b00      	cmp	r3, #0
    d916:	d0df      	beq.n	d8d8 <xEventGroupWaitBits+0x54>
			if( xClearOnExit != pdFALSE )
    d918:	1e39      	subs	r1, r7, #0
    d91a:	bf18      	it	ne
    d91c:	2101      	movne	r1, #1
    d91e:	0609      	lsls	r1, r1, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    d920:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
    d924:	461a      	mov	r2, r3
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    d926:	4321      	orrs	r1, r4
    d928:	1d28      	adds	r0, r5, #4
    d92a:	f001 fec3 	bl	f6b4 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
    d92e:	f001 fc8d 	bl	f24c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
    d932:	b948      	cbnz	r0, d948 <xEventGroupWaitBits+0xc4>
			portYIELD_WITHIN_API();
    d934:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    d938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    d93c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    d940:	f3bf 8f4f 	dsb	sy
    d944:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
    d948:	f002 fa2c 	bl	fda4 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    d94c:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
		uxReturn = uxTaskResetEventItemValue();
    d950:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    d952:	d039      	beq.n	d9c8 <xEventGroupWaitBits+0x144>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    d954:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
}
    d958:	4640      	mov	r0, r8
    d95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    d95e:	ea34 0308 	bics.w	r3, r4, r8
    d962:	d1b9      	bne.n	d8d8 <xEventGroupWaitBits+0x54>
			if( xClearOnExit != pdFALSE )
    d964:	2f00      	cmp	r7, #0
    d966:	d0b7      	beq.n	d8d8 <xEventGroupWaitBits+0x54>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    d968:	ea28 0404 	bic.w	r4, r8, r4
    d96c:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
    d96e:	f001 fc6d 	bl	f24c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
    d972:	e7b3      	b.n	d8dc <xEventGroupWaitBits+0x58>
    d974:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d978:	f383 8811 	msr	BASEPRI, r3
    d97c:	f3bf 8f6f 	isb	sy
    d980:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
    d984:	491a      	ldr	r1, [pc, #104]	@ (d9f0 <xEventGroupWaitBits+0x16c>)
    d986:	481b      	ldr	r0, [pc, #108]	@ (d9f4 <xEventGroupWaitBits+0x170>)
    d988:	f44f 72a0 	mov.w	r2, #320	@ 0x140
    d98c:	f003 fb6c 	bl	11068 <am_util_stdio_printf>
    d990:	e7fe      	b.n	d990 <xEventGroupWaitBits+0x10c>
    d992:	f04f 0380 	mov.w	r3, #128	@ 0x80
    d996:	f383 8811 	msr	BASEPRI, r3
    d99a:	f3bf 8f6f 	isb	sy
    d99e:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    d9a2:	4913      	ldr	r1, [pc, #76]	@ (d9f0 <xEventGroupWaitBits+0x16c>)
    d9a4:	4813      	ldr	r0, [pc, #76]	@ (d9f4 <xEventGroupWaitBits+0x170>)
    d9a6:	f240 1245 	movw	r2, #325	@ 0x145
    d9aa:	f003 fb5d 	bl	11068 <am_util_stdio_printf>
    d9ae:	e7fe      	b.n	d9ae <xEventGroupWaitBits+0x12a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    d9b0:	ea14 0f08 	tst.w	r4, r8
    d9b4:	d1d6      	bne.n	d964 <xEventGroupWaitBits+0xe0>
		else if( xTicksToWait == ( TickType_t ) 0 )
    d9b6:	9b06      	ldr	r3, [sp, #24]
    d9b8:	2b00      	cmp	r3, #0
    d9ba:	d08d      	beq.n	d8d8 <xEventGroupWaitBits+0x54>
			if( xClearOnExit != pdFALSE )
    d9bc:	1e39      	subs	r1, r7, #0
    d9be:	bf18      	it	ne
    d9c0:	2101      	movne	r1, #1
    d9c2:	0609      	lsls	r1, r1, #24
    d9c4:	461a      	mov	r2, r3
    d9c6:	e7ae      	b.n	d926 <xEventGroupWaitBits+0xa2>
			taskENTER_CRITICAL();
    d9c8:	f7ff fb7c 	bl	d0c4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
    d9cc:	f8d5 8000 	ldr.w	r8, [r5]
	if( xWaitForAllBits == pdFALSE )
    d9d0:	b94e      	cbnz	r6, d9e6 <xEventGroupWaitBits+0x162>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    d9d2:	ea14 0f08 	tst.w	r4, r8
    d9d6:	d003      	beq.n	d9e0 <xEventGroupWaitBits+0x15c>
					if( xClearOnExit != pdFALSE )
    d9d8:	b117      	cbz	r7, d9e0 <xEventGroupWaitBits+0x15c>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    d9da:	ea28 0404 	bic.w	r4, r8, r4
    d9de:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
    d9e0:	f7ff fb9c 	bl	d11c <vPortExitCritical>
    d9e4:	e7b6      	b.n	d954 <xEventGroupWaitBits+0xd0>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    d9e6:	ea34 0308 	bics.w	r3, r4, r8
    d9ea:	d1f9      	bne.n	d9e0 <xEventGroupWaitBits+0x15c>
    d9ec:	e7f4      	b.n	d9d8 <xEventGroupWaitBits+0x154>
    d9ee:	bf00      	nop
    d9f0:	0002a3fc 	.word	0x0002a3fc
    d9f4:	0002a268 	.word	0x0002a268

0000d9f8 <xEventGroupSetBits>:
{
    d9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
    d9fc:	2800      	cmp	r0, #0
    d9fe:	d042      	beq.n	da86 <xEventGroupSetBits+0x8e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    da00:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
    da04:	460d      	mov	r5, r1
    da06:	d22f      	bcs.n	da68 <xEventGroupSetBits+0x70>
    da08:	4606      	mov	r6, r0
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    da0a:	f100 090c 	add.w	r9, r0, #12
	vTaskSuspendAll();
    da0e:	f001 faa1 	bl	ef54 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
    da12:	6833      	ldr	r3, [r6, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
    da14:	6934      	ldr	r4, [r6, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
    da16:	432b      	orrs	r3, r5
		while( pxListItem != pxListEnd )
    da18:	45a1      	cmp	r9, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
    da1a:	6033      	str	r3, [r6, #0]
		while( pxListItem != pxListEnd )
    da1c:	d01e      	beq.n	da5c <xEventGroupSetBits+0x64>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    da1e:	f04f 0800 	mov.w	r8, #0
    da22:	e009      	b.n	da38 <xEventGroupSetBits+0x40>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    da24:	b137      	cbz	r7, da34 <xEventGroupSetBits+0x3c>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    da26:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
    da28:	bf48      	it	mi
    da2a:	ea48 0805 	orrmi.w	r8, r8, r5
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    da2e:	f001 ff6b 	bl	f908 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    da32:	6833      	ldr	r3, [r6, #0]
		while( pxListItem != pxListEnd )
    da34:	45a1      	cmp	r9, r4
    da36:	d00f      	beq.n	da58 <xEventGroupSetBits+0x60>
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    da38:	6822      	ldr	r2, [r4, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    da3a:	f022 457f 	bic.w	r5, r2, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    da3e:	f012 6f80 	tst.w	r2, #67108864	@ 0x4000000
    da42:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    da44:	f043 7100 	orr.w	r1, r3, #33554432	@ 0x2000000
			pxNext = listGET_NEXT( pxListItem );
    da48:	6864      	ldr	r4, [r4, #4]
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    da4a:	ea05 0703 	and.w	r7, r5, r3
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    da4e:	d0e9      	beq.n	da24 <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    da50:	42bd      	cmp	r5, r7
    da52:	d0e8      	beq.n	da26 <xEventGroupSetBits+0x2e>
		while( pxListItem != pxListEnd )
    da54:	45a1      	cmp	r9, r4
    da56:	d1ef      	bne.n	da38 <xEventGroupSetBits+0x40>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    da58:	ea23 0308 	bic.w	r3, r3, r8
    da5c:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
    da5e:	f001 fbf5 	bl	f24c <xTaskResumeAll>
}
    da62:	6830      	ldr	r0, [r6, #0]
    da64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da68:	f04f 0380 	mov.w	r3, #128	@ 0x80
    da6c:	f383 8811 	msr	BASEPRI, r3
    da70:	f3bf 8f6f 	isb	sy
    da74:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    da78:	490a      	ldr	r1, [pc, #40]	@ (daa4 <xEventGroupSetBits+0xac>)
    da7a:	480b      	ldr	r0, [pc, #44]	@ (daa8 <xEventGroupSetBits+0xb0>)
    da7c:	f240 2213 	movw	r2, #531	@ 0x213
    da80:	f003 faf2 	bl	11068 <am_util_stdio_printf>
    da84:	e7fe      	b.n	da84 <xEventGroupSetBits+0x8c>
    da86:	f04f 0380 	mov.w	r3, #128	@ 0x80
    da8a:	f383 8811 	msr	BASEPRI, r3
    da8e:	f3bf 8f6f 	isb	sy
    da92:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
    da96:	4903      	ldr	r1, [pc, #12]	@ (daa4 <xEventGroupSetBits+0xac>)
    da98:	4803      	ldr	r0, [pc, #12]	@ (daa8 <xEventGroupSetBits+0xb0>)
    da9a:	f240 2212 	movw	r2, #530	@ 0x212
    da9e:	f003 fae3 	bl	11068 <am_util_stdio_printf>
    daa2:	e7fe      	b.n	daa2 <xEventGroupSetBits+0xaa>
    daa4:	0002a3fc 	.word	0x0002a3fc
    daa8:	0002a268 	.word	0x0002a268

0000daac <vEventGroupSetBitsCallback>:
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    daac:	f7ff bfa4 	b.w	d9f8 <xEventGroupSetBits>

0000dab0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
    dab0:	4684      	mov	ip, r0
    dab2:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
    dab4:	4802      	ldr	r0, [pc, #8]	@ (dac0 <xEventGroupSetBitsFromISR+0x10>)
    dab6:	460a      	mov	r2, r1
    dab8:	4661      	mov	r1, ip
    daba:	f002 bc0b 	b.w	102d4 <xTimerPendFunctionCallFromISR>
    dabe:	bf00      	nop
    dac0:	0000daad 	.word	0x0000daad

0000dac4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dac4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    dac8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    dacc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    dace:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dad2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    dad6:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    dad8:	4770      	bx	lr
    dada:	bf00      	nop

0000dadc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    dadc:	2300      	movs	r3, #0
    dade:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    dae0:	4770      	bx	lr
    dae2:	bf00      	nop

0000dae4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    dae4:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
    dae6:	6803      	ldr	r3, [r0, #0]
{
    dae8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    daea:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
    daec:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    daee:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    daf2:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
    daf4:	6091      	str	r1, [r2, #8]
}
    daf6:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
    dafa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
    dafc:	6003      	str	r3, [r0, #0]
}
    dafe:	4770      	bx	lr

0000db00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    db00:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    db02:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    db04:	1c6b      	adds	r3, r5, #1
    db06:	d010      	beq.n	db2a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    db08:	f100 0308 	add.w	r3, r0, #8
    db0c:	461c      	mov	r4, r3
    db0e:	685b      	ldr	r3, [r3, #4]
    db10:	681a      	ldr	r2, [r3, #0]
    db12:	42aa      	cmp	r2, r5
    db14:	d9fa      	bls.n	db0c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
    db16:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
    db18:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
    db1a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    db1c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    db1e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    db20:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
    db22:	6108      	str	r0, [r1, #16]
}
    db24:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
    db26:	6002      	str	r2, [r0, #0]
}
    db28:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
    db2a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
    db2c:	6863      	ldr	r3, [r4, #4]
    db2e:	e7f2      	b.n	db16 <vListInsert+0x16>

0000db30 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    db30:	6903      	ldr	r3, [r0, #16]
{
    db32:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    db34:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    db38:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    db3a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
    db3c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    db3e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    db40:	bf08      	it	eq
    db42:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
    db44:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
    db46:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
    db4a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
    db4c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
    db4e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
    db50:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
    db52:	6818      	ldr	r0, [r3, #0]
}
    db54:	4770      	bx	lr
    db56:	bf00      	nop

0000db58 <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    db58:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
    db5a:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    db5c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
    db5e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    db60:	b92b      	cbnz	r3, db6e <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    db62:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    db64:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    db66:	b346      	cbz	r6, dbba <prvCopyDataToQueue+0x62>
BaseType_t xReturn = pdFALSE;
    db68:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    db6a:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
    db6c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    db6e:	4616      	mov	r6, r2
    db70:	b982      	cbnz	r2, db94 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    db72:	461a      	mov	r2, r3
    db74:	6840      	ldr	r0, [r0, #4]
    db76:	f7fe ffdb 	bl	cb30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    db7a:	6863      	ldr	r3, [r4, #4]
    db7c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    db7e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    db80:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    db82:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    db84:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
    db86:	bf24      	itt	cs
    db88:	6823      	ldrcs	r3, [r4, #0]
    db8a:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    db8c:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
    db8e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    db90:	63a5      	str	r5, [r4, #56]	@ 0x38
}
    db92:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    db94:	461a      	mov	r2, r3
    db96:	68c0      	ldr	r0, [r0, #12]
    db98:	f7fe ffca 	bl	cb30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    db9c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
    db9e:	68e3      	ldr	r3, [r4, #12]
    dba0:	4251      	negs	r1, r2
    dba2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    dba4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    dba6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    dba8:	4293      	cmp	r3, r2
    dbaa:	d202      	bcs.n	dbb2 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    dbac:	68a3      	ldr	r3, [r4, #8]
    dbae:	440b      	add	r3, r1
    dbb0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
    dbb2:	2e02      	cmp	r6, #2
    dbb4:	d006      	beq.n	dbc4 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    dbb6:	3501      	adds	r5, #1
    dbb8:	e7e9      	b.n	db8e <prvCopyDataToQueue+0x36>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    dbba:	6880      	ldr	r0, [r0, #8]
    dbbc:	f002 f83e 	bl	fc3c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
    dbc0:	60a6      	str	r6, [r4, #8]
    dbc2:	e7d2      	b.n	db6a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    dbc4:	2d01      	cmp	r5, #1
    dbc6:	bf38      	it	cc
    dbc8:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
    dbca:	2000      	movs	r0, #0
    dbcc:	e7cd      	b.n	db6a <prvCopyDataToQueue+0x12>
    dbce:	bf00      	nop

0000dbd0 <xQueueGenericCreate>:
	{
    dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    dbd2:	b388      	cbz	r0, dc38 <xQueueGenericCreate+0x68>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    dbd4:	4605      	mov	r5, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    dbd6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    dbda:	3050      	adds	r0, #80	@ 0x50
    dbdc:	460e      	mov	r6, r1
    dbde:	4617      	mov	r7, r2
    dbe0:	f7ff fd04 	bl	d5ec <pvPortMalloc>
		if( pxNewQueue != NULL )
    dbe4:	4604      	mov	r4, r0
    dbe6:	b328      	cbz	r0, dc34 <xQueueGenericCreate+0x64>
	if( uxItemSize == ( UBaseType_t ) 0 )
    dbe8:	b3ae      	cbz	r6, dc56 <xQueueGenericCreate+0x86>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dbea:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    dbee:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
    dbf0:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	taskENTER_CRITICAL();
    dbf4:	f7ff fa66 	bl	d0c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dbf8:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
    dbfc:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
    dbfe:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dc00:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dc04:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dc06:	440a      	add	r2, r1
    dc08:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    dc0a:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dc0c:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    dc0e:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
    dc10:	22ff      	movs	r2, #255	@ 0xff
    dc12:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dc16:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
    dc18:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    dc1c:	f104 0010 	add.w	r0, r4, #16
    dc20:	f7ff ff50 	bl	dac4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    dc24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
    dc28:	f7ff ff4c 	bl	dac4 <vListInitialise>
	taskEXIT_CRITICAL();
    dc2c:	f7ff fa76 	bl	d11c <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
    dc30:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
    dc34:	4620      	mov	r0, r4
    dc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc38:	f04f 0380 	mov.w	r3, #128	@ 0x80
    dc3c:	f383 8811 	msr	BASEPRI, r3
    dc40:	f3bf 8f6f 	isb	sy
    dc44:	f3bf 8f4f 	dsb	sy
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    dc48:	4904      	ldr	r1, [pc, #16]	@ (dc5c <xQueueGenericCreate+0x8c>)
    dc4a:	4805      	ldr	r0, [pc, #20]	@ (dc60 <xQueueGenericCreate+0x90>)
    dc4c:	f44f 72bb 	mov.w	r2, #374	@ 0x176
    dc50:	f003 fa0a 	bl	11068 <am_util_stdio_printf>
    dc54:	e7fe      	b.n	dc54 <xQueueGenericCreate+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    dc56:	4603      	mov	r3, r0
    dc58:	e7c9      	b.n	dbee <xQueueGenericCreate+0x1e>
    dc5a:	bf00      	nop
    dc5c:	0002a460 	.word	0x0002a460
    dc60:	0002a268 	.word	0x0002a268

0000dc64 <xQueueGenericSend>:
{
    dc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dc68:	b085      	sub	sp, #20
    dc6a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
    dc6c:	2800      	cmp	r0, #0
    dc6e:	f000 8142 	beq.w	def6 <xQueueGenericSend+0x292>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    dc72:	4688      	mov	r8, r1
    dc74:	461f      	mov	r7, r3
    dc76:	4604      	mov	r4, r0
    dc78:	2900      	cmp	r1, #0
    dc7a:	f000 8112 	beq.w	dea2 <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    dc7e:	2f02      	cmp	r7, #2
    dc80:	d103      	bne.n	dc8a <xQueueGenericSend+0x26>
    dc82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    dc84:	2b01      	cmp	r3, #1
    dc86:	f040 811f 	bne.w	dec8 <xQueueGenericSend+0x264>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    dc8a:	f001 ff87 	bl	fb9c <xTaskGetSchedulerState>
    dc8e:	2800      	cmp	r0, #0
    dc90:	f000 809b 	beq.w	ddca <xQueueGenericSend+0x166>
		taskENTER_CRITICAL();
    dc94:	f7ff fa16 	bl	d0c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    dc98:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    dc9a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    dc9c:	429a      	cmp	r2, r3
    dc9e:	d37a      	bcc.n	dd96 <xQueueGenericSend+0x132>
    dca0:	2f02      	cmp	r7, #2
    dca2:	d078      	beq.n	dd96 <xQueueGenericSend+0x132>
    dca4:	2300      	movs	r3, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    dca6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
    dcaa:	9a01      	ldr	r2, [sp, #4]
    dcac:	2a00      	cmp	r2, #0
    dcae:	f000 8131 	beq.w	df14 <xQueueGenericSend+0x2b0>
				else if( xEntryTimeSet == pdFALSE )
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	f000 80f1 	beq.w	de9a <xQueueGenericSend+0x236>
		taskEXIT_CRITICAL();
    dcb8:	f7ff fa30 	bl	d11c <vPortExitCritical>
		vTaskSuspendAll();
    dcbc:	f001 f94a 	bl	ef54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    dcc0:	f7ff fa00 	bl	d0c4 <vPortEnterCritical>
    dcc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    dcc8:	2bff      	cmp	r3, #255	@ 0xff
    dcca:	bf04      	itt	eq
    dccc:	2300      	moveq	r3, #0
    dcce:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
    dcd2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    dcd6:	2bff      	cmp	r3, #255	@ 0xff
    dcd8:	bf04      	itt	eq
    dcda:	2300      	moveq	r3, #0
    dcdc:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
    dce0:	f7ff fa1c 	bl	d11c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    dce4:	a901      	add	r1, sp, #4
    dce6:	a802      	add	r0, sp, #8
    dce8:	f001 fe6e 	bl	f9c8 <xTaskCheckForTimeOut>
    dcec:	2800      	cmp	r0, #0
    dcee:	f040 8117 	bne.w	df20 <xQueueGenericSend+0x2bc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    dcf2:	f7ff f9e7 	bl	d0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    dcf6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    dcf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    dcfa:	429a      	cmp	r2, r3
    dcfc:	d078      	beq.n	ddf0 <xQueueGenericSend+0x18c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    dcfe:	f7ff fa0d 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    dd02:	f7ff f9df 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    dd06:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
    dd0a:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
    dd0c:	2d00      	cmp	r5, #0
    dd0e:	dc04      	bgt.n	dd1a <xQueueGenericSend+0xb6>
    dd10:	e011      	b.n	dd36 <xQueueGenericSend+0xd2>
			--cTxLock;
    dd12:	1e6a      	subs	r2, r5, #1
    dd14:	b2d3      	uxtb	r3, r2
    dd16:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
    dd18:	b16b      	cbz	r3, dd36 <xQueueGenericSend+0xd2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    dd1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    dd1c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    dd1e:	b153      	cbz	r3, dd36 <xQueueGenericSend+0xd2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    dd20:	f001 fd90 	bl	f844 <xTaskRemoveFromEventList>
    dd24:	2800      	cmp	r0, #0
    dd26:	d0f4      	beq.n	dd12 <xQueueGenericSend+0xae>
						vTaskMissedYield();
    dd28:	f001 feac 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    dd2c:	1e6a      	subs	r2, r5, #1
    dd2e:	b2d3      	uxtb	r3, r2
    dd30:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
    dd32:	2b00      	cmp	r3, #0
    dd34:	d1f1      	bne.n	dd1a <xQueueGenericSend+0xb6>
		pxQueue->cTxLock = queueUNLOCKED;
    dd36:	23ff      	movs	r3, #255	@ 0xff
    dd38:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    dd3c:	f7ff f9ee 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    dd40:	f7ff f9c0 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    dd44:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
    dd48:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
    dd4a:	2d00      	cmp	r5, #0
    dd4c:	dd14      	ble.n	dd78 <xQueueGenericSend+0x114>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    dd4e:	f104 0910 	add.w	r9, r4, #16
    dd52:	e003      	b.n	dd5c <xQueueGenericSend+0xf8>
				--cRxLock;
    dd54:	1e6a      	subs	r2, r5, #1
    dd56:	b2d3      	uxtb	r3, r2
    dd58:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
    dd5a:	b16b      	cbz	r3, dd78 <xQueueGenericSend+0x114>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    dd5c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    dd5e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    dd60:	b153      	cbz	r3, dd78 <xQueueGenericSend+0x114>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    dd62:	f001 fd6f 	bl	f844 <xTaskRemoveFromEventList>
    dd66:	2800      	cmp	r0, #0
    dd68:	d0f4      	beq.n	dd54 <xQueueGenericSend+0xf0>
					vTaskMissedYield();
    dd6a:	f001 fe8b 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    dd6e:	1e6a      	subs	r2, r5, #1
    dd70:	b2d3      	uxtb	r3, r2
    dd72:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
    dd74:	2b00      	cmp	r3, #0
    dd76:	d1f1      	bne.n	dd5c <xQueueGenericSend+0xf8>
		pxQueue->cRxLock = queueUNLOCKED;
    dd78:	23ff      	movs	r3, #255	@ 0xff
    dd7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    dd7e:	f7ff f9cd 	bl	d11c <vPortExitCritical>
				( void ) xTaskResumeAll();
    dd82:	f001 fa63 	bl	f24c <xTaskResumeAll>
		taskENTER_CRITICAL();
    dd86:	f7ff f99d 	bl	d0c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    dd8a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
    dd8c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    dd8e:	4291      	cmp	r1, r2
    dd90:	f04f 0301 	mov.w	r3, #1
    dd94:	d289      	bcs.n	dcaa <xQueueGenericSend+0x46>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    dd96:	463a      	mov	r2, r7
    dd98:	4641      	mov	r1, r8
    dd9a:	4620      	mov	r0, r4
    dd9c:	f7ff fedc 	bl	db58 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    dda0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    dda2:	2b00      	cmp	r3, #0
    dda4:	f040 809f 	bne.w	dee6 <xQueueGenericSend+0x282>
					else if( xYieldRequired != pdFALSE )
    dda8:	b148      	cbz	r0, ddbe <xQueueGenericSend+0x15a>
						queueYIELD_IF_USING_PREEMPTION();
    ddaa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    ddae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    ddb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    ddb6:	f3bf 8f4f 	dsb	sy
    ddba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    ddbe:	f7ff f9ad 	bl	d11c <vPortExitCritical>
				return pdPASS;
    ddc2:	2001      	movs	r0, #1
}
    ddc4:	b005      	add	sp, #20
    ddc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    ddca:	9b01      	ldr	r3, [sp, #4]
    ddcc:	2b00      	cmp	r3, #0
    ddce:	f43f af61 	beq.w	dc94 <xQueueGenericSend+0x30>
    ddd2:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ddd6:	f383 8811 	msr	BASEPRI, r3
    ddda:	f3bf 8f6f 	isb	sy
    ddde:	f3bf 8f4f 	dsb	sy
    dde2:	496e      	ldr	r1, [pc, #440]	@ (df9c <xQueueGenericSend+0x338>)
    dde4:	486e      	ldr	r0, [pc, #440]	@ (dfa0 <xQueueGenericSend+0x33c>)
    dde6:	f240 22f6 	movw	r2, #758	@ 0x2f6
    ddea:	f003 f93d 	bl	11068 <am_util_stdio_printf>
    ddee:	e7fe      	b.n	ddee <xQueueGenericSend+0x18a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    ddf0:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
    ddf4:	f7ff f992 	bl	d11c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    ddf8:	9901      	ldr	r1, [sp, #4]
    ddfa:	4648      	mov	r0, r9
    ddfc:	f001 fc08 	bl	f610 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
    de00:	f7ff f960 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    de04:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    de08:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    de0a:	2d00      	cmp	r5, #0
    de0c:	dc04      	bgt.n	de18 <xQueueGenericSend+0x1b4>
    de0e:	e011      	b.n	de34 <xQueueGenericSend+0x1d0>
			--cTxLock;
    de10:	1e6b      	subs	r3, r5, #1
    de12:	b2da      	uxtb	r2, r3
    de14:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    de16:	b16a      	cbz	r2, de34 <xQueueGenericSend+0x1d0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    de18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    de1a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    de1c:	b153      	cbz	r3, de34 <xQueueGenericSend+0x1d0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    de1e:	f001 fd11 	bl	f844 <xTaskRemoveFromEventList>
    de22:	2800      	cmp	r0, #0
    de24:	d0f4      	beq.n	de10 <xQueueGenericSend+0x1ac>
						vTaskMissedYield();
    de26:	f001 fe2d 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    de2a:	1e6b      	subs	r3, r5, #1
    de2c:	b2da      	uxtb	r2, r3
    de2e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    de30:	2a00      	cmp	r2, #0
    de32:	d1f1      	bne.n	de18 <xQueueGenericSend+0x1b4>
		pxQueue->cTxLock = queueUNLOCKED;
    de34:	23ff      	movs	r3, #255	@ 0xff
    de36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    de3a:	f7ff f96f 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    de3e:	f7ff f941 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    de42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    de46:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    de48:	2d00      	cmp	r5, #0
    de4a:	dc04      	bgt.n	de56 <xQueueGenericSend+0x1f2>
    de4c:	e011      	b.n	de72 <xQueueGenericSend+0x20e>
				--cRxLock;
    de4e:	1e6b      	subs	r3, r5, #1
    de50:	b2da      	uxtb	r2, r3
    de52:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    de54:	b16a      	cbz	r2, de72 <xQueueGenericSend+0x20e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    de56:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    de58:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    de5a:	b153      	cbz	r3, de72 <xQueueGenericSend+0x20e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    de5c:	f001 fcf2 	bl	f844 <xTaskRemoveFromEventList>
    de60:	2800      	cmp	r0, #0
    de62:	d0f4      	beq.n	de4e <xQueueGenericSend+0x1ea>
					vTaskMissedYield();
    de64:	f001 fe0e 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    de68:	1e6b      	subs	r3, r5, #1
    de6a:	b2da      	uxtb	r2, r3
    de6c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    de6e:	2a00      	cmp	r2, #0
    de70:	d1f1      	bne.n	de56 <xQueueGenericSend+0x1f2>
		pxQueue->cRxLock = queueUNLOCKED;
    de72:	23ff      	movs	r3, #255	@ 0xff
    de74:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    de78:	f7ff f950 	bl	d11c <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
    de7c:	f001 f9e6 	bl	f24c <xTaskResumeAll>
    de80:	2800      	cmp	r0, #0
    de82:	d180      	bne.n	dd86 <xQueueGenericSend+0x122>
					portYIELD_WITHIN_API();
    de84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    de88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    de8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    de90:	f3bf 8f4f 	dsb	sy
    de94:	f3bf 8f6f 	isb	sy
    de98:	e775      	b.n	dd86 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
    de9a:	a802      	add	r0, sp, #8
    de9c:	f001 fd88 	bl	f9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    dea0:	e70a      	b.n	dcb8 <xQueueGenericSend+0x54>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    dea2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    dea4:	2b00      	cmp	r3, #0
    dea6:	f43f aeea 	beq.w	dc7e <xQueueGenericSend+0x1a>
    deaa:	f04f 0380 	mov.w	r3, #128	@ 0x80
    deae:	f383 8811 	msr	BASEPRI, r3
    deb2:	f3bf 8f6f 	isb	sy
    deb6:	f3bf 8f4f 	dsb	sy
    deba:	4938      	ldr	r1, [pc, #224]	@ (df9c <xQueueGenericSend+0x338>)
    debc:	4838      	ldr	r0, [pc, #224]	@ (dfa0 <xQueueGenericSend+0x33c>)
    debe:	f240 22f2 	movw	r2, #754	@ 0x2f2
    dec2:	f003 f8d1 	bl	11068 <am_util_stdio_printf>
    dec6:	e7fe      	b.n	dec6 <xQueueGenericSend+0x262>
    dec8:	f04f 0380 	mov.w	r3, #128	@ 0x80
    decc:	f383 8811 	msr	BASEPRI, r3
    ded0:	f3bf 8f6f 	isb	sy
    ded4:	f3bf 8f4f 	dsb	sy
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    ded8:	4930      	ldr	r1, [pc, #192]	@ (df9c <xQueueGenericSend+0x338>)
    deda:	4831      	ldr	r0, [pc, #196]	@ (dfa0 <xQueueGenericSend+0x33c>)
    dedc:	f240 22f3 	movw	r2, #755	@ 0x2f3
    dee0:	f003 f8c2 	bl	11068 <am_util_stdio_printf>
    dee4:	e7fe      	b.n	dee4 <xQueueGenericSend+0x280>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    dee6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
    deea:	f001 fcab 	bl	f844 <xTaskRemoveFromEventList>
    deee:	2800      	cmp	r0, #0
    def0:	f43f af65 	beq.w	ddbe <xQueueGenericSend+0x15a>
    def4:	e759      	b.n	ddaa <xQueueGenericSend+0x146>
    def6:	f04f 0380 	mov.w	r3, #128	@ 0x80
    defa:	f383 8811 	msr	BASEPRI, r3
    defe:	f3bf 8f6f 	isb	sy
    df02:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
    df06:	4925      	ldr	r1, [pc, #148]	@ (df9c <xQueueGenericSend+0x338>)
    df08:	4825      	ldr	r0, [pc, #148]	@ (dfa0 <xQueueGenericSend+0x33c>)
    df0a:	f240 22f1 	movw	r2, #753	@ 0x2f1
    df0e:	f003 f8ab 	bl	11068 <am_util_stdio_printf>
    df12:	e7fe      	b.n	df12 <xQueueGenericSend+0x2ae>
					taskEXIT_CRITICAL();
    df14:	f7ff f902 	bl	d11c <vPortExitCritical>
					return errQUEUE_FULL;
    df18:	2000      	movs	r0, #0
}
    df1a:	b005      	add	sp, #20
    df1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskENTER_CRITICAL();
    df20:	f7ff f8d0 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    df24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    df28:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    df2a:	2d00      	cmp	r5, #0
    df2c:	dd10      	ble.n	df50 <xQueueGenericSend+0x2ec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    df2e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
    df32:	e003      	b.n	df3c <xQueueGenericSend+0x2d8>
			--cTxLock;
    df34:	1e6b      	subs	r3, r5, #1
    df36:	b2da      	uxtb	r2, r3
    df38:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    df3a:	b14a      	cbz	r2, df50 <xQueueGenericSend+0x2ec>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    df3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    df3e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    df40:	b133      	cbz	r3, df50 <xQueueGenericSend+0x2ec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    df42:	f001 fc7f 	bl	f844 <xTaskRemoveFromEventList>
    df46:	2800      	cmp	r0, #0
    df48:	d0f4      	beq.n	df34 <xQueueGenericSend+0x2d0>
						vTaskMissedYield();
    df4a:	f001 fd9b 	bl	fa84 <vTaskMissedYield>
    df4e:	e7f1      	b.n	df34 <xQueueGenericSend+0x2d0>
		pxQueue->cTxLock = queueUNLOCKED;
    df50:	23ff      	movs	r3, #255	@ 0xff
    df52:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    df56:	f7ff f8e1 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    df5a:	f7ff f8b3 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    df5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    df62:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    df64:	2d00      	cmp	r5, #0
    df66:	dd10      	ble.n	df8a <xQueueGenericSend+0x326>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    df68:	f104 0610 	add.w	r6, r4, #16
    df6c:	e003      	b.n	df76 <xQueueGenericSend+0x312>
				--cRxLock;
    df6e:	1e6b      	subs	r3, r5, #1
    df70:	b2da      	uxtb	r2, r3
    df72:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    df74:	b14a      	cbz	r2, df8a <xQueueGenericSend+0x326>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    df76:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    df78:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    df7a:	b133      	cbz	r3, df8a <xQueueGenericSend+0x326>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    df7c:	f001 fc62 	bl	f844 <xTaskRemoveFromEventList>
    df80:	2800      	cmp	r0, #0
    df82:	d0f4      	beq.n	df6e <xQueueGenericSend+0x30a>
					vTaskMissedYield();
    df84:	f001 fd7e 	bl	fa84 <vTaskMissedYield>
    df88:	e7f1      	b.n	df6e <xQueueGenericSend+0x30a>
		pxQueue->cRxLock = queueUNLOCKED;
    df8a:	23ff      	movs	r3, #255	@ 0xff
    df8c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    df90:	f7ff f8c4 	bl	d11c <vPortExitCritical>
			( void ) xTaskResumeAll();
    df94:	f001 f95a 	bl	f24c <xTaskResumeAll>
			return errQUEUE_FULL;
    df98:	e7be      	b.n	df18 <xQueueGenericSend+0x2b4>
    df9a:	bf00      	nop
    df9c:	0002a460 	.word	0x0002a460
    dfa0:	0002a268 	.word	0x0002a268

0000dfa4 <xQueueCreateMutex>:
	{
    dfa4:	b570      	push	{r4, r5, r6, lr}
    dfa6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    dfa8:	2050      	movs	r0, #80	@ 0x50
    dfaa:	f7ff fb1f 	bl	d5ec <pvPortMalloc>
		if( pxNewQueue != NULL )
    dfae:	4604      	mov	r4, r0
    dfb0:	b360      	cbz	r0, e00c <xQueueCreateMutex+0x68>
	pxNewQueue->uxLength = uxQueueLength;
    dfb2:	2500      	movs	r5, #0
    dfb4:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    dfb6:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    dfb8:	e9c0 350f 	strd	r3, r5, [r0, #60]	@ 0x3c
	taskENTER_CRITICAL();
    dfbc:	f7ff f882 	bl	d0c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dfc0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    dfc2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    dfc4:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
    dfc6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dfc8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dfcc:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dfce:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    dfd0:	440a      	add	r2, r1
    dfd2:	e9c4 3202 	strd	r3, r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
    dfd6:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    dfd8:	63a5      	str	r5, [r4, #56]	@ 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    dfda:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
    dfde:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    dfe2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    dfe6:	f7ff fd6d 	bl	dac4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    dfea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
    dfee:	f7ff fd69 	bl	dac4 <vListInitialise>
	taskEXIT_CRITICAL();
    dff2:	f7ff f893 	bl	d11c <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
    dff6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
    dffa:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    dffc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
    dffe:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    e000:	462b      	mov	r3, r5
    e002:	462a      	mov	r2, r5
    e004:	4629      	mov	r1, r5
    e006:	4620      	mov	r0, r4
    e008:	f7ff fe2c 	bl	dc64 <xQueueGenericSend>
	}
    e00c:	4620      	mov	r0, r4
    e00e:	bd70      	pop	{r4, r5, r6, pc}

0000e010 <xQueueGenericSendFromISR>:
{
    e010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
    e014:	2800      	cmp	r0, #0
    e016:	d051      	beq.n	e0bc <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e018:	460e      	mov	r6, r1
    e01a:	4617      	mov	r7, r2
    e01c:	461d      	mov	r5, r3
    e01e:	4604      	mov	r4, r0
    e020:	b359      	cbz	r1, e07a <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e022:	2d02      	cmp	r5, #2
    e024:	d102      	bne.n	e02c <xQueueGenericSendFromISR+0x1c>
    e026:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    e028:	2b01      	cmp	r3, #1
    e02a:	d138      	bne.n	e09e <xQueueGenericSendFromISR+0x8e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    e02c:	f7ff f8e0 	bl	d1f0 <vPortValidateInterruptPriority>
	__asm volatile
    e030:	f3ef 8811 	mrs	r8, BASEPRI
    e034:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e038:	f383 8811 	msr	BASEPRI, r3
    e03c:	f3bf 8f6f 	isb	sy
    e040:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e044:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    e046:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    e048:	429a      	cmp	r2, r3
    e04a:	d306      	bcc.n	e05a <xQueueGenericSendFromISR+0x4a>
    e04c:	2d02      	cmp	r5, #2
    e04e:	d004      	beq.n	e05a <xQueueGenericSendFromISR+0x4a>
			xReturn = errQUEUE_FULL;
    e050:	2000      	movs	r0, #0
	__asm volatile
    e052:	f388 8811 	msr	BASEPRI, r8
}
    e056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e05a:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
    e05c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e060:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
    e062:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e064:	4620      	mov	r0, r4
    e066:	f7ff fd77 	bl	db58 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
    e06a:	1c6b      	adds	r3, r5, #1
    e06c:	d035      	beq.n	e0da <xQueueGenericSendFromISR+0xca>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    e06e:	1c6b      	adds	r3, r5, #1
    e070:	b25b      	sxtb	r3, r3
    e072:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
    e076:	2001      	movs	r0, #1
    e078:	e7eb      	b.n	e052 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e07a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    e07c:	2b00      	cmp	r3, #0
    e07e:	d0d0      	beq.n	e022 <xQueueGenericSendFromISR+0x12>
	__asm volatile
    e080:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e084:	f383 8811 	msr	BASEPRI, r3
    e088:	f3bf 8f6f 	isb	sy
    e08c:	f3bf 8f4f 	dsb	sy
    e090:	4919      	ldr	r1, [pc, #100]	@ (e0f8 <xQueueGenericSendFromISR+0xe8>)
    e092:	481a      	ldr	r0, [pc, #104]	@ (e0fc <xQueueGenericSendFromISR+0xec>)
    e094:	f44f 7271 	mov.w	r2, #964	@ 0x3c4
    e098:	f002 ffe6 	bl	11068 <am_util_stdio_printf>
    e09c:	e7fe      	b.n	e09c <xQueueGenericSendFromISR+0x8c>
    e09e:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e0a2:	f383 8811 	msr	BASEPRI, r3
    e0a6:	f3bf 8f6f 	isb	sy
    e0aa:	f3bf 8f4f 	dsb	sy
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e0ae:	4912      	ldr	r1, [pc, #72]	@ (e0f8 <xQueueGenericSendFromISR+0xe8>)
    e0b0:	4812      	ldr	r0, [pc, #72]	@ (e0fc <xQueueGenericSendFromISR+0xec>)
    e0b2:	f240 32c5 	movw	r2, #965	@ 0x3c5
    e0b6:	f002 ffd7 	bl	11068 <am_util_stdio_printf>
    e0ba:	e7fe      	b.n	e0ba <xQueueGenericSendFromISR+0xaa>
    e0bc:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e0c0:	f383 8811 	msr	BASEPRI, r3
    e0c4:	f3bf 8f6f 	isb	sy
    e0c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
    e0cc:	490a      	ldr	r1, [pc, #40]	@ (e0f8 <xQueueGenericSendFromISR+0xe8>)
    e0ce:	480b      	ldr	r0, [pc, #44]	@ (e0fc <xQueueGenericSendFromISR+0xec>)
    e0d0:	f240 32c3 	movw	r2, #963	@ 0x3c3
    e0d4:	f002 ffc8 	bl	11068 <am_util_stdio_printf>
    e0d8:	e7fe      	b.n	e0d8 <xQueueGenericSendFromISR+0xc8>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e0da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    e0dc:	2b00      	cmp	r3, #0
    e0de:	d0ca      	beq.n	e076 <xQueueGenericSendFromISR+0x66>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e0e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
    e0e4:	f001 fbae 	bl	f844 <xTaskRemoveFromEventList>
    e0e8:	2800      	cmp	r0, #0
    e0ea:	d0c4      	beq.n	e076 <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
    e0ec:	2f00      	cmp	r7, #0
    e0ee:	d0c2      	beq.n	e076 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
    e0f0:	2301      	movs	r3, #1
    e0f2:	603b      	str	r3, [r7, #0]
    e0f4:	e7bf      	b.n	e076 <xQueueGenericSendFromISR+0x66>
    e0f6:	bf00      	nop
    e0f8:	0002a460 	.word	0x0002a460
    e0fc:	0002a268 	.word	0x0002a268

0000e100 <xQueueReceive>:
{
    e100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e104:	b085      	sub	sp, #20
    e106:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    e108:	2800      	cmp	r0, #0
    e10a:	f000 8156 	beq.w	e3ba <xQueueReceive+0x2ba>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e10e:	460f      	mov	r7, r1
    e110:	4604      	mov	r4, r0
    e112:	2900      	cmp	r1, #0
    e114:	f000 812b 	beq.w	e36e <xQueueReceive+0x26e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e118:	f001 fd40 	bl	fb9c <xTaskGetSchedulerState>
    e11c:	2800      	cmp	r0, #0
    e11e:	f000 8139 	beq.w	e394 <xQueueReceive+0x294>
		taskENTER_CRITICAL();
    e122:	f7fe ffcf 	bl	d0c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e126:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e128:	2d00      	cmp	r5, #0
    e12a:	f040 8155 	bne.w	e3d8 <xQueueReceive+0x2d8>
				if( xTicksToWait == ( TickType_t ) 0 )
    e12e:	9b01      	ldr	r3, [sp, #4]
    e130:	2b00      	cmp	r3, #0
    e132:	f000 80bf 	beq.w	e2b4 <xQueueReceive+0x1b4>
					vTaskInternalSetTimeOutState( &xTimeOut );
    e136:	a802      	add	r0, sp, #8
    e138:	f001 fc3a 	bl	f9b0 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
    e13c:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e13e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
    e142:	f7fe ffeb 	bl	d11c <vPortExitCritical>
		vTaskSuspendAll();
    e146:	f000 ff05 	bl	ef54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    e14a:	f7fe ffbb 	bl	d0c4 <vPortEnterCritical>
    e14e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e152:	2bff      	cmp	r3, #255	@ 0xff
    e154:	bf08      	it	eq
    e156:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
    e15a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e15e:	2bff      	cmp	r3, #255	@ 0xff
    e160:	bf08      	it	eq
    e162:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
    e166:	f7fe ffd9 	bl	d11c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e16a:	a901      	add	r1, sp, #4
    e16c:	a802      	add	r0, sp, #8
    e16e:	f001 fc2b 	bl	f9c8 <xTaskCheckForTimeOut>
    e172:	2800      	cmp	r0, #0
    e174:	d14c      	bne.n	e210 <xQueueReceive+0x110>
	taskENTER_CRITICAL();
    e176:	f7fe ffa5 	bl	d0c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    e17a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    e17c:	2b00      	cmp	r3, #0
    e17e:	f000 809f 	beq.w	e2c0 <xQueueReceive+0x1c0>
	taskEXIT_CRITICAL();
    e182:	f7fe ffcb 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e186:	f7fe ff9d 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e18a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e18e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e190:	2d00      	cmp	r5, #0
    e192:	dd14      	ble.n	e1be <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e194:	f104 0924 	add.w	r9, r4, #36	@ 0x24
    e198:	e003      	b.n	e1a2 <xQueueReceive+0xa2>
			--cTxLock;
    e19a:	1e6b      	subs	r3, r5, #1
    e19c:	b2da      	uxtb	r2, r3
    e19e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e1a0:	b16a      	cbz	r2, e1be <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e1a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e1a4:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e1a6:	b153      	cbz	r3, e1be <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e1a8:	f001 fb4c 	bl	f844 <xTaskRemoveFromEventList>
    e1ac:	2800      	cmp	r0, #0
    e1ae:	d0f4      	beq.n	e19a <xQueueReceive+0x9a>
						vTaskMissedYield();
    e1b0:	f001 fc68 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e1b4:	1e6b      	subs	r3, r5, #1
    e1b6:	b2da      	uxtb	r2, r3
    e1b8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e1ba:	2a00      	cmp	r2, #0
    e1bc:	d1f1      	bne.n	e1a2 <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
    e1be:	23ff      	movs	r3, #255	@ 0xff
    e1c0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e1c4:	f7fe ffaa 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e1c8:	f7fe ff7c 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e1cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e1d0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e1d2:	2d00      	cmp	r5, #0
    e1d4:	dd14      	ble.n	e200 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e1d6:	f104 0910 	add.w	r9, r4, #16
    e1da:	e003      	b.n	e1e4 <xQueueReceive+0xe4>
				--cRxLock;
    e1dc:	1e6b      	subs	r3, r5, #1
    e1de:	b2da      	uxtb	r2, r3
    e1e0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e1e2:	b16a      	cbz	r2, e200 <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e1e4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e1e6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e1e8:	b153      	cbz	r3, e200 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e1ea:	f001 fb2b 	bl	f844 <xTaskRemoveFromEventList>
    e1ee:	2800      	cmp	r0, #0
    e1f0:	d0f4      	beq.n	e1dc <xQueueReceive+0xdc>
					vTaskMissedYield();
    e1f2:	f001 fc47 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e1f6:	1e6b      	subs	r3, r5, #1
    e1f8:	b2da      	uxtb	r2, r3
    e1fa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e1fc:	2a00      	cmp	r2, #0
    e1fe:	d1f1      	bne.n	e1e4 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
    e200:	23ff      	movs	r3, #255	@ 0xff
    e202:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    e206:	f7fe ff89 	bl	d11c <vPortExitCritical>
				( void ) xTaskResumeAll();
    e20a:	f001 f81f 	bl	f24c <xTaskResumeAll>
    e20e:	e047      	b.n	e2a0 <xQueueReceive+0x1a0>
	taskENTER_CRITICAL();
    e210:	f7fe ff58 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e214:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e218:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e21a:	2d00      	cmp	r5, #0
    e21c:	dc04      	bgt.n	e228 <xQueueReceive+0x128>
    e21e:	e011      	b.n	e244 <xQueueReceive+0x144>
			--cTxLock;
    e220:	1e6b      	subs	r3, r5, #1
    e222:	b2da      	uxtb	r2, r3
    e224:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e226:	b16a      	cbz	r2, e244 <xQueueReceive+0x144>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e228:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e22a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e22c:	b153      	cbz	r3, e244 <xQueueReceive+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e22e:	f001 fb09 	bl	f844 <xTaskRemoveFromEventList>
    e232:	2800      	cmp	r0, #0
    e234:	d0f4      	beq.n	e220 <xQueueReceive+0x120>
						vTaskMissedYield();
    e236:	f001 fc25 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e23a:	1e6b      	subs	r3, r5, #1
    e23c:	b2da      	uxtb	r2, r3
    e23e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e240:	2a00      	cmp	r2, #0
    e242:	d1f1      	bne.n	e228 <xQueueReceive+0x128>
		pxQueue->cTxLock = queueUNLOCKED;
    e244:	23ff      	movs	r3, #255	@ 0xff
    e246:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e24a:	f7fe ff67 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e24e:	f7fe ff39 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e252:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e256:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e258:	2d00      	cmp	r5, #0
    e25a:	dd14      	ble.n	e286 <xQueueReceive+0x186>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e25c:	f104 0910 	add.w	r9, r4, #16
    e260:	e003      	b.n	e26a <xQueueReceive+0x16a>
				--cRxLock;
    e262:	1e6b      	subs	r3, r5, #1
    e264:	b2da      	uxtb	r2, r3
    e266:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e268:	b16a      	cbz	r2, e286 <xQueueReceive+0x186>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e26a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e26c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e26e:	b153      	cbz	r3, e286 <xQueueReceive+0x186>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e270:	f001 fae8 	bl	f844 <xTaskRemoveFromEventList>
    e274:	2800      	cmp	r0, #0
    e276:	d0f4      	beq.n	e262 <xQueueReceive+0x162>
					vTaskMissedYield();
    e278:	f001 fc04 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e27c:	1e6b      	subs	r3, r5, #1
    e27e:	b2da      	uxtb	r2, r3
    e280:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e282:	2a00      	cmp	r2, #0
    e284:	d1f1      	bne.n	e26a <xQueueReceive+0x16a>
		pxQueue->cRxLock = queueUNLOCKED;
    e286:	23ff      	movs	r3, #255	@ 0xff
    e288:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    e28c:	f7fe ff46 	bl	d11c <vPortExitCritical>
			( void ) xTaskResumeAll();
    e290:	f000 ffdc 	bl	f24c <xTaskResumeAll>
	taskENTER_CRITICAL();
    e294:	f7fe ff16 	bl	d0c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    e298:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    e29a:	b15b      	cbz	r3, e2b4 <xQueueReceive+0x1b4>
	taskEXIT_CRITICAL();
    e29c:	f7fe ff3e 	bl	d11c <vPortExitCritical>
		taskENTER_CRITICAL();
    e2a0:	f7fe ff10 	bl	d0c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e2a4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e2a6:	2d00      	cmp	r5, #0
    e2a8:	f040 8096 	bne.w	e3d8 <xQueueReceive+0x2d8>
				if( xTicksToWait == ( TickType_t ) 0 )
    e2ac:	9b01      	ldr	r3, [sp, #4]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	f47f af47 	bne.w	e142 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
    e2b4:	f7fe ff32 	bl	d11c <vPortExitCritical>
					return errQUEUE_EMPTY;
    e2b8:	2000      	movs	r0, #0
}
    e2ba:	b005      	add	sp, #20
    e2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e2c0:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
    e2c4:	f7fe ff2a 	bl	d11c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e2c8:	9901      	ldr	r1, [sp, #4]
    e2ca:	4648      	mov	r0, r9
    e2cc:	f001 f9a0 	bl	f610 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
    e2d0:	f7fe fef8 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e2d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e2d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e2da:	2d00      	cmp	r5, #0
    e2dc:	dc04      	bgt.n	e2e8 <xQueueReceive+0x1e8>
    e2de:	e011      	b.n	e304 <xQueueReceive+0x204>
			--cTxLock;
    e2e0:	1e6b      	subs	r3, r5, #1
    e2e2:	b2da      	uxtb	r2, r3
    e2e4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e2e6:	b16a      	cbz	r2, e304 <xQueueReceive+0x204>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e2e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e2ea:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e2ec:	b153      	cbz	r3, e304 <xQueueReceive+0x204>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e2ee:	f001 faa9 	bl	f844 <xTaskRemoveFromEventList>
    e2f2:	2800      	cmp	r0, #0
    e2f4:	d0f4      	beq.n	e2e0 <xQueueReceive+0x1e0>
						vTaskMissedYield();
    e2f6:	f001 fbc5 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e2fa:	1e6b      	subs	r3, r5, #1
    e2fc:	b2da      	uxtb	r2, r3
    e2fe:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e300:	2a00      	cmp	r2, #0
    e302:	d1f1      	bne.n	e2e8 <xQueueReceive+0x1e8>
		pxQueue->cTxLock = queueUNLOCKED;
    e304:	23ff      	movs	r3, #255	@ 0xff
    e306:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e30a:	f7fe ff07 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e30e:	f7fe fed9 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e312:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e316:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e318:	2d00      	cmp	r5, #0
    e31a:	dd14      	ble.n	e346 <xQueueReceive+0x246>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e31c:	f104 0910 	add.w	r9, r4, #16
    e320:	e003      	b.n	e32a <xQueueReceive+0x22a>
				--cRxLock;
    e322:	1e6b      	subs	r3, r5, #1
    e324:	b2da      	uxtb	r2, r3
    e326:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e328:	b16a      	cbz	r2, e346 <xQueueReceive+0x246>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e32a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e32c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e32e:	b153      	cbz	r3, e346 <xQueueReceive+0x246>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e330:	f001 fa88 	bl	f844 <xTaskRemoveFromEventList>
    e334:	2800      	cmp	r0, #0
    e336:	d0f4      	beq.n	e322 <xQueueReceive+0x222>
					vTaskMissedYield();
    e338:	f001 fba4 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e33c:	1e6b      	subs	r3, r5, #1
    e33e:	b2da      	uxtb	r2, r3
    e340:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e342:	2a00      	cmp	r2, #0
    e344:	d1f1      	bne.n	e32a <xQueueReceive+0x22a>
		pxQueue->cRxLock = queueUNLOCKED;
    e346:	23ff      	movs	r3, #255	@ 0xff
    e348:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    e34c:	f7fe fee6 	bl	d11c <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
    e350:	f000 ff7c 	bl	f24c <xTaskResumeAll>
    e354:	2800      	cmp	r0, #0
    e356:	d1a3      	bne.n	e2a0 <xQueueReceive+0x1a0>
					portYIELD_WITHIN_API();
    e358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    e35c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    e360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    e364:	f3bf 8f4f 	dsb	sy
    e368:	f3bf 8f6f 	isb	sy
    e36c:	e798      	b.n	e2a0 <xQueueReceive+0x1a0>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e36e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    e370:	2b00      	cmp	r3, #0
    e372:	f43f aed1 	beq.w	e118 <xQueueReceive+0x18>
    e376:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e37a:	f383 8811 	msr	BASEPRI, r3
    e37e:	f3bf 8f6f 	isb	sy
    e382:	f3bf 8f4f 	dsb	sy
    e386:	4927      	ldr	r1, [pc, #156]	@ (e424 <xQueueReceive+0x324>)
    e388:	4827      	ldr	r0, [pc, #156]	@ (e428 <xQueueReceive+0x328>)
    e38a:	f240 5204 	movw	r2, #1284	@ 0x504
    e38e:	f002 fe6b 	bl	11068 <am_util_stdio_printf>
    e392:	e7fe      	b.n	e392 <xQueueReceive+0x292>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e394:	9b01      	ldr	r3, [sp, #4]
    e396:	2b00      	cmp	r3, #0
    e398:	f43f aec3 	beq.w	e122 <xQueueReceive+0x22>
    e39c:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e3a0:	f383 8811 	msr	BASEPRI, r3
    e3a4:	f3bf 8f6f 	isb	sy
    e3a8:	f3bf 8f4f 	dsb	sy
    e3ac:	491d      	ldr	r1, [pc, #116]	@ (e424 <xQueueReceive+0x324>)
    e3ae:	481e      	ldr	r0, [pc, #120]	@ (e428 <xQueueReceive+0x328>)
    e3b0:	f240 5209 	movw	r2, #1289	@ 0x509
    e3b4:	f002 fe58 	bl	11068 <am_util_stdio_printf>
    e3b8:	e7fe      	b.n	e3b8 <xQueueReceive+0x2b8>
    e3ba:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e3be:	f383 8811 	msr	BASEPRI, r3
    e3c2:	f3bf 8f6f 	isb	sy
    e3c6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
    e3ca:	4916      	ldr	r1, [pc, #88]	@ (e424 <xQueueReceive+0x324>)
    e3cc:	4816      	ldr	r0, [pc, #88]	@ (e428 <xQueueReceive+0x328>)
    e3ce:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
    e3d2:	f002 fe49 	bl	11068 <am_util_stdio_printf>
    e3d6:	e7fe      	b.n	e3d6 <xQueueReceive+0x2d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    e3d8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
    e3da:	b152      	cbz	r2, e3f2 <xQueueReceive+0x2f2>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    e3dc:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    e3de:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    e3e0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    e3e2:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    e3e4:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    e3e6:	bf24      	itt	cs
    e3e8:	6821      	ldrcs	r1, [r4, #0]
    e3ea:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    e3ec:	4638      	mov	r0, r7
    e3ee:	f7fe fb9f 	bl	cb30 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    e3f2:	3d01      	subs	r5, #1
    e3f4:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e3f6:	6923      	ldr	r3, [r4, #16]
    e3f8:	b91b      	cbnz	r3, e402 <xQueueReceive+0x302>
				taskEXIT_CRITICAL();
    e3fa:	f7fe fe8f 	bl	d11c <vPortExitCritical>
				return pdPASS;
    e3fe:	2001      	movs	r0, #1
    e400:	e75b      	b.n	e2ba <xQueueReceive+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e402:	f104 0010 	add.w	r0, r4, #16
    e406:	f001 fa1d 	bl	f844 <xTaskRemoveFromEventList>
    e40a:	2800      	cmp	r0, #0
    e40c:	d0f5      	beq.n	e3fa <xQueueReceive+0x2fa>
						queueYIELD_IF_USING_PREEMPTION();
    e40e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    e412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    e416:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    e41a:	f3bf 8f4f 	dsb	sy
    e41e:	f3bf 8f6f 	isb	sy
    e422:	e7ea      	b.n	e3fa <xQueueReceive+0x2fa>
    e424:	0002a460 	.word	0x0002a460
    e428:	0002a268 	.word	0x0002a268

0000e42c <xQueueSemaphoreTake>:
{
    e42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e430:	b084      	sub	sp, #16
    e432:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    e434:	2800      	cmp	r0, #0
    e436:	f000 8165 	beq.w	e704 <xQueueSemaphoreTake+0x2d8>
	configASSERT( pxQueue->uxItemSize == 0 );
    e43a:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    e43c:	4604      	mov	r4, r0
    e43e:	b94f      	cbnz	r7, e454 <xQueueSemaphoreTake+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e440:	f001 fbac 	bl	fb9c <xTaskGetSchedulerState>
    e444:	4605      	mov	r5, r0
    e446:	b9a0      	cbnz	r0, e472 <xQueueSemaphoreTake+0x46>
    e448:	9b01      	ldr	r3, [sp, #4]
    e44a:	2b00      	cmp	r3, #0
    e44c:	f040 8147 	bne.w	e6de <xQueueSemaphoreTake+0x2b2>
    e450:	4607      	mov	r7, r0
    e452:	e00f      	b.n	e474 <xQueueSemaphoreTake+0x48>
    e454:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e458:	f383 8811 	msr	BASEPRI, r3
    e45c:	f3bf 8f6f 	isb	sy
    e460:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue->uxItemSize == 0 );
    e464:	49a5      	ldr	r1, [pc, #660]	@ (e6fc <xQueueSemaphoreTake+0x2d0>)
    e466:	48a6      	ldr	r0, [pc, #664]	@ (e700 <xQueueSemaphoreTake+0x2d4>)
    e468:	f240 5295 	movw	r2, #1429	@ 0x595
    e46c:	f002 fdfc 	bl	11068 <am_util_stdio_printf>
    e470:	e7fe      	b.n	e470 <xQueueSemaphoreTake+0x44>
    e472:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e474:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskENTER_CRITICAL();
    e478:	f7fe fe24 	bl	d0c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    e47c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    e47e:	2b00      	cmp	r3, #0
    e480:	f040 815d 	bne.w	e73e <xQueueSemaphoreTake+0x312>
				if( xTicksToWait == ( TickType_t ) 0 )
    e484:	9b01      	ldr	r3, [sp, #4]
    e486:	2b00      	cmp	r3, #0
    e488:	f000 8163 	beq.w	e752 <xQueueSemaphoreTake+0x326>
				else if( xEntryTimeSet == pdFALSE )
    e48c:	2d00      	cmp	r5, #0
    e48e:	f000 80b9 	beq.w	e604 <xQueueSemaphoreTake+0x1d8>
		taskEXIT_CRITICAL();
    e492:	f7fe fe43 	bl	d11c <vPortExitCritical>
		vTaskSuspendAll();
    e496:	f000 fd5d 	bl	ef54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    e49a:	f7fe fe13 	bl	d0c4 <vPortEnterCritical>
    e49e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e4a2:	2bff      	cmp	r3, #255	@ 0xff
    e4a4:	bf04      	itt	eq
    e4a6:	2300      	moveq	r3, #0
    e4a8:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
    e4ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e4b0:	2bff      	cmp	r3, #255	@ 0xff
    e4b2:	bf04      	itt	eq
    e4b4:	2300      	moveq	r3, #0
    e4b6:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
    e4ba:	f7fe fe2f 	bl	d11c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e4be:	a901      	add	r1, sp, #4
    e4c0:	a802      	add	r0, sp, #8
    e4c2:	f001 fa81 	bl	f9c8 <xTaskCheckForTimeOut>
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d14d      	bne.n	e566 <xQueueSemaphoreTake+0x13a>
	taskENTER_CRITICAL();
    e4ca:	f7fe fdfb 	bl	d0c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    e4ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	f000 809b 	beq.w	e60c <xQueueSemaphoreTake+0x1e0>
	taskEXIT_CRITICAL();
    e4d6:	f7fe fe21 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e4da:	f7fe fdf3 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e4de:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e4e2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e4e4:	2d00      	cmp	r5, #0
    e4e6:	dd14      	ble.n	e512 <xQueueSemaphoreTake+0xe6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e4e8:	f104 0824 	add.w	r8, r4, #36	@ 0x24
    e4ec:	e003      	b.n	e4f6 <xQueueSemaphoreTake+0xca>
			--cTxLock;
    e4ee:	1e6b      	subs	r3, r5, #1
    e4f0:	b2da      	uxtb	r2, r3
    e4f2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e4f4:	b16a      	cbz	r2, e512 <xQueueSemaphoreTake+0xe6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e4f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e4f8:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e4fa:	b153      	cbz	r3, e512 <xQueueSemaphoreTake+0xe6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e4fc:	f001 f9a2 	bl	f844 <xTaskRemoveFromEventList>
    e500:	2800      	cmp	r0, #0
    e502:	d0f4      	beq.n	e4ee <xQueueSemaphoreTake+0xc2>
						vTaskMissedYield();
    e504:	f001 fabe 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e508:	1e6b      	subs	r3, r5, #1
    e50a:	b2da      	uxtb	r2, r3
    e50c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e50e:	2a00      	cmp	r2, #0
    e510:	d1f1      	bne.n	e4f6 <xQueueSemaphoreTake+0xca>
		pxQueue->cTxLock = queueUNLOCKED;
    e512:	23ff      	movs	r3, #255	@ 0xff
    e514:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e518:	f7fe fe00 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e51c:	f7fe fdd2 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e520:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e524:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e526:	2d00      	cmp	r5, #0
    e528:	dd14      	ble.n	e554 <xQueueSemaphoreTake+0x128>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e52a:	f104 0810 	add.w	r8, r4, #16
    e52e:	e003      	b.n	e538 <xQueueSemaphoreTake+0x10c>
				--cRxLock;
    e530:	1e6b      	subs	r3, r5, #1
    e532:	b2da      	uxtb	r2, r3
    e534:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e536:	b16a      	cbz	r2, e554 <xQueueSemaphoreTake+0x128>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e538:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e53a:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e53c:	b153      	cbz	r3, e554 <xQueueSemaphoreTake+0x128>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e53e:	f001 f981 	bl	f844 <xTaskRemoveFromEventList>
    e542:	2800      	cmp	r0, #0
    e544:	d0f4      	beq.n	e530 <xQueueSemaphoreTake+0x104>
					vTaskMissedYield();
    e546:	f001 fa9d 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e54a:	1e6b      	subs	r3, r5, #1
    e54c:	b2da      	uxtb	r2, r3
    e54e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e550:	2a00      	cmp	r2, #0
    e552:	d1f1      	bne.n	e538 <xQueueSemaphoreTake+0x10c>
		pxQueue->cRxLock = queueUNLOCKED;
    e554:	23ff      	movs	r3, #255	@ 0xff
    e556:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    e55a:	f7fe fddf 	bl	d11c <vPortExitCritical>
				( void ) xTaskResumeAll();
    e55e:	f000 fe75 	bl	f24c <xTaskResumeAll>
    e562:	2501      	movs	r5, #1
    e564:	e788      	b.n	e478 <xQueueSemaphoreTake+0x4c>
	taskENTER_CRITICAL();
    e566:	f7fe fdad 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e56a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e56e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e570:	2d00      	cmp	r5, #0
    e572:	dc04      	bgt.n	e57e <xQueueSemaphoreTake+0x152>
    e574:	e011      	b.n	e59a <xQueueSemaphoreTake+0x16e>
			--cTxLock;
    e576:	1e6b      	subs	r3, r5, #1
    e578:	b2da      	uxtb	r2, r3
    e57a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e57c:	b16a      	cbz	r2, e59a <xQueueSemaphoreTake+0x16e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e57e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e580:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e582:	b153      	cbz	r3, e59a <xQueueSemaphoreTake+0x16e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e584:	f001 f95e 	bl	f844 <xTaskRemoveFromEventList>
    e588:	2800      	cmp	r0, #0
    e58a:	d0f4      	beq.n	e576 <xQueueSemaphoreTake+0x14a>
						vTaskMissedYield();
    e58c:	f001 fa7a 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e590:	1e6b      	subs	r3, r5, #1
    e592:	b2da      	uxtb	r2, r3
    e594:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e596:	2a00      	cmp	r2, #0
    e598:	d1f1      	bne.n	e57e <xQueueSemaphoreTake+0x152>
		pxQueue->cTxLock = queueUNLOCKED;
    e59a:	23ff      	movs	r3, #255	@ 0xff
    e59c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e5a0:	f7fe fdbc 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e5a4:	f7fe fd8e 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e5a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e5ac:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e5ae:	2d00      	cmp	r5, #0
    e5b0:	dd14      	ble.n	e5dc <xQueueSemaphoreTake+0x1b0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e5b2:	f104 0810 	add.w	r8, r4, #16
    e5b6:	e003      	b.n	e5c0 <xQueueSemaphoreTake+0x194>
				--cRxLock;
    e5b8:	1e6b      	subs	r3, r5, #1
    e5ba:	b2da      	uxtb	r2, r3
    e5bc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e5be:	b16a      	cbz	r2, e5dc <xQueueSemaphoreTake+0x1b0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e5c0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e5c2:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e5c4:	b153      	cbz	r3, e5dc <xQueueSemaphoreTake+0x1b0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e5c6:	f001 f93d 	bl	f844 <xTaskRemoveFromEventList>
    e5ca:	2800      	cmp	r0, #0
    e5cc:	d0f4      	beq.n	e5b8 <xQueueSemaphoreTake+0x18c>
					vTaskMissedYield();
    e5ce:	f001 fa59 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e5d2:	1e6b      	subs	r3, r5, #1
    e5d4:	b2da      	uxtb	r2, r3
    e5d6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e5d8:	2a00      	cmp	r2, #0
    e5da:	d1f1      	bne.n	e5c0 <xQueueSemaphoreTake+0x194>
		pxQueue->cRxLock = queueUNLOCKED;
    e5dc:	23ff      	movs	r3, #255	@ 0xff
    e5de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    e5e2:	f7fe fd9b 	bl	d11c <vPortExitCritical>
			( void ) xTaskResumeAll();
    e5e6:	f000 fe31 	bl	f24c <xTaskResumeAll>
	taskENTER_CRITICAL();
    e5ea:	f7fe fd6b 	bl	d0c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    e5ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    e5f0:	2b00      	cmp	r3, #0
    e5f2:	d167      	bne.n	e6c4 <xQueueSemaphoreTake+0x298>
	taskEXIT_CRITICAL();
    e5f4:	f7fe fd92 	bl	d11c <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
    e5f8:	2f00      	cmp	r7, #0
    e5fa:	d166      	bne.n	e6ca <xQueueSemaphoreTake+0x29e>
					return errQUEUE_EMPTY;
    e5fc:	2000      	movs	r0, #0
}
    e5fe:	b004      	add	sp, #16
    e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
    e604:	a802      	add	r0, sp, #8
    e606:	f001 f9d3 	bl	f9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    e60a:	e742      	b.n	e492 <xQueueSemaphoreTake+0x66>
	taskEXIT_CRITICAL();
    e60c:	f7fe fd86 	bl	d11c <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e610:	6823      	ldr	r3, [r4, #0]
    e612:	2b00      	cmp	r3, #0
    e614:	f000 808a 	beq.w	e72c <xQueueSemaphoreTake+0x300>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e618:	f104 0824 	add.w	r8, r4, #36	@ 0x24
    e61c:	9901      	ldr	r1, [sp, #4]
    e61e:	4640      	mov	r0, r8
    e620:	f000 fff6 	bl	f610 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
    e624:	f7fe fd4e 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e628:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
    e62c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e62e:	2d00      	cmp	r5, #0
    e630:	dc04      	bgt.n	e63c <xQueueSemaphoreTake+0x210>
    e632:	e011      	b.n	e658 <xQueueSemaphoreTake+0x22c>
			--cTxLock;
    e634:	1e6b      	subs	r3, r5, #1
    e636:	b2da      	uxtb	r2, r3
    e638:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e63a:	b16a      	cbz	r2, e658 <xQueueSemaphoreTake+0x22c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e63c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e63e:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e640:	b153      	cbz	r3, e658 <xQueueSemaphoreTake+0x22c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e642:	f001 f8ff 	bl	f844 <xTaskRemoveFromEventList>
    e646:	2800      	cmp	r0, #0
    e648:	d0f4      	beq.n	e634 <xQueueSemaphoreTake+0x208>
						vTaskMissedYield();
    e64a:	f001 fa1b 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e64e:	1e6b      	subs	r3, r5, #1
    e650:	b2da      	uxtb	r2, r3
    e652:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e654:	2a00      	cmp	r2, #0
    e656:	d1f1      	bne.n	e63c <xQueueSemaphoreTake+0x210>
		pxQueue->cTxLock = queueUNLOCKED;
    e658:	23ff      	movs	r3, #255	@ 0xff
    e65a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e65e:	f7fe fd5d 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e662:	f7fe fd2f 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e666:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
    e66a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e66c:	2d00      	cmp	r5, #0
    e66e:	dd14      	ble.n	e69a <xQueueSemaphoreTake+0x26e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e670:	f104 0810 	add.w	r8, r4, #16
    e674:	e003      	b.n	e67e <xQueueSemaphoreTake+0x252>
				--cRxLock;
    e676:	1e6b      	subs	r3, r5, #1
    e678:	b2da      	uxtb	r2, r3
    e67a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e67c:	b16a      	cbz	r2, e69a <xQueueSemaphoreTake+0x26e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e67e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e680:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e682:	b153      	cbz	r3, e69a <xQueueSemaphoreTake+0x26e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e684:	f001 f8de 	bl	f844 <xTaskRemoveFromEventList>
    e688:	2800      	cmp	r0, #0
    e68a:	d0f4      	beq.n	e676 <xQueueSemaphoreTake+0x24a>
					vTaskMissedYield();
    e68c:	f001 f9fa 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e690:	1e6b      	subs	r3, r5, #1
    e692:	b2da      	uxtb	r2, r3
    e694:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e696:	2a00      	cmp	r2, #0
    e698:	d1f1      	bne.n	e67e <xQueueSemaphoreTake+0x252>
		pxQueue->cRxLock = queueUNLOCKED;
    e69a:	23ff      	movs	r3, #255	@ 0xff
    e69c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
    e6a0:	f7fe fd3c 	bl	d11c <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
    e6a4:	f000 fdd2 	bl	f24c <xTaskResumeAll>
    e6a8:	2800      	cmp	r0, #0
    e6aa:	f47f af5a 	bne.w	e562 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
    e6ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    e6b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    e6b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    e6ba:	f3bf 8f4f 	dsb	sy
    e6be:	f3bf 8f6f 	isb	sy
    e6c2:	e74e      	b.n	e562 <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
    e6c4:	f7fe fd2a 	bl	d11c <vPortExitCritical>
	return xReturn;
    e6c8:	e74b      	b.n	e562 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
    e6ca:	f7fe fcfb 	bl	d0c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
    e6ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    e6d0:	bb39      	cbnz	r1, e722 <xQueueSemaphoreTake+0x2f6>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    e6d2:	68a0      	ldr	r0, [r4, #8]
    e6d4:	f001 fb06 	bl	fce4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
    e6d8:	f7fe fd20 	bl	d11c <vPortExitCritical>
    e6dc:	e78e      	b.n	e5fc <xQueueSemaphoreTake+0x1d0>
    e6de:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e6e2:	f383 8811 	msr	BASEPRI, r3
    e6e6:	f3bf 8f6f 	isb	sy
    e6ea:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e6ee:	4903      	ldr	r1, [pc, #12]	@ (e6fc <xQueueSemaphoreTake+0x2d0>)
    e6f0:	4803      	ldr	r0, [pc, #12]	@ (e700 <xQueueSemaphoreTake+0x2d4>)
    e6f2:	f240 529a 	movw	r2, #1434	@ 0x59a
    e6f6:	f002 fcb7 	bl	11068 <am_util_stdio_printf>
    e6fa:	e7fe      	b.n	e6fa <xQueueSemaphoreTake+0x2ce>
    e6fc:	0002a460 	.word	0x0002a460
    e700:	0002a268 	.word	0x0002a268
    e704:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e708:	f383 8811 	msr	BASEPRI, r3
    e70c:	f3bf 8f6f 	isb	sy
    e710:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
    e714:	4922      	ldr	r1, [pc, #136]	@ (e7a0 <xQueueSemaphoreTake+0x374>)
    e716:	4823      	ldr	r0, [pc, #140]	@ (e7a4 <xQueueSemaphoreTake+0x378>)
    e718:	f240 5291 	movw	r2, #1425	@ 0x591
    e71c:	f002 fca4 	bl	11068 <am_util_stdio_printf>
    e720:	e7fe      	b.n	e720 <xQueueSemaphoreTake+0x2f4>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    e722:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    e724:	6819      	ldr	r1, [r3, #0]
    e726:	f1c1 0108 	rsb	r1, r1, #8
    e72a:	e7d2      	b.n	e6d2 <xQueueSemaphoreTake+0x2a6>
						taskENTER_CRITICAL();
    e72c:	f7fe fcca 	bl	d0c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    e730:	68a0      	ldr	r0, [r4, #8]
    e732:	f001 fa43 	bl	fbbc <xTaskPriorityInherit>
    e736:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
    e738:	f7fe fcf0 	bl	d11c <vPortExitCritical>
    e73c:	e76c      	b.n	e618 <xQueueSemaphoreTake+0x1ec>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e73e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    e740:	3b01      	subs	r3, #1
    e742:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e744:	b33a      	cbz	r2, e796 <xQueueSemaphoreTake+0x36a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e746:	6923      	ldr	r3, [r4, #16]
    e748:	b9a3      	cbnz	r3, e774 <xQueueSemaphoreTake+0x348>
				taskEXIT_CRITICAL();
    e74a:	f7fe fce7 	bl	d11c <vPortExitCritical>
				return pdPASS;
    e74e:	2001      	movs	r0, #1
    e750:	e755      	b.n	e5fe <xQueueSemaphoreTake+0x1d2>
						configASSERT( xInheritanceOccurred == pdFALSE );
    e752:	2f00      	cmp	r7, #0
    e754:	d0c0      	beq.n	e6d8 <xQueueSemaphoreTake+0x2ac>
    e756:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e75a:	f383 8811 	msr	BASEPRI, r3
    e75e:	f3bf 8f6f 	isb	sy
    e762:	f3bf 8f4f 	dsb	sy
    e766:	490e      	ldr	r1, [pc, #56]	@ (e7a0 <xQueueSemaphoreTake+0x374>)
    e768:	480e      	ldr	r0, [pc, #56]	@ (e7a4 <xQueueSemaphoreTake+0x378>)
    e76a:	f240 52e1 	movw	r2, #1505	@ 0x5e1
    e76e:	f002 fc7b 	bl	11068 <am_util_stdio_printf>
    e772:	e7fe      	b.n	e772 <xQueueSemaphoreTake+0x346>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e774:	f104 0010 	add.w	r0, r4, #16
    e778:	f001 f864 	bl	f844 <xTaskRemoveFromEventList>
    e77c:	2800      	cmp	r0, #0
    e77e:	d0e4      	beq.n	e74a <xQueueSemaphoreTake+0x31e>
						queueYIELD_IF_USING_PREEMPTION();
    e780:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    e784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    e788:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    e78c:	f3bf 8f4f 	dsb	sy
    e790:	f3bf 8f6f 	isb	sy
    e794:	e7d9      	b.n	e74a <xQueueSemaphoreTake+0x31e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    e796:	f001 fb11 	bl	fdbc <pvTaskIncrementMutexHeldCount>
    e79a:	60a0      	str	r0, [r4, #8]
    e79c:	e7d3      	b.n	e746 <xQueueSemaphoreTake+0x31a>
    e79e:	bf00      	nop
    e7a0:	0002a460 	.word	0x0002a460
    e7a4:	0002a268 	.word	0x0002a268

0000e7a8 <vQueueDelete>:
	configASSERT( pxQueue );
    e7a8:	b108      	cbz	r0, e7ae <vQueueDelete+0x6>
		vPortFree( pxQueue );
    e7aa:	f7fe bfe7 	b.w	d77c <vPortFree>
{
    e7ae:	b508      	push	{r3, lr}
    e7b0:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e7b4:	f383 8811 	msr	BASEPRI, r3
    e7b8:	f3bf 8f6f 	isb	sy
    e7bc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
    e7c0:	4903      	ldr	r1, [pc, #12]	@ (e7d0 <vQueueDelete+0x28>)
    e7c2:	4804      	ldr	r0, [pc, #16]	@ (e7d4 <vQueueDelete+0x2c>)
    e7c4:	f240 72b7 	movw	r2, #1975	@ 0x7b7
    e7c8:	f002 fc4e 	bl	11068 <am_util_stdio_printf>
    e7cc:	e7fe      	b.n	e7cc <vQueueDelete+0x24>
    e7ce:	bf00      	nop
    e7d0:	0002a460 	.word	0x0002a460
    e7d4:	0002a268 	.word	0x0002a268

0000e7d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    e7d8:	b570      	push	{r4, r5, r6, lr}
    e7da:	4605      	mov	r5, r0
    e7dc:	460e      	mov	r6, r1
    e7de:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    e7e0:	f7fe fc70 	bl	d0c4 <vPortEnterCritical>
    e7e4:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
    e7e8:	2bff      	cmp	r3, #255	@ 0xff
    e7ea:	bf04      	itt	eq
    e7ec:	2300      	moveq	r3, #0
    e7ee:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
    e7f2:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
    e7f6:	2bff      	cmp	r3, #255	@ 0xff
    e7f8:	bf04      	itt	eq
    e7fa:	2300      	moveq	r3, #0
    e7fc:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
    e800:	f7fe fc8c 	bl	d11c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    e804:	6bab      	ldr	r3, [r5, #56]	@ 0x38
    e806:	2b00      	cmp	r3, #0
    e808:	d043      	beq.n	e892 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
    e80a:	f7fe fc5b 	bl	d0c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
    e80e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
    e812:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e814:	2c00      	cmp	r4, #0
    e816:	dd14      	ble.n	e842 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e818:	f105 0624 	add.w	r6, r5, #36	@ 0x24
    e81c:	e003      	b.n	e826 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
    e81e:	1e63      	subs	r3, r4, #1
    e820:	b2da      	uxtb	r2, r3
    e822:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e824:	b16a      	cbz	r2, e842 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e826:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e828:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e82a:	b153      	cbz	r3, e842 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e82c:	f001 f80a 	bl	f844 <xTaskRemoveFromEventList>
    e830:	2800      	cmp	r0, #0
    e832:	d0f4      	beq.n	e81e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
    e834:	f001 f926 	bl	fa84 <vTaskMissedYield>
			--cTxLock;
    e838:	1e63      	subs	r3, r4, #1
    e83a:	b2da      	uxtb	r2, r3
    e83c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e83e:	2a00      	cmp	r2, #0
    e840:	d1f1      	bne.n	e826 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
    e842:	23ff      	movs	r3, #255	@ 0xff
    e844:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
    e848:	f7fe fc68 	bl	d11c <vPortExitCritical>
	taskENTER_CRITICAL();
    e84c:	f7fe fc3a 	bl	d0c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
    e850:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
    e854:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e856:	2c00      	cmp	r4, #0
    e858:	dd14      	ble.n	e884 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e85a:	f105 0610 	add.w	r6, r5, #16
    e85e:	e003      	b.n	e868 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
    e860:	1e63      	subs	r3, r4, #1
    e862:	b2da      	uxtb	r2, r3
    e864:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e866:	b16a      	cbz	r2, e884 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e868:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e86a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e86c:	b153      	cbz	r3, e884 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e86e:	f000 ffe9 	bl	f844 <xTaskRemoveFromEventList>
    e872:	2800      	cmp	r0, #0
    e874:	d0f4      	beq.n	e860 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
    e876:	f001 f905 	bl	fa84 <vTaskMissedYield>
				--cRxLock;
    e87a:	1e63      	subs	r3, r4, #1
    e87c:	b2da      	uxtb	r2, r3
    e87e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e880:	2a00      	cmp	r2, #0
    e882:	d1f1      	bne.n	e868 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
    e884:	23ff      	movs	r3, #255	@ 0xff
    e886:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
    e88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
    e88e:	f7fe bc45 	b.w	d11c <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    e892:	4622      	mov	r2, r4
    e894:	4631      	mov	r1, r6
    e896:	f105 0024 	add.w	r0, r5, #36	@ 0x24
    e89a:	f000 ff77 	bl	f78c <vTaskPlaceOnEventListRestricted>
    e89e:	e7b4      	b.n	e80a <vQueueWaitForMessageRestricted+0x32>

0000e8a0 <vTaskSwitchContext.part.0>:
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    e8a0:	4b45      	ldr	r3, [pc, #276]	@ (e9b8 <vTaskSwitchContext.part.0+0x118>)
void vTaskSwitchContext( void )
    e8a2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
    e8a4:	2200      	movs	r2, #0
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    e8a6:	4c45      	ldr	r4, [pc, #276]	@ (e9bc <vTaskSwitchContext.part.0+0x11c>)
		xYieldPending = pdFALSE;
    e8a8:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    e8aa:	6823      	ldr	r3, [r4, #0]
    e8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    e8ae:	681a      	ldr	r2, [r3, #0]
    e8b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
    e8b4:	d103      	bne.n	e8be <vTaskSwitchContext.part.0+0x1e>
    e8b6:	685a      	ldr	r2, [r3, #4]
    e8b8:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
    e8bc:	d072      	beq.n	e9a4 <vTaskSwitchContext.part.0+0x104>
    e8be:	6820      	ldr	r0, [r4, #0]
    e8c0:	6821      	ldr	r1, [r4, #0]
    e8c2:	3134      	adds	r1, #52	@ 0x34
    e8c4:	f00d fd2c 	bl	1c320 <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    e8c8:	483d      	ldr	r0, [pc, #244]	@ (e9c0 <vTaskSwitchContext.part.0+0x120>)
    e8ca:	4a3e      	ldr	r2, [pc, #248]	@ (e9c4 <vTaskSwitchContext.part.0+0x124>)
    e8cc:	6803      	ldr	r3, [r0, #0]
    e8ce:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    e8d2:	00ad      	lsls	r5, r5, #2
    e8d4:	0099      	lsls	r1, r3, #2
    e8d6:	5955      	ldr	r5, [r2, r5]
    e8d8:	2d00      	cmp	r5, #0
    e8da:	d153      	bne.n	e984 <vTaskSwitchContext.part.0+0xe4>
    e8dc:	2b00      	cmp	r3, #0
    e8de:	d041      	beq.n	e964 <vTaskSwitchContext.part.0+0xc4>
    e8e0:	1e5d      	subs	r5, r3, #1
    e8e2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e8e6:	0089      	lsls	r1, r1, #2
    e8e8:	5856      	ldr	r6, [r2, r1]
    e8ea:	00a9      	lsls	r1, r5, #2
    e8ec:	2e00      	cmp	r6, #0
    e8ee:	d148      	bne.n	e982 <vTaskSwitchContext.part.0+0xe2>
    e8f0:	2d00      	cmp	r5, #0
    e8f2:	d037      	beq.n	e964 <vTaskSwitchContext.part.0+0xc4>
    e8f4:	1e9d      	subs	r5, r3, #2
    e8f6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e8fa:	0089      	lsls	r1, r1, #2
    e8fc:	5856      	ldr	r6, [r2, r1]
    e8fe:	00a9      	lsls	r1, r5, #2
    e900:	2e00      	cmp	r6, #0
    e902:	d13e      	bne.n	e982 <vTaskSwitchContext.part.0+0xe2>
    e904:	b375      	cbz	r5, e964 <vTaskSwitchContext.part.0+0xc4>
    e906:	1edd      	subs	r5, r3, #3
    e908:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e90c:	0089      	lsls	r1, r1, #2
    e90e:	5856      	ldr	r6, [r2, r1]
    e910:	00a9      	lsls	r1, r5, #2
    e912:	bbb6      	cbnz	r6, e982 <vTaskSwitchContext.part.0+0xe2>
    e914:	b335      	cbz	r5, e964 <vTaskSwitchContext.part.0+0xc4>
    e916:	1f1d      	subs	r5, r3, #4
    e918:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e91c:	0089      	lsls	r1, r1, #2
    e91e:	5856      	ldr	r6, [r2, r1]
    e920:	00a9      	lsls	r1, r5, #2
    e922:	bb76      	cbnz	r6, e982 <vTaskSwitchContext.part.0+0xe2>
    e924:	b1f5      	cbz	r5, e964 <vTaskSwitchContext.part.0+0xc4>
    e926:	1f5d      	subs	r5, r3, #5
    e928:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e92c:	0089      	lsls	r1, r1, #2
    e92e:	5856      	ldr	r6, [r2, r1]
    e930:	00a9      	lsls	r1, r5, #2
    e932:	bb36      	cbnz	r6, e982 <vTaskSwitchContext.part.0+0xe2>
    e934:	b1b5      	cbz	r5, e964 <vTaskSwitchContext.part.0+0xc4>
    e936:	1f9d      	subs	r5, r3, #6
    e938:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e93c:	0089      	lsls	r1, r1, #2
    e93e:	5856      	ldr	r6, [r2, r1]
    e940:	00a9      	lsls	r1, r5, #2
    e942:	b9f6      	cbnz	r6, e982 <vTaskSwitchContext.part.0+0xe2>
    e944:	b175      	cbz	r5, e964 <vTaskSwitchContext.part.0+0xc4>
    e946:	1fdd      	subs	r5, r3, #7
    e948:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    e94c:	0089      	lsls	r1, r1, #2
    e94e:	5856      	ldr	r6, [r2, r1]
    e950:	00a9      	lsls	r1, r5, #2
    e952:	b9b6      	cbnz	r6, e982 <vTaskSwitchContext.part.0+0xe2>
    e954:	b135      	cbz	r5, e964 <vTaskSwitchContext.part.0+0xc4>
    e956:	3b08      	subs	r3, #8
    e958:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    e95c:	00ad      	lsls	r5, r5, #2
    e95e:	0099      	lsls	r1, r3, #2
    e960:	5955      	ldr	r5, [r2, r5]
    e962:	b97d      	cbnz	r5, e984 <vTaskSwitchContext.part.0+0xe4>
    e964:	f04f 0380 	mov.w	r3, #128	@ 0x80
    e968:	f383 8811 	msr	BASEPRI, r3
    e96c:	f3bf 8f6f 	isb	sy
    e970:	f3bf 8f4f 	dsb	sy
    e974:	4914      	ldr	r1, [pc, #80]	@ (e9c8 <vTaskSwitchContext.part.0+0x128>)
    e976:	4815      	ldr	r0, [pc, #84]	@ (e9cc <vTaskSwitchContext.part.0+0x12c>)
    e978:	f640 3288 	movw	r2, #2952	@ 0xb88
    e97c:	f002 fb74 	bl	11068 <am_util_stdio_printf>
    e980:	e7fe      	b.n	e980 <vTaskSwitchContext.part.0+0xe0>
    e982:	462b      	mov	r3, r5
    e984:	4419      	add	r1, r3
    e986:	eb02 0581 	add.w	r5, r2, r1, lsl #2
    e98a:	462a      	mov	r2, r5
    e98c:	6869      	ldr	r1, [r5, #4]
    e98e:	6849      	ldr	r1, [r1, #4]
    e990:	6069      	str	r1, [r5, #4]
    e992:	3208      	adds	r2, #8
    e994:	4291      	cmp	r1, r2
    e996:	bf04      	itt	eq
    e998:	6849      	ldreq	r1, [r1, #4]
    e99a:	6069      	streq	r1, [r5, #4]
    e99c:	68ca      	ldr	r2, [r1, #12]
    e99e:	6022      	str	r2, [r4, #0]
    e9a0:	6003      	str	r3, [r0, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    e9a2:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
    e9a4:	689a      	ldr	r2, [r3, #8]
    e9a6:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
    e9aa:	d188      	bne.n	e8be <vTaskSwitchContext.part.0+0x1e>
    e9ac:	68db      	ldr	r3, [r3, #12]
    e9ae:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
    e9b2:	d184      	bne.n	e8be <vTaskSwitchContext.part.0+0x1e>
    e9b4:	e788      	b.n	e8c8 <vTaskSwitchContext.part.0+0x28>
    e9b6:	bf00      	nop
    e9b8:	1000ab4c 	.word	0x1000ab4c
    e9bc:	1000ac74 	.word	0x1000ac74
    e9c0:	1000ab58 	.word	0x1000ab58
    e9c4:	1000abd4 	.word	0x1000abd4
    e9c8:	0002a4bc 	.word	0x0002a4bc
    e9cc:	0002a268 	.word	0x0002a268

0000e9d0 <xTaskCreate>:
	{
    e9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    e9d4:	0095      	lsls	r5, r2, #2
	{
    e9d6:	4606      	mov	r6, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    e9d8:	4628      	mov	r0, r5
	{
    e9da:	4688      	mov	r8, r1
    e9dc:	461f      	mov	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    e9de:	f7fe fe05 	bl	d5ec <pvPortMalloc>
			if( pxStack != NULL )
    e9e2:	2800      	cmp	r0, #0
    e9e4:	d07c      	beq.n	eae0 <xTaskCreate+0x110>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    e9e6:	4681      	mov	r9, r0
    e9e8:	206c      	movs	r0, #108	@ 0x6c
    e9ea:	f7fe fdff 	bl	d5ec <pvPortMalloc>
				if( pxNewTCB != NULL )
    e9ee:	4604      	mov	r4, r0
    e9f0:	2800      	cmp	r0, #0
    e9f2:	d072      	beq.n	eada <xTaskCreate+0x10a>
					pxNewTCB->pxStack = pxStack;
    e9f4:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
	configASSERT( pcName );
    e9f8:	f1b8 0f00 	cmp.w	r8, #0
    e9fc:	f000 808c 	beq.w	eb18 <xTaskCreate+0x148>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    ea00:	462a      	mov	r2, r5
    ea02:	21a5      	movs	r1, #165	@ 0xa5
    ea04:	4648      	mov	r0, r9
    ea06:	f015 fcc3 	bl	24390 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    ea0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    ea0c:	3d04      	subs	r5, #4
    ea0e:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    ea10:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    ea14:	f108 3cff 	add.w	ip, r8, #4294967295
    ea18:	f108 011f 	add.w	r1, r8, #31
    ea1c:	f104 0e33 	add.w	lr, r4, #51	@ 0x33
    ea20:	e001      	b.n	ea26 <xTaskCreate+0x56>
    ea22:	458c      	cmp	ip, r1
    ea24:	d005      	beq.n	ea32 <xTaskCreate+0x62>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    ea26:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    ea2a:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == ( char ) 0x00 )
    ea2e:	2a00      	cmp	r2, #0
    ea30:	d1f7      	bne.n	ea22 <xTaskCreate+0x52>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    ea32:	9b08      	ldr	r3, [sp, #32]
    ea34:	2b07      	cmp	r3, #7
    ea36:	bf28      	it	cs
    ea38:	2307      	movcs	r3, #7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ea3a:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ea3e:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
    ea42:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    ea44:	65e3      	str	r3, [r4, #92]	@ 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ea46:	4648      	mov	r0, r9
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ea48:	f884 a053 	strb.w	sl, [r4, #83]	@ 0x53
		pxNewTCB->uxMutexesHeld = 0;
    ea4c:	f8c4 a060 	str.w	sl, [r4, #96]	@ 0x60
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    ea50:	4698      	mov	r8, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ea52:	f7ff f843 	bl	dadc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    ea56:	f104 0018 	add.w	r0, r4, #24
    ea5a:	f7ff f83f 	bl	dadc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ea5e:	f1c8 0308 	rsb	r3, r8, #8
    ea62:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
    ea64:	f8c4 a064 	str.w	sl, [r4, #100]	@ 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    ea68:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    ea6a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    ea6c:	f884 a068 	strb.w	sl, [r4, #104]	@ 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
    ea70:	f884 a069 	strb.w	sl, [r4, #105]	@ 0x69
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    ea74:	463a      	mov	r2, r7
    ea76:	4631      	mov	r1, r6
    ea78:	4628      	mov	r0, r5
    ea7a:	f7fe faf9 	bl	d070 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
    ea7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    ea80:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
    ea82:	b103      	cbz	r3, ea86 <xTaskCreate+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    ea84:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    ea86:	f7fe fb1d 	bl	d0c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
    ea8a:	4a3d      	ldr	r2, [pc, #244]	@ (eb80 <xTaskCreate+0x1b0>)
		if( pxCurrentTCB == NULL )
    ea8c:	4d3d      	ldr	r5, [pc, #244]	@ (eb84 <xTaskCreate+0x1b4>)
		uxCurrentNumberOfTasks++;
    ea8e:	6813      	ldr	r3, [r2, #0]
    ea90:	3301      	adds	r3, #1
    ea92:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    ea94:	682b      	ldr	r3, [r5, #0]
    ea96:	b33b      	cbz	r3, eae8 <xTaskCreate+0x118>
			if( xSchedulerRunning == pdFALSE )
    ea98:	4e3b      	ldr	r6, [pc, #236]	@ (eb88 <xTaskCreate+0x1b8>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    ea9a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
    ea9c:	6833      	ldr	r3, [r6, #0]
    ea9e:	b923      	cbnz	r3, eaaa <xTaskCreate+0xda>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    eaa0:	682b      	ldr	r3, [r5, #0]
    eaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    eaa4:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
    eaa6:	bf98      	it	ls
    eaa8:	602c      	strls	r4, [r5, #0]
    eaaa:	4f38      	ldr	r7, [pc, #224]	@ (eb8c <xTaskCreate+0x1bc>)
		uxTaskNumber++;
    eaac:	4a38      	ldr	r2, [pc, #224]	@ (eb90 <xTaskCreate+0x1c0>)
		prvAddTaskToReadyList( pxNewTCB );
    eaae:	4939      	ldr	r1, [pc, #228]	@ (eb94 <xTaskCreate+0x1c4>)
		uxTaskNumber++;
    eab0:	6813      	ldr	r3, [r2, #0]
    eab2:	3301      	adds	r3, #1
    eab4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    eab6:	6563      	str	r3, [r4, #84]	@ 0x54
		prvAddTaskToReadyList( pxNewTCB );
    eab8:	680b      	ldr	r3, [r1, #0]
    eaba:	4283      	cmp	r3, r0
    eabc:	bf38      	it	cc
    eabe:	6008      	strcc	r0, [r1, #0]
    eac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    eac4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    eac8:	4649      	mov	r1, r9
    eaca:	f7ff f80b 	bl	dae4 <vListInsertEnd>
	taskEXIT_CRITICAL();
    eace:	f7fe fb25 	bl	d11c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
    ead2:	6833      	ldr	r3, [r6, #0]
    ead4:	b983      	cbnz	r3, eaf8 <xTaskCreate+0x128>
			xReturn = pdPASS;
    ead6:	2001      	movs	r0, #1
		return xReturn;
    ead8:	e004      	b.n	eae4 <xTaskCreate+0x114>
					vPortFree( pxStack );
    eada:	4648      	mov	r0, r9
    eadc:	f7fe fe4e 	bl	d77c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    eae0:	f04f 30ff 	mov.w	r0, #4294967295
	}
    eae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxCurrentTCB = pxNewTCB;
    eae8:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    eaea:	6813      	ldr	r3, [r2, #0]
    eaec:	2b01      	cmp	r3, #1
    eaee:	d022      	beq.n	eb36 <xTaskCreate+0x166>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    eaf0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    eaf2:	4f26      	ldr	r7, [pc, #152]	@ (eb8c <xTaskCreate+0x1bc>)
    eaf4:	4e24      	ldr	r6, [pc, #144]	@ (eb88 <xTaskCreate+0x1b8>)
    eaf6:	e7d9      	b.n	eaac <xTaskCreate+0xdc>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    eaf8:	682a      	ldr	r2, [r5, #0]
    eafa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    eafc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    eafe:	429a      	cmp	r2, r3
    eb00:	d2e9      	bcs.n	ead6 <xTaskCreate+0x106>
			taskYIELD_IF_USING_PREEMPTION();
    eb02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    eb06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    eb0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    eb0e:	f3bf 8f4f 	dsb	sy
    eb12:	f3bf 8f6f 	isb	sy
    eb16:	e7de      	b.n	ead6 <xTaskCreate+0x106>
    eb18:	f04f 0380 	mov.w	r3, #128	@ 0x80
    eb1c:	f383 8811 	msr	BASEPRI, r3
    eb20:	f3bf 8f6f 	isb	sy
    eb24:	f3bf 8f4f 	dsb	sy
	configASSERT( pcName );
    eb28:	491b      	ldr	r1, [pc, #108]	@ (eb98 <xTaskCreate+0x1c8>)
    eb2a:	481c      	ldr	r0, [pc, #112]	@ (eb9c <xTaskCreate+0x1cc>)
    eb2c:	f44f 7258 	mov.w	r2, #864	@ 0x360
    eb30:	f002 fa9a 	bl	11068 <am_util_stdio_printf>
    eb34:	e7fe      	b.n	eb34 <xTaskCreate+0x164>
    eb36:	4f15      	ldr	r7, [pc, #84]	@ (eb8c <xTaskCreate+0x1bc>)
    eb38:	463e      	mov	r6, r7
    eb3a:	f107 08a0 	add.w	r8, r7, #160	@ 0xa0
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    eb3e:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    eb40:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    eb42:	f7fe ffbf 	bl	dac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    eb46:	45b0      	cmp	r8, r6
    eb48:	d1f9      	bne.n	eb3e <xTaskCreate+0x16e>
	}

	vListInitialise( &xDelayedTaskList1 );
    eb4a:	f8df 806c 	ldr.w	r8, [pc, #108]	@ ebb8 <xTaskCreate+0x1e8>
	vListInitialise( &xDelayedTaskList2 );
    eb4e:	4e14      	ldr	r6, [pc, #80]	@ (eba0 <xTaskCreate+0x1d0>)
	vListInitialise( &xDelayedTaskList1 );
    eb50:	4640      	mov	r0, r8
    eb52:	f7fe ffb7 	bl	dac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    eb56:	4630      	mov	r0, r6
    eb58:	f7fe ffb4 	bl	dac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    eb5c:	4811      	ldr	r0, [pc, #68]	@ (eba4 <xTaskCreate+0x1d4>)
    eb5e:	f7fe ffb1 	bl	dac4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    eb62:	4811      	ldr	r0, [pc, #68]	@ (eba8 <xTaskCreate+0x1d8>)
    eb64:	f7fe ffae 	bl	dac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    eb68:	4810      	ldr	r0, [pc, #64]	@ (ebac <xTaskCreate+0x1dc>)
    eb6a:	f7fe ffab 	bl	dac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    eb6e:	4b10      	ldr	r3, [pc, #64]	@ (ebb0 <xTaskCreate+0x1e0>)
		prvAddTaskToReadyList( pxNewTCB );
    eb70:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
    eb72:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    eb76:	4b0f      	ldr	r3, [pc, #60]	@ (ebb4 <xTaskCreate+0x1e4>)
    eb78:	601e      	str	r6, [r3, #0]
    eb7a:	4e03      	ldr	r6, [pc, #12]	@ (eb88 <xTaskCreate+0x1b8>)
}
    eb7c:	e796      	b.n	eaac <xTaskCreate+0xdc>
    eb7e:	bf00      	nop
    eb80:	1000ab60 	.word	0x1000ab60
    eb84:	1000ac74 	.word	0x1000ac74
    eb88:	1000ab54 	.word	0x1000ab54
    eb8c:	1000abd4 	.word	0x1000abd4
    eb90:	1000ab44 	.word	0x1000ab44
    eb94:	1000ab58 	.word	0x1000ab58
    eb98:	0002a4bc 	.word	0x0002a4bc
    eb9c:	0002a268 	.word	0x0002a268
    eba0:	1000abac 	.word	0x1000abac
    eba4:	1000ab90 	.word	0x1000ab90
    eba8:	1000ab7c 	.word	0x1000ab7c
    ebac:	1000ab64 	.word	0x1000ab64
    ebb0:	1000aba8 	.word	0x1000aba8
    ebb4:	1000aba4 	.word	0x1000aba4
    ebb8:	1000abc0 	.word	0x1000abc0

0000ebbc <vTaskDelete>:
	{
    ebbc:	b570      	push	{r4, r5, r6, lr}
    ebbe:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    ebc0:	4d2f      	ldr	r5, [pc, #188]	@ (ec80 <vTaskDelete+0xc4>)
		taskENTER_CRITICAL();
    ebc2:	f7fe fa7f 	bl	d0c4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    ebc6:	2c00      	cmp	r4, #0
    ebc8:	d03b      	beq.n	ec42 <vTaskDelete+0x86>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ebca:	1d26      	adds	r6, r4, #4
    ebcc:	4630      	mov	r0, r6
    ebce:	f7fe ffaf 	bl	db30 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    ebd2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    ebd4:	b11b      	cbz	r3, ebde <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    ebd6:	f104 0018 	add.w	r0, r4, #24
    ebda:	f7fe ffa9 	bl	db30 <uxListRemove>
			uxTaskNumber++;
    ebde:	4a29      	ldr	r2, [pc, #164]	@ (ec84 <vTaskDelete+0xc8>)
    ebe0:	6813      	ldr	r3, [r2, #0]
    ebe2:	3301      	adds	r3, #1
    ebe4:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
    ebe6:	682b      	ldr	r3, [r5, #0]
    ebe8:	42a3      	cmp	r3, r4
    ebea:	d021      	beq.n	ec30 <vTaskDelete+0x74>
				--uxCurrentNumberOfTasks;
    ebec:	4a26      	ldr	r2, [pc, #152]	@ (ec88 <vTaskDelete+0xcc>)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    ebee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
				--uxCurrentNumberOfTasks;
    ebf0:	6813      	ldr	r3, [r2, #0]
    ebf2:	3b01      	subs	r3, #1
    ebf4:	6013      	str	r3, [r2, #0]
			vPortFree( pxTCB->pxStack );
    ebf6:	f7fe fdc1 	bl	d77c <vPortFree>
			vPortFree( pxTCB );
    ebfa:	4620      	mov	r0, r4
    ebfc:	f7fe fdbe 	bl	d77c <vPortFree>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ec00:	4b22      	ldr	r3, [pc, #136]	@ (ec8c <vTaskDelete+0xd0>)
    ec02:	681a      	ldr	r2, [r3, #0]
    ec04:	6812      	ldr	r2, [r2, #0]
    ec06:	b172      	cbz	r2, ec26 <vTaskDelete+0x6a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    ec08:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    ec0a:	4b21      	ldr	r3, [pc, #132]	@ (ec90 <vTaskDelete+0xd4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    ec0c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    ec0e:	68d2      	ldr	r2, [r2, #12]
    ec10:	6852      	ldr	r2, [r2, #4]
    ec12:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
    ec14:	f7fe fa82 	bl	d11c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
    ec18:	4b1e      	ldr	r3, [pc, #120]	@ (ec94 <vTaskDelete+0xd8>)
    ec1a:	681b      	ldr	r3, [r3, #0]
    ec1c:	b113      	cbz	r3, ec24 <vTaskDelete+0x68>
			if( pxTCB == pxCurrentTCB )
    ec1e:	682b      	ldr	r3, [r5, #0]
    ec20:	42a3      	cmp	r3, r4
    ec22:	d010      	beq.n	ec46 <vTaskDelete+0x8a>
	}
    ec24:	bd70      	pop	{r4, r5, r6, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
    ec26:	4b1a      	ldr	r3, [pc, #104]	@ (ec90 <vTaskDelete+0xd4>)
    ec28:	f04f 32ff 	mov.w	r2, #4294967295
    ec2c:	601a      	str	r2, [r3, #0]
    ec2e:	e7f1      	b.n	ec14 <vTaskDelete+0x58>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    ec30:	4819      	ldr	r0, [pc, #100]	@ (ec98 <vTaskDelete+0xdc>)
    ec32:	4631      	mov	r1, r6
    ec34:	f7fe ff56 	bl	dae4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
    ec38:	4a18      	ldr	r2, [pc, #96]	@ (ec9c <vTaskDelete+0xe0>)
    ec3a:	6813      	ldr	r3, [r2, #0]
    ec3c:	3301      	adds	r3, #1
    ec3e:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
    ec40:	e7e8      	b.n	ec14 <vTaskDelete+0x58>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    ec42:	682c      	ldr	r4, [r5, #0]
    ec44:	e7c1      	b.n	ebca <vTaskDelete+0xe>
				configASSERT( uxSchedulerSuspended == 0 );
    ec46:	4b16      	ldr	r3, [pc, #88]	@ (eca0 <vTaskDelete+0xe4>)
    ec48:	681b      	ldr	r3, [r3, #0]
    ec4a:	b953      	cbnz	r3, ec62 <vTaskDelete+0xa6>
				portYIELD_WITHIN_API();
    ec4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    ec50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    ec54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    ec58:	f3bf 8f4f 	dsb	sy
    ec5c:	f3bf 8f6f 	isb	sy
	}
    ec60:	bd70      	pop	{r4, r5, r6, pc}
    ec62:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ec66:	f383 8811 	msr	BASEPRI, r3
    ec6a:	f3bf 8f6f 	isb	sy
    ec6e:	f3bf 8f4f 	dsb	sy
				configASSERT( uxSchedulerSuspended == 0 );
    ec72:	490c      	ldr	r1, [pc, #48]	@ (eca4 <vTaskDelete+0xe8>)
    ec74:	480c      	ldr	r0, [pc, #48]	@ (eca8 <vTaskDelete+0xec>)
    ec76:	f240 42b6 	movw	r2, #1206	@ 0x4b6
    ec7a:	f002 f9f5 	bl	11068 <am_util_stdio_printf>
    ec7e:	e7fe      	b.n	ec7e <vTaskDelete+0xc2>
    ec80:	1000ac74 	.word	0x1000ac74
    ec84:	1000ab44 	.word	0x1000ab44
    ec88:	1000ab60 	.word	0x1000ab60
    ec8c:	1000aba8 	.word	0x1000aba8
    ec90:	1000ab40 	.word	0x1000ab40
    ec94:	1000ab54 	.word	0x1000ab54
    ec98:	1000ab7c 	.word	0x1000ab7c
    ec9c:	1000ab78 	.word	0x1000ab78
    eca0:	1000ab38 	.word	0x1000ab38
    eca4:	0002a4bc 	.word	0x0002a4bc
    eca8:	0002a268 	.word	0x0002a268

0000ecac <eTaskGetState>:
	{
    ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
    ecae:	b310      	cbz	r0, ecf6 <eTaskGetState+0x4a>
		if( pxTCB == pxCurrentTCB )
    ecb0:	4b1d      	ldr	r3, [pc, #116]	@ (ed28 <eTaskGetState+0x7c>)
    ecb2:	681b      	ldr	r3, [r3, #0]
    ecb4:	4283      	cmp	r3, r0
    ecb6:	4604      	mov	r4, r0
    ecb8:	d017      	beq.n	ecea <eTaskGetState+0x3e>
			taskENTER_CRITICAL();
    ecba:	f7fe fa03 	bl	d0c4 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
    ecbe:	4a1b      	ldr	r2, [pc, #108]	@ (ed2c <eTaskGetState+0x80>)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
    ecc0:	4b1b      	ldr	r3, [pc, #108]	@ (ed30 <eTaskGetState+0x84>)
				pxDelayedList = pxDelayedTaskList;
    ecc2:	6816      	ldr	r6, [r2, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
    ecc4:	6965      	ldr	r5, [r4, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
    ecc6:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
    ecc8:	f7fe fa28 	bl	d11c <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
    eccc:	42b5      	cmp	r5, r6
    ecce:	d010      	beq.n	ecf2 <eTaskGetState+0x46>
    ecd0:	42bd      	cmp	r5, r7
    ecd2:	d00e      	beq.n	ecf2 <eTaskGetState+0x46>
				else if( pxStateList == &xSuspendedTaskList )
    ecd4:	4b17      	ldr	r3, [pc, #92]	@ (ed34 <eTaskGetState+0x88>)
    ecd6:	429d      	cmp	r5, r3
    ecd8:	d009      	beq.n	ecee <eTaskGetState+0x42>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
    ecda:	4b17      	ldr	r3, [pc, #92]	@ (ed38 <eTaskGetState+0x8c>)
    ecdc:	429d      	cmp	r5, r3
    ecde:	d020      	beq.n	ed22 <eTaskGetState+0x76>
				eReturn = eReady;
    ece0:	2d00      	cmp	r5, #0
    ece2:	bf0c      	ite	eq
    ece4:	2004      	moveq	r0, #4
    ece6:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    ece8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
    ecea:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    ecec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
    ecee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    ecf0:	b183      	cbz	r3, ed14 <eTaskGetState+0x68>
				eReturn = eBlocked;
    ecf2:	2002      	movs	r0, #2
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    ecf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ecf6:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ecfa:	f383 8811 	msr	BASEPRI, r3
    ecfe:	f3bf 8f6f 	isb	sy
    ed02:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
    ed06:	490d      	ldr	r1, [pc, #52]	@ (ed3c <eTaskGetState+0x90>)
    ed08:	480d      	ldr	r0, [pc, #52]	@ (ed40 <eTaskGetState+0x94>)
    ed0a:	f240 524c 	movw	r2, #1356	@ 0x54c
    ed0e:	f002 f9ab 	bl	11068 <am_util_stdio_printf>
    ed12:	e7fe      	b.n	ed12 <eTaskGetState+0x66>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    ed14:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
								eReturn = eSuspended;
    ed18:	2b01      	cmp	r3, #1
    ed1a:	bf0c      	ite	eq
    ed1c:	2002      	moveq	r0, #2
    ed1e:	2003      	movne	r0, #3
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    ed20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					eReturn = eDeleted;
    ed22:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    ed24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed26:	bf00      	nop
    ed28:	1000ac74 	.word	0x1000ac74
    ed2c:	1000aba8 	.word	0x1000aba8
    ed30:	1000aba4 	.word	0x1000aba4
    ed34:	1000ab64 	.word	0x1000ab64
    ed38:	1000ab7c 	.word	0x1000ab7c
    ed3c:	0002a4bc 	.word	0x0002a4bc
    ed40:	0002a268 	.word	0x0002a268

0000ed44 <vTaskStartScheduler>:
{
    ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    ed48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    ed4c:	f7fe fc4e 	bl	d5ec <pvPortMalloc>
			if( pxStack != NULL )
    ed50:	2800      	cmp	r0, #0
    ed52:	d07f      	beq.n	ee54 <vTaskStartScheduler+0x110>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    ed54:	4605      	mov	r5, r0
    ed56:	206c      	movs	r0, #108	@ 0x6c
    ed58:	f7fe fc48 	bl	d5ec <pvPortMalloc>
				if( pxNewTCB != NULL )
    ed5c:	4604      	mov	r4, r0
    ed5e:	2800      	cmp	r0, #0
    ed60:	d075      	beq.n	ee4e <vTaskStartScheduler+0x10a>
					pxNewTCB->pxStack = pxStack;
    ed62:	6305      	str	r5, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    ed64:	21a5      	movs	r1, #165	@ 0xa5
    ed66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    ed6a:	4628      	mov	r0, r5
    ed6c:	f015 fb10 	bl	24390 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    ed70:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    ed72:	4964      	ldr	r1, [pc, #400]	@ (ef04 <vTaskStartScheduler+0x1c0>)
    ed74:	f506 767f 	add.w	r6, r6, #1020	@ 0x3fc
    ed78:	f104 0333 	add.w	r3, r4, #51	@ 0x33
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    ed7c:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    ed80:	f104 0053 	add.w	r0, r4, #83	@ 0x53
    ed84:	e001      	b.n	ed8a <vTaskStartScheduler+0x46>
    ed86:	4283      	cmp	r3, r0
    ed88:	d005      	beq.n	ed96 <vTaskStartScheduler+0x52>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    ed8a:	f811 2b01 	ldrb.w	r2, [r1], #1
    ed8e:	f803 2f01 	strb.w	r2, [r3, #1]!
		if( pcName[ x ] == ( char ) 0x00 )
    ed92:	2a00      	cmp	r2, #0
    ed94:	d1f7      	bne.n	ed86 <vTaskStartScheduler+0x42>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ed96:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ed98:	1d27      	adds	r7, r4, #4
		pxNewTCB->uxBasePriority = uxPriority;
    ed9a:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ed9e:	f884 5053 	strb.w	r5, [r4, #83]	@ 0x53
	pxNewTCB->uxPriority = uxPriority;
    eda2:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    eda4:	4638      	mov	r0, r7
    eda6:	f7fe fe99 	bl	dadc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    edaa:	f104 0018 	add.w	r0, r4, #24
    edae:	f7fe fe95 	bl	dadc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    edb2:	2308      	movs	r3, #8
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    edb4:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
    edb6:	6665      	str	r5, [r4, #100]	@ 0x64
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    edb8:	4953      	ldr	r1, [pc, #332]	@ (ef08 <vTaskStartScheduler+0x1c4>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    edba:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    edbc:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
    edc0:	f884 5069 	strb.w	r5, [r4, #105]	@ 0x69
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    edc4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    edc6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    edc8:	4630      	mov	r0, r6
    edca:	f7fe f951 	bl	d070 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    edce:	4b4f      	ldr	r3, [pc, #316]	@ (ef0c <vTaskStartScheduler+0x1c8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    edd0:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    edd2:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    edd4:	f7fe f976 	bl	d0c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
    edd8:	4a4d      	ldr	r2, [pc, #308]	@ (ef10 <vTaskStartScheduler+0x1cc>)
		if( pxCurrentTCB == NULL )
    edda:	4d4e      	ldr	r5, [pc, #312]	@ (ef14 <vTaskStartScheduler+0x1d0>)
		uxCurrentNumberOfTasks++;
    eddc:	6813      	ldr	r3, [r2, #0]
    edde:	3301      	adds	r3, #1
    ede0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    ede2:	682b      	ldr	r3, [r5, #0]
    ede4:	2b00      	cmp	r3, #0
    ede6:	d04a      	beq.n	ee7e <vTaskStartScheduler+0x13a>
			if( xSchedulerRunning == pdFALSE )
    ede8:	4e4b      	ldr	r6, [pc, #300]	@ (ef18 <vTaskStartScheduler+0x1d4>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    edea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
    edec:	6833      	ldr	r3, [r6, #0]
    edee:	2b00      	cmp	r3, #0
    edf0:	d03f      	beq.n	ee72 <vTaskStartScheduler+0x12e>
    edf2:	f8df 8158 	ldr.w	r8, [pc, #344]	@ ef4c <vTaskStartScheduler+0x208>
		uxTaskNumber++;
    edf6:	4a49      	ldr	r2, [pc, #292]	@ (ef1c <vTaskStartScheduler+0x1d8>)
		prvAddTaskToReadyList( pxNewTCB );
    edf8:	4949      	ldr	r1, [pc, #292]	@ (ef20 <vTaskStartScheduler+0x1dc>)
		uxTaskNumber++;
    edfa:	6813      	ldr	r3, [r2, #0]
    edfc:	3301      	adds	r3, #1
    edfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    ee00:	6563      	str	r3, [r4, #84]	@ 0x54
		prvAddTaskToReadyList( pxNewTCB );
    ee02:	680b      	ldr	r3, [r1, #0]
    ee04:	4283      	cmp	r3, r0
    ee06:	bf38      	it	cc
    ee08:	6008      	strcc	r0, [r1, #0]
    ee0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ee0e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    ee12:	4639      	mov	r1, r7
    ee14:	f7fe fe66 	bl	dae4 <vListInsertEnd>
	taskEXIT_CRITICAL();
    ee18:	f7fe f980 	bl	d11c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
    ee1c:	6833      	ldr	r3, [r6, #0]
    ee1e:	b173      	cbz	r3, ee3e <vTaskStartScheduler+0xfa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    ee20:	682a      	ldr	r2, [r5, #0]
    ee22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    ee24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    ee26:	429a      	cmp	r2, r3
    ee28:	d209      	bcs.n	ee3e <vTaskStartScheduler+0xfa>
			taskYIELD_IF_USING_PREEMPTION();
    ee2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    ee2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    ee32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    ee36:	f3bf 8f4f 	dsb	sy
    ee3a:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
    ee3e:	f001 f963 	bl	10108 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
    ee42:	2801      	cmp	r0, #1
    ee44:	d024      	beq.n	ee90 <vTaskStartScheduler+0x14c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    ee46:	3001      	adds	r0, #1
    ee48:	d004      	beq.n	ee54 <vTaskStartScheduler+0x110>
}
    ee4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
    ee4e:	4628      	mov	r0, r5
    ee50:	f7fe fc94 	bl	d77c <vPortFree>
    ee54:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ee58:	f383 8811 	msr	BASEPRI, r3
    ee5c:	f3bf 8f6f 	isb	sy
    ee60:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    ee64:	492f      	ldr	r1, [pc, #188]	@ (ef24 <vTaskStartScheduler+0x1e0>)
    ee66:	4830      	ldr	r0, [pc, #192]	@ (ef28 <vTaskStartScheduler+0x1e4>)
    ee68:	f640 0204 	movw	r2, #2052	@ 0x804
    ee6c:	f002 f8fc 	bl	11068 <am_util_stdio_printf>
    ee70:	e7fe      	b.n	ee70 <vTaskStartScheduler+0x12c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    ee72:	682b      	ldr	r3, [r5, #0]
    ee74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    ee76:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
    ee78:	bf98      	it	ls
    ee7a:	602c      	strls	r4, [r5, #0]
    ee7c:	e7b9      	b.n	edf2 <vTaskStartScheduler+0xae>
			pxCurrentTCB = pxNewTCB;
    ee7e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    ee80:	6813      	ldr	r3, [r2, #0]
    ee82:	2b01      	cmp	r3, #1
    ee84:	d018      	beq.n	eeb8 <vTaskStartScheduler+0x174>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    ee86:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    ee88:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ ef4c <vTaskStartScheduler+0x208>
    ee8c:	4e22      	ldr	r6, [pc, #136]	@ (ef18 <vTaskStartScheduler+0x1d4>)
    ee8e:	e7b2      	b.n	edf6 <vTaskStartScheduler+0xb2>
    ee90:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ee94:	f383 8811 	msr	BASEPRI, r3
    ee98:	f3bf 8f6f 	isb	sy
    ee9c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    eea0:	4a22      	ldr	r2, [pc, #136]	@ (ef2c <vTaskStartScheduler+0x1e8>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    eea2:	4b23      	ldr	r3, [pc, #140]	@ (ef30 <vTaskStartScheduler+0x1ec>)
		xNextTaskUnblockTime = portMAX_DELAY;
    eea4:	f04f 31ff 	mov.w	r1, #4294967295
    eea8:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    eeaa:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
    eeac:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    eeae:	601a      	str	r2, [r3, #0]
}
    eeb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
    eeb4:	f7fe bade 	b.w	d474 <xPortStartScheduler>
    eeb8:	f8df 8090 	ldr.w	r8, [pc, #144]	@ ef4c <vTaskStartScheduler+0x208>
    eebc:	4646      	mov	r6, r8
    eebe:	f108 09a0 	add.w	r9, r8, #160	@ 0xa0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    eec2:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    eec4:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    eec6:	f7fe fdfd 	bl	dac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    eeca:	45b1      	cmp	r9, r6
    eecc:	d1f9      	bne.n	eec2 <vTaskStartScheduler+0x17e>
	vListInitialise( &xDelayedTaskList1 );
    eece:	f8df 9080 	ldr.w	r9, [pc, #128]	@ ef50 <vTaskStartScheduler+0x20c>
	vListInitialise( &xDelayedTaskList2 );
    eed2:	4e18      	ldr	r6, [pc, #96]	@ (ef34 <vTaskStartScheduler+0x1f0>)
	vListInitialise( &xDelayedTaskList1 );
    eed4:	4648      	mov	r0, r9
    eed6:	f7fe fdf5 	bl	dac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    eeda:	4630      	mov	r0, r6
    eedc:	f7fe fdf2 	bl	dac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    eee0:	4815      	ldr	r0, [pc, #84]	@ (ef38 <vTaskStartScheduler+0x1f4>)
    eee2:	f7fe fdef 	bl	dac4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
    eee6:	4815      	ldr	r0, [pc, #84]	@ (ef3c <vTaskStartScheduler+0x1f8>)
    eee8:	f7fe fdec 	bl	dac4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
    eeec:	4814      	ldr	r0, [pc, #80]	@ (ef40 <vTaskStartScheduler+0x1fc>)
    eeee:	f7fe fde9 	bl	dac4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
    eef2:	4b14      	ldr	r3, [pc, #80]	@ (ef44 <vTaskStartScheduler+0x200>)
		prvAddTaskToReadyList( pxNewTCB );
    eef4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
    eef6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    eefa:	4b13      	ldr	r3, [pc, #76]	@ (ef48 <vTaskStartScheduler+0x204>)
    eefc:	601e      	str	r6, [r3, #0]
    eefe:	4e06      	ldr	r6, [pc, #24]	@ (ef18 <vTaskStartScheduler+0x1d4>)
}
    ef00:	e779      	b.n	edf6 <vTaskStartScheduler+0xb2>
    ef02:	bf00      	nop
    ef04:	0002a518 	.word	0x0002a518
    ef08:	0000f289 	.word	0x0000f289
    ef0c:	1000ab3c 	.word	0x1000ab3c
    ef10:	1000ab60 	.word	0x1000ab60
    ef14:	1000ac74 	.word	0x1000ac74
    ef18:	1000ab54 	.word	0x1000ab54
    ef1c:	1000ab44 	.word	0x1000ab44
    ef20:	1000ab58 	.word	0x1000ab58
    ef24:	0002a4bc 	.word	0x0002a4bc
    ef28:	0002a268 	.word	0x0002a268
    ef2c:	1000ab40 	.word	0x1000ab40
    ef30:	1000ab5c 	.word	0x1000ab5c
    ef34:	1000abac 	.word	0x1000abac
    ef38:	1000ab90 	.word	0x1000ab90
    ef3c:	1000ab7c 	.word	0x1000ab7c
    ef40:	1000ab64 	.word	0x1000ab64
    ef44:	1000aba8 	.word	0x1000aba8
    ef48:	1000aba4 	.word	0x1000aba4
    ef4c:	1000abd4 	.word	0x1000abd4
    ef50:	1000abc0 	.word	0x1000abc0

0000ef54 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    ef54:	4a02      	ldr	r2, [pc, #8]	@ (ef60 <vTaskSuspendAll+0xc>)
    ef56:	6813      	ldr	r3, [r2, #0]
    ef58:	3301      	adds	r3, #1
    ef5a:	6013      	str	r3, [r2, #0]
}
    ef5c:	4770      	bx	lr
    ef5e:	bf00      	nop
    ef60:	1000ab38 	.word	0x1000ab38

0000ef64 <xTaskGetTickCount>:
		xTicks = xTickCount;
    ef64:	4b01      	ldr	r3, [pc, #4]	@ (ef6c <xTaskGetTickCount+0x8>)
    ef66:	6818      	ldr	r0, [r3, #0]
}
    ef68:	4770      	bx	lr
    ef6a:	bf00      	nop
    ef6c:	1000ab5c 	.word	0x1000ab5c

0000ef70 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    ef70:	4a0d      	ldr	r2, [pc, #52]	@ (efa8 <vTaskStepTick+0x38>)
    ef72:	490e      	ldr	r1, [pc, #56]	@ (efac <vTaskStepTick+0x3c>)
	{
    ef74:	b508      	push	{r3, lr}
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    ef76:	6813      	ldr	r3, [r2, #0]
    ef78:	6809      	ldr	r1, [r1, #0]
    ef7a:	4403      	add	r3, r0
    ef7c:	428b      	cmp	r3, r1
    ef7e:	d803      	bhi.n	ef88 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
    ef80:	6813      	ldr	r3, [r2, #0]
    ef82:	4403      	add	r3, r0
    ef84:	6013      	str	r3, [r2, #0]
	}
    ef86:	bd08      	pop	{r3, pc}
    ef88:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ef8c:	f383 8811 	msr	BASEPRI, r3
    ef90:	f3bf 8f6f 	isb	sy
    ef94:	f3bf 8f4f 	dsb	sy
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    ef98:	4905      	ldr	r1, [pc, #20]	@ (efb0 <vTaskStepTick+0x40>)
    ef9a:	4806      	ldr	r0, [pc, #24]	@ (efb4 <vTaskStepTick+0x44>)
    ef9c:	f640 12f8 	movw	r2, #2552	@ 0x9f8
    efa0:	f002 f862 	bl	11068 <am_util_stdio_printf>
    efa4:	e7fe      	b.n	efa4 <vTaskStepTick+0x34>
    efa6:	bf00      	nop
    efa8:	1000ab5c 	.word	0x1000ab5c
    efac:	1000ab40 	.word	0x1000ab40
    efb0:	0002a4bc 	.word	0x0002a4bc
    efb4:	0002a268 	.word	0x0002a268

0000efb8 <xTaskIncrementTick>:
{
    efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    efbc:	4b4e      	ldr	r3, [pc, #312]	@ (f0f8 <xTaskIncrementTick+0x140>)
    efbe:	681b      	ldr	r3, [r3, #0]
{
    efc0:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    efc2:	2b00      	cmp	r3, #0
    efc4:	d144      	bne.n	f050 <xTaskIncrementTick+0x98>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    efc6:	4b4d      	ldr	r3, [pc, #308]	@ (f0fc <xTaskIncrementTick+0x144>)
    efc8:	681e      	ldr	r6, [r3, #0]
    efca:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    efcc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    efce:	2e00      	cmp	r6, #0
    efd0:	d04c      	beq.n	f06c <xTaskIncrementTick+0xb4>
    efd2:	4b4b      	ldr	r3, [pc, #300]	@ (f100 <xTaskIncrementTick+0x148>)
    efd4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
    efd6:	681b      	ldr	r3, [r3, #0]
    efd8:	42b3      	cmp	r3, r6
    efda:	d85f      	bhi.n	f09c <xTaskIncrementTick+0xe4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    efdc:	4f49      	ldr	r7, [pc, #292]	@ (f104 <xTaskIncrementTick+0x14c>)
    efde:	f8df 9140 	ldr.w	r9, [pc, #320]	@ f120 <xTaskIncrementTick+0x168>
    efe2:	683b      	ldr	r3, [r7, #0]
    efe4:	f8df a13c 	ldr.w	sl, [pc, #316]	@ f124 <xTaskIncrementTick+0x16c>
    efe8:	681d      	ldr	r5, [r3, #0]
    efea:	2d00      	cmp	r5, #0
    efec:	d076      	beq.n	f0dc <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList( pxTCB );
    efee:	f8df 8138 	ldr.w	r8, [pc, #312]	@ f128 <xTaskIncrementTick+0x170>
BaseType_t xSwitchRequired = pdFALSE;
    eff2:	2500      	movs	r5, #0
    eff4:	e020      	b.n	f038 <xTaskIncrementTick+0x80>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    eff6:	f7fe fd9b 	bl	db30 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    effa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    effc:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    f000:	b10b      	cbz	r3, f006 <xTaskIncrementTick+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f002:	f7fe fd95 	bl	db30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    f006:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    f008:	f8d8 2000 	ldr.w	r2, [r8]
    f00c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    f010:	4293      	cmp	r3, r2
    f012:	4659      	mov	r1, fp
    f014:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    f018:	bf88      	it	hi
    f01a:	f8c8 3000 	strhi.w	r3, [r8]
    f01e:	f7fe fd61 	bl	dae4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f022:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f026:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f028:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    f02a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f02c:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
    f02e:	4291      	cmp	r1, r2
    f030:	bf28      	it	cs
    f032:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f034:	2b00      	cmp	r3, #0
    f036:	d051      	beq.n	f0dc <xTaskIncrementTick+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f038:	683b      	ldr	r3, [r7, #0]
    f03a:	68db      	ldr	r3, [r3, #12]
    f03c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    f03e:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f040:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
    f044:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f046:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
    f048:	d2d5      	bcs.n	eff6 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
    f04a:	9a01      	ldr	r2, [sp, #4]
    f04c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    f04e:	e02a      	b.n	f0a6 <xTaskIncrementTick+0xee>
		++uxPendedTicks;
    f050:	4a2d      	ldr	r2, [pc, #180]	@ (f108 <xTaskIncrementTick+0x150>)
    f052:	6813      	ldr	r3, [r2, #0]
    f054:	3301      	adds	r3, #1
BaseType_t xSwitchRequired = pdFALSE;
    f056:	2500      	movs	r5, #0
		++uxPendedTicks;
    f058:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
    f05a:	4b2c      	ldr	r3, [pc, #176]	@ (f10c <xTaskIncrementTick+0x154>)
    f05c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
    f05e:	2b00      	cmp	r3, #0
}
    f060:	bf0c      	ite	eq
    f062:	4628      	moveq	r0, r5
    f064:	2001      	movne	r0, #1
    f066:	b003      	add	sp, #12
    f068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
    f06c:	4b25      	ldr	r3, [pc, #148]	@ (f104 <xTaskIncrementTick+0x14c>)
    f06e:	681a      	ldr	r2, [r3, #0]
    f070:	6812      	ldr	r2, [r2, #0]
    f072:	bb22      	cbnz	r2, f0be <xTaskIncrementTick+0x106>
    f074:	4a26      	ldr	r2, [pc, #152]	@ (f110 <xTaskIncrementTick+0x158>)
    f076:	6818      	ldr	r0, [r3, #0]
    f078:	6811      	ldr	r1, [r2, #0]
    f07a:	6019      	str	r1, [r3, #0]
    f07c:	4925      	ldr	r1, [pc, #148]	@ (f114 <xTaskIncrementTick+0x15c>)
    f07e:	6010      	str	r0, [r2, #0]
    f080:	680a      	ldr	r2, [r1, #0]
    f082:	3201      	adds	r2, #1
    f084:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f086:	681a      	ldr	r2, [r3, #0]
    f088:	6812      	ldr	r2, [r2, #0]
    f08a:	bb62      	cbnz	r2, f0e6 <xTaskIncrementTick+0x12e>
		xNextTaskUnblockTime = portMAX_DELAY;
    f08c:	4b1c      	ldr	r3, [pc, #112]	@ (f100 <xTaskIncrementTick+0x148>)
    f08e:	9301      	str	r3, [sp, #4]
    f090:	461a      	mov	r2, r3
    f092:	f04f 33ff 	mov.w	r3, #4294967295
    f096:	6013      	str	r3, [r2, #0]
    f098:	4613      	mov	r3, r2
    f09a:	e79c      	b.n	efd6 <xTaskIncrementTick+0x1e>
    f09c:	f8df 9080 	ldr.w	r9, [pc, #128]	@ f120 <xTaskIncrementTick+0x168>
    f0a0:	f8df a080 	ldr.w	sl, [pc, #128]	@ f124 <xTaskIncrementTick+0x16c>
BaseType_t xSwitchRequired = pdFALSE;
    f0a4:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    f0a6:	f8da 3000 	ldr.w	r3, [sl]
    f0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f0ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f0b0:	009b      	lsls	r3, r3, #2
    f0b2:	f859 3003 	ldr.w	r3, [r9, r3]
				xSwitchRequired = pdTRUE;
    f0b6:	2b02      	cmp	r3, #2
    f0b8:	bf28      	it	cs
    f0ba:	2501      	movcs	r5, #1
    f0bc:	e7cd      	b.n	f05a <xTaskIncrementTick+0xa2>
    f0be:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f0c2:	f383 8811 	msr	BASEPRI, r3
    f0c6:	f3bf 8f6f 	isb	sy
    f0ca:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
    f0ce:	4912      	ldr	r1, [pc, #72]	@ (f118 <xTaskIncrementTick+0x160>)
    f0d0:	4812      	ldr	r0, [pc, #72]	@ (f11c <xTaskIncrementTick+0x164>)
    f0d2:	f640 2262 	movw	r2, #2658	@ 0xa62
    f0d6:	f001 ffc7 	bl	11068 <am_util_stdio_printf>
    f0da:	e7fe      	b.n	f0da <xTaskIncrementTick+0x122>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f0dc:	9a01      	ldr	r2, [sp, #4]
    f0de:	f04f 33ff 	mov.w	r3, #4294967295
    f0e2:	6013      	str	r3, [r2, #0]
					break;
    f0e4:	e7df      	b.n	f0a6 <xTaskIncrementTick+0xee>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f0e6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f0e8:	4a05      	ldr	r2, [pc, #20]	@ (f100 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f0ea:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f0ec:	9201      	str	r2, [sp, #4]
    f0ee:	68db      	ldr	r3, [r3, #12]
    f0f0:	685b      	ldr	r3, [r3, #4]
    f0f2:	6013      	str	r3, [r2, #0]
    f0f4:	4613      	mov	r3, r2
	}
}
    f0f6:	e76e      	b.n	efd6 <xTaskIncrementTick+0x1e>
    f0f8:	1000ab38 	.word	0x1000ab38
    f0fc:	1000ab5c 	.word	0x1000ab5c
    f100:	1000ab40 	.word	0x1000ab40
    f104:	1000aba8 	.word	0x1000aba8
    f108:	1000ab50 	.word	0x1000ab50
    f10c:	1000ab4c 	.word	0x1000ab4c
    f110:	1000aba4 	.word	0x1000aba4
    f114:	1000ab48 	.word	0x1000ab48
    f118:	0002a4bc 	.word	0x0002a4bc
    f11c:	0002a268 	.word	0x0002a268
    f120:	1000abd4 	.word	0x1000abd4
    f124:	1000ac74 	.word	0x1000ac74
    f128:	1000ab58 	.word	0x1000ab58

0000f12c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
    f12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
    f130:	f7fd ffc8 	bl	d0c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
    f134:	4b3b      	ldr	r3, [pc, #236]	@ (f224 <xTaskResumeAll.part.0+0xf8>)
    f136:	681a      	ldr	r2, [r3, #0]
    f138:	3a01      	subs	r2, #1
    f13a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f13c:	681b      	ldr	r3, [r3, #0]
    f13e:	2b00      	cmp	r3, #0
    f140:	d15a      	bne.n	f1f8 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    f142:	4b39      	ldr	r3, [pc, #228]	@ (f228 <xTaskResumeAll.part.0+0xfc>)
    f144:	681b      	ldr	r3, [r3, #0]
    f146:	2b00      	cmp	r3, #0
    f148:	d056      	beq.n	f1f8 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f14a:	4d38      	ldr	r5, [pc, #224]	@ (f22c <xTaskResumeAll.part.0+0x100>)
    f14c:	682b      	ldr	r3, [r5, #0]
    f14e:	2b00      	cmp	r3, #0
    f150:	d065      	beq.n	f21e <xTaskResumeAll.part.0+0xf2>
    f152:	4e37      	ldr	r6, [pc, #220]	@ (f230 <xTaskResumeAll.part.0+0x104>)
    f154:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ f244 <xTaskResumeAll.part.0+0x118>
    f158:	4f36      	ldr	r7, [pc, #216]	@ (f234 <xTaskResumeAll.part.0+0x108>)
    f15a:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ f248 <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
    f15e:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f162:	68eb      	ldr	r3, [r5, #12]
    f164:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f166:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f16a:	f104 0018 	add.w	r0, r4, #24
    f16e:	f7fe fcdf 	bl	db30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f172:	4658      	mov	r0, fp
    f174:	f7fe fcdc 	bl	db30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    f178:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    f17a:	6832      	ldr	r2, [r6, #0]
    f17c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    f180:	4293      	cmp	r3, r2
    f182:	4659      	mov	r1, fp
    f184:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    f188:	bf88      	it	hi
    f18a:	6033      	strhi	r3, [r6, #0]
    f18c:	f7fe fcaa 	bl	dae4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f190:	683b      	ldr	r3, [r7, #0]
    f192:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    f194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f196:	429a      	cmp	r2, r3
    f198:	d334      	bcc.n	f204 <xTaskResumeAll.part.0+0xd8>
						xYieldPending = pdTRUE;
    f19a:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f19e:	682b      	ldr	r3, [r5, #0]
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	d1de      	bne.n	f162 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f1a4:	4b24      	ldr	r3, [pc, #144]	@ (f238 <xTaskResumeAll.part.0+0x10c>)
    f1a6:	681a      	ldr	r2, [r3, #0]
    f1a8:	6812      	ldr	r2, [r2, #0]
    f1aa:	2a00      	cmp	r2, #0
    f1ac:	d032      	beq.n	f214 <xTaskResumeAll.part.0+0xe8>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f1ae:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f1b0:	4b22      	ldr	r3, [pc, #136]	@ (f23c <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f1b2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f1b4:	68d2      	ldr	r2, [r2, #12]
    f1b6:	6852      	ldr	r2, [r2, #4]
    f1b8:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    f1ba:	4e21      	ldr	r6, [pc, #132]	@ (f240 <xTaskResumeAll.part.0+0x114>)
    f1bc:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    f1be:	b144      	cbz	r4, f1d2 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
    f1c0:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
    f1c2:	f7ff fef9 	bl	efb8 <xTaskIncrementTick>
    f1c6:	b108      	cbz	r0, f1cc <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
    f1c8:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    f1cc:	3c01      	subs	r4, #1
    f1ce:	d1f8      	bne.n	f1c2 <xTaskResumeAll.part.0+0x96>
						uxPendedTicks = 0;
    f1d0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
    f1d2:	f8d9 3000 	ldr.w	r3, [r9]
    f1d6:	b17b      	cbz	r3, f1f8 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
    f1d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    f1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    f1e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    f1e4:	f3bf 8f4f 	dsb	sy
    f1e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    f1ec:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    f1ee:	f7fd ff95 	bl	d11c <vPortExitCritical>
}
    f1f2:	4620      	mov	r0, r4
    f1f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
    f1f8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    f1fa:	f7fd ff8f 	bl	d11c <vPortExitCritical>
}
    f1fe:	4620      	mov	r0, r4
    f200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f204:	682b      	ldr	r3, [r5, #0]
    f206:	2b00      	cmp	r3, #0
    f208:	d1ab      	bne.n	f162 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f20a:	4b0b      	ldr	r3, [pc, #44]	@ (f238 <xTaskResumeAll.part.0+0x10c>)
    f20c:	681a      	ldr	r2, [r3, #0]
    f20e:	6812      	ldr	r2, [r2, #0]
    f210:	2a00      	cmp	r2, #0
    f212:	d1cc      	bne.n	f1ae <xTaskResumeAll.part.0+0x82>
		xNextTaskUnblockTime = portMAX_DELAY;
    f214:	4b09      	ldr	r3, [pc, #36]	@ (f23c <xTaskResumeAll.part.0+0x110>)
    f216:	f04f 32ff 	mov.w	r2, #4294967295
    f21a:	601a      	str	r2, [r3, #0]
    f21c:	e7cd      	b.n	f1ba <xTaskResumeAll.part.0+0x8e>
    f21e:	f8df 9028 	ldr.w	r9, [pc, #40]	@ f248 <xTaskResumeAll.part.0+0x11c>
    f222:	e7ca      	b.n	f1ba <xTaskResumeAll.part.0+0x8e>
    f224:	1000ab38 	.word	0x1000ab38
    f228:	1000ab60 	.word	0x1000ab60
    f22c:	1000ab90 	.word	0x1000ab90
    f230:	1000ab58 	.word	0x1000ab58
    f234:	1000ac74 	.word	0x1000ac74
    f238:	1000aba8 	.word	0x1000aba8
    f23c:	1000ab40 	.word	0x1000ab40
    f240:	1000ab50 	.word	0x1000ab50
    f244:	1000abd4 	.word	0x1000abd4
    f248:	1000ab4c 	.word	0x1000ab4c

0000f24c <xTaskResumeAll>:
{
    f24c:	b508      	push	{r3, lr}
	configASSERT( uxSchedulerSuspended );
    f24e:	4b0b      	ldr	r3, [pc, #44]	@ (f27c <xTaskResumeAll+0x30>)
    f250:	681b      	ldr	r3, [r3, #0]
    f252:	b973      	cbnz	r3, f272 <xTaskResumeAll+0x26>
    f254:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f258:	f383 8811 	msr	BASEPRI, r3
    f25c:	f3bf 8f6f 	isb	sy
    f260:	f3bf 8f4f 	dsb	sy
    f264:	4906      	ldr	r1, [pc, #24]	@ (f280 <xTaskResumeAll+0x34>)
    f266:	4807      	ldr	r0, [pc, #28]	@ (f284 <xTaskResumeAll+0x38>)
    f268:	f640 0268 	movw	r2, #2152	@ 0x868
    f26c:	f001 fefc 	bl	11068 <am_util_stdio_printf>
    f270:	e7fe      	b.n	f270 <xTaskResumeAll+0x24>
}
    f272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f276:	f7ff bf59 	b.w	f12c <xTaskResumeAll.part.0>
    f27a:	bf00      	nop
    f27c:	1000ab38 	.word	0x1000ab38
    f280:	0002a4bc 	.word	0x0002a4bc
    f284:	0002a268 	.word	0x0002a268

0000f288 <prvIdleTask>:
{
    f288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f28c:	4d4a      	ldr	r5, [pc, #296]	@ (f3b8 <prvIdleTask+0x130>)
    f28e:	4f4b      	ldr	r7, [pc, #300]	@ (f3bc <prvIdleTask+0x134>)
    f290:	4e4b      	ldr	r6, [pc, #300]	@ (f3c0 <prvIdleTask+0x138>)
    f292:	f8df 8144 	ldr.w	r8, [pc, #324]	@ f3d8 <prvIdleTask+0x150>
    f296:	f8df a144 	ldr.w	sl, [pc, #324]	@ f3dc <prvIdleTask+0x154>
    f29a:	f8df 9144 	ldr.w	r9, [pc, #324]	@ f3e0 <prvIdleTask+0x158>
				taskYIELD();
    f29e:	f04f 2be0 	mov.w	fp, #3758153728	@ 0xe000e000
    f2a2:	e014      	b.n	f2ce <prvIdleTask+0x46>
			taskENTER_CRITICAL();
    f2a4:	f7fd ff0e 	bl	d0c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f2a8:	68fb      	ldr	r3, [r7, #12]
    f2aa:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f2ac:	1d20      	adds	r0, r4, #4
    f2ae:	f7fe fc3f 	bl	db30 <uxListRemove>
				--uxCurrentNumberOfTasks;
    f2b2:	6833      	ldr	r3, [r6, #0]
    f2b4:	3b01      	subs	r3, #1
    f2b6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
    f2b8:	682b      	ldr	r3, [r5, #0]
    f2ba:	3b01      	subs	r3, #1
    f2bc:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
    f2be:	f7fd ff2d 	bl	d11c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
    f2c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    f2c4:	f7fe fa5a 	bl	d77c <vPortFree>
			vPortFree( pxTCB );
    f2c8:	4620      	mov	r0, r4
    f2ca:	f7fe fa57 	bl	d77c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f2ce:	682b      	ldr	r3, [r5, #0]
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d1e7      	bne.n	f2a4 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    f2d4:	f8d8 3000 	ldr.w	r3, [r8]
    f2d8:	2b01      	cmp	r3, #1
    f2da:	d907      	bls.n	f2ec <prvIdleTask+0x64>
				taskYIELD();
    f2dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    f2e0:	f8cb 3d04 	str.w	r3, [fp, #3332]	@ 0xd04
    f2e4:	f3bf 8f4f 	dsb	sy
    f2e8:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    f2ec:	f8da 3000 	ldr.w	r3, [sl]
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d130      	bne.n	f356 <prvIdleTask+0xce>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    f2f4:	f8d9 3000 	ldr.w	r3, [r9]
    f2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d1e7      	bne.n	f2ce <prvIdleTask+0x46>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    f2fe:	f8d8 3000 	ldr.w	r3, [r8]
    f302:	2b01      	cmp	r3, #1
    f304:	d8e3      	bhi.n	f2ce <prvIdleTask+0x46>
			xReturn = xNextTaskUnblockTime - xTickCount;
    f306:	492f      	ldr	r1, [pc, #188]	@ (f3c4 <prvIdleTask+0x13c>)
    f308:	482f      	ldr	r0, [pc, #188]	@ (f3c8 <prvIdleTask+0x140>)
    f30a:	680b      	ldr	r3, [r1, #0]
    f30c:	6802      	ldr	r2, [r0, #0]
    f30e:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    f310:	2b01      	cmp	r3, #1
    f312:	d9dc      	bls.n	f2ce <prvIdleTask+0x46>
	++uxSchedulerSuspended;
    f314:	4a2d      	ldr	r2, [pc, #180]	@ (f3cc <prvIdleTask+0x144>)
    f316:	6813      	ldr	r3, [r2, #0]
    f318:	3301      	adds	r3, #1
    f31a:	6013      	str	r3, [r2, #0]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    f31c:	680a      	ldr	r2, [r1, #0]
    f31e:	6803      	ldr	r3, [r0, #0]
    f320:	429a      	cmp	r2, r3
    f322:	d339      	bcc.n	f398 <prvIdleTask+0x110>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    f324:	f8da 3000 	ldr.w	r3, [sl]
    f328:	b303      	cbz	r3, f36c <prvIdleTask+0xe4>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    f32a:	f8d9 3000 	ldr.w	r3, [r9]
    f32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f330:	b37b      	cbz	r3, f392 <prvIdleTask+0x10a>
	configASSERT( uxSchedulerSuspended );
    f332:	4b26      	ldr	r3, [pc, #152]	@ (f3cc <prvIdleTask+0x144>)
    f334:	681b      	ldr	r3, [r3, #0]
    f336:	b9b3      	cbnz	r3, f366 <prvIdleTask+0xde>
    f338:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f33c:	f383 8811 	msr	BASEPRI, r3
    f340:	f3bf 8f6f 	isb	sy
    f344:	f3bf 8f4f 	dsb	sy
    f348:	4921      	ldr	r1, [pc, #132]	@ (f3d0 <prvIdleTask+0x148>)
    f34a:	4822      	ldr	r0, [pc, #136]	@ (f3d4 <prvIdleTask+0x14c>)
    f34c:	f640 0268 	movw	r2, #2152	@ 0x868
    f350:	f001 fe8a 	bl	11068 <am_util_stdio_printf>
    f354:	e7fe      	b.n	f354 <prvIdleTask+0xcc>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    f356:	f8d9 3000 	ldr.w	r3, [r9]
    f35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f35c:	2b00      	cmp	r3, #0
    f35e:	d1b6      	bne.n	f2ce <prvIdleTask+0x46>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    f360:	f8d8 3000 	ldr.w	r3, [r8]
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    f364:	e7b3      	b.n	f2ce <prvIdleTask+0x46>
    f366:	f7ff fee1 	bl	f12c <xTaskResumeAll.part.0>
    f36a:	e7b0      	b.n	f2ce <prvIdleTask+0x46>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    f36c:	f8d9 3000 	ldr.w	r3, [r9]
    f370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f372:	2b00      	cmp	r3, #0
    f374:	d1dd      	bne.n	f332 <prvIdleTask+0xaa>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    f376:	f8d8 3000 	ldr.w	r3, [r8]
    f37a:	2b01      	cmp	r3, #1
    f37c:	d8d9      	bhi.n	f332 <prvIdleTask+0xaa>
			xReturn = xNextTaskUnblockTime - xTickCount;
    f37e:	4b11      	ldr	r3, [pc, #68]	@ (f3c4 <prvIdleTask+0x13c>)
    f380:	6818      	ldr	r0, [r3, #0]
    f382:	4b11      	ldr	r3, [pc, #68]	@ (f3c8 <prvIdleTask+0x140>)
    f384:	681b      	ldr	r3, [r3, #0]
    f386:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    f388:	2801      	cmp	r0, #1
    f38a:	d9d2      	bls.n	f332 <prvIdleTask+0xaa>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
    f38c:	f7fd ff6e 	bl	d26c <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
    f390:	e7cf      	b.n	f332 <prvIdleTask+0xaa>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    f392:	f8d8 3000 	ldr.w	r3, [r8]
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    f396:	e7cc      	b.n	f332 <prvIdleTask+0xaa>
    f398:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f39c:	f383 8811 	msr	BASEPRI, r3
    f3a0:	f3bf 8f6f 	isb	sy
    f3a4:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    f3a8:	4909      	ldr	r1, [pc, #36]	@ (f3d0 <prvIdleTask+0x148>)
    f3aa:	480a      	ldr	r0, [pc, #40]	@ (f3d4 <prvIdleTask+0x14c>)
    f3ac:	f640 522d 	movw	r2, #3373	@ 0xd2d
    f3b0:	f001 fe5a 	bl	11068 <am_util_stdio_printf>
    f3b4:	e7fe      	b.n	f3b4 <prvIdleTask+0x12c>
    f3b6:	bf00      	nop
    f3b8:	1000ab78 	.word	0x1000ab78
    f3bc:	1000ab7c 	.word	0x1000ab7c
    f3c0:	1000ab60 	.word	0x1000ab60
    f3c4:	1000ab40 	.word	0x1000ab40
    f3c8:	1000ab5c 	.word	0x1000ab5c
    f3cc:	1000ab38 	.word	0x1000ab38
    f3d0:	0002a4bc 	.word	0x0002a4bc
    f3d4:	0002a268 	.word	0x0002a268
    f3d8:	1000abd4 	.word	0x1000abd4
    f3dc:	1000ab58 	.word	0x1000ab58
    f3e0:	1000ac74 	.word	0x1000ac74

0000f3e4 <vTaskDelay>:
	{
    f3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
    f3e6:	b1a0      	cbz	r0, f412 <vTaskDelay+0x2e>
			configASSERT( uxSchedulerSuspended == 0 );
    f3e8:	4d2a      	ldr	r5, [pc, #168]	@ (f494 <vTaskDelay+0xb0>)
    f3ea:	682b      	ldr	r3, [r5, #0]
    f3ec:	b1e3      	cbz	r3, f428 <vTaskDelay+0x44>
    f3ee:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f3f2:	f383 8811 	msr	BASEPRI, r3
    f3f6:	f3bf 8f6f 	isb	sy
    f3fa:	f3bf 8f4f 	dsb	sy
    f3fe:	4926      	ldr	r1, [pc, #152]	@ (f498 <vTaskDelay+0xb4>)
    f400:	4826      	ldr	r0, [pc, #152]	@ (f49c <vTaskDelay+0xb8>)
    f402:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
    f406:	f001 fe2f 	bl	11068 <am_util_stdio_printf>
    f40a:	e7fe      	b.n	f40a <vTaskDelay+0x26>
    f40c:	f7ff fe8e 	bl	f12c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
    f410:	b948      	cbnz	r0, f426 <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
    f412:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    f416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    f41a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    f41e:	f3bf 8f4f 	dsb	sy
    f422:	f3bf 8f6f 	isb	sy
	}
    f426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	++uxSchedulerSuspended;
    f428:	682a      	ldr	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f42a:	4e1d      	ldr	r6, [pc, #116]	@ (f4a0 <vTaskDelay+0xbc>)
const TickType_t xConstTickCount = xTickCount;
    f42c:	491d      	ldr	r1, [pc, #116]	@ (f4a4 <vTaskDelay+0xc0>)
	++uxSchedulerSuspended;
    f42e:	3201      	adds	r2, #1
    f430:	602a      	str	r2, [r5, #0]
const TickType_t xConstTickCount = xTickCount;
    f432:	680f      	ldr	r7, [r1, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f434:	6832      	ldr	r2, [r6, #0]
    f436:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f438:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f43a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f43e:	3004      	adds	r0, #4
    f440:	f7fe fb76 	bl	db30 <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f444:	6833      	ldr	r3, [r6, #0]
    f446:	19e4      	adds	r4, r4, r7
    f448:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    f44a:	d21c      	bcs.n	f486 <vTaskDelay+0xa2>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f44c:	4b16      	ldr	r3, [pc, #88]	@ (f4a8 <vTaskDelay+0xc4>)
    f44e:	6818      	ldr	r0, [r3, #0]
    f450:	6831      	ldr	r1, [r6, #0]
    f452:	3104      	adds	r1, #4
    f454:	f7fe fb54 	bl	db00 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    f458:	4b14      	ldr	r3, [pc, #80]	@ (f4ac <vTaskDelay+0xc8>)
    f45a:	681a      	ldr	r2, [r3, #0]
    f45c:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
    f45e:	bf38      	it	cc
    f460:	601c      	strcc	r4, [r3, #0]
	configASSERT( uxSchedulerSuspended );
    f462:	682b      	ldr	r3, [r5, #0]
    f464:	2b00      	cmp	r3, #0
    f466:	d1d1      	bne.n	f40c <vTaskDelay+0x28>
    f468:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f46c:	f383 8811 	msr	BASEPRI, r3
    f470:	f3bf 8f6f 	isb	sy
    f474:	f3bf 8f4f 	dsb	sy
    f478:	4907      	ldr	r1, [pc, #28]	@ (f498 <vTaskDelay+0xb4>)
    f47a:	4808      	ldr	r0, [pc, #32]	@ (f49c <vTaskDelay+0xb8>)
    f47c:	f640 0268 	movw	r2, #2152	@ 0x868
    f480:	f001 fdf2 	bl	11068 <am_util_stdio_printf>
    f484:	e7fe      	b.n	f484 <vTaskDelay+0xa0>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f486:	4b0a      	ldr	r3, [pc, #40]	@ (f4b0 <vTaskDelay+0xcc>)
    f488:	6818      	ldr	r0, [r3, #0]
    f48a:	6831      	ldr	r1, [r6, #0]
    f48c:	3104      	adds	r1, #4
    f48e:	f7fe fb37 	bl	db00 <vListInsert>
    f492:	e7e6      	b.n	f462 <vTaskDelay+0x7e>
    f494:	1000ab38 	.word	0x1000ab38
    f498:	0002a4bc 	.word	0x0002a4bc
    f49c:	0002a268 	.word	0x0002a268
    f4a0:	1000ac74 	.word	0x1000ac74
    f4a4:	1000ab5c 	.word	0x1000ab5c
    f4a8:	1000aba8 	.word	0x1000aba8
    f4ac:	1000ab40 	.word	0x1000ab40
    f4b0:	1000aba4 	.word	0x1000aba4

0000f4b4 <vTaskDelayUntil>:
	{
    f4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( pxPreviousWakeTime );
    f4b8:	2800      	cmp	r0, #0
    f4ba:	d070      	beq.n	f59e <vTaskDelayUntil+0xea>
		configASSERT( ( xTimeIncrement > 0U ) );
    f4bc:	b329      	cbz	r1, f50a <vTaskDelayUntil+0x56>
		configASSERT( uxSchedulerSuspended == 0 );
    f4be:	4d45      	ldr	r5, [pc, #276]	@ (f5d4 <vTaskDelayUntil+0x120>)
    f4c0:	682b      	ldr	r3, [r5, #0]
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	d133      	bne.n	f52e <vTaskDelayUntil+0x7a>
	++uxSchedulerSuspended;
    f4c6:	682b      	ldr	r3, [r5, #0]
			const TickType_t xConstTickCount = xTickCount;
    f4c8:	4e43      	ldr	r6, [pc, #268]	@ (f5d8 <vTaskDelayUntil+0x124>)
	++uxSchedulerSuspended;
    f4ca:	3301      	adds	r3, #1
    f4cc:	602b      	str	r3, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    f4ce:	6803      	ldr	r3, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
    f4d0:	6832      	ldr	r2, [r6, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    f4d2:	185c      	adds	r4, r3, r1
    f4d4:	bf2c      	ite	cs
    f4d6:	2101      	movcs	r1, #1
    f4d8:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
    f4da:	4293      	cmp	r3, r2
    f4dc:	d824      	bhi.n	f528 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    f4de:	2900      	cmp	r1, #0
    f4e0:	d143      	bne.n	f56a <vTaskDelayUntil+0xb6>
    f4e2:	42a2      	cmp	r2, r4
    f4e4:	d341      	bcc.n	f56a <vTaskDelayUntil+0xb6>
			*pxPreviousWakeTime = xTimeToWake;
    f4e6:	6004      	str	r4, [r0, #0]
	configASSERT( uxSchedulerSuspended );
    f4e8:	682b      	ldr	r3, [r5, #0]
    f4ea:	bb7b      	cbnz	r3, f54c <vTaskDelayUntil+0x98>
    f4ec:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f4f0:	f383 8811 	msr	BASEPRI, r3
    f4f4:	f3bf 8f6f 	isb	sy
    f4f8:	f3bf 8f4f 	dsb	sy
    f4fc:	4937      	ldr	r1, [pc, #220]	@ (f5dc <vTaskDelayUntil+0x128>)
    f4fe:	4838      	ldr	r0, [pc, #224]	@ (f5e0 <vTaskDelayUntil+0x12c>)
    f500:	f640 0268 	movw	r2, #2152	@ 0x868
    f504:	f001 fdb0 	bl	11068 <am_util_stdio_printf>
    f508:	e7fe      	b.n	f508 <vTaskDelayUntil+0x54>
    f50a:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f50e:	f383 8811 	msr	BASEPRI, r3
    f512:	f3bf 8f6f 	isb	sy
    f516:	f3bf 8f4f 	dsb	sy
		configASSERT( ( xTimeIncrement > 0U ) );
    f51a:	4930      	ldr	r1, [pc, #192]	@ (f5dc <vTaskDelayUntil+0x128>)
    f51c:	4830      	ldr	r0, [pc, #192]	@ (f5e0 <vTaskDelayUntil+0x12c>)
    f51e:	f240 42cb 	movw	r2, #1227	@ 0x4cb
    f522:	f001 fda1 	bl	11068 <am_util_stdio_printf>
    f526:	e7fe      	b.n	f526 <vTaskDelayUntil+0x72>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    f528:	2900      	cmp	r1, #0
    f52a:	d1da      	bne.n	f4e2 <vTaskDelayUntil+0x2e>
    f52c:	e7db      	b.n	f4e6 <vTaskDelayUntil+0x32>
    f52e:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f532:	f383 8811 	msr	BASEPRI, r3
    f536:	f3bf 8f6f 	isb	sy
    f53a:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
    f53e:	4927      	ldr	r1, [pc, #156]	@ (f5dc <vTaskDelayUntil+0x128>)
    f540:	4827      	ldr	r0, [pc, #156]	@ (f5e0 <vTaskDelayUntil+0x12c>)
    f542:	f240 42cc 	movw	r2, #1228	@ 0x4cc
    f546:	f001 fd8f 	bl	11068 <am_util_stdio_printf>
    f54a:	e7fe      	b.n	f54a <vTaskDelayUntil+0x96>
    f54c:	f7ff fdee 	bl	f12c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
    f550:	b948      	cbnz	r0, f566 <vTaskDelayUntil+0xb2>
			portYIELD_WITHIN_API();
    f552:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    f556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    f55a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    f55e:	f3bf 8f4f 	dsb	sy
    f562:	f3bf 8f6f 	isb	sy
	}
    f566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f56a:	4f1e      	ldr	r7, [pc, #120]	@ (f5e4 <vTaskDelayUntil+0x130>)
const TickType_t xConstTickCount = xTickCount;
    f56c:	f8d6 8000 	ldr.w	r8, [r6]
			*pxPreviousWakeTime = xTimeToWake;
    f570:	6004      	str	r4, [r0, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f572:	683b      	ldr	r3, [r7, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f574:	6838      	ldr	r0, [r7, #0]
    f576:	eba8 0602 	sub.w	r6, r8, r2
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f57a:	2200      	movs	r2, #0
    f57c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f580:	3004      	adds	r0, #4
    f582:	f7fe fad5 	bl	db30 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
    f586:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f588:	683b      	ldr	r3, [r7, #0]
			if( xTimeToWake < xConstTickCount )
    f58a:	45a0      	cmp	r8, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f58c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    f58e:	d915      	bls.n	f5bc <vTaskDelayUntil+0x108>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f590:	4b15      	ldr	r3, [pc, #84]	@ (f5e8 <vTaskDelayUntil+0x134>)
    f592:	6818      	ldr	r0, [r3, #0]
    f594:	6839      	ldr	r1, [r7, #0]
    f596:	3104      	adds	r1, #4
    f598:	f7fe fab2 	bl	db00 <vListInsert>
    f59c:	e7a4      	b.n	f4e8 <vTaskDelayUntil+0x34>
    f59e:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f5a2:	f383 8811 	msr	BASEPRI, r3
    f5a6:	f3bf 8f6f 	isb	sy
    f5aa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
    f5ae:	490b      	ldr	r1, [pc, #44]	@ (f5dc <vTaskDelayUntil+0x128>)
    f5b0:	480b      	ldr	r0, [pc, #44]	@ (f5e0 <vTaskDelayUntil+0x12c>)
    f5b2:	f240 42ca 	movw	r2, #1226	@ 0x4ca
    f5b6:	f001 fd57 	bl	11068 <am_util_stdio_printf>
    f5ba:	e7fe      	b.n	f5ba <vTaskDelayUntil+0x106>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f5bc:	4b0b      	ldr	r3, [pc, #44]	@ (f5ec <vTaskDelayUntil+0x138>)
    f5be:	6818      	ldr	r0, [r3, #0]
    f5c0:	6839      	ldr	r1, [r7, #0]
    f5c2:	3104      	adds	r1, #4
    f5c4:	f7fe fa9c 	bl	db00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    f5c8:	4b09      	ldr	r3, [pc, #36]	@ (f5f0 <vTaskDelayUntil+0x13c>)
    f5ca:	681a      	ldr	r2, [r3, #0]
    f5cc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
    f5ce:	bf38      	it	cc
    f5d0:	601c      	strcc	r4, [r3, #0]
    f5d2:	e789      	b.n	f4e8 <vTaskDelayUntil+0x34>
    f5d4:	1000ab38 	.word	0x1000ab38
    f5d8:	1000ab5c 	.word	0x1000ab5c
    f5dc:	0002a4bc 	.word	0x0002a4bc
    f5e0:	0002a268 	.word	0x0002a268
    f5e4:	1000ac74 	.word	0x1000ac74
    f5e8:	1000aba4 	.word	0x1000aba4
    f5ec:	1000aba8 	.word	0x1000aba8
    f5f0:	1000ab40 	.word	0x1000ab40

0000f5f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    f5f4:	4b04      	ldr	r3, [pc, #16]	@ (f608 <vTaskSwitchContext+0x14>)
    f5f6:	681b      	ldr	r3, [r3, #0]
    f5f8:	b11b      	cbz	r3, f602 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
    f5fa:	4b04      	ldr	r3, [pc, #16]	@ (f60c <vTaskSwitchContext+0x18>)
    f5fc:	2201      	movs	r2, #1
    f5fe:	601a      	str	r2, [r3, #0]
}
    f600:	4770      	bx	lr
    f602:	f7ff b94d 	b.w	e8a0 <vTaskSwitchContext.part.0>
    f606:	bf00      	nop
    f608:	1000ab38 	.word	0x1000ab38
    f60c:	1000ab4c 	.word	0x1000ab4c

0000f610 <vTaskPlaceOnEventList>:
{
    f610:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxEventList );
    f612:	b320      	cbz	r0, f65e <vTaskPlaceOnEventList+0x4e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f614:	4d1f      	ldr	r5, [pc, #124]	@ (f694 <vTaskPlaceOnEventList+0x84>)
    f616:	460c      	mov	r4, r1
    f618:	6829      	ldr	r1, [r5, #0]
    f61a:	3118      	adds	r1, #24
    f61c:	f7fe fa70 	bl	db00 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
    f620:	4b1d      	ldr	r3, [pc, #116]	@ (f698 <vTaskPlaceOnEventList+0x88>)
    f622:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f624:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f626:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f628:	2200      	movs	r2, #0
    f62a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f62e:	3004      	adds	r0, #4
    f630:	f7fe fa7e 	bl	db30 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    f634:	1c63      	adds	r3, r4, #1
    f636:	d00b      	beq.n	f650 <vTaskPlaceOnEventList+0x40>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f638:	682b      	ldr	r3, [r5, #0]
    f63a:	19a4      	adds	r4, r4, r6
    f63c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    f63e:	d31d      	bcc.n	f67c <vTaskPlaceOnEventList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f640:	4b16      	ldr	r3, [pc, #88]	@ (f69c <vTaskPlaceOnEventList+0x8c>)
    f642:	6818      	ldr	r0, [r3, #0]
    f644:	6829      	ldr	r1, [r5, #0]
}
    f646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f64a:	3104      	adds	r1, #4
    f64c:	f7fe ba58 	b.w	db00 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f650:	6829      	ldr	r1, [r5, #0]
    f652:	4813      	ldr	r0, [pc, #76]	@ (f6a0 <vTaskPlaceOnEventList+0x90>)
}
    f654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f658:	3104      	adds	r1, #4
    f65a:	f7fe ba43 	b.w	dae4 <vListInsertEnd>
    f65e:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f662:	f383 8811 	msr	BASEPRI, r3
    f666:	f3bf 8f6f 	isb	sy
    f66a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
    f66e:	490d      	ldr	r1, [pc, #52]	@ (f6a4 <vTaskPlaceOnEventList+0x94>)
    f670:	480d      	ldr	r0, [pc, #52]	@ (f6a8 <vTaskPlaceOnEventList+0x98>)
    f672:	f640 329f 	movw	r2, #2975	@ 0xb9f
    f676:	f001 fcf7 	bl	11068 <am_util_stdio_printf>
    f67a:	e7fe      	b.n	f67a <vTaskPlaceOnEventList+0x6a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f67c:	4b0b      	ldr	r3, [pc, #44]	@ (f6ac <vTaskPlaceOnEventList+0x9c>)
    f67e:	6818      	ldr	r0, [r3, #0]
    f680:	6829      	ldr	r1, [r5, #0]
    f682:	3104      	adds	r1, #4
    f684:	f7fe fa3c 	bl	db00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    f688:	4b09      	ldr	r3, [pc, #36]	@ (f6b0 <vTaskPlaceOnEventList+0xa0>)
    f68a:	681a      	ldr	r2, [r3, #0]
    f68c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
    f68e:	bf38      	it	cc
    f690:	601c      	strcc	r4, [r3, #0]
}
    f692:	bd70      	pop	{r4, r5, r6, pc}
    f694:	1000ac74 	.word	0x1000ac74
    f698:	1000ab5c 	.word	0x1000ab5c
    f69c:	1000aba4 	.word	0x1000aba4
    f6a0:	1000ab64 	.word	0x1000ab64
    f6a4:	0002a4bc 	.word	0x0002a4bc
    f6a8:	0002a268 	.word	0x0002a268
    f6ac:	1000aba8 	.word	0x1000aba8
    f6b0:	1000ab40 	.word	0x1000ab40

0000f6b4 <vTaskPlaceOnUnorderedEventList>:
{
    f6b4:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxEventList );
    f6b6:	2800      	cmp	r0, #0
    f6b8:	d03f      	beq.n	f73a <vTaskPlaceOnUnorderedEventList+0x86>
	configASSERT( uxSchedulerSuspended != 0 );
    f6ba:	4b2b      	ldr	r3, [pc, #172]	@ (f768 <vTaskPlaceOnUnorderedEventList+0xb4>)
    f6bc:	681b      	ldr	r3, [r3, #0]
    f6be:	b30b      	cbz	r3, f704 <vTaskPlaceOnUnorderedEventList+0x50>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    f6c0:	4d2a      	ldr	r5, [pc, #168]	@ (f76c <vTaskPlaceOnUnorderedEventList+0xb8>)
    f6c2:	682b      	ldr	r3, [r5, #0]
    f6c4:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
    f6c8:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f6ca:	6829      	ldr	r1, [r5, #0]
    f6cc:	3118      	adds	r1, #24
    f6ce:	4614      	mov	r4, r2
    f6d0:	f7fe fa08 	bl	dae4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
    f6d4:	4b26      	ldr	r3, [pc, #152]	@ (f770 <vTaskPlaceOnUnorderedEventList+0xbc>)
    f6d6:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f6d8:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f6da:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f6dc:	2200      	movs	r2, #0
    f6de:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f6e2:	3004      	adds	r0, #4
    f6e4:	f7fe fa24 	bl	db30 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    f6e8:	1c63      	adds	r3, r4, #1
    f6ea:	d035      	beq.n	f758 <vTaskPlaceOnUnorderedEventList+0xa4>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f6ec:	682b      	ldr	r3, [r5, #0]
    f6ee:	19a4      	adds	r4, r4, r6
    f6f0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    f6f2:	d316      	bcc.n	f722 <vTaskPlaceOnUnorderedEventList+0x6e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f6f4:	4b1f      	ldr	r3, [pc, #124]	@ (f774 <vTaskPlaceOnUnorderedEventList+0xc0>)
    f6f6:	6818      	ldr	r0, [r3, #0]
    f6f8:	6829      	ldr	r1, [r5, #0]
}
    f6fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f6fe:	3104      	adds	r1, #4
    f700:	f7fe b9fe 	b.w	db00 <vListInsert>
    f704:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f708:	f383 8811 	msr	BASEPRI, r3
    f70c:	f3bf 8f6f 	isb	sy
    f710:	f3bf 8f4f 	dsb	sy
	configASSERT( uxSchedulerSuspended != 0 );
    f714:	4918      	ldr	r1, [pc, #96]	@ (f778 <vTaskPlaceOnUnorderedEventList+0xc4>)
    f716:	4819      	ldr	r0, [pc, #100]	@ (f77c <vTaskPlaceOnUnorderedEventList+0xc8>)
    f718:	f640 32b4 	movw	r2, #2996	@ 0xbb4
    f71c:	f001 fca4 	bl	11068 <am_util_stdio_printf>
    f720:	e7fe      	b.n	f720 <vTaskPlaceOnUnorderedEventList+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f722:	4b17      	ldr	r3, [pc, #92]	@ (f780 <vTaskPlaceOnUnorderedEventList+0xcc>)
    f724:	6818      	ldr	r0, [r3, #0]
    f726:	6829      	ldr	r1, [r5, #0]
    f728:	3104      	adds	r1, #4
    f72a:	f7fe f9e9 	bl	db00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    f72e:	4b15      	ldr	r3, [pc, #84]	@ (f784 <vTaskPlaceOnUnorderedEventList+0xd0>)
    f730:	681a      	ldr	r2, [r3, #0]
    f732:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
    f734:	bf38      	it	cc
    f736:	601c      	strcc	r4, [r3, #0]
}
    f738:	bd70      	pop	{r4, r5, r6, pc}
    f73a:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f73e:	f383 8811 	msr	BASEPRI, r3
    f742:	f3bf 8f6f 	isb	sy
    f746:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
    f74a:	490b      	ldr	r1, [pc, #44]	@ (f778 <vTaskPlaceOnUnorderedEventList+0xc4>)
    f74c:	480b      	ldr	r0, [pc, #44]	@ (f77c <vTaskPlaceOnUnorderedEventList+0xc8>)
    f74e:	f44f 623b 	mov.w	r2, #2992	@ 0xbb0
    f752:	f001 fc89 	bl	11068 <am_util_stdio_printf>
    f756:	e7fe      	b.n	f756 <vTaskPlaceOnUnorderedEventList+0xa2>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f758:	6829      	ldr	r1, [r5, #0]
    f75a:	480b      	ldr	r0, [pc, #44]	@ (f788 <vTaskPlaceOnUnorderedEventList+0xd4>)
}
    f75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f760:	3104      	adds	r1, #4
    f762:	f7fe b9bf 	b.w	dae4 <vListInsertEnd>
    f766:	bf00      	nop
    f768:	1000ab38 	.word	0x1000ab38
    f76c:	1000ac74 	.word	0x1000ac74
    f770:	1000ab5c 	.word	0x1000ab5c
    f774:	1000aba4 	.word	0x1000aba4
    f778:	0002a4bc 	.word	0x0002a4bc
    f77c:	0002a268 	.word	0x0002a268
    f780:	1000aba8 	.word	0x1000aba8
    f784:	1000ab40 	.word	0x1000ab40
    f788:	1000ab64 	.word	0x1000ab64

0000f78c <vTaskPlaceOnEventListRestricted>:
	{
    f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
    f78e:	2800      	cmp	r0, #0
    f790:	d038      	beq.n	f804 <vTaskPlaceOnEventListRestricted+0x78>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f792:	4d24      	ldr	r5, [pc, #144]	@ (f824 <vTaskPlaceOnEventListRestricted+0x98>)
    f794:	460c      	mov	r4, r1
    f796:	6829      	ldr	r1, [r5, #0]
    f798:	4616      	mov	r6, r2
    f79a:	3118      	adds	r1, #24
    f79c:	f7fe f9a2 	bl	dae4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
    f7a0:	4b21      	ldr	r3, [pc, #132]	@ (f828 <vTaskPlaceOnEventListRestricted+0x9c>)
		if( xWaitIndefinitely != pdFALSE )
    f7a2:	b17e      	cbz	r6, f7c4 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
    f7a4:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f7a6:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f7a8:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f7aa:	2200      	movs	r2, #0
    f7ac:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f7b0:	3004      	adds	r0, #4
    f7b2:	f7fe f9bd 	bl	db30 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f7b6:	6829      	ldr	r1, [r5, #0]
    f7b8:	481c      	ldr	r0, [pc, #112]	@ (f82c <vTaskPlaceOnEventListRestricted+0xa0>)
	}
    f7ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f7be:	3104      	adds	r1, #4
    f7c0:	f7fe b990 	b.w	dae4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
    f7c4:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f7c6:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f7c8:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
    f7ca:	f883 6069 	strb.w	r6, [r3, #105]	@ 0x69
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f7ce:	3004      	adds	r0, #4
    f7d0:	f7fe f9ae 	bl	db30 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f7d4:	682b      	ldr	r3, [r5, #0]
    f7d6:	19e4      	adds	r4, r4, r7
    f7d8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    f7da:	d307      	bcc.n	f7ec <vTaskPlaceOnEventListRestricted+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f7dc:	4b14      	ldr	r3, [pc, #80]	@ (f830 <vTaskPlaceOnEventListRestricted+0xa4>)
    f7de:	6818      	ldr	r0, [r3, #0]
    f7e0:	6829      	ldr	r1, [r5, #0]
	}
    f7e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f7e6:	3104      	adds	r1, #4
    f7e8:	f7fe b98a 	b.w	db00 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f7ec:	4b11      	ldr	r3, [pc, #68]	@ (f834 <vTaskPlaceOnEventListRestricted+0xa8>)
    f7ee:	6818      	ldr	r0, [r3, #0]
    f7f0:	6829      	ldr	r1, [r5, #0]
    f7f2:	3104      	adds	r1, #4
    f7f4:	f7fe f984 	bl	db00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    f7f8:	4b0f      	ldr	r3, [pc, #60]	@ (f838 <vTaskPlaceOnEventListRestricted+0xac>)
    f7fa:	681a      	ldr	r2, [r3, #0]
    f7fc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
    f7fe:	bf38      	it	cc
    f800:	601c      	strcc	r4, [r3, #0]
	}
    f802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f804:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f808:	f383 8811 	msr	BASEPRI, r3
    f80c:	f3bf 8f6f 	isb	sy
    f810:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
    f814:	4909      	ldr	r1, [pc, #36]	@ (f83c <vTaskPlaceOnEventListRestricted+0xb0>)
    f816:	480a      	ldr	r0, [pc, #40]	@ (f840 <vTaskPlaceOnEventListRestricted+0xb4>)
    f818:	f640 32ca 	movw	r2, #3018	@ 0xbca
    f81c:	f001 fc24 	bl	11068 <am_util_stdio_printf>
    f820:	e7fe      	b.n	f820 <vTaskPlaceOnEventListRestricted+0x94>
    f822:	bf00      	nop
    f824:	1000ac74 	.word	0x1000ac74
    f828:	1000ab5c 	.word	0x1000ab5c
    f82c:	1000ab64 	.word	0x1000ab64
    f830:	1000aba4 	.word	0x1000aba4
    f834:	1000aba8 	.word	0x1000aba8
    f838:	1000ab40 	.word	0x1000ab40
    f83c:	0002a4bc 	.word	0x0002a4bc
    f840:	0002a268 	.word	0x0002a268

0000f844 <xTaskRemoveFromEventList>:
{
    f844:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f846:	68c3      	ldr	r3, [r0, #12]
    f848:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    f84a:	2c00      	cmp	r4, #0
    f84c:	d039      	beq.n	f8c2 <xTaskRemoveFromEventList+0x7e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    f84e:	f104 0518 	add.w	r5, r4, #24
    f852:	4628      	mov	r0, r5
    f854:	f7fe f96c 	bl	db30 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f858:	4b21      	ldr	r3, [pc, #132]	@ (f8e0 <xTaskRemoveFromEventList+0x9c>)
    f85a:	681b      	ldr	r3, [r3, #0]
    f85c:	b1bb      	cbz	r3, f88e <xTaskRemoveFromEventList+0x4a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    f85e:	4821      	ldr	r0, [pc, #132]	@ (f8e4 <xTaskRemoveFromEventList+0xa0>)
    f860:	4629      	mov	r1, r5
    f862:	f7fe f93f 	bl	dae4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    f866:	4b20      	ldr	r3, [pc, #128]	@ (f8e8 <xTaskRemoveFromEventList+0xa4>)
    f868:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    f86a:	681b      	ldr	r3, [r3, #0]
    f86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f86e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    f870:	bf82      	ittt	hi
    f872:	4b1e      	ldrhi	r3, [pc, #120]	@ (f8ec <xTaskRemoveFromEventList+0xa8>)
    f874:	2001      	movhi	r0, #1
    f876:	6018      	strhi	r0, [r3, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f878:	4b1d      	ldr	r3, [pc, #116]	@ (f8f0 <xTaskRemoveFromEventList+0xac>)
    f87a:	681a      	ldr	r2, [r3, #0]
    f87c:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFALSE;
    f87e:	bf98      	it	ls
    f880:	2000      	movls	r0, #0
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f882:	b9ba      	cbnz	r2, f8b4 <xTaskRemoveFromEventList+0x70>
		xNextTaskUnblockTime = portMAX_DELAY;
    f884:	4b1b      	ldr	r3, [pc, #108]	@ (f8f4 <xTaskRemoveFromEventList+0xb0>)
    f886:	f04f 32ff 	mov.w	r2, #4294967295
    f88a:	601a      	str	r2, [r3, #0]
}
    f88c:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f88e:	1d25      	adds	r5, r4, #4
    f890:	4628      	mov	r0, r5
    f892:	f7fe f94d 	bl	db30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    f896:	4a18      	ldr	r2, [pc, #96]	@ (f8f8 <xTaskRemoveFromEventList+0xb4>)
    f898:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    f89a:	6811      	ldr	r1, [r2, #0]
    f89c:	4817      	ldr	r0, [pc, #92]	@ (f8fc <xTaskRemoveFromEventList+0xb8>)
    f89e:	428b      	cmp	r3, r1
    f8a0:	bf88      	it	hi
    f8a2:	6013      	strhi	r3, [r2, #0]
    f8a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f8a8:	4629      	mov	r1, r5
    f8aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    f8ae:	f7fe f919 	bl	dae4 <vListInsertEnd>
    f8b2:	e7d8      	b.n	f866 <xTaskRemoveFromEventList+0x22>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f8b4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f8b6:	4b0f      	ldr	r3, [pc, #60]	@ (f8f4 <xTaskRemoveFromEventList+0xb0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f8b8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f8ba:	68d2      	ldr	r2, [r2, #12]
    f8bc:	6852      	ldr	r2, [r2, #4]
    f8be:	601a      	str	r2, [r3, #0]
}
    f8c0:	bd38      	pop	{r3, r4, r5, pc}
    f8c2:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f8c6:	f383 8811 	msr	BASEPRI, r3
    f8ca:	f3bf 8f6f 	isb	sy
    f8ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
    f8d2:	490b      	ldr	r1, [pc, #44]	@ (f900 <xTaskRemoveFromEventList+0xbc>)
    f8d4:	480b      	ldr	r0, [pc, #44]	@ (f904 <xTaskRemoveFromEventList+0xc0>)
    f8d6:	f640 32fa 	movw	r2, #3066	@ 0xbfa
    f8da:	f001 fbc5 	bl	11068 <am_util_stdio_printf>
    f8de:	e7fe      	b.n	f8de <xTaskRemoveFromEventList+0x9a>
    f8e0:	1000ab38 	.word	0x1000ab38
    f8e4:	1000ab90 	.word	0x1000ab90
    f8e8:	1000ac74 	.word	0x1000ac74
    f8ec:	1000ab4c 	.word	0x1000ab4c
    f8f0:	1000aba8 	.word	0x1000aba8
    f8f4:	1000ab40 	.word	0x1000ab40
    f8f8:	1000ab58 	.word	0x1000ab58
    f8fc:	1000abd4 	.word	0x1000abd4
    f900:	0002a4bc 	.word	0x0002a4bc
    f904:	0002a268 	.word	0x0002a268

0000f908 <vTaskRemoveFromUnorderedEventList>:
{
    f908:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
    f90a:	4b22      	ldr	r3, [pc, #136]	@ (f994 <vTaskRemoveFromUnorderedEventList+0x8c>)
    f90c:	681a      	ldr	r2, [r3, #0]
    f90e:	2a00      	cmp	r2, #0
    f910:	d031      	beq.n	f976 <vTaskRemoveFromUnorderedEventList+0x6e>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    f912:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    f914:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
    f918:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
    f91a:	b1ec      	cbz	r4, f958 <vTaskRemoveFromUnorderedEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f91c:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
    f91e:	f7fe f907 	bl	db30 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f922:	4628      	mov	r0, r5
    f924:	f7fe f904 	bl	db30 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    f928:	4a1b      	ldr	r2, [pc, #108]	@ (f998 <vTaskRemoveFromUnorderedEventList+0x90>)
    f92a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    f92c:	6811      	ldr	r1, [r2, #0]
    f92e:	481b      	ldr	r0, [pc, #108]	@ (f99c <vTaskRemoveFromUnorderedEventList+0x94>)
    f930:	428b      	cmp	r3, r1
    f932:	bf88      	it	hi
    f934:	6013      	strhi	r3, [r2, #0]
    f936:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f93a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    f93e:	4629      	mov	r1, r5
    f940:	f7fe f8d0 	bl	dae4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    f944:	4b16      	ldr	r3, [pc, #88]	@ (f9a0 <vTaskRemoveFromUnorderedEventList+0x98>)
    f946:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    f948:	681b      	ldr	r3, [r3, #0]
    f94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    f94c:	429a      	cmp	r2, r3
    f94e:	d902      	bls.n	f956 <vTaskRemoveFromUnorderedEventList+0x4e>
		xYieldPending = pdTRUE;
    f950:	4b14      	ldr	r3, [pc, #80]	@ (f9a4 <vTaskRemoveFromUnorderedEventList+0x9c>)
    f952:	2201      	movs	r2, #1
    f954:	601a      	str	r2, [r3, #0]
}
    f956:	bd38      	pop	{r3, r4, r5, pc}
    f958:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f95c:	f383 8811 	msr	BASEPRI, r3
    f960:	f3bf 8f6f 	isb	sy
    f964:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
    f968:	490f      	ldr	r1, [pc, #60]	@ (f9a8 <vTaskRemoveFromUnorderedEventList+0xa0>)
    f96a:	4810      	ldr	r0, [pc, #64]	@ (f9ac <vTaskRemoveFromUnorderedEventList+0xa4>)
    f96c:	f640 4239 	movw	r2, #3129	@ 0xc39
    f970:	f001 fb7a 	bl	11068 <am_util_stdio_printf>
    f974:	e7fe      	b.n	f974 <vTaskRemoveFromUnorderedEventList+0x6c>
    f976:	f04f 0380 	mov.w	r3, #128	@ 0x80
    f97a:	f383 8811 	msr	BASEPRI, r3
    f97e:	f3bf 8f6f 	isb	sy
    f982:	f3bf 8f4f 	dsb	sy
	configASSERT( uxSchedulerSuspended != pdFALSE );
    f986:	4908      	ldr	r1, [pc, #32]	@ (f9a8 <vTaskRemoveFromUnorderedEventList+0xa0>)
    f988:	4808      	ldr	r0, [pc, #32]	@ (f9ac <vTaskRemoveFromUnorderedEventList+0xa4>)
    f98a:	f640 4231 	movw	r2, #3121	@ 0xc31
    f98e:	f001 fb6b 	bl	11068 <am_util_stdio_printf>
    f992:	e7fe      	b.n	f992 <vTaskRemoveFromUnorderedEventList+0x8a>
    f994:	1000ab38 	.word	0x1000ab38
    f998:	1000ab58 	.word	0x1000ab58
    f99c:	1000abd4 	.word	0x1000abd4
    f9a0:	1000ac74 	.word	0x1000ac74
    f9a4:	1000ab4c 	.word	0x1000ab4c
    f9a8:	0002a4bc 	.word	0x0002a4bc
    f9ac:	0002a268 	.word	0x0002a268

0000f9b0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    f9b0:	4a03      	ldr	r2, [pc, #12]	@ (f9c0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
    f9b2:	4b04      	ldr	r3, [pc, #16]	@ (f9c4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    f9b4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    f9b6:	681b      	ldr	r3, [r3, #0]
    f9b8:	e9c0 2300 	strd	r2, r3, [r0]
}
    f9bc:	4770      	bx	lr
    f9be:	bf00      	nop
    f9c0:	1000ab48 	.word	0x1000ab48
    f9c4:	1000ab5c 	.word	0x1000ab5c

0000f9c8 <xTaskCheckForTimeOut>:
{
    f9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d03e      	beq.n	fa4c <xTaskCheckForTimeOut+0x84>
	configASSERT( pxTicksToWait );
    f9ce:	460d      	mov	r5, r1
    f9d0:	b369      	cbz	r1, fa2e <xTaskCheckForTimeOut+0x66>
	taskENTER_CRITICAL();
    f9d2:	4604      	mov	r4, r0
    f9d4:	f7fd fb76 	bl	d0c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
    f9d8:	4a25      	ldr	r2, [pc, #148]	@ (fa70 <xTaskCheckForTimeOut+0xa8>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
    f9da:	4b26      	ldr	r3, [pc, #152]	@ (fa74 <xTaskCheckForTimeOut+0xac>)
		const TickType_t xConstTickCount = xTickCount;
    f9dc:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
    f9de:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    f9e0:	6860      	ldr	r0, [r4, #4]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
    f9e2:	f891 1069 	ldrb.w	r1, [r1, #105]	@ 0x69
    f9e6:	b141      	cbz	r1, f9fa <xTaskCheckForTimeOut+0x32>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
    f9e8:	681b      	ldr	r3, [r3, #0]
    f9ea:	2200      	movs	r2, #0
    f9ec:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
				xReturn = pdTRUE;
    f9f0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    f9f2:	f7fd fb93 	bl	d11c <vPortExitCritical>
}
    f9f6:	4620      	mov	r0, r4
    f9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( *pxTicksToWait == portMAX_DELAY )
    f9fa:	682b      	ldr	r3, [r5, #0]
    f9fc:	1c59      	adds	r1, r3, #1
    f9fe:	d014      	beq.n	fa2a <xTaskCheckForTimeOut+0x62>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    fa00:	f8df e07c 	ldr.w	lr, [pc, #124]	@ fa80 <xTaskCheckForTimeOut+0xb8>
    fa04:	6821      	ldr	r1, [r4, #0]
    fa06:	f8de 7000 	ldr.w	r7, [lr]
    fa0a:	42b9      	cmp	r1, r7
    fa0c:	d001      	beq.n	fa12 <xTaskCheckForTimeOut+0x4a>
    fa0e:	42b0      	cmp	r0, r6
    fa10:	d9ee      	bls.n	f9f0 <xTaskCheckForTimeOut+0x28>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    fa12:	eba6 0c00 	sub.w	ip, r6, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    fa16:	4563      	cmp	r3, ip
    fa18:	d927      	bls.n	fa6a <xTaskCheckForTimeOut+0xa2>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    fa1a:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
    fa1e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
    fa20:	1b9b      	subs	r3, r3, r6
    fa22:	4403      	add	r3, r0
    fa24:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    fa26:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
    fa2a:	2400      	movs	r4, #0
    fa2c:	e7e1      	b.n	f9f2 <xTaskCheckForTimeOut+0x2a>
    fa2e:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fa32:	f383 8811 	msr	BASEPRI, r3
    fa36:	f3bf 8f6f 	isb	sy
    fa3a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
    fa3e:	490e      	ldr	r1, [pc, #56]	@ (fa78 <xTaskCheckForTimeOut+0xb0>)
    fa40:	480e      	ldr	r0, [pc, #56]	@ (fa7c <xTaskCheckForTimeOut+0xb4>)
    fa42:	f640 4266 	movw	r2, #3174	@ 0xc66
    fa46:	f001 fb0f 	bl	11068 <am_util_stdio_printf>
    fa4a:	e7fe      	b.n	fa4a <xTaskCheckForTimeOut+0x82>
    fa4c:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fa50:	f383 8811 	msr	BASEPRI, r3
    fa54:	f3bf 8f6f 	isb	sy
    fa58:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
    fa5c:	4906      	ldr	r1, [pc, #24]	@ (fa78 <xTaskCheckForTimeOut+0xb0>)
    fa5e:	4807      	ldr	r0, [pc, #28]	@ (fa7c <xTaskCheckForTimeOut+0xb4>)
    fa60:	f640 4265 	movw	r2, #3173	@ 0xc65
    fa64:	f001 fb00 	bl	11068 <am_util_stdio_printf>
    fa68:	e7fe      	b.n	fa68 <xTaskCheckForTimeOut+0xa0>
			*pxTicksToWait = 0;
    fa6a:	2300      	movs	r3, #0
    fa6c:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    fa6e:	e7bf      	b.n	f9f0 <xTaskCheckForTimeOut+0x28>
    fa70:	1000ab5c 	.word	0x1000ab5c
    fa74:	1000ac74 	.word	0x1000ac74
    fa78:	0002a4bc 	.word	0x0002a4bc
    fa7c:	0002a268 	.word	0x0002a268
    fa80:	1000ab48 	.word	0x1000ab48

0000fa84 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    fa84:	4b01      	ldr	r3, [pc, #4]	@ (fa8c <vTaskMissedYield+0x8>)
    fa86:	2201      	movs	r2, #1
    fa88:	601a      	str	r2, [r3, #0]
}
    fa8a:	4770      	bx	lr
    fa8c:	1000ab4c 	.word	0x1000ab4c

0000fa90 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
    fa90:	4b09      	ldr	r3, [pc, #36]	@ (fab8 <eTaskConfirmSleepModeStatus+0x28>)
    fa92:	6818      	ldr	r0, [r3, #0]
    fa94:	b918      	cbnz	r0, fa9e <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
    fa96:	4b09      	ldr	r3, [pc, #36]	@ (fabc <eTaskConfirmSleepModeStatus+0x2c>)
    fa98:	681b      	ldr	r3, [r3, #0]
    fa9a:	b113      	cbz	r3, faa2 <eTaskConfirmSleepModeStatus+0x12>
	}
    fa9c:	4770      	bx	lr
			eReturn = eAbortSleep;
    fa9e:	2000      	movs	r0, #0
	}
    faa0:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
    faa2:	4a07      	ldr	r2, [pc, #28]	@ (fac0 <eTaskConfirmSleepModeStatus+0x30>)
    faa4:	4b07      	ldr	r3, [pc, #28]	@ (fac4 <eTaskConfirmSleepModeStatus+0x34>)
    faa6:	6810      	ldr	r0, [r2, #0]
    faa8:	681b      	ldr	r3, [r3, #0]
    faaa:	3b01      	subs	r3, #1
	eSleepModeStatus eReturn = eStandardSleep;
    faac:	4298      	cmp	r0, r3
    faae:	bf0c      	ite	eq
    fab0:	2002      	moveq	r0, #2
    fab2:	2001      	movne	r0, #1
    fab4:	4770      	bx	lr
    fab6:	bf00      	nop
    fab8:	1000ab90 	.word	0x1000ab90
    fabc:	1000ab4c 	.word	0x1000ab4c
    fac0:	1000ab64 	.word	0x1000ab64
    fac4:	1000ab60 	.word	0x1000ab60

0000fac8 <vTaskGetInfo>:
	{
    fac8:	b570      	push	{r4, r5, r6, lr}
    faca:	460c      	mov	r4, r1
    facc:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
    face:	b368      	cbz	r0, fb2c <vTaskGetInfo+0x64>
    fad0:	4605      	mov	r5, r0
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
    fad2:	f105 0134 	add.w	r1, r5, #52	@ 0x34
    fad6:	e9c4 5100 	strd	r5, r1, [r4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
    fada:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
    fadc:	6121      	str	r1, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
    fade:	6b29      	ldr	r1, [r5, #48]	@ 0x30
    fae0:	61e1      	str	r1, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
    fae2:	6d69      	ldr	r1, [r5, #84]	@ 0x54
    fae4:	60a1      	str	r1, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
    fae6:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
    fae8:	6161      	str	r1, [r4, #20]
		if( eState != eInvalid )
    faea:	2b05      	cmp	r3, #5
			pxTaskStatus->ulRunTimeCounter = 0;
    faec:	f04f 0100 	mov.w	r1, #0
    faf0:	61a1      	str	r1, [r4, #24]
		if( eState != eInvalid )
    faf2:	d022      	beq.n	fb3a <vTaskGetInfo+0x72>
			if( pxTCB == pxCurrentTCB )
    faf4:	4a25      	ldr	r2, [pc, #148]	@ (fb8c <vTaskGetInfo+0xc4>)
    faf6:	6812      	ldr	r2, [r2, #0]
    faf8:	42aa      	cmp	r2, r5
    fafa:	d01a      	beq.n	fb32 <vTaskGetInfo+0x6a>
					if( eState == eSuspended )
    fafc:	2b03      	cmp	r3, #3
				pxTaskStatus->eCurrentState = eState;
    fafe:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
    fb00:	d022      	beq.n	fb48 <vTaskGetInfo+0x80>
		if( xGetFreeStackSpace != pdFALSE )
    fb02:	b186      	cbz	r6, fb26 <vTaskGetInfo+0x5e>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    fb04:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    fb06:	7813      	ldrb	r3, [r2, #0]
    fb08:	2ba5      	cmp	r3, #165	@ 0xa5
    fb0a:	d13c      	bne.n	fb86 <vTaskGetInfo+0xbe>
    fb0c:	4613      	mov	r3, r2
    fb0e:	4618      	mov	r0, r3
    fb10:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    fb14:	29a5      	cmp	r1, #165	@ 0xa5
    fb16:	d0fa      	beq.n	fb0e <vTaskGetInfo+0x46>
			ulCount++;
    fb18:	f1c2 0201 	rsb	r2, r2, #1
    fb1c:	4402      	add	r2, r0
		return ( configSTACK_DEPTH_TYPE ) ulCount;
    fb1e:	f3c2 028f 	ubfx	r2, r2, #2, #16
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    fb22:	8422      	strh	r2, [r4, #32]
	}
    fb24:	bd70      	pop	{r4, r5, r6, pc}
    fb26:	4632      	mov	r2, r6
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    fb28:	8422      	strh	r2, [r4, #32]
	}
    fb2a:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
    fb2c:	4a17      	ldr	r2, [pc, #92]	@ (fb8c <vTaskGetInfo+0xc4>)
    fb2e:	6815      	ldr	r5, [r2, #0]
    fb30:	e7cf      	b.n	fad2 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
    fb32:	7321      	strb	r1, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
    fb34:	2e00      	cmp	r6, #0
    fb36:	d0f6      	beq.n	fb26 <vTaskGetInfo+0x5e>
    fb38:	e7e4      	b.n	fb04 <vTaskGetInfo+0x3c>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
    fb3a:	4628      	mov	r0, r5
    fb3c:	f7ff f8b6 	bl	ecac <eTaskGetState>
    fb40:	7320      	strb	r0, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
    fb42:	2e00      	cmp	r6, #0
    fb44:	d0ef      	beq.n	fb26 <vTaskGetInfo+0x5e>
    fb46:	e7dd      	b.n	fb04 <vTaskGetInfo+0x3c>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    fb48:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
	++uxSchedulerSuspended;
    fb4a:	4a11      	ldr	r2, [pc, #68]	@ (fb90 <vTaskGetInfo+0xc8>)
								pxTaskStatus->eCurrentState = eBlocked;
    fb4c:	2900      	cmp	r1, #0
    fb4e:	bf18      	it	ne
    fb50:	2302      	movne	r3, #2
    fb52:	7323      	strb	r3, [r4, #12]
	++uxSchedulerSuspended;
    fb54:	6813      	ldr	r3, [r2, #0]
    fb56:	3301      	adds	r3, #1
    fb58:	6013      	str	r3, [r2, #0]
	configASSERT( uxSchedulerSuspended );
    fb5a:	6813      	ldr	r3, [r2, #0]
    fb5c:	b973      	cbnz	r3, fb7c <vTaskGetInfo+0xb4>
    fb5e:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fb62:	f383 8811 	msr	BASEPRI, r3
    fb66:	f3bf 8f6f 	isb	sy
    fb6a:	f3bf 8f4f 	dsb	sy
    fb6e:	4909      	ldr	r1, [pc, #36]	@ (fb94 <vTaskGetInfo+0xcc>)
    fb70:	4809      	ldr	r0, [pc, #36]	@ (fb98 <vTaskGetInfo+0xd0>)
    fb72:	f640 0268 	movw	r2, #2152	@ 0x868
    fb76:	f001 fa77 	bl	11068 <am_util_stdio_printf>
    fb7a:	e7fe      	b.n	fb7a <vTaskGetInfo+0xb2>
    fb7c:	f7ff fad6 	bl	f12c <xTaskResumeAll.part.0>
		if( xGetFreeStackSpace != pdFALSE )
    fb80:	2e00      	cmp	r6, #0
    fb82:	d0d0      	beq.n	fb26 <vTaskGetInfo+0x5e>
    fb84:	e7be      	b.n	fb04 <vTaskGetInfo+0x3c>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    fb86:	2200      	movs	r2, #0
		return ( configSTACK_DEPTH_TYPE ) ulCount;
    fb88:	e7ce      	b.n	fb28 <vTaskGetInfo+0x60>
    fb8a:	bf00      	nop
    fb8c:	1000ac74 	.word	0x1000ac74
    fb90:	1000ab38 	.word	0x1000ab38
    fb94:	0002a4bc 	.word	0x0002a4bc
    fb98:	0002a268 	.word	0x0002a268

0000fb9c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    fb9c:	4b05      	ldr	r3, [pc, #20]	@ (fbb4 <xTaskGetSchedulerState+0x18>)
    fb9e:	681b      	ldr	r3, [r3, #0]
    fba0:	b133      	cbz	r3, fbb0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    fba2:	4b05      	ldr	r3, [pc, #20]	@ (fbb8 <xTaskGetSchedulerState+0x1c>)
    fba4:	6818      	ldr	r0, [r3, #0]
    fba6:	fab0 f080 	clz	r0, r0
    fbaa:	0940      	lsrs	r0, r0, #5
    fbac:	0040      	lsls	r0, r0, #1
    fbae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
    fbb0:	2001      	movs	r0, #1
	}
    fbb2:	4770      	bx	lr
    fbb4:	1000ab54 	.word	0x1000ab54
    fbb8:	1000ab38 	.word	0x1000ab38

0000fbbc <xTaskPriorityInherit>:
	{
    fbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
    fbbe:	4604      	mov	r4, r0
    fbc0:	b1c8      	cbz	r0, fbf6 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    fbc2:	4d1b      	ldr	r5, [pc, #108]	@ (fc30 <xTaskPriorityInherit+0x74>)
    fbc4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    fbc6:	682a      	ldr	r2, [r5, #0]
    fbc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    fbca:	4293      	cmp	r3, r2
    fbcc:	d214      	bcs.n	fbf8 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fbce:	6982      	ldr	r2, [r0, #24]
    fbd0:	2a00      	cmp	r2, #0
    fbd2:	db04      	blt.n	fbde <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fbd4:	682a      	ldr	r2, [r5, #0]
    fbd6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    fbd8:	f1c2 0208 	rsb	r2, r2, #8
    fbdc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    fbde:	4e15      	ldr	r6, [pc, #84]	@ (fc34 <xTaskPriorityInherit+0x78>)
    fbe0:	6962      	ldr	r2, [r4, #20]
    fbe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fbe6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    fbea:	429a      	cmp	r2, r3
    fbec:	d00c      	beq.n	fc08 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    fbee:	682b      	ldr	r3, [r5, #0]
    fbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    fbf2:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
    fbf4:	2001      	movs	r0, #1
	}
    fbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    fbf8:	682b      	ldr	r3, [r5, #0]
    fbfa:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
    fbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    fbfe:	4298      	cmp	r0, r3
    fc00:	bf2c      	ite	cs
    fc02:	2000      	movcs	r0, #0
    fc04:	2001      	movcc	r0, #1
	}
    fc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fc08:	1d27      	adds	r7, r4, #4
    fc0a:	4638      	mov	r0, r7
    fc0c:	f7fd ff90 	bl	db30 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    fc10:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
    fc12:	4b09      	ldr	r3, [pc, #36]	@ (fc38 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    fc14:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    fc16:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    fc18:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    fc1a:	4290      	cmp	r0, r2
    fc1c:	bf88      	it	hi
    fc1e:	6018      	strhi	r0, [r3, #0]
    fc20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fc24:	4639      	mov	r1, r7
    fc26:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    fc2a:	f7fd ff5b 	bl	dae4 <vListInsertEnd>
    fc2e:	e7e1      	b.n	fbf4 <xTaskPriorityInherit+0x38>
    fc30:	1000ac74 	.word	0x1000ac74
    fc34:	1000abd4 	.word	0x1000abd4
    fc38:	1000ab58 	.word	0x1000ab58

0000fc3c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
    fc3c:	b1f0      	cbz	r0, fc7c <xTaskPriorityDisinherit+0x40>
	{
    fc3e:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
    fc40:	4b23      	ldr	r3, [pc, #140]	@ (fcd0 <xTaskPriorityDisinherit+0x94>)
    fc42:	681c      	ldr	r4, [r3, #0]
    fc44:	4284      	cmp	r4, r0
    fc46:	d00e      	beq.n	fc66 <xTaskPriorityDisinherit+0x2a>
    fc48:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fc4c:	f383 8811 	msr	BASEPRI, r3
    fc50:	f3bf 8f6f 	isb	sy
    fc54:	f3bf 8f4f 	dsb	sy
    fc58:	491e      	ldr	r1, [pc, #120]	@ (fcd4 <xTaskPriorityDisinherit+0x98>)
    fc5a:	481f      	ldr	r0, [pc, #124]	@ (fcd8 <xTaskPriorityDisinherit+0x9c>)
    fc5c:	f640 727a 	movw	r2, #3962	@ 0xf7a
    fc60:	f001 fa02 	bl	11068 <am_util_stdio_printf>
    fc64:	e7fe      	b.n	fc64 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
    fc66:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    fc68:	b153      	cbz	r3, fc80 <xTaskPriorityDisinherit+0x44>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    fc6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    fc6c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
			( pxTCB->uxMutexesHeld )--;
    fc6e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    fc70:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
    fc72:	6623      	str	r3, [r4, #96]	@ 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    fc74:	d000      	beq.n	fc78 <xTaskPriorityDisinherit+0x3c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    fc76:	b193      	cbz	r3, fc9e <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
    fc78:	2000      	movs	r0, #0
	}
    fc7a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
    fc7c:	2000      	movs	r0, #0
	}
    fc7e:	4770      	bx	lr
    fc80:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fc84:	f383 8811 	msr	BASEPRI, r3
    fc88:	f3bf 8f6f 	isb	sy
    fc8c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
    fc90:	4910      	ldr	r1, [pc, #64]	@ (fcd4 <xTaskPriorityDisinherit+0x98>)
    fc92:	4811      	ldr	r0, [pc, #68]	@ (fcd8 <xTaskPriorityDisinherit+0x9c>)
    fc94:	f640 727b 	movw	r2, #3963	@ 0xf7b
    fc98:	f001 f9e6 	bl	11068 <am_util_stdio_printf>
    fc9c:	e7fe      	b.n	fc9c <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fc9e:	1d25      	adds	r5, r4, #4
    fca0:	4628      	mov	r0, r5
    fca2:	f7fd ff45 	bl	db30 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    fca6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
					prvAddTaskToReadyList( pxTCB );
    fca8:	4a0c      	ldr	r2, [pc, #48]	@ (fcdc <xTaskPriorityDisinherit+0xa0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    fcaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fcac:	f1c3 0008 	rsb	r0, r3, #8
    fcb0:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    fcb2:	6810      	ldr	r0, [r2, #0]
    fcb4:	4283      	cmp	r3, r0
    fcb6:	480a      	ldr	r0, [pc, #40]	@ (fce0 <xTaskPriorityDisinherit+0xa4>)
    fcb8:	bf88      	it	hi
    fcba:	6013      	strhi	r3, [r2, #0]
    fcbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fcc0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    fcc4:	4629      	mov	r1, r5
    fcc6:	f7fd ff0d 	bl	dae4 <vListInsertEnd>
					xReturn = pdTRUE;
    fcca:	2001      	movs	r0, #1
	}
    fccc:	bd38      	pop	{r3, r4, r5, pc}
    fcce:	bf00      	nop
    fcd0:	1000ac74 	.word	0x1000ac74
    fcd4:	0002a4bc 	.word	0x0002a4bc
    fcd8:	0002a268 	.word	0x0002a268
    fcdc:	1000ab58 	.word	0x1000ab58
    fce0:	1000abd4 	.word	0x1000abd4

0000fce4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
    fce4:	b1e0      	cbz	r0, fd20 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			configASSERT( pxTCB->uxMutexesHeld );
    fce6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
	{
    fce8:	b570      	push	{r4, r5, r6, lr}
    fcea:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
    fcec:	b14b      	cbz	r3, fd02 <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    fcee:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
    fcf0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    fcf2:	4281      	cmp	r1, r0
    fcf4:	bf38      	it	cc
    fcf6:	4601      	movcc	r1, r0
			if( pxTCB->uxPriority != uxPriorityToUse )
    fcf8:	428a      	cmp	r2, r1
    fcfa:	d001      	beq.n	fd00 <vTaskPriorityDisinheritAfterTimeout+0x1c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    fcfc:	2b01      	cmp	r3, #1
    fcfe:	d010      	beq.n	fd22 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	}
    fd00:	bd70      	pop	{r4, r5, r6, pc}
    fd02:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fd06:	f383 8811 	msr	BASEPRI, r3
    fd0a:	f3bf 8f6f 	isb	sy
    fd0e:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
    fd12:	491f      	ldr	r1, [pc, #124]	@ (fd90 <vTaskPriorityDisinheritAfterTimeout+0xac>)
    fd14:	481f      	ldr	r0, [pc, #124]	@ (fd94 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
    fd16:	f640 72c9 	movw	r2, #4041	@ 0xfc9
    fd1a:	f001 f9a5 	bl	11068 <am_util_stdio_printf>
    fd1e:	e7fe      	b.n	fd1e <vTaskPriorityDisinheritAfterTimeout+0x3a>
    fd20:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
    fd22:	4b1d      	ldr	r3, [pc, #116]	@ (fd98 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
    fd24:	681b      	ldr	r3, [r3, #0]
    fd26:	42a3      	cmp	r3, r4
    fd28:	d022      	beq.n	fd70 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fd2a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
    fd2c:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fd2e:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fd30:	bfa8      	it	ge
    fd32:	f1c1 0108 	rsbge	r1, r1, #8
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    fd36:	4d19      	ldr	r5, [pc, #100]	@ (fd9c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fd38:	bfa8      	it	ge
    fd3a:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    fd3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    fd40:	6961      	ldr	r1, [r4, #20]
    fd42:	eb05 0382 	add.w	r3, r5, r2, lsl #2
    fd46:	4299      	cmp	r1, r3
    fd48:	d1da      	bne.n	fd00 <vTaskPriorityDisinheritAfterTimeout+0x1c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fd4a:	1d26      	adds	r6, r4, #4
    fd4c:	4630      	mov	r0, r6
    fd4e:	f7fd feef 	bl	db30 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
    fd52:	4b13      	ldr	r3, [pc, #76]	@ (fda0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
    fd54:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    fd56:	681a      	ldr	r2, [r3, #0]
    fd58:	4290      	cmp	r0, r2
    fd5a:	bf88      	it	hi
    fd5c:	6018      	strhi	r0, [r3, #0]
    fd5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fd62:	4631      	mov	r1, r6
    fd64:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
    fd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
    fd6c:	f7fd beba 	b.w	dae4 <vListInsertEnd>
    fd70:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fd74:	f383 8811 	msr	BASEPRI, r3
    fd78:	f3bf 8f6f 	isb	sy
    fd7c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
    fd80:	4903      	ldr	r1, [pc, #12]	@ (fd90 <vTaskPriorityDisinheritAfterTimeout+0xac>)
    fd82:	4804      	ldr	r0, [pc, #16]	@ (fd94 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
    fd84:	f640 72e4 	movw	r2, #4068	@ 0xfe4
    fd88:	f001 f96e 	bl	11068 <am_util_stdio_printf>
    fd8c:	e7fe      	b.n	fd8c <vTaskPriorityDisinheritAfterTimeout+0xa8>
    fd8e:	bf00      	nop
    fd90:	0002a4bc 	.word	0x0002a4bc
    fd94:	0002a268 	.word	0x0002a268
    fd98:	1000ac74 	.word	0x1000ac74
    fd9c:	1000abd4 	.word	0x1000abd4
    fda0:	1000ab58 	.word	0x1000ab58

0000fda4 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    fda4:	4a04      	ldr	r2, [pc, #16]	@ (fdb8 <uxTaskResetEventItemValue+0x14>)
    fda6:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fda8:	6813      	ldr	r3, [r2, #0]
    fdaa:	6812      	ldr	r2, [r2, #0]
    fdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    fdae:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fdb0:	f1c3 0308 	rsb	r3, r3, #8
    fdb4:	6193      	str	r3, [r2, #24]
}
    fdb6:	4770      	bx	lr
    fdb8:	1000ac74 	.word	0x1000ac74

0000fdbc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    fdbc:	4b04      	ldr	r3, [pc, #16]	@ (fdd0 <pvTaskIncrementMutexHeldCount+0x14>)
    fdbe:	681a      	ldr	r2, [r3, #0]
    fdc0:	b11a      	cbz	r2, fdca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
    fdc2:	6819      	ldr	r1, [r3, #0]
    fdc4:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
    fdc6:	3201      	adds	r2, #1
    fdc8:	660a      	str	r2, [r1, #96]	@ 0x60
		return pxCurrentTCB;
    fdca:	6818      	ldr	r0, [r3, #0]
	}
    fdcc:	4770      	bx	lr
    fdce:	bf00      	nop
    fdd0:	1000ac74 	.word	0x1000ac74

0000fdd4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    fdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdd8:	4e24      	ldr	r6, [pc, #144]	@ (fe6c <prvSwitchTimerLists+0x98>)
    fdda:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    fddc:	e00c      	b.n	fdf8 <prvSwitchTimerLists+0x24>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    fdde:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    fde0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    fde2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fde4:	1d25      	adds	r5, r4, #4
    fde6:	4628      	mov	r0, r5
    fde8:	f7fd fea2 	bl	db30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    fdec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    fdee:	4620      	mov	r0, r4
    fdf0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    fdf2:	69e3      	ldr	r3, [r4, #28]
    fdf4:	2b01      	cmp	r3, #1
    fdf6:	d00a      	beq.n	fe0e <prvSwitchTimerLists+0x3a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    fdf8:	6833      	ldr	r3, [r6, #0]
    fdfa:	681a      	ldr	r2, [r3, #0]
    fdfc:	2a00      	cmp	r2, #0
    fdfe:	d1ee      	bne.n	fdde <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    fe00:	4a1b      	ldr	r2, [pc, #108]	@ (fe70 <prvSwitchTimerLists+0x9c>)
    fe02:	6811      	ldr	r1, [r2, #0]
    fe04:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
    fe06:	6013      	str	r3, [r2, #0]
}
    fe08:	b004      	add	sp, #16
    fe0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    fe0e:	69a3      	ldr	r3, [r4, #24]
	if( xTimerQueue != NULL )
    fe10:	f8df 8068 	ldr.w	r8, [pc, #104]	@ fe7c <prvSwitchTimerLists+0xa8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    fe14:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
    fe16:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    fe18:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
    fe1a:	d320      	bcc.n	fe5e <prvSwitchTimerLists+0x8a>
	if( xTimerQueue != NULL )
    fe1c:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
    fe20:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
    fe22:	b16b      	cbz	r3, fe40 <prvSwitchTimerLists+0x6c>
		xMessage.xMessageID = xCommandID;
    fe24:	e9cd 5700 	strd	r5, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    fe28:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    fe2a:	f7ff feb7 	bl	fb9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    fe2e:	f8d8 0000 	ldr.w	r0, [r8]
    fe32:	462b      	mov	r3, r5
    fe34:	462a      	mov	r2, r5
    fe36:	4669      	mov	r1, sp
    fe38:	f7fd ff14 	bl	dc64 <xQueueGenericSend>
				configASSERT( xResult );
    fe3c:	2800      	cmp	r0, #0
    fe3e:	d1db      	bne.n	fdf8 <prvSwitchTimerLists+0x24>
    fe40:	f04f 0380 	mov.w	r3, #128	@ 0x80
    fe44:	f383 8811 	msr	BASEPRI, r3
    fe48:	f3bf 8f6f 	isb	sy
    fe4c:	f3bf 8f4f 	dsb	sy
    fe50:	4908      	ldr	r1, [pc, #32]	@ (fe74 <prvSwitchTimerLists+0xa0>)
    fe52:	4809      	ldr	r0, [pc, #36]	@ (fe78 <prvSwitchTimerLists+0xa4>)
    fe54:	f240 3272 	movw	r2, #882	@ 0x372
    fe58:	f001 f906 	bl	11068 <am_util_stdio_printf>
    fe5c:	e7fe      	b.n	fe5c <prvSwitchTimerLists+0x88>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    fe5e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    fe60:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    fe62:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    fe64:	f7fd fe4c 	bl	db00 <vListInsert>
    fe68:	e7c6      	b.n	fdf8 <prvSwitchTimerLists+0x24>
    fe6a:	bf00      	nop
    fe6c:	1000ac88 	.word	0x1000ac88
    fe70:	1000ac84 	.word	0x1000ac84
    fe74:	0002a520 	.word	0x0002a520
    fe78:	0002a268 	.word	0x0002a268
    fe7c:	1000ac80 	.word	0x1000ac80

0000fe80 <prvTimerTask>:
{
    fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe84:	4e9a      	ldr	r6, [pc, #616]	@ (100f0 <prvTimerTask+0x270>)
    fe86:	4d9b      	ldr	r5, [pc, #620]	@ (100f4 <prvTimerTask+0x274>)
    fe88:	4c9b      	ldr	r4, [pc, #620]	@ (100f8 <prvTimerTask+0x278>)
    fe8a:	b08b      	sub	sp, #44	@ 0x2c
					portYIELD_WITHIN_API();
    fe8c:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    fe90:	6832      	ldr	r2, [r6, #0]
    fe92:	f8d2 8000 	ldr.w	r8, [r2]
    fe96:	f1b8 0f00 	cmp.w	r8, #0
    fe9a:	f000 80a7 	beq.w	ffec <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    fe9e:	68d3      	ldr	r3, [r2, #12]
    fea0:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
    fea4:	f7ff f856 	bl	ef54 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
    fea8:	f7ff f85c 	bl	ef64 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    feac:	682a      	ldr	r2, [r5, #0]
    feae:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
    feb0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    feb2:	f0c0 80ac 	bcc.w	1000e <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    feb6:	4580      	cmp	r8, r0
	xLastTime = xTimeNow;
    feb8:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    feba:	f240 80bb 	bls.w	10034 <prvTimerTask+0x1b4>
    febe:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    fec0:	6820      	ldr	r0, [r4, #0]
    fec2:	eba8 010a 	sub.w	r1, r8, sl
    fec6:	f7fe fc87 	bl	e7d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    feca:	f7ff f9bf 	bl	f24c <xTaskResumeAll>
    fece:	b938      	cbnz	r0, fee0 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
    fed0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    fed4:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
    fed8:	f3bf 8f4f 	dsb	sy
    fedc:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    fee0:	6820      	ldr	r0, [r4, #0]
    fee2:	2200      	movs	r2, #0
    fee4:	a902      	add	r1, sp, #8
    fee6:	f7fe f90b 	bl	e100 <xQueueReceive>
    feea:	2800      	cmp	r0, #0
    feec:	d0d0      	beq.n	fe90 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    feee:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    fef0:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    fef2:	2b00      	cmp	r3, #0
    fef4:	db72      	blt.n	ffdc <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    fef6:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    fef8:	697b      	ldr	r3, [r7, #20]
    fefa:	b113      	cbz	r3, ff02 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fefc:	1d38      	adds	r0, r7, #4
    fefe:	f7fd fe17 	bl	db30 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
    ff02:	f7ff f82f 	bl	ef64 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    ff06:	682b      	ldr	r3, [r5, #0]
    ff08:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
    ff0a:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
    ff0c:	f0c0 8086 	bcc.w	1001c <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
    ff10:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
    ff12:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
    ff16:	2b09      	cmp	r3, #9
    ff18:	d8e2      	bhi.n	fee0 <prvTimerTask+0x60>
    ff1a:	a201      	add	r2, pc, #4	@ (adr r2, ff20 <prvTimerTask+0xa0>)
    ff1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff20:	0000ff49 	.word	0x0000ff49
    ff24:	0000ff49 	.word	0x0000ff49
    ff28:	0000ff49 	.word	0x0000ff49
    ff2c:	0000fee1 	.word	0x0000fee1
    ff30:	0000ffb5 	.word	0x0000ffb5
    ff34:	0000ffd5 	.word	0x0000ffd5
    ff38:	0000ff49 	.word	0x0000ff49
    ff3c:	0000ff49 	.word	0x0000ff49
    ff40:	0000fee1 	.word	0x0000fee1
    ff44:	0000ffb5 	.word	0x0000ffb5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    ff48:	9b03      	ldr	r3, [sp, #12]
    ff4a:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    ff4c:	613f      	str	r7, [r7, #16]
    ff4e:	1899      	adds	r1, r3, r2
    ff50:	bf2c      	ite	cs
    ff52:	2001      	movcs	r0, #1
    ff54:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
    ff56:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    ff58:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
    ff5a:	d862      	bhi.n	10022 <prvTimerTask+0x1a2>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ff5c:	ebab 0303 	sub.w	r3, fp, r3
    ff60:	429a      	cmp	r2, r3
    ff62:	d831      	bhi.n	ffc8 <prvTimerTask+0x148>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ff66:	4638      	mov	r0, r7
    ff68:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ff6a:	69fb      	ldr	r3, [r7, #28]
    ff6c:	2b01      	cmp	r3, #1
    ff6e:	d1b7      	bne.n	fee0 <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
    ff70:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    ff72:	9b03      	ldr	r3, [sp, #12]
    ff74:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
    ff76:	b171      	cbz	r1, ff96 <prvTimerTask+0x116>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    ff78:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    ff7a:	e9cd 3707 	strd	r3, r7, [sp, #28]
		xMessage.xMessageID = xCommandID;
    ff7e:	2700      	movs	r7, #0
    ff80:	9706      	str	r7, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    ff82:	f7ff fe0b 	bl	fb9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    ff86:	6820      	ldr	r0, [r4, #0]
    ff88:	463b      	mov	r3, r7
    ff8a:	463a      	mov	r2, r7
    ff8c:	a906      	add	r1, sp, #24
    ff8e:	f7fd fe69 	bl	dc64 <xQueueGenericSend>
							configASSERT( xResult );
    ff92:	2800      	cmp	r0, #0
    ff94:	d1a4      	bne.n	fee0 <prvTimerTask+0x60>
    ff96:	f04f 0380 	mov.w	r3, #128	@ 0x80
    ff9a:	f383 8811 	msr	BASEPRI, r3
    ff9e:	f3bf 8f6f 	isb	sy
    ffa2:	f3bf 8f4f 	dsb	sy
    ffa6:	4955      	ldr	r1, [pc, #340]	@ (100fc <prvTimerTask+0x27c>)
    ffa8:	4855      	ldr	r0, [pc, #340]	@ (10100 <prvTimerTask+0x280>)
    ffaa:	f240 3201 	movw	r2, #769	@ 0x301
    ffae:	f001 f85b 	bl	11068 <am_util_stdio_printf>
    ffb2:	e7fe      	b.n	ffb2 <prvTimerTask+0x132>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    ffb4:	9b03      	ldr	r3, [sp, #12]
    ffb6:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    ffb8:	2b00      	cmp	r3, #0
    ffba:	f000 8084 	beq.w	100c6 <prvTimerTask+0x246>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    ffbe:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
    ffc0:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    ffc2:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    ffc4:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
    ffc6:	d830      	bhi.n	1002a <prvTimerTask+0x1aa>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    ffc8:	4b4e      	ldr	r3, [pc, #312]	@ (10104 <prvTimerTask+0x284>)
    ffca:	1d39      	adds	r1, r7, #4
    ffcc:	6818      	ldr	r0, [r3, #0]
    ffce:	f7fd fd97 	bl	db00 <vListInsert>
    ffd2:	e785      	b.n	fee0 <prvTimerTask+0x60>
						vPortFree( pxTimer );
    ffd4:	4638      	mov	r0, r7
    ffd6:	f7fd fbd1 	bl	d77c <vPortFree>
					break;
    ffda:	e781      	b.n	fee0 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    ffdc:	9b03      	ldr	r3, [sp, #12]
    ffde:	9905      	ldr	r1, [sp, #20]
    ffe0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    ffe2:	9b02      	ldr	r3, [sp, #8]
    ffe4:	2b00      	cmp	r3, #0
    ffe6:	f6ff af7b 	blt.w	fee0 <prvTimerTask+0x60>
    ffea:	e784      	b.n	fef6 <prvTimerTask+0x76>
	vTaskSuspendAll();
    ffec:	f7fe ffb2 	bl	ef54 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
    fff0:	f7fe ffb8 	bl	ef64 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    fff4:	682a      	ldr	r2, [r5, #0]
    fff6:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
    fff8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    fffa:	d308      	bcc.n	1000e <prvTimerTask+0x18e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    fffc:	4b41      	ldr	r3, [pc, #260]	@ (10104 <prvTimerTask+0x284>)
	xLastTime = xTimeNow;
    fffe:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   10002:	681a      	ldr	r2, [r3, #0]
   10004:	6812      	ldr	r2, [r2, #0]
   10006:	fab2 f282 	clz	r2, r2
   1000a:	0952      	lsrs	r2, r2, #5
   1000c:	e758      	b.n	fec0 <prvTimerTask+0x40>
		prvSwitchTimerLists();
   1000e:	f7ff fee1 	bl	fdd4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
   10012:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
   10016:	f7ff f919 	bl	f24c <xTaskResumeAll>
   1001a:	e761      	b.n	fee0 <prvTimerTask+0x60>
		prvSwitchTimerLists();
   1001c:	f7ff feda 	bl	fdd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   10020:	e776      	b.n	ff10 <prvTimerTask+0x90>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   10022:	455b      	cmp	r3, fp
   10024:	d901      	bls.n	1002a <prvTimerTask+0x1aa>
   10026:	2800      	cmp	r0, #0
   10028:	d09c      	beq.n	ff64 <prvTimerTask+0xe4>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1002a:	6830      	ldr	r0, [r6, #0]
   1002c:	1d39      	adds	r1, r7, #4
   1002e:	f7fd fd67 	bl	db00 <vListInsert>
   10032:	e755      	b.n	fee0 <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
   10034:	f7ff f90a 	bl	f24c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   10038:	6832      	ldr	r2, [r6, #0]
   1003a:	68d2      	ldr	r2, [r2, #12]
   1003c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   10040:	f10b 0104 	add.w	r1, fp, #4
   10044:	4608      	mov	r0, r1
   10046:	9101      	str	r1, [sp, #4]
   10048:	f7fd fd72 	bl	db30 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1004c:	f8db 201c 	ldr.w	r2, [fp, #28]
   10050:	9901      	ldr	r1, [sp, #4]
   10052:	2a01      	cmp	r2, #1
   10054:	d004      	beq.n	10060 <prvTimerTask+0x1e0>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   10056:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
   1005a:	4658      	mov	r0, fp
   1005c:	4798      	blx	r3
}
   1005e:	e73f      	b.n	fee0 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   10060:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   10064:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   10068:	eb08 0002 	add.w	r0, r8, r2
	if( xNextExpiryTime <= xTimeNow )
   1006c:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1006e:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
   10072:	d203      	bcs.n	1007c <prvTimerTask+0x1fc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   10074:	6830      	ldr	r0, [r6, #0]
   10076:	f7fd fd43 	bl	db00 <vListInsert>
	return xProcessTimerNow;
   1007a:	e7ec      	b.n	10056 <prvTimerTask+0x1d6>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1007c:	ebaa 0a08 	sub.w	sl, sl, r8
   10080:	4552      	cmp	r2, sl
   10082:	d82f      	bhi.n	100e4 <prvTimerTask+0x264>
	if( xTimerQueue != NULL )
   10084:	6822      	ldr	r2, [r4, #0]
   10086:	b17a      	cbz	r2, 100a8 <prvTimerTask+0x228>
		xMessage.xMessageID = xCommandID;
   10088:	f04f 0a00 	mov.w	sl, #0
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1008c:	e9cd 8b07 	strd	r8, fp, [sp, #28]
		xMessage.xMessageID = xCommandID;
   10090:	f8cd a018 	str.w	sl, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   10094:	f7ff fd82 	bl	fb9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   10098:	6820      	ldr	r0, [r4, #0]
   1009a:	4653      	mov	r3, sl
   1009c:	4652      	mov	r2, sl
   1009e:	a906      	add	r1, sp, #24
   100a0:	f7fd fde0 	bl	dc64 <xQueueGenericSend>
			configASSERT( xResult );
   100a4:	2800      	cmp	r0, #0
   100a6:	d1d6      	bne.n	10056 <prvTimerTask+0x1d6>
   100a8:	f04f 0380 	mov.w	r3, #128	@ 0x80
   100ac:	f383 8811 	msr	BASEPRI, r3
   100b0:	f3bf 8f6f 	isb	sy
   100b4:	f3bf 8f4f 	dsb	sy
   100b8:	4910      	ldr	r1, [pc, #64]	@ (100fc <prvTimerTask+0x27c>)
   100ba:	4811      	ldr	r0, [pc, #68]	@ (10100 <prvTimerTask+0x280>)
   100bc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
   100c0:	f000 ffd2 	bl	11068 <am_util_stdio_printf>
   100c4:	e7fe      	b.n	100c4 <prvTimerTask+0x244>
   100c6:	f04f 0380 	mov.w	r3, #128	@ 0x80
   100ca:	f383 8811 	msr	BASEPRI, r3
   100ce:	f3bf 8f6f 	isb	sy
   100d2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   100d6:	4909      	ldr	r1, [pc, #36]	@ (100fc <prvTimerTask+0x27c>)
   100d8:	4809      	ldr	r0, [pc, #36]	@ (10100 <prvTimerTask+0x280>)
   100da:	f44f 7246 	mov.w	r2, #792	@ 0x318
   100de:	f000 ffc3 	bl	11068 <am_util_stdio_printf>
   100e2:	e7fe      	b.n	100e2 <prvTimerTask+0x262>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   100e4:	4b07      	ldr	r3, [pc, #28]	@ (10104 <prvTimerTask+0x284>)
   100e6:	6818      	ldr	r0, [r3, #0]
   100e8:	f7fd fd0a 	bl	db00 <vListInsert>
	return xProcessTimerNow;
   100ec:	e7b3      	b.n	10056 <prvTimerTask+0x1d6>
   100ee:	bf00      	nop
   100f0:	1000ac88 	.word	0x1000ac88
   100f4:	1000ac78 	.word	0x1000ac78
   100f8:	1000ac80 	.word	0x1000ac80
   100fc:	0002a520 	.word	0x0002a520
   10100:	0002a268 	.word	0x0002a268
   10104:	1000ac84 	.word	0x1000ac84

00010108 <xTimerCreateTimerTask>:
{
   10108:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
   1010a:	4c1d      	ldr	r4, [pc, #116]	@ (10180 <xTimerCreateTimerTask+0x78>)
{
   1010c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   1010e:	f7fc ffd9 	bl	d0c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   10112:	6825      	ldr	r5, [r4, #0]
   10114:	b305      	cbz	r5, 10158 <xTimerCreateTimerTask+0x50>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   10116:	f7fd f801 	bl	d11c <vPortExitCritical>
	if( xTimerQueue != NULL )
   1011a:	6823      	ldr	r3, [r4, #0]
   1011c:	b15b      	cbz	r3, 10136 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
   1011e:	4a19      	ldr	r2, [pc, #100]	@ (10184 <xTimerCreateTimerTask+0x7c>)
   10120:	4919      	ldr	r1, [pc, #100]	@ (10188 <xTimerCreateTimerTask+0x80>)
   10122:	481a      	ldr	r0, [pc, #104]	@ (1018c <xTimerCreateTimerTask+0x84>)
   10124:	2303      	movs	r3, #3
   10126:	e9cd 3200 	strd	r3, r2, [sp]
   1012a:	2300      	movs	r3, #0
   1012c:	f44f 7280 	mov.w	r2, #256	@ 0x100
   10130:	f7fe fc4e 	bl	e9d0 <xTaskCreate>
	configASSERT( xReturn );
   10134:	b970      	cbnz	r0, 10154 <xTimerCreateTimerTask+0x4c>
   10136:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1013a:	f383 8811 	msr	BASEPRI, r3
   1013e:	f3bf 8f6f 	isb	sy
   10142:	f3bf 8f4f 	dsb	sy
   10146:	4912      	ldr	r1, [pc, #72]	@ (10190 <xTimerCreateTimerTask+0x88>)
   10148:	4812      	ldr	r0, [pc, #72]	@ (10194 <xTimerCreateTimerTask+0x8c>)
   1014a:	f44f 7289 	mov.w	r2, #274	@ 0x112
   1014e:	f000 ff8b 	bl	11068 <am_util_stdio_printf>
   10152:	e7fe      	b.n	10152 <xTimerCreateTimerTask+0x4a>
}
   10154:	b003      	add	sp, #12
   10156:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
   10158:	4f0f      	ldr	r7, [pc, #60]	@ (10198 <xTimerCreateTimerTask+0x90>)
			vListInitialise( &xActiveTimerList2 );
   1015a:	4e10      	ldr	r6, [pc, #64]	@ (1019c <xTimerCreateTimerTask+0x94>)
			vListInitialise( &xActiveTimerList1 );
   1015c:	4638      	mov	r0, r7
   1015e:	f7fd fcb1 	bl	dac4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   10162:	4630      	mov	r0, r6
   10164:	f7fd fcae 	bl	dac4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   10168:	4b0d      	ldr	r3, [pc, #52]	@ (101a0 <xTimerCreateTimerTask+0x98>)
   1016a:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1016c:	4b0d      	ldr	r3, [pc, #52]	@ (101a4 <xTimerCreateTimerTask+0x9c>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1016e:	462a      	mov	r2, r5
   10170:	2110      	movs	r1, #16
   10172:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
   10174:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   10176:	f7fd fd2b 	bl	dbd0 <xQueueGenericCreate>
   1017a:	6020      	str	r0, [r4, #0]
   1017c:	e7cb      	b.n	10116 <xTimerCreateTimerTask+0xe>
   1017e:	bf00      	nop
   10180:	1000ac80 	.word	0x1000ac80
   10184:	1000ac7c 	.word	0x1000ac7c
   10188:	0002a57c 	.word	0x0002a57c
   1018c:	0000fe81 	.word	0x0000fe81
   10190:	0002a520 	.word	0x0002a520
   10194:	0002a268 	.word	0x0002a268
   10198:	1000aca0 	.word	0x1000aca0
   1019c:	1000ac8c 	.word	0x1000ac8c
   101a0:	1000ac88 	.word	0x1000ac88
   101a4:	1000ac84 	.word	0x1000ac84

000101a8 <xTimerCreate>:
	{
   101a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101ac:	4607      	mov	r7, r0
   101ae:	b082      	sub	sp, #8
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   101b0:	202c      	movs	r0, #44	@ 0x2c
	{
   101b2:	4688      	mov	r8, r1
   101b4:	4616      	mov	r6, r2
   101b6:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   101b8:	f7fd fa18 	bl	d5ec <pvPortMalloc>
		if( pxNewTimer != NULL )
   101bc:	4604      	mov	r4, r0
   101be:	b190      	cbz	r0, 101e6 <xTimerCreate+0x3e>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   101c0:	f1b8 0f00 	cmp.w	r8, #0
   101c4:	d013      	beq.n	101ee <xTimerCreate+0x46>
	taskENTER_CRITICAL();
   101c6:	f7fc ff7d 	bl	d0c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   101ca:	4b1d      	ldr	r3, [pc, #116]	@ (10240 <xTimerCreate+0x98>)
   101cc:	681a      	ldr	r2, [r3, #0]
   101ce:	b1ea      	cbz	r2, 1020c <xTimerCreate+0x64>
	taskEXIT_CRITICAL();
   101d0:	f7fc ffa4 	bl	d11c <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   101d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
		pxNewTimer->pcTimerName = pcTimerName;
   101d6:	6027      	str	r7, [r4, #0]
		pxNewTimer->uxAutoReload = uxAutoReload;
   101d8:	e9c4 8606 	strd	r8, r6, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
   101dc:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   101de:	6263      	str	r3, [r4, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   101e0:	1d20      	adds	r0, r4, #4
   101e2:	f7fd fc7b 	bl	dadc <vListInitialiseItem>
	}
   101e6:	4620      	mov	r0, r4
   101e8:	b002      	add	sp, #8
   101ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101ee:	f04f 0380 	mov.w	r3, #128	@ 0x80
   101f2:	f383 8811 	msr	BASEPRI, r3
   101f6:	f3bf 8f6f 	isb	sy
   101fa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   101fe:	4911      	ldr	r1, [pc, #68]	@ (10244 <xTimerCreate+0x9c>)
   10200:	4811      	ldr	r0, [pc, #68]	@ (10248 <xTimerCreate+0xa0>)
   10202:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
   10206:	f000 ff2f 	bl	11068 <am_util_stdio_printf>
   1020a:	e7fe      	b.n	1020a <xTimerCreate+0x62>
			vListInitialise( &xActiveTimerList1 );
   1020c:	f8df a044 	ldr.w	sl, [pc, #68]	@ 10254 <xTimerCreate+0xac>
			vListInitialise( &xActiveTimerList2 );
   10210:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 10258 <xTimerCreate+0xb0>
   10214:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
   10216:	4650      	mov	r0, sl
   10218:	f7fd fc54 	bl	dac4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1021c:	4648      	mov	r0, r9
   1021e:	f7fd fc51 	bl	dac4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   10222:	480a      	ldr	r0, [pc, #40]	@ (1024c <xTimerCreate+0xa4>)
			pxOverflowTimerList = &xActiveTimerList2;
   10224:	490a      	ldr	r1, [pc, #40]	@ (10250 <xTimerCreate+0xa8>)
			pxCurrentTimerList = &xActiveTimerList1;
   10226:	f8c0 a000 	str.w	sl, [r0]
			pxOverflowTimerList = &xActiveTimerList2;
   1022a:	f8c1 9000 	str.w	r9, [r1]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1022e:	9a01      	ldr	r2, [sp, #4]
   10230:	2110      	movs	r1, #16
   10232:	2005      	movs	r0, #5
   10234:	f7fd fccc 	bl	dbd0 <xQueueGenericCreate>
   10238:	4b01      	ldr	r3, [pc, #4]	@ (10240 <xTimerCreate+0x98>)
   1023a:	6018      	str	r0, [r3, #0]
   1023c:	e7c8      	b.n	101d0 <xTimerCreate+0x28>
   1023e:	bf00      	nop
   10240:	1000ac80 	.word	0x1000ac80
   10244:	0002a520 	.word	0x0002a520
   10248:	0002a268 	.word	0x0002a268
   1024c:	1000ac88 	.word	0x1000ac88
   10250:	1000ac84 	.word	0x1000ac84
   10254:	1000aca0 	.word	0x1000aca0
   10258:	1000ac8c 	.word	0x1000ac8c

0001025c <xTimerGenericCommand>:
{
   1025c:	b530      	push	{r4, r5, lr}
   1025e:	b085      	sub	sp, #20
	configASSERT( xTimer );
   10260:	b318      	cbz	r0, 102aa <xTimerGenericCommand+0x4e>
	if( xTimerQueue != NULL )
   10262:	4d19      	ldr	r5, [pc, #100]	@ (102c8 <xTimerGenericCommand+0x6c>)
   10264:	4604      	mov	r4, r0
   10266:	6828      	ldr	r0, [r5, #0]
   10268:	b170      	cbz	r0, 10288 <xTimerGenericCommand+0x2c>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1026a:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
   1026c:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   10270:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   10272:	dc0b      	bgt.n	1028c <xTimerGenericCommand+0x30>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   10274:	f7ff fc92 	bl	fb9c <xTaskGetSchedulerState>
   10278:	2802      	cmp	r0, #2
   1027a:	d00f      	beq.n	1029c <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1027c:	2300      	movs	r3, #0
   1027e:	6828      	ldr	r0, [r5, #0]
   10280:	461a      	mov	r2, r3
   10282:	4669      	mov	r1, sp
   10284:	f7fd fcee 	bl	dc64 <xQueueGenericSend>
}
   10288:	b005      	add	sp, #20
   1028a:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1028c:	469c      	mov	ip, r3
   1028e:	4662      	mov	r2, ip
   10290:	2300      	movs	r3, #0
   10292:	4669      	mov	r1, sp
   10294:	f7fd febc 	bl	e010 <xQueueGenericSendFromISR>
}
   10298:	b005      	add	sp, #20
   1029a:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1029c:	6828      	ldr	r0, [r5, #0]
   1029e:	9a08      	ldr	r2, [sp, #32]
   102a0:	2300      	movs	r3, #0
   102a2:	4669      	mov	r1, sp
   102a4:	f7fd fcde 	bl	dc64 <xQueueGenericSend>
   102a8:	e7ee      	b.n	10288 <xTimerGenericCommand+0x2c>
   102aa:	f04f 0380 	mov.w	r3, #128	@ 0x80
   102ae:	f383 8811 	msr	BASEPRI, r3
   102b2:	f3bf 8f6f 	isb	sy
   102b6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
   102ba:	4904      	ldr	r1, [pc, #16]	@ (102cc <xTimerGenericCommand+0x70>)
   102bc:	4804      	ldr	r0, [pc, #16]	@ (102d0 <xTimerGenericCommand+0x74>)
   102be:	f44f 72c3 	mov.w	r2, #390	@ 0x186
   102c2:	f000 fed1 	bl	11068 <am_util_stdio_printf>
   102c6:	e7fe      	b.n	102c6 <xTimerGenericCommand+0x6a>
   102c8:	1000ac80 	.word	0x1000ac80
   102cc:	0002a520 	.word	0x0002a520
   102d0:	0002a268 	.word	0x0002a268

000102d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   102d4:	b530      	push	{r4, r5, lr}
   102d6:	4614      	mov	r4, r2
   102d8:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   102da:	461a      	mov	r2, r3
   102dc:	4b06      	ldr	r3, [pc, #24]	@ (102f8 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   102de:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   102e0:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   102e2:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   102e4:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   102e6:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   102ea:	2300      	movs	r3, #0
   102ec:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   102ee:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   102f0:	f7fd fe8e 	bl	e010 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
   102f4:	b005      	add	sp, #20
   102f6:	bd30      	pop	{r4, r5, pc}
   102f8:	1000ac80 	.word	0x1000ac80

000102fc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   102fc:	b510      	push	{r4, lr}
   102fe:	b084      	sub	sp, #16
   10300:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   10302:	a801      	add	r0, sp, #4
   10304:	f00f f820 	bl	1f348 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   10308:	4a05      	ldr	r2, [pc, #20]	@ (10320 <am_util_delay_ms+0x24>)
   1030a:	9b01      	ldr	r3, [sp, #4]
   1030c:	fba2 2303 	umull	r2, r3, r2, r3
   10310:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   10312:	fb04 f003 	mul.w	r0, r4, r3
   10316:	f00f f92f 	bl	1f578 <am_hal_flash_delay>
}
   1031a:	b004      	add	sp, #16
   1031c:	bd10      	pop	{r4, pc}
   1031e:	bf00      	nop
   10320:	057619f1 	.word	0x057619f1

00010324 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   10324:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   10326:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1032a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1032c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   10330:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   10334:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   10338:	f000 f806 	bl	10348 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1033c:	bd01      	pop	{r0, pc}
   1033e:	bf00      	nop

00010340 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   10340:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   10342:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   10344:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   10346:	4770      	bx	lr

00010348 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   10348:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1034a:	2300      	movs	r3, #0
{
   1034c:	b092      	sub	sp, #72	@ 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1034e:	e9cd 3300 	strd	r3, r3, [sp]
   10352:	e9cd 3302 	strd	r3, r3, [sp, #8]
   10356:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1035a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1035e:	9310      	str	r3, [sp, #64]	@ 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   10360:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	@ 0xd28
   10364:	9310      	str	r3, [sp, #64]	@ 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   10366:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   10368:	b2db      	uxtb	r3, r3
   1036a:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1036e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   10370:	f3c3 2307 	ubfx	r3, r3, #8, #8
   10374:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   10378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1037a:	0c1b      	lsrs	r3, r3, #16
   1037c:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   10380:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	@ 0xd38
   10384:	930f      	str	r3, [sp, #60]	@ 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   10386:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   1038a:	079a      	lsls	r2, r3, #30
{
   1038c:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1038e:	f100 80c7 	bmi.w	10520 <am_util_faultisr_collect_data+0x1d8>
   10392:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   10396:	4621      	mov	r1, r4
   10398:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1039a:	930e      	str	r3, [sp, #56]	@ 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1039c:	f7ff ffd0 	bl	10340 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   103a0:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   103a2:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   103a4:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   103a6:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   103a8:	f7ff ffca 	bl	10340 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   103ac:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   103ae:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   103b0:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   103b2:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   103b4:	f7ff ffc4 	bl	10340 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   103b8:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   103ba:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   103bc:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   103be:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   103c0:	f7ff ffbe 	bl	10340 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   103c4:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   103c6:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   103c8:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   103ca:	9309      	str	r3, [sp, #36]	@ 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   103cc:	f7ff ffb8 	bl	10340 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   103d0:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   103d2:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   103d4:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   103d6:	930a      	str	r3, [sp, #40]	@ 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   103d8:	f7ff ffb2 	bl	10340 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   103dc:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   103de:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   103e0:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   103e2:	930b      	str	r3, [sp, #44]	@ 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   103e4:	f7ff ffac 	bl	10340 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   103e8:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   103ea:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   103ec:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   103ee:	930c      	str	r3, [sp, #48]	@ 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   103f0:	f7ff ffa6 	bl	10340 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   103f4:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   103f6:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   103f8:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   103fa:	930d      	str	r3, [sp, #52]	@ 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   103fc:	f010 f934 	bl	20668 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
   10400:	484e      	ldr	r0, [pc, #312]	@ (1053c <am_util_faultisr_collect_data+0x1f4>)
   10402:	f000 fe31 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
   10406:	9906      	ldr	r1, [sp, #24]
   10408:	484d      	ldr	r0, [pc, #308]	@ (10540 <am_util_faultisr_collect_data+0x1f8>)
   1040a:	f000 fe2d 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
   1040e:	9907      	ldr	r1, [sp, #28]
   10410:	484c      	ldr	r0, [pc, #304]	@ (10544 <am_util_faultisr_collect_data+0x1fc>)
   10412:	f000 fe29 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
   10416:	9908      	ldr	r1, [sp, #32]
   10418:	484b      	ldr	r0, [pc, #300]	@ (10548 <am_util_faultisr_collect_data+0x200>)
   1041a:	f000 fe25 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
   1041e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   10420:	484a      	ldr	r0, [pc, #296]	@ (1054c <am_util_faultisr_collect_data+0x204>)
   10422:	f000 fe21 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
   10426:	990a      	ldr	r1, [sp, #40]	@ 0x28
   10428:	4849      	ldr	r0, [pc, #292]	@ (10550 <am_util_faultisr_collect_data+0x208>)
   1042a:	f000 fe1d 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
   1042e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   10430:	4848      	ldr	r0, [pc, #288]	@ (10554 <am_util_faultisr_collect_data+0x20c>)
   10432:	f000 fe19 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
   10436:	990c      	ldr	r1, [sp, #48]	@ 0x30
   10438:	4847      	ldr	r0, [pc, #284]	@ (10558 <am_util_faultisr_collect_data+0x210>)
   1043a:	f000 fe15 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
   1043e:	990d      	ldr	r1, [sp, #52]	@ 0x34
   10440:	4846      	ldr	r0, [pc, #280]	@ (1055c <am_util_faultisr_collect_data+0x214>)
   10442:	f000 fe11 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
   10446:	4846      	ldr	r0, [pc, #280]	@ (10560 <am_util_faultisr_collect_data+0x218>)
   10448:	f000 fe0e 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
   1044c:	990e      	ldr	r1, [sp, #56]	@ 0x38
   1044e:	4845      	ldr	r0, [pc, #276]	@ (10564 <am_util_faultisr_collect_data+0x21c>)
   10450:	f000 fe0a 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
   10454:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   10456:	4844      	ldr	r0, [pc, #272]	@ (10568 <am_util_faultisr_collect_data+0x220>)
   10458:	f000 fe06 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
   1045c:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
   10460:	4842      	ldr	r0, [pc, #264]	@ (1056c <am_util_faultisr_collect_data+0x224>)
   10462:	f000 fe01 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
   10466:	f89d 1045 	ldrb.w	r1, [sp, #69]	@ 0x45
   1046a:	4841      	ldr	r0, [pc, #260]	@ (10570 <am_util_faultisr_collect_data+0x228>)
   1046c:	f000 fdfc 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
   10470:	f8bd 1046 	ldrh.w	r1, [sp, #70]	@ 0x46
   10474:	483f      	ldr	r0, [pc, #252]	@ (10574 <am_util_faultisr_collect_data+0x22c>)
   10476:	b289      	uxth	r1, r1
   10478:	f000 fdf6 	bl	11068 <am_util_stdio_printf>
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    {
        switch (sFaultData.u8BFSR & u32Mask)
   1047c:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   10480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
   10484:	2b20      	cmp	r3, #32
   10486:	d855      	bhi.n	10534 <am_util_faultisr_collect_data+0x1ec>
   10488:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   1048c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   10490:	2b20      	cmp	r3, #32
   10492:	d84b      	bhi.n	1052c <am_util_faultisr_collect_data+0x1e4>
   10494:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   10498:	069b      	lsls	r3, r3, #26
   1049a:	d502      	bpl.n	104a2 <am_util_faultisr_collect_data+0x15a>
                break;
            case 0x40:
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
                break;
            case 0x20:
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
   1049c:	4836      	ldr	r0, [pc, #216]	@ (10578 <am_util_faultisr_collect_data+0x230>)
   1049e:	f000 fde3 	bl	11068 <am_util_stdio_printf>
        switch (sFaultData.u8BFSR & u32Mask)
   104a2:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   104a6:	06dc      	lsls	r4, r3, #27
   104a8:	d502      	bpl.n	104b0 <am_util_faultisr_collect_data+0x168>
                break;
            case 0x10:
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
   104aa:	4834      	ldr	r0, [pc, #208]	@ (1057c <am_util_faultisr_collect_data+0x234>)
   104ac:	f000 fddc 	bl	11068 <am_util_stdio_printf>
        switch (sFaultData.u8BFSR & u32Mask)
   104b0:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   104b4:	0718      	lsls	r0, r3, #28
   104b6:	d502      	bpl.n	104be <am_util_faultisr_collect_data+0x176>
                break;
            case 0x08:
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
   104b8:	4831      	ldr	r0, [pc, #196]	@ (10580 <am_util_faultisr_collect_data+0x238>)
   104ba:	f000 fdd5 	bl	11068 <am_util_stdio_printf>
        switch (sFaultData.u8BFSR & u32Mask)
   104be:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   104c2:	0759      	lsls	r1, r3, #29
   104c4:	d502      	bpl.n	104cc <am_util_faultisr_collect_data+0x184>
                break;
            case 0x04:
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
   104c6:	482f      	ldr	r0, [pc, #188]	@ (10584 <am_util_faultisr_collect_data+0x23c>)
   104c8:	f000 fdce 	bl	11068 <am_util_stdio_printf>
        switch (sFaultData.u8BFSR & u32Mask)
   104cc:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   104d0:	079a      	lsls	r2, r3, #30
   104d2:	d502      	bpl.n	104da <am_util_faultisr_collect_data+0x192>
                break;
            case 0x02:
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
   104d4:	482c      	ldr	r0, [pc, #176]	@ (10588 <am_util_faultisr_collect_data+0x240>)
   104d6:	f000 fdc7 	bl	11068 <am_util_stdio_printf>
        switch (sFaultData.u8BFSR & u32Mask)
   104da:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
   104de:	07db      	lsls	r3, r3, #31
   104e0:	d502      	bpl.n	104e8 <am_util_faultisr_collect_data+0x1a0>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
   104e2:	482a      	ldr	r0, [pc, #168]	@ (1058c <am_util_faultisr_collect_data+0x244>)
   104e4:	f000 fdc0 	bl	11068 <am_util_stdio_printf>
    }

    //
    // Print out any Apollo* Internal fault information.
    //
    am_util_stdio_printf("MCU Fault data:\n");
   104e8:	4829      	ldr	r0, [pc, #164]	@ (10590 <am_util_faultisr_collect_data+0x248>)
   104ea:	f000 fdbd 	bl	11068 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
   104ee:	f89d 3000 	ldrb.w	r3, [sp]
   104f2:	b983      	cbnz	r3, 10516 <am_util_faultisr_collect_data+0x1ce>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    }
    if (sHalFaultData.bDCODE)
   104f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   104f8:	b943      	cbnz	r3, 1050c <am_util_faultisr_collect_data+0x1c4>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    }
    if (sHalFaultData.bSYS)
   104fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
   104fe:	b903      	cbnz	r3, 10502 <am_util_faultisr_collect_data+0x1ba>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   10500:	e7fe      	b.n	10500 <am_util_faultisr_collect_data+0x1b8>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
   10502:	9905      	ldr	r1, [sp, #20]
   10504:	4823      	ldr	r0, [pc, #140]	@ (10594 <am_util_faultisr_collect_data+0x24c>)
   10506:	f000 fdaf 	bl	11068 <am_util_stdio_printf>
   1050a:	e7f9      	b.n	10500 <am_util_faultisr_collect_data+0x1b8>
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
   1050c:	9903      	ldr	r1, [sp, #12]
   1050e:	4822      	ldr	r0, [pc, #136]	@ (10598 <am_util_faultisr_collect_data+0x250>)
   10510:	f000 fdaa 	bl	11068 <am_util_stdio_printf>
   10514:	e7f1      	b.n	104fa <am_util_faultisr_collect_data+0x1b2>
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
   10516:	9901      	ldr	r1, [sp, #4]
   10518:	4820      	ldr	r0, [pc, #128]	@ (1059c <am_util_faultisr_collect_data+0x254>)
   1051a:	f000 fda5 	bl	11068 <am_util_stdio_printf>
   1051e:	e7e9      	b.n	104f4 <am_util_faultisr_collect_data+0x1ac>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   10520:	4601      	mov	r1, r0
   10522:	2006      	movs	r0, #6
   10524:	f7ff ff0c 	bl	10340 <getStackedReg>
   10528:	4603      	mov	r3, r0
   1052a:	e734      	b.n	10396 <am_util_faultisr_collect_data+0x4e>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
   1052c:	481c      	ldr	r0, [pc, #112]	@ (105a0 <am_util_faultisr_collect_data+0x258>)
   1052e:	f000 fd9b 	bl	11068 <am_util_stdio_printf>
                break;
   10532:	e7af      	b.n	10494 <am_util_faultisr_collect_data+0x14c>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
   10534:	481b      	ldr	r0, [pc, #108]	@ (105a4 <am_util_faultisr_collect_data+0x25c>)
   10536:	f000 fd97 	bl	11068 <am_util_stdio_printf>
                break;
   1053a:	e7a5      	b.n	10488 <am_util_faultisr_collect_data+0x140>
   1053c:	0002a584 	.word	0x0002a584
   10540:	0002a5a0 	.word	0x0002a5a0
   10544:	0002a5b4 	.word	0x0002a5b4
   10548:	0002a5c8 	.word	0x0002a5c8
   1054c:	0002a5dc 	.word	0x0002a5dc
   10550:	0002a5f0 	.word	0x0002a5f0
   10554:	0002a604 	.word	0x0002a604
   10558:	0002a618 	.word	0x0002a618
   1055c:	0002a62c 	.word	0x0002a62c
   10560:	0002a640 	.word	0x0002a640
   10564:	0002a658 	.word	0x0002a658
   10568:	0002a674 	.word	0x0002a674
   1056c:	0002a69c 	.word	0x0002a69c
   10570:	0002a6cc 	.word	0x0002a6cc
   10574:	0002a6f8 	.word	0x0002a6f8
   10578:	0002a764 	.word	0x0002a764
   1057c:	0002a780 	.word	0x0002a780
   10580:	0002a79c 	.word	0x0002a79c
   10584:	0002a7bc 	.word	0x0002a7bc
   10588:	0002a7dc 	.word	0x0002a7dc
   1058c:	0002a7fc 	.word	0x0002a7fc
   10590:	0002a818 	.word	0x0002a818
   10594:	0002a86c 	.word	0x0002a86c
   10598:	0002a84c 	.word	0x0002a84c
   1059c:	0002a82c 	.word	0x0002a82c
   105a0:	0002a744 	.word	0x0002a744
   105a4:	0002a724 	.word	0x0002a724

000105a8 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   105a8:	2900      	cmp	r1, #0
   105aa:	d047      	beq.n	1063c <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   105ac:	0843      	lsrs	r3, r0, #1
   105ae:	0882      	lsrs	r2, r0, #2
   105b0:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   105b4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   105b8:	189b      	adds	r3, r3, r2
   105ba:	ea4f 0291 	mov.w	r2, r1, lsr #2
   105be:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   105c2:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   105c6:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   105ca:	eb13 030c 	adds.w	r3, r3, ip
   105ce:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   105d2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   105d6:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   105da:	eb13 030c 	adds.w	r3, r3, ip
   105de:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   105e2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   105e6:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   105ea:	eb13 030c 	adds.w	r3, r3, ip
   105ee:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   105f2:	189b      	adds	r3, r3, r2
   105f4:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   105f8:	08db      	lsrs	r3, r3, #3
   105fa:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   105fe:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   10600:	3006      	adds	r0, #6
{
   10602:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   10604:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   10608:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1060c:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   10610:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   10614:	eb1c 0c03 	adds.w	ip, ip, r3
   10618:	eb42 0e0e 	adc.w	lr, r2, lr
   1061c:	eb1c 0c0c 	adds.w	ip, ip, ip
   10620:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   10624:	ebb0 000c 	subs.w	r0, r0, ip
   10628:	eb61 010e 	sbc.w	r1, r1, lr
   1062c:	0900      	lsrs	r0, r0, #4
   1062e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   10632:	18c0      	adds	r0, r0, r3
   10634:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   10638:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1063c:	0883      	lsrs	r3, r0, #2
   1063e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   10642:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   10646:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   1064a:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   1064e:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   10650:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   10654:	3006      	adds	r0, #6
   10656:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   1065a:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   1065e:	4770      	bx	lr

00010660 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   10660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10664:	b088      	sub	sp, #32
   10666:	ad01      	add	r5, sp, #4
   10668:	4684      	mov	ip, r0
   1066a:	46ae      	mov	lr, r5
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   1066c:	2000      	movs	r0, #0
   1066e:	e040      	b.n	106f2 <uint64_to_str+0x92>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   10670:	19f6      	adds	r6, r6, r7
   10672:	eb43 0391 	adc.w	r3, r3, r1, lsr #2
        q64 += (q64 >> 4);
   10676:	0937      	lsrs	r7, r6, #4
   10678:	ea47 7703 	orr.w	r7, r7, r3, lsl #28
   1067c:	19bf      	adds	r7, r7, r6
   1067e:	eb43 1313 	adc.w	r3, r3, r3, lsr #4
        q64 += (q64 >> 8);
   10682:	0a3e      	lsrs	r6, r7, #8
   10684:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
   10688:	19f7      	adds	r7, r6, r7
   1068a:	eb43 2313 	adc.w	r3, r3, r3, lsr #8
        q64 += (q64 >> 16);
   1068e:	0c3e      	lsrs	r6, r7, #16
   10690:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   10694:	19f6      	adds	r6, r6, r7
   10696:	eb43 4313 	adc.w	r3, r3, r3, lsr #16
        q64 += (q64 >> 32);
   1069a:	199e      	adds	r6, r3, r6
   1069c:	f143 0300 	adc.w	r3, r3, #0
        q64 >>= 3;
   106a0:	08f6      	lsrs	r6, r6, #3
   106a2:	ea46 7643 	orr.w	r6, r6, r3, lsl #29
   106a6:	08db      	lsrs	r3, r3, #3
        return q64 + ((r64 + 6) >> 4);
   106a8:	f11c 0c06 	adds.w	ip, ip, #6
        r64 = ui64Val - q64*10;
   106ac:	ea4f 0786 	mov.w	r7, r6, lsl #2
   106b0:	ea4f 0883 	mov.w	r8, r3, lsl #2
        return q64 + ((r64 + 6) >> 4);
   106b4:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   106b8:	ea48 7896 	orr.w	r8, r8, r6, lsr #30
   106bc:	19bf      	adds	r7, r7, r6
   106be:	eb43 0808 	adc.w	r8, r3, r8
   106c2:	19ff      	adds	r7, r7, r7
   106c4:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   106c8:	ebbc 0c07 	subs.w	ip, ip, r7
   106cc:	eb61 0108 	sbc.w	r1, r1, r8
   106d0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   106d4:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
   106d8:	eb1c 0c06 	adds.w	ip, ip, r6
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   106dc:	eb0c 068c 	add.w	r6, ip, ip, lsl #2
   106e0:	eba4 0446 	sub.w	r4, r4, r6, lsl #1

        tbuf[ix++] = uMod + '0';
   106e4:	f104 0430 	add.w	r4, r4, #48	@ 0x30
   106e8:	f80e 4b01 	strb.w	r4, [lr], #1
        return q64 + ((r64 + 6) >> 4);
   106ec:	eb43 1111 	adc.w	r1, r3, r1, lsr #4
        tbuf[ix++] = uMod + '0';
   106f0:	3001      	adds	r0, #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   106f2:	ea4f 069c 	mov.w	r6, ip, lsr #2
   106f6:	ea4f 075c 	mov.w	r7, ip, lsr #1
   106fa:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
   106fe:	ea47 77c1 	orr.w	r7, r7, r1, lsl #31
   10702:	084b      	lsrs	r3, r1, #1
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   10704:	4664      	mov	r4, ip
    if ( ui64Val >> 32 )
   10706:	2900      	cmp	r1, #0
   10708:	d1b2      	bne.n	10670 <uint64_to_str+0x10>
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1070a:	0863      	lsrs	r3, r4, #1
   1070c:	eb03 0394 	add.w	r3, r3, r4, lsr #2
        q32 += (q32 >> 4);
   10710:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   10714:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   10718:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   1071c:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   1071e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   10722:	1da6      	adds	r6, r4, #6
   10724:	eba6 0641 	sub.w	r6, r6, r1, lsl #1
   10728:	4621      	mov	r1, r4
   1072a:	eb03 1416 	add.w	r4, r3, r6, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   1072e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10732:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   10736:	3330      	adds	r3, #48	@ 0x30
   10738:	f80e 3b01 	strb.w	r3, [lr], #1
   1073c:	3001      	adds	r0, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
   1073e:	2c00      	cmp	r4, #0
   10740:	d1e3      	bne.n	1070a <uint64_to_str+0xaa>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   10742:	b152      	cbz	r2, 1075a <uint64_to_str+0xfa>
   10744:	4606      	mov	r6, r0
   10746:	182b      	adds	r3, r5, r0
   10748:	1e51      	subs	r1, r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
   1074a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1074e:	f801 4f01 	strb.w	r4, [r1, #1]!
        while ( ix-- )
   10752:	42ab      	cmp	r3, r5
   10754:	d1f9      	bne.n	1074a <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   10756:	2300      	movs	r3, #0
   10758:	5593      	strb	r3, [r2, r6]
    }

    return iNumDig;
}
   1075a:	b008      	add	sp, #32
   1075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010760 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   10760:	4b01      	ldr	r3, [pc, #4]	@ (10768 <am_util_stdio_printf_init+0x8>)
   10762:	6018      	str	r0, [r3, #0]
}
   10764:	4770      	bx	lr
   10766:	bf00      	nop
   10768:	1000adb8 	.word	0x1000adb8

0001076c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   10770:	780b      	ldrb	r3, [r1, #0]
{
   10772:	b089      	sub	sp, #36	@ 0x24
   10774:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
   10776:	2b00      	cmp	r3, #0
   10778:	f000 809b 	beq.w	108b2 <am_util_stdio_vsprintf+0x146>
   1077c:	460d      	mov	r5, r1
   1077e:	4692      	mov	sl, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   10780:	2600      	movs	r6, #0
   10782:	e00b      	b.n	1079c <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   10784:	b124      	cbz	r4, 10790 <am_util_stdio_vsprintf+0x24>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   10786:	2b0a      	cmp	r3, #10
   10788:	f000 8088 	beq.w	1089c <am_util_stdio_vsprintf+0x130>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   1078c:	f804 3b01 	strb.w	r3, [r4], #1
            }

            ++pcFmt;
            ++ui32CharCnt;
   10790:	3601      	adds	r6, #1
            ++pcFmt;
   10792:	463d      	mov	r5, r7
    while ( *pcFmt != 0x0 )
   10794:	782b      	ldrb	r3, [r5, #0]
   10796:	2b00      	cmp	r3, #0
   10798:	f000 808c 	beq.w	108b4 <am_util_stdio_vsprintf+0x148>
        if ( *pcFmt != '%' )
   1079c:	2b25      	cmp	r3, #37	@ 0x25
            ++pcFmt;
   1079e:	f105 0701 	add.w	r7, r5, #1
        if ( *pcFmt != '%' )
   107a2:	d1ef      	bne.n	10784 <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   107a4:	786a      	ldrb	r2, [r5, #1]
   107a6:	2a30      	cmp	r2, #48	@ 0x30
        {
            ui8PadChar = '0';
   107a8:	bf03      	ittte	eq
   107aa:	4691      	moveq	r9, r2
    if ( *pcStr == '-')
   107ac:	78aa      	ldrbeq	r2, [r5, #2]
            ++pcFmt;
   107ae:	1caf      	addeq	r7, r5, #2
        ui8PadChar = ' ';
   107b0:	f04f 0920 	movne.w	r9, #32
    if ( *pcStr == '-')
   107b4:	2a2d      	cmp	r2, #45	@ 0x2d
   107b6:	f000 8084 	beq.w	108c2 <am_util_stdio_vsprintf+0x156>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   107ba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   107be:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   107c2:	2b09      	cmp	r3, #9
   107c4:	463d      	mov	r5, r7
    bool bNeg = false;
   107c6:	46e6      	mov	lr, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   107c8:	f200 8086 	bhi.w	108d8 <am_util_stdio_vsprintf+0x16c>
   107cc:	4629      	mov	r1, r5
   107ce:	2300      	movs	r3, #0
        ui32Val *= 10;
   107d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   107d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   107d8:	4688      	mov	r8, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   107da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   107de:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
   107e2:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   107e4:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   107e8:	d9f2      	bls.n	107d0 <am_util_stdio_vsprintf+0x64>
   107ea:	f10c 0c01 	add.w	ip, ip, #1
   107ee:	ebac 0c05 	sub.w	ip, ip, r5
        ++uCnt;
   107f2:	44e0      	add	r8, ip

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
        pcFmt += ui32NumChars;
   107f4:	eb07 0508 	add.w	r5, r7, r8

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   107f8:	f817 2008 	ldrb.w	r2, [r7, r8]
    return bNeg ? -ui32Val : ui32Val;
   107fc:	f1be 0f00 	cmp.w	lr, #0
   10800:	d000      	beq.n	10804 <am_util_stdio_vsprintf+0x98>
   10802:	425b      	negs	r3, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   10804:	2a73      	cmp	r2, #115	@ 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   10806:	4698      	mov	r8, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   10808:	f000 80f9 	beq.w	109fe <am_util_stdio_vsprintf+0x292>
   1080c:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   10810:	2a2e      	cmp	r2, #46	@ 0x2e
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   10812:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
        if (*pcFmt == '.')
   10816:	f000 80c3 	beq.w	109a0 <am_util_stdio_vsprintf+0x234>
        iPrecision = 6;             // printf() default precision for %f is 6
   1081a:	2706      	movs	r7, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1081c:	2a6c      	cmp	r2, #108	@ 0x6c
   1081e:	d104      	bne.n	1082a <am_util_stdio_vsprintf+0xbe>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   10820:	786a      	ldrb	r2, [r5, #1]
   10822:	2a6c      	cmp	r2, #108	@ 0x6c
   10824:	f000 812f 	beq.w	10a86 <am_util_stdio_vsprintf+0x31a>
            pcFmt++;
   10828:	3501      	adds	r5, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   1082a:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
   1082e:	2932      	cmp	r1, #50	@ 0x32
   10830:	d854      	bhi.n	108dc <am_util_stdio_vsprintf+0x170>
   10832:	e8df f011 	tbh	[pc, r1, lsl #1]
   10836:	0059      	.short	0x0059
   10838:	00530053 	.word	0x00530053
   1083c:	00530053 	.word	0x00530053
   10840:	00530053 	.word	0x00530053
   10844:	00530053 	.word	0x00530053
   10848:	00530053 	.word	0x00530053
   1084c:	00530053 	.word	0x00530053
   10850:	00530053 	.word	0x00530053
   10854:	00530053 	.word	0x00530053
   10858:	02750053 	.word	0x02750053
   1085c:	00530053 	.word	0x00530053
   10860:	00530053 	.word	0x00530053
   10864:	00530053 	.word	0x00530053
   10868:	00530053 	.word	0x00530053
   1086c:	00530053 	.word	0x00530053
   10870:	01b100ab 	.word	0x01b100ab
   10874:	00590053 	.word	0x00590053
   10878:	00530053 	.word	0x00530053
   1087c:	005301b1 	.word	0x005301b1
   10880:	00530053 	.word	0x00530053
   10884:	00530053 	.word	0x00530053
   10888:	00530053 	.word	0x00530053
   1088c:	00530053 	.word	0x00530053
   10890:	005300e3 	.word	0x005300e3
   10894:	005301c2 	.word	0x005301c2
   10898:	02980053 	.word	0x02980053
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1089c:	4acf      	ldr	r2, [pc, #828]	@ (10bdc <am_util_stdio_vsprintf+0x470>)
   1089e:	7812      	ldrb	r2, [r2, #0]
   108a0:	2a00      	cmp	r2, #0
   108a2:	f43f af73 	beq.w	1078c <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
   108a6:	230d      	movs	r3, #13
   108a8:	f804 3b01 	strb.w	r3, [r4], #1
                    ++ui32CharCnt;
   108ac:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   108ae:	782b      	ldrb	r3, [r5, #0]
   108b0:	e76c      	b.n	1078c <am_util_stdio_vsprintf+0x20>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   108b2:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   108b4:	b10c      	cbz	r4, 108ba <am_util_stdio_vsprintf+0x14e>
    {
        *pcBuf = 0x0;
   108b6:	2300      	movs	r3, #0
   108b8:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
   108ba:	4630      	mov	r0, r6
   108bc:	b009      	add	sp, #36	@ 0x24
   108be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   108c2:	787a      	ldrb	r2, [r7, #1]
   108c4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
        uCnt++;
   108c8:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   108cc:	2b09      	cmp	r3, #9
        pcStr++;
   108ce:	eb07 050c 	add.w	r5, r7, ip
        bNeg = true;
   108d2:	46e6      	mov	lr, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   108d4:	f67f af7a 	bls.w	107cc <am_util_stdio_vsprintf+0x60>
   108d8:	2300      	movs	r3, #0
   108da:	e78f      	b.n	107fc <am_util_stdio_vsprintf+0x90>
                if ( pcBuf )
   108dc:	b10c      	cbz	r4, 108e2 <am_util_stdio_vsprintf+0x176>
                    *pcBuf++ = *pcFmt;
   108de:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
   108e2:	3601      	adds	r6, #1
        ++pcFmt;
   108e4:	3501      	adds	r5, #1
   108e6:	e755      	b.n	10794 <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
   108e8:	2c00      	cmp	r4, #0
   108ea:	d0fb      	beq.n	108e4 <am_util_stdio_vsprintf+0x178>
                    float fValue = va_arg(pArgs, double);
   108ec:	f10a 0a07 	add.w	sl, sl, #7
   108f0:	f02a 0a07 	bic.w	sl, sl, #7
   108f4:	e8fa 0102 	ldrd	r0, r1, [sl], #8
   108f8:	f7fc f878 	bl	c9ec <__aeabi_d2f>
   108fc:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   10900:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   10904:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   10906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   1090a:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
   1090c:	f000 81e1 	beq.w	10cd2 <am_util_stdio_vsprintf+0x566>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   10910:	f3c0 5cc7 	ubfx	ip, r0, #23, #8
   10914:	f1ac 017f 	sub.w	r1, ip, #127	@ 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   10918:	f3c0 0216 	ubfx	r2, r0, #0, #23
    if (iExp2 >= 31)
   1091c:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1091e:	f442 0e00 	orr.w	lr, r2, #8388608	@ 0x800000
    if (iExp2 >= 31)
   10922:	f300 8348 	bgt.w	10fb6 <am_util_stdio_vsprintf+0x84a>
    else if (iExp2 < -23)
   10926:	f111 0f17 	cmn.w	r1, #23
   1092a:	f2c0 81d2 	blt.w	10cd2 <am_util_stdio_vsprintf+0x566>
    else if (iExp2 >= 23)
   1092e:	2916      	cmp	r1, #22
   10930:	f340 81b5 	ble.w	10c9e <am_util_stdio_vsprintf+0x532>
    if (unFloatValue.I32 < 0)
   10934:	2800      	cmp	r0, #0
        *pcBuf++ = '-';
   10936:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   10938:	f2c0 825f 	blt.w	10dfa <am_util_stdio_vsprintf+0x68e>
        i32IntPart = i32Significand << (iExp2 - 23);
   1093c:	f1ac 0c96 	sub.w	ip, ip, #150	@ 0x96
   10940:	fa0e f00c 	lsl.w	r0, lr, ip
            uint64_to_str(i32IntPart, pcBuf);
   10944:	17c1      	asrs	r1, r0, #31
   10946:	f7ff fe8b 	bl	10660 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   1094a:	7813      	ldrb	r3, [r2, #0]
   1094c:	f04f 0800 	mov.w	r8, #0
   10950:	2b00      	cmp	r3, #0
   10952:	f000 8366 	beq.w	11022 <am_util_stdio_vsprintf+0x8b6>
   10956:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1095a:	2b00      	cmp	r3, #0
   1095c:	d1fb      	bne.n	10956 <am_util_stdio_vsprintf+0x1ea>
    *pcBuf++ = '.';
   1095e:	232e      	movs	r3, #46	@ 0x2e
   10960:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   10962:	f1b8 0f00 	cmp.w	r8, #0
   10966:	f040 8301 	bne.w	10f6c <am_util_stdio_vsprintf+0x800>
        *pcBuf++ = '0';
   1096a:	1c91      	adds	r1, r2, #2
   1096c:	2330      	movs	r3, #48	@ 0x30
   1096e:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   10970:	1b08      	subs	r0, r1, r4
    *pcBuf = 0x00;
   10972:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   10974:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
   10976:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
   10978:	f280 81ae 	bge.w	10cd8 <am_util_stdio_vsprintf+0x56c>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1097c:	1c43      	adds	r3, r0, #1
   1097e:	f000 81a8 	beq.w	10cd2 <am_util_stdio_vsprintf+0x566>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   10982:	3002      	adds	r0, #2
   10984:	f000 8317 	beq.w	10fb6 <am_util_stdio_vsprintf+0x84a>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   10988:	4b95      	ldr	r3, [pc, #596]	@ (10be0 <am_util_stdio_vsprintf+0x474>)
                        iVal = 3;
   1098a:	e1a3      	b.n	10cd4 <am_util_stdio_vsprintf+0x568>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1098c:	f10a 0304 	add.w	r3, sl, #4
                if ( pcBuf )
   10990:	b11c      	cbz	r4, 1099a <am_util_stdio_vsprintf+0x22e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   10992:	f8da 2000 	ldr.w	r2, [sl]
   10996:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
   1099a:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1099c:	469a      	mov	sl, r3
                break;
   1099e:	e7a1      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
    if ( *pcStr == '-')
   109a0:	786a      	ldrb	r2, [r5, #1]
   109a2:	2a2d      	cmp	r2, #45	@ 0x2d
            ++pcFmt;
   109a4:	f105 0c01 	add.w	ip, r5, #1
    if ( *pcStr == '-')
   109a8:	f000 8145 	beq.w	10c36 <am_util_stdio_vsprintf+0x4ca>
    uint32_t ui32Val = 0, uCnt = 0;
   109ac:	2700      	movs	r7, #0
   109ae:	4665      	mov	r5, ip
    bool bNeg = false;
   109b0:	9700      	str	r7, [sp, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   109b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
   109b6:	2909      	cmp	r1, #9
   109b8:	f200 82d6 	bhi.w	10f68 <am_util_stdio_vsprintf+0x7fc>
   109bc:	4628      	mov	r0, r5
   109be:	2100      	movs	r1, #0
   109c0:	f8cd 9004 	str.w	r9, [sp, #4]
        ui32Val *= 10;
   109c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   109c8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   109cc:	4686      	mov	lr, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   109ce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   109d2:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
   109d6:	f1b9 0f09 	cmp.w	r9, #9
        ui32Val += (*pcStr - '0');
   109da:	f1a1 0130 	sub.w	r1, r1, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   109de:	d9f1      	bls.n	109c4 <am_util_stdio_vsprintf+0x258>
   109e0:	1c7a      	adds	r2, r7, #1
   109e2:	1b52      	subs	r2, r2, r5
        ++uCnt;
   109e4:	4496      	add	lr, r2
   109e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
        if ( *pcFmt == 'l' )
   109ea:	f81c 200e 	ldrb.w	r2, [ip, lr]
            pcFmt += ui32NumChars;
   109ee:	eb0c 050e 	add.w	r5, ip, lr
    return bNeg ? -ui32Val : ui32Val;
   109f2:	9800      	ldr	r0, [sp, #0]
   109f4:	b100      	cbz	r0, 109f8 <am_util_stdio_vsprintf+0x28c>
   109f6:	4249      	negs	r1, r1
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   109f8:	460f      	mov	r7, r1
            pcFmt += ui32NumChars;
   109fa:	e70f      	b.n	1081c <am_util_stdio_vsprintf+0xb0>
        switch ( *pcFmt )
   109fc:	46d8      	mov	r8, fp
                pcStr = va_arg(pArgs, char *);
   109fe:	f85a bb04 	ldr.w	fp, [sl], #4
    if ( !pcBuf )
   10a02:	f1bb 0f00 	cmp.w	fp, #0
   10a06:	f000 816a 	beq.w	10cde <am_util_stdio_vsprintf+0x572>
    while ( *pcBuf++ )
   10a0a:	4658      	mov	r0, fp
   10a0c:	f810 7b01 	ldrb.w	r7, [r0], #1
   10a10:	2f00      	cmp	r7, #0
   10a12:	f000 81aa 	beq.w	10d6a <am_util_stdio_vsprintf+0x5fe>
   10a16:	f7fc f933 	bl	cc80 <strlen>
                if ( iWidth > 0 )
   10a1a:	f1b8 0f00 	cmp.w	r8, #0
   10a1e:	f100 0101 	add.w	r1, r0, #1
   10a22:	dd02      	ble.n	10a2a <am_util_stdio_vsprintf+0x2be>
                    if ( ui32strlen < iWidth )
   10a24:	4588      	cmp	r8, r1
   10a26:	f200 809f 	bhi.w	10b68 <am_util_stdio_vsprintf+0x3fc>
   10a2a:	465b      	mov	r3, fp
                    if ( pcBuf )
   10a2c:	2c00      	cmp	r4, #0
   10a2e:	f000 80a7 	beq.w	10b80 <am_util_stdio_vsprintf+0x414>
                        *pcBuf++ = *pcStr;
   10a32:	7027      	strb	r7, [r4, #0]
   10a34:	461a      	mov	r2, r3
                while (*pcStr != 0x0)
   10a36:	f813 7f01 	ldrb.w	r7, [r3, #1]!
                        *pcBuf++ = *pcStr;
   10a3a:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
   10a3c:	2f00      	cmp	r7, #0
   10a3e:	d1f8      	bne.n	10a32 <am_util_stdio_vsprintf+0x2c6>
                if ( iWidth )
   10a40:	f1cb 0301 	rsb	r3, fp, #1
   10a44:	4433      	add	r3, r6
                    ++ui32CharCnt;
   10a46:	18d6      	adds	r6, r2, r3
                if ( iWidth )
   10a48:	f1b8 0f00 	cmp.w	r8, #0
   10a4c:	f43f af4a 	beq.w	108e4 <am_util_stdio_vsprintf+0x178>
                    iWidth = -iWidth;
   10a50:	f1c8 0300 	rsb	r3, r8, #0
                    if ( ui32strlen < iWidth )
   10a54:	428b      	cmp	r3, r1
   10a56:	f67f af45 	bls.w	108e4 <am_util_stdio_vsprintf+0x178>
                        iWidth -= ui32strlen;
   10a5a:	1a59      	subs	r1, r3, r1
    if ( i32NumChars <= 0 )
   10a5c:	2900      	cmp	r1, #0
                        iWidth -= ui32strlen;
   10a5e:	4688      	mov	r8, r1
    if ( i32NumChars <= 0 )
   10a60:	f340 81d6 	ble.w	10e10 <am_util_stdio_vsprintf+0x6a4>
    while ( i32NumChars-- )
   10a64:	f108 33ff 	add.w	r3, r8, #4294967295
        if ( pcBuf )
   10a68:	b13c      	cbz	r4, 10a7a <am_util_stdio_vsprintf+0x30e>
   10a6a:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   10a6c:	3b01      	subs	r3, #1
   10a6e:	1c58      	adds	r0, r3, #1
            *pcBuf++ = cPadChar;
   10a70:	f882 9000 	strb.w	r9, [r2]
   10a74:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   10a78:	d1f8      	bne.n	10a6c <am_util_stdio_vsprintf+0x300>
                        ui32CharCnt += iWidth;
   10a7a:	440e      	add	r6, r1
                        pcBuf += pcBuf ? iWidth : 0;
   10a7c:	2c00      	cmp	r4, #0
   10a7e:	f43f af31 	beq.w	108e4 <am_util_stdio_vsprintf+0x178>
   10a82:	440c      	add	r4, r1
                        iWidth = 0;
   10a84:	e72e      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
        switch ( *pcFmt )
   10a86:	78aa      	ldrb	r2, [r5, #2]
   10a88:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
                pcFmt++;
   10a8c:	3502      	adds	r5, #2
        switch ( *pcFmt )
   10a8e:	2932      	cmp	r1, #50	@ 0x32
   10a90:	f63f af24 	bhi.w	108dc <am_util_stdio_vsprintf+0x170>
   10a94:	a001      	add	r0, pc, #4	@ (adr r0, 10a9c <am_util_stdio_vsprintf+0x330>)
   10a96:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10a9a:	bf00      	nop
   10a9c:	000108e9 	.word	0x000108e9
   10aa0:	000108dd 	.word	0x000108dd
   10aa4:	000108dd 	.word	0x000108dd
   10aa8:	000108dd 	.word	0x000108dd
   10aac:	000108dd 	.word	0x000108dd
   10ab0:	000108dd 	.word	0x000108dd
   10ab4:	000108dd 	.word	0x000108dd
   10ab8:	000108dd 	.word	0x000108dd
   10abc:	000108dd 	.word	0x000108dd
   10ac0:	000108dd 	.word	0x000108dd
   10ac4:	000108dd 	.word	0x000108dd
   10ac8:	000108dd 	.word	0x000108dd
   10acc:	000108dd 	.word	0x000108dd
   10ad0:	000108dd 	.word	0x000108dd
   10ad4:	000108dd 	.word	0x000108dd
   10ad8:	000108dd 	.word	0x000108dd
   10adc:	000108dd 	.word	0x000108dd
   10ae0:	000108dd 	.word	0x000108dd
   10ae4:	00010e15 	.word	0x00010e15
   10ae8:	000108dd 	.word	0x000108dd
   10aec:	000108dd 	.word	0x000108dd
   10af0:	000108dd 	.word	0x000108dd
   10af4:	000108dd 	.word	0x000108dd
   10af8:	000108dd 	.word	0x000108dd
   10afc:	000108dd 	.word	0x000108dd
   10b00:	000108dd 	.word	0x000108dd
   10b04:	000108dd 	.word	0x000108dd
   10b08:	000108dd 	.word	0x000108dd
   10b0c:	000108dd 	.word	0x000108dd
   10b10:	0001098d 	.word	0x0001098d
   10b14:	00010be5 	.word	0x00010be5
   10b18:	000108dd 	.word	0x000108dd
   10b1c:	000108e9 	.word	0x000108e9
   10b20:	000108dd 	.word	0x000108dd
   10b24:	000108dd 	.word	0x000108dd
   10b28:	00010be5 	.word	0x00010be5
   10b2c:	000108dd 	.word	0x000108dd
   10b30:	000108dd 	.word	0x000108dd
   10b34:	000108dd 	.word	0x000108dd
   10b38:	000108dd 	.word	0x000108dd
   10b3c:	000108dd 	.word	0x000108dd
   10b40:	000108dd 	.word	0x000108dd
   10b44:	000108dd 	.word	0x000108dd
   10b48:	000108dd 	.word	0x000108dd
   10b4c:	000108dd 	.word	0x000108dd
   10b50:	000109fd 	.word	0x000109fd
   10b54:	000108dd 	.word	0x000108dd
   10b58:	00010c25 	.word	0x00010c25
   10b5c:	000108dd 	.word	0x000108dd
   10b60:	000108dd 	.word	0x000108dd
   10b64:	00010e8f 	.word	0x00010e8f
                        iWidth -= ui32strlen;
   10b68:	eba8 0801 	sub.w	r8, r8, r1
    if ( i32NumChars <= 0 )
   10b6c:	f1b8 0f00 	cmp.w	r8, #0
   10b70:	f300 8100 	bgt.w	10d74 <am_util_stdio_vsprintf+0x608>
                        pcBuf += pcBuf ? iWidth : 0;
   10b74:	2c00      	cmp	r4, #0
   10b76:	f040 80cf 	bne.w	10d18 <am_util_stdio_vsprintf+0x5ac>
   10b7a:	465b      	mov	r3, fp
                        iWidth = 0;
   10b7c:	f04f 0800 	mov.w	r8, #0
                while (*pcStr != 0x0)
   10b80:	461a      	mov	r2, r3
   10b82:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   10b86:	2c00      	cmp	r4, #0
   10b88:	f43f af5a 	beq.w	10a40 <am_util_stdio_vsprintf+0x2d4>
   10b8c:	461a      	mov	r2, r3
   10b8e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   10b92:	2c00      	cmp	r4, #0
   10b94:	d1f4      	bne.n	10b80 <am_util_stdio_vsprintf+0x414>
   10b96:	e753      	b.n	10a40 <am_util_stdio_vsprintf+0x2d4>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   10b98:	f85a 0b04 	ldr.w	r0, [sl], #4
   10b9c:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
   10b9e:	2900      	cmp	r1, #0
   10ba0:	db2a      	blt.n	10bf8 <am_util_stdio_vsprintf+0x48c>
                    ui64Val = i64Val;
   10ba2:	4684      	mov	ip, r0
   10ba4:	4688      	mov	r8, r1
                if ( iWidth )
   10ba6:	2b00      	cmp	r3, #0
   10ba8:	f040 8191 	bne.w	10ece <am_util_stdio_vsprintf+0x762>
                iVal = uint64_to_str(ui64Val, pcBuf);
   10bac:	4622      	mov	r2, r4
   10bae:	f7ff fd57 	bl	10660 <uint64_to_str>
                if ( pcBuf )
   10bb2:	b104      	cbz	r4, 10bb6 <am_util_stdio_vsprintf+0x44a>
                    pcBuf += iVal;
   10bb4:	4404      	add	r4, r0
                ui32CharCnt += iVal;
   10bb6:	4406      	add	r6, r0
                break;
   10bb8:	e694      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   10bba:	f85a cb04 	ldr.w	ip, [sl], #4
   10bbe:	f04f 0800 	mov.w	r8, #0
                if ( iWidth )
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	d13c      	bne.n	10c40 <am_util_stdio_vsprintf+0x4d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   10bc6:	4660      	mov	r0, ip
   10bc8:	4641      	mov	r1, r8
   10bca:	4622      	mov	r2, r4
   10bcc:	f7ff fd48 	bl	10660 <uint64_to_str>
                if ( pcBuf )
   10bd0:	2c00      	cmp	r4, #0
   10bd2:	d1ef      	bne.n	10bb4 <am_util_stdio_vsprintf+0x448>
                    pcBuf += iVal;
   10bd4:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
   10bd6:	4406      	add	r6, r0
                break;
   10bd8:	e684      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
   10bda:	bf00      	nop
   10bdc:	1000acb4 	.word	0x1000acb4
   10be0:	003f2e3f 	.word	0x003f2e3f
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   10be4:	f10a 0a07 	add.w	sl, sl, #7
   10be8:	f02a 0a07 	bic.w	sl, sl, #7
   10bec:	f8da 1004 	ldr.w	r1, [sl, #4]
   10bf0:	f85a 0b08 	ldr.w	r0, [sl], #8
                if ( i64Val < 0 )
   10bf4:	2900      	cmp	r1, #0
   10bf6:	dad4      	bge.n	10ba2 <am_util_stdio_vsprintf+0x436>
                    ui64Val = -i64Val;          // Get absolute value
   10bf8:	f1d0 0c00 	rsbs	ip, r0, #0
   10bfc:	eb61 0841 	sbc.w	r8, r1, r1, lsl #1
                if ( iWidth )
   10c00:	2b00      	cmp	r3, #0
   10c02:	f040 81b8 	bne.w	10f76 <am_util_stdio_vsprintf+0x80a>
                    ++ui32CharCnt;
   10c06:	3601      	adds	r6, #1
                        if ( pcBuf )
   10c08:	2c00      	cmp	r4, #0
   10c0a:	f000 81a3 	beq.w	10f54 <am_util_stdio_vsprintf+0x7e8>
                            *pcBuf++ = '-';
   10c0e:	4622      	mov	r2, r4
   10c10:	232d      	movs	r3, #45	@ 0x2d
   10c12:	f802 3b01 	strb.w	r3, [r2], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
   10c16:	4660      	mov	r0, ip
   10c18:	4641      	mov	r1, r8
   10c1a:	f7ff fd21 	bl	10660 <uint64_to_str>
                            *pcBuf++ = '-';
   10c1e:	4614      	mov	r4, r2
                    pcBuf += iVal;
   10c20:	4404      	add	r4, r0
   10c22:	e7c8      	b.n	10bb6 <am_util_stdio_vsprintf+0x44a>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   10c24:	f10a 0a07 	add.w	sl, sl, #7
   10c28:	f02a 0a07 	bic.w	sl, sl, #7
   10c2c:	f8da 8004 	ldr.w	r8, [sl, #4]
   10c30:	f85a cb08 	ldr.w	ip, [sl], #8
   10c34:	e7c5      	b.n	10bc2 <am_util_stdio_vsprintf+0x456>
        uCnt++;
   10c36:	2701      	movs	r7, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   10c38:	78aa      	ldrb	r2, [r5, #2]
        bNeg = true;
   10c3a:	9700      	str	r7, [sp, #0]
        pcStr++;
   10c3c:	3502      	adds	r5, #2
        uCnt++;
   10c3e:	e6b8      	b.n	109b2 <am_util_stdio_vsprintf+0x246>
    while ( ui64Val )
   10c40:	ea5c 0308 	orrs.w	r3, ip, r8
   10c44:	f000 81e9 	beq.w	1101a <am_util_stdio_vsprintf+0x8ae>
    int iNDigits = ui64Val ? 0 : 1;
   10c48:	2700      	movs	r7, #0
   10c4a:	9400      	str	r4, [sp, #0]
    while ( ui64Val )
   10c4c:	4660      	mov	r0, ip
    int iNDigits = ui64Val ? 0 : 1;
   10c4e:	463c      	mov	r4, r7
    while ( ui64Val )
   10c50:	4641      	mov	r1, r8
    int iNDigits = ui64Val ? 0 : 1;
   10c52:	4667      	mov	r7, ip
        ui64Val = divu64_10(ui64Val);
   10c54:	f7ff fca8 	bl	105a8 <divu64_10>
    while ( ui64Val )
   10c58:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
   10c5c:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   10c60:	d1f8      	bne.n	10c54 <am_util_stdio_vsprintf+0x4e8>
   10c62:	46bc      	mov	ip, r7
   10c64:	4627      	mov	r7, r4
   10c66:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   10c68:	ebab 0707 	sub.w	r7, fp, r7
    if ( i32NumChars <= 0 )
   10c6c:	2f00      	cmp	r7, #0
   10c6e:	f340 8197 	ble.w	10fa0 <am_util_stdio_vsprintf+0x834>
    while ( i32NumChars-- )
   10c72:	1e7b      	subs	r3, r7, #1
        if ( pcBuf )
   10c74:	b13c      	cbz	r4, 10c86 <am_util_stdio_vsprintf+0x51a>
   10c76:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   10c78:	3b01      	subs	r3, #1
   10c7a:	1c59      	adds	r1, r3, #1
            *pcBuf++ = cPadChar;
   10c7c:	f882 9000 	strb.w	r9, [r2]
   10c80:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   10c84:	d1f8      	bne.n	10c78 <am_util_stdio_vsprintf+0x50c>
                    ui32CharCnt += iWidth;
   10c86:	443e      	add	r6, r7
                    pcBuf += pcBuf ? iWidth : 0;
   10c88:	2c00      	cmp	r4, #0
   10c8a:	f000 8183 	beq.w	10f94 <am_util_stdio_vsprintf+0x828>
   10c8e:	443c      	add	r4, r7
                iVal = uint64_to_str(ui64Val, pcBuf);
   10c90:	4622      	mov	r2, r4
   10c92:	4660      	mov	r0, ip
   10c94:	4641      	mov	r1, r8
   10c96:	f7ff fce3 	bl	10660 <uint64_to_str>
                    pcBuf += iVal;
   10c9a:	4404      	add	r4, r0
   10c9c:	e78b      	b.n	10bb6 <am_util_stdio_vsprintf+0x44a>
    else if (iExp2 >= 0)
   10c9e:	2900      	cmp	r1, #0
   10ca0:	db6b      	blt.n	10d7a <am_util_stdio_vsprintf+0x60e>
    if (unFloatValue.I32 < 0)
   10ca2:	2800      	cmp	r0, #0
                    *pcBuf++ = '\r';
   10ca4:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   10ca6:	da02      	bge.n	10cae <am_util_stdio_vsprintf+0x542>
        *pcBuf++ = '-';
   10ca8:	232d      	movs	r3, #45	@ 0x2d
   10caa:	f802 3b01 	strb.w	r3, [r2], #1
        i32IntPart = i32Significand >> (23 - iExp2);
   10cae:	f1c1 0117 	rsb	r1, r1, #23
   10cb2:	fa4e f001 	asr.w	r0, lr, r1
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   10cb6:	f1ac 087e 	sub.w	r8, ip, #126	@ 0x7e
            uint64_to_str(i32IntPart, pcBuf);
   10cba:	17c1      	asrs	r1, r0, #31
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   10cbc:	fa0e f808 	lsl.w	r8, lr, r8
            uint64_to_str(i32IntPart, pcBuf);
   10cc0:	f7ff fcce 	bl	10660 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   10cc4:	7813      	ldrb	r3, [r2, #0]
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   10cc6:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
        while (*pcBuf)    // Get to end of new string
   10cca:	2b00      	cmp	r3, #0
   10ccc:	f47f ae43 	bne.w	10956 <am_util_stdio_vsprintf+0x1ea>
   10cd0:	e645      	b.n	1095e <am_util_stdio_vsprintf+0x1f2>
   10cd2:	4bc0      	ldr	r3, [pc, #768]	@ (10fd4 <am_util_stdio_vsprintf+0x868>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   10cd4:	6023      	str	r3, [r4, #0]
   10cd6:	2003      	movs	r0, #3
                    ui32CharCnt += iVal;
   10cd8:	4406      	add	r6, r0
                    pcBuf += iVal;
   10cda:	4404      	add	r4, r0
   10cdc:	e602      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
                if ( iWidth > 0 )
   10cde:	f1b8 0f00 	cmp.w	r8, #0
   10ce2:	f340 808e 	ble.w	10e02 <am_util_stdio_vsprintf+0x696>
    while ( i32NumChars-- )
   10ce6:	f108 38ff 	add.w	r8, r8, #4294967295
        return ui32RetVal;
   10cea:	4659      	mov	r1, fp
        if ( pcBuf )
   10cec:	b144      	cbz	r4, 10d00 <am_util_stdio_vsprintf+0x594>
   10cee:	4642      	mov	r2, r8
   10cf0:	4623      	mov	r3, r4
    while ( i32NumChars-- )
   10cf2:	3a01      	subs	r2, #1
   10cf4:	1c57      	adds	r7, r2, #1
            *pcBuf++ = cPadChar;
   10cf6:	f883 9000 	strb.w	r9, [r3]
   10cfa:	f103 0301 	add.w	r3, r3, #1
    while ( i32NumChars-- )
   10cfe:	d1f8      	bne.n	10cf2 <am_util_stdio_vsprintf+0x586>
                        ui32CharCnt += iWidth;
   10d00:	f108 0301 	add.w	r3, r8, #1
                while (*pcStr != 0x0)
   10d04:	f89b 7000 	ldrb.w	r7, [fp]
                        ui32CharCnt += iWidth;
   10d08:	441e      	add	r6, r3
                        pcBuf += pcBuf ? iWidth : 0;
   10d0a:	2c00      	cmp	r4, #0
   10d0c:	f000 814a 	beq.w	10fa4 <am_util_stdio_vsprintf+0x838>
   10d10:	441c      	add	r4, r3
                while (*pcStr != 0x0)
   10d12:	2f00      	cmp	r7, #0
   10d14:	f43f ade6 	beq.w	108e4 <am_util_stdio_vsprintf+0x178>
   10d18:	465b      	mov	r3, fp
                        iWidth = 0;
   10d1a:	f04f 0800 	mov.w	r8, #0
   10d1e:	e688      	b.n	10a32 <am_util_stdio_vsprintf+0x2c6>
        switch ( *pcFmt )
   10d20:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   10d22:	f85a 2b04 	ldr.w	r2, [sl], #4
   10d26:	2100      	movs	r1, #0
                if ( iWidth )
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d17e      	bne.n	10e2a <am_util_stdio_vsprintf+0x6be>
    if ( ui64Val == 0 )
   10d2c:	ea52 0301 	orrs.w	r3, r2, r1
   10d30:	f040 80af 	bne.w	10e92 <am_util_stdio_vsprintf+0x726>
   10d34:	2330      	movs	r3, #48	@ 0x30
   10d36:	f88d 300c 	strb.w	r3, [sp, #12]
   10d3a:	2001      	movs	r0, #1
    if (pcBuf)
   10d3c:	2c00      	cmp	r4, #0
   10d3e:	f43f af3a 	beq.w	10bb6 <am_util_stdio_vsprintf+0x44a>
   10d42:	f108 0801 	add.w	r8, r8, #1
   10d46:	af03      	add	r7, sp, #12
   10d48:	eb07 0308 	add.w	r3, r7, r8
   10d4c:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
   10d4e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   10d52:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
   10d56:	42bb      	cmp	r3, r7
   10d58:	d1f9      	bne.n	10d4e <am_util_stdio_vsprintf+0x5e2>
        *pcBuf = 0;
   10d5a:	2300      	movs	r3, #0
   10d5c:	f804 3008 	strb.w	r3, [r4, r8]
                ui32CharCnt += iVal;
   10d60:	4406      	add	r6, r0
                    pcBuf += iVal;
   10d62:	4404      	add	r4, r0
                break;
   10d64:	e5be      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
        switch ( *pcFmt )
   10d66:	2701      	movs	r7, #1
   10d68:	e7db      	b.n	10d22 <am_util_stdio_vsprintf+0x5b6>
                if ( iWidth > 0 )
   10d6a:	f1b8 0f00 	cmp.w	r8, #0
   10d6e:	f340 8135 	ble.w	10fdc <am_util_stdio_vsprintf+0x870>
    uint32_t ui32RetVal = 0;
   10d72:	4639      	mov	r1, r7
    while ( i32NumChars-- )
   10d74:	f108 38ff 	add.w	r8, r8, #4294967295
   10d78:	e7b8      	b.n	10cec <am_util_stdio_vsprintf+0x580>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   10d7a:	43c9      	mvns	r1, r1
    if (unFloatValue.I32 < 0)
   10d7c:	2800      	cmp	r0, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   10d7e:	fa4e f801 	asr.w	r8, lr, r1
        *pcBuf++ = '-';
   10d82:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   10d84:	f2c0 8130 	blt.w	10fe8 <am_util_stdio_vsprintf+0x87c>
        *pcBuf++ = '0';
   10d88:	f642 6330 	movw	r3, #11824	@ 0x2e30
   10d8c:	f822 3b02 	strh.w	r3, [r2], #2
   10d90:	2111      	movs	r1, #17
   10d92:	2002      	movs	r0, #2
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   10d94:	42b9      	cmp	r1, r7
   10d96:	bfa8      	it	ge
   10d98:	4639      	movge	r1, r7
        for (jx = 0; jx < iMax; jx++)
   10d9a:	2900      	cmp	r1, #0
   10d9c:	f340 813f 	ble.w	1101e <am_util_stdio_vsprintf+0x8b2>
   10da0:	4411      	add	r1, r2
            i32FracPart *= 10;
   10da2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   10da6:	ea4f 53e8 	mov.w	r3, r8, asr #23
   10daa:	3330      	adds	r3, #48	@ 0x30
   10dac:	f802 3b01 	strb.w	r3, [r2], #1
            i32FracPart *= 10;
   10db0:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   10db4:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
   10db6:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
        for (jx = 0; jx < iMax; jx++)
   10dba:	d1f2      	bne.n	10da2 <am_util_stdio_vsprintf+0x636>
    return (pcBuf - pcBufInitial);
   10dbc:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   10dbe:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10dc2:	f348 53c7 	sbfx	r3, r8, #23, #8
   10dc6:	2b04      	cmp	r3, #4
   10dc8:	f77f add3 	ble.w	10972 <am_util_stdio_vsprintf+0x206>
            pcBuftmp = pcBuf - 1;
   10dcc:	1e4b      	subs	r3, r1, #1
            while ( pcBuftmp >= pcBufInitial )
   10dce:	429c      	cmp	r4, r3
   10dd0:	f63f adcf 	bhi.w	10972 <am_util_stdio_vsprintf+0x206>
                    *pcBuftmp = '0';
   10dd4:	f04f 0e30 	mov.w	lr, #48	@ 0x30
   10dd8:	e004      	b.n	10de4 <am_util_stdio_vsprintf+0x678>
   10dda:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   10dde:	42bc      	cmp	r4, r7
   10de0:	f43f adc7 	beq.w	10972 <am_util_stdio_vsprintf+0x206>
                if ( *pcBuftmp == '.' )
   10de4:	781a      	ldrb	r2, [r3, #0]
   10de6:	2a2e      	cmp	r2, #46	@ 0x2e
   10de8:	461f      	mov	r7, r3
   10dea:	f103 33ff 	add.w	r3, r3, #4294967295
   10dee:	d0f6      	beq.n	10dde <am_util_stdio_vsprintf+0x672>
                else if ( *pcBuftmp == '9' )
   10df0:	2a39      	cmp	r2, #57	@ 0x39
   10df2:	d0f2      	beq.n	10dda <am_util_stdio_vsprintf+0x66e>
                    *pcBuftmp += 1;
   10df4:	3201      	adds	r2, #1
   10df6:	703a      	strb	r2, [r7, #0]
                    break;
   10df8:	e5bb      	b.n	10972 <am_util_stdio_vsprintf+0x206>
        *pcBuf++ = '-';
   10dfa:	232d      	movs	r3, #45	@ 0x2d
   10dfc:	f802 3b01 	strb.w	r3, [r2], #1
    if (i32IntPart == 0)
   10e00:	e59c      	b.n	1093c <am_util_stdio_vsprintf+0x1d0>
    while ( *pcBuf++ )
   10e02:	f89b 7000 	ldrb.w	r7, [fp]
                while (*pcStr != 0x0)
   10e06:	2f00      	cmp	r7, #0
   10e08:	f000 80f7 	beq.w	10ffa <am_util_stdio_vsprintf+0x88e>
   10e0c:	4659      	mov	r1, fp
   10e0e:	e60c      	b.n	10a2a <am_util_stdio_vsprintf+0x2be>
   10e10:	2100      	movs	r1, #0
   10e12:	e633      	b.n	10a7c <am_util_stdio_vsprintf+0x310>
        switch ( *pcFmt )
   10e14:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   10e16:	f10a 0a07 	add.w	sl, sl, #7
   10e1a:	f02a 0a07 	bic.w	sl, sl, #7
   10e1e:	f8da 1004 	ldr.w	r1, [sl, #4]
   10e22:	f85a 2b08 	ldr.w	r2, [sl], #8
                if ( iWidth )
   10e26:	2b00      	cmp	r3, #0
   10e28:	d080      	beq.n	10d2c <am_util_stdio_vsprintf+0x5c0>
    while ( ui64Val )
   10e2a:	ea52 0301 	orrs.w	r3, r2, r1
   10e2e:	f000 80bd 	beq.w	10fac <am_util_stdio_vsprintf+0x840>
   10e32:	4613      	mov	r3, r2
   10e34:	4608      	mov	r0, r1
    int iDigits = ui64Val ? 0 : 1;
   10e36:	f04f 0c00 	mov.w	ip, #0
        ui64Val >>= 4;
   10e3a:	091b      	lsrs	r3, r3, #4
   10e3c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
   10e40:	0900      	lsrs	r0, r0, #4
    while ( ui64Val )
   10e42:	ea53 0e00 	orrs.w	lr, r3, r0
        ++iDigits;
   10e46:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
   10e4a:	d1f6      	bne.n	10e3a <am_util_stdio_vsprintf+0x6ce>
                    iWidth -= ndigits_in_hex(ui64Val);
   10e4c:	ebab 0c0c 	sub.w	ip, fp, ip
    if ( i32NumChars <= 0 )
   10e50:	f1bc 0f00 	cmp.w	ip, #0
   10e54:	f340 8085 	ble.w	10f62 <am_util_stdio_vsprintf+0x7f6>
    while ( i32NumChars-- )
   10e58:	f10c 33ff 	add.w	r3, ip, #4294967295
        if ( pcBuf )
   10e5c:	b14c      	cbz	r4, 10e72 <am_util_stdio_vsprintf+0x706>
   10e5e:	4620      	mov	r0, r4
    while ( i32NumChars-- )
   10e60:	3b01      	subs	r3, #1
   10e62:	f1b3 3fff 	cmp.w	r3, #4294967295
   10e66:	4686      	mov	lr, r0
            *pcBuf++ = cPadChar;
   10e68:	f880 9000 	strb.w	r9, [r0]
   10e6c:	f100 0001 	add.w	r0, r0, #1
    while ( i32NumChars-- )
   10e70:	d1f6      	bne.n	10e60 <am_util_stdio_vsprintf+0x6f4>
                    ui32CharCnt += iWidth;
   10e72:	4466      	add	r6, ip
                    pcBuf += pcBuf ? iWidth : 0;
   10e74:	2c00      	cmp	r4, #0
   10e76:	d067      	beq.n	10f48 <am_util_stdio_vsprintf+0x7dc>
    if ( ui64Val == 0 )
   10e78:	ea52 0301 	orrs.w	r3, r2, r1
                    pcBuf += pcBuf ? iWidth : 0;
   10e7c:	4464      	add	r4, ip
    if ( ui64Val == 0 )
   10e7e:	d108      	bne.n	10e92 <am_util_stdio_vsprintf+0x726>
   10e80:	2330      	movs	r3, #48	@ 0x30
   10e82:	f88d 300c 	strb.w	r3, [sp, #12]
   10e86:	f04f 0800 	mov.w	r8, #0
   10e8a:	2001      	movs	r0, #1
   10e8c:	e759      	b.n	10d42 <am_util_stdio_vsprintf+0x5d6>
        switch ( *pcFmt )
   10e8e:	2701      	movs	r7, #1
   10e90:	e7c1      	b.n	10e16 <am_util_stdio_vsprintf+0x6aa>
   10e92:	2f00      	cmp	r7, #0
   10e94:	bf14      	ite	ne
   10e96:	f04f 0c27 	movne.w	ip, #39	@ 0x27
   10e9a:	f04f 0c07 	moveq.w	ip, #7
   10e9e:	af03      	add	r7, sp, #12
    int iNumDig, ix = 0;
   10ea0:	f04f 0800 	mov.w	r8, #0
   10ea4:	e000      	b.n	10ea8 <am_util_stdio_vsprintf+0x73c>
        tbuf[ix++] = cCh + '0';
   10ea6:	4680      	mov	r8, r0
        cCh = ui64Val & 0xf;
   10ea8:	f002 030f 	and.w	r3, r2, #15
        if ( cCh > 9 )
   10eac:	2b09      	cmp	r3, #9
        ui64Val >>= 4;
   10eae:	ea4f 1012 	mov.w	r0, r2, lsr #4
            cCh += bLower ? 0x27 : 0x7;
   10eb2:	bf88      	it	hi
   10eb4:	4463      	addhi	r3, ip
        ui64Val >>= 4;
   10eb6:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
        tbuf[ix++] = cCh + '0';
   10eba:	3330      	adds	r3, #48	@ 0x30
        ui64Val >>= 4;
   10ebc:	0909      	lsrs	r1, r1, #4
        tbuf[ix++] = cCh + '0';
   10ebe:	f807 3b01 	strb.w	r3, [r7], #1
    while ( ui64Val )
   10ec2:	ea52 0301 	orrs.w	r3, r2, r1
        tbuf[ix++] = cCh + '0';
   10ec6:	f108 0001 	add.w	r0, r8, #1
    while ( ui64Val )
   10eca:	d1ec      	bne.n	10ea6 <am_util_stdio_vsprintf+0x73a>
   10ecc:	e736      	b.n	10d3c <am_util_stdio_vsprintf+0x5d0>
    while ( ui64Val )
   10ece:	ea50 0301 	orrs.w	r3, r0, r1
                    bNeg = false;
   10ed2:	bf18      	it	ne
   10ed4:	2300      	movne	r3, #0
    while ( ui64Val )
   10ed6:	f000 80af 	beq.w	11038 <am_util_stdio_vsprintf+0x8cc>
    int iNDigits = ui64Val ? 0 : 1;
   10eda:	2700      	movs	r7, #0
   10edc:	e9cd 3400 	strd	r3, r4, [sp]
                    bNeg = false;
   10ee0:	4660      	mov	r0, ip
    int iNDigits = ui64Val ? 0 : 1;
   10ee2:	463c      	mov	r4, r7
                    bNeg = false;
   10ee4:	4641      	mov	r1, r8
    int iNDigits = ui64Val ? 0 : 1;
   10ee6:	4667      	mov	r7, ip
        ui64Val = divu64_10(ui64Val);
   10ee8:	f7ff fb5e 	bl	105a8 <divu64_10>
    while ( ui64Val )
   10eec:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
   10ef0:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   10ef4:	d1f8      	bne.n	10ee8 <am_util_stdio_vsprintf+0x77c>
                    iWidth -= ndigits_in_i64(ui64Val);
   10ef6:	9b00      	ldr	r3, [sp, #0]
   10ef8:	46bc      	mov	ip, r7
   10efa:	4627      	mov	r7, r4
   10efc:	ebab 0707 	sub.w	r7, fp, r7
   10f00:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   10f02:	b12b      	cbz	r3, 10f10 <am_util_stdio_vsprintf+0x7a4>
                        if ( ui8PadChar == '0' )
   10f04:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
                        --iWidth;
   10f08:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
   10f0c:	d055      	beq.n	10fba <am_util_stdio_vsprintf+0x84e>
                        --iWidth;
   10f0e:	460f      	mov	r7, r1
    if ( i32NumChars <= 0 )
   10f10:	2f00      	cmp	r7, #0
   10f12:	dd4e      	ble.n	10fb2 <am_util_stdio_vsprintf+0x846>
    while ( i32NumChars-- )
   10f14:	3f01      	subs	r7, #1
        if ( pcBuf )
   10f16:	b144      	cbz	r4, 10f2a <am_util_stdio_vsprintf+0x7be>
   10f18:	4639      	mov	r1, r7
   10f1a:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   10f1c:	3901      	subs	r1, #1
   10f1e:	1c48      	adds	r0, r1, #1
            *pcBuf++ = cPadChar;
   10f20:	f882 9000 	strb.w	r9, [r2]
   10f24:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   10f28:	d1f8      	bne.n	10f1c <am_util_stdio_vsprintf+0x7b0>
                    ui32CharCnt += iWidth;
   10f2a:	1c7a      	adds	r2, r7, #1
   10f2c:	4416      	add	r6, r2
                    pcBuf += pcBuf ? iWidth : 0;
   10f2e:	b324      	cbz	r4, 10f7a <am_util_stdio_vsprintf+0x80e>
   10f30:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   10f32:	b113      	cbz	r3, 10f3a <am_util_stdio_vsprintf+0x7ce>
   10f34:	f1b9 0f20 	cmp.w	r9, #32
   10f38:	d063      	beq.n	11002 <am_util_stdio_vsprintf+0x896>
                iVal = uint64_to_str(ui64Val, pcBuf);
   10f3a:	4622      	mov	r2, r4
   10f3c:	4660      	mov	r0, ip
   10f3e:	4641      	mov	r1, r8
   10f40:	f7ff fb8e 	bl	10660 <uint64_to_str>
                    pcBuf += iVal;
   10f44:	4404      	add	r4, r0
   10f46:	e636      	b.n	10bb6 <am_util_stdio_vsprintf+0x44a>
    if ( ui64Val == 0 )
   10f48:	ea52 0301 	orrs.w	r3, r2, r1
   10f4c:	d1a1      	bne.n	10e92 <am_util_stdio_vsprintf+0x726>
   10f4e:	2001      	movs	r0, #1
                ui32CharCnt += iVal;
   10f50:	4406      	add	r6, r0
                break;
   10f52:	e4c7      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
                iVal = uint64_to_str(ui64Val, pcBuf);
   10f54:	4660      	mov	r0, ip
   10f56:	4641      	mov	r1, r8
   10f58:	4622      	mov	r2, r4
   10f5a:	f7ff fb81 	bl	10660 <uint64_to_str>
                ui32CharCnt += iVal;
   10f5e:	4406      	add	r6, r0
                break;
   10f60:	e4c0      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
   10f62:	f04f 0c00 	mov.w	ip, #0
   10f66:	e785      	b.n	10e74 <am_util_stdio_vsprintf+0x708>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   10f68:	2100      	movs	r1, #0
   10f6a:	e542      	b.n	109f2 <am_util_stdio_vsprintf+0x286>
    *pcBuf++ = '.';
   10f6c:	3201      	adds	r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   10f6e:	1b10      	subs	r0, r2, r4
   10f70:	f1c0 0113 	rsb	r1, r0, #19
   10f74:	e70e      	b.n	10d94 <am_util_stdio_vsprintf+0x628>
                    bNeg = true;
   10f76:	2301      	movs	r3, #1
   10f78:	e7af      	b.n	10eda <am_util_stdio_vsprintf+0x76e>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   10f7a:	2b00      	cmp	r3, #0
   10f7c:	d0ea      	beq.n	10f54 <am_util_stdio_vsprintf+0x7e8>
   10f7e:	f1b9 0f20 	cmp.w	r9, #32
   10f82:	d051      	beq.n	11028 <am_util_stdio_vsprintf+0x8bc>
                iVal = uint64_to_str(ui64Val, pcBuf);
   10f84:	2200      	movs	r2, #0
   10f86:	4660      	mov	r0, ip
   10f88:	4641      	mov	r1, r8
   10f8a:	f7ff fb69 	bl	10660 <uint64_to_str>
                ui32CharCnt += iVal;
   10f8e:	4614      	mov	r4, r2
   10f90:	4406      	add	r6, r0
                break;
   10f92:	e4a7      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
                iVal = uint64_to_str(ui64Val, pcBuf);
   10f94:	4622      	mov	r2, r4
   10f96:	4660      	mov	r0, ip
   10f98:	4641      	mov	r1, r8
   10f9a:	f7ff fb61 	bl	10660 <uint64_to_str>
                if ( pcBuf )
   10f9e:	e619      	b.n	10bd4 <am_util_stdio_vsprintf+0x468>
   10fa0:	2700      	movs	r7, #0
   10fa2:	e671      	b.n	10c88 <am_util_stdio_vsprintf+0x51c>
                while (*pcStr != 0x0)
   10fa4:	2f00      	cmp	r7, #0
   10fa6:	f47f ade8 	bne.w	10b7a <am_util_stdio_vsprintf+0x40e>
   10faa:	e49b      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
    int iDigits = ui64Val ? 0 : 1;
   10fac:	f04f 0c01 	mov.w	ip, #1
   10fb0:	e74c      	b.n	10e4c <am_util_stdio_vsprintf+0x6e0>
   10fb2:	2200      	movs	r2, #0
   10fb4:	e7bb      	b.n	10f2e <am_util_stdio_vsprintf+0x7c2>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   10fb6:	4b08      	ldr	r3, [pc, #32]	@ (10fd8 <am_util_stdio_vsprintf+0x86c>)
   10fb8:	e68c      	b.n	10cd4 <am_util_stdio_vsprintf+0x568>
                    ++ui32CharCnt;
   10fba:	3601      	adds	r6, #1
                            if ( pcBuf )
   10fbc:	2c00      	cmp	r4, #0
   10fbe:	d03f      	beq.n	11040 <am_util_stdio_vsprintf+0x8d4>
                                *pcBuf++ = '-';
   10fc0:	4622      	mov	r2, r4
   10fc2:	202d      	movs	r0, #45	@ 0x2d
    if ( i32NumChars <= 0 )
   10fc4:	2900      	cmp	r1, #0
                                *pcBuf++ = '-';
   10fc6:	f802 0b01 	strb.w	r0, [r2], #1
    if ( i32NumChars <= 0 )
   10fca:	dd3d      	ble.n	11048 <am_util_stdio_vsprintf+0x8dc>
    while ( i32NumChars-- )
   10fcc:	1eb9      	subs	r1, r7, #2
                                *pcBuf++ = '-';
   10fce:	4614      	mov	r4, r2
    while ( i32NumChars-- )
   10fd0:	460f      	mov	r7, r1
   10fd2:	e7a3      	b.n	10f1c <am_util_stdio_vsprintf+0x7b0>
   10fd4:	00302e30 	.word	0x00302e30
   10fd8:	00232e23 	.word	0x00232e23
                if ( iWidth )
   10fdc:	f43f ac82 	beq.w	108e4 <am_util_stdio_vsprintf+0x178>
                    iWidth = -iWidth;
   10fe0:	f1c8 0800 	rsb	r8, r8, #0
                    if ( ui32strlen < iWidth )
   10fe4:	4641      	mov	r1, r8
    if ( i32NumChars <= 0 )
   10fe6:	e53d      	b.n	10a64 <am_util_stdio_vsprintf+0x2f8>
        *pcBuf++ = '-';
   10fe8:	f243 032d 	movw	r3, #12333	@ 0x302d
   10fec:	f822 3b03 	strh.w	r3, [r2], #3
    *pcBuf++ = '.';
   10ff0:	232e      	movs	r3, #46	@ 0x2e
   10ff2:	70a3      	strb	r3, [r4, #2]
   10ff4:	2110      	movs	r1, #16
   10ff6:	2003      	movs	r0, #3
   10ff8:	e6cc      	b.n	10d94 <am_util_stdio_vsprintf+0x628>
                if ( iWidth )
   10ffa:	f1b8 0f00 	cmp.w	r8, #0
   10ffe:	d1ef      	bne.n	10fe0 <am_util_stdio_vsprintf+0x874>
   11000:	e470      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
                            *pcBuf++ = '-';
   11002:	4622      	mov	r2, r4
   11004:	232d      	movs	r3, #45	@ 0x2d
   11006:	f802 3b01 	strb.w	r3, [r2], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
   1100a:	4660      	mov	r0, ip
   1100c:	4641      	mov	r1, r8
   1100e:	f7ff fb27 	bl	10660 <uint64_to_str>
                            *pcBuf++ = '-';
   11012:	4614      	mov	r4, r2
                        ++ui32CharCnt;
   11014:	3601      	adds	r6, #1
                    pcBuf += iVal;
   11016:	4404      	add	r4, r0
   11018:	e5cd      	b.n	10bb6 <am_util_stdio_vsprintf+0x44a>
    int iNDigits = ui64Val ? 0 : 1;
   1101a:	2701      	movs	r7, #1
   1101c:	e624      	b.n	10c68 <am_util_stdio_vsprintf+0x4fc>
    *pcBuf++ = '.';
   1101e:	4611      	mov	r1, r2
   11020:	e6cd      	b.n	10dbe <am_util_stdio_vsprintf+0x652>
   11022:	232e      	movs	r3, #46	@ 0x2e
   11024:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   11026:	e4a0      	b.n	1096a <am_util_stdio_vsprintf+0x1fe>
                iVal = uint64_to_str(ui64Val, pcBuf);
   11028:	4660      	mov	r0, ip
   1102a:	4641      	mov	r1, r8
   1102c:	4622      	mov	r2, r4
   1102e:	f7ff fb17 	bl	10660 <uint64_to_str>
                        ++ui32CharCnt;
   11032:	3601      	adds	r6, #1
                ui32CharCnt += iVal;
   11034:	4406      	add	r6, r0
                break;
   11036:	e455      	b.n	108e4 <am_util_stdio_vsprintf+0x178>
                    iWidth -= ndigits_in_i64(ui64Val);
   11038:	f10b 37ff 	add.w	r7, fp, #4294967295
                    bNeg = false;
   1103c:	2300      	movs	r3, #0
   1103e:	e767      	b.n	10f10 <am_util_stdio_vsprintf+0x7a4>
    if ( i32NumChars <= 0 )
   11040:	2900      	cmp	r1, #0
   11042:	dd9f      	ble.n	10f84 <am_util_stdio_vsprintf+0x818>
    while ( i32NumChars-- )
   11044:	3f02      	subs	r7, #2
   11046:	e770      	b.n	10f2a <am_util_stdio_vsprintf+0x7be>
                    pcBuf += pcBuf ? iWidth : 0;
   11048:	4614      	mov	r4, r2
   1104a:	e776      	b.n	10f3a <am_util_stdio_vsprintf+0x7ce>

0001104c <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
   1104c:	b40e      	push	{r1, r2, r3}
   1104e:	b500      	push	{lr}
   11050:	b082      	sub	sp, #8
   11052:	aa03      	add	r2, sp, #12
   11054:	f852 1b04 	ldr.w	r1, [r2], #4
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
   11058:	9201      	str	r2, [sp, #4]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
   1105a:	f7ff fb87 	bl	1076c <am_util_stdio_vsprintf>
    va_end(pArgs);

    return ui32CharCnt;
}
   1105e:	b002      	add	sp, #8
   11060:	f85d eb04 	ldr.w	lr, [sp], #4
   11064:	b003      	add	sp, #12
   11066:	4770      	bx	lr

00011068 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   11068:	b40f      	push	{r0, r1, r2, r3}
   1106a:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1106c:	4d09      	ldr	r5, [pc, #36]	@ (11094 <am_util_stdio_printf+0x2c>)
   1106e:	682c      	ldr	r4, [r5, #0]
{
   11070:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
   11072:	b14c      	cbz	r4, 11088 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   11074:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   11076:	4808      	ldr	r0, [pc, #32]	@ (11098 <am_util_stdio_printf+0x30>)
   11078:	9906      	ldr	r1, [sp, #24]
    va_start(pArgs, pcFmt);
   1107a:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1107c:	f7ff fb76 	bl	1076c <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   11080:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   11082:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   11084:	4804      	ldr	r0, [pc, #16]	@ (11098 <am_util_stdio_printf+0x30>)
   11086:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   11088:	4620      	mov	r0, r4
   1108a:	b003      	add	sp, #12
   1108c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11090:	b004      	add	sp, #16
   11092:	4770      	bx	lr
   11094:	1000adb8 	.word	0x1000adb8
   11098:	1000acb8 	.word	0x1000acb8

0001109c <am_util_string_strcmp>:
//
//*****************************************************************************
int32_t
am_util_string_strncmp(const char *str1, const char *str2, uint32_t num)
{
    while ( num-- )
   1109c:	1e42      	subs	r2, r0, #1
   1109e:	3901      	subs	r1, #1
   110a0:	f1a0 0c02 	sub.w	ip, r0, #2
   110a4:	e002      	b.n	110ac <am_util_string_strcmp+0x10>
    {
        // Check for inequality OR end of string
        if ( *str1 != *str2 || *str1 == '\0' )
   110a6:	b14b      	cbz	r3, 110bc <am_util_string_strcmp+0x20>
    while ( num-- )
   110a8:	4562      	cmp	r2, ip
   110aa:	d00a      	beq.n	110c2 <am_util_string_strcmp+0x26>
        if ( *str1 != *str2 || *str1 == '\0' )
   110ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   110b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   110b4:	4298      	cmp	r0, r3
   110b6:	d0f6      	beq.n	110a6 <am_util_string_strcmp+0xa>
        {
            return *str1 - *str2;
   110b8:	1ac0      	subs	r0, r0, r3
   110ba:	4770      	bx	lr
   110bc:	4618      	mov	r0, r3
   110be:	1ac0      	subs	r0, r0, r3
   110c0:	4770      	bx	lr
    }

    //
    // Since we made it here, the strings must be equal to n characters.
    //
    return 0;
   110c2:	2000      	movs	r0, #0
}
   110c4:	4770      	bx	lr
   110c6:	bf00      	nop

000110c8 <am_util_string_strnicmp>:
//!  if str1>str2.
//
//*****************************************************************************
int32_t
am_util_string_strnicmp(const char *str1, const char *str2, int num)
{
   110c8:	b530      	push	{r4, r5, lr}
    uint8_t cChar1, cChar2;

    while ( *str1 && *str2 && num )
   110ca:	7804      	ldrb	r4, [r0, #0]
   110cc:	b1f4      	cbz	r4, 1110c <am_util_string_strnicmp+0x44>
    {
        cChar1 = *str1;
        cChar2 = *str2;

        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110ce:	4d11      	ldr	r5, [pc, #68]	@ (11114 <am_util_string_strnicmp+0x4c>)
   110d0:	f101 3eff 	add.w	lr, r1, #4294967295
   110d4:	4402      	add	r2, r0
   110d6:	e013      	b.n	11100 <am_util_string_strnicmp+0x38>
    while ( *str1 && *str2 && num )
   110d8:	4290      	cmp	r0, r2
   110da:	d017      	beq.n	1110c <am_util_string_strnicmp+0x44>
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110dc:	f815 c001 	ldrb.w	ip, [r5, r1]
        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110e0:	5d2b      	ldrb	r3, [r5, r4]
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110e6:	00db      	lsls	r3, r3, #3
   110e8:	f003 0320 	and.w	r3, r3, #32
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110ec:	f00c 0c20 	and.w	ip, ip, #32
        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110f0:	4323      	orrs	r3, r4
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
   110f2:	ea41 010c 	orr.w	r1, r1, ip

        if ( cChar1 != cChar2 )
   110f6:	428b      	cmp	r3, r1
   110f8:	d10a      	bne.n	11110 <am_util_string_strnicmp+0x48>
    while ( *str1 && *str2 && num )
   110fa:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   110fe:	b12c      	cbz	r4, 1110c <am_util_string_strnicmp+0x44>
   11100:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   11104:	2900      	cmp	r1, #0
   11106:	d1e7      	bne.n	110d8 <am_util_string_strnicmp+0x10>
    }

    //
    // Since we made it here, the strings must be equal to n characters.
    //
    return 0;
   11108:	4608      	mov	r0, r1
}
   1110a:	bd30      	pop	{r4, r5, pc}
    return 0;
   1110c:	2000      	movs	r0, #0
}
   1110e:	bd30      	pop	{r4, r5, pc}
            return cChar1 - cChar2;
   11110:	1a58      	subs	r0, r3, r1
}
   11112:	bd30      	pop	{r4, r5, pc}
   11114:	00030bd4 	.word	0x00030bd4

00011118 <am_util_time_computeDayofWeek>:
//! 7   indicates that the given date is invalid (e.g. 2/29/2015).
//
//*****************************************************************************
int
am_util_time_computeDayofWeek(int iYear, int iMonth, int iDay)
{
   11118:	b570      	push	{r4, r5, r6, lr}
    int iLeapYearOffset = 0;

    //
    // Validate inputs.  Return 7 if any are out-of-bounds.
    //
    if ( (iMonth < 1) || (iMonth > 12) || (iYear < 0) || (iDay < 1) )
   1111a:	f101 3eff 	add.w	lr, r1, #4294967295
   1111e:	f1be 0f0b 	cmp.w	lr, #11
   11122:	d83d      	bhi.n	111a0 <am_util_time_computeDayofWeek+0x88>
   11124:	2800      	cmp	r0, #0
   11126:	db3b      	blt.n	111a0 <am_util_time_computeDayofWeek+0x88>
   11128:	2a00      	cmp	r2, #0
   1112a:	dd39      	ble.n	111a0 <am_util_time_computeDayofWeek+0x88>

    //
    // Make sure this day actually exists in this month. Make sure to include
    // an exception for leap years.
    //
    if (iDay > g_iDaysPerMonth[iMonth - 1])
   1112c:	4b2f      	ldr	r3, [pc, #188]	@ (111ec <am_util_time_computeDayofWeek+0xd4>)
   1112e:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
   11132:	4293      	cmp	r3, r2
   11134:	d236      	bcs.n	111a4 <am_util_time_computeDayofWeek+0x8c>
    {
        if (iMonth == 2 && AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && iDay == 29)
   11136:	2902      	cmp	r1, #2
   11138:	d132      	bne.n	111a0 <am_util_time_computeDayofWeek+0x88>
   1113a:	f010 0403 	ands.w	r4, r0, #3
   1113e:	d12f      	bne.n	111a0 <am_util_time_computeDayofWeek+0x88>
   11140:	4b2b      	ldr	r3, [pc, #172]	@ (111f0 <am_util_time_computeDayofWeek+0xd8>)
   11142:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   11146:	fb83 5300 	smull	r5, r3, r3, r0
   1114a:	ebcc 1563 	rsb	r5, ip, r3, asr #5
   1114e:	2664      	movs	r6, #100	@ 0x64
   11150:	fb06 0515 	mls	r5, r6, r5, r0
   11154:	ebcc 1ee3 	rsb	lr, ip, r3, asr #7
   11158:	f44f 76c8 	mov.w	r6, #400	@ 0x190
   1115c:	fb06 061e 	mls	r6, r6, lr, r0
   11160:	4335      	orrs	r5, r6
   11162:	ea4f 1363 	mov.w	r3, r3, asr #5
   11166:	d01b      	beq.n	111a0 <am_util_time_computeDayofWeek+0x88>
   11168:	2a1d      	cmp	r2, #29
   1116a:	d119      	bne.n	111a0 <am_util_time_computeDayofWeek+0x88>
    if (bInvalidDay)
    {
        return 7;
    }

    iYearOffset = 2 + iYear + iYear / 4 - iYear / 100 + iYear / 400;
   1116c:	ebac 0c03 	sub.w	ip, ip, r3
   11170:	1c83      	adds	r3, r0, #2
   11172:	eb03 03a0 	add.w	r3, r3, r0, asr #2
   11176:	4463      	add	r3, ip
   11178:	4473      	add	r3, lr
    iMonthOffset = g_iMonthOffsets[iMonth - 1];

    if (AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && (iMonth < 3))
   1117a:	2902      	cmp	r1, #2
   1117c:	f04f 30ff 	mov.w	r0, #4294967295
   11180:	bfc8      	it	gt
   11182:	2000      	movgt	r0, #0
    {
        iLeapYearOffset = -1;
    }

    iWeekday = iDay + iYearOffset + iMonthOffset + iLeapYearOffset;
   11184:	441a      	add	r2, r3
   11186:	4422      	add	r2, r4

    return iWeekday % 7;
   11188:	4b1a      	ldr	r3, [pc, #104]	@ (111f4 <am_util_time_computeDayofWeek+0xdc>)
    iWeekday = iDay + iYearOffset + iMonthOffset + iLeapYearOffset;
   1118a:	4402      	add	r2, r0
    return iWeekday % 7;
   1118c:	fb83 1302 	smull	r1, r3, r3, r2
   11190:	4413      	add	r3, r2
   11192:	17d0      	asrs	r0, r2, #31
   11194:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
   11198:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1119c:	1a10      	subs	r0, r2, r0
}
   1119e:	bd70      	pop	{r4, r5, r6, pc}
        return 7;
   111a0:	2007      	movs	r0, #7
}
   111a2:	bd70      	pop	{r4, r5, r6, pc}
    iYearOffset = 2 + iYear + iYear / 4 - iYear / 100 + iYear / 400;
   111a4:	4c12      	ldr	r4, [pc, #72]	@ (111f0 <am_util_time_computeDayofWeek+0xd8>)
   111a6:	17c5      	asrs	r5, r0, #31
   111a8:	fb84 4c00 	smull	r4, ip, r4, r0
   111ac:	1c83      	adds	r3, r0, #2
    iMonthOffset = g_iMonthOffsets[iMonth - 1];
   111ae:	4c12      	ldr	r4, [pc, #72]	@ (111f8 <am_util_time_computeDayofWeek+0xe0>)
    iYearOffset = 2 + iYear + iYear / 4 - iYear / 100 + iYear / 400;
   111b0:	eba5 166c 	sub.w	r6, r5, ip, asr #5
   111b4:	eb03 03a0 	add.w	r3, r3, r0, asr #2
   111b8:	4433      	add	r3, r6
    iMonthOffset = g_iMonthOffsets[iMonth - 1];
   111ba:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
    if (AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && (iMonth < 3))
   111be:	0786      	lsls	r6, r0, #30
    iYearOffset = 2 + iYear + iYear / 4 - iYear / 100 + iYear / 400;
   111c0:	ebc5 1eec 	rsb	lr, r5, ip, asr #7
   111c4:	4473      	add	r3, lr
   111c6:	ea4f 1c6c 	mov.w	ip, ip, asr #5
    if (AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && (iMonth < 3))
   111ca:	d001      	beq.n	111d0 <am_util_time_computeDayofWeek+0xb8>
    int iLeapYearOffset = 0;
   111cc:	2000      	movs	r0, #0
   111ce:	e7d9      	b.n	11184 <am_util_time_computeDayofWeek+0x6c>
        if (iMonth == 2 && AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && iDay == 29)
   111d0:	ebac 0c05 	sub.w	ip, ip, r5
   111d4:	2564      	movs	r5, #100	@ 0x64
   111d6:	fb05 0c1c 	mls	ip, r5, ip, r0
   111da:	f44f 75c8 	mov.w	r5, #400	@ 0x190
   111de:	fb05 0e1e 	mls	lr, r5, lr, r0
    if (AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && (iMonth < 3))
   111e2:	ea5c 000e 	orrs.w	r0, ip, lr
   111e6:	d0cd      	beq.n	11184 <am_util_time_computeDayofWeek+0x6c>
   111e8:	e7c7      	b.n	1117a <am_util_time_computeDayofWeek+0x62>
   111ea:	bf00      	nop
   111ec:	00030d04 	.word	0x00030d04
   111f0:	51eb851f 	.word	0x51eb851f
   111f4:	92492493 	.word	0x92492493
   111f8:	00030cd4 	.word	0x00030cd4

000111fc <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   111fc:	e7fe      	b.n	111fc <NMI_Handler>
   111fe:	bf00      	nop

00011200 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   11200:	e7fe      	b.n	11200 <BusFault_Handler>
   11202:	bf00      	nop

00011204 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   11204:	e7fe      	b.n	11204 <DebugMon_Handler>
   11206:	bf00      	nop

00011208 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   11208:	4811      	ldr	r0, [pc, #68]	@ (11250 <zero_loop+0x12>)
   1120a:	4912      	ldr	r1, [pc, #72]	@ (11254 <zero_loop+0x16>)
   1120c:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   1120e:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   11212:	4811      	ldr	r0, [pc, #68]	@ (11258 <zero_loop+0x1a>)
   11214:	6801      	ldr	r1, [r0, #0]
   11216:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   1121a:	6001      	str	r1, [r0, #0]
   1121c:	f3bf 8f4f 	dsb	sy
   11220:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   11224:	480d      	ldr	r0, [pc, #52]	@ (1125c <zero_loop+0x1e>)
   11226:	490e      	ldr	r1, [pc, #56]	@ (11260 <zero_loop+0x22>)
   11228:	4a0e      	ldr	r2, [pc, #56]	@ (11264 <zero_loop+0x26>)

0001122a <copy_loop>:
   1122a:	f850 3b04 	ldr.w	r3, [r0], #4
   1122e:	f841 3b04 	str.w	r3, [r1], #4
   11232:	4291      	cmp	r1, r2
   11234:	dbf9      	blt.n	1122a <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
   11236:	480c      	ldr	r0, [pc, #48]	@ (11268 <zero_loop+0x2a>)
   11238:	490c      	ldr	r1, [pc, #48]	@ (1126c <zero_loop+0x2e>)
   1123a:	f04f 0200 	mov.w	r2, #0

0001123e <zero_loop>:
   1123e:	4288      	cmp	r0, r1
   11240:	bfb8      	it	lt
   11242:	f840 2b04 	strlt.w	r2, [r0], #4
   11246:	dbfa      	blt.n	1123e <zero_loop>
    main();
   11248:	f7fb fdc4 	bl	cdd4 <main>
    __asm("    bkpt     ");
   1124c:	be00      	bkpt	0x0000
}
   1124e:	0000      	.short	0x0000
   11250:	e000ed08 	.word	0xe000ed08
   11254:	0000c000 	.word	0x0000c000
   11258:	e000ed88 	.word	0xe000ed88
   1125c:	00031760 	.word	0x00031760
   11260:	10002300 	.word	0x10002300
   11264:	10002b04 	.word	0x10002b04
   11268:	10002b08 	.word	0x10002b08
   1126c:	100581f0 	.word	0x100581f0

00011270 <BufferC_Get_Size>:
	return;
}
uint8_t BufferC_Get_Size(sCircularBufferC_t *buf)
{
  return buf->size;
}
   11270:	f890 0102 	ldrb.w	r0, [r0, #258]	@ 0x102
   11274:	4770      	bx	lr
   11276:	bf00      	nop

00011278 <BufferC_putc>:

eBufferCStatus_t BufferC_putc(sCircularBufferC_t *buf, char val){
   11278:	4603      	mov	r3, r0
	eBufferCStatus_t result = BUFFER_C_ERROR;

	/** Determine the index to write to */
	uint16_t NextWrite = BufferC_NextIndex(buf->write);
   1127a:	f8b0 0106 	ldrh.w	r0, [r0, #262]	@ 0x106
 *
 * @return Compensated Index
 */
STATIC uint16_t BufferC_NextIndex(uint16_t idx){

	if(++idx == ACTUAL_BUFFER_C_SIZE){
   1127e:	1c42      	adds	r2, r0, #1
   11280:	b292      	uxth	r2, r2
   11282:	f240 1c01 	movw	ip, #257	@ 0x101
   11286:	4562      	cmp	r2, ip
eBufferCStatus_t BufferC_putc(sCircularBufferC_t *buf, char val){
   11288:	b410      	push	{r4}
	if(NextWrite == buf->read){
   1128a:	f8b3 4104 	ldrh.w	r4, [r3, #260]	@ 0x104
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   1128e:	d016      	beq.n	112be <BufferC_putc+0x46>
	if(NextWrite == buf->read){
   11290:	42a2      	cmp	r2, r4
   11292:	d01b      	beq.n	112cc <BufferC_putc+0x54>
		buf->buffer[buf->write] = val;
   11294:	5419      	strb	r1, [r3, r0]
		buf->write = NextWrite;
   11296:	bf98      	it	ls
   11298:	f500 7081 	addls.w	r0, r0, #258	@ 0x102
   1129c:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	  buf->size = (buf->write - buf->read);
   112a0:	bf98      	it	ls
   112a2:	b282      	uxthls	r2, r0
	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
   112a4:	1b12      	subs	r2, r2, r4
   112a6:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		result = BUFFER_C_OK;
   112aa:	2000      	movs	r0, #0
        if(val == '\n')
   112ac:	290a      	cmp	r1, #10
         buf->EndlineFlag = true;
   112ae:	bf08      	it	eq
   112b0:	2201      	moveq	r2, #1
}
   112b2:	f85d 4b04 	ldr.w	r4, [sp], #4
         buf->EndlineFlag = true;
   112b6:	bf08      	it	eq
   112b8:	f883 2108 	strbeq.w	r2, [r3, #264]	@ 0x108
}
   112bc:	4770      	bx	lr
	if(NextWrite == buf->read){
   112be:	b12c      	cbz	r4, 112cc <BufferC_putc+0x54>
		buf->write = NextWrite;
   112c0:	2000      	movs	r0, #0
		buf->buffer[buf->write] = val;
   112c2:	f883 1100 	strb.w	r1, [r3, #256]	@ 0x100
		buf->write = NextWrite;
   112c6:	f8a3 0106 	strh.w	r0, [r3, #262]	@ 0x106
	} else if(buf->write > buf->read){
   112ca:	e7eb      	b.n	112a4 <BufferC_putc+0x2c>
		result = BUFFER_C_FULL;
   112cc:	2002      	movs	r0, #2
   112ce:	e7ed      	b.n	112ac <BufferC_putc+0x34>

000112d0 <BufferC_getc>:
	if(buf->read != buf->write){
   112d0:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
   112d4:	f8b0 2106 	ldrh.w	r2, [r0, #262]	@ 0x106
   112d8:	429a      	cmp	r2, r3
   112da:	d024      	beq.n	11326 <BufferC_getc+0x56>
		*value = buf->buffer[buf->read];
   112dc:	5cc3      	ldrb	r3, [r0, r3]
   112de:	700b      	strb	r3, [r1, #0]
		buf->buffer[buf->read] = 0;
   112e0:	f8b0 2104 	ldrh.w	r2, [r0, #260]	@ 0x104
   112e4:	2100      	movs	r1, #0
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   112e6:	1c53      	adds	r3, r2, #1
		buf->buffer[buf->read] = 0;
   112e8:	5481      	strb	r1, [r0, r2]
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   112ea:	b29b      	uxth	r3, r3
   112ec:	f240 1c01 	movw	ip, #257	@ 0x101
   112f0:	4563      	cmp	r3, ip
	if(buf->write == buf->read){
   112f2:	f8b0 2106 	ldrh.w	r2, [r0, #262]	@ 0x106
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   112f6:	d00d      	beq.n	11314 <BufferC_getc+0x44>
	if(buf->write == buf->read){
   112f8:	429a      	cmp	r2, r3
		buf->read = BufferC_NextIndex(buf->read);
   112fa:	f8a0 3104 	strh.w	r3, [r0, #260]	@ 0x104
	if(buf->write == buf->read){
   112fe:	d00d      	beq.n	1131c <BufferC_getc+0x4c>
	  buf->size = (buf->write - buf->read);
   11300:	bf8b      	itete	hi
   11302:	1ad2      	subhi	r2, r2, r3
	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
   11304:	f202 1201 	addwls	r2, r2, #257	@ 0x101
	  buf->size = (buf->write - buf->read);
   11308:	b292      	uxthhi	r2, r2
	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
   1130a:	1ad2      	subls	r2, r2, r3
   1130c:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
		result = BUFFER_C_OK;
   11310:	2000      	movs	r0, #0
   11312:	4770      	bx	lr
		buf->read = BufferC_NextIndex(buf->read);
   11314:	f8a0 1104 	strh.w	r1, [r0, #260]	@ 0x104
	if(buf->write == buf->read){
   11318:	2a00      	cmp	r2, #0
   1131a:	d1f7      	bne.n	1130c <BufferC_getc+0x3c>
	  buf->size = 0;
   1131c:	2300      	movs	r3, #0
   1131e:	f8a0 3102 	strh.w	r3, [r0, #258]	@ 0x102
		result = BUFFER_C_OK;
   11322:	2000      	movs	r0, #0
   11324:	4770      	bx	lr
		result = BUFFER_C_EMPTY;
   11326:	2004      	movs	r0, #4
}
   11328:	4770      	bx	lr
   1132a:	bf00      	nop

0001132c <BufferC_gets>:
                              uint16_t maxLen){
   1132c:	4603      	mov	r3, r0
  return buf->size;
   1132e:	f890 0102 	ldrb.w	r0, [r0, #258]	@ 0x102
    if(len > 0)
   11332:	b900      	cbnz	r0, 11336 <BufferC_gets+0xa>
}
   11334:	4770      	bx	lr
      if(len > maxLen)
   11336:	4290      	cmp	r0, r2
   11338:	bf28      	it	cs
   1133a:	4610      	movcs	r0, r2
      for(i=0;i<len;i++)
   1133c:	2800      	cmp	r0, #0
   1133e:	d0f9      	beq.n	11334 <BufferC_gets+0x8>
                              uint16_t maxLen){
   11340:	b570      	push	{r4, r5, r6, lr}
   11342:	f8b3 4106 	ldrh.w	r4, [r3, #262]	@ 0x106
   11346:	180e      	adds	r6, r1, r0
		buf->buffer[buf->read] = 0;
   11348:	f04f 0e00 	mov.w	lr, #0
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   1134c:	f240 1501 	movw	r5, #257	@ 0x101
	if(buf->read != buf->write){
   11350:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
   11354:	4294      	cmp	r4, r2
        BufferC_getc(buf, str++);
   11356:	f101 0101 	add.w	r1, r1, #1
	if(buf->read != buf->write){
   1135a:	d01b      	beq.n	11394 <BufferC_gets+0x68>
		*value = buf->buffer[buf->read];
   1135c:	5c9a      	ldrb	r2, [r3, r2]
   1135e:	f801 2c01 	strb.w	r2, [r1, #-1]
		buf->buffer[buf->read] = 0;
   11362:	f8b3 4104 	ldrh.w	r4, [r3, #260]	@ 0x104
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   11366:	1c62      	adds	r2, r4, #1
		buf->buffer[buf->read] = 0;
   11368:	f803 e004 	strb.w	lr, [r3, r4]
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   1136c:	b292      	uxth	r2, r2
   1136e:	42aa      	cmp	r2, r5
	if(buf->write == buf->read){
   11370:	f8b3 4106 	ldrh.w	r4, [r3, #262]	@ 0x106
	if(++idx == ACTUAL_BUFFER_C_SIZE){
   11374:	d00f      	beq.n	11396 <BufferC_gets+0x6a>
	if(buf->write == buf->read){
   11376:	42a2      	cmp	r2, r4
		buf->read = BufferC_NextIndex(buf->read);
   11378:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	if(buf->write == buf->read){
   1137c:	d010      	beq.n	113a0 <BufferC_gets+0x74>
	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
   1137e:	bf2a      	itet	cs
   11380:	f204 1c01 	addwcs	ip, r4, #257	@ 0x101
	  buf->size = (buf->write - buf->read);
   11384:	1aa2      	subcc	r2, r4, r2
	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
   11386:	ebac 0202 	subcs.w	r2, ip, r2
   1138a:	b292      	uxth	r2, r2
      for(i=0;i<len;i++)
   1138c:	42b1      	cmp	r1, r6
	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
   1138e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
      for(i=0;i<len;i++)
   11392:	d1dd      	bne.n	11350 <BufferC_gets+0x24>
}
   11394:	bd70      	pop	{r4, r5, r6, pc}
		buf->read = BufferC_NextIndex(buf->read);
   11396:	f8a3 e104 	strh.w	lr, [r3, #260]	@ 0x104
	if(buf->write == buf->read){
   1139a:	4622      	mov	r2, r4
   1139c:	2c00      	cmp	r4, #0
   1139e:	d1f5      	bne.n	1138c <BufferC_gets+0x60>
	  buf->size = 0;
   113a0:	2200      	movs	r2, #0
   113a2:	e7f3      	b.n	1138c <BufferC_gets+0x60>

000113a4 <DEPTH_initialize>:
*
* @see DEPTH_initialize
* @see DEPTH_Power_ON
*******************************************************************************/
bool DEPTH_initialize(eDEPTH_Sensor_t sensor)
{
   113a4:	b508      	push	{r3, lr}
    module.sensor = sensor;
   113a6:	4b05      	ldr	r3, [pc, #20]	@ (113bc <DEPTH_initialize+0x18>)
    switch(sensor)
   113a8:	2802      	cmp	r0, #2
    module.sensor = sensor;
   113aa:	7018      	strb	r0, [r3, #0]
    switch(sensor)
   113ac:	d001      	beq.n	113b2 <DEPTH_initialize+0xe>
        default:
            break;
    }

    return true;
}
   113ae:	2001      	movs	r0, #1
   113b0:	bd08      	pop	{r3, pc}
            K9lx_init(pK);
   113b2:	4803      	ldr	r0, [pc, #12]	@ (113c0 <DEPTH_initialize+0x1c>)
   113b4:	f00c f9f4 	bl	1d7a0 <K9lx_init>
}
   113b8:	2001      	movs	r0, #1
   113ba:	bd08      	pop	{r3, pc}
   113bc:	10002314 	.word	0x10002314
   113c0:	10002304 	.word	0x10002304

000113c4 <DEPTH_initialize_RTOS>:

void DEPTH_initialize_RTOS(void)
{
   113c4:	b510      	push	{r4, lr}
    MAX14830_port_enable((eMAX18430_ComPort_t) kParam.port);
   113c6:	4c05      	ldr	r4, [pc, #20]	@ (113dc <DEPTH_initialize_RTOS+0x18>)
   113c8:	7820      	ldrb	r0, [r4, #0]
   113ca:	f001 fbdd 	bl	12b88 <MAX14830_port_enable>
    MAX14830_Set_baudrate((eMAX18430_ComPort_t) kParam.port, kParam.baudrate);
   113ce:	6861      	ldr	r1, [r4, #4]
   113d0:	7820      	ldrb	r0, [r4, #0]
}
   113d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MAX14830_Set_baudrate((eMAX18430_ComPort_t) kParam.port, kParam.baudrate);
   113d6:	f001 be45 	b.w	13064 <MAX14830_Set_baudrate>
   113da:	bf00      	nop
   113dc:	10002304 	.word	0x10002304

000113e0 <DEPTH_uninitialize_RTOS>:

void DEPTH_uninitialize_RTOS(void)
{
   113e0:	b508      	push	{r3, lr}
 * @brief Turn Depth Sensor Power OFF
 *
 */
void DEPTH_Power_OFF(void)
{
    K9lx_power_off();
   113e2:	f00c faff 	bl	1d9e4 <K9lx_power_off>
    MAX14830_port_disable((eMAX18430_ComPort_t) kParam.port);
   113e6:	4b03      	ldr	r3, [pc, #12]	@ (113f4 <DEPTH_uninitialize_RTOS+0x14>)
   113e8:	7818      	ldrb	r0, [r3, #0]
}
   113ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MAX14830_port_disable((eMAX18430_ComPort_t) kParam.port);
   113ee:	f001 bc31 	b.w	12c54 <MAX14830_port_disable>
   113f2:	bf00      	nop
   113f4:	10002304 	.word	0x10002304

000113f8 <DEPTH_Power_ON>:
    K9lx_power_on();
   113f8:	f00c bae2 	b.w	1d9c0 <K9lx_power_on>

000113fc <DEPTH_Power_OFF>:
    K9lx_power_off();
   113fc:	f00c baf2 	b.w	1d9e4 <K9lx_power_off>

00011400 <DEPTH_Read>:
 * @brief Read Depth Sensor
 *
 * @param data Pointer to depth sensor data struct
 */
void DEPTH_Read(sDepth_Measurement_t *data)
{
   11400:	b510      	push	{r4, lr}
   11402:	b082      	sub	sp, #8
   11404:	4604      	mov	r4, r0
    //artemis_pa9ld_read(&pressure, &temperature);

#if defined(__TEST_PROFILE_1__) || defined(__TEST_PROFILE_2__)

    /* read pressure test profile */
    datalogger_pressure(&pressure);
   11406:	a801      	add	r0, sp, #4
   11408:	f00c fc48 	bl	1dc9c <datalogger_pressure>
    data->Pressure = pressure;
   1140c:	eddd 6a01 	vldr	s13, [sp, #4]
    const float g = 9.80665;

    /** Convert pressure (bar) to pressure (Pa) */
    pressure *= 100;    /**< bar to kPa */
    pressure *= 1000;   /**< kPa to Pa */
    float h = pressure / (module.conversion.density * g);
   11410:	4b0b      	ldr	r3, [pc, #44]	@ (11440 <DEPTH_Read+0x40>)
    pressure *= 100;    /**< bar to kPa */
   11412:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 11444 <DEPTH_Read+0x44>
    pressure *= 1000;   /**< kPa to Pa */
   11416:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 11448 <DEPTH_Read+0x48>
    float h = pressure / (module.conversion.density * g);
   1141a:	ed93 7a01 	vldr	s14, [r3, #4]
   1141e:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 1144c <DEPTH_Read+0x4c>
    data->Pressure = pressure;
   11422:	edc4 6a01 	vstr	s13, [r4, #4]
    pressure *= 100;    /**< bar to kPa */
   11426:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float h = pressure / (module.conversion.density * g);
   1142a:	ee27 7a06 	vmul.f32	s14, s14, s12
    pressure *= 1000;   /**< kPa to Pa */
   1142e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    float h = pressure / (module.conversion.density * g);
   11432:	eec7 6a87 	vdiv.f32	s13, s15, s14
    data->Depth = module_DEPTH_Convert_Pressure_to_Depth(pressure);
   11436:	edc4 6a00 	vstr	s13, [r4]
}
   1143a:	b002      	add	sp, #8
   1143c:	bd10      	pop	{r4, pc}
   1143e:	bf00      	nop
   11440:	10002314 	.word	0x10002314
   11444:	42c80000 	.word	0x42c80000
   11448:	447a0000 	.word	0x447a0000
   1144c:	411ce80a 	.word	0x411ce80a

00011450 <GPS_initialize>:
#include "GPS.h"
#include "ublox.h"
#include "artemis_ublox_i2c.h"

bool GPS_initialize(void)
{
   11450:	b508      	push	{r3, lr}
    UBLOX_initialize(UBLOX_COM_I2C, UBLOX_MSG_UBX, UBLOX_MSG_UBX, 1);
   11452:	2301      	movs	r3, #1
   11454:	461a      	mov	r2, r3
   11456:	4619      	mov	r1, r3
   11458:	2000      	movs	r0, #0
   1145a:	f00b fa6f 	bl	1c93c <UBLOX_initialize>
    return true;
}
   1145e:	2001      	movs	r0, #1
   11460:	bd08      	pop	{r3, pc}
   11462:	bf00      	nop

00011464 <GPS_uninitialize>:

void GPS_uninitialize(void)
{
    UBLOX_uninitialize();
   11464:	f00b b924 	b.w	1c6b0 <UBLOX_uninitialize>

00011468 <GPS_Read>:
}

bool GPS_Read(GPS_Data_t *data)
{
   11468:	b510      	push	{r4, lr}
   1146a:	b08a      	sub	sp, #40	@ 0x28
   1146c:	4604      	mov	r4, r0
	bool fix = false;
	UBLOX_Nav_t ublox = {0};
   1146e:	2224      	movs	r2, #36	@ 0x24
   11470:	2100      	movs	r1, #0
   11472:	a801      	add	r0, sp, #4
   11474:	f012 ff8c 	bl	24390 <memset>

	fix = UBLOX_read_nav(&ublox);
   11478:	a801      	add	r0, sp, #4
   1147a:	f00b f95d 	bl	1c738 <UBLOX_read_nav>

	if(fix)
   1147e:	b198      	cbz	r0, 114a8 <GPS_Read+0x40>
	{
		data->fix = true;
		data->position.lat = ublox.position.lat;
   11480:	9902      	ldr	r1, [sp, #8]
		data->position.lon = ublox.position.lon;
   11482:	9a03      	ldr	r2, [sp, #12]
		data->position.alt = ublox.position.alt;
   11484:	9b04      	ldr	r3, [sp, #16]
		data->position.lat = ublox.position.lat;
   11486:	6061      	str	r1, [r4, #4]
		data->fix = true;
   11488:	f04f 0c01 	mov.w	ip, #1

		data->time.year = ublox.time.year;
   1148c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
		data->position.lon = ublox.position.lon;
   11490:	60a2      	str	r2, [r4, #8]
		data->position.alt = ublox.position.alt;
   11492:	60e3      	str	r3, [r4, #12]
		data->time.month = ublox.time.month;
   11494:	f8dd 2022 	ldr.w	r2, [sp, #34]	@ 0x22
		data->time.day = ublox.time.day;
		data->time.hour = ublox.time.hour;
		data->time.min = ublox.time.min;
		data->time.sec = ublox.time.sec;
   11498:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
		data->fix = true;
   1149c:	f884 c000 	strb.w	ip, [r4]
		data->time.year = ublox.time.year;
   114a0:	8221      	strh	r1, [r4, #16]
		data->time.month = ublox.time.month;
   114a2:	f8c4 2012 	str.w	r2, [r4, #18]
		data->time.sec = ublox.time.sec;
   114a6:	75a3      	strb	r3, [r4, #22]
	}
	return fix;
}
   114a8:	b00a      	add	sp, #40	@ 0x28
   114aa:	bd10      	pop	{r4, pc}

000114ac <GPS_on>:

void GPS_on(void)
{
    artemis_ublox_i2c_power_on();
   114ac:	f00a be2c 	b.w	1c108 <artemis_ublox_i2c_power_on>

000114b0 <GPS_off>:
}

void GPS_off(void)
{
    artemis_ublox_i2c_power_off();
   114b0:	f00a be40 	b.w	1c134 <artemis_ublox_i2c_power_off>

000114b4 <task_Iridium_satellite>:
                                tskIDLE_PRIORITY + 4UL,
                                xSatellite) == pdPASS );
}

void task_Iridium_satellite (void)
{
   114b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    /* 1 seocnds period delay */
    uint32_t period = xDelay1000ms;
    ARTEMIS_DEBUG_PRINTF("Iridium :: Satellite delay PERIOD=%dms, %isec\n", period, SATELLITE_TIMER);
   114b8:	220f      	movs	r2, #15
   114ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   114be:	4821      	ldr	r0, [pc, #132]	@ (11544 <task_Iridium_satellite+0x90>)
   114c0:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 1154c <task_Iridium_satellite+0x98>

    while(run)
    {
        /* check satellite visibility */
        check = artemis_i9603n_is_network_available();
        ARTEMIS_DEBUG_PRINTF("Iridium :: Satellite visibility check=%i\n", (uint8_t)check);
   114c4:	4f20      	ldr	r7, [pc, #128]	@ (11548 <task_Iridium_satellite+0x94>)
    ARTEMIS_DEBUG_PRINTF("Iridium :: Satellite delay PERIOD=%dms, %isec\n", period, SATELLITE_TIMER);
   114c6:	f7ff fdcf 	bl	11068 <am_util_stdio_printf>
   114ca:	481e      	ldr	r0, [pc, #120]	@ (11544 <task_Iridium_satellite+0x90>)
   114cc:	220f      	movs	r2, #15
   114ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   114d2:	f00c fd51 	bl	1df78 <datalogger_log_debug>
   114d6:	250f      	movs	r5, #15
    uint8_t visibility_count = 0;
   114d8:	2600      	movs	r6, #0

        if (check)
        {
            taskENTER_CRITICAL();
            xVisible = true;
   114da:	f04f 0901 	mov.w	r9, #1
        check = artemis_i9603n_is_network_available();
   114de:	f00a f865 	bl	1b5ac <artemis_i9603n_is_network_available>
   114e2:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("Iridium :: Satellite visibility check=%i\n", (uint8_t)check);
   114e4:	4601      	mov	r1, r0
   114e6:	4638      	mov	r0, r7
   114e8:	f7ff fdbe 	bl	11068 <am_util_stdio_printf>
   114ec:	4621      	mov	r1, r4
   114ee:	4638      	mov	r0, r7
   114f0:	f00c fd42 	bl	1df78 <datalogger_log_debug>
        if (check)
   114f4:	b18c      	cbz	r4, 1151a <task_Iridium_satellite+0x66>
            taskEXIT_CRITICAL();

            visibility_count++;
   114f6:	3601      	adds	r6, #1
   114f8:	b2f6      	uxtb	r6, r6
            taskENTER_CRITICAL();
   114fa:	f7fb fde3 	bl	d0c4 <vPortEnterCritical>
            xVisible = true;
   114fe:	f888 9000 	strb.w	r9, [r8]
            taskEXIT_CRITICAL();
   11502:	f7fb fe0b 	bl	d11c <vPortExitCritical>
            if (visibility_count == 3)
   11506:	2e03      	cmp	r6, #3
   11508:	d013      	beq.n	11532 <task_Iridium_satellite+0x7e>
            xVisible = false;
            taskEXIT_CRITICAL();
        }

        timer++;
        if (timer >= SATELLITE_TIMER)
   1150a:	3d01      	subs	r5, #1
   1150c:	b2ad      	uxth	r5, r5
        {
            run = false;
            timer = 0;
        }

        vTaskDelay(period);
   1150e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        if (timer >= SATELLITE_TIMER)
   11512:	b175      	cbz	r5, 11532 <task_Iridium_satellite+0x7e>
        vTaskDelay(period);
   11514:	f7fd ff66 	bl	f3e4 <vTaskDelay>
    while(run)
   11518:	e7e1      	b.n	114de <task_Iridium_satellite+0x2a>
        if (timer >= SATELLITE_TIMER)
   1151a:	3d01      	subs	r5, #1
   1151c:	b2ad      	uxth	r5, r5
            taskENTER_CRITICAL();
   1151e:	f7fb fdd1 	bl	d0c4 <vPortEnterCritical>
            xVisible = false;
   11522:	f888 4000 	strb.w	r4, [r8]
            taskEXIT_CRITICAL();
   11526:	f7fb fdf9 	bl	d11c <vPortExitCritical>
        vTaskDelay(period);
   1152a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        if (timer >= SATELLITE_TIMER)
   1152e:	2d00      	cmp	r5, #0
   11530:	d1f0      	bne.n	11514 <task_Iridium_satellite+0x60>
        vTaskDelay(period);
   11532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   11536:	f7fd ff55 	bl	f3e4 <vTaskDelay>
    }
    /* delete the task */
    vTaskDelete(NULL);
}
   1153a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    vTaskDelete(NULL);
   1153e:	2000      	movs	r0, #0
   11540:	f7fd bb3c 	b.w	ebbc <vTaskDelete>
   11544:	0002a88c 	.word	0x0002a88c
   11548:	0002a8bc 	.word	0x0002a8bc
   1154c:	1000adc2 	.word	0x1000adc2

00011550 <parse_data.constprop.0>:
        // handle this
        return false;
    }
}

static uint16_t parse_data(char *inData, uint16_t *outData)
   11550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11554:	b0cc      	sub	sp, #304	@ 0x130
    uint16_t rxLen=0;
    uint16_t len = 0;
    int16_t number = 0;
    bool negative = false;
    char *lData = NULL;
    char buff[300] = {0};
   11556:	f44f 7296 	mov.w	r2, #300	@ 0x12c
   1155a:	2100      	movs	r1, #0
static uint16_t parse_data(char *inData, uint16_t *outData)
   1155c:	4607      	mov	r7, r0
    char buff[300] = {0};
   1155e:	a801      	add	r0, sp, #4
   11560:	f012 ff16 	bl	24390 <memset>

    memcpy(buff, inData, strlen(inData)+1);
   11564:	483e      	ldr	r0, [pc, #248]	@ (11660 <parse_data.constprop.0+0x110>)
   11566:	f7fb fb8b 	bl	cc80 <strlen>
   1156a:	493d      	ldr	r1, [pc, #244]	@ (11660 <parse_data.constprop.0+0x110>)
   1156c:	1c42      	adds	r2, r0, #1
   1156e:	a801      	add	r0, sp, #4
   11570:	f7fb fade 	bl	cb30 <memcpy>

    if (buff[0] == 'A' && buff[1] == 'T')
   11574:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11578:	2b41      	cmp	r3, #65	@ 0x41
   1157a:	d062      	beq.n	11642 <parse_data.constprop.0+0xf2>
        }
        lData = &buff[i+1];
    }
    else
    {
        lData = &buff[0];
   1157c:	a801      	add	r0, sp, #4
    }

    char *o_tok = strtok(lData, "\r\n");
   1157e:	4939      	ldr	r1, [pc, #228]	@ (11664 <parse_data.constprop.0+0x114>)
   11580:	f012 fff2 	bl	24568 <strtok>
    while (o_tok !=NULL)
   11584:	2800      	cmp	r0, #0
   11586:	d068      	beq.n	1165a <parse_data.constprop.0+0x10a>
    bool negative = false;
   11588:	f04f 0800 	mov.w	r8, #0
    int16_t number = 0;
   1158c:	46c2      	mov	sl, r8
    uint16_t rxLen=0;
   1158e:	4645      	mov	r5, r8
    {
        if (strcmp(o_tok,"OK")==0)
   11590:	7803      	ldrb	r3, [r0, #0]
   11592:	2b4f      	cmp	r3, #79	@ 0x4f
   11594:	d108      	bne.n	115a8 <parse_data.constprop.0+0x58>
   11596:	7843      	ldrb	r3, [r0, #1]
   11598:	2b4b      	cmp	r3, #75	@ 0x4b
   1159a:	d105      	bne.n	115a8 <parse_data.constprop.0+0x58>
   1159c:	7883      	ldrb	r3, [r0, #2]
   1159e:	b91b      	cbnz	r3, 115a8 <parse_data.constprop.0+0x58>
            i_tok = strtok(NULL, ":");
        }
        o_tok = strtok(NULL, "\r\n");
    }
    return rxLen;
}
   115a0:	4628      	mov	r0, r5
   115a2:	b04c      	add	sp, #304	@ 0x130
   115a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        char *i_tok = strtok(o_tok, ":");
   115a8:	492f      	ldr	r1, [pc, #188]	@ (11668 <parse_data.constprop.0+0x118>)
   115aa:	f012 ffdd 	bl	24568 <strtok>
        while (i_tok != NULL)
   115ae:	4681      	mov	r9, r0
   115b0:	2800      	cmp	r0, #0
   115b2:	d03c      	beq.n	1162e <parse_data.constprop.0+0xde>
            i_tok = strtok(NULL, ":");
   115b4:	4e2c      	ldr	r6, [pc, #176]	@ (11668 <parse_data.constprop.0+0x118>)
   115b6:	e005      	b.n	115c4 <parse_data.constprop.0+0x74>
   115b8:	4631      	mov	r1, r6
   115ba:	2000      	movs	r0, #0
   115bc:	f012 ffd4 	bl	24568 <strtok>
        while (i_tok != NULL)
   115c0:	4681      	mov	r9, r0
   115c2:	b3a0      	cbz	r0, 1162e <parse_data.constprop.0+0xde>
            if (i_tok[0] != '+')
   115c4:	f899 4000 	ldrb.w	r4, [r9]
   115c8:	2c2b      	cmp	r4, #43	@ 0x2b
   115ca:	d0f5      	beq.n	115b8 <parse_data.constprop.0+0x68>
                len = strlen(i_tok);
   115cc:	4648      	mov	r0, r9
   115ce:	f7fb fb57 	bl	cc80 <strlen>
                for (uint16_t i=0; i<len+1; i++)
   115d2:	2300      	movs	r3, #0
                len = strlen(i_tok);
   115d4:	b280      	uxth	r0, r0
                for (uint16_t i=0; i<len+1; i++)
   115d6:	e008      	b.n	115ea <parse_data.constprop.0+0x9a>
   115d8:	b17c      	cbz	r4, 115fa <parse_data.constprop.0+0xaa>
   115da:	2c20      	cmp	r4, #32
   115dc:	d114      	bne.n	11608 <parse_data.constprop.0+0xb8>
   115de:	3301      	adds	r3, #1
   115e0:	b29b      	uxth	r3, r3
   115e2:	4298      	cmp	r0, r3
   115e4:	d3e8      	bcc.n	115b8 <parse_data.constprop.0+0x68>
                    if ( (i_tok[i] == ',')  || (i_tok[i] == '\0'))
   115e6:	f819 4003 	ldrb.w	r4, [r9, r3]
   115ea:	2c2c      	cmp	r4, #44	@ 0x2c
   115ec:	d005      	beq.n	115fa <parse_data.constprop.0+0xaa>
   115ee:	d9f3      	bls.n	115d8 <parse_data.constprop.0+0x88>
   115f0:	2c2d      	cmp	r4, #45	@ 0x2d
   115f2:	d109      	bne.n	11608 <parse_data.constprop.0+0xb8>
                        number = 0;
   115f4:	f04f 0801 	mov.w	r8, #1
   115f8:	e7f1      	b.n	115de <parse_data.constprop.0+0x8e>
                        rxLen++;
   115fa:	1c6a      	adds	r2, r5, #1
                        outData[rxLen] = number;
   115fc:	f827 a015 	strh.w	sl, [r7, r5, lsl #1]
                        rxLen++;
   11600:	b295      	uxth	r5, r2
                        number = 0;
   11602:	f04f 0a00 	mov.w	sl, #0
   11606:	e7ea      	b.n	115de <parse_data.constprop.0+0x8e>
                            number = number * 10 + (i_tok[i] - 48) ;
   11608:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
   1160c:	eb04 044a 	add.w	r4, r4, sl, lsl #1
   11610:	b2a4      	uxth	r4, r4
                            if (negative)
   11612:	f1b8 0f00 	cmp.w	r8, #0
   11616:	d103      	bne.n	11620 <parse_data.constprop.0+0xd0>
                            number = number * 10 + (i_tok[i] - 48) ;
   11618:	3c30      	subs	r4, #48	@ 0x30
   1161a:	fa0f fa84 	sxth.w	sl, r4
   1161e:	e7de      	b.n	115de <parse_data.constprop.0+0x8e>
                                number *= -1 ;
   11620:	f1c4 0430 	rsb	r4, r4, #48	@ 0x30
   11624:	fa0f fa84 	sxth.w	sl, r4
                                negative = false;
   11628:	f04f 0800 	mov.w	r8, #0
   1162c:	e7d7      	b.n	115de <parse_data.constprop.0+0x8e>
        o_tok = strtok(NULL, "\r\n");
   1162e:	490d      	ldr	r1, [pc, #52]	@ (11664 <parse_data.constprop.0+0x114>)
   11630:	2000      	movs	r0, #0
   11632:	f012 ff99 	bl	24568 <strtok>
    while (o_tok !=NULL)
   11636:	2800      	cmp	r0, #0
   11638:	d1aa      	bne.n	11590 <parse_data.constprop.0+0x40>
}
   1163a:	4628      	mov	r0, r5
   1163c:	b04c      	add	sp, #304	@ 0x130
   1163e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (buff[0] == 'A' && buff[1] == 'T')
   11642:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11646:	2b54      	cmp	r3, #84	@ 0x54
   11648:	d198      	bne.n	1157c <parse_data.constprop.0+0x2c>
   1164a:	ab01      	add	r3, sp, #4
        while (buff[i]!='\n' && i<312)
   1164c:	4618      	mov	r0, r3
   1164e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11652:	2a0a      	cmp	r2, #10
   11654:	d1fa      	bne.n	1164c <parse_data.constprop.0+0xfc>
        lData = &buff[i+1];
   11656:	3002      	adds	r0, #2
    {
   11658:	e791      	b.n	1157e <parse_data.constprop.0+0x2e>
    uint16_t rxLen=0;
   1165a:	4605      	mov	r5, r0
   1165c:	e7a0      	b.n	115a0 <parse_data.constprop.0+0x50>
   1165e:	bf00      	nop
   11660:	1000adc4 	.word	0x1000adc4
   11664:	0002a8fc 	.word	0x0002a8fc
   11668:	0002a8e8 	.word	0x0002a8e8

0001166c <module_i9603n_read_AT>:
    }
    return -1;
}

static i9603n_result_t module_i9603n_read_AT(uint16_t *len)
{
   1166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11670:	b095      	sub	sp, #84	@ 0x54
    i9603n_result_t result = I9603N_RESULT_FAIL;
    uint16_t msg_len = 0;
    uint16_t rem_len = 0;
    char *pStart = &irid_buf_rx[0];
    char remBuff[64] = {0};
   11672:	2240      	movs	r2, #64	@ 0x40
   11674:	2100      	movs	r1, #0
{
   11676:	4681      	mov	r9, r0
    char remBuff[64] = {0};
   11678:	a804      	add	r0, sp, #16
   1167a:	f012 fe89 	bl	24390 <memset>
    bool contFlag = true;
    uint8_t wait = 30 * 2; //30 seconds maximum for iridium response

    while(contFlag && wait-- > 0)
    {
        msg_len = artemis_i9603n_receive(irid_buf_rx);
   1167e:	48b8      	ldr	r0, [pc, #736]	@ (11960 <module_i9603n_read_AT+0x2f4>)
   11680:	f009 ffca 	bl	1b618 <artemis_i9603n_receive>
    uint16_t rem_len = 0;
   11684:	f04f 0800 	mov.w	r8, #0
    while(contFlag && wait-- > 0)
   11688:	253b      	movs	r5, #59	@ 0x3b
    uint16_t rem_len = 0;
   1168a:	4646      	mov	r6, r8

        if(msg_len > 0)
   1168c:	4604      	mov	r4, r0
   1168e:	b978      	cbnz	r0, 116b0 <module_i9603n_read_AT+0x44>
            } while(result == I9603N_RESULT_FAIL && wait-- > 0);
        }

#ifdef FREERTOS
        /* 500ms delay */
        vTaskDelay(xDelay500ms);
   11690:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11694:	f7fd fea6 	bl	f3e4 <vTaskDelay>
    while(contFlag && wait-- > 0)
   11698:	1e6b      	subs	r3, r5, #1
   1169a:	b2db      	uxtb	r3, r3
   1169c:	2d00      	cmp	r5, #0
   1169e:	f000 8133 	beq.w	11908 <module_i9603n_read_AT+0x29c>
{
   116a2:	461d      	mov	r5, r3
        msg_len = artemis_i9603n_receive(irid_buf_rx);
   116a4:	48ae      	ldr	r0, [pc, #696]	@ (11960 <module_i9603n_read_AT+0x2f4>)
   116a6:	f009 ffb7 	bl	1b618 <artemis_i9603n_receive>
        if(msg_len > 0)
   116aa:	4604      	mov	r4, r0
   116ac:	2800      	cmp	r0, #0
   116ae:	d0ef      	beq.n	11690 <module_i9603n_read_AT+0x24>
   116b0:	46aa      	mov	sl, r5
                if(parse_AT(pStart, "OK\r\n", msg_len+rem_len) != -1)
   116b2:	eb06 0b04 	add.w	fp, r6, r4
   116b6:	fa1f fb8b 	uxth.w	fp, fp
    if (pattLen > rxLen)
   116ba:	f1bb 0f03 	cmp.w	fp, #3
   116be:	f240 8136 	bls.w	1192e <module_i9603n_read_AT+0x2c2>
    for (i=0; i<=(rxLen-pattLen); i++)
   116c2:	48a7      	ldr	r0, [pc, #668]	@ (11960 <module_i9603n_read_AT+0x2f4>)
   116c4:	f1ab 0c04 	sub.w	ip, fp, #4
   116c8:	4601      	mov	r1, r0
   116ca:	4602      	mov	r2, r0
   116cc:	2300      	movs	r3, #0
            if (pattern[j] == rxData[k])
   116ce:	f812 5b01 	ldrb.w	r5, [r2], #1
                k++;
   116d2:	1c5f      	adds	r7, r3, #1
   116d4:	f103 0e02 	add.w	lr, r3, #2
            if (pattern[j] == rxData[k])
   116d8:	2d4f      	cmp	r5, #79	@ 0x4f
                k++;
   116da:	f103 0303 	add.w	r3, r3, #3
            if (pattern[j] == rxData[k])
   116de:	fa1f f883 	uxth.w	r8, r3
   116e2:	fa1f fe8e 	uxth.w	lr, lr
                k++;
   116e6:	b2bb      	uxth	r3, r7
            if (pattern[j] == rxData[k])
   116e8:	d119      	bne.n	1171e <module_i9603n_read_AT+0xb2>
   116ea:	5ccd      	ldrb	r5, [r1, r3]
   116ec:	2d4b      	cmp	r5, #75	@ 0x4b
   116ee:	d116      	bne.n	1171e <module_i9603n_read_AT+0xb2>
   116f0:	f811 500e 	ldrb.w	r5, [r1, lr]
   116f4:	2d0d      	cmp	r5, #13
   116f6:	d112      	bne.n	1171e <module_i9603n_read_AT+0xb2>
   116f8:	f811 5008 	ldrb.w	r5, [r1, r8]
   116fc:	2d0a      	cmp	r5, #10
   116fe:	d10e      	bne.n	1171e <module_i9603n_read_AT+0xb2>
                vTaskDelay(xDelay500ms);
   11700:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11704:	f7fd fe6e 	bl	f3e4 <vTaskDelay>
        vTaskDelay(xDelay500ms);
   11708:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1170c:	f7fd fe6a 	bl	f3e4 <vTaskDelay>
   11710:	2501      	movs	r5, #1
#endif
    }

    *len = msg_len+rem_len;
    return result;
}
   11712:	4628      	mov	r0, r5
    *len = msg_len+rem_len;
   11714:	f8a9 b000 	strh.w	fp, [r9]
}
   11718:	b015      	add	sp, #84	@ 0x54
   1171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0; i<=(rxLen-pattLen); i++)
   1171e:	459c      	cmp	ip, r3
   11720:	dad5      	bge.n	116ce <module_i9603n_read_AT+0x62>
    if (pattLen > rxLen)
   11722:	f1bb 0f06 	cmp.w	fp, #6
   11726:	f240 8102 	bls.w	1192e <module_i9603n_read_AT+0x2c2>
    for (i=0; i<=(rxLen-pattLen); i++)
   1172a:	e9cd 6000 	strd	r6, r0, [sp]
   1172e:	4f8c      	ldr	r7, [pc, #560]	@ (11960 <module_i9603n_read_AT+0x2f4>)
   11730:	f8cd a008 	str.w	sl, [sp, #8]
   11734:	f1ab 0c07 	sub.w	ip, fp, #7
   11738:	2300      	movs	r3, #0
            if (pattern[j] == rxData[k])
   1173a:	f817 eb01 	ldrb.w	lr, [r7], #1
                k++;
   1173e:	f103 0801 	add.w	r8, r3, #1
   11742:	1c9a      	adds	r2, r3, #2
   11744:	1cd8      	adds	r0, r3, #3
   11746:	1d1d      	adds	r5, r3, #4
   11748:	1d5e      	adds	r6, r3, #5
            if (pattern[j] == rxData[k])
   1174a:	f1be 0f45 	cmp.w	lr, #69	@ 0x45
                k++;
   1174e:	f103 0306 	add.w	r3, r3, #6
            if (pattern[j] == rxData[k])
   11752:	fa1f fa83 	uxth.w	sl, r3
   11756:	b292      	uxth	r2, r2
   11758:	b280      	uxth	r0, r0
   1175a:	b2ad      	uxth	r5, r5
   1175c:	b2b6      	uxth	r6, r6
                k++;
   1175e:	fa1f f388 	uxth.w	r3, r8
            if (pattern[j] == rxData[k])
   11762:	d123      	bne.n	117ac <module_i9603n_read_AT+0x140>
   11764:	f811 e003 	ldrb.w	lr, [r1, r3]
   11768:	f1be 0f52 	cmp.w	lr, #82	@ 0x52
   1176c:	d11e      	bne.n	117ac <module_i9603n_read_AT+0x140>
   1176e:	5c8a      	ldrb	r2, [r1, r2]
   11770:	2a52      	cmp	r2, #82	@ 0x52
   11772:	d11b      	bne.n	117ac <module_i9603n_read_AT+0x140>
   11774:	5c0a      	ldrb	r2, [r1, r0]
   11776:	2a4f      	cmp	r2, #79	@ 0x4f
   11778:	d118      	bne.n	117ac <module_i9603n_read_AT+0x140>
   1177a:	5d4a      	ldrb	r2, [r1, r5]
   1177c:	2a52      	cmp	r2, #82	@ 0x52
   1177e:	d115      	bne.n	117ac <module_i9603n_read_AT+0x140>
   11780:	5d8a      	ldrb	r2, [r1, r6]
   11782:	2a0d      	cmp	r2, #13
   11784:	d112      	bne.n	117ac <module_i9603n_read_AT+0x140>
   11786:	f811 200a 	ldrb.w	r2, [r1, sl]
   1178a:	2a0a      	cmp	r2, #10
   1178c:	d10e      	bne.n	117ac <module_i9603n_read_AT+0x140>
                vTaskDelay(xDelay500ms);
   1178e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11792:	f7fd fe27 	bl	f3e4 <vTaskDelay>
        vTaskDelay(xDelay500ms);
   11796:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1179a:	f7fd fe23 	bl	f3e4 <vTaskDelay>
   1179e:	2502      	movs	r5, #2
}
   117a0:	4628      	mov	r0, r5
    *len = msg_len+rem_len;
   117a2:	f8a9 b000 	strh.w	fp, [r9]
}
   117a6:	b015      	add	sp, #84	@ 0x54
   117a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0; i<=(rxLen-pattLen); i++)
   117ac:	459c      	cmp	ip, r3
   117ae:	dac4      	bge.n	1173a <module_i9603n_read_AT+0xce>
   117b0:	f8df e1ac 	ldr.w	lr, [pc, #428]	@ 11960 <module_i9603n_read_AT+0x2f4>
   117b4:	2300      	movs	r3, #0
            if (pattern[j] == rxData[k])
   117b6:	f81e 7b01 	ldrb.w	r7, [lr], #1
                k++;
   117ba:	f103 0801 	add.w	r8, r3, #1
   117be:	1c9a      	adds	r2, r3, #2
   117c0:	1cd8      	adds	r0, r3, #3
   117c2:	1d1e      	adds	r6, r3, #4
   117c4:	1d5d      	adds	r5, r3, #5
            if (pattern[j] == rxData[k])
   117c6:	2f52      	cmp	r7, #82	@ 0x52
                k++;
   117c8:	f103 0306 	add.w	r3, r3, #6
            if (pattern[j] == rxData[k])
   117cc:	fa1f fa83 	uxth.w	sl, r3
   117d0:	b292      	uxth	r2, r2
   117d2:	b280      	uxth	r0, r0
   117d4:	b2b6      	uxth	r6, r6
   117d6:	b2ad      	uxth	r5, r5
                k++;
   117d8:	fa1f f388 	uxth.w	r3, r8
            if (pattern[j] == rxData[k])
   117dc:	d11c      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
   117de:	5ccf      	ldrb	r7, [r1, r3]
   117e0:	2f45      	cmp	r7, #69	@ 0x45
   117e2:	d119      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
   117e4:	5c8a      	ldrb	r2, [r1, r2]
   117e6:	2a41      	cmp	r2, #65	@ 0x41
   117e8:	d116      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
   117ea:	5c0a      	ldrb	r2, [r1, r0]
   117ec:	2a44      	cmp	r2, #68	@ 0x44
   117ee:	d113      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
   117f0:	5d8a      	ldrb	r2, [r1, r6]
   117f2:	2a59      	cmp	r2, #89	@ 0x59
   117f4:	d110      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
   117f6:	5d4a      	ldrb	r2, [r1, r5]
   117f8:	2a0d      	cmp	r2, #13
   117fa:	d10d      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
   117fc:	f811 200a 	ldrb.w	r2, [r1, sl]
   11800:	2a0a      	cmp	r2, #10
   11802:	d109      	bne.n	11818 <module_i9603n_read_AT+0x1ac>
                vTaskDelay(xDelay500ms);
   11804:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11808:	f7fd fdec 	bl	f3e4 <vTaskDelay>
        vTaskDelay(xDelay500ms);
   1180c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11810:	f7fd fde8 	bl	f3e4 <vTaskDelay>
   11814:	2503      	movs	r5, #3
   11816:	e77c      	b.n	11712 <module_i9603n_read_AT+0xa6>
    for (i=0; i<=(rxLen-pattLen); i++)
   11818:	459c      	cmp	ip, r3
   1181a:	dacc      	bge.n	117b6 <module_i9603n_read_AT+0x14a>
    if (pattLen > rxLen)
   1181c:	f1bb 0f11 	cmp.w	fp, #17
   11820:	e9dd 6000 	ldrd	r6, r0, [sp]
   11824:	f8dd a008 	ldr.w	sl, [sp, #8]
   11828:	d97e      	bls.n	11928 <module_i9603n_read_AT+0x2bc>
   1182a:	f8df e138 	ldr.w	lr, [pc, #312]	@ 11964 <module_i9603n_read_AT+0x2f8>
   1182e:	f1ce 0500 	rsb	r5, lr, #0
   11832:	f1ab 0811 	sub.w	r8, fp, #17
   11836:	b2ad      	uxth	r5, r5
   11838:	f04f 0c00 	mov.w	ip, #0
   1183c:	f10e 0712 	add.w	r7, lr, #18
   11840:	4673      	mov	r3, lr
   11842:	e001      	b.n	11848 <module_i9603n_read_AT+0x1dc>
        for (j=0; j<pattLen; j++)
   11844:	42bb      	cmp	r3, r7
   11846:	d065      	beq.n	11914 <module_i9603n_read_AT+0x2a8>
                k++;
   11848:	18ea      	adds	r2, r5, r3
   1184a:	b292      	uxth	r2, r2
            if (pattern[j] == rxData[k])
   1184c:	f813 6b01 	ldrb.w	r6, [r3], #1
   11850:	5c8a      	ldrb	r2, [r1, r2]
   11852:	42b2      	cmp	r2, r6
   11854:	d0f6      	beq.n	11844 <module_i9603n_read_AT+0x1d8>
    for (i=0; i<=(rxLen-pattLen); i++)
   11856:	f10c 0c01 	add.w	ip, ip, #1
   1185a:	3501      	adds	r5, #1
   1185c:	45e0      	cmp	r8, ip
   1185e:	b2ad      	uxth	r5, r5
   11860:	d1ee      	bne.n	11840 <module_i9603n_read_AT+0x1d4>
   11862:	9e00      	ldr	r6, [sp, #0]
   11864:	f8cd b00c 	str.w	fp, [sp, #12]
   11868:	f1ab 0309 	sub.w	r3, fp, #9
   1186c:	f04f 0800 	mov.w	r8, #0
   11870:	9301      	str	r3, [sp, #4]
   11872:	4643      	mov	r3, r8
            if (pattern[j] == rxData[k])
   11874:	f810 2b01 	ldrb.w	r2, [r0], #1
   11878:	9200      	str	r2, [sp, #0]
                k++;
   1187a:	f103 0208 	add.w	r2, r3, #8
            if (pattern[j] == rxData[k])
   1187e:	b292      	uxth	r2, r2
   11880:	9202      	str	r2, [sp, #8]
   11882:	9a00      	ldr	r2, [sp, #0]
                k++;
   11884:	f103 0b02 	add.w	fp, r3, #2
   11888:	f103 0803 	add.w	r8, r3, #3
   1188c:	f103 0e04 	add.w	lr, r3, #4
   11890:	f103 0c05 	add.w	ip, r3, #5
   11894:	1d9f      	adds	r7, r3, #6
   11896:	1ddd      	adds	r5, r3, #7
            if (pattern[j] == rxData[k])
   11898:	2a53      	cmp	r2, #83	@ 0x53
                k++;
   1189a:	f103 0301 	add.w	r3, r3, #1
            if (pattern[j] == rxData[k])
   1189e:	fa1f fb8b 	uxth.w	fp, fp
   118a2:	fa1f f888 	uxth.w	r8, r8
   118a6:	fa1f fe8e 	uxth.w	lr, lr
   118aa:	fa1f fc8c 	uxth.w	ip, ip
   118ae:	b2bf      	uxth	r7, r7
   118b0:	b2ad      	uxth	r5, r5
                k++;
   118b2:	b29b      	uxth	r3, r3
            if (pattern[j] == rxData[k])
   118b4:	d12a      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118b6:	5cca      	ldrb	r2, [r1, r3]
   118b8:	2a42      	cmp	r2, #66	@ 0x42
   118ba:	d127      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118bc:	f811 200b 	ldrb.w	r2, [r1, fp]
   118c0:	2a44      	cmp	r2, #68	@ 0x44
   118c2:	d123      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118c4:	f811 2008 	ldrb.w	r2, [r1, r8]
   118c8:	2a52      	cmp	r2, #82	@ 0x52
   118ca:	d11f      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118cc:	f811 200e 	ldrb.w	r2, [r1, lr]
   118d0:	2a49      	cmp	r2, #73	@ 0x49
   118d2:	d11b      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118d4:	f811 200c 	ldrb.w	r2, [r1, ip]
   118d8:	2a4e      	cmp	r2, #78	@ 0x4e
   118da:	d117      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118dc:	5dca      	ldrb	r2, [r1, r7]
   118de:	2a47      	cmp	r2, #71	@ 0x47
   118e0:	d114      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118e2:	5d4a      	ldrb	r2, [r1, r5]
   118e4:	2a0d      	cmp	r2, #13
   118e6:	d111      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
   118e8:	9a02      	ldr	r2, [sp, #8]
   118ea:	5c8a      	ldrb	r2, [r1, r2]
   118ec:	2a0a      	cmp	r2, #10
   118ee:	d10d      	bne.n	1190c <module_i9603n_read_AT+0x2a0>
                vTaskDelay(xDelay500ms);
   118f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   118f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   118f8:	f7fd fd74 	bl	f3e4 <vTaskDelay>
        vTaskDelay(xDelay500ms);
   118fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11900:	f7fd fd70 	bl	f3e4 <vTaskDelay>
                    result = I9603N_RESULT_SBD_RING;
   11904:	2504      	movs	r5, #4
   11906:	e704      	b.n	11712 <module_i9603n_read_AT+0xa6>
   11908:	46b3      	mov	fp, r6
   1190a:	e702      	b.n	11712 <module_i9603n_read_AT+0xa6>
    for (i=0; i<=(rxLen-pattLen); i++)
   1190c:	9a01      	ldr	r2, [sp, #4]
   1190e:	429a      	cmp	r2, r3
   11910:	dab0      	bge.n	11874 <module_i9603n_read_AT+0x208>
   11912:	e00c      	b.n	1192e <module_i9603n_read_AT+0x2c2>
                vTaskDelay(xDelay500ms);
   11914:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11918:	f7fd fd64 	bl	f3e4 <vTaskDelay>
        vTaskDelay(xDelay500ms);
   1191c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11920:	f7fd fd60 	bl	f3e4 <vTaskDelay>
                    result = I9603N_RESULT_HARDWARE_FAILURE;
   11924:	2505      	movs	r5, #5
   11926:	e6f4      	b.n	11712 <module_i9603n_read_AT+0xa6>
    if (pattLen > rxLen)
   11928:	f1bb 0f08 	cmp.w	fp, #8
   1192c:	d89a      	bhi.n	11864 <module_i9603n_read_AT+0x1f8>
                    uint16_t length = artemis_i9603n_receive(remBuff);
   1192e:	a804      	add	r0, sp, #16
   11930:	f009 fe72 	bl	1b618 <artemis_i9603n_receive>
                    if (length > 0)
   11934:	4605      	mov	r5, r0
   11936:	b9b8      	cbnz	r0, 11968 <module_i9603n_read_AT+0x2fc>
                vTaskDelay(xDelay500ms);
   11938:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1193c:	f7fd fd52 	bl	f3e4 <vTaskDelay>
            } while(result == I9603N_RESULT_FAIL && wait-- > 0);
   11940:	f10a 33ff 	add.w	r3, sl, #4294967295
   11944:	fa5f fa83 	uxtb.w	sl, r3
   11948:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
   1194c:	f47f aeb1 	bne.w	116b2 <module_i9603n_read_AT+0x46>
        vTaskDelay(xDelay500ms);
   11950:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   11954:	f7fd fd46 	bl	f3e4 <vTaskDelay>
    while(contFlag && wait-- > 0)
   11958:	23fe      	movs	r3, #254	@ 0xfe
{
   1195a:	461d      	mov	r5, r3
   1195c:	e6a2      	b.n	116a4 <module_i9603n_read_AT+0x38>
   1195e:	bf00      	nop
   11960:	1000adc4 	.word	0x1000adc4
   11964:	0002a8ec 	.word	0x0002a8ec
                            irid_buf_rx[msg_len+i] = remBuff[i];
   11968:	4804      	ldr	r0, [pc, #16]	@ (1197c <module_i9603n_read_AT+0x310>)
   1196a:	462a      	mov	r2, r5
   1196c:	4420      	add	r0, r4
   1196e:	a904      	add	r1, sp, #16
                        rem_len += length;
   11970:	4435      	add	r5, r6
                            irid_buf_rx[msg_len+i] = remBuff[i];
   11972:	f7fb f8dd 	bl	cb30 <memcpy>
                        rem_len += length;
   11976:	b2ae      	uxth	r6, r5
   11978:	e7de      	b.n	11938 <module_i9603n_read_AT+0x2cc>
   1197a:	bf00      	nop
   1197c:	1000adc4 	.word	0x1000adc4

00011980 <i9603n_initialize>:
{
   11980:	b508      	push	{r3, lr}
    artemis_i9603n_initialize();
   11982:	f009 fd63 	bl	1b44c <artemis_i9603n_initialize>
}
   11986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    artemis_sc_initialize();
   1198a:	f00a b8cd 	b.w	1bb28 <artemis_sc_initialize>
   1198e:	bf00      	nop

00011990 <i9603n_on>:
{
   11990:	b510      	push	{r4, lr}
	retVal = artemis_sc_power_startup();
   11992:	f00a f927 	bl	1bbe4 <artemis_sc_power_startup>
	if (retVal)
   11996:	4604      	mov	r4, r0
   11998:	b908      	cbnz	r0, 1199e <i9603n_on+0xe>
}
   1199a:	4620      	mov	r0, r4
   1199c:	bd10      	pop	{r4, pc}
		artemis_i9603n_power_on();
   1199e:	f009 fde1 	bl	1b564 <artemis_i9603n_power_on>
}
   119a2:	4620      	mov	r0, r4
   119a4:	bd10      	pop	{r4, pc}
   119a6:	bf00      	nop

000119a8 <i9603n_off>:
{
   119a8:	b508      	push	{r3, lr}
    artemis_i9603n_power_off();
   119aa:	f009 fded 	bl	1b588 <artemis_i9603n_power_off>
}
   119ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    artemis_sc_power_off();
   119b2:	f00a b961 	b.w	1bc78 <artemis_sc_power_off>
   119b6:	bf00      	nop

000119b8 <i9603n_sleep>:
    artemis_i9603n_power_off();
   119b8:	f009 bde6 	b.w	1b588 <artemis_i9603n_power_off>

000119bc <i9603n_wakeup>:
    artemis_i9603n_power_on();
   119bc:	f009 bdd2 	b.w	1b564 <artemis_i9603n_power_on>

000119c0 <GET_Iridium_satellite>:
{
   119c0:	b510      	push	{r4, lr}
    taskENTER_CRITICAL();
   119c2:	f7fb fb7f 	bl	d0c4 <vPortEnterCritical>
    retVal = xVisible;
   119c6:	4b03      	ldr	r3, [pc, #12]	@ (119d4 <GET_Iridium_satellite+0x14>)
   119c8:	781c      	ldrb	r4, [r3, #0]
    taskEXIT_CRITICAL();
   119ca:	f7fb fba7 	bl	d11c <vPortExitCritical>
}
   119ce:	4620      	mov	r0, r4
   119d0:	bd10      	pop	{r4, pc}
   119d2:	bf00      	nop
   119d4:	1000adc2 	.word	0x1000adc2

000119d8 <task_Iridium_satellite_visibility>:
{
   119d8:	b500      	push	{lr}
   119da:	4602      	mov	r2, r0
   119dc:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t) task_Iridium_satellite,
   119de:	2304      	movs	r3, #4
   119e0:	e9cd 3200 	strd	r3, r2, [sp]
   119e4:	490d      	ldr	r1, [pc, #52]	@ (11a1c <task_Iridium_satellite_visibility+0x44>)
   119e6:	480e      	ldr	r0, [pc, #56]	@ (11a20 <task_Iridium_satellite_visibility+0x48>)
   119e8:	2300      	movs	r3, #0
   119ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
   119ee:	f7fc ffef 	bl	e9d0 <xTaskCreate>
   119f2:	2801      	cmp	r0, #1
   119f4:	d102      	bne.n	119fc <task_Iridium_satellite_visibility+0x24>
}
   119f6:	b003      	add	sp, #12
   119f8:	f85d fb04 	ldr.w	pc, [sp], #4
   119fc:	f04f 0380 	mov.w	r3, #128	@ 0x80
   11a00:	f383 8811 	msr	BASEPRI, r3
   11a04:	f3bf 8f6f 	isb	sy
   11a08:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t) task_Iridium_satellite,
   11a0c:	4905      	ldr	r1, [pc, #20]	@ (11a24 <task_Iridium_satellite_visibility+0x4c>)
   11a0e:	4806      	ldr	r0, [pc, #24]	@ (11a28 <task_Iridium_satellite_visibility+0x50>)
   11a10:	f240 1241 	movw	r2, #321	@ 0x141
   11a14:	f7ff fb28 	bl	11068 <am_util_stdio_printf>
   11a18:	e7fe      	b.n	11a18 <task_Iridium_satellite_visibility+0x40>
   11a1a:	bf00      	nop
   11a1c:	0002a900 	.word	0x0002a900
   11a20:	000114b5 	.word	0x000114b5
   11a24:	0002a918 	.word	0x0002a918
   11a28:	0002a268 	.word	0x0002a268

00011a2c <GET_Iridium_status>:
{
   11a2c:	b510      	push	{r4, lr}
   11a2e:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
   11a30:	f7fb fb48 	bl	d0c4 <vPortEnterCritical>
        rData[i] = xTStatus[i];
   11a34:	4b04      	ldr	r3, [pc, #16]	@ (11a48 <GET_Iridium_status+0x1c>)
   11a36:	6818      	ldr	r0, [r3, #0]
   11a38:	6020      	str	r0, [r4, #0]
   11a3a:	889b      	ldrh	r3, [r3, #4]
   11a3c:	80a3      	strh	r3, [r4, #4]
    taskEXIT_CRITICAL();
   11a3e:	f7fb fb6d 	bl	d11c <vPortExitCritical>
}
   11a42:	2001      	movs	r0, #1
   11a44:	bd10      	pop	{r4, pc}
   11a46:	bf00      	nop
   11a48:	1000adbc 	.word	0x1000adbc

00011a4c <task_Iridium_transfer>:
{
   11a4c:	b500      	push	{lr}
   11a4e:	4602      	mov	r2, r0
   11a50:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t) task_Iridium,
   11a52:	2304      	movs	r3, #4
   11a54:	e9cd 3200 	strd	r3, r2, [sp]
   11a58:	490d      	ldr	r1, [pc, #52]	@ (11a90 <task_Iridium_transfer+0x44>)
   11a5a:	480e      	ldr	r0, [pc, #56]	@ (11a94 <task_Iridium_transfer+0x48>)
   11a5c:	2300      	movs	r3, #0
   11a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
   11a62:	f7fc ffb5 	bl	e9d0 <xTaskCreate>
   11a66:	2801      	cmp	r0, #1
   11a68:	d102      	bne.n	11a70 <task_Iridium_transfer+0x24>
}
   11a6a:	b003      	add	sp, #12
   11a6c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a70:	f04f 0380 	mov.w	r3, #128	@ 0x80
   11a74:	f383 8811 	msr	BASEPRI, r3
   11a78:	f3bf 8f6f 	isb	sy
   11a7c:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t) task_Iridium,
   11a80:	4905      	ldr	r1, [pc, #20]	@ (11a98 <task_Iridium_transfer+0x4c>)
   11a82:	4806      	ldr	r0, [pc, #24]	@ (11a9c <task_Iridium_transfer+0x50>)
   11a84:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
   11a88:	f7ff faee 	bl	11068 <am_util_stdio_printf>
   11a8c:	e7fe      	b.n	11a8c <task_Iridium_transfer+0x40>
   11a8e:	bf00      	nop
   11a90:	0002a928 	.word	0x0002a928
   11a94:	00011b95 	.word	0x00011b95
   11a98:	0002a918 	.word	0x0002a918
   11a9c:	0002a268 	.word	0x0002a268

00011aa0 <SET_Iridium_delay_rate>:
    if( (rate > 0.0) && (rate <= IRIDIUM_MAXIMUM_RATE))
   11aa0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   11aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11aa8:	dd0e      	ble.n	11ac8 <SET_Iridium_delay_rate+0x28>
{
   11aaa:	b538      	push	{r3, r4, r5, lr}
    if( (rate > 0.0) && (rate <= IRIDIUM_MAXIMUM_RATE))
   11aac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
   11ab0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   11ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   11ab8:	ed2d 8b02 	vpush	{d8}
   11abc:	eeb0 8a40 	vmov.f32	s16, s0
    if( (rate > 0.0) && (rate <= IRIDIUM_MAXIMUM_RATE))
   11ac0:	d903      	bls.n	11aca <SET_Iridium_delay_rate+0x2a>
}
   11ac2:	ecbd 8b02 	vpop	{d8}
   11ac6:	bd38      	pop	{r3, r4, r5, pc}
   11ac8:	4770      	bx	lr
        ARTEMIS_DEBUG_PRINTF("Iridium :: Setting Iridium delay rate = %.3fHz\n", rate);
   11aca:	ee10 0a10 	vmov	r0, s0
   11ace:	f7fa fc7b 	bl	c3c8 <__aeabi_f2d>
   11ad2:	4604      	mov	r4, r0
   11ad4:	460d      	mov	r5, r1
   11ad6:	460b      	mov	r3, r1
   11ad8:	4622      	mov	r2, r4
   11ada:	4807      	ldr	r0, [pc, #28]	@ (11af8 <SET_Iridium_delay_rate+0x58>)
   11adc:	f7ff fac4 	bl	11068 <am_util_stdio_printf>
   11ae0:	462b      	mov	r3, r5
   11ae2:	4805      	ldr	r0, [pc, #20]	@ (11af8 <SET_Iridium_delay_rate+0x58>)
   11ae4:	4622      	mov	r2, r4
   11ae6:	f00c fa47 	bl	1df78 <datalogger_log_debug>
        iridium_delay_rate = rate;
   11aea:	4b04      	ldr	r3, [pc, #16]	@ (11afc <SET_Iridium_delay_rate+0x5c>)
   11aec:	ed83 8a00 	vstr	s16, [r3]
}
   11af0:	ecbd 8b02 	vpop	{d8}
   11af4:	bd38      	pop	{r3, r4, r5, pc}
   11af6:	bf00      	nop
   11af8:	0002a940 	.word	0x0002a940
   11afc:	1000231c 	.word	0x1000231c

00011b00 <i9603n_send_AT_cmd>:
{
   11b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b04:	b0cc      	sub	sp, #304	@ 0x130
   11b06:	460f      	mov	r7, r1
   11b08:	4606      	mov	r6, r0
    uint16_t txLen = strlen(cmd);
   11b0a:	f7fb f8b9 	bl	cc80 <strlen>
    char lData[300] = {0};
   11b0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
    uint16_t txLen = strlen(cmd);
   11b12:	fa1f f880 	uxth.w	r8, r0
    char lData[300] = {0};
   11b16:	2100      	movs	r1, #0
   11b18:	a801      	add	r0, sp, #4
   11b1a:	f012 fc39 	bl	24390 <memset>
    uint16_t len=0;
   11b1e:	2500      	movs	r5, #0
    if (txLen > 120)
   11b20:	f1b8 0f78 	cmp.w	r8, #120	@ 0x78
    uint16_t len=0;
   11b24:	f8ad 5002 	strh.w	r5, [sp, #2]
    if (txLen > 120)
   11b28:	d815      	bhi.n	11b56 <i9603n_send_AT_cmd+0x56>
    artemis_i9603n_send(txData, txlen);
   11b2a:	4641      	mov	r1, r8
   11b2c:	4630      	mov	r0, r6
   11b2e:	f009 fd4f 	bl	1b5d0 <artemis_i9603n_send>
        result = module_i9603n_read_AT(&len);
   11b32:	f10d 0002 	add.w	r0, sp, #2
   11b36:	f7ff fd99 	bl	1166c <module_i9603n_read_AT>
        if (result == I9603N_RESULT_OK)
   11b3a:	2801      	cmp	r0, #1
   11b3c:	d017      	beq.n	11b6e <i9603n_send_AT_cmd+0x6e>
    uint16_t len = strlen(buff)+1;
   11b3e:	4813      	ldr	r0, [pc, #76]	@ (11b8c <i9603n_send_AT_cmd+0x8c>)
   11b40:	f7fb f89e 	bl	cc80 <strlen>
        buff[i] = 0;
   11b44:	2100      	movs	r1, #0
   11b46:	1c42      	adds	r2, r0, #1
   11b48:	4810      	ldr	r0, [pc, #64]	@ (11b8c <i9603n_send_AT_cmd+0x8c>)
   11b4a:	f012 fc21 	bl	24390 <memset>
}
   11b4e:	4628      	mov	r0, r5
   11b50:	b04c      	add	sp, #304	@ 0x130
   11b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ARTEMIS_DEBUG_PRINTF("Iridium :: limit of cmd size is 120 bytes !, %u\n", txLen);
   11b56:	4641      	mov	r1, r8
   11b58:	480d      	ldr	r0, [pc, #52]	@ (11b90 <i9603n_send_AT_cmd+0x90>)
   11b5a:	f7ff fa85 	bl	11068 <am_util_stdio_printf>
   11b5e:	480c      	ldr	r0, [pc, #48]	@ (11b90 <i9603n_send_AT_cmd+0x90>)
   11b60:	4641      	mov	r1, r8
   11b62:	f00c fa09 	bl	1df78 <datalogger_log_debug>
}
   11b66:	4628      	mov	r0, r5
   11b68:	b04c      	add	sp, #304	@ 0x130
   11b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            memcpy (lData, irid_buf_rx, len);
   11b6e:	f8bd 5002 	ldrh.w	r5, [sp, #2]
   11b72:	4906      	ldr	r1, [pc, #24]	@ (11b8c <i9603n_send_AT_cmd+0x8c>)
   11b74:	462a      	mov	r2, r5
   11b76:	a801      	add	r0, sp, #4
   11b78:	f7fa ffda 	bl	cb30 <memcpy>
            for (uint16_t i=0; i<len; i++)
   11b7c:	2d00      	cmp	r5, #0
   11b7e:	d0de      	beq.n	11b3e <i9603n_send_AT_cmd+0x3e>
                rxData[i] = lData[i];
   11b80:	462a      	mov	r2, r5
   11b82:	a901      	add	r1, sp, #4
   11b84:	4638      	mov	r0, r7
   11b86:	f7fa ffd3 	bl	cb30 <memcpy>
   11b8a:	e7d8      	b.n	11b3e <i9603n_send_AT_cmd+0x3e>
   11b8c:	1000adc4 	.word	0x1000adc4
   11b90:	0002a970 	.word	0x0002a970

00011b94 <task_Iridium>:
    uint32_t period = xDelay1000ms/iridium_delay_rate;
   11b94:	4ba4      	ldr	r3, [pc, #656]	@ (11e28 <task_Iridium+0x294>)
   11b96:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 11e2c <task_Iridium+0x298>
   11b9a:	ed93 7a00 	vldr	s14, [r3]
    ARTEMIS_DEBUG_PRINTF("Iridium :: Delay PERIOD=%ums, Max Tries=%u\n", period, IRIDIUM_TRIES);
   11b9e:	48a4      	ldr	r0, [pc, #656]	@ (11e30 <task_Iridium+0x29c>)
    uint32_t period = xDelay1000ms/iridium_delay_rate;
   11ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
{
   11ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ARTEMIS_DEBUG_PRINTF("Iridium :: Delay PERIOD=%ums, Max Tries=%u\n", period, IRIDIUM_TRIES);
   11ba8:	2205      	movs	r2, #5
{
   11baa:	b08d      	sub	sp, #52	@ 0x34
    artemis_i9603n_send(txData, txlen);
   11bac:	f8df 82c4 	ldr.w	r8, [pc, #708]	@ 11e74 <task_Iridium+0x2e0>
    uint16_t len = strlen(buff)+1;
   11bb0:	4da0      	ldr	r5, [pc, #640]	@ (11e34 <task_Iridium+0x2a0>)
    while(run)
   11bb2:	2401      	movs	r4, #1
    uint32_t period = xDelay1000ms/iridium_delay_rate;
   11bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   11bb8:	ee17 7a90 	vmov	r7, s15
    ARTEMIS_DEBUG_PRINTF("Iridium :: Delay PERIOD=%ums, Max Tries=%u\n", period, IRIDIUM_TRIES);
   11bbc:	4639      	mov	r1, r7
   11bbe:	f7ff fa53 	bl	11068 <am_util_stdio_printf>
   11bc2:	489b      	ldr	r0, [pc, #620]	@ (11e30 <task_Iridium+0x29c>)
   11bc4:	2205      	movs	r2, #5
   11bc6:	4639      	mov	r1, r7
   11bc8:	f00c f9d6 	bl	1df78 <datalogger_log_debug>
    uint16_t buf[10] = {0};
   11bcc:	2300      	movs	r3, #0
   11bce:	e9cd 3308 	strd	r3, r3, [sp, #32]
   11bd2:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    char buf_AT[16] = {0};
   11bd6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    uint16_t buf[10] = {0};
   11bda:	9307      	str	r3, [sp, #28]
    char buf_AT[16] = {0};
   11bdc:	9303      	str	r3, [sp, #12]
   11bde:	9306      	str	r3, [sp, #24]
    artemis_i9603n_send(txData, txlen);
   11be0:	2109      	movs	r1, #9
   11be2:	4640      	mov	r0, r8
   11be4:	f009 fcf4 	bl	1b5d0 <artemis_i9603n_send>
    result = module_i9603n_read_AT(&len);
   11be8:	f10d 000a 	add.w	r0, sp, #10
   11bec:	f7ff fd3e 	bl	1166c <module_i9603n_read_AT>
    if (result == I9603N_RESULT_OK)
   11bf0:	2801      	cmp	r0, #1
   11bf2:	d05f      	beq.n	11cb4 <task_Iridium+0x120>
    uint16_t len = strlen(buff)+1;
   11bf4:	4628      	mov	r0, r5
   11bf6:	f7fb f843 	bl	cc80 <strlen>
        buff[i] = 0;
   11bfa:	1c42      	adds	r2, r0, #1
   11bfc:	b292      	uxth	r2, r2
   11bfe:	2100      	movs	r1, #0
   11c00:	4628      	mov	r0, r5
   11c02:	f012 fbc5 	bl	24390 <memset>
        if (timer >= IRIDIUM_TRIES)
   11c06:	2c05      	cmp	r4, #5
   11c08:	d130      	bne.n	11c6c <task_Iridium+0xd8>
                ARTEMIS_DEBUG_PRINTF("Iridium :: Reached Max Tries\n");
   11c0a:	488b      	ldr	r0, [pc, #556]	@ (11e38 <task_Iridium+0x2a4>)
   11c0c:	f7ff fa2c 	bl	11068 <am_util_stdio_printf>
   11c10:	4889      	ldr	r0, [pc, #548]	@ (11e38 <task_Iridium+0x2a4>)
   11c12:	f00c f9b1 	bl	1df78 <datalogger_log_debug>
                vTaskDelay(xDelay2000ms);
   11c16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   11c1a:	f7fd fbe3 	bl	f3e4 <vTaskDelay>
                ARTEMIS_DEBUG_PRINTF("Iridium :: Clearing the Originated buffer:\n");
   11c1e:	4887      	ldr	r0, [pc, #540]	@ (11e3c <task_Iridium+0x2a8>)
   11c20:	f7ff fa22 	bl	11068 <am_util_stdio_printf>
   11c24:	4885      	ldr	r0, [pc, #532]	@ (11e3c <task_Iridium+0x2a8>)
   11c26:	f00c f9a7 	bl	1df78 <datalogger_log_debug>
                len = i9603n_send_AT_cmd("AT+SBDD0\r", buf_AT);
   11c2a:	4885      	ldr	r0, [pc, #532]	@ (11e40 <task_Iridium+0x2ac>)
   11c2c:	a903      	add	r1, sp, #12
   11c2e:	f7ff ff67 	bl	11b00 <i9603n_send_AT_cmd>
                if(len>0)
   11c32:	b2c0      	uxtb	r0, r0
   11c34:	2800      	cmp	r0, #0
   11c36:	d136      	bne.n	11ca6 <task_Iridium+0x112>
                    ARTEMIS_DEBUG_PRINTF("Iridium :: Originated buffer was not cleared\n");
   11c38:	4882      	ldr	r0, [pc, #520]	@ (11e44 <task_Iridium+0x2b0>)
   11c3a:	f7ff fa15 	bl	11068 <am_util_stdio_printf>
   11c3e:	4881      	ldr	r0, [pc, #516]	@ (11e44 <task_Iridium+0x2b0>)
   11c40:	f00c f99a 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("Iridium :: Task Deleted\n");
   11c44:	4880      	ldr	r0, [pc, #512]	@ (11e48 <task_Iridium+0x2b4>)
   11c46:	f7ff fa0f 	bl	11068 <am_util_stdio_printf>
   11c4a:	487f      	ldr	r0, [pc, #508]	@ (11e48 <task_Iridium+0x2b4>)
   11c4c:	f00c f994 	bl	1df78 <datalogger_log_debug>
    vTaskDelete(NULL);
   11c50:	2000      	movs	r0, #0
}
   11c52:	b00d      	add	sp, #52	@ 0x34
   11c54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vTaskDelete(NULL);
   11c58:	f7fc bfb0 	b.w	ebbc <vTaskDelete>
                ARTEMIS_DEBUG_PRINTF("Iridium :: No Network Service\n");
   11c5c:	487b      	ldr	r0, [pc, #492]	@ (11e4c <task_Iridium+0x2b8>)
   11c5e:	f7ff fa03 	bl	11068 <am_util_stdio_printf>
   11c62:	487a      	ldr	r0, [pc, #488]	@ (11e4c <task_Iridium+0x2b8>)
   11c64:	f00c f988 	bl	1df78 <datalogger_log_debug>
        if (timer >= IRIDIUM_TRIES)
   11c68:	2c05      	cmp	r4, #5
   11c6a:	d0ce      	beq.n	11c0a <task_Iridium+0x76>
            vTaskDelay(period);
   11c6c:	4638      	mov	r0, r7
   11c6e:	3401      	adds	r4, #1
   11c70:	f7fd fbb8 	bl	f3e4 <vTaskDelay>
   11c74:	b2e4      	uxtb	r4, r4
   11c76:	e7b3      	b.n	11be0 <task_Iridium+0x4c>
                ARTEMIS_DEBUG_PRINTF("Iridium :: Transfer Successful, clearing buffer\n");
   11c78:	4875      	ldr	r0, [pc, #468]	@ (11e50 <task_Iridium+0x2bc>)
   11c7a:	f7ff f9f5 	bl	11068 <am_util_stdio_printf>
   11c7e:	4874      	ldr	r0, [pc, #464]	@ (11e50 <task_Iridium+0x2bc>)
                    ARTEMIS_DEBUG_PRINTF("Iridium :: Try later, Traffic management period.\n");
   11c80:	f00c f97a 	bl	1df78 <datalogger_log_debug>
                vTaskDelay(xDelay2000ms);
   11c84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   11c88:	f7fd fbac 	bl	f3e4 <vTaskDelay>
                ARTEMIS_DEBUG_PRINTF("Iridium :: Clearing the Originated buffer:\n");
   11c8c:	486b      	ldr	r0, [pc, #428]	@ (11e3c <task_Iridium+0x2a8>)
   11c8e:	f7ff f9eb 	bl	11068 <am_util_stdio_printf>
   11c92:	486a      	ldr	r0, [pc, #424]	@ (11e3c <task_Iridium+0x2a8>)
   11c94:	f00c f970 	bl	1df78 <datalogger_log_debug>
                len = i9603n_send_AT_cmd("AT+SBDD0\r", buf_AT);
   11c98:	4869      	ldr	r0, [pc, #420]	@ (11e40 <task_Iridium+0x2ac>)
   11c9a:	a903      	add	r1, sp, #12
   11c9c:	f7ff ff30 	bl	11b00 <i9603n_send_AT_cmd>
                if(len>0)
   11ca0:	b2c0      	uxtb	r0, r0
   11ca2:	2800      	cmp	r0, #0
   11ca4:	d0af      	beq.n	11c06 <task_Iridium+0x72>
                    ARTEMIS_DEBUG_PRINTF("Iridium :: Originated buffer is cleared\n");
   11ca6:	486b      	ldr	r0, [pc, #428]	@ (11e54 <task_Iridium+0x2c0>)
   11ca8:	f7ff f9de 	bl	11068 <am_util_stdio_printf>
   11cac:	4869      	ldr	r0, [pc, #420]	@ (11e54 <task_Iridium+0x2c0>)
   11cae:	f00c f963 	bl	1df78 <datalogger_log_debug>
        if (timer >= IRIDIUM_TRIES)
   11cb2:	e7c7      	b.n	11c44 <task_Iridium+0xb0>
        rxLen = parse_data(irid_buf_rx, rxData);
   11cb4:	a807      	add	r0, sp, #28
   11cb6:	f7ff fc4b 	bl	11550 <parse_data.constprop.0>
   11cba:	4606      	mov	r6, r0
    uint16_t len = strlen(buff)+1;
   11cbc:	4628      	mov	r0, r5
   11cbe:	f7fa ffdf 	bl	cc80 <strlen>
        buff[i] = 0;
   11cc2:	1c42      	adds	r2, r0, #1
    return rxLen;
   11cc4:	b2f6      	uxtb	r6, r6
        buff[i] = 0;
   11cc6:	b292      	uxth	r2, r2
   11cc8:	2100      	movs	r1, #0
   11cca:	4628      	mov	r0, r5
   11ccc:	f012 fb60 	bl	24390 <memset>
        if (len > 0)
   11cd0:	2e00      	cmp	r6, #0
   11cd2:	d098      	beq.n	11c06 <task_Iridium+0x72>
            taskENTER_CRITICAL();
   11cd4:	f7fb f9f6 	bl	d0c4 <vPortEnterCritical>
                xTStatus[i] = buf[i];
   11cd8:	4a5f      	ldr	r2, [pc, #380]	@ (11e58 <task_Iridium+0x2c4>)
   11cda:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   11cde:	9301      	str	r3, [sp, #4]
            for (uint8_t i=0; i<len; i++)
   11ce0:	2e01      	cmp	r6, #1
                xTStatus[i] = buf[i];
   11ce2:	7013      	strb	r3, [r2, #0]
            for (uint8_t i=0; i<len; i++)
   11ce4:	d016      	beq.n	11d14 <task_Iridium+0x180>
                xTStatus[i] = buf[i];
   11ce6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   11cea:	7053      	strb	r3, [r2, #1]
            for (uint8_t i=0; i<len; i++)
   11cec:	2e02      	cmp	r6, #2
   11cee:	d011      	beq.n	11d14 <task_Iridium+0x180>
                xTStatus[i] = buf[i];
   11cf0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   11cf4:	7093      	strb	r3, [r2, #2]
            for (uint8_t i=0; i<len; i++)
   11cf6:	2e03      	cmp	r6, #3
   11cf8:	d00c      	beq.n	11d14 <task_Iridium+0x180>
                xTStatus[i] = buf[i];
   11cfa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
   11cfe:	70d3      	strb	r3, [r2, #3]
            for (uint8_t i=0; i<len; i++)
   11d00:	2e04      	cmp	r6, #4
   11d02:	d007      	beq.n	11d14 <task_Iridium+0x180>
                xTStatus[i] = buf[i];
   11d04:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
   11d08:	7113      	strb	r3, [r2, #4]
            for (uint8_t i=0; i<len; i++)
   11d0a:	2e05      	cmp	r6, #5
                xTStatus[i] = buf[i];
   11d0c:	bf1c      	itt	ne
   11d0e:	f8bd 3026 	ldrhne.w	r3, [sp, #38]	@ 0x26
   11d12:	7153      	strbne	r3, [r2, #5]
            taskEXIT_CRITICAL();
   11d14:	f7fb fa02 	bl	d11c <vPortExitCritical>
            ARTEMIS_DEBUG_PRINTF("Iridium :: Transfer status : ");
   11d18:	4850      	ldr	r0, [pc, #320]	@ (11e5c <task_Iridium+0x2c8>)
   11d1a:	f7ff f9a5 	bl	11068 <am_util_stdio_printf>
   11d1e:	484f      	ldr	r0, [pc, #316]	@ (11e5c <task_Iridium+0x2c8>)
   11d20:	f00c f92a 	bl	1df78 <datalogger_log_debug>
            for(uint16_t i=0; i<len; i++)
   11d24:	fa1f fa86 	uxth.w	sl, r6
   11d28:	b186      	cbz	r6, 11d4c <task_Iridium+0x1b8>
   11d2a:	ab07      	add	r3, sp, #28
                ARTEMIS_DEBUG_PRINTF("%u ", buf[i]);
   11d2c:	4e4c      	ldr	r6, [pc, #304]	@ (11e60 <task_Iridium+0x2cc>)
   11d2e:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
   11d32:	469b      	mov	fp, r3
   11d34:	f83b 9b02 	ldrh.w	r9, [fp], #2
   11d38:	4630      	mov	r0, r6
   11d3a:	4649      	mov	r1, r9
   11d3c:	f7ff f994 	bl	11068 <am_util_stdio_printf>
   11d40:	4649      	mov	r1, r9
   11d42:	4630      	mov	r0, r6
   11d44:	f00c f918 	bl	1df78 <datalogger_log_debug>
            for(uint16_t i=0; i<len; i++)
   11d48:	45da      	cmp	sl, fp
   11d4a:	d1f3      	bne.n	11d34 <task_Iridium+0x1a0>
            ARTEMIS_DEBUG_PRINTF("\n");
   11d4c:	4845      	ldr	r0, [pc, #276]	@ (11e64 <task_Iridium+0x2d0>)
   11d4e:	f7ff f98b 	bl	11068 <am_util_stdio_printf>
   11d52:	4844      	ldr	r0, [pc, #272]	@ (11e64 <task_Iridium+0x2d0>)
   11d54:	f00c f910 	bl	1df78 <datalogger_log_debug>
            if(buf[0] <= 4)
   11d58:	9a01      	ldr	r2, [sp, #4]
   11d5a:	2a26      	cmp	r2, #38	@ 0x26
   11d5c:	d892      	bhi.n	11c84 <task_Iridium+0xf0>
   11d5e:	a301      	add	r3, pc, #4	@ (adr r3, 11d64 <task_Iridium+0x1d0>)
   11d60:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   11d64:	00011c79 	.word	0x00011c79
   11d68:	00011c79 	.word	0x00011c79
   11d6c:	00011c79 	.word	0x00011c79
   11d70:	00011c79 	.word	0x00011c79
   11d74:	00011c79 	.word	0x00011c79
   11d78:	00011c85 	.word	0x00011c85
   11d7c:	00011c85 	.word	0x00011c85
   11d80:	00011c85 	.word	0x00011c85
   11d84:	00011c85 	.word	0x00011c85
   11d88:	00011c85 	.word	0x00011c85
   11d8c:	00011c85 	.word	0x00011c85
   11d90:	00011c85 	.word	0x00011c85
   11d94:	00011c85 	.word	0x00011c85
   11d98:	00011c85 	.word	0x00011c85
   11d9c:	00011c85 	.word	0x00011c85
   11da0:	00011c85 	.word	0x00011c85
   11da4:	00011c85 	.word	0x00011c85
   11da8:	00011c85 	.word	0x00011c85
   11dac:	00011e19 	.word	0x00011e19
   11db0:	00011c85 	.word	0x00011c85
   11db4:	00011c85 	.word	0x00011c85
   11db8:	00011c85 	.word	0x00011c85
   11dbc:	00011c85 	.word	0x00011c85
   11dc0:	00011c85 	.word	0x00011c85
   11dc4:	00011c85 	.word	0x00011c85
   11dc8:	00011c85 	.word	0x00011c85
   11dcc:	00011c85 	.word	0x00011c85
   11dd0:	00011c85 	.word	0x00011c85
   11dd4:	00011c85 	.word	0x00011c85
   11dd8:	00011c85 	.word	0x00011c85
   11ddc:	00011c85 	.word	0x00011c85
   11de0:	00011c85 	.word	0x00011c85
   11de4:	00011c5d 	.word	0x00011c5d
   11de8:	00011c85 	.word	0x00011c85
   11dec:	00011c85 	.word	0x00011c85
   11df0:	00011c85 	.word	0x00011c85
   11df4:	00011c85 	.word	0x00011c85
   11df8:	00011e0b 	.word	0x00011e0b
   11dfc:	00011e01 	.word	0x00011e01
                    ARTEMIS_DEBUG_PRINTF("Iridium :: Try later, Traffic management period.\n");
   11e00:	4819      	ldr	r0, [pc, #100]	@ (11e68 <task_Iridium+0x2d4>)
   11e02:	f7ff f931 	bl	11068 <am_util_stdio_printf>
   11e06:	4818      	ldr	r0, [pc, #96]	@ (11e68 <task_Iridium+0x2d4>)
   11e08:	e73a      	b.n	11c80 <task_Iridium+0xec>
                    ARTEMIS_DEBUG_PRINTF("Iridium :: SBD service is temporarily disabled.\n");
   11e0a:	4818      	ldr	r0, [pc, #96]	@ (11e6c <task_Iridium+0x2d8>)
   11e0c:	f7ff f92c 	bl	11068 <am_util_stdio_printf>
   11e10:	4816      	ldr	r0, [pc, #88]	@ (11e6c <task_Iridium+0x2d8>)
   11e12:	f00c f8b1 	bl	1df78 <datalogger_log_debug>
   11e16:	e735      	b.n	11c84 <task_Iridium+0xf0>
                    ARTEMIS_DEBUG_PRINTF("Iridium :: Connection Lost (RF drop).\n");
   11e18:	4815      	ldr	r0, [pc, #84]	@ (11e70 <task_Iridium+0x2dc>)
   11e1a:	f7ff f925 	bl	11068 <am_util_stdio_printf>
   11e1e:	4814      	ldr	r0, [pc, #80]	@ (11e70 <task_Iridium+0x2dc>)
   11e20:	f00c f8aa 	bl	1df78 <datalogger_log_debug>
   11e24:	e72e      	b.n	11c84 <task_Iridium+0xf0>
   11e26:	bf00      	nop
   11e28:	1000231c 	.word	0x1000231c
   11e2c:	447a0000 	.word	0x447a0000
   11e30:	0002a9b0 	.word	0x0002a9b0
   11e34:	1000adc4 	.word	0x1000adc4
   11e38:	0002ab48 	.word	0x0002ab48
   11e3c:	0002aa34 	.word	0x0002aa34
   11e40:	0002aa60 	.word	0x0002aa60
   11e44:	0002ab68 	.word	0x0002ab68
   11e48:	0002ab98 	.word	0x0002ab98
   11e4c:	0002aa98 	.word	0x0002aa98
   11e50:	0002aa00 	.word	0x0002aa00
   11e54:	0002aa6c 	.word	0x0002aa6c
   11e58:	1000adbc 	.word	0x1000adbc
   11e5c:	0002a9dc 	.word	0x0002a9dc
   11e60:	0002a9fc 	.word	0x0002a9fc
   11e64:	000305a0 	.word	0x000305a0
   11e68:	0002ab14 	.word	0x0002ab14
   11e6c:	0002aae0 	.word	0x0002aae0
   11e70:	0002aab8 	.word	0x0002aab8
   11e74:	0002abb4 	.word	0x0002abb4

00011e78 <i9603n_send_data>:
{
   11e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e7a:	b087      	sub	sp, #28
    char cmd[20] = {0};
   11e7c:	2400      	movs	r4, #0
    if (txLen > 340)
   11e7e:	f5b1 7faa 	cmp.w	r1, #340	@ 0x154
    char cmd[20] = {0};
   11e82:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11e86:	e9cd 4403 	strd	r4, r4, [sp, #12]
{
   11e8a:	460d      	mov	r5, r1
    char cmd[20] = {0};
   11e8c:	9405      	str	r4, [sp, #20]
    uint16_t len=0;
   11e8e:	f8ad 4002 	strh.w	r4, [sp, #2]
    if (txLen > 340)
   11e92:	d854      	bhi.n	11f3e <i9603n_send_data+0xc6>
        am_util_stdio_sprintf(cmd, "AT+SBDWB=%u\r", txLen);
   11e94:	460a      	mov	r2, r1
   11e96:	4606      	mov	r6, r0
   11e98:	493e      	ldr	r1, [pc, #248]	@ (11f94 <i9603n_send_data+0x11c>)
   11e9a:	a801      	add	r0, sp, #4
   11e9c:	f7ff f8d6 	bl	1104c <am_util_stdio_sprintf>
        uint8_t cmd_len = strlen(cmd);
   11ea0:	a801      	add	r0, sp, #4
   11ea2:	f7fa feed 	bl	cc80 <strlen>
    artemis_i9603n_send(txData, txlen);
   11ea6:	b281      	uxth	r1, r0
   11ea8:	a801      	add	r0, sp, #4
   11eaa:	f009 fb91 	bl	1b5d0 <artemis_i9603n_send>
        result = module_i9603n_read_AT(&len);
   11eae:	f10d 0002 	add.w	r0, sp, #2
   11eb2:	f7ff fbdb 	bl	1166c <module_i9603n_read_AT>
        if (result == I9603N_RESULT_READY)
   11eb6:	2803      	cmp	r0, #3
   11eb8:	d019      	beq.n	11eee <i9603n_send_data+0x76>
            ARTEMIS_DEBUG_PRINTF("Iridium :: Result is NOT READY \n");
   11eba:	4837      	ldr	r0, [pc, #220]	@ (11f98 <i9603n_send_data+0x120>)
   11ebc:	f7ff f8d4 	bl	11068 <am_util_stdio_printf>
   11ec0:	4835      	ldr	r0, [pc, #212]	@ (11f98 <i9603n_send_data+0x120>)
   11ec2:	f00c f859 	bl	1df78 <datalogger_log_debug>
        if (ret == true)
   11ec6:	2400      	movs	r4, #0
    uint16_t len = strlen(buff)+1;
   11ec8:	4834      	ldr	r0, [pc, #208]	@ (11f9c <i9603n_send_data+0x124>)
   11eca:	f7fa fed9 	bl	cc80 <strlen>
        buff[i] = 0;
   11ece:	2100      	movs	r1, #0
   11ed0:	1c42      	adds	r2, r0, #1
   11ed2:	4832      	ldr	r0, [pc, #200]	@ (11f9c <i9603n_send_data+0x124>)
   11ed4:	f012 fa5c 	bl	24390 <memset>
    uint16_t len = strlen(buff)+1;
   11ed8:	4831      	ldr	r0, [pc, #196]	@ (11fa0 <i9603n_send_data+0x128>)
   11eda:	f7fa fed1 	bl	cc80 <strlen>
        buff[i] = 0;
   11ede:	2100      	movs	r1, #0
   11ee0:	1c42      	adds	r2, r0, #1
   11ee2:	482f      	ldr	r0, [pc, #188]	@ (11fa0 <i9603n_send_data+0x128>)
   11ee4:	f012 fa54 	bl	24390 <memset>
}
   11ee8:	4620      	mov	r0, r4
   11eea:	b007      	add	sp, #28
   11eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ARTEMIS_DEBUG_PRINTF("Iridium :: Result is READY \n");
   11eee:	482d      	ldr	r0, [pc, #180]	@ (11fa4 <i9603n_send_data+0x12c>)
            memcpy(irid_buf_tx, txData, txLen);
   11ef0:	4f2b      	ldr	r7, [pc, #172]	@ (11fa0 <i9603n_send_data+0x128>)
            ARTEMIS_DEBUG_PRINTF("Iridium :: Result is READY \n");
   11ef2:	f7ff f8b9 	bl	11068 <am_util_stdio_printf>
   11ef6:	482b      	ldr	r0, [pc, #172]	@ (11fa4 <i9603n_send_data+0x12c>)
   11ef8:	f00c f83e 	bl	1df78 <datalogger_log_debug>
            memcpy(irid_buf_tx, txData, txLen);
   11efc:	4631      	mov	r1, r6
   11efe:	462a      	mov	r2, r5
   11f00:	4638      	mov	r0, r7
   11f02:	f7fa fe15 	bl	cb30 <memcpy>
            for (i=0; i<txLen; i++)
   11f06:	b325      	cbz	r5, 11f52 <i9603n_send_data+0xda>
   11f08:	463b      	mov	r3, r7
   11f0a:	1979      	adds	r1, r7, r5
                checksum += irid_buf_tx[i];
   11f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   11f10:	4414      	add	r4, r2
            for (i=0; i<txLen; i++)
   11f12:	428b      	cmp	r3, r1
                checksum += irid_buf_tx[i];
   11f14:	b2a4      	uxth	r4, r4
            for (i=0; i<txLen; i++)
   11f16:	d1f9      	bne.n	11f0c <i9603n_send_data+0x94>
            i++;
   11f18:	1c6b      	adds	r3, r5, #1
            i++;
   11f1a:	1ca9      	adds	r1, r5, #2
            irid_buf_tx[i] = (checksum >> 8) & 0xFF ;
   11f1c:	0a22      	lsrs	r2, r4, #8
            irid_buf_tx[i] = (checksum & 0xFF) ;
   11f1e:	b29b      	uxth	r3, r3
   11f20:	b2e4      	uxtb	r4, r4
            i++;
   11f22:	b289      	uxth	r1, r1
    artemis_i9603n_send(txData, txlen);
   11f24:	481e      	ldr	r0, [pc, #120]	@ (11fa0 <i9603n_send_data+0x128>)
            irid_buf_tx[i] = (checksum >> 8) & 0xFF ;
   11f26:	557a      	strb	r2, [r7, r5]
            irid_buf_tx[i] = (checksum & 0xFF) ;
   11f28:	54fc      	strb	r4, [r7, r3]
    artemis_i9603n_send(txData, txlen);
   11f2a:	f009 fb51 	bl	1b5d0 <artemis_i9603n_send>
            result = module_i9603n_read_AT(&len);
   11f2e:	f10d 0002 	add.w	r0, sp, #2
   11f32:	f7ff fb9b 	bl	1166c <module_i9603n_read_AT>
            if (result == I9603N_RESULT_OK)
   11f36:	2801      	cmp	r0, #1
   11f38:	d010      	beq.n	11f5c <i9603n_send_data+0xe4>
                    ret = true;
   11f3a:	2401      	movs	r4, #1
   11f3c:	e7c4      	b.n	11ec8 <i9603n_send_data+0x50>
        ARTEMIS_DEBUG_PRINTF("Iridium :: length exceeds 340 bytes !, (%u !!!)\n", txLen);
   11f3e:	481a      	ldr	r0, [pc, #104]	@ (11fa8 <i9603n_send_data+0x130>)
   11f40:	f7ff f892 	bl	11068 <am_util_stdio_printf>
   11f44:	4818      	ldr	r0, [pc, #96]	@ (11fa8 <i9603n_send_data+0x130>)
   11f46:	4629      	mov	r1, r5
   11f48:	f00c f816 	bl	1df78 <datalogger_log_debug>
}
   11f4c:	4620      	mov	r0, r4
   11f4e:	b007      	add	sp, #28
   11f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (i=0; i<txLen; i++)
   11f52:	2102      	movs	r1, #2
   11f54:	462c      	mov	r4, r5
   11f56:	2301      	movs	r3, #1
   11f58:	462a      	mov	r2, r5
   11f5a:	e7e3      	b.n	11f24 <i9603n_send_data+0xac>
                if (parse_AT(irid_buf_rx, "0\r\n", len) != -1)
   11f5c:	f8bd 5002 	ldrh.w	r5, [sp, #2]
    if (pattLen > rxLen)
   11f60:	2d02      	cmp	r5, #2
   11f62:	d9b0      	bls.n	11ec6 <i9603n_send_data+0x4e>
    for (i=0; i<=(rxLen-pattLen); i++)
   11f64:	480d      	ldr	r0, [pc, #52]	@ (11f9c <i9603n_send_data+0x124>)
   11f66:	3d03      	subs	r5, #3
   11f68:	4601      	mov	r1, r0
   11f6a:	2300      	movs	r3, #0
   11f6c:	e001      	b.n	11f72 <i9603n_send_data+0xfa>
   11f6e:	429d      	cmp	r5, r3
   11f70:	dba9      	blt.n	11ec6 <i9603n_send_data+0x4e>
            if (pattern[j] == rxData[k])
   11f72:	f811 4b01 	ldrb.w	r4, [r1], #1
                k++;
   11f76:	1c9a      	adds	r2, r3, #2
            if (pattern[j] == rxData[k])
   11f78:	2c30      	cmp	r4, #48	@ 0x30
                k++;
   11f7a:	f103 0301 	add.w	r3, r3, #1
            if (pattern[j] == rxData[k])
   11f7e:	b292      	uxth	r2, r2
                k++;
   11f80:	b29b      	uxth	r3, r3
            if (pattern[j] == rxData[k])
   11f82:	d1f4      	bne.n	11f6e <i9603n_send_data+0xf6>
   11f84:	5cc4      	ldrb	r4, [r0, r3]
   11f86:	2c0d      	cmp	r4, #13
   11f88:	d1f1      	bne.n	11f6e <i9603n_send_data+0xf6>
   11f8a:	5c82      	ldrb	r2, [r0, r2]
   11f8c:	2a0a      	cmp	r2, #10
   11f8e:	d0d4      	beq.n	11f3a <i9603n_send_data+0xc2>
   11f90:	e7ed      	b.n	11f6e <i9603n_send_data+0xf6>
   11f92:	bf00      	nop
   11f94:	0002abf4 	.word	0x0002abf4
   11f98:	0002ac24 	.word	0x0002ac24
   11f9c:	1000adc4 	.word	0x1000adc4
   11fa0:	1000aef0 	.word	0x1000aef0
   11fa4:	0002ac04 	.word	0x0002ac04
   11fa8:	0002abc0 	.word	0x0002abc0

00011fac <i9603n_traffic_mgmt_time>:
{
   11fac:	b510      	push	{r4, lr}
    artemis_i9603n_send(txData, txlen);
   11fae:	210a      	movs	r1, #10
{
   11fb0:	b082      	sub	sp, #8
   11fb2:	4604      	mov	r4, r0
    artemis_i9603n_send(txData, txlen);
   11fb4:	480c      	ldr	r0, [pc, #48]	@ (11fe8 <i9603n_traffic_mgmt_time+0x3c>)
   11fb6:	f009 fb0b 	bl	1b5d0 <artemis_i9603n_send>
    result = module_i9603n_read_AT(&len);
   11fba:	f10d 0006 	add.w	r0, sp, #6
   11fbe:	f7ff fb55 	bl	1166c <module_i9603n_read_AT>
    if (result == I9603N_RESULT_OK)
   11fc2:	2801      	cmp	r0, #1
   11fc4:	d00b      	beq.n	11fde <i9603n_traffic_mgmt_time+0x32>
   11fc6:	2400      	movs	r4, #0
    uint16_t len = strlen(buff)+1;
   11fc8:	4808      	ldr	r0, [pc, #32]	@ (11fec <i9603n_traffic_mgmt_time+0x40>)
   11fca:	f7fa fe59 	bl	cc80 <strlen>
        buff[i] = 0;
   11fce:	2100      	movs	r1, #0
   11fd0:	1c42      	adds	r2, r0, #1
   11fd2:	4806      	ldr	r0, [pc, #24]	@ (11fec <i9603n_traffic_mgmt_time+0x40>)
   11fd4:	f012 f9dc 	bl	24390 <memset>
}
   11fd8:	4620      	mov	r0, r4
   11fda:	b002      	add	sp, #8
   11fdc:	bd10      	pop	{r4, pc}
        rxLen = parse_data(irid_buf_rx, rxData);
   11fde:	4620      	mov	r0, r4
   11fe0:	f7ff fab6 	bl	11550 <parse_data.constprop.0>
    return rxLen;
   11fe4:	b2c4      	uxtb	r4, r0
   11fe6:	e7ef      	b.n	11fc8 <i9603n_traffic_mgmt_time+0x1c>
   11fe8:	0002ac48 	.word	0x0002ac48
   11fec:	1000adc4 	.word	0x1000adc4

00011ff0 <module_MAX14830_Write_Task>:
 * @brief RTOS Write Task
 *
 * @param pvParameters
 */
void module_MAX14830_Write_Task(void  *pvParameters)
{
   11ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eMAX18430_ComPort_t port = (eMAX18430_ComPort_t) pvParameters;
    sCircularBufferC_t *pBuf = &txBuf[(uint8_t)port];
   11ff4:	4f21      	ldr	r7, [pc, #132]	@ (1207c <module_MAX14830_Write_Task+0x8c>)
   11ff6:	4d22      	ldr	r5, [pc, #136]	@ (12080 <module_MAX14830_Write_Task+0x90>)
{
   11ff8:	b093      	sub	sp, #76	@ 0x4c
    eMAX18430_ComPort_t port = (eMAX18430_ComPort_t) pvParameters;
   11ffa:	b2c6      	uxtb	r6, r0
    sCircularBufferC_t *pBuf = &txBuf[(uint8_t)port];
   11ffc:	f44f 7385 	mov.w	r3, #266	@ 0x10a

    /* write spi burst*/
    uint8_t txlen = 0;
    uint8_t sData[32] = {0};
   12000:	2220      	movs	r2, #32
   12002:	2100      	movs	r1, #0
   12004:	4668      	mov	r0, sp
    sCircularBufferC_t *pBuf = &txBuf[(uint8_t)port];
   12006:	fb03 7706 	mla	r7, r3, r6, r7
    uint8_t sData[32] = {0};
   1200a:	f012 f9c1 	bl	24390 <memset>

    while( xSemaphoreTake(xSpiMutex, pdMS_TO_TICKS( 200UL )) != pdPASS);
   1200e:	6828      	ldr	r0, [r5, #0]
   12010:	21c8      	movs	r1, #200	@ 0xc8
   12012:	f7fc fa0b 	bl	e42c <xQueueSemaphoreTake>
   12016:	2801      	cmp	r0, #1
   12018:	4604      	mov	r4, r0
   1201a:	d1f8      	bne.n	1200e <module_MAX14830_Write_Task+0x1e>
    txlen = BufferC_gets(pBuf, (char*)sData, 32);
   1201c:	4669      	mov	r1, sp
   1201e:	4638      	mov	r0, r7
   12020:	2220      	movs	r2, #32
   12022:	f7ff f983 	bl	1132c <BufferC_gets>
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12026:	4f17      	ldr	r7, [pc, #92]	@ (12084 <module_MAX14830_Write_Task+0x94>)
   12028:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
    txlen = BufferC_gets(pBuf, (char*)sData, 32);
   1202c:	4681      	mov	r9, r0

    /** Prep Write Byte */
    uint8_t cmd = MAX14830_SPI_WRITE_BIT | (port << 5);
    cmd |= reg;

    am_hal_iom_transfer_t transfer =
   1202e:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12030:	f8c7 8098 	str.w	r8, [r7, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12034:	2100      	movs	r1, #0
   12036:	a808      	add	r0, sp, #32
   12038:	f012 f9aa 	bl	24390 <memset>
    uint8_t cmd = MAX14830_SPI_WRITE_BIT | (port << 5);
   1203c:	0176      	lsls	r6, r6, #5
        .bContinue              = false,
        .ui8RepeatCount         = 0,
        .ui8Priority            = 1,
    };

    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1203e:	4b12      	ldr	r3, [pc, #72]	@ (12088 <module_MAX14830_Write_Task+0x98>)
    am_hal_iom_transfer_t transfer =
   12040:	f8cd d034 	str.w	sp, [sp, #52]	@ 0x34
   12044:	fa5f f089 	uxtb.w	r0, r9
    uint8_t cmd = MAX14830_SPI_WRITE_BIT | (port << 5);
   12048:	f066 067f 	orn	r6, r6, #127	@ 0x7f
    am_hal_iom_transfer_t transfer =
   1204c:	900b      	str	r0, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1204e:	a908      	add	r1, sp, #32
   12050:	6818      	ldr	r0, [r3, #0]
    am_hal_iom_transfer_t transfer =
   12052:	9409      	str	r4, [sp, #36]	@ 0x24
   12054:	b2f6      	uxtb	r6, r6
   12056:	960a      	str	r6, [sp, #40]	@ 0x28
   12058:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1205c:	f00e f8f2 	bl	20244 <am_hal_iom_blocking_transfer>
    xSemaphoreGive(xSpiMutex);
   12060:	2300      	movs	r3, #0
   12062:	461a      	mov	r2, r3
   12064:	4619      	mov	r1, r3
   12066:	6828      	ldr	r0, [r5, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12068:	f8c7 8090 	str.w	r8, [r7, #144]	@ 0x90
    xSemaphoreGive(xSpiMutex);
   1206c:	f7fb fdfa 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   12070:	2000      	movs	r0, #0
   12072:	f7fc fda3 	bl	ebbc <vTaskDelete>
}
   12076:	b013      	add	sp, #76	@ 0x4c
   12078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1207c:	1000b4a8 	.word	0x1000b4a8
   12080:	1000b930 	.word	0x1000b930
   12084:	40010000 	.word	0x40010000
   12088:	1000b924 	.word	0x1000b924

0001208c <module_MAX14830_conf>:
{
   1208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12090:	4dc9      	ldr	r5, [pc, #804]	@ (123b8 <module_MAX14830_conf+0x32c>)
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12092:	4fca      	ldr	r7, [pc, #808]	@ (123bc <module_MAX14830_conf+0x330>)
{
   12094:	b08d      	sub	sp, #52	@ 0x34
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12096:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    uint8_t regVal = MAX14830_CLK_CRYSTAL_EN | MAX14830_CLK_PLL_BYPASS;
   1209a:	f04f 090a 	mov.w	r9, #10
   1209e:	f88d 9006 	strb.w	r9, [sp, #6]
    am_hal_iom_transfer_t transfer =
   120a2:	2228      	movs	r2, #40	@ 0x28
   120a4:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   120a6:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   120aa:	a802      	add	r0, sp, #8
   120ac:	2401      	movs	r4, #1
   120ae:	f012 f96f 	bl	24390 <memset>
   120b2:	f10d 0806 	add.w	r8, sp, #6
   120b6:	239e      	movs	r3, #158	@ 0x9e
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   120b8:	a902      	add	r1, sp, #8
   120ba:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   120bc:	9304      	str	r3, [sp, #16]
   120be:	9403      	str	r4, [sp, #12]
   120c0:	9405      	str	r4, [sp, #20]
   120c2:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   120c6:	f8cd 801c 	str.w	r8, [sp, #28]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   120ca:	f00e f8bb 	bl	20244 <am_hal_iom_blocking_transfer>
    regVal = MAX14830_MODE1_IRQ_SEL | MAX14830_MODE1_TRNSCV_CTRL | 0x20;
   120ce:	23b0      	movs	r3, #176	@ 0xb0
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   120d0:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   120d4:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_MODE1_IRQ_SEL | MAX14830_MODE1_TRNSCV_CTRL | 0x20;
   120d6:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   120da:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   120dc:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   120e0:	a802      	add	r0, sp, #8
   120e2:	f012 f955 	bl	24390 <memset>
   120e6:	2389      	movs	r3, #137	@ 0x89
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   120e8:	a902      	add	r1, sp, #8
   120ea:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   120ec:	9304      	str	r3, [sp, #16]
   120ee:	9403      	str	r4, [sp, #12]
   120f0:	9405      	str	r4, [sp, #20]
   120f2:	f8cd 801c 	str.w	r8, [sp, #28]
   120f6:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   120fa:	f00e f8a3 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   120fe:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12100:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12104:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12106:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1210a:	a802      	add	r0, sp, #8
   1210c:	f012 f940 	bl	24390 <memset>
   12110:	23a9      	movs	r3, #169	@ 0xa9
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12112:	a902      	add	r1, sp, #8
   12114:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12116:	9304      	str	r3, [sp, #16]
   12118:	9403      	str	r4, [sp, #12]
   1211a:	9405      	str	r4, [sp, #20]
   1211c:	f8cd 801c 	str.w	r8, [sp, #28]
   12120:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12124:	f00e f88e 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12128:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1212a:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   1212e:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12130:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12134:	a802      	add	r0, sp, #8
   12136:	f012 f92b 	bl	24390 <memset>
   1213a:	23c9      	movs	r3, #201	@ 0xc9
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1213c:	a902      	add	r1, sp, #8
   1213e:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12140:	9304      	str	r3, [sp, #16]
   12142:	9403      	str	r4, [sp, #12]
   12144:	9405      	str	r4, [sp, #20]
   12146:	f8cd 801c 	str.w	r8, [sp, #28]
   1214a:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1214e:	f00e f879 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12152:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12154:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12158:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1215a:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1215e:	a802      	add	r0, sp, #8
   12160:	f012 f916 	bl	24390 <memset>
   12164:	23e9      	movs	r3, #233	@ 0xe9
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12166:	a902      	add	r1, sp, #8
   12168:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1216a:	9304      	str	r3, [sp, #16]
   1216c:	9403      	str	r4, [sp, #12]
   1216e:	9405      	str	r4, [sp, #20]
   12170:	f8cd 801c 	str.w	r8, [sp, #28]
   12174:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12178:	f00e f864 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1217c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12180:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_MODE2_RX_EMTY_INV | MAX14830_MODE2_FIFO_RST;
   12182:	f88d 9006 	strb.w	r9, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12186:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12188:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1218c:	a802      	add	r0, sp, #8
   1218e:	f012 f8ff 	bl	24390 <memset>
   12192:	f04f 0a8a 	mov.w	sl, #138	@ 0x8a
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12196:	a902      	add	r1, sp, #8
   12198:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1219a:	9403      	str	r4, [sp, #12]
   1219c:	9405      	str	r4, [sp, #20]
   1219e:	f8cd 801c 	str.w	r8, [sp, #28]
   121a2:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   121a6:	f8cd a010 	str.w	sl, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   121aa:	f00e f84b 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   121ae:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   121b0:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   121b4:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   121b6:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   121ba:	a802      	add	r0, sp, #8
   121bc:	f012 f8e8 	bl	24390 <memset>
   121c0:	23aa      	movs	r3, #170	@ 0xaa
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   121c2:	a902      	add	r1, sp, #8
   121c4:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   121c6:	9304      	str	r3, [sp, #16]
   121c8:	9403      	str	r4, [sp, #12]
   121ca:	9405      	str	r4, [sp, #20]
   121cc:	f8cd 801c 	str.w	r8, [sp, #28]
   121d0:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   121d4:	f00e f836 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   121d8:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   121da:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   121de:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   121e0:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   121e4:	a802      	add	r0, sp, #8
   121e6:	f012 f8d3 	bl	24390 <memset>
   121ea:	23ca      	movs	r3, #202	@ 0xca
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   121ec:	a902      	add	r1, sp, #8
   121ee:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   121f0:	9304      	str	r3, [sp, #16]
   121f2:	9403      	str	r4, [sp, #12]
   121f4:	9405      	str	r4, [sp, #20]
   121f6:	f8cd 801c 	str.w	r8, [sp, #28]
   121fa:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   121fe:	f00e f821 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12202:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12204:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12208:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1220a:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1220e:	a802      	add	r0, sp, #8
   12210:	f012 f8be 	bl	24390 <memset>
    uint8_t curVal = 0x00;
   12214:	f04f 0b00 	mov.w	fp, #0
    am_hal_iom_transfer_t transfer =
   12218:	23ea      	movs	r3, #234	@ 0xea
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1221a:	a902      	add	r1, sp, #8
   1221c:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1221e:	9304      	str	r3, [sp, #16]
   12220:	9403      	str	r4, [sp, #12]
   12222:	9405      	str	r4, [sp, #20]
   12224:	f8cd 801c 	str.w	r8, [sp, #28]
   12228:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1222c:	f00e f80a 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12230:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12234:	2228      	movs	r2, #40	@ 0x28
    uint8_t curVal = 0x00;
   12236:	f88d b007 	strb.w	fp, [sp, #7]
    am_hal_iom_transfer_t transfer =
   1223a:	4659      	mov	r1, fp
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1223c:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12240:	a802      	add	r0, sp, #8
   12242:	f012 f8a5 	bl	24390 <memset>
   12246:	e9cd 4903 	strd	r4, r9, [sp, #12]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1224a:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1224c:	9405      	str	r4, [sp, #20]
   1224e:	f10d 0907 	add.w	r9, sp, #7
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12252:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12254:	f88d 4018 	strb.w	r4, [sp, #24]
   12258:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   1225c:	f8cd 9020 	str.w	r9, [sp, #32]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12260:	f00d fff0 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12264:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    uint8_t update = curVal&bit;
   12268:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if ( update == val )
   1226c:	079a      	lsls	r2, r3, #30
   1226e:	d517      	bpl.n	122a0 <module_MAX14830_conf+0x214>
        curVal ^= bit;
   12270:	f083 0302 	eor.w	r3, r3, #2
   12274:	f88d 3007 	strb.w	r3, [sp, #7]
    am_hal_iom_transfer_t transfer =
   12278:	4659      	mov	r1, fp
   1227a:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1227c:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12280:	a802      	add	r0, sp, #8
   12282:	f012 f885 	bl	24390 <memset>
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12286:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12288:	9405      	str	r4, [sp, #20]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1228a:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   1228c:	e9cd 4a03 	strd	r4, sl, [sp, #12]
   12290:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   12294:	f8cd 901c 	str.w	r9, [sp, #28]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12298:	f00d ffd4 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1229c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   122a0:	4d45      	ldr	r5, [pc, #276]	@ (123b8 <module_MAX14830_conf+0x32c>)
    uint8_t curVal = 0x00;
   122a2:	f04f 0a00 	mov.w	sl, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   122a6:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    uint8_t curVal = 0x00;
   122aa:	f88d a007 	strb.w	sl, [sp, #7]
    am_hal_iom_transfer_t transfer =
   122ae:	2228      	movs	r2, #40	@ 0x28
   122b0:	4651      	mov	r1, sl
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   122b2:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   122b6:	a802      	add	r0, sp, #8
   122b8:	f012 f86a 	bl	24390 <memset>
   122bc:	2401      	movs	r4, #1
   122be:	232a      	movs	r3, #42	@ 0x2a
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   122c0:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   122c2:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   122c4:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   122c6:	f8cd 9020 	str.w	r9, [sp, #32]
   122ca:	9403      	str	r4, [sp, #12]
   122cc:	9405      	str	r4, [sp, #20]
   122ce:	f88d 4018 	strb.w	r4, [sp, #24]
   122d2:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   122d6:	f00d ffb5 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   122da:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    uint8_t update = curVal&bit;
   122de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if ( update == val )
   122e2:	0798      	lsls	r0, r3, #30
   122e4:	d518      	bpl.n	12318 <module_MAX14830_conf+0x28c>
        curVal ^= bit;
   122e6:	f083 0302 	eor.w	r3, r3, #2
   122ea:	f88d 3007 	strb.w	r3, [sp, #7]
    am_hal_iom_transfer_t transfer =
   122ee:	4651      	mov	r1, sl
   122f0:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   122f2:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   122f6:	a802      	add	r0, sp, #8
   122f8:	f012 f84a 	bl	24390 <memset>
   122fc:	23aa      	movs	r3, #170	@ 0xaa
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   122fe:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12300:	9403      	str	r4, [sp, #12]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12302:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12304:	9405      	str	r4, [sp, #20]
   12306:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   1230a:	f8cd 901c 	str.w	r9, [sp, #28]
   1230e:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12310:	f00d ff98 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12314:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12318:	4d27      	ldr	r5, [pc, #156]	@ (123b8 <module_MAX14830_conf+0x32c>)
    uint8_t curVal = 0x00;
   1231a:	f04f 0a00 	mov.w	sl, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1231e:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    uint8_t curVal = 0x00;
   12322:	f88d a007 	strb.w	sl, [sp, #7]
    am_hal_iom_transfer_t transfer =
   12326:	2228      	movs	r2, #40	@ 0x28
   12328:	4651      	mov	r1, sl
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1232a:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1232e:	a802      	add	r0, sp, #8
   12330:	f012 f82e 	bl	24390 <memset>
   12334:	2401      	movs	r4, #1
   12336:	234a      	movs	r3, #74	@ 0x4a
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12338:	a902      	add	r1, sp, #8
   1233a:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1233c:	9304      	str	r3, [sp, #16]
   1233e:	f8cd 9020 	str.w	r9, [sp, #32]
   12342:	9403      	str	r4, [sp, #12]
   12344:	9405      	str	r4, [sp, #20]
   12346:	f88d 4018 	strb.w	r4, [sp, #24]
   1234a:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1234e:	f00d ff79 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12352:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    uint8_t update = curVal&bit;
   12356:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if ( update == val )
   1235a:	0799      	lsls	r1, r3, #30
   1235c:	d518      	bpl.n	12390 <module_MAX14830_conf+0x304>
        curVal ^= bit;
   1235e:	f083 0302 	eor.w	r3, r3, #2
   12362:	f88d 3007 	strb.w	r3, [sp, #7]
    am_hal_iom_transfer_t transfer =
   12366:	4651      	mov	r1, sl
   12368:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1236a:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1236e:	a802      	add	r0, sp, #8
   12370:	f012 f80e 	bl	24390 <memset>
   12374:	23ca      	movs	r3, #202	@ 0xca
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12376:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12378:	9403      	str	r4, [sp, #12]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1237a:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   1237c:	9405      	str	r4, [sp, #20]
   1237e:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   12382:	f8cd 901c 	str.w	r9, [sp, #28]
   12386:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12388:	f00d ff5c 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1238c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12390:	4d09      	ldr	r5, [pc, #36]	@ (123b8 <module_MAX14830_conf+0x32c>)
    uint8_t curVal = 0x00;
   12392:	f04f 0a00 	mov.w	sl, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12396:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    am_hal_iom_transfer_t transfer =
   1239a:	2228      	movs	r2, #40	@ 0x28
    uint8_t curVal = 0x00;
   1239c:	f88d a007 	strb.w	sl, [sp, #7]
    am_hal_iom_transfer_t transfer =
   123a0:	4651      	mov	r1, sl
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   123a2:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   123a6:	a802      	add	r0, sp, #8
   123a8:	f011 fff2 	bl	24390 <memset>
   123ac:	2401      	movs	r4, #1
   123ae:	236a      	movs	r3, #106	@ 0x6a
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   123b0:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   123b2:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   123b4:	a902      	add	r1, sp, #8
   123b6:	e003      	b.n	123c0 <module_MAX14830_conf+0x334>
   123b8:	40010000 	.word	0x40010000
   123bc:	1000b924 	.word	0x1000b924
    am_hal_iom_transfer_t transfer =
   123c0:	f8cd 9020 	str.w	r9, [sp, #32]
   123c4:	9403      	str	r4, [sp, #12]
   123c6:	9405      	str	r4, [sp, #20]
   123c8:	f88d 4018 	strb.w	r4, [sp, #24]
   123cc:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   123d0:	f00d ff38 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   123d4:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    uint8_t update = curVal&bit;
   123d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if ( update == val )
   123dc:	079a      	lsls	r2, r3, #30
   123de:	d518      	bpl.n	12412 <module_MAX14830_conf+0x386>
        curVal ^= bit;
   123e0:	f083 0302 	eor.w	r3, r3, #2
   123e4:	f88d 3007 	strb.w	r3, [sp, #7]
    am_hal_iom_transfer_t transfer =
   123e8:	4651      	mov	r1, sl
   123ea:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   123ec:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   123f0:	a802      	add	r0, sp, #8
   123f2:	f011 ffcd 	bl	24390 <memset>
   123f6:	23ea      	movs	r3, #234	@ 0xea
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   123f8:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   123fa:	f8cd 901c 	str.w	r9, [sp, #28]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   123fe:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12400:	9403      	str	r4, [sp, #12]
   12402:	9405      	str	r4, [sp, #20]
   12404:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   12408:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1240a:	f00d ff1b 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1240e:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12412:	4dc8      	ldr	r5, [pc, #800]	@ (12734 <module_MAX14830_conf+0x6a8>)
   12414:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    regVal = MAX14830_MODE2_ECHO_SUPRS | MAX14830_MODE2_RX_EMTY_INV;
   12418:	f04f 0988 	mov.w	r9, #136	@ 0x88
   1241c:	f88d 9006 	strb.w	r9, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12420:	2228      	movs	r2, #40	@ 0x28
   12422:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12424:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12428:	a802      	add	r0, sp, #8
   1242a:	2401      	movs	r4, #1
   1242c:	f011 ffb0 	bl	24390 <memset>
   12430:	238a      	movs	r3, #138	@ 0x8a
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12432:	a902      	add	r1, sp, #8
   12434:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12436:	9304      	str	r3, [sp, #16]
   12438:	f8cd 801c 	str.w	r8, [sp, #28]
   1243c:	9403      	str	r4, [sp, #12]
   1243e:	9405      	str	r4, [sp, #20]
   12440:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12444:	f00d fefe 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12448:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1244a:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   1244e:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12450:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12454:	a802      	add	r0, sp, #8
   12456:	f011 ff9b 	bl	24390 <memset>
   1245a:	23ea      	movs	r3, #234	@ 0xea
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1245c:	a902      	add	r1, sp, #8
   1245e:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12460:	9304      	str	r3, [sp, #16]
   12462:	9403      	str	r4, [sp, #12]
   12464:	9405      	str	r4, [sp, #20]
   12466:	f8cd 801c 	str.w	r8, [sp, #28]
   1246a:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1246e:	f00d fee9 	bl	20244 <am_hal_iom_blocking_transfer>
    regVal = MAX14830_FLOWLVL_HALT(96) | MAX14830_FLOWLVL_RES(48);
   12472:	236c      	movs	r3, #108	@ 0x6c
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12474:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12478:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_FLOWLVL_HALT(96) | MAX14830_FLOWLVL_RES(48);
   1247a:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   1247e:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12480:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12484:	a802      	add	r0, sp, #8
   12486:	f011 ff83 	bl	24390 <memset>
   1248a:	238f      	movs	r3, #143	@ 0x8f
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1248c:	a902      	add	r1, sp, #8
   1248e:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12490:	9304      	str	r3, [sp, #16]
   12492:	9403      	str	r4, [sp, #12]
   12494:	9405      	str	r4, [sp, #20]
   12496:	f8cd 801c 	str.w	r8, [sp, #28]
   1249a:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1249e:	f00d fed1 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   124a2:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   124a4:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   124a8:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   124aa:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   124ae:	a802      	add	r0, sp, #8
   124b0:	f011 ff6e 	bl	24390 <memset>
   124b4:	23af      	movs	r3, #175	@ 0xaf
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   124b6:	a902      	add	r1, sp, #8
   124b8:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   124ba:	9304      	str	r3, [sp, #16]
   124bc:	9403      	str	r4, [sp, #12]
   124be:	9405      	str	r4, [sp, #20]
   124c0:	f8cd 801c 	str.w	r8, [sp, #28]
   124c4:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   124c8:	f00d febc 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   124cc:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   124ce:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   124d2:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   124d4:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   124d8:	a802      	add	r0, sp, #8
   124da:	f011 ff59 	bl	24390 <memset>
   124de:	23cf      	movs	r3, #207	@ 0xcf
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   124e0:	a902      	add	r1, sp, #8
   124e2:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   124e4:	9304      	str	r3, [sp, #16]
   124e6:	9403      	str	r4, [sp, #12]
   124e8:	9405      	str	r4, [sp, #20]
   124ea:	f8cd 801c 	str.w	r8, [sp, #28]
   124ee:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   124f2:	f00d fea7 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   124f6:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   124f8:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   124fc:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   124fe:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12502:	a802      	add	r0, sp, #8
   12504:	f011 ff44 	bl	24390 <memset>
   12508:	23ef      	movs	r3, #239	@ 0xef
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1250a:	a902      	add	r1, sp, #8
   1250c:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1250e:	9304      	str	r3, [sp, #16]
   12510:	9403      	str	r4, [sp, #12]
   12512:	9405      	str	r4, [sp, #20]
   12514:	f8cd 801c 	str.w	r8, [sp, #28]
   12518:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1251c:	f00d fe92 	bl	20244 <am_hal_iom_blocking_transfer>
    regVal = MAX14830_LCR_LENGTH_8 | MAX14830_LCR_STOPBITS_1;
   12520:	2303      	movs	r3, #3
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12522:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12526:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_LCR_LENGTH_8 | MAX14830_LCR_STOPBITS_1;
   12528:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   1252c:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1252e:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12532:	a802      	add	r0, sp, #8
   12534:	f011 ff2c 	bl	24390 <memset>
   12538:	238b      	movs	r3, #139	@ 0x8b
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1253a:	a902      	add	r1, sp, #8
   1253c:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1253e:	9304      	str	r3, [sp, #16]
   12540:	9403      	str	r4, [sp, #12]
   12542:	9405      	str	r4, [sp, #20]
   12544:	f8cd 801c 	str.w	r8, [sp, #28]
   12548:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1254c:	f00d fe7a 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12550:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12552:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12556:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12558:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1255c:	a802      	add	r0, sp, #8
   1255e:	f011 ff17 	bl	24390 <memset>
   12562:	23ab      	movs	r3, #171	@ 0xab
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12564:	a902      	add	r1, sp, #8
   12566:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12568:	9304      	str	r3, [sp, #16]
   1256a:	9403      	str	r4, [sp, #12]
   1256c:	9405      	str	r4, [sp, #20]
   1256e:	f8cd 801c 	str.w	r8, [sp, #28]
   12572:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12576:	f00d fe65 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   1257a:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1257c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12580:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12582:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12586:	a802      	add	r0, sp, #8
   12588:	f011 ff02 	bl	24390 <memset>
   1258c:	23cb      	movs	r3, #203	@ 0xcb
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1258e:	a902      	add	r1, sp, #8
   12590:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12592:	9304      	str	r3, [sp, #16]
   12594:	9403      	str	r4, [sp, #12]
   12596:	9405      	str	r4, [sp, #20]
   12598:	f8cd 801c 	str.w	r8, [sp, #28]
   1259c:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   125a0:	f00d fe50 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   125a4:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   125a6:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   125aa:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   125ac:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   125b0:	a802      	add	r0, sp, #8
   125b2:	f011 feed 	bl	24390 <memset>
   125b6:	23eb      	movs	r3, #235	@ 0xeb
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   125b8:	a902      	add	r1, sp, #8
   125ba:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   125bc:	9304      	str	r3, [sp, #16]
   125be:	9403      	str	r4, [sp, #12]
   125c0:	9405      	str	r4, [sp, #20]
   125c2:	f8cd 801c 	str.w	r8, [sp, #28]
   125c6:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   125ca:	f00d fe3b 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   125ce:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   125d2:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_FIFOTRIGLVL_RX(64) | MAX14830_FIFOTRIGLVL_TX(64);
   125d4:	f88d 9006 	strb.w	r9, [sp, #6]
    am_hal_iom_transfer_t transfer =
   125d8:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   125da:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   125de:	a802      	add	r0, sp, #8
   125e0:	f011 fed6 	bl	24390 <memset>
   125e4:	2390      	movs	r3, #144	@ 0x90
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   125e6:	a902      	add	r1, sp, #8
   125e8:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   125ea:	9304      	str	r3, [sp, #16]
   125ec:	9403      	str	r4, [sp, #12]
   125ee:	9405      	str	r4, [sp, #20]
   125f0:	f8cd 801c 	str.w	r8, [sp, #28]
   125f4:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   125f8:	f00d fe24 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   125fc:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   125fe:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12602:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12604:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12608:	a802      	add	r0, sp, #8
   1260a:	f011 fec1 	bl	24390 <memset>
   1260e:	23b0      	movs	r3, #176	@ 0xb0
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12610:	a902      	add	r1, sp, #8
   12612:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12614:	9304      	str	r3, [sp, #16]
   12616:	9403      	str	r4, [sp, #12]
   12618:	9405      	str	r4, [sp, #20]
   1261a:	f8cd 801c 	str.w	r8, [sp, #28]
   1261e:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12622:	f00d fe0f 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12626:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12628:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   1262c:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1262e:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12632:	a802      	add	r0, sp, #8
   12634:	f011 feac 	bl	24390 <memset>
   12638:	23d0      	movs	r3, #208	@ 0xd0
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1263a:	a902      	add	r1, sp, #8
   1263c:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1263e:	9304      	str	r3, [sp, #16]
   12640:	9403      	str	r4, [sp, #12]
   12642:	9405      	str	r4, [sp, #20]
   12644:	f8cd 801c 	str.w	r8, [sp, #28]
   12648:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1264c:	f00d fdfa 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12650:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12652:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12656:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12658:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1265c:	a802      	add	r0, sp, #8
   1265e:	f011 fe97 	bl	24390 <memset>
   12662:	23f0      	movs	r3, #240	@ 0xf0
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12664:	a902      	add	r1, sp, #8
   12666:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12668:	9304      	str	r3, [sp, #16]
   1266a:	9403      	str	r4, [sp, #12]
   1266c:	9405      	str	r4, [sp, #20]
   1266e:	f8cd 801c 	str.w	r8, [sp, #28]
   12672:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12676:	f00d fde5 	bl	20244 <am_hal_iom_blocking_transfer>
    regVal = MAX14830_GPIO_PIN_TO_BIT(2);
   1267a:	2304      	movs	r3, #4
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1267c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12680:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_GPIO_PIN_TO_BIT(2);
   12682:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12686:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12688:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1268c:	a802      	add	r0, sp, #8
   1268e:	f011 fe7f 	bl	24390 <memset>
   12692:	2398      	movs	r3, #152	@ 0x98
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12694:	a902      	add	r1, sp, #8
   12696:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12698:	9304      	str	r3, [sp, #16]
   1269a:	9403      	str	r4, [sp, #12]
   1269c:	9405      	str	r4, [sp, #20]
   1269e:	f8cd 801c 	str.w	r8, [sp, #28]
   126a2:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   126a6:	f00d fdcd 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   126aa:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   126ac:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   126b0:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   126b2:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   126b6:	a802      	add	r0, sp, #8
   126b8:	f011 fe6a 	bl	24390 <memset>
   126bc:	2399      	movs	r3, #153	@ 0x99
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   126be:	a902      	add	r1, sp, #8
   126c0:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   126c2:	9304      	str	r3, [sp, #16]
   126c4:	9403      	str	r4, [sp, #12]
   126c6:	9405      	str	r4, [sp, #20]
   126c8:	f8cd 801c 	str.w	r8, [sp, #28]
   126cc:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   126d0:	f00d fdb8 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   126d4:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   126d6:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   126da:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   126dc:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   126e0:	a802      	add	r0, sp, #8
   126e2:	f011 fe55 	bl	24390 <memset>
   126e6:	2302      	movs	r3, #2
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   126e8:	a902      	add	r1, sp, #8
   126ea:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   126ec:	9304      	str	r3, [sp, #16]
   126ee:	9403      	str	r4, [sp, #12]
   126f0:	9405      	str	r4, [sp, #20]
   126f2:	f88d 4018 	strb.w	r4, [sp, #24]
   126f6:	f8cd 8020 	str.w	r8, [sp, #32]
   126fa:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   126fe:	f00d fda1 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12702:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12704:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12708:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1270a:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1270e:	a802      	add	r0, sp, #8
   12710:	f011 fe3e 	bl	24390 <memset>
   12714:	2362      	movs	r3, #98	@ 0x62
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12716:	a902      	add	r1, sp, #8
   12718:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1271a:	9304      	str	r3, [sp, #16]
   1271c:	9403      	str	r4, [sp, #12]
   1271e:	9405      	str	r4, [sp, #20]
   12720:	f88d 4018 	strb.w	r4, [sp, #24]
   12724:	f8cd 8020 	str.w	r8, [sp, #32]
   12728:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1272c:	f00d fd8a 	bl	20244 <am_hal_iom_blocking_transfer>
   12730:	e002      	b.n	12738 <module_MAX14830_conf+0x6ac>
   12732:	bf00      	nop
   12734:	40010000 	.word	0x40010000
    regVal = MAX14830_IRQ_RFIFOEMTY ; //| MAX14830_IRQ_TFIFOEMTY | MAX14830_IRQ_CTSIEN;
   12738:	2340      	movs	r3, #64	@ 0x40
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1273a:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   1273e:	2228      	movs	r2, #40	@ 0x28
    regVal = MAX14830_IRQ_RFIFOEMTY ; //| MAX14830_IRQ_TFIFOEMTY | MAX14830_IRQ_CTSIEN;
   12740:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12744:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12746:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1274a:	a802      	add	r0, sp, #8
   1274c:	f011 fe20 	bl	24390 <memset>
   12750:	2381      	movs	r3, #129	@ 0x81
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12752:	a902      	add	r1, sp, #8
   12754:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   12756:	9304      	str	r3, [sp, #16]
   12758:	9403      	str	r4, [sp, #12]
   1275a:	9405      	str	r4, [sp, #20]
   1275c:	f8cd 801c 	str.w	r8, [sp, #28]
   12760:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12764:	f00d fd6e 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12768:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   1276c:	2228      	movs	r2, #40	@ 0x28
   1276e:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12770:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12774:	a802      	add	r0, sp, #8
   12776:	f011 fe0b 	bl	24390 <memset>
   1277a:	23e1      	movs	r3, #225	@ 0xe1
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1277c:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   1277e:	9403      	str	r4, [sp, #12]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12780:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12782:	9405      	str	r4, [sp, #20]
   12784:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   12788:	f8cd 801c 	str.w	r8, [sp, #28]
   1278c:	9304      	str	r3, [sp, #16]
   1278e:	f04f 0900 	mov.w	r9, #0
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12792:	f00d fd57 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12796:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   1279a:	2228      	movs	r2, #40	@ 0x28
   1279c:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1279e:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   127a2:	a802      	add	r0, sp, #8
   127a4:	f011 fdf4 	bl	24390 <memset>
   127a8:	2401      	movs	r4, #1
   127aa:	f049 031b 	orr.w	r3, r9, #27
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   127ae:	a902      	add	r1, sp, #8
   127b0:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   127b2:	9405      	str	r4, [sp, #20]
   127b4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   127b8:	f88d 4018 	strb.w	r4, [sp, #24]
   127bc:	f8cd 8020 	str.w	r8, [sp, #32]
   127c0:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   127c4:	f00d fd3e 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   127c8:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
        regVal |= MAX14830_BRG_CLK_DISABLE;
   127cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   127d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   127d4:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   127d8:	2228      	movs	r2, #40	@ 0x28
   127da:	2100      	movs	r1, #0
   127dc:	a802      	add	r0, sp, #8
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   127de:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   127e2:	f011 fdd5 	bl	24390 <memset>
   127e6:	f049 039b 	orr.w	r3, r9, #155	@ 0x9b
    for(uint8_t i=0; i<4; i++)
   127ea:	f109 0920 	add.w	r9, r9, #32
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   127ee:	6838      	ldr	r0, [r7, #0]
    am_hal_iom_transfer_t transfer =
   127f0:	9405      	str	r4, [sp, #20]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   127f2:	a902      	add	r1, sp, #8
    for(uint8_t i=0; i<4; i++)
   127f4:	fa5f f989 	uxtb.w	r9, r9
    am_hal_iom_transfer_t transfer =
   127f8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   127fc:	f8cd 801c 	str.w	r8, [sp, #28]
   12800:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12804:	f00d fd1e 	bl	20244 <am_hal_iom_blocking_transfer>
    for(uint8_t i=0; i<4; i++)
   12808:	f1b9 0f80 	cmp.w	r9, #128	@ 0x80
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1280c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    for(uint8_t i=0; i<4; i++)
   12810:	d1c3      	bne.n	1279a <module_MAX14830_conf+0x70e>
}
   12812:	b00d      	add	sp, #52	@ 0x34
   12814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012818 <MAX14830_initialize>:
{
   12818:	b510      	push	{r4, lr}
    IomConfig.eInterfaceMode       = AM_HAL_IOM_SPI_MODE;
   1281a:	4b71      	ldr	r3, [pc, #452]	@ (129e0 <MAX14830_initialize+0x1c8>)
    IomConfig.ui32ClockFreq        = AM_HAL_IOM_100KHZ;
   1281c:	4c71      	ldr	r4, [pc, #452]	@ (129e4 <MAX14830_initialize+0x1cc>)
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(3, &pIomHandle));
   1281e:	4972      	ldr	r1, [pc, #456]	@ (129e8 <MAX14830_initialize+0x1d0>)
{
   12820:	b082      	sub	sp, #8
    IomConfig.eInterfaceMode       = AM_HAL_IOM_SPI_MODE;
   12822:	2200      	movs	r2, #0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(3, &pIomHandle));
   12824:	2003      	movs	r0, #3
    IomConfig.ui32NBTxnBufLength   = 0;
   12826:	e9c3 2203 	strd	r2, r2, [r3, #12]
    IomConfig.eInterfaceMode       = AM_HAL_IOM_SPI_MODE;
   1282a:	701a      	strb	r2, [r3, #0]
    IomConfig.ui32ClockFreq        = AM_HAL_IOM_100KHZ;
   1282c:	605c      	str	r4, [r3, #4]
    IomConfig.eSpiMode             = AM_HAL_IOM_SPI_MODE_0;
   1282e:	721a      	strb	r2, [r3, #8]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(3, &pIomHandle));
   12830:	f00d f9b6 	bl	1fba0 <am_hal_iom_initialize>
   12834:	2800      	cmp	r0, #0
   12836:	d16f      	bne.n	12918 <MAX14830_initialize+0x100>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(pIomHandle, AM_HAL_SYSCTRL_WAKE, false));
   12838:	4c6b      	ldr	r4, [pc, #428]	@ (129e8 <MAX14830_initialize+0x1d0>)
   1283a:	2200      	movs	r2, #0
   1283c:	4611      	mov	r1, r2
   1283e:	6820      	ldr	r0, [r4, #0]
   12840:	f00d fa7c 	bl	1fd3c <am_hal_iom_power_ctrl>
   12844:	4601      	mov	r1, r0
   12846:	2800      	cmp	r0, #0
   12848:	f040 80c1 	bne.w	129ce <MAX14830_initialize+0x1b6>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_configure(pIomHandle, &IomConfig));
   1284c:	4964      	ldr	r1, [pc, #400]	@ (129e0 <MAX14830_initialize+0x1c8>)
   1284e:	6820      	ldr	r0, [r4, #0]
   12850:	f00d fb4c 	bl	1feec <am_hal_iom_configure>
   12854:	4601      	mov	r1, r0
   12856:	2800      	cmp	r0, #0
   12858:	f040 80b0 	bne.w	129bc <MAX14830_initialize+0x1a4>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_enable(pIomHandle));
   1285c:	6820      	ldr	r0, [r4, #0]
   1285e:	f00d f9c5 	bl	1fbec <am_hal_iom_enable>
   12862:	4601      	mov	r1, r0
   12864:	2800      	cmp	r0, #0
   12866:	f040 80a0 	bne.w	129aa <MAX14830_initialize+0x192>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_SCK, g_AM_BSP_GPIO_IOM3_SCK));
   1286a:	4b60      	ldr	r3, [pc, #384]	@ (129ec <MAX14830_initialize+0x1d4>)
   1286c:	202a      	movs	r0, #42	@ 0x2a
   1286e:	6819      	ldr	r1, [r3, #0]
   12870:	f00c fed6 	bl	1f620 <am_hal_gpio_pinconfig>
   12874:	4601      	mov	r1, r0
   12876:	2800      	cmp	r0, #0
   12878:	f040 808e 	bne.w	12998 <MAX14830_initialize+0x180>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_MISO, g_AM_BSP_GPIO_IOM3_MISO));
   1287c:	4b5c      	ldr	r3, [pc, #368]	@ (129f0 <MAX14830_initialize+0x1d8>)
   1287e:	202b      	movs	r0, #43	@ 0x2b
   12880:	6819      	ldr	r1, [r3, #0]
   12882:	f00c fecd 	bl	1f620 <am_hal_gpio_pinconfig>
   12886:	4601      	mov	r1, r0
   12888:	2800      	cmp	r0, #0
   1288a:	d17c      	bne.n	12986 <MAX14830_initialize+0x16e>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_MOSI, g_AM_BSP_GPIO_IOM3_MOSI));
   1288c:	4b59      	ldr	r3, [pc, #356]	@ (129f4 <MAX14830_initialize+0x1dc>)
   1288e:	2026      	movs	r0, #38	@ 0x26
   12890:	6819      	ldr	r1, [r3, #0]
   12892:	f00c fec5 	bl	1f620 <am_hal_gpio_pinconfig>
   12896:	4601      	mov	r1, r0
   12898:	2800      	cmp	r0, #0
   1289a:	d16b      	bne.n	12974 <MAX14830_initialize+0x15c>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_CS, g_AM_BSP_GPIO_IOM3_CS));
   1289c:	4b56      	ldr	r3, [pc, #344]	@ (129f8 <MAX14830_initialize+0x1e0>)
   1289e:	2011      	movs	r0, #17
   128a0:	6819      	ldr	r1, [r3, #0]
   128a2:	f00c febd 	bl	1f620 <am_hal_gpio_pinconfig>
   128a6:	4601      	mov	r1, r0
   128a8:	2800      	cmp	r0, #0
   128aa:	d15a      	bne.n	12962 <MAX14830_initialize+0x14a>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_S2U_NIRQ, g_AM_BSP_GPIO_S2U_NIRQ));
   128ac:	4b53      	ldr	r3, [pc, #332]	@ (129fc <MAX14830_initialize+0x1e4>)
   128ae:	2012      	movs	r0, #18
   128b0:	6819      	ldr	r1, [r3, #0]
   128b2:	f00c feb5 	bl	1f620 <am_hal_gpio_pinconfig>
   128b6:	4601      	mov	r1, r0
   128b8:	2800      	cmp	r0, #0
   128ba:	d149      	bne.n	12950 <MAX14830_initialize+0x138>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_S2U_NRESET, g_AM_BSP_GPIO_S2U_NRESET));
   128bc:	4b50      	ldr	r3, [pc, #320]	@ (12a00 <MAX14830_initialize+0x1e8>)
   128be:	2013      	movs	r0, #19
   128c0:	6819      	ldr	r1, [r3, #0]
   128c2:	f00c fead 	bl	1f620 <am_hal_gpio_pinconfig>
   128c6:	4601      	mov	r1, r0
   128c8:	2800      	cmp	r0, #0
   128ca:	d138      	bne.n	1293e <MAX14830_initialize+0x126>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_S2U_ON, g_AM_BSP_GPIO_S2U_ON));
   128cc:	4b4d      	ldr	r3, [pc, #308]	@ (12a04 <MAX14830_initialize+0x1ec>)
   128ce:	202d      	movs	r0, #45	@ 0x2d
   128d0:	6819      	ldr	r1, [r3, #0]
   128d2:	f00c fea5 	bl	1f620 <am_hal_gpio_pinconfig>
   128d6:	4601      	mov	r1, r0
   128d8:	bb40      	cbnz	r0, 1292c <MAX14830_initialize+0x114>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_S2U_NIRQ));
   128da:	2100      	movs	r1, #0
   128dc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
   128e0:	f00d f87c 	bl	1f9dc <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_S2U_NIRQ));
   128e4:	2100      	movs	r1, #0
   128e6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
   128ea:	f00d f853 	bl	1f994 <am_hal_gpio_interrupt_enable>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   128ee:	4b46      	ldr	r3, [pc, #280]	@ (12a08 <MAX14830_initialize+0x1f0>)
   128f0:	2280      	movs	r2, #128	@ 0x80
   128f2:	f883 230d 	strb.w	r2, [r3, #781]	@ 0x30d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   128f6:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
   128fa:	601c      	str	r4, [r3, #0]
    am_hal_interrupt_master_enable();
   128fc:	f00d f88c 	bl	1fa18 <am_hal_interrupt_master_enable>
    am_hal_gpio_output_set(AM_BSP_GPIO_S2U_NRESET);
   12900:	4b42      	ldr	r3, [pc, #264]	@ (12a0c <MAX14830_initialize+0x1f4>)
   12902:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
   12906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    am_hal_gpio_output_clear(AM_BSP_GPIO_S2U_ON);
   1290a:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
    module_MAX14830_conf();
   1290e:	f7ff fbbd 	bl	1208c <module_MAX14830_conf>
}
   12912:	2001      	movs	r0, #1
   12914:	b002      	add	sp, #8
   12916:	bd10      	pop	{r4, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(3, &pIomHandle));
   12918:	f240 146f 	movw	r4, #367	@ 0x16f
   1291c:	4601      	mov	r1, r0
   1291e:	4b3c      	ldr	r3, [pc, #240]	@ (12a10 <MAX14830_initialize+0x1f8>)
   12920:	4a3c      	ldr	r2, [pc, #240]	@ (12a14 <MAX14830_initialize+0x1fc>)
   12922:	483d      	ldr	r0, [pc, #244]	@ (12a18 <MAX14830_initialize+0x200>)
   12924:	9400      	str	r4, [sp, #0]
   12926:	f008 fcef 	bl	1b308 <artemis_debug_halerror>
   1292a:	e785      	b.n	12838 <MAX14830_initialize+0x20>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_S2U_ON, g_AM_BSP_GPIO_S2U_ON));
   1292c:	f44f 74be 	mov.w	r4, #380	@ 0x17c
   12930:	4b37      	ldr	r3, [pc, #220]	@ (12a10 <MAX14830_initialize+0x1f8>)
   12932:	4a38      	ldr	r2, [pc, #224]	@ (12a14 <MAX14830_initialize+0x1fc>)
   12934:	4839      	ldr	r0, [pc, #228]	@ (12a1c <MAX14830_initialize+0x204>)
   12936:	9400      	str	r4, [sp, #0]
   12938:	f008 fce6 	bl	1b308 <artemis_debug_halerror>
   1293c:	e7cd      	b.n	128da <MAX14830_initialize+0xc2>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_S2U_NRESET, g_AM_BSP_GPIO_S2U_NRESET));
   1293e:	f240 147b 	movw	r4, #379	@ 0x17b
   12942:	4b33      	ldr	r3, [pc, #204]	@ (12a10 <MAX14830_initialize+0x1f8>)
   12944:	4a33      	ldr	r2, [pc, #204]	@ (12a14 <MAX14830_initialize+0x1fc>)
   12946:	4836      	ldr	r0, [pc, #216]	@ (12a20 <MAX14830_initialize+0x208>)
   12948:	9400      	str	r4, [sp, #0]
   1294a:	f008 fcdd 	bl	1b308 <artemis_debug_halerror>
   1294e:	e7bd      	b.n	128cc <MAX14830_initialize+0xb4>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_S2U_NIRQ, g_AM_BSP_GPIO_S2U_NIRQ));
   12950:	f44f 74bd 	mov.w	r4, #378	@ 0x17a
   12954:	4b2e      	ldr	r3, [pc, #184]	@ (12a10 <MAX14830_initialize+0x1f8>)
   12956:	4a2f      	ldr	r2, [pc, #188]	@ (12a14 <MAX14830_initialize+0x1fc>)
   12958:	4832      	ldr	r0, [pc, #200]	@ (12a24 <MAX14830_initialize+0x20c>)
   1295a:	9400      	str	r4, [sp, #0]
   1295c:	f008 fcd4 	bl	1b308 <artemis_debug_halerror>
   12960:	e7ac      	b.n	128bc <MAX14830_initialize+0xa4>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_CS, g_AM_BSP_GPIO_IOM3_CS));
   12962:	f240 1479 	movw	r4, #377	@ 0x179
   12966:	4b2a      	ldr	r3, [pc, #168]	@ (12a10 <MAX14830_initialize+0x1f8>)
   12968:	4a2a      	ldr	r2, [pc, #168]	@ (12a14 <MAX14830_initialize+0x1fc>)
   1296a:	482f      	ldr	r0, [pc, #188]	@ (12a28 <MAX14830_initialize+0x210>)
   1296c:	9400      	str	r4, [sp, #0]
   1296e:	f008 fccb 	bl	1b308 <artemis_debug_halerror>
   12972:	e79b      	b.n	128ac <MAX14830_initialize+0x94>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_MOSI, g_AM_BSP_GPIO_IOM3_MOSI));
   12974:	f240 1477 	movw	r4, #375	@ 0x177
   12978:	4b25      	ldr	r3, [pc, #148]	@ (12a10 <MAX14830_initialize+0x1f8>)
   1297a:	4a26      	ldr	r2, [pc, #152]	@ (12a14 <MAX14830_initialize+0x1fc>)
   1297c:	482b      	ldr	r0, [pc, #172]	@ (12a2c <MAX14830_initialize+0x214>)
   1297e:	9400      	str	r4, [sp, #0]
   12980:	f008 fcc2 	bl	1b308 <artemis_debug_halerror>
   12984:	e78a      	b.n	1289c <MAX14830_initialize+0x84>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_MISO, g_AM_BSP_GPIO_IOM3_MISO));
   12986:	f44f 74bb 	mov.w	r4, #374	@ 0x176
   1298a:	4b21      	ldr	r3, [pc, #132]	@ (12a10 <MAX14830_initialize+0x1f8>)
   1298c:	4a21      	ldr	r2, [pc, #132]	@ (12a14 <MAX14830_initialize+0x1fc>)
   1298e:	4828      	ldr	r0, [pc, #160]	@ (12a30 <MAX14830_initialize+0x218>)
   12990:	9400      	str	r4, [sp, #0]
   12992:	f008 fcb9 	bl	1b308 <artemis_debug_halerror>
   12996:	e779      	b.n	1288c <MAX14830_initialize+0x74>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM3_SCK, g_AM_BSP_GPIO_IOM3_SCK));
   12998:	f240 1475 	movw	r4, #373	@ 0x175
   1299c:	4b1c      	ldr	r3, [pc, #112]	@ (12a10 <MAX14830_initialize+0x1f8>)
   1299e:	4a1d      	ldr	r2, [pc, #116]	@ (12a14 <MAX14830_initialize+0x1fc>)
   129a0:	4824      	ldr	r0, [pc, #144]	@ (12a34 <MAX14830_initialize+0x21c>)
   129a2:	9400      	str	r4, [sp, #0]
   129a4:	f008 fcb0 	bl	1b308 <artemis_debug_halerror>
   129a8:	e768      	b.n	1287c <MAX14830_initialize+0x64>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_enable(pIomHandle));
   129aa:	f44f 74b9 	mov.w	r4, #370	@ 0x172
   129ae:	4b18      	ldr	r3, [pc, #96]	@ (12a10 <MAX14830_initialize+0x1f8>)
   129b0:	4a18      	ldr	r2, [pc, #96]	@ (12a14 <MAX14830_initialize+0x1fc>)
   129b2:	4821      	ldr	r0, [pc, #132]	@ (12a38 <MAX14830_initialize+0x220>)
   129b4:	9400      	str	r4, [sp, #0]
   129b6:	f008 fca7 	bl	1b308 <artemis_debug_halerror>
   129ba:	e756      	b.n	1286a <MAX14830_initialize+0x52>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_configure(pIomHandle, &IomConfig));
   129bc:	f240 1071 	movw	r0, #369	@ 0x171
   129c0:	9000      	str	r0, [sp, #0]
   129c2:	4b13      	ldr	r3, [pc, #76]	@ (12a10 <MAX14830_initialize+0x1f8>)
   129c4:	4a13      	ldr	r2, [pc, #76]	@ (12a14 <MAX14830_initialize+0x1fc>)
   129c6:	481d      	ldr	r0, [pc, #116]	@ (12a3c <MAX14830_initialize+0x224>)
   129c8:	f008 fc9e 	bl	1b308 <artemis_debug_halerror>
   129cc:	e746      	b.n	1285c <MAX14830_initialize+0x44>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(pIomHandle, AM_HAL_SYSCTRL_WAKE, false));
   129ce:	f44f 70b8 	mov.w	r0, #368	@ 0x170
   129d2:	9000      	str	r0, [sp, #0]
   129d4:	4b0e      	ldr	r3, [pc, #56]	@ (12a10 <MAX14830_initialize+0x1f8>)
   129d6:	4a0f      	ldr	r2, [pc, #60]	@ (12a14 <MAX14830_initialize+0x1fc>)
   129d8:	4819      	ldr	r0, [pc, #100]	@ (12a40 <MAX14830_initialize+0x228>)
   129da:	f008 fc95 	bl	1b308 <artemis_debug_halerror>
   129de:	e735      	b.n	1284c <MAX14830_initialize+0x34>
   129e0:	1000b910 	.word	0x1000b910
   129e4:	000186a0 	.word	0x000186a0
   129e8:	1000b924 	.word	0x1000b924
   129ec:	00030f3c 	.word	0x00030f3c
   129f0:	00030f44 	.word	0x00030f44
   129f4:	00030f40 	.word	0x00030f40
   129f8:	00030f48 	.word	0x00030f48
   129fc:	00030f6c 	.word	0x00030f6c
   12a00:	00030f70 	.word	0x00030f70
   12a04:	00030f74 	.word	0x00030f74
   12a08:	e000e100 	.word	0xe000e100
   12a0c:	40010000 	.word	0x40010000
   12a10:	0002ac54 	.word	0x0002ac54
   12a14:	00030d4c 	.word	0x00030d4c
   12a18:	0002ac68 	.word	0x0002ac68
   12a1c:	0002aec4 	.word	0x0002aec4
   12a20:	0002ae7c 	.word	0x0002ae7c
   12a24:	0002ae38 	.word	0x0002ae38
   12a28:	0002adf4 	.word	0x0002adf4
   12a2c:	0002adac 	.word	0x0002adac
   12a30:	0002ad64 	.word	0x0002ad64
   12a34:	0002ad20 	.word	0x0002ad20
   12a38:	0002ad00 	.word	0x0002ad00
   12a3c:	0002acd0 	.word	0x0002acd0
   12a40:	0002ac90 	.word	0x0002ac90

00012a44 <MAX14830_uninitialize>:
{
   12a44:	b510      	push	{r4, lr}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_disable(pIomHandle));
   12a46:	4c18      	ldr	r4, [pc, #96]	@ (12aa8 <MAX14830_uninitialize+0x64>)
{
   12a48:	b082      	sub	sp, #8
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_disable(pIomHandle));
   12a4a:	6820      	ldr	r0, [r4, #0]
   12a4c:	f00d f940 	bl	1fcd0 <am_hal_iom_disable>
   12a50:	b968      	cbnz	r0, 12a6e <MAX14830_uninitialize+0x2a>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(pIomHandle, AM_HAL_SYSCTRL_DEEPSLEEP, false));
   12a52:	2102      	movs	r1, #2
   12a54:	6820      	ldr	r0, [r4, #0]
   12a56:	2200      	movs	r2, #0
   12a58:	f00d f970 	bl	1fd3c <am_hal_iom_power_ctrl>
   12a5c:	4601      	mov	r1, r0
   12a5e:	b9d0      	cbnz	r0, 12a96 <MAX14830_uninitialize+0x52>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_uninitialize(pIomHandle));
   12a60:	6820      	ldr	r0, [r4, #0]
   12a62:	f00d f863 	bl	1fb2c <am_hal_iom_uninitialize>
   12a66:	4601      	mov	r1, r0
   12a68:	b958      	cbnz	r0, 12a82 <MAX14830_uninitialize+0x3e>
}
   12a6a:	b002      	add	sp, #8
   12a6c:	bd10      	pop	{r4, pc}
   12a6e:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_disable(pIomHandle));
   12a70:	f240 1091 	movw	r0, #401	@ 0x191
   12a74:	9000      	str	r0, [sp, #0]
   12a76:	4b0d      	ldr	r3, [pc, #52]	@ (12aac <MAX14830_uninitialize+0x68>)
   12a78:	4a0d      	ldr	r2, [pc, #52]	@ (12ab0 <MAX14830_uninitialize+0x6c>)
   12a7a:	480e      	ldr	r0, [pc, #56]	@ (12ab4 <MAX14830_uninitialize+0x70>)
   12a7c:	f008 fc44 	bl	1b308 <artemis_debug_halerror>
   12a80:	e7e7      	b.n	12a52 <MAX14830_uninitialize+0xe>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_uninitialize(pIomHandle));
   12a82:	f240 1493 	movw	r4, #403	@ 0x193
   12a86:	4b09      	ldr	r3, [pc, #36]	@ (12aac <MAX14830_uninitialize+0x68>)
   12a88:	4a09      	ldr	r2, [pc, #36]	@ (12ab0 <MAX14830_uninitialize+0x6c>)
   12a8a:	480b      	ldr	r0, [pc, #44]	@ (12ab8 <MAX14830_uninitialize+0x74>)
   12a8c:	9400      	str	r4, [sp, #0]
   12a8e:	f008 fc3b 	bl	1b308 <artemis_debug_halerror>
}
   12a92:	b002      	add	sp, #8
   12a94:	bd10      	pop	{r4, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(pIomHandle, AM_HAL_SYSCTRL_DEEPSLEEP, false));
   12a96:	f44f 70c9 	mov.w	r0, #402	@ 0x192
   12a9a:	9000      	str	r0, [sp, #0]
   12a9c:	4b03      	ldr	r3, [pc, #12]	@ (12aac <MAX14830_uninitialize+0x68>)
   12a9e:	4a04      	ldr	r2, [pc, #16]	@ (12ab0 <MAX14830_uninitialize+0x6c>)
   12aa0:	4806      	ldr	r0, [pc, #24]	@ (12abc <MAX14830_uninitialize+0x78>)
   12aa2:	f008 fc31 	bl	1b308 <artemis_debug_halerror>
   12aa6:	e7db      	b.n	12a60 <MAX14830_uninitialize+0x1c>
   12aa8:	1000b924 	.word	0x1000b924
   12aac:	0002ac54 	.word	0x0002ac54
   12ab0:	00030d34 	.word	0x00030d34
   12ab4:	0002af04 	.word	0x0002af04
   12ab8:	0002af68 	.word	0x0002af68
   12abc:	0002af24 	.word	0x0002af24

00012ac0 <MAX14830_disable_direct>:
void MAX14830_disable_direct(void)
   12ac0:	4b06      	ldr	r3, [pc, #24]	@ (12adc <MAX14830_disable_direct+0x1c>)
   12ac2:	4a07      	ldr	r2, [pc, #28]	@ (12ae0 <MAX14830_disable_direct+0x20>)
   12ac4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
   12ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
   12acc:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
   12ad0:	6810      	ldr	r0, [r2, #0]
   12ad2:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
   12ad6:	f00d b8fb 	b.w	1fcd0 <am_hal_iom_disable>
   12ada:	bf00      	nop
   12adc:	40010000 	.word	0x40010000
   12ae0:	1000b924 	.word	0x1000b924

00012ae4 <MAX14830_enable>:
    am_hal_iom_enable(pIomHandle);
   12ae4:	4b20      	ldr	r3, [pc, #128]	@ (12b68 <MAX14830_enable+0x84>)
{
   12ae6:	b510      	push	{r4, lr}
    am_hal_iom_enable(pIomHandle);
   12ae8:	6818      	ldr	r0, [r3, #0]
    if (gEventHandle != NULL)
   12aea:	4c20      	ldr	r4, [pc, #128]	@ (12b6c <MAX14830_enable+0x88>)
    am_hal_iom_enable(pIomHandle);
   12aec:	f00d f87e 	bl	1fbec <am_hal_iom_enable>
    am_hal_gpio_output_set(AM_BSP_GPIO_S2U_NRESET);
   12af0:	4b1f      	ldr	r3, [pc, #124]	@ (12b70 <MAX14830_enable+0x8c>)
   12af2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
    am_hal_gpio_output_clear(AM_BSP_GPIO_S2U_ON);
   12af6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    am_hal_gpio_output_set(AM_BSP_GPIO_S2U_NRESET);
   12afa:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
    am_hal_gpio_output_clear(AM_BSP_GPIO_S2U_ON);
   12afe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    module_MAX14830_conf();
   12b02:	f7ff fac3 	bl	1208c <module_MAX14830_conf>
    if (gEventHandle != NULL)
   12b06:	6823      	ldr	r3, [r4, #0]
   12b08:	b183      	cbz	r3, 12b2c <MAX14830_enable+0x48>
        ARTEMIS_DEBUG_PRINTF("MAX14830 :: gEventHandle, alive\n");
   12b0a:	481a      	ldr	r0, [pc, #104]	@ (12b74 <MAX14830_enable+0x90>)
   12b0c:	f7fe faac 	bl	11068 <am_util_stdio_printf>
   12b10:	4818      	ldr	r0, [pc, #96]	@ (12b74 <MAX14830_enable+0x90>)
   12b12:	f00b fa31 	bl	1df78 <datalogger_log_debug>
    if (xSpiMutex != NULL)
   12b16:	4c18      	ldr	r4, [pc, #96]	@ (12b78 <MAX14830_enable+0x94>)
   12b18:	6823      	ldr	r3, [r4, #0]
   12b1a:	b1b3      	cbz	r3, 12b4a <MAX14830_enable+0x66>
        ARTEMIS_DEBUG_PRINTF("MAX14830 :: xSpiMutex, alive\n");
   12b1c:	4817      	ldr	r0, [pc, #92]	@ (12b7c <MAX14830_enable+0x98>)
   12b1e:	f7fe faa3 	bl	11068 <am_util_stdio_printf>
}
   12b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ARTEMIS_DEBUG_PRINTF("MAX14830 :: xSpiMutex, alive\n");
   12b26:	4815      	ldr	r0, [pc, #84]	@ (12b7c <MAX14830_enable+0x98>)
   12b28:	f00b ba26 	b.w	1df78 <datalogger_log_debug>
        gEventHandle = xEventGroupCreate();
   12b2c:	f7fa fe9c 	bl	d868 <xEventGroupCreate>
   12b30:	6020      	str	r0, [r4, #0]
        if( gEventHandle != NULL )
   12b32:	2800      	cmp	r0, #0
   12b34:	d0ef      	beq.n	12b16 <MAX14830_enable+0x32>
            ARTEMIS_DEBUG_PRINTF("MAX14830 :: gEventHandle, created\n");
   12b36:	4812      	ldr	r0, [pc, #72]	@ (12b80 <MAX14830_enable+0x9c>)
    if (xSpiMutex != NULL)
   12b38:	4c0f      	ldr	r4, [pc, #60]	@ (12b78 <MAX14830_enable+0x94>)
            ARTEMIS_DEBUG_PRINTF("MAX14830 :: gEventHandle, created\n");
   12b3a:	f7fe fa95 	bl	11068 <am_util_stdio_printf>
   12b3e:	4810      	ldr	r0, [pc, #64]	@ (12b80 <MAX14830_enable+0x9c>)
   12b40:	f00b fa1a 	bl	1df78 <datalogger_log_debug>
    if (xSpiMutex != NULL)
   12b44:	6823      	ldr	r3, [r4, #0]
   12b46:	2b00      	cmp	r3, #0
   12b48:	d1e8      	bne.n	12b1c <MAX14830_enable+0x38>
        xSpiMutex = xSemaphoreCreateMutex();
   12b4a:	2001      	movs	r0, #1
   12b4c:	f7fb fa2a 	bl	dfa4 <xQueueCreateMutex>
   12b50:	6020      	str	r0, [r4, #0]
        if( xSpiMutex != NULL )
   12b52:	b138      	cbz	r0, 12b64 <MAX14830_enable+0x80>
            ARTEMIS_DEBUG_PRINTF("MAX14830 :: xSpiMutex, created\n");
   12b54:	480b      	ldr	r0, [pc, #44]	@ (12b84 <MAX14830_enable+0xa0>)
   12b56:	f7fe fa87 	bl	11068 <am_util_stdio_printf>
}
   12b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ARTEMIS_DEBUG_PRINTF("MAX14830 :: xSpiMutex, created\n");
   12b5e:	4809      	ldr	r0, [pc, #36]	@ (12b84 <MAX14830_enable+0xa0>)
   12b60:	f00b ba0a 	b.w	1df78 <datalogger_log_debug>
}
   12b64:	bd10      	pop	{r4, pc}
   12b66:	bf00      	nop
   12b68:	1000b924 	.word	0x1000b924
   12b6c:	1000b928 	.word	0x1000b928
   12b70:	40010000 	.word	0x40010000
   12b74:	0002af8c 	.word	0x0002af8c
   12b78:	1000b930 	.word	0x1000b930
   12b7c:	0002afd4 	.word	0x0002afd4
   12b80:	0002afb0 	.word	0x0002afb0
   12b84:	0002aff4 	.word	0x0002aff4

00012b88 <MAX14830_port_enable>:
{
   12b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b8c:	b08d      	sub	sp, #52	@ 0x34
    uint32_t state = 0;
   12b8e:	2300      	movs	r3, #0
{
   12b90:	4604      	mov	r4, r0
    am_hal_gpio_state_read(AM_BSP_GPIO_S2U_ON, AM_HAL_GPIO_OUTPUT_READ, &state);
   12b92:	aa01      	add	r2, sp, #4
   12b94:	2101      	movs	r1, #1
   12b96:	202d      	movs	r0, #45	@ 0x2d
    uint32_t state = 0;
   12b98:	9301      	str	r3, [sp, #4]
    am_hal_gpio_state_read(AM_BSP_GPIO_S2U_ON, AM_HAL_GPIO_OUTPUT_READ, &state);
   12b9a:	f00c fe81 	bl	1f8a0 <am_hal_gpio_state_read>
    if(state == 1)
   12b9e:	9b01      	ldr	r3, [sp, #4]
   12ba0:	2b01      	cmp	r3, #1
   12ba2:	d048      	beq.n	12c36 <MAX14830_port_enable+0xae>
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12ba4:	4d28      	ldr	r5, [pc, #160]	@ (12c48 <MAX14830_port_enable+0xc0>)
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12ba6:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 12c50 <MAX14830_port_enable+0xc8>
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12baa:	0160      	lsls	r0, r4, #5
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12bac:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    uint8_t reg = 0;
   12bb0:	2700      	movs	r7, #0
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12bb2:	f000 0460 	and.w	r4, r0, #96	@ 0x60
    uint8_t reg = 0;
   12bb6:	f88d 7003 	strb.w	r7, [sp, #3]
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12bba:	fa5f f880 	uxtb.w	r8, r0
    am_hal_iom_transfer_t transfer =
   12bbe:	2228      	movs	r2, #40	@ 0x28
   12bc0:	4639      	mov	r1, r7
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12bc2:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12bc6:	a802      	add	r0, sp, #8
   12bc8:	f044 041b 	orr.w	r4, r4, #27
   12bcc:	f011 fbe0 	bl	24390 <memset>
   12bd0:	f10d 0303 	add.w	r3, sp, #3
   12bd4:	9404      	str	r4, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12bd6:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12bd8:	2401      	movs	r4, #1
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12bda:	f8d9 0000 	ldr.w	r0, [r9]
    am_hal_iom_transfer_t transfer =
   12bde:	9308      	str	r3, [sp, #32]
   12be0:	9403      	str	r4, [sp, #12]
   12be2:	9405      	str	r4, [sp, #20]
   12be4:	f88d 4018 	strb.w	r4, [sp, #24]
   12be8:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12bec:	f00d fb2a 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12bf0:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
    reg &= ~MAX14830_BRG_CLK_DISABLE;
   12bf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   12bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   12bfc:	f88d 2003 	strb.w	r2, [sp, #3]
    am_hal_iom_transfer_t transfer =
   12c00:	4639      	mov	r1, r7
   12c02:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12c04:	f8c5 6098 	str.w	r6, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12c08:	a802      	add	r0, sp, #8
   12c0a:	f011 fbc1 	bl	24390 <memset>
   12c0e:	f10d 0303 	add.w	r3, sp, #3
   12c12:	9307      	str	r3, [sp, #28]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12c14:	f8d9 0000 	ldr.w	r0, [r9]
    am_hal_iom_transfer_t transfer =
   12c18:	9403      	str	r4, [sp, #12]
   12c1a:	f048 039b 	orr.w	r3, r8, #155	@ 0x9b
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12c1e:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12c20:	9304      	str	r3, [sp, #16]
   12c22:	9405      	str	r4, [sp, #20]
   12c24:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12c28:	f00d fb0c 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12c2c:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
}
   12c30:	b00d      	add	sp, #52	@ 0x34
   12c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MAX14830_enable();
   12c36:	f7ff ff55 	bl	12ae4 <MAX14830_enable>
        ARTEMIS_DEBUG_PRINTF("MAX14830 :: Power ON\n");
   12c3a:	4804      	ldr	r0, [pc, #16]	@ (12c4c <MAX14830_port_enable+0xc4>)
   12c3c:	f7fe fa14 	bl	11068 <am_util_stdio_printf>
   12c40:	4802      	ldr	r0, [pc, #8]	@ (12c4c <MAX14830_port_enable+0xc4>)
   12c42:	f00b f999 	bl	1df78 <datalogger_log_debug>
   12c46:	e7ad      	b.n	12ba4 <MAX14830_port_enable+0x1c>
   12c48:	40010000 	.word	0x40010000
   12c4c:	0002b014 	.word	0x0002b014
   12c50:	1000b924 	.word	0x1000b924

00012c54 <MAX14830_port_disable>:
{
   12c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12c58:	0143      	lsls	r3, r0, #5
{
   12c5a:	b08d      	sub	sp, #52	@ 0x34
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12c5c:	4d4b      	ldr	r5, [pc, #300]	@ (12d8c <MAX14830_port_disable+0x138>)
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12c5e:	4e4c      	ldr	r6, [pc, #304]	@ (12d90 <MAX14830_port_disable+0x13c>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12c60:	f44f 3900 	mov.w	r9, #131072	@ 0x20000
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12c64:	f003 0460 	and.w	r4, r3, #96	@ 0x60
    uint8_t reg = 0;
   12c68:	f04f 0b00 	mov.w	fp, #0
    am_hal_iom_transfer_t transfer =
   12c6c:	2228      	movs	r2, #40	@ 0x28
{
   12c6e:	4680      	mov	r8, r0
    uint8_t reg = 0;
   12c70:	f88d b006 	strb.w	fp, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12c74:	4659      	mov	r1, fp
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12c76:	f8c5 9098 	str.w	r9, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12c7a:	f044 041b 	orr.w	r4, r4, #27
   12c7e:	a802      	add	r0, sp, #8
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12c80:	fa5f fa83 	uxtb.w	sl, r3
    am_hal_iom_transfer_t transfer =
   12c84:	f10d 0706 	add.w	r7, sp, #6
   12c88:	f011 fb82 	bl	24390 <memset>
   12c8c:	9404      	str	r4, [sp, #16]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12c8e:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12c90:	2401      	movs	r4, #1
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12c92:	6830      	ldr	r0, [r6, #0]
    am_hal_iom_transfer_t transfer =
   12c94:	9403      	str	r4, [sp, #12]
   12c96:	9405      	str	r4, [sp, #20]
   12c98:	f88d 4018 	strb.w	r4, [sp, #24]
   12c9c:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   12ca0:	9708      	str	r7, [sp, #32]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12ca2:	f00d facf 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12ca6:	f8c5 9090 	str.w	r9, [r5, #144]	@ 0x90
    reg |= MAX14830_BRG_CLK_DISABLE;
   12caa:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   12cb2:	f88d 3006 	strb.w	r3, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12cb6:	4659      	mov	r1, fp
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12cb8:	f8c5 9098 	str.w	r9, [r5, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12cbc:	2228      	movs	r2, #40	@ 0x28
   12cbe:	a802      	add	r0, sp, #8
   12cc0:	f011 fb66 	bl	24390 <memset>
   12cc4:	f04a 039b 	orr.w	r3, sl, #155	@ 0x9b
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12cc8:	6830      	ldr	r0, [r6, #0]
    am_hal_iom_transfer_t transfer =
   12cca:	9405      	str	r4, [sp, #20]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12ccc:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12cce:	e9cd 4303 	strd	r4, r3, [sp, #12]
   12cd2:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
   12cd6:	9707      	str	r7, [sp, #28]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12cd8:	f00d fab4 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12cdc:	f8c5 9090 	str.w	r9, [r5, #144]	@ 0x90
    sCircularBufferC_t *pBuf = &rxBuf[(uint8_t)port];
   12ce0:	4d2c      	ldr	r5, [pc, #176]	@ (12d94 <MAX14830_port_disable+0x140>)
   12ce2:	f44f 7385 	mov.w	r3, #266	@ 0x10a
   12ce6:	fb03 5508 	mla	r5, r3, r8, r5
    while( (BufferC_Get_Size(pBuf) > 0) )
   12cea:	e001      	b.n	12cf0 <MAX14830_port_disable+0x9c>
        BufferC_getc(pBuf, &discard);
   12cec:	f7fe faf0 	bl	112d0 <BufferC_getc>
    while( (BufferC_Get_Size(pBuf) > 0) )
   12cf0:	4628      	mov	r0, r5
   12cf2:	f7fe fabd 	bl	11270 <BufferC_Get_Size>
   12cf6:	4604      	mov	r4, r0
        BufferC_getc(pBuf, &discard);
   12cf8:	f10d 0107 	add.w	r1, sp, #7
   12cfc:	4628      	mov	r0, r5
    while( (BufferC_Get_Size(pBuf) > 0) )
   12cfe:	2c00      	cmp	r4, #0
   12d00:	d1f4      	bne.n	12cec <MAX14830_port_disable+0x98>
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12d02:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 12d8c <MAX14830_port_disable+0x138>
   12d06:	4625      	mov	r5, r4
   12d08:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
        reg = 0;
   12d0c:	2100      	movs	r1, #0
   12d0e:	f88d 1006 	strb.w	r1, [sp, #6]
    am_hal_iom_transfer_t transfer =
   12d12:	2228      	movs	r2, #40	@ 0x28
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12d14:	f8c9 8098 	str.w	r8, [r9, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12d18:	a802      	add	r0, sp, #8
   12d1a:	f011 fb39 	bl	24390 <memset>
   12d1e:	2301      	movs	r3, #1
   12d20:	f045 021b 	orr.w	r2, r5, #27
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12d24:	6830      	ldr	r0, [r6, #0]
    am_hal_iom_transfer_t transfer =
   12d26:	9305      	str	r3, [sp, #20]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12d28:	a902      	add	r1, sp, #8
    am_hal_iom_transfer_t transfer =
   12d2a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   12d2e:	f88d 3018 	strb.w	r3, [sp, #24]
   12d32:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
   12d36:	9708      	str	r7, [sp, #32]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12d38:	f00d fa84 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12d3c:	f8c9 8090 	str.w	r8, [r9, #144]	@ 0x90
        if( (reg & MAX14830_BRG_CLK_DISABLE) > 0)
   12d40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    for(uint8_t i=0; i<4; i++)
   12d44:	3520      	adds	r5, #32
        if( (reg & MAX14830_BRG_CLK_DISABLE) > 0)
   12d46:	065b      	lsls	r3, r3, #25
            cnt++;
   12d48:	bf48      	it	mi
   12d4a:	3401      	addmi	r4, #1
    for(uint8_t i=0; i<4; i++)
   12d4c:	b2ed      	uxtb	r5, r5
            cnt++;
   12d4e:	bf48      	it	mi
   12d50:	b2e4      	uxtbmi	r4, r4
    for(uint8_t i=0; i<4; i++)
   12d52:	2d80      	cmp	r5, #128	@ 0x80
   12d54:	d1da      	bne.n	12d0c <MAX14830_port_disable+0xb8>
    if(cnt == MAX14830_NUM_SERIAL_PORTS)
   12d56:	2c04      	cmp	r4, #4
   12d58:	d002      	beq.n	12d60 <MAX14830_port_disable+0x10c>
}
   12d5a:	b00d      	add	sp, #52	@ 0x34
   12d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_gpio_output_clear(AM_BSP_GPIO_S2U_NRESET);
   12d60:	4b0a      	ldr	r3, [pc, #40]	@ (12d8c <MAX14830_port_disable+0x138>)
    am_hal_iom_disable(pIomHandle);
   12d62:	6830      	ldr	r0, [r6, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_S2U_NRESET);
   12d64:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
    am_hal_gpio_output_set(AM_BSP_GPIO_S2U_ON);
   12d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    am_hal_gpio_output_clear(AM_BSP_GPIO_S2U_NRESET);
   12d6c:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
    am_hal_gpio_output_set(AM_BSP_GPIO_S2U_ON);
   12d70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    am_hal_iom_disable(pIomHandle);
   12d74:	f00c ffac 	bl	1fcd0 <am_hal_iom_disable>
        ARTEMIS_DEBUG_PRINTF("MAX14830 :: Power OFF\n");
   12d78:	4807      	ldr	r0, [pc, #28]	@ (12d98 <MAX14830_port_disable+0x144>)
   12d7a:	f7fe f975 	bl	11068 <am_util_stdio_printf>
   12d7e:	4806      	ldr	r0, [pc, #24]	@ (12d98 <MAX14830_port_disable+0x144>)
   12d80:	f00b f8fa 	bl	1df78 <datalogger_log_debug>
}
   12d84:	b00d      	add	sp, #52	@ 0x34
   12d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d8a:	bf00      	nop
   12d8c:	40010000 	.word	0x40010000
   12d90:	1000b924 	.word	0x1000b924
   12d94:	1000b080 	.word	0x1000b080
   12d98:	0002b02c 	.word	0x0002b02c

00012d9c <module_MAX14830_Handle_IRQ>:
{
   12d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12da0:	4ca4      	ldr	r4, [pc, #656]	@ (13034 <module_MAX14830_Handle_IRQ+0x298>)
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12da2:	4da5      	ldr	r5, [pc, #660]	@ (13038 <module_MAX14830_Handle_IRQ+0x29c>)
{
   12da4:	b0b1      	sub	sp, #196	@ 0xc4
    uint8_t rxData[128] = {0};
   12da6:	2280      	movs	r2, #128	@ 0x80
   12da8:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12daa:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
    uint8_t rxData[128] = {0};
   12dae:	a810      	add	r0, sp, #64	@ 0x40
   12db0:	f011 faee 	bl	24390 <memset>
    am_hal_iom_transfer_t transfer =
   12db4:	2228      	movs	r2, #40	@ 0x28
   12db6:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12db8:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12dbc:	a806      	add	r0, sp, #24
   12dbe:	f011 fae7 	bl	24390 <memset>
   12dc2:	2301      	movs	r3, #1
   12dc4:	9307      	str	r3, [sp, #28]
   12dc6:	9309      	str	r3, [sp, #36]	@ 0x24
   12dc8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
   12dcc:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
   12dd0:	231f      	movs	r3, #31
   12dd2:	9308      	str	r3, [sp, #32]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12dd4:	a906      	add	r1, sp, #24
    am_hal_iom_transfer_t transfer =
   12dd6:	f10d 0313 	add.w	r3, sp, #19
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12dda:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12ddc:	930c      	str	r3, [sp, #48]	@ 0x30
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12dde:	f00d fa31 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12de2:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
        if ( (~irq&0x0F) & (1u << i))
   12de6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12dea:	43db      	mvns	r3, r3
            port = i;
   12dec:	f013 0f04 	tst.w	r3, #4
        if ( (~irq&0x0F) & (1u << i))
   12df0:	f3c3 0c40 	ubfx	ip, r3, #1, #1
            port = i;
   12df4:	bf18      	it	ne
   12df6:	f04f 0c02 	movne.w	ip, #2
   12dfa:	f013 0f08 	tst.w	r3, #8
   12dfe:	bf18      	it	ne
   12e00:	f04f 0c03 	movne.w	ip, #3
                BufferC_putc(&rxBuf[(uint8_t)port], regVal);
   12e04:	4b8d      	ldr	r3, [pc, #564]	@ (1303c <module_MAX14830_Handle_IRQ+0x2a0>)
    uint8_t cmd = MAX14830_SPI_READ_BIT & (port << 5);
   12e06:	ea4f 114c 	mov.w	r1, ip, lsl #5
                BufferC_putc(&rxBuf[(uint8_t)port], regVal);
   12e0a:	f44f 7285 	mov.w	r2, #266	@ 0x10a
    am_hal_iom_transfer_t transfer =
   12e0e:	f041 0912 	orr.w	r9, r1, #18
                BufferC_putc(&rxBuf[(uint8_t)port], regVal);
   12e12:	fb02 330c 	mla	r3, r2, ip, r3
   12e16:	e9cd 9c02 	strd	r9, ip, [sp, #8]
   12e1a:	9301      	str	r3, [sp, #4]
    am_hal_iom_transfer_t transfer =
   12e1c:	f041 0a02 	orr.w	sl, r1, #2
   12e20:	f10d 0814 	add.w	r8, sp, #20
   12e24:	4689      	mov	r9, r1
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12e26:	f8dd b008 	ldr.w	fp, [sp, #8]
   12e2a:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
    am_hal_iom_transfer_t transfer =
   12e2e:	2228      	movs	r2, #40	@ 0x28
   12e30:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12e32:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12e36:	a806      	add	r0, sp, #24
   12e38:	f011 faaa 	bl	24390 <memset>
   12e3c:	2601      	movs	r6, #1
   12e3e:	f10d 0315 	add.w	r3, sp, #21
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12e42:	a906      	add	r1, sp, #24
   12e44:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12e46:	930c      	str	r3, [sp, #48]	@ 0x30
   12e48:	e9cd 6a07 	strd	r6, sl, [sp, #28]
   12e4c:	9609      	str	r6, [sp, #36]	@ 0x24
   12e4e:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
   12e52:	f88d 6036 	strb.w	r6, [sp, #54]	@ 0x36
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12e56:	f00d f9f5 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12e5a:	2228      	movs	r2, #40	@ 0x28
   12e5c:	2100      	movs	r1, #0
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12e5e:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12e62:	a806      	add	r0, sp, #24
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12e64:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12e68:	f011 fa92 	bl	24390 <memset>
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12e6c:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12e6e:	9609      	str	r6, [sp, #36]	@ 0x24
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12e70:	a906      	add	r1, sp, #24
    am_hal_iom_transfer_t transfer =
   12e72:	e9cd 6b07 	strd	r6, fp, [sp, #28]
   12e76:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
   12e7a:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
   12e7e:	f88d 6036 	strb.w	r6, [sp, #54]	@ 0x36
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12e82:	f00d f9df 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12e86:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
        if (!isr_status && !rxlen)
   12e8a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12e8e:	2b00      	cmp	r3, #0
   12e90:	f040 80a4 	bne.w	12fdc <module_MAX14830_Handle_IRQ+0x240>
   12e94:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12e98:	2b00      	cmp	r3, #0
   12e9a:	f000 80a5 	beq.w	12fe8 <module_MAX14830_Handle_IRQ+0x24c>
    am_hal_iom_transfer_t transfer =
   12e9e:	f049 0b04 	orr.w	fp, r9, #4
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12ea2:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
   12ea6:	e00f      	b.n	12ec8 <module_MAX14830_Handle_IRQ+0x12c>
                if (lsr_status & (  MAX14830_LSR_RXNOISE    |
   12ea8:	f011 0f3d 	tst.w	r1, #61	@ 0x3d
   12eac:	f040 80b9 	bne.w	13022 <module_MAX14830_Handle_IRQ+0x286>
                BufferC_putc(&rxBuf[(uint8_t)port], regVal);
   12eb0:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12eb4:	f7fe f9e0 	bl	11278 <BufferC_putc>
                rxlen--;
   12eb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12ebc:	3b01      	subs	r3, #1
   12ebe:	b2db      	uxtb	r3, r3
   12ec0:	f88d 3014 	strb.w	r3, [sp, #20]
            while (rxlen > 0)
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d0ae      	beq.n	12e26 <module_MAX14830_Handle_IRQ+0x8a>
    am_hal_iom_transfer_t transfer =
   12ec8:	2228      	movs	r2, #40	@ 0x28
   12eca:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12ecc:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12ed0:	a806      	add	r0, sp, #24
   12ed2:	f011 fa5d 	bl	24390 <memset>
   12ed6:	2701      	movs	r7, #1
   12ed8:	f10d 0317 	add.w	r3, sp, #23
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12edc:	a906      	add	r1, sp, #24
   12ede:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12ee0:	930c      	str	r3, [sp, #48]	@ 0x30
   12ee2:	e9cd 7907 	strd	r7, r9, [sp, #28]
   12ee6:	9709      	str	r7, [sp, #36]	@ 0x24
   12ee8:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
   12eec:	f88d 7036 	strb.w	r7, [sp, #54]	@ 0x36
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12ef0:	f00d f9a8 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   12ef4:	2228      	movs	r2, #40	@ 0x28
   12ef6:	2100      	movs	r1, #0
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12ef8:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   12efc:	a806      	add	r0, sp, #24
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12efe:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12f02:	f011 fa45 	bl	24390 <memset>
   12f06:	f10d 0316 	add.w	r3, sp, #22
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f0a:	a906      	add	r1, sp, #24
   12f0c:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12f0e:	930c      	str	r3, [sp, #48]	@ 0x30
   12f10:	e9cd 7b07 	strd	r7, fp, [sp, #28]
   12f14:	9709      	str	r7, [sp, #36]	@ 0x24
   12f16:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
   12f1a:	f88d 7036 	strb.w	r7, [sp, #54]	@ 0x36
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f1e:	f00d f991 	bl	20244 <am_hal_iom_blocking_transfer>
                BufferC_putc(&rxBuf[(uint8_t)port], regVal);
   12f22:	9801      	ldr	r0, [sp, #4]
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12f24:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
                if (lsr_status & MAX14830_LSR_RXOVERRUN)
   12f28:	f89d 1016 	ldrb.w	r1, [sp, #22]
   12f2c:	078b      	lsls	r3, r1, #30
   12f2e:	d5bb      	bpl.n	12ea8 <module_MAX14830_Handle_IRQ+0x10c>
                    ARTEMIS_DEBUG_PRINTF("MAX14830 :: OVERFlow happened\n");
   12f30:	4843      	ldr	r0, [pc, #268]	@ (13040 <module_MAX14830_Handle_IRQ+0x2a4>)
   12f32:	f7fe f899 	bl	11068 <am_util_stdio_printf>
   12f36:	4842      	ldr	r0, [pc, #264]	@ (13040 <module_MAX14830_Handle_IRQ+0x2a4>)
   12f38:	f00b f81e 	bl	1df78 <datalogger_log_debug>
    am_hal_iom_transfer_t transfer =
   12f3c:	2228      	movs	r2, #40	@ 0x28
   12f3e:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12f40:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12f44:	a806      	add	r0, sp, #24
   12f46:	f011 fa23 	bl	24390 <memset>
   12f4a:	9b02      	ldr	r3, [sp, #8]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f4c:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12f4e:	9707      	str	r7, [sp, #28]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f50:	a906      	add	r1, sp, #24
    am_hal_iom_transfer_t transfer =
   12f52:	e9cd 3708 	strd	r3, r7, [sp, #32]
   12f56:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
   12f5a:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
   12f5e:	f88d 7036 	strb.w	r7, [sp, #54]	@ 0x36
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f62:	f00d f96f 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12f66:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
                    module_MAX14830_Read((eMAX18430_ComPort_t)port, MAX14830_RHR, rxlen, rxData);
   12f6a:	f89d b014 	ldrb.w	fp, [sp, #20]
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   12f6e:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   12f72:	2228      	movs	r2, #40	@ 0x28
   12f74:	2100      	movs	r1, #0
   12f76:	a806      	add	r0, sp, #24
   12f78:	f011 fa0a 	bl	24390 <memset>
   12f7c:	ab10      	add	r3, sp, #64	@ 0x40
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f7e:	6828      	ldr	r0, [r5, #0]
    am_hal_iom_transfer_t transfer =
   12f80:	930c      	str	r3, [sp, #48]	@ 0x30
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f82:	a906      	add	r1, sp, #24
    am_hal_iom_transfer_t transfer =
   12f84:	e9cd 7907 	strd	r7, r9, [sp, #28]
   12f88:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
   12f8c:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
   12f90:	f88d 7036 	strb.w	r7, [sp, #54]	@ 0x36
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   12f94:	f00d f956 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   12f98:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
                    while (rxlen > 0)
   12f9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12fa0:	2b00      	cmp	r3, #0
   12fa2:	f43f af40 	beq.w	12e26 <module_MAX14830_Handle_IRQ+0x8a>
                        BufferC_putc(&rxBuf[(uint8_t)port], rxData[i]);
   12fa6:	4e25      	ldr	r6, [pc, #148]	@ (1303c <module_MAX14830_Handle_IRQ+0x2a0>)
   12fa8:	9a03      	ldr	r2, [sp, #12]
   12faa:	f44f 7385 	mov.w	r3, #266	@ 0x10a
   12fae:	fb03 6602 	mla	r6, r3, r2, r6
   12fb2:	f04f 0b00 	mov.w	fp, #0
   12fb6:	ab30      	add	r3, sp, #192	@ 0xc0
   12fb8:	fa53 f38b 	uxtab	r3, r3, fp
   12fbc:	4630      	mov	r0, r6
   12fbe:	f813 1c80 	ldrb.w	r1, [r3, #-128]
   12fc2:	f7fe f959 	bl	11278 <BufferC_putc>
                        rxlen--;
   12fc6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12fca:	3b01      	subs	r3, #1
   12fcc:	b2db      	uxtb	r3, r3
                    while (rxlen > 0)
   12fce:	f10b 0b01 	add.w	fp, fp, #1
                        rxlen--;
   12fd2:	f88d 3014 	strb.w	r3, [sp, #20]
                    while (rxlen > 0)
   12fd6:	2b00      	cmp	r3, #0
   12fd8:	d1ed      	bne.n	12fb6 <module_MAX14830_Handle_IRQ+0x21a>
   12fda:	e724      	b.n	12e26 <module_MAX14830_Handle_IRQ+0x8a>
        if (rxlen > 0)
   12fdc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	f43f af24 	beq.w	12e2e <module_MAX14830_Handle_IRQ+0x92>
   12fe6:	e75a      	b.n	12e9e <module_MAX14830_Handle_IRQ+0x102>
            rx_bytes = true;
   12fe8:	4a16      	ldr	r2, [pc, #88]	@ (13044 <module_MAX14830_Handle_IRQ+0x2a8>)
   12fea:	f8dd c00c 	ldr.w	ip, [sp, #12]
   12fee:	7016      	strb	r6, [r2, #0]
            if ( gEventHandle != NULL )
   12ff0:	4a15      	ldr	r2, [pc, #84]	@ (13048 <module_MAX14830_Handle_IRQ+0x2ac>)
   12ff2:	6810      	ldr	r0, [r2, #0]
   12ff4:	b190      	cbz	r0, 1301c <module_MAX14830_Handle_IRQ+0x280>
                xResult = xEventGroupSetBitsFromISR(gEventHandle, (uint8_t)port + 0x01, &xHigherPriorityTaskWoken);
   12ff6:	aa06      	add	r2, sp, #24
   12ff8:	eb0c 0106 	add.w	r1, ip, r6
                xHigherPriorityTaskWoken = pdFALSE;
   12ffc:	9306      	str	r3, [sp, #24]
                xResult = xEventGroupSetBitsFromISR(gEventHandle, (uint8_t)port + 0x01, &xHigherPriorityTaskWoken);
   12ffe:	f7fa fd57 	bl	dab0 <xEventGroupSetBitsFromISR>
                if (xResult != pdFAIL)
   13002:	b158      	cbz	r0, 1301c <module_MAX14830_Handle_IRQ+0x280>
                    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13004:	9b06      	ldr	r3, [sp, #24]
   13006:	b14b      	cbz	r3, 1301c <module_MAX14830_Handle_IRQ+0x280>
   13008:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   1300c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   13010:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
   13014:	f3bf 8f4f 	dsb	sy
   13018:	f3bf 8f6f 	isb	sy
}
   1301c:	b031      	add	sp, #196	@ 0xc4
   1301e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    ARTEMIS_DEBUG_PRINTF("MAX14830 :: BYTE ERROR, lsr_status = 0x%02X\n", lsr_status);
   13022:	480a      	ldr	r0, [pc, #40]	@ (1304c <module_MAX14830_Handle_IRQ+0x2b0>)
   13024:	f7fe f820 	bl	11068 <am_util_stdio_printf>
   13028:	4808      	ldr	r0, [pc, #32]	@ (1304c <module_MAX14830_Handle_IRQ+0x2b0>)
   1302a:	f89d 1016 	ldrb.w	r1, [sp, #22]
   1302e:	f00a ffa3 	bl	1df78 <datalogger_log_debug>
                    break;
   13032:	e6f8      	b.n	12e26 <module_MAX14830_Handle_IRQ+0x8a>
   13034:	40010000 	.word	0x40010000
   13038:	1000b924 	.word	0x1000b924
   1303c:	1000b080 	.word	0x1000b080
   13040:	0002b044 	.word	0x0002b044
   13044:	1000b92c 	.word	0x1000b92c
   13048:	1000b928 	.word	0x1000b928
   1304c:	0002b064 	.word	0x0002b064

00013050 <am_gpio_isr>:
{
   13050:	b508      	push	{r3, lr}
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_S2U_NIRQ));
   13052:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
   13056:	2100      	movs	r1, #0
   13058:	f00c fcc0 	bl	1f9dc <am_hal_gpio_interrupt_clear>
}
   1305c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    module_MAX14830_Handle_IRQ();
   13060:	f7ff be9c 	b.w	12d9c <module_MAX14830_Handle_IRQ>

00013064 <MAX14830_Set_baudrate>:
{
   13064:	ee07 1a90 	vmov	s15, r1
    float D = MAX14830_XTAL_FREQ / (16 * (float)baudrate );
   13068:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1306c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
   13070:	ee67 7aa6 	vmul.f32	s15, s15, s13
   13074:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 13174 <MAX14830_Set_baudrate+0x110>
   13078:	ee86 7a27 	vdiv.f32	s14, s12, s15
{
   1307c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13080:	4604      	mov	r4, r0
   13082:	b08e      	sub	sp, #56	@ 0x38
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   13084:	4e3c      	ldr	r6, [pc, #240]	@ (13178 <MAX14830_Set_baudrate+0x114>)
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13086:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 13180 <MAX14830_Set_baudrate+0x11c>
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   1308a:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
    am_hal_iom_transfer_t transfer =
   1308e:	f04f 0a28 	mov.w	sl, #40	@ 0x28
    uint8_t cmd = MAX14830_SPI_WRITE_BIT | (port << 5);
   13092:	0164      	lsls	r4, r4, #5
   13094:	b2e4      	uxtb	r4, r4
    uint32_t DIV = (uint32_t)trunc(D) ;
   13096:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    am_hal_iom_transfer_t transfer =
   1309a:	2501      	movs	r5, #1
    uint32_t DIV = (uint32_t)trunc(D) ;
   1309c:	ee17 7a90 	vmov	r7, s15
    uint32_t FRACT = (uint32_t) round(16 * (D - DIV));
   130a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   130a4:	ee37 7a67 	vsub.f32	s14, s14, s15
   130a8:	ee67 7a26 	vmul.f32	s15, s14, s13
   130ac:	ee17 0a90 	vmov	r0, s15
   130b0:	f7f9 f98a 	bl	c3c8 <__aeabi_f2d>
   130b4:	ec41 0b10 	vmov	d0, r0, r1
   130b8:	f016 fcda 	bl	29a70 <round>
   130bc:	ec51 0b10 	vmov	r0, r1, d0
   130c0:	f7f9 fc74 	bl	c9ac <__aeabi_d2uiz>
    uint32_t DIVLSB = (DIV & 0x000000FF);
   130c4:	b2fb      	uxtb	r3, r7
    uint32_t DIVMSB = (DIV & 0x00000100) >> 8;
   130c6:	f3c7 2200 	ubfx	r2, r7, #8, #1
    FRACT = FRACT & 0x0000000F;
   130ca:	f000 000f 	and.w	r0, r0, #15
    uint32_t DIVLSB = (DIV & 0x000000FF);
   130ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    FRACT = FRACT & 0x0000000F;
   130d2:	9001      	str	r0, [sp, #4]
    am_hal_iom_transfer_t transfer =
   130d4:	4652      	mov	r2, sl
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   130d6:	f8c6 8098 	str.w	r8, [r6, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   130da:	2100      	movs	r1, #0
   130dc:	a804      	add	r0, sp, #16
   130de:	f011 f957 	bl	24390 <memset>
   130e2:	f044 039c 	orr.w	r3, r4, #156	@ 0x9c
   130e6:	9306      	str	r3, [sp, #24]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   130e8:	a904      	add	r1, sp, #16
    am_hal_iom_transfer_t transfer =
   130ea:	ab03      	add	r3, sp, #12
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   130ec:	f8d9 0000 	ldr.w	r0, [r9]
    am_hal_iom_transfer_t transfer =
   130f0:	9309      	str	r3, [sp, #36]	@ 0x24
   130f2:	9505      	str	r5, [sp, #20]
   130f4:	9507      	str	r5, [sp, #28]
   130f6:	f88d 502e 	strb.w	r5, [sp, #46]	@ 0x2e
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   130fa:	f00d f8a3 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_iom_transfer_t transfer =
   130fe:	4652      	mov	r2, sl
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   13100:	f8c6 8090 	str.w	r8, [r6, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   13104:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   13106:	f8c6 8098 	str.w	r8, [r6, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   1310a:	a804      	add	r0, sp, #16
   1310c:	f011 f940 	bl	24390 <memset>
   13110:	f044 039d 	orr.w	r3, r4, #157	@ 0x9d
   13114:	9306      	str	r3, [sp, #24]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13116:	a904      	add	r1, sp, #16
    am_hal_iom_transfer_t transfer =
   13118:	ab02      	add	r3, sp, #8
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1311a:	f8d9 0000 	ldr.w	r0, [r9]
    am_hal_iom_transfer_t transfer =
   1311e:	9309      	str	r3, [sp, #36]	@ 0x24
   13120:	9505      	str	r5, [sp, #20]
   13122:	9507      	str	r5, [sp, #28]
   13124:	f88d 502e 	strb.w	r5, [sp, #46]	@ 0x2e
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13128:	f00d f88c 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1312c:	f8c6 8090 	str.w	r8, [r6, #144]	@ 0x90
    am_hal_iom_transfer_t transfer =
   13130:	4652      	mov	r2, sl
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   13132:	f8c6 8098 	str.w	r8, [r6, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   13136:	2100      	movs	r1, #0
   13138:	a804      	add	r0, sp, #16
   1313a:	f011 f929 	bl	24390 <memset>
   1313e:	f044 049b 	orr.w	r4, r4, #155	@ 0x9b
   13142:	ab01      	add	r3, sp, #4
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13144:	f8d9 0000 	ldr.w	r0, [r9]
    am_hal_iom_transfer_t transfer =
   13148:	9309      	str	r3, [sp, #36]	@ 0x24
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1314a:	a904      	add	r1, sp, #16
    am_hal_iom_transfer_t transfer =
   1314c:	9406      	str	r4, [sp, #24]
   1314e:	9505      	str	r5, [sp, #20]
   13150:	9507      	str	r5, [sp, #28]
   13152:	f88d 502e 	strb.w	r5, [sp, #46]	@ 0x2e
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13156:	f00d f875 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   1315a:	f8c6 8090 	str.w	r8, [r6, #144]	@ 0x90
    return ((16*MAX14830_XTAL_FREQ) / (16 * (16*DIV + FRACT)) );
   1315e:	9b01      	ldr	r3, [sp, #4]
   13160:	4806      	ldr	r0, [pc, #24]	@ (1317c <MAX14830_Set_baudrate+0x118>)
   13162:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   13166:	011b      	lsls	r3, r3, #4
}
   13168:	fbb0 f0f3 	udiv	r0, r0, r3
   1316c:	b00e      	add	sp, #56	@ 0x38
   1316e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13172:	bf00      	nop
   13174:	4a742400 	.word	0x4a742400
   13178:	40010000 	.word	0x40010000
   1317c:	03d09000 	.word	0x03d09000
   13180:	1000b924 	.word	0x1000b924

00013184 <MAX14830_UART_Write>:
{
   13184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13188:	b08a      	sub	sp, #40	@ 0x28
   1318a:	4616      	mov	r6, r2
   1318c:	4680      	mov	r8, r0
    sprintf((char*)taskDesc, "S2U Write CH%u", (uint8_t) port);
   1318e:	4602      	mov	r2, r0
{
   13190:	460d      	mov	r5, r1
    sprintf((char*)taskDesc, "S2U Write CH%u", (uint8_t) port);
   13192:	a802      	add	r0, sp, #8
   13194:	490f      	ldr	r1, [pc, #60]	@ (131d4 <MAX14830_UART_Write+0x50>)
   13196:	f010 ffaf 	bl	240f8 <sprintf>
    for(uint8_t i=0; i < len; i++)
   1319a:	b176      	cbz	r6, 131ba <MAX14830_UART_Write+0x36>
        BufferC_putc(&txBuf[(uint8_t) port], *data++);
   1319c:	4f0e      	ldr	r7, [pc, #56]	@ (131d8 <MAX14830_UART_Write+0x54>)
   1319e:	f44f 7385 	mov.w	r3, #266	@ 0x10a
   131a2:	fb03 7708 	mla	r7, r3, r8, r7
    for(uint8_t i=0; i < len; i++)
   131a6:	2400      	movs	r4, #0
   131a8:	3401      	adds	r4, #1
        BufferC_putc(&txBuf[(uint8_t) port], *data++);
   131aa:	f815 1b01 	ldrb.w	r1, [r5], #1
   131ae:	4638      	mov	r0, r7
    for(uint8_t i=0; i < len; i++)
   131b0:	b2e4      	uxtb	r4, r4
        BufferC_putc(&txBuf[(uint8_t) port], *data++);
   131b2:	f7fe f861 	bl	11278 <BufferC_putc>
    for(uint8_t i=0; i < len; i++)
   131b6:	42b4      	cmp	r4, r6
   131b8:	d3f6      	bcc.n	131a8 <MAX14830_UART_Write+0x24>
    xTaskCreate(module_MAX14830_Write_Task,
   131ba:	2200      	movs	r2, #0
   131bc:	2305      	movs	r3, #5
   131be:	e9cd 3200 	strd	r3, r2, [sp]
   131c2:	a902      	add	r1, sp, #8
   131c4:	4643      	mov	r3, r8
   131c6:	2280      	movs	r2, #128	@ 0x80
   131c8:	4804      	ldr	r0, [pc, #16]	@ (131dc <MAX14830_UART_Write+0x58>)
   131ca:	f7fb fc01 	bl	e9d0 <xTaskCreate>
}
   131ce:	b00a      	add	sp, #40	@ 0x28
   131d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131d4:	0002b094 	.word	0x0002b094
   131d8:	1000b4a8 	.word	0x1000b4a8
   131dc:	00011ff1 	.word	0x00011ff1

000131e0 <MAX14830_UART_Write_direct>:
{
   131e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sCircularBufferC_t *pBuf = &txBuf[(uint8_t)port];
   131e4:	4d22      	ldr	r5, [pc, #136]	@ (13270 <MAX14830_UART_Write_direct+0x90>)
   131e6:	f44f 7385 	mov.w	r3, #266	@ 0x10a
{
   131ea:	b08a      	sub	sp, #40	@ 0x28
   131ec:	4607      	mov	r7, r0
    sCircularBufferC_t *pBuf = &txBuf[(uint8_t)port];
   131ee:	fb03 5500 	mla	r5, r3, r0, r5
    for(uint8_t i=0; i < len; i++)
   131f2:	b15a      	cbz	r2, 1320c <MAX14830_UART_Write_direct+0x2c>
   131f4:	460e      	mov	r6, r1
   131f6:	4690      	mov	r8, r2
   131f8:	2400      	movs	r4, #0
   131fa:	3401      	adds	r4, #1
        BufferC_putc(&txBuf[(uint8_t) port], *data++);
   131fc:	f816 1b01 	ldrb.w	r1, [r6], #1
   13200:	4628      	mov	r0, r5
    for(uint8_t i=0; i < len; i++)
   13202:	b2e4      	uxtb	r4, r4
        BufferC_putc(&txBuf[(uint8_t) port], *data++);
   13204:	f7fe f838 	bl	11278 <BufferC_putc>
    for(uint8_t i=0; i < len; i++)
   13208:	4544      	cmp	r4, r8
   1320a:	d3f6      	bcc.n	131fa <MAX14830_UART_Write_direct+0x1a>
    uint8_t cmd = MAX14830_SPI_WRITE_BIT | (port << 5);
   1320c:	017f      	lsls	r7, r7, #5
   1320e:	f067 077f 	orn	r7, r7, #127	@ 0x7f
        xLen = BufferC_gets(pBuf, (char*)xfer_data, XFER_DATA_SIZE);
   13212:	f8df a060 	ldr.w	sl, [pc, #96]	@ 13274 <MAX14830_UART_Write_direct+0x94>
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   13216:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 13278 <MAX14830_UART_Write_direct+0x98>
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1321a:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 1327c <MAX14830_UART_Write_direct+0x9c>
    am_hal_iom_transfer_t transfer =
   1321e:	b2ff      	uxtb	r7, r7
   13220:	e01a      	b.n	13258 <MAX14830_UART_Write_direct+0x78>
        xLen = BufferC_gets(pBuf, (char*)xfer_data, XFER_DATA_SIZE);
   13222:	f7fe f883 	bl	1132c <BufferC_gets>
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   13226:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
        xLen = BufferC_gets(pBuf, (char*)xfer_data, XFER_DATA_SIZE);
   1322a:	4604      	mov	r4, r0
    am_hal_iom_transfer_t transfer =
   1322c:	2228      	movs	r2, #40	@ 0x28
   1322e:	2100      	movs	r1, #0
    am_hal_gpio_output_clear(AM_BSP_GPIO_IOM3_CS);
   13230:	f8c8 6098 	str.w	r6, [r8, #152]	@ 0x98
    am_hal_iom_transfer_t transfer =
   13234:	4668      	mov	r0, sp
   13236:	f011 f8ab 	bl	24390 <memset>
   1323a:	2301      	movs	r3, #1
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   1323c:	f8d9 0000 	ldr.w	r0, [r9]
    am_hal_iom_transfer_t transfer =
   13240:	9403      	str	r4, [sp, #12]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13242:	4669      	mov	r1, sp
    am_hal_iom_transfer_t transfer =
   13244:	e9cd 3701 	strd	r3, r7, [sp, #4]
   13248:	f8cd a014 	str.w	sl, [sp, #20]
   1324c:	f88d 301e 	strb.w	r3, [sp, #30]
    am_hal_iom_blocking_transfer(pIomHandle, &transfer);
   13250:	f00c fff8 	bl	20244 <am_hal_iom_blocking_transfer>
    am_hal_gpio_output_set(AM_BSP_GPIO_IOM3_CS);
   13254:	f8c8 6090 	str.w	r6, [r8, #144]	@ 0x90
    while(BufferC_Get_Size(pBuf))
   13258:	4628      	mov	r0, r5
   1325a:	f7fe f809 	bl	11270 <BufferC_Get_Size>
   1325e:	4603      	mov	r3, r0
        xLen = BufferC_gets(pBuf, (char*)xfer_data, XFER_DATA_SIZE);
   13260:	4904      	ldr	r1, [pc, #16]	@ (13274 <MAX14830_UART_Write_direct+0x94>)
   13262:	2240      	movs	r2, #64	@ 0x40
   13264:	4628      	mov	r0, r5
    while(BufferC_Get_Size(pBuf))
   13266:	2b00      	cmp	r3, #0
   13268:	d1db      	bne.n	13222 <MAX14830_UART_Write_direct+0x42>
}
   1326a:	b00a      	add	sp, #40	@ 0x28
   1326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13270:	1000b4a8 	.word	0x1000b4a8
   13274:	1000b8d0 	.word	0x1000b8d0
   13278:	40010000 	.word	0x40010000
   1327c:	1000b924 	.word	0x1000b924

00013280 <MAX14830_UART_Read>:
{
   13280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sCircularBufferC_t *pBuf = &rxBuf[(uint8_t)port];
   13284:	4d16      	ldr	r5, [pc, #88]	@ (132e0 <MAX14830_UART_Read+0x60>)
   13286:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 132e4 <MAX14830_UART_Read+0x64>
   1328a:	f44f 7385 	mov.w	r3, #266	@ 0x10a
{
   1328e:	b082      	sub	sp, #8
   13290:	4604      	mov	r4, r0
   13292:	460f      	mov	r7, r1
    sCircularBufferC_t *pBuf = &rxBuf[(uint8_t)port];
   13294:	fb03 5500 	mla	r5, r3, r0, r5
        uint8_t Port = xEventGroupWaitBits(gEventHandle, 0x07, pdTRUE, pdFALSE, xDelay2000ms);
   13298:	f44f 66fa 	mov.w	r6, #2000	@ 0x7d0
   1329c:	f8d8 0000 	ldr.w	r0, [r8]
   132a0:	9600      	str	r6, [sp, #0]
   132a2:	2300      	movs	r3, #0
   132a4:	2201      	movs	r2, #1
   132a6:	2107      	movs	r1, #7
   132a8:	f7fa faec 	bl	d884 <xEventGroupWaitBits>
        Port = (Port-1);
   132ac:	1e43      	subs	r3, r0, #1
        if (Port == (uint8_t)port)
   132ae:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
   132b2:	429c      	cmp	r4, r3
   132b4:	d1f2      	bne.n	1329c <MAX14830_UART_Read+0x1c>
            vTaskDelay(pdMS_TO_TICKS(10UL));
   132b6:	200a      	movs	r0, #10
   132b8:	f7fc f894 	bl	f3e4 <vTaskDelay>
    uint32_t len=0;
   132bc:	2400      	movs	r4, #0
            while( (BufferC_Get_Size(pBuf) > 0) )
   132be:	e004      	b.n	132ca <MAX14830_UART_Read+0x4a>
                BufferC_getc(pBuf, (char*)pData);
   132c0:	4631      	mov	r1, r6
   132c2:	4628      	mov	r0, r5
   132c4:	f7fe f804 	bl	112d0 <BufferC_getc>
                len++;
   132c8:	3401      	adds	r4, #1
            while( (BufferC_Get_Size(pBuf) > 0) )
   132ca:	4628      	mov	r0, r5
   132cc:	193e      	adds	r6, r7, r4
   132ce:	f7fd ffcf 	bl	11270 <BufferC_Get_Size>
   132d2:	2800      	cmp	r0, #0
   132d4:	d1f4      	bne.n	132c0 <MAX14830_UART_Read+0x40>
}
   132d6:	4620      	mov	r0, r4
   132d8:	b002      	add	sp, #8
   132da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132de:	bf00      	nop
   132e0:	1000b080 	.word	0x1000b080
   132e4:	1000b928 	.word	0x1000b928

000132e8 <MAX14830_UART_Read_direct>:
{
   132e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sCircularBufferC_t *pBuf = &rxBuf[(uint8_t)port];
   132ec:	4e10      	ldr	r6, [pc, #64]	@ (13330 <MAX14830_UART_Read_direct+0x48>)
    while(!rx_bytes && cnt++ < 500000);
   132ee:	4c11      	ldr	r4, [pc, #68]	@ (13334 <MAX14830_UART_Read_direct+0x4c>)
   132f0:	4f11      	ldr	r7, [pc, #68]	@ (13338 <MAX14830_UART_Read_direct+0x50>)
    sCircularBufferC_t *pBuf = &rxBuf[(uint8_t)port];
   132f2:	f44f 7385 	mov.w	r3, #266	@ 0x10a
{
   132f6:	4688      	mov	r8, r1
    sCircularBufferC_t *pBuf = &rxBuf[(uint8_t)port];
   132f8:	fb03 6600 	mla	r6, r3, r0, r6
    while(!rx_bytes && cnt++ < 500000);
   132fc:	e001      	b.n	13302 <MAX14830_UART_Read_direct+0x1a>
   132fe:	3c01      	subs	r4, #1
   13300:	d007      	beq.n	13312 <MAX14830_UART_Read_direct+0x2a>
   13302:	783b      	ldrb	r3, [r7, #0]
   13304:	2b00      	cmp	r3, #0
   13306:	d0fa      	beq.n	132fe <MAX14830_UART_Read_direct+0x16>
   13308:	2400      	movs	r4, #0
   1330a:	e002      	b.n	13312 <MAX14830_UART_Read_direct+0x2a>
        BufferC_getc(pBuf, (char*)pData);
   1330c:	f7fd ffe0 	bl	112d0 <BufferC_getc>
   13310:	462c      	mov	r4, r5
    while( (BufferC_Get_Size(pBuf) > 0) )
   13312:	4630      	mov	r0, r6
   13314:	f7fd ffac 	bl	11270 <BufferC_Get_Size>
   13318:	eb08 0504 	add.w	r5, r8, r4
   1331c:	4603      	mov	r3, r0
        BufferC_getc(pBuf, (char*)pData);
   1331e:	4629      	mov	r1, r5
   13320:	4630      	mov	r0, r6
    while( (BufferC_Get_Size(pBuf) > 0) )
   13322:	1c65      	adds	r5, r4, #1
   13324:	2b00      	cmp	r3, #0
   13326:	d1f1      	bne.n	1330c <MAX14830_UART_Read_direct+0x24>
    rx_bytes = false;
   13328:	703b      	strb	r3, [r7, #0]
}
   1332a:	b2a0      	uxth	r0, r4
   1332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13330:	1000b080 	.word	0x1000b080
   13334:	0007a121 	.word	0x0007a121
   13338:	1000b92c 	.word	0x1000b92c
   1333c:	00000000 	.word	0x00000000

00013340 <task_move_piston_to_length>:
    vTaskDelay(xDelay100ms);
    vTaskDelete(NULL);
}

void task_move_piston_to_length(void)
{
   13340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(piston.rtos.rate != 0);
   13344:	4cd0      	ldr	r4, [pc, #832]	@ (13688 <task_move_piston_to_length+0x348>)
{
   13346:	ed2d 8b02 	vpush	{d8}
    assert(piston.rtos.rate != 0);
   1334a:	8823      	ldrh	r3, [r4, #0]
{
   1334c:	b089      	sub	sp, #36	@ 0x24
    assert(piston.rtos.rate != 0);
   1334e:	2b00      	cmp	r3, #0
   13350:	f000 818c 	beq.w	1366c <task_move_piston_to_length+0x32c>
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   13354:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8

static bool module_pis_trv_eng(void)
{
    uint8_t addr = PISTON_I2C_RW_TRV_ENG;

    uint8_t data = 0;
   13358:	2500      	movs	r5, #0
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   1335a:	fbb1 f3f3 	udiv	r3, r1, r3
    artemis_piston_i2c_read(addr, &data, 1);
   1335e:	2201      	movs	r2, #1
   13360:	a906      	add	r1, sp, #24
   13362:	2061      	movs	r0, #97	@ 0x61
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   13364:	9305      	str	r3, [sp, #20]
    uint8_t data = 0;
   13366:	f88d 5018 	strb.w	r5, [sp, #24]
    artemis_piston_i2c_read(addr, &data, 1);
   1336a:	f008 fb1d 	bl	1b9a8 <artemis_piston_i2c_read>

    return (bool) data;
   1336e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    if(module_pis_trv_eng() == true)
   13372:	2b00      	cmp	r3, #0
   13374:	f040 8170 	bne.w	13658 <task_move_piston_to_length+0x318>
    vTaskDelay(xDelay50ms);
   13378:	2032      	movs	r0, #50	@ 0x32
   1337a:	f7fc f833 	bl	f3e4 <vTaskDelay>
    piston.fLength = length;
   1337e:	68e3      	ldr	r3, [r4, #12]
        v[i+1] = piston.u32Length >> ((i)*8) & 0xFF;
   13380:	f88d 3019 	strb.w	r3, [sp, #25]
    v[0] = addr;
   13384:	2220      	movs	r2, #32
   13386:	f88d 2018 	strb.w	r2, [sp, #24]
        v[i+1] = piston.u32Length >> ((i)*8) & 0xFF;
   1338a:	0a1a      	lsrs	r2, r3, #8
    artemis_piston_set_write_mode(true);
   1338c:	2001      	movs	r0, #1
        v[i+1] = piston.u32Length >> ((i)*8) & 0xFF;
   1338e:	f88d 201a 	strb.w	r2, [sp, #26]
   13392:	0c1a      	lsrs	r2, r3, #16
   13394:	0e1b      	lsrs	r3, r3, #24
   13396:	f88d 301c 	strb.w	r3, [sp, #28]
   1339a:	f88d 201b 	strb.w	r2, [sp, #27]
    artemis_piston_set_write_mode(true);
   1339e:	f008 fb41 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(v, 5, true);
   133a2:	2201      	movs	r2, #1
   133a4:	2105      	movs	r1, #5
   133a6:	a806      	add	r0, sp, #24
   133a8:	f008 faba 	bl	1b920 <artemis_piston_i2c_send_msg>
    pistonRun = true;
   133ac:	4db7      	ldr	r5, [pc, #732]	@ (1368c <task_move_piston_to_length+0x34c>)
    vTaskDelay(xDelay250ms);
   133ae:	20fa      	movs	r0, #250	@ 0xfa
   133b0:	f7fc f818 	bl	f3e4 <vTaskDelay>
    pistonRun = true;
   133b4:	2301      	movs	r3, #1
   133b6:	702b      	strb	r3, [r5, #0]
    while(pistonRun)
   133b8:	782b      	ldrb	r3, [r5, #0]
   133ba:	2b00      	cmp	r3, #0
   133bc:	d052      	beq.n	13464 <task_move_piston_to_length+0x124>
                if (piston.length >=(piston.setpoint_l - PISTON_LENGTH_DIFF_MAX) &&
   133be:	ed9f 8ab4 	vldr	s16, [pc, #720]	@ 13690 <task_move_piston_to_length+0x350>
                ARTEMIS_DEBUG_PRINTF("PISTON :: Length in moving = %0.5f\n", length);
   133c2:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 136c0 <task_move_piston_to_length+0x380>
    uint8_t count_reset = 0;
   133c6:	f04f 0800 	mov.w	r8, #0
    artemis_piston_i2c_read(addr, &data, 1);
   133ca:	2061      	movs	r0, #97	@ 0x61
    uint8_t data = 0;
   133cc:	2700      	movs	r7, #0
    artemis_piston_i2c_read(addr, &data, 1);
   133ce:	2201      	movs	r2, #1
   133d0:	a906      	add	r1, sp, #24
    uint8_t data = 0;
   133d2:	f88d 7018 	strb.w	r7, [sp, #24]
    artemis_piston_i2c_read(addr, &data, 1);
   133d6:	f008 fae7 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   133da:	f89d 6018 	ldrb.w	r6, [sp, #24]
                vTaskDelay(xDelay250ms);
   133de:	20fa      	movs	r0, #250	@ 0xfa
            if(module_pis_trv_eng() == false)
   133e0:	2e00      	cmp	r6, #0
   133e2:	f040 80a8 	bne.w	13536 <task_move_piston_to_length+0x1f6>
                vTaskDelay(xDelay250ms);
   133e6:	f7fb fffd 	bl	f3e4 <vTaskDelay>
static float module_pis_get_length(void)
{
    uint8_t addr = PISTON_I2C_R_LENGTH_TOTAL;
    uint8_t data[4] = {0};

    artemis_piston_i2c_read(addr, data, 4);
   133ea:	2204      	movs	r2, #4
   133ec:	2028      	movs	r0, #40	@ 0x28
   133ee:	a906      	add	r1, sp, #24
    uint8_t data[4] = {0};
   133f0:	9606      	str	r6, [sp, #24]
    artemis_piston_i2c_read(addr, data, 4);
   133f2:	f008 fad9 	bl	1b9a8 <artemis_piston_i2c_read>
    for(uint8_t i=0; i<4; i++)
    {
        pis.u32Length |= data[i] << (8*i);
    }

    return pis.fLength;
   133f6:	9f06      	ldr	r7, [sp, #24]
                ARTEMIS_DEBUG_PRINTF("PISTON :: Length = %0.5f\n", length);
   133f8:	4638      	mov	r0, r7
   133fa:	f7f8 ffe5 	bl	c3c8 <__aeabi_f2d>
   133fe:	4682      	mov	sl, r0
   13400:	468b      	mov	fp, r1
   13402:	460b      	mov	r3, r1
   13404:	4652      	mov	r2, sl
   13406:	48a3      	ldr	r0, [pc, #652]	@ (13694 <task_move_piston_to_length+0x354>)
   13408:	f7fd fe2e 	bl	11068 <am_util_stdio_printf>
   1340c:	48a1      	ldr	r0, [pc, #644]	@ (13694 <task_move_piston_to_length+0x354>)
   1340e:	4652      	mov	r2, sl
   13410:	465b      	mov	r3, fp
   13412:	f00a fdb1 	bl	1df78 <datalogger_log_debug>
                taskENTER_CRITICAL();
   13416:	f7f9 fe55 	bl	d0c4 <vPortEnterCritical>
                piston.length = length;
   1341a:	6167      	str	r7, [r4, #20]
                taskEXIT_CRITICAL();
   1341c:	f7f9 fe7e 	bl	d11c <vPortExitCritical>
                if (piston.length >=(piston.setpoint_l - PISTON_LENGTH_DIFF_MAX) &&
   13420:	edd4 7a03 	vldr	s15, [r4, #12]
   13424:	ed94 7a05 	vldr	s14, [r4, #20]
   13428:	ee77 6ac8 	vsub.f32	s13, s15, s16
   1342c:	eeb4 7ae6 	vcmpe.f32	s14, s13
   13430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13434:	db07      	blt.n	13446 <task_move_piston_to_length+0x106>
                    piston.length <=(piston.setpoint_l + PISTON_LENGTH_DIFF_MAX))
   13436:	ee77 7a88 	vadd.f32	s15, s15, s16
                if (piston.length >=(piston.setpoint_l - PISTON_LENGTH_DIFF_MAX) &&
   1343a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13442:	f240 80ea 	bls.w	1361a <task_move_piston_to_length+0x2da>
                    count_reset++;
   13446:	f108 0801 	add.w	r8, r8, #1
   1344a:	fa5f f888 	uxtb.w	r8, r8
                    if (count_reset > 4)
   1344e:	f1b8 0f04 	cmp.w	r8, #4
   13452:	f200 809b 	bhi.w	1358c <task_move_piston_to_length+0x24c>
        if (pistonRun)
   13456:	782b      	ldrb	r3, [r5, #0]
   13458:	2b00      	cmp	r3, #0
   1345a:	f040 808f 	bne.w	1357c <task_move_piston_to_length+0x23c>
    while(pistonRun)
   1345e:	782b      	ldrb	r3, [r5, #0]
   13460:	2b00      	cmp	r3, #0
   13462:	d1b2      	bne.n	133ca <task_move_piston_to_length+0x8a>
    vTaskDelay(xDelay100ms);
   13464:	2064      	movs	r0, #100	@ 0x64
   13466:	f7fb ffbd 	bl	f3e4 <vTaskDelay>
    uint8_t data[4] = {0};
   1346a:	2300      	movs	r3, #0
    artemis_piston_i2c_read(addr, data, 4);
   1346c:	2204      	movs	r2, #4
   1346e:	a906      	add	r1, sp, #24
   13470:	2028      	movs	r0, #40	@ 0x28
    uint8_t data[4] = {0};
   13472:	9306      	str	r3, [sp, #24]
    artemis_piston_i2c_read(addr, data, 4);
   13474:	f008 fa98 	bl	1b9a8 <artemis_piston_i2c_read>
        pis.u32Length |= data[i] << (8*i);
   13478:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1347c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   13480:	f89d 1018 	ldrb.w	r1, [sp, #24]
   13484:	f89d 201b 	ldrb.w	r2, [sp, #27]
   13488:	041b      	lsls	r3, r3, #16
   1348a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1348e:	430b      	orrs	r3, r1
    return pis.fLength;
   13490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    ARTEMIS_DEBUG_PRINTF("PISTON :: Length updated = %0.5f\n", length);
   13494:	4618      	mov	r0, r3
    return pis.fLength;
   13496:	ee08 3a10 	vmov	s16, r3
    ARTEMIS_DEBUG_PRINTF("PISTON :: Length updated = %0.5f\n", length);
   1349a:	f7f8 ff95 	bl	c3c8 <__aeabi_f2d>
   1349e:	460f      	mov	r7, r1
   134a0:	460b      	mov	r3, r1
   134a2:	4602      	mov	r2, r0
   134a4:	4606      	mov	r6, r0
   134a6:	487c      	ldr	r0, [pc, #496]	@ (13698 <task_move_piston_to_length+0x358>)
   134a8:	f7fd fdde 	bl	11068 <am_util_stdio_printf>
   134ac:	487a      	ldr	r0, [pc, #488]	@ (13698 <task_move_piston_to_length+0x358>)
   134ae:	4632      	mov	r2, r6
   134b0:	463b      	mov	r3, r7
   134b2:	f00a fd61 	bl	1df78 <datalogger_log_debug>
    taskENTER_CRITICAL();
   134b6:	f7f9 fe05 	bl	d0c4 <vPortEnterCritical>
    piston.length = length;
   134ba:	ed84 8a05 	vstr	s16, [r4, #20]
    taskEXIT_CRITICAL();
   134be:	f7f9 fe2d 	bl	d11c <vPortExitCritical>
    if( fabs(length - piston.setpoint_l) >= PISTON_LENGTH_DIFF_MAX )
   134c2:	edd4 7a03 	vldr	s15, [r4, #12]
   134c6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 13690 <task_move_piston_to_length+0x350>
   134ca:	ee78 7a67 	vsub.f32	s15, s16, s15
   134ce:	eef0 6ae7 	vabs.f32	s13, s15
   134d2:	eef4 6ac7 	vcmpe.f32	s13, s14
   134d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134da:	f280 80a6 	bge.w	1362a <task_move_piston_to_length+0x2ea>
        ARTEMIS_DEBUG_PRINTF("PISTON :: SUCCESS, Length = %0.5f, diff = %0.5f, max_diff = %0.5f\n",
   134de:	f20f 19a0 	addw	r9, pc, #416	@ 0x1a0
   134e2:	e9d9 8900 	ldrd	r8, r9, [r9]
   134e6:	ee17 0a90 	vmov	r0, s15
   134ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
   134ee:	f7f8 ff6b 	bl	c3c8 <__aeabi_f2d>
   134f2:	4632      	mov	r2, r6
   134f4:	e9cd 0100 	strd	r0, r1, [sp]
   134f8:	463b      	mov	r3, r7
   134fa:	4868      	ldr	r0, [pc, #416]	@ (1369c <task_move_piston_to_length+0x35c>)
   134fc:	f7fd fdb4 	bl	11068 <am_util_stdio_printf>
   13500:	edd4 7a03 	vldr	s15, [r4, #12]
   13504:	ee78 7a67 	vsub.f32	s15, s16, s15
   13508:	e9cd 8902 	strd	r8, r9, [sp, #8]
   1350c:	ee17 0a90 	vmov	r0, s15
   13510:	f7f8 ff5a 	bl	c3c8 <__aeabi_f2d>
   13514:	4602      	mov	r2, r0
   13516:	460b      	mov	r3, r1
   13518:	e9cd 2300 	strd	r2, r3, [sp]
   1351c:	485f      	ldr	r0, [pc, #380]	@ (1369c <task_move_piston_to_length+0x35c>)
   1351e:	4632      	mov	r2, r6
   13520:	463b      	mov	r3, r7
   13522:	f00a fd29 	bl	1df78 <datalogger_log_debug>
    vTaskDelete(NULL);
   13526:	2000      	movs	r0, #0
}
   13528:	b009      	add	sp, #36	@ 0x24
   1352a:	ecbd 8b02 	vpop	{d8}
   1352e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vTaskDelete(NULL);
   13532:	f7fb bb43 	b.w	ebbc <vTaskDelete>
                vTaskDelay(xDelay250ms);
   13536:	f7fb ff55 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, data, 4);
   1353a:	2204      	movs	r2, #4
   1353c:	2028      	movs	r0, #40	@ 0x28
   1353e:	a906      	add	r1, sp, #24
    uint8_t data[4] = {0};
   13540:	9706      	str	r7, [sp, #24]
    artemis_piston_i2c_read(addr, data, 4);
   13542:	f008 fa31 	bl	1b9a8 <artemis_piston_i2c_read>
    return pis.fLength;
   13546:	f8dd a018 	ldr.w	sl, [sp, #24]
                ARTEMIS_DEBUG_PRINTF("PISTON :: Length in moving = %0.5f\n", length);
   1354a:	4650      	mov	r0, sl
   1354c:	f7f8 ff3c 	bl	c3c8 <__aeabi_f2d>
   13550:	460f      	mov	r7, r1
   13552:	460b      	mov	r3, r1
   13554:	4602      	mov	r2, r0
   13556:	4606      	mov	r6, r0
   13558:	4648      	mov	r0, r9
   1355a:	f7fd fd85 	bl	11068 <am_util_stdio_printf>
   1355e:	463b      	mov	r3, r7
   13560:	4632      	mov	r2, r6
   13562:	4648      	mov	r0, r9
   13564:	f00a fd08 	bl	1df78 <datalogger_log_debug>
                taskENTER_CRITICAL();
   13568:	f7f9 fdac 	bl	d0c4 <vPortEnterCritical>
                piston.length = length;
   1356c:	f8c4 a014 	str.w	sl, [r4, #20]
                taskEXIT_CRITICAL();
   13570:	f7f9 fdd4 	bl	d11c <vPortExitCritical>
        if (pistonRun)
   13574:	782b      	ldrb	r3, [r5, #0]
   13576:	2b00      	cmp	r3, #0
   13578:	f43f af71 	beq.w	1345e <task_move_piston_to_length+0x11e>
            vTaskDelay(period);
   1357c:	9805      	ldr	r0, [sp, #20]
   1357e:	f7fb ff31 	bl	f3e4 <vTaskDelay>
    while(pistonRun)
   13582:	782b      	ldrb	r3, [r5, #0]
   13584:	2b00      	cmp	r3, #0
   13586:	f47f af20 	bne.w	133ca <task_move_piston_to_length+0x8a>
   1358a:	e76b      	b.n	13464 <task_move_piston_to_length+0x124>
                        ARTEMIS_DEBUG_PRINTF("PISTON :: Board resetting\n");
   1358c:	4844      	ldr	r0, [pc, #272]	@ (136a0 <task_move_piston_to_length+0x360>)
   1358e:	f7fd fd6b 	bl	11068 <am_util_stdio_printf>
   13592:	4843      	ldr	r0, [pc, #268]	@ (136a0 <task_move_piston_to_length+0x360>)
   13594:	f00a fcf0 	bl	1df78 <datalogger_log_debug>
                        vTaskDelay(xDelay500ms);
   13598:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1359c:	f7fb ff22 	bl	f3e4 <vTaskDelay>
}

void PIS_Reset(void)
{
    uint8_t addr = PISTON_I2C_W_RESET;
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   135a0:	f64c 2377 	movw	r3, #51831	@ 0xca77
    artemis_piston_set_write_mode(true);
   135a4:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   135a6:	f8ad 3018 	strh.w	r3, [sp, #24]
    artemis_piston_set_write_mode(true);
   135aa:	f008 fa3b 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   135ae:	2201      	movs	r2, #1
   135b0:	2102      	movs	r1, #2
   135b2:	a806      	add	r0, sp, #24
   135b4:	f008 f9b4 	bl	1b920 <artemis_piston_i2c_send_msg>
                        vTaskDelay(period);
   135b8:	9e05      	ldr	r6, [sp, #20]
   135ba:	4630      	mov	r0, r6
   135bc:	f7fb ff12 	bl	f3e4 <vTaskDelay>
                        ARTEMIS_DEBUG_PRINTF("PISTON :: Setting length = %0.5f\n", piston.setpoint_l);
   135c0:	68e0      	ldr	r0, [r4, #12]
   135c2:	f7f8 ff01 	bl	c3c8 <__aeabi_f2d>
   135c6:	4602      	mov	r2, r0
   135c8:	460b      	mov	r3, r1
   135ca:	4836      	ldr	r0, [pc, #216]	@ (136a4 <task_move_piston_to_length+0x364>)
   135cc:	f7fd fd4c 	bl	11068 <am_util_stdio_printf>
   135d0:	68e0      	ldr	r0, [r4, #12]
   135d2:	f7f8 fef9 	bl	c3c8 <__aeabi_f2d>
   135d6:	460b      	mov	r3, r1
   135d8:	4602      	mov	r2, r0
   135da:	4832      	ldr	r0, [pc, #200]	@ (136a4 <task_move_piston_to_length+0x364>)
   135dc:	f00a fccc 	bl	1df78 <datalogger_log_debug>
    v[0] = addr;
   135e0:	2320      	movs	r3, #32
   135e2:	f88d 3018 	strb.w	r3, [sp, #24]
    piston.fLength = length;
   135e6:	68e3      	ldr	r3, [r4, #12]
        v[i+1] = piston.u32Length >> ((i)*8) & 0xFF;
   135e8:	f88d 3019 	strb.w	r3, [sp, #25]
   135ec:	0a1a      	lsrs	r2, r3, #8
   135ee:	f88d 201a 	strb.w	r2, [sp, #26]
    artemis_piston_set_write_mode(true);
   135f2:	2001      	movs	r0, #1
        v[i+1] = piston.u32Length >> ((i)*8) & 0xFF;
   135f4:	0c1a      	lsrs	r2, r3, #16
   135f6:	0e1b      	lsrs	r3, r3, #24
   135f8:	f88d 201b 	strb.w	r2, [sp, #27]
   135fc:	f88d 301c 	strb.w	r3, [sp, #28]
    artemis_piston_set_write_mode(true);
   13600:	f008 fa10 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(v, 5, true);
   13604:	a806      	add	r0, sp, #24
   13606:	2201      	movs	r2, #1
   13608:	2105      	movs	r1, #5
   1360a:	f008 f989 	bl	1b920 <artemis_piston_i2c_send_msg>
                        vTaskDelay(period);
   1360e:	4630      	mov	r0, r6
   13610:	f7fb fee8 	bl	f3e4 <vTaskDelay>
                    count_reset = 0;
   13614:	f04f 0800 	mov.w	r8, #0
   13618:	e71d      	b.n	13456 <task_move_piston_to_length+0x116>
                    ARTEMIS_DEBUG_PRINTF("PISTON :: Length reached\n");
   1361a:	4823      	ldr	r0, [pc, #140]	@ (136a8 <task_move_piston_to_length+0x368>)
   1361c:	f7fd fd24 	bl	11068 <am_util_stdio_printf>
   13620:	4821      	ldr	r0, [pc, #132]	@ (136a8 <task_move_piston_to_length+0x368>)
   13622:	f00a fca9 	bl	1df78 <datalogger_log_debug>
                    pistonRun = false;
   13626:	702e      	strb	r6, [r5, #0]
                    count_reset = 0;
   13628:	e7f4      	b.n	13614 <task_move_piston_to_length+0x2d4>
        ARTEMIS_DEBUG_PRINTF("PISTON :: ERROR, Length diff = %0.5f\n", (length - piston.setpoint_l));
   1362a:	ee17 0a90 	vmov	r0, s15
   1362e:	f7f8 fecb 	bl	c3c8 <__aeabi_f2d>
   13632:	4602      	mov	r2, r0
   13634:	460b      	mov	r3, r1
   13636:	481d      	ldr	r0, [pc, #116]	@ (136ac <task_move_piston_to_length+0x36c>)
   13638:	f7fd fd16 	bl	11068 <am_util_stdio_printf>
   1363c:	edd4 7a03 	vldr	s15, [r4, #12]
   13640:	ee78 7a67 	vsub.f32	s15, s16, s15
   13644:	ee17 0a90 	vmov	r0, s15
   13648:	f7f8 febe 	bl	c3c8 <__aeabi_f2d>
   1364c:	4602      	mov	r2, r0
   1364e:	460b      	mov	r3, r1
   13650:	4816      	ldr	r0, [pc, #88]	@ (136ac <task_move_piston_to_length+0x36c>)
   13652:	f00a fc91 	bl	1df78 <datalogger_log_debug>
   13656:	e766      	b.n	13526 <task_move_piston_to_length+0x1e6>
        ARTEMIS_DEBUG_PRINTF("PISTON :: ERROR, moving already\n");
   13658:	4815      	ldr	r0, [pc, #84]	@ (136b0 <task_move_piston_to_length+0x370>)
   1365a:	f7fd fd05 	bl	11068 <am_util_stdio_printf>
   1365e:	4814      	ldr	r0, [pc, #80]	@ (136b0 <task_move_piston_to_length+0x370>)
   13660:	f00a fc8a 	bl	1df78 <datalogger_log_debug>
        vTaskDelete(NULL);
   13664:	4628      	mov	r0, r5
   13666:	f7fb faa9 	bl	ebbc <vTaskDelete>
   1366a:	e685      	b.n	13378 <task_move_piston_to_length+0x38>
    assert(piston.rtos.rate != 0);
   1366c:	4b11      	ldr	r3, [pc, #68]	@ (136b4 <task_move_piston_to_length+0x374>)
   1366e:	4a12      	ldr	r2, [pc, #72]	@ (136b8 <task_move_piston_to_length+0x378>)
   13670:	4812      	ldr	r0, [pc, #72]	@ (136bc <task_move_piston_to_length+0x37c>)
   13672:	f240 1149 	movw	r1, #329	@ 0x149
   13676:	f00e f9d9 	bl	21a2c <__assert_func>
   1367a:	bf00      	nop
   1367c:	f3af 8000 	nop.w
   13680:	40000000 	.word	0x40000000
   13684:	3f847ae1 	.word	0x3f847ae1
   13688:	1000b938 	.word	0x1000b938
   1368c:	1000b934 	.word	0x1000b934
   13690:	3c23d70a 	.word	0x3c23d70a
   13694:	0002b0f0 	.word	0x0002b0f0
   13698:	0002b18c 	.word	0x0002b18c
   1369c:	0002b1d8 	.word	0x0002b1d8
   136a0:	0002b128 	.word	0x0002b128
   136a4:	0002b144 	.word	0x0002b144
   136a8:	0002b10c 	.word	0x0002b10c
   136ac:	0002b1b0 	.word	0x0002b1b0
   136b0:	0002b0cc 	.word	0x0002b0cc
   136b4:	0002b0a4 	.word	0x0002b0a4
   136b8:	00030d7c 	.word	0x00030d7c
   136bc:	0002b0bc 	.word	0x0002b0bc
   136c0:	0002b168 	.word	0x0002b168

000136c4 <task_move_piston_to_zero>:
{
   136c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert(piston.rtos.rate != 0);
   136c8:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 13858 <task_move_piston_to_zero+0x194>
   136cc:	f8b8 3000 	ldrh.w	r3, [r8]
{
   136d0:	b082      	sub	sp, #8
    assert(piston.rtos.rate != 0);
   136d2:	2b00      	cmp	r3, #0
   136d4:	f000 80af 	beq.w	13836 <task_move_piston_to_zero+0x172>
    uint8_t data = 0;
   136d8:	2400      	movs	r4, #0
    artemis_piston_i2c_read(addr, &data, 1);
   136da:	2201      	movs	r2, #1
   136dc:	a901      	add	r1, sp, #4
   136de:	2061      	movs	r0, #97	@ 0x61
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   136e0:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    uint8_t data = 0;
   136e4:	f88d 4004 	strb.w	r4, [sp, #4]
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   136e8:	fbb6 f6f3 	udiv	r6, r6, r3
    artemis_piston_i2c_read(addr, &data, 1);
   136ec:	f008 f95c 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   136f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if(module_pis_trv_eng() == true)
   136f4:	2b00      	cmp	r3, #0
   136f6:	f040 8094 	bne.w	13822 <task_move_piston_to_zero+0x15e>
}

void PIS_move_to_zero(void)
{
    uint8_t addr = PISTON_I2C_RW_MOV_ZERO;
    uint8_t cmd[2] = {addr, 0x01};
   136fa:	f44f 73b2 	mov.w	r3, #356	@ 0x164
    artemis_piston_set_write_mode(true);
   136fe:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, 0x01};
   13700:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   13704:	f008 f98e 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   13708:	2201      	movs	r2, #1
   1370a:	2102      	movs	r1, #2
   1370c:	a801      	add	r0, sp, #4
   1370e:	f008 f907 	bl	1b920 <artemis_piston_i2c_send_msg>
    pistonRun = true;
   13712:	4f4c      	ldr	r7, [pc, #304]	@ (13844 <task_move_piston_to_zero+0x180>)
    vTaskDelay(period);
   13714:	4630      	mov	r0, r6
   13716:	f7fb fe65 	bl	f3e4 <vTaskDelay>
    pistonRun = true;
   1371a:	2301      	movs	r3, #1
   1371c:	703b      	strb	r3, [r7, #0]
    while(pistonRun)
   1371e:	783b      	ldrb	r3, [r7, #0]
   13720:	b38b      	cbz	r3, 13786 <task_move_piston_to_zero+0xc2>
    uint8_t count_reset = 0;
   13722:	2400      	movs	r4, #0
                    ARTEMIS_DEBUG_PRINTF("PISTON :: Board Resetting\n");
   13724:	f8df a134 	ldr.w	sl, [pc, #308]	@ 1385c <task_move_piston_to_zero+0x198>
    uint8_t data = 0;
   13728:	46a1      	mov	r9, r4
   1372a:	e013      	b.n	13754 <task_move_piston_to_zero+0x90>
                vTaskDelay(xDelay250ms);
   1372c:	f7fb fe5a 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, &data, 1);
   13730:	2201      	movs	r2, #1
   13732:	2068      	movs	r0, #104	@ 0x68
   13734:	a901      	add	r1, sp, #4
   13736:	f008 f937 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   1373a:	f89d 3004 	ldrb.w	r3, [sp, #4]
                if (fullFlag)
   1373e:	b103      	cbz	r3, 13742 <task_move_piston_to_zero+0x7e>
                    pistonRun = false;
   13740:	703d      	strb	r5, [r7, #0]
                count_reset++;
   13742:	3401      	adds	r4, #1
   13744:	b2e4      	uxtb	r4, r4
                if (count_reset > 4)
   13746:	2c04      	cmp	r4, #4
   13748:	d842      	bhi.n	137d0 <task_move_piston_to_zero+0x10c>
        vTaskDelay(period);
   1374a:	4630      	mov	r0, r6
   1374c:	f7fb fe4a 	bl	f3e4 <vTaskDelay>
    while(pistonRun)
   13750:	783b      	ldrb	r3, [r7, #0]
   13752:	b1c3      	cbz	r3, 13786 <task_move_piston_to_zero+0xc2>
    artemis_piston_i2c_read(addr, &data, 1);
   13754:	2061      	movs	r0, #97	@ 0x61
   13756:	2201      	movs	r2, #1
   13758:	a901      	add	r1, sp, #4
    uint8_t data = 0;
   1375a:	f88d 9004 	strb.w	r9, [sp, #4]
    artemis_piston_i2c_read(addr, &data, 1);
   1375e:	f008 f923 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   13762:	f89d 5004 	ldrb.w	r5, [sp, #4]
                vTaskDelay(xDelay250ms);
   13766:	20fa      	movs	r0, #250	@ 0xfa
            if(module_pis_trv_eng() == false)
   13768:	2d00      	cmp	r5, #0
   1376a:	d0df      	beq.n	1372c <task_move_piston_to_zero+0x68>
                vTaskDelay(xDelay250ms);
   1376c:	f7fb fe3a 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, &data, 1);
   13770:	2201      	movs	r2, #1
   13772:	2068      	movs	r0, #104	@ 0x68
   13774:	a901      	add	r1, sp, #4
   13776:	f008 f917 	bl	1b9a8 <artemis_piston_i2c_read>
        vTaskDelay(period);
   1377a:	4630      	mov	r0, r6
   1377c:	f7fb fe32 	bl	f3e4 <vTaskDelay>
    while(pistonRun)
   13780:	783b      	ldrb	r3, [r7, #0]
   13782:	2b00      	cmp	r3, #0
   13784:	d1e6      	bne.n	13754 <task_move_piston_to_zero+0x90>
    artemis_piston_i2c_read(addr, data, 4);
   13786:	2204      	movs	r2, #4
   13788:	eb0d 0102 	add.w	r1, sp, r2
   1378c:	2028      	movs	r0, #40	@ 0x28
    uint8_t data[4] = {0};
   1378e:	2500      	movs	r5, #0
   13790:	9501      	str	r5, [sp, #4]
    artemis_piston_i2c_read(addr, data, 4);
   13792:	f008 f909 	bl	1b9a8 <artemis_piston_i2c_read>
        pis.u32Length |= data[i] << (8*i);
   13796:	f89d 4006 	ldrb.w	r4, [sp, #6]
   1379a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1379e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   137a2:	0424      	lsls	r4, r4, #16
   137a4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   137a8:	431c      	orrs	r4, r3
   137aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    return pis.fLength;
   137ae:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    taskENTER_CRITICAL();
   137b2:	f7f9 fc87 	bl	d0c4 <vPortEnterCritical>
    piston.length = length;
   137b6:	f8c8 4014 	str.w	r4, [r8, #20]
    taskEXIT_CRITICAL();
   137ba:	f7f9 fcaf 	bl	d11c <vPortExitCritical>
    vTaskDelay(xDelay100ms);
   137be:	2064      	movs	r0, #100	@ 0x64
   137c0:	f7fb fe10 	bl	f3e4 <vTaskDelay>
    vTaskDelete(NULL);
   137c4:	4628      	mov	r0, r5
}
   137c6:	b002      	add	sp, #8
   137c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    vTaskDelete(NULL);
   137cc:	f7fb b9f6 	b.w	ebbc <vTaskDelete>
                    ARTEMIS_DEBUG_PRINTF("PISTON :: Board Resetting\n");
   137d0:	4650      	mov	r0, sl
   137d2:	f7fd fc49 	bl	11068 <am_util_stdio_printf>
   137d6:	4650      	mov	r0, sl
   137d8:	f00a fbce 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(period);
   137dc:	4630      	mov	r0, r6
   137de:	f7fb fe01 	bl	f3e4 <vTaskDelay>
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   137e2:	f64c 2377 	movw	r3, #51831	@ 0xca77
    artemis_piston_set_write_mode(true);
   137e6:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   137e8:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   137ec:	f008 f91a 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   137f0:	2201      	movs	r2, #1
   137f2:	2102      	movs	r1, #2
   137f4:	a801      	add	r0, sp, #4
   137f6:	f008 f893 	bl	1b920 <artemis_piston_i2c_send_msg>
                    vTaskDelay(period);
   137fa:	4630      	mov	r0, r6
   137fc:	f7fb fdf2 	bl	f3e4 <vTaskDelay>
    uint8_t cmd[2] = {addr, 0x01};
   13800:	f44f 73b2 	mov.w	r3, #356	@ 0x164
    artemis_piston_set_write_mode(true);
   13804:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, 0x01};
   13806:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   1380a:	f008 f90b 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   1380e:	2201      	movs	r2, #1
   13810:	2102      	movs	r1, #2
   13812:	a801      	add	r0, sp, #4
   13814:	f008 f884 	bl	1b920 <artemis_piston_i2c_send_msg>
                    vTaskDelay(period);
   13818:	4630      	mov	r0, r6
   1381a:	f7fb fde3 	bl	f3e4 <vTaskDelay>
                    count_reset = 0;
   1381e:	2400      	movs	r4, #0
   13820:	e793      	b.n	1374a <task_move_piston_to_zero+0x86>
        ARTEMIS_DEBUG_PRINTF("PISTON :: ERROR, moving already\n");
   13822:	4809      	ldr	r0, [pc, #36]	@ (13848 <task_move_piston_to_zero+0x184>)
   13824:	f7fd fc20 	bl	11068 <am_util_stdio_printf>
   13828:	4807      	ldr	r0, [pc, #28]	@ (13848 <task_move_piston_to_zero+0x184>)
   1382a:	f00a fba5 	bl	1df78 <datalogger_log_debug>
        vTaskDelete(NULL);
   1382e:	4620      	mov	r0, r4
   13830:	f7fb f9c4 	bl	ebbc <vTaskDelete>
   13834:	e761      	b.n	136fa <task_move_piston_to_zero+0x36>
    assert(piston.rtos.rate != 0);
   13836:	4b05      	ldr	r3, [pc, #20]	@ (1384c <task_move_piston_to_zero+0x188>)
   13838:	4a05      	ldr	r2, [pc, #20]	@ (13850 <task_move_piston_to_zero+0x18c>)
   1383a:	4806      	ldr	r0, [pc, #24]	@ (13854 <task_move_piston_to_zero+0x190>)
   1383c:	21bb      	movs	r1, #187	@ 0xbb
   1383e:	f00e f8f5 	bl	21a2c <__assert_func>
   13842:	bf00      	nop
   13844:	1000b934 	.word	0x1000b934
   13848:	0002b0cc 	.word	0x0002b0cc
   1384c:	0002b0a4 	.word	0x0002b0a4
   13850:	00030db4 	.word	0x00030db4
   13854:	0002b0bc 	.word	0x0002b0bc
   13858:	1000b938 	.word	0x1000b938
   1385c:	0002b21c 	.word	0x0002b21c

00013860 <task_move_piston_to_volume>:
{
   13860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(piston.rtos.rate != 0);
   13864:	4cbe      	ldr	r4, [pc, #760]	@ (13b60 <task_move_piston_to_volume+0x300>)
{
   13866:	ed2d 8b02 	vpush	{d8}
    assert(piston.rtos.rate != 0);
   1386a:	8827      	ldrh	r7, [r4, #0]
{
   1386c:	b089      	sub	sp, #36	@ 0x24
    assert(piston.rtos.rate != 0);
   1386e:	2f00      	cmp	r7, #0
   13870:	f000 816a 	beq.w	13b48 <task_move_piston_to_volume+0x2e8>
    uint8_t data = 0;
   13874:	2600      	movs	r6, #0
    artemis_piston_i2c_read(addr, &data, 1);
   13876:	2201      	movs	r2, #1
   13878:	a906      	add	r1, sp, #24
   1387a:	2061      	movs	r0, #97	@ 0x61
    uint8_t data = 0;
   1387c:	f88d 6018 	strb.w	r6, [sp, #24]
    artemis_piston_i2c_read(addr, &data, 1);
   13880:	f008 f892 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   13884:	f89d 5018 	ldrb.w	r5, [sp, #24]
    if(module_pis_trv_eng() == true)
   13888:	2d00      	cmp	r5, #0
   1388a:	f040 8156 	bne.w	13b3a <task_move_piston_to_volume+0x2da>
    vTaskDelay(xDelay50ms);
   1388e:	2032      	movs	r0, #50	@ 0x32
   13890:	f7fb fda8 	bl	f3e4 <vTaskDelay>
    piston.dVolume = volume;
   13894:	68a3      	ldr	r3, [r4, #8]
    uint8_t v[5] = {0};
   13896:	9506      	str	r5, [sp, #24]
    artemis_piston_set_write_mode(true);
   13898:	2001      	movs	r0, #1
        v[i+1] = piston.u64Volume >> ((i)*8) & 0xFF;
   1389a:	f8cd 3019 	str.w	r3, [sp, #25]
    artemis_piston_set_write_mode(true);
   1389e:	f008 f8c1 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(v, 5, true);
   138a2:	2201      	movs	r2, #1
   138a4:	2105      	movs	r1, #5
   138a6:	a806      	add	r0, sp, #24
   138a8:	f008 f83a 	bl	1b920 <artemis_piston_i2c_send_msg>
    pistonRun = true;
   138ac:	f8df 82e0 	ldr.w	r8, [pc, #736]	@ 13b90 <task_move_piston_to_volume+0x330>
    vTaskDelay(xDelay500ms);
   138b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   138b4:	f7fb fd96 	bl	f3e4 <vTaskDelay>
    pistonRun = true;
   138b8:	2301      	movs	r3, #1
   138ba:	f888 3000 	strb.w	r3, [r8]
    while(pistonRun)
   138be:	f898 3000 	ldrb.w	r3, [r8]
   138c2:	2b00      	cmp	r3, #0
   138c4:	d054      	beq.n	13970 <task_move_piston_to_volume+0x110>
                if (piston.volume >=(piston.setpoint_v - PISTON_VOLUME_DIFF_MAX) &&
   138c6:	ed9f 8aa7 	vldr	s16, [pc, #668]	@ 13b64 <task_move_piston_to_volume+0x304>
                ARTEMIS_DEBUG_PRINTF("PISTON :: Volume in moving = %.3fin³\n", volume);
   138ca:	f8df 92c8 	ldr.w	r9, [pc, #712]	@ 13b94 <task_move_piston_to_volume+0x334>
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   138ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
   138d2:	fbb3 f3f7 	udiv	r3, r3, r7
   138d6:	9305      	str	r3, [sp, #20]
    artemis_piston_i2c_read(addr, &data, 1);
   138d8:	2061      	movs	r0, #97	@ 0x61
    uint8_t data = 0;
   138da:	2700      	movs	r7, #0
    artemis_piston_i2c_read(addr, &data, 1);
   138dc:	2201      	movs	r2, #1
   138de:	a906      	add	r1, sp, #24
    uint8_t data = 0;
   138e0:	f88d 7018 	strb.w	r7, [sp, #24]
    artemis_piston_i2c_read(addr, &data, 1);
   138e4:	f008 f860 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   138e8:	f89d 6018 	ldrb.w	r6, [sp, #24]
                vTaskDelay(xDelay250ms);
   138ec:	20fa      	movs	r0, #250	@ 0xfa
            if(module_pis_trv_eng() == false)
   138ee:	2e00      	cmp	r6, #0
   138f0:	f040 80aa 	bne.w	13a48 <task_move_piston_to_volume+0x1e8>
                vTaskDelay(xDelay250ms);
   138f4:	f7fb fd76 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, data, 4);
   138f8:	2204      	movs	r2, #4
   138fa:	2008      	movs	r0, #8
   138fc:	a906      	add	r1, sp, #24
    uint8_t data[4] = {0};
   138fe:	9606      	str	r6, [sp, #24]
    artemis_piston_i2c_read(addr, data, 4);
   13900:	f008 f852 	bl	1b9a8 <artemis_piston_i2c_read>
    return pis.fVolume;
   13904:	9f06      	ldr	r7, [sp, #24]
                ARTEMIS_DEBUG_PRINTF("PISTON :: Volume = %.3fin³\n", volume);
   13906:	4638      	mov	r0, r7
   13908:	f7f8 fd5e 	bl	c3c8 <__aeabi_f2d>
   1390c:	4682      	mov	sl, r0
   1390e:	468b      	mov	fp, r1
   13910:	460b      	mov	r3, r1
   13912:	4652      	mov	r2, sl
   13914:	4894      	ldr	r0, [pc, #592]	@ (13b68 <task_move_piston_to_volume+0x308>)
   13916:	f7fd fba7 	bl	11068 <am_util_stdio_printf>
   1391a:	4893      	ldr	r0, [pc, #588]	@ (13b68 <task_move_piston_to_volume+0x308>)
   1391c:	4652      	mov	r2, sl
   1391e:	465b      	mov	r3, fp
   13920:	f00a fb2a 	bl	1df78 <datalogger_log_debug>
                taskENTER_CRITICAL();
   13924:	f7f9 fbce 	bl	d0c4 <vPortEnterCritical>
                piston.volume = volume;
   13928:	6127      	str	r7, [r4, #16]
                taskEXIT_CRITICAL();
   1392a:	f7f9 fbf7 	bl	d11c <vPortExitCritical>
                if (piston.volume >=(piston.setpoint_v - PISTON_VOLUME_DIFF_MAX) &&
   1392e:	edd4 7a02 	vldr	s15, [r4, #8]
   13932:	ed94 7a04 	vldr	s14, [r4, #16]
   13936:	ee77 6ac8 	vsub.f32	s13, s15, s16
   1393a:	eeb4 7ae6 	vcmpe.f32	s14, s13
   1393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13942:	db07      	blt.n	13954 <task_move_piston_to_volume+0xf4>
                    piston.volume <=(piston.setpoint_v + PISTON_VOLUME_DIFF_MAX))
   13944:	ee77 7a88 	vadd.f32	s15, s15, s16
                if (piston.volume >=(piston.setpoint_v - PISTON_VOLUME_DIFF_MAX) &&
   13948:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13950:	f240 80ea 	bls.w	13b28 <task_move_piston_to_volume+0x2c8>
                    count_reset++;
   13954:	3501      	adds	r5, #1
   13956:	b2ed      	uxtb	r5, r5
                    if (count_reset > 4)
   13958:	2d04      	cmp	r5, #4
   1395a:	f200 80a2 	bhi.w	13aa2 <task_move_piston_to_volume+0x242>
        if (pistonRun)
   1395e:	f898 3000 	ldrb.w	r3, [r8]
   13962:	2b00      	cmp	r3, #0
   13964:	f040 8094 	bne.w	13a90 <task_move_piston_to_volume+0x230>
    while(pistonRun)
   13968:	f898 3000 	ldrb.w	r3, [r8]
   1396c:	2b00      	cmp	r3, #0
   1396e:	d1b3      	bne.n	138d8 <task_move_piston_to_volume+0x78>
    vTaskDelay(xDelay100ms);
   13970:	2064      	movs	r0, #100	@ 0x64
   13972:	f7fb fd37 	bl	f3e4 <vTaskDelay>
    uint8_t data[4] = {0};
   13976:	2300      	movs	r3, #0
    artemis_piston_i2c_read(addr, data, 4);
   13978:	2204      	movs	r2, #4
   1397a:	a906      	add	r1, sp, #24
   1397c:	2008      	movs	r0, #8
    uint8_t data[4] = {0};
   1397e:	9306      	str	r3, [sp, #24]
    artemis_piston_i2c_read(addr, data, 4);
   13980:	f008 f812 	bl	1b9a8 <artemis_piston_i2c_read>
        pis.u32Volume |= data[i] << (8*i);
   13984:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13988:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1398c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   13990:	f89d 201b 	ldrb.w	r2, [sp, #27]
   13994:	041b      	lsls	r3, r3, #16
   13996:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1399a:	430b      	orrs	r3, r1
    return pis.fVolume;
   1399c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    ARTEMIS_DEBUG_PRINTF("PISTON :: Volume updated = %.3fin³\n", volume);
   139a0:	4618      	mov	r0, r3
    return pis.fVolume;
   139a2:	ee08 3a10 	vmov	s16, r3
    ARTEMIS_DEBUG_PRINTF("PISTON :: Volume updated = %.3fin³\n", volume);
   139a6:	f7f8 fd0f 	bl	c3c8 <__aeabi_f2d>
   139aa:	460f      	mov	r7, r1
   139ac:	460b      	mov	r3, r1
   139ae:	4602      	mov	r2, r0
   139b0:	4606      	mov	r6, r0
   139b2:	486e      	ldr	r0, [pc, #440]	@ (13b6c <task_move_piston_to_volume+0x30c>)
   139b4:	f7fd fb58 	bl	11068 <am_util_stdio_printf>
   139b8:	486c      	ldr	r0, [pc, #432]	@ (13b6c <task_move_piston_to_volume+0x30c>)
   139ba:	4632      	mov	r2, r6
   139bc:	463b      	mov	r3, r7
   139be:	f00a fadb 	bl	1df78 <datalogger_log_debug>
    taskENTER_CRITICAL();
   139c2:	f7f9 fb7f 	bl	d0c4 <vPortEnterCritical>
    piston.volume = volume;
   139c6:	ed84 8a04 	vstr	s16, [r4, #16]
    taskEXIT_CRITICAL();
   139ca:	f7f9 fba7 	bl	d11c <vPortExitCritical>
    if( fabs(volume - piston.setpoint_v) >= PISTON_VOLUME_DIFF_MAX)
   139ce:	edd4 7a02 	vldr	s15, [r4, #8]
   139d2:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 13b64 <task_move_piston_to_volume+0x304>
   139d6:	ee78 7a67 	vsub.f32	s15, s16, s15
   139da:	eef0 6ae7 	vabs.f32	s13, s15
   139de:	eef4 6ac7 	vcmpe.f32	s13, s14
   139e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139e6:	f280 8088 	bge.w	13afa <task_move_piston_to_volume+0x29a>
        ARTEMIS_DEBUG_PRINTF("PISTON :: SUCCESS. Volume = %0.3f, diff = %0.3f, max_diff = %0.3f\n",
   139ea:	f20f 196c 	addw	r9, pc, #364	@ 0x16c
   139ee:	e9d9 8900 	ldrd	r8, r9, [r9]
   139f2:	ee17 0a90 	vmov	r0, s15
   139f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
   139fa:	f7f8 fce5 	bl	c3c8 <__aeabi_f2d>
   139fe:	4632      	mov	r2, r6
   13a00:	e9cd 0100 	strd	r0, r1, [sp]
   13a04:	463b      	mov	r3, r7
   13a06:	485a      	ldr	r0, [pc, #360]	@ (13b70 <task_move_piston_to_volume+0x310>)
   13a08:	f7fd fb2e 	bl	11068 <am_util_stdio_printf>
   13a0c:	edd4 7a02 	vldr	s15, [r4, #8]
   13a10:	ee78 7a67 	vsub.f32	s15, s16, s15
   13a14:	e9cd 8902 	strd	r8, r9, [sp, #8]
   13a18:	ee17 0a90 	vmov	r0, s15
   13a1c:	f7f8 fcd4 	bl	c3c8 <__aeabi_f2d>
   13a20:	4602      	mov	r2, r0
   13a22:	460b      	mov	r3, r1
   13a24:	e9cd 2300 	strd	r2, r3, [sp]
   13a28:	4851      	ldr	r0, [pc, #324]	@ (13b70 <task_move_piston_to_volume+0x310>)
   13a2a:	4632      	mov	r2, r6
   13a2c:	463b      	mov	r3, r7
   13a2e:	f00a faa3 	bl	1df78 <datalogger_log_debug>
    vTaskDelay(xDelay10ms);
   13a32:	200a      	movs	r0, #10
   13a34:	f7fb fcd6 	bl	f3e4 <vTaskDelay>
    vTaskDelete(NULL);
   13a38:	2000      	movs	r0, #0
}
   13a3a:	b009      	add	sp, #36	@ 0x24
   13a3c:	ecbd 8b02 	vpop	{d8}
   13a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vTaskDelete(NULL);
   13a44:	f7fb b8ba 	b.w	ebbc <vTaskDelete>
                vTaskDelay(xDelay250ms);
   13a48:	f7fb fccc 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, data, 4);
   13a4c:	2204      	movs	r2, #4
   13a4e:	2008      	movs	r0, #8
   13a50:	a906      	add	r1, sp, #24
    uint8_t data[4] = {0};
   13a52:	9706      	str	r7, [sp, #24]
    artemis_piston_i2c_read(addr, data, 4);
   13a54:	f007 ffa8 	bl	1b9a8 <artemis_piston_i2c_read>
    return pis.fVolume;
   13a58:	f8dd a018 	ldr.w	sl, [sp, #24]
                ARTEMIS_DEBUG_PRINTF("PISTON :: Volume in moving = %.3fin³\n", volume);
   13a5c:	4650      	mov	r0, sl
   13a5e:	f7f8 fcb3 	bl	c3c8 <__aeabi_f2d>
   13a62:	4606      	mov	r6, r0
   13a64:	460f      	mov	r7, r1
   13a66:	460b      	mov	r3, r1
   13a68:	4632      	mov	r2, r6
   13a6a:	4648      	mov	r0, r9
   13a6c:	f7fd fafc 	bl	11068 <am_util_stdio_printf>
   13a70:	463b      	mov	r3, r7
   13a72:	4632      	mov	r2, r6
   13a74:	4648      	mov	r0, r9
   13a76:	f00a fa7f 	bl	1df78 <datalogger_log_debug>
                taskENTER_CRITICAL();
   13a7a:	f7f9 fb23 	bl	d0c4 <vPortEnterCritical>
                piston.volume = volume;
   13a7e:	f8c4 a010 	str.w	sl, [r4, #16]
                taskEXIT_CRITICAL();
   13a82:	f7f9 fb4b 	bl	d11c <vPortExitCritical>
        if (pistonRun)
   13a86:	f898 3000 	ldrb.w	r3, [r8]
   13a8a:	2b00      	cmp	r3, #0
   13a8c:	f43f af6c 	beq.w	13968 <task_move_piston_to_volume+0x108>
            vTaskDelay(period);
   13a90:	9805      	ldr	r0, [sp, #20]
   13a92:	f7fb fca7 	bl	f3e4 <vTaskDelay>
    while(pistonRun)
   13a96:	f898 3000 	ldrb.w	r3, [r8]
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	f47f af1c 	bne.w	138d8 <task_move_piston_to_volume+0x78>
   13aa0:	e766      	b.n	13970 <task_move_piston_to_volume+0x110>
                        ARTEMIS_DEBUG_PRINTF("PISTON :: Board resetting\n");
   13aa2:	4834      	ldr	r0, [pc, #208]	@ (13b74 <task_move_piston_to_volume+0x314>)
   13aa4:	f7fd fae0 	bl	11068 <am_util_stdio_printf>
   13aa8:	4832      	ldr	r0, [pc, #200]	@ (13b74 <task_move_piston_to_volume+0x314>)
   13aaa:	f00a fa65 	bl	1df78 <datalogger_log_debug>
                        vTaskDelay(xDelay500ms);
   13aae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   13ab2:	f7fb fc97 	bl	f3e4 <vTaskDelay>
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   13ab6:	f64c 2377 	movw	r3, #51831	@ 0xca77
    artemis_piston_set_write_mode(true);
   13aba:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   13abc:	f8ad 3018 	strh.w	r3, [sp, #24]
    artemis_piston_set_write_mode(true);
   13ac0:	f007 ffb0 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   13ac4:	2201      	movs	r2, #1
   13ac6:	2102      	movs	r1, #2
   13ac8:	a806      	add	r0, sp, #24
   13aca:	f007 ff29 	bl	1b920 <artemis_piston_i2c_send_msg>
                        vTaskDelay(period);
   13ace:	9d05      	ldr	r5, [sp, #20]
   13ad0:	4628      	mov	r0, r5
   13ad2:	f7fb fc87 	bl	f3e4 <vTaskDelay>
    uint8_t v[5] = {0};
   13ad6:	2300      	movs	r3, #0
   13ad8:	9306      	str	r3, [sp, #24]
    artemis_piston_set_write_mode(true);
   13ada:	2001      	movs	r0, #1
    piston.dVolume = volume;
   13adc:	68a3      	ldr	r3, [r4, #8]
        v[i+1] = piston.u64Volume >> ((i)*8) & 0xFF;
   13ade:	f8cd 3019 	str.w	r3, [sp, #25]
    artemis_piston_set_write_mode(true);
   13ae2:	f007 ff9f 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(v, 5, true);
   13ae6:	a806      	add	r0, sp, #24
   13ae8:	2201      	movs	r2, #1
   13aea:	2105      	movs	r1, #5
   13aec:	f007 ff18 	bl	1b920 <artemis_piston_i2c_send_msg>
                        vTaskDelay(period);
   13af0:	4628      	mov	r0, r5
   13af2:	f7fb fc77 	bl	f3e4 <vTaskDelay>
                    count_reset = 0;
   13af6:	2500      	movs	r5, #0
   13af8:	e731      	b.n	1395e <task_move_piston_to_volume+0xfe>
        ARTEMIS_DEBUG_PRINTF("PISTON :: ERROR, Volume diff = %0.3f\n", (volume - piston.setpoint_v));
   13afa:	ee17 0a90 	vmov	r0, s15
   13afe:	f7f8 fc63 	bl	c3c8 <__aeabi_f2d>
   13b02:	4602      	mov	r2, r0
   13b04:	460b      	mov	r3, r1
   13b06:	481c      	ldr	r0, [pc, #112]	@ (13b78 <task_move_piston_to_volume+0x318>)
   13b08:	f7fd faae 	bl	11068 <am_util_stdio_printf>
   13b0c:	edd4 7a02 	vldr	s15, [r4, #8]
   13b10:	ee78 7a67 	vsub.f32	s15, s16, s15
   13b14:	ee17 0a90 	vmov	r0, s15
   13b18:	f7f8 fc56 	bl	c3c8 <__aeabi_f2d>
   13b1c:	4602      	mov	r2, r0
   13b1e:	460b      	mov	r3, r1
   13b20:	4815      	ldr	r0, [pc, #84]	@ (13b78 <task_move_piston_to_volume+0x318>)
   13b22:	f00a fa29 	bl	1df78 <datalogger_log_debug>
   13b26:	e784      	b.n	13a32 <task_move_piston_to_volume+0x1d2>
                    ARTEMIS_DEBUG_PRINTF("PISTON :: Volume reached\n");
   13b28:	4814      	ldr	r0, [pc, #80]	@ (13b7c <task_move_piston_to_volume+0x31c>)
   13b2a:	f7fd fa9d 	bl	11068 <am_util_stdio_printf>
   13b2e:	4813      	ldr	r0, [pc, #76]	@ (13b7c <task_move_piston_to_volume+0x31c>)
   13b30:	f00a fa22 	bl	1df78 <datalogger_log_debug>
                    pistonRun = false;
   13b34:	f888 6000 	strb.w	r6, [r8]
                    count_reset = 0;
   13b38:	e7dd      	b.n	13af6 <task_move_piston_to_volume+0x296>
        ARTEMIS_DEBUG_PRINTF("PISTON :: ERROR, moving already\n");
   13b3a:	4811      	ldr	r0, [pc, #68]	@ (13b80 <task_move_piston_to_volume+0x320>)
   13b3c:	f7fd fa94 	bl	11068 <am_util_stdio_printf>
   13b40:	480f      	ldr	r0, [pc, #60]	@ (13b80 <task_move_piston_to_volume+0x320>)
   13b42:	f00a fa19 	bl	1df78 <datalogger_log_debug>
        vTaskDelete(NULL);
   13b46:	e777      	b.n	13a38 <task_move_piston_to_volume+0x1d8>
    assert(piston.rtos.rate != 0);
   13b48:	4b0e      	ldr	r3, [pc, #56]	@ (13b84 <task_move_piston_to_volume+0x324>)
   13b4a:	4a0f      	ldr	r2, [pc, #60]	@ (13b88 <task_move_piston_to_volume+0x328>)
   13b4c:	480f      	ldr	r0, [pc, #60]	@ (13b8c <task_move_piston_to_volume+0x32c>)
   13b4e:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
   13b52:	f00d ff6b 	bl	21a2c <__assert_func>
   13b56:	bf00      	nop
   13b58:	40000000 	.word	0x40000000
   13b5c:	3fa47ae1 	.word	0x3fa47ae1
   13b60:	1000b938 	.word	0x1000b938
   13b64:	3d23d70a 	.word	0x3d23d70a
   13b68:	0002b238 	.word	0x0002b238
   13b6c:	0002b29c 	.word	0x0002b29c
   13b70:	0002b2ec 	.word	0x0002b2ec
   13b74:	0002b128 	.word	0x0002b128
   13b78:	0002b2c4 	.word	0x0002b2c4
   13b7c:	0002b258 	.word	0x0002b258
   13b80:	0002b0cc 	.word	0x0002b0cc
   13b84:	0002b0a4 	.word	0x0002b0a4
   13b88:	00030d60 	.word	0x00030d60
   13b8c:	0002b0bc 	.word	0x0002b0bc
   13b90:	1000b934 	.word	0x1000b934
   13b94:	0002b274 	.word	0x0002b274

00013b98 <task_move_piston_to_full>:
{
   13b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert(piston.rtos.rate != 0);
   13b9c:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 13d30 <task_move_piston_to_full+0x198>
   13ba0:	f8b8 5000 	ldrh.w	r5, [r8]
{
   13ba4:	b082      	sub	sp, #8
    assert(piston.rtos.rate != 0);
   13ba6:	2d00      	cmp	r5, #0
   13ba8:	f000 80b1 	beq.w	13d0e <task_move_piston_to_full+0x176>
    uint8_t data = 0;
   13bac:	2600      	movs	r6, #0
    artemis_piston_i2c_read(addr, &data, 1);
   13bae:	2201      	movs	r2, #1
   13bb0:	a901      	add	r1, sp, #4
   13bb2:	2061      	movs	r0, #97	@ 0x61
    uint8_t data = 0;
   13bb4:	f88d 6004 	strb.w	r6, [sp, #4]
    artemis_piston_i2c_read(addr, &data, 1);
   13bb8:	f007 fef6 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   13bbc:	f89d 4004 	ldrb.w	r4, [sp, #4]
    if(module_pis_trv_eng() == true)
   13bc0:	2c00      	cmp	r4, #0
   13bc2:	f040 8098 	bne.w	13cf6 <task_move_piston_to_full+0x15e>
    uint8_t cmd[2] = {addr, 0x01};
   13bc6:	f240 1365 	movw	r3, #357	@ 0x165
    artemis_piston_set_write_mode(true);
   13bca:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, 0x01};
   13bcc:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   13bd0:	f007 ff28 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   13bd4:	2201      	movs	r2, #1
   13bd6:	2102      	movs	r1, #2
   13bd8:	a801      	add	r0, sp, #4
   13bda:	f007 fea1 	bl	1b920 <artemis_piston_i2c_send_msg>
    pistonRun = true;
   13bde:	4f4f      	ldr	r7, [pc, #316]	@ (13d1c <task_move_piston_to_full+0x184>)
    uint32_t period = xDelay1000ms/piston.rtos.rate;
   13be0:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
   13be4:	fbb6 f6f5 	udiv	r6, r6, r5
    vTaskDelay(period);
   13be8:	4630      	mov	r0, r6
   13bea:	f7fb fbfb 	bl	f3e4 <vTaskDelay>
    pistonRun = true;
   13bee:	2301      	movs	r3, #1
   13bf0:	703b      	strb	r3, [r7, #0]
    while(pistonRun)
   13bf2:	783b      	ldrb	r3, [r7, #0]
   13bf4:	b38b      	cbz	r3, 13c5a <task_move_piston_to_full+0xc2>
                    ARTEMIS_DEBUG_PRINTF("PISTON :: Board Resetting\n");
   13bf6:	f8df a13c 	ldr.w	sl, [pc, #316]	@ 13d34 <task_move_piston_to_full+0x19c>
    uint8_t data = 0;
   13bfa:	46a1      	mov	r9, r4
   13bfc:	e014      	b.n	13c28 <task_move_piston_to_full+0x90>
                vTaskDelay(xDelay250ms);
   13bfe:	20fa      	movs	r0, #250	@ 0xfa
   13c00:	f7fb fbf0 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, &data, 1);
   13c04:	2201      	movs	r2, #1
   13c06:	2069      	movs	r0, #105	@ 0x69
   13c08:	a901      	add	r1, sp, #4
   13c0a:	f007 fecd 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   13c0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
                count_reset++;
   13c12:	3401      	adds	r4, #1
   13c14:	b2e4      	uxtb	r4, r4
                if (fullFlag)
   13c16:	b103      	cbz	r3, 13c1a <task_move_piston_to_full+0x82>
                    pistonRun = false;
   13c18:	703d      	strb	r5, [r7, #0]
                if (count_reset > 4)
   13c1a:	2c04      	cmp	r4, #4
   13c1c:	d842      	bhi.n	13ca4 <task_move_piston_to_full+0x10c>
        vTaskDelay(period);
   13c1e:	4630      	mov	r0, r6
   13c20:	f7fb fbe0 	bl	f3e4 <vTaskDelay>
    while(pistonRun)
   13c24:	783b      	ldrb	r3, [r7, #0]
   13c26:	b1c3      	cbz	r3, 13c5a <task_move_piston_to_full+0xc2>
    artemis_piston_i2c_read(addr, &data, 1);
   13c28:	2201      	movs	r2, #1
   13c2a:	a901      	add	r1, sp, #4
   13c2c:	2061      	movs	r0, #97	@ 0x61
    uint8_t data = 0;
   13c2e:	f88d 9004 	strb.w	r9, [sp, #4]
    artemis_piston_i2c_read(addr, &data, 1);
   13c32:	f007 feb9 	bl	1b9a8 <artemis_piston_i2c_read>
    return (bool) data;
   13c36:	f89d 5004 	ldrb.w	r5, [sp, #4]
            if(module_pis_trv_eng() == false)
   13c3a:	2d00      	cmp	r5, #0
   13c3c:	d0df      	beq.n	13bfe <task_move_piston_to_full+0x66>
                vTaskDelay(xDelay250ms);
   13c3e:	20fa      	movs	r0, #250	@ 0xfa
   13c40:	f7fb fbd0 	bl	f3e4 <vTaskDelay>
    artemis_piston_i2c_read(addr, &data, 1);
   13c44:	2201      	movs	r2, #1
   13c46:	2069      	movs	r0, #105	@ 0x69
   13c48:	a901      	add	r1, sp, #4
   13c4a:	f007 fead 	bl	1b9a8 <artemis_piston_i2c_read>
        vTaskDelay(period);
   13c4e:	4630      	mov	r0, r6
   13c50:	f7fb fbc8 	bl	f3e4 <vTaskDelay>
    while(pistonRun)
   13c54:	783b      	ldrb	r3, [r7, #0]
   13c56:	2b00      	cmp	r3, #0
   13c58:	d1e6      	bne.n	13c28 <task_move_piston_to_full+0x90>
    artemis_piston_i2c_read(addr, data, 4);
   13c5a:	2204      	movs	r2, #4
   13c5c:	eb0d 0102 	add.w	r1, sp, r2
   13c60:	2028      	movs	r0, #40	@ 0x28
    uint8_t data[4] = {0};
   13c62:	2500      	movs	r5, #0
   13c64:	9501      	str	r5, [sp, #4]
    artemis_piston_i2c_read(addr, data, 4);
   13c66:	f007 fe9f 	bl	1b9a8 <artemis_piston_i2c_read>
        pis.u32Length |= data[i] << (8*i);
   13c6a:	f89d 4006 	ldrb.w	r4, [sp, #6]
   13c6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   13c72:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13c76:	0424      	lsls	r4, r4, #16
   13c78:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   13c7c:	431c      	orrs	r4, r3
   13c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    return pis.fLength;
   13c82:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    taskENTER_CRITICAL();
   13c86:	f7f9 fa1d 	bl	d0c4 <vPortEnterCritical>
    piston.length = length;
   13c8a:	f8c8 4014 	str.w	r4, [r8, #20]
    taskEXIT_CRITICAL();
   13c8e:	f7f9 fa45 	bl	d11c <vPortExitCritical>
    vTaskDelay(xDelay100ms);
   13c92:	2064      	movs	r0, #100	@ 0x64
   13c94:	f7fb fba6 	bl	f3e4 <vTaskDelay>
    vTaskDelete(NULL);
   13c98:	4628      	mov	r0, r5
}
   13c9a:	b002      	add	sp, #8
   13c9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    vTaskDelete(NULL);
   13ca0:	f7fa bf8c 	b.w	ebbc <vTaskDelete>
                    ARTEMIS_DEBUG_PRINTF("PISTON :: Board Resetting\n");
   13ca4:	4650      	mov	r0, sl
   13ca6:	f7fd f9df 	bl	11068 <am_util_stdio_printf>
   13caa:	4650      	mov	r0, sl
   13cac:	f00a f964 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(period);
   13cb0:	4630      	mov	r0, r6
   13cb2:	f7fb fb97 	bl	f3e4 <vTaskDelay>
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   13cb6:	f64c 2377 	movw	r3, #51831	@ 0xca77
    artemis_piston_set_write_mode(true);
   13cba:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   13cbc:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   13cc0:	f007 feb0 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   13cc4:	2201      	movs	r2, #1
   13cc6:	2102      	movs	r1, #2
   13cc8:	a801      	add	r0, sp, #4
   13cca:	f007 fe29 	bl	1b920 <artemis_piston_i2c_send_msg>
                    vTaskDelay(period);
   13cce:	4630      	mov	r0, r6
   13cd0:	f7fb fb88 	bl	f3e4 <vTaskDelay>
    uint8_t cmd[2] = {addr, 0x01};
   13cd4:	f240 1365 	movw	r3, #357	@ 0x165
    artemis_piston_set_write_mode(true);
   13cd8:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, 0x01};
   13cda:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   13cde:	f007 fea1 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   13ce2:	2201      	movs	r2, #1
   13ce4:	2102      	movs	r1, #2
   13ce6:	a801      	add	r0, sp, #4
   13ce8:	f007 fe1a 	bl	1b920 <artemis_piston_i2c_send_msg>
                    vTaskDelay(period);
   13cec:	4630      	mov	r0, r6
   13cee:	f7fb fb79 	bl	f3e4 <vTaskDelay>
                    count_reset = 0;
   13cf2:	2400      	movs	r4, #0
   13cf4:	e793      	b.n	13c1e <task_move_piston_to_full+0x86>
        ARTEMIS_DEBUG_PRINTF("PISTON :: ERROR, moving already\n");
   13cf6:	480a      	ldr	r0, [pc, #40]	@ (13d20 <task_move_piston_to_full+0x188>)
   13cf8:	f7fd f9b6 	bl	11068 <am_util_stdio_printf>
   13cfc:	4808      	ldr	r0, [pc, #32]	@ (13d20 <task_move_piston_to_full+0x188>)
   13cfe:	f00a f93b 	bl	1df78 <datalogger_log_debug>
        vTaskDelete(NULL);
   13d02:	4630      	mov	r0, r6
}
   13d04:	b002      	add	sp, #8
   13d06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    vTaskDelete(NULL);
   13d0a:	f7fa bf57 	b.w	ebbc <vTaskDelete>
    assert(piston.rtos.rate != 0);
   13d0e:	4b05      	ldr	r3, [pc, #20]	@ (13d24 <task_move_piston_to_full+0x18c>)
   13d10:	4a05      	ldr	r2, [pc, #20]	@ (13d28 <task_move_piston_to_full+0x190>)
   13d12:	4806      	ldr	r0, [pc, #24]	@ (13d2c <task_move_piston_to_full+0x194>)
   13d14:	f44f 7181 	mov.w	r1, #258	@ 0x102
   13d18:	f00d fe88 	bl	21a2c <__assert_func>
   13d1c:	1000b934 	.word	0x1000b934
   13d20:	0002b0cc 	.word	0x0002b0cc
   13d24:	0002b0a4 	.word	0x0002b0a4
   13d28:	00030d98 	.word	0x00030d98
   13d2c:	0002b0bc 	.word	0x0002b0bc
   13d30:	1000b938 	.word	0x1000b938
   13d34:	0002b21c 	.word	0x0002b21c

00013d38 <PIS_initialize>:
{
   13d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    artemis_piston_i2c_initialize(PISTON_I2C_ADDR);
   13d3a:	206c      	movs	r0, #108	@ 0x6c
{
   13d3c:	b083      	sub	sp, #12
    artemis_piston_i2c_initialize(PISTON_I2C_ADDR);
   13d3e:	f007 fd75 	bl	1b82c <artemis_piston_i2c_initialize>
    uint8_t data[8] = {0};
   13d42:	2300      	movs	r3, #0
    ARTEMIS_DEBUG_PRINTF("\nPiston Board Information\n");
   13d44:	4831      	ldr	r0, [pc, #196]	@ (13e0c <PIS_initialize+0xd4>)
        ARTEMIS_DEBUG_PRINTF("%c", (char)data[i]);
   13d46:	4d32      	ldr	r5, [pc, #200]	@ (13e10 <PIS_initialize+0xd8>)
    uint8_t data[8] = {0};
   13d48:	e9cd 3300 	strd	r3, r3, [sp]
    ARTEMIS_DEBUG_PRINTF("\nPiston Board Information\n");
   13d4c:	f7fd f98c 	bl	11068 <am_util_stdio_printf>
   13d50:	482e      	ldr	r0, [pc, #184]	@ (13e0c <PIS_initialize+0xd4>)
   13d52:	f00a f911 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   13d56:	482f      	ldr	r0, [pc, #188]	@ (13e14 <PIS_initialize+0xdc>)
   13d58:	f7fd f986 	bl	11068 <am_util_stdio_printf>
   13d5c:	482d      	ldr	r0, [pc, #180]	@ (13e14 <PIS_initialize+0xdc>)
   13d5e:	f00a f90b 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("System Identification\t: ");
   13d62:	482d      	ldr	r0, [pc, #180]	@ (13e18 <PIS_initialize+0xe0>)
   13d64:	f7fd f980 	bl	11068 <am_util_stdio_printf>
   13d68:	482b      	ldr	r0, [pc, #172]	@ (13e18 <PIS_initialize+0xe0>)
   13d6a:	f00a f905 	bl	1df78 <datalogger_log_debug>
    artemis_piston_i2c_read(addr, data, 8);
   13d6e:	2208      	movs	r2, #8
   13d70:	20e8      	movs	r0, #232	@ 0xe8
   13d72:	4669      	mov	r1, sp
   13d74:	f007 fe18 	bl	1b9a8 <artemis_piston_i2c_read>
    for (uint8_t i=0; i<8; i++){
   13d78:	f10d 34ff 	add.w	r4, sp, #4294967295
   13d7c:	f10d 0607 	add.w	r6, sp, #7
        ARTEMIS_DEBUG_PRINTF("%c", (char)data[i]);
   13d80:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   13d84:	4628      	mov	r0, r5
   13d86:	f7fd f96f 	bl	11068 <am_util_stdio_printf>
   13d8a:	7821      	ldrb	r1, [r4, #0]
   13d8c:	4628      	mov	r0, r5
   13d8e:	f00a f8f3 	bl	1df78 <datalogger_log_debug>
    for (uint8_t i=0; i<8; i++){
   13d92:	42b4      	cmp	r4, r6
   13d94:	d1f4      	bne.n	13d80 <PIS_initialize+0x48>
    ARTEMIS_DEBUG_PRINTF("\n");
   13d96:	4821      	ldr	r0, [pc, #132]	@ (13e1c <PIS_initialize+0xe4>)
   13d98:	f7fd f966 	bl	11068 <am_util_stdio_printf>
   13d9c:	481f      	ldr	r0, [pc, #124]	@ (13e1c <PIS_initialize+0xe4>)
   13d9e:	f00a f8eb 	bl	1df78 <datalogger_log_debug>
    am_hal_systick_delay_us(50000);
   13da2:	f24c 3050 	movw	r0, #50000	@ 0xc350
   13da6:	f00d f805 	bl	20db4 <am_hal_systick_delay_us>
    memset(data, 0, 8);
   13daa:	2300      	movs	r3, #0
    artemis_piston_i2c_read(addr, data, 8);
   13dac:	2208      	movs	r2, #8
   13dae:	4669      	mov	r1, sp
   13db0:	20f8      	movs	r0, #248	@ 0xf8
    memset(data, 0, 8);
   13db2:	e9cd 3300 	strd	r3, r3, [sp]
    artemis_piston_i2c_read(addr, data, 8);
   13db6:	f007 fdf7 	bl	1b9a8 <artemis_piston_i2c_read>
    ARTEMIS_DEBUG_PRINTF("Firmware build year\t: %u\n", year_build);
   13dba:	f8bd 7000 	ldrh.w	r7, [sp]
    uint8_t maj = data[2];
   13dbe:	f89d 4002 	ldrb.w	r4, [sp, #2]
    uint8_t min = data[3];
   13dc2:	f89d 5003 	ldrb.w	r5, [sp, #3]
    uint32_t build = data[7]<<24 | data[6]<<16 | data[5]<<8 | data[4];
   13dc6:	9e01      	ldr	r6, [sp, #4]
    ARTEMIS_DEBUG_PRINTF("Firmware build year\t: %u\n", year_build);
   13dc8:	4815      	ldr	r0, [pc, #84]	@ (13e20 <PIS_initialize+0xe8>)
   13dca:	4639      	mov	r1, r7
   13dcc:	f7fd f94c 	bl	11068 <am_util_stdio_printf>
   13dd0:	4639      	mov	r1, r7
   13dd2:	4813      	ldr	r0, [pc, #76]	@ (13e20 <PIS_initialize+0xe8>)
   13dd4:	f00a f8d0 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("Firmware version   \t: v%u.%u.%u\n", maj, min, build);
   13dd8:	4633      	mov	r3, r6
   13dda:	462a      	mov	r2, r5
   13ddc:	4621      	mov	r1, r4
   13dde:	4811      	ldr	r0, [pc, #68]	@ (13e24 <PIS_initialize+0xec>)
   13de0:	f7fd f942 	bl	11068 <am_util_stdio_printf>
   13de4:	4633      	mov	r3, r6
   13de6:	462a      	mov	r2, r5
   13de8:	4621      	mov	r1, r4
   13dea:	480e      	ldr	r0, [pc, #56]	@ (13e24 <PIS_initialize+0xec>)
   13dec:	f00a f8c4 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\n");
   13df0:	480a      	ldr	r0, [pc, #40]	@ (13e1c <PIS_initialize+0xe4>)
   13df2:	f7fd f939 	bl	11068 <am_util_stdio_printf>
   13df6:	4809      	ldr	r0, [pc, #36]	@ (13e1c <PIS_initialize+0xe4>)
   13df8:	f00a f8be 	bl	1df78 <datalogger_log_debug>
    am_hal_systick_delay_us(50000);
   13dfc:	f24c 3050 	movw	r0, #50000	@ 0xc350
   13e00:	f00c ffd8 	bl	20db4 <am_hal_systick_delay_us>
}
   13e04:	2001      	movs	r0, #1
   13e06:	b003      	add	sp, #12
   13e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e0a:	bf00      	nop
   13e0c:	0002b330 	.word	0x0002b330
   13e10:	0002a9ac 	.word	0x0002a9ac
   13e14:	0002b34c 	.word	0x0002b34c
   13e18:	0002b374 	.word	0x0002b374
   13e1c:	000305a0 	.word	0x000305a0
   13e20:	0002b390 	.word	0x0002b390
   13e24:	0002b3ac 	.word	0x0002b3ac

00013e28 <PIS_uninitialize>:
    artemis_piston_i2c_uninitialize();
   13e28:	f007 bd72 	b.w	1b910 <artemis_piston_i2c_uninitialize>

00013e2c <PIS_task_move_length>:
{
   13e2c:	b500      	push	{lr}
   13e2e:	4602      	mov	r2, r0
   13e30:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_length,
   13e32:	2303      	movs	r3, #3
   13e34:	e9cd 3200 	strd	r3, r2, [sp]
   13e38:	490c      	ldr	r1, [pc, #48]	@ (13e6c <PIS_task_move_length+0x40>)
   13e3a:	480d      	ldr	r0, [pc, #52]	@ (13e70 <PIS_task_move_length+0x44>)
   13e3c:	2300      	movs	r3, #0
   13e3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
   13e42:	f7fa fdc5 	bl	e9d0 <xTaskCreate>
   13e46:	2801      	cmp	r0, #1
   13e48:	d102      	bne.n	13e50 <PIS_task_move_length+0x24>
}
   13e4a:	b003      	add	sp, #12
   13e4c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e50:	f04f 0380 	mov.w	r3, #128	@ 0x80
   13e54:	f383 8811 	msr	BASEPRI, r3
   13e58:	f3bf 8f6f 	isb	sy
   13e5c:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_length,
   13e60:	4904      	ldr	r1, [pc, #16]	@ (13e74 <PIS_task_move_length+0x48>)
   13e62:	4805      	ldr	r0, [pc, #20]	@ (13e78 <PIS_task_move_length+0x4c>)
   13e64:	2277      	movs	r2, #119	@ 0x77
   13e66:	f7fd f8ff 	bl	11068 <am_util_stdio_printf>
   13e6a:	e7fe      	b.n	13e6a <PIS_task_move_length+0x3e>
   13e6c:	0002b3d0 	.word	0x0002b3d0
   13e70:	00013341 	.word	0x00013341
   13e74:	0002b0bc 	.word	0x0002b0bc
   13e78:	0002a268 	.word	0x0002a268

00013e7c <PIS_task_move_volume>:
{
   13e7c:	b500      	push	{lr}
   13e7e:	4602      	mov	r2, r0
   13e80:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_volume,
   13e82:	2304      	movs	r3, #4
   13e84:	e9cd 3200 	strd	r3, r2, [sp]
   13e88:	490c      	ldr	r1, [pc, #48]	@ (13ebc <PIS_task_move_volume+0x40>)
   13e8a:	480d      	ldr	r0, [pc, #52]	@ (13ec0 <PIS_task_move_volume+0x44>)
   13e8c:	2300      	movs	r3, #0
   13e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
   13e92:	f7fa fd9d 	bl	e9d0 <xTaskCreate>
   13e96:	2801      	cmp	r0, #1
   13e98:	d102      	bne.n	13ea0 <PIS_task_move_volume+0x24>
}
   13e9a:	b003      	add	sp, #12
   13e9c:	f85d fb04 	ldr.w	pc, [sp], #4
   13ea0:	f04f 0380 	mov.w	r3, #128	@ 0x80
   13ea4:	f383 8811 	msr	BASEPRI, r3
   13ea8:	f3bf 8f6f 	isb	sy
   13eac:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_volume,
   13eb0:	4904      	ldr	r1, [pc, #16]	@ (13ec4 <PIS_task_move_volume+0x48>)
   13eb2:	4805      	ldr	r0, [pc, #20]	@ (13ec8 <PIS_task_move_volume+0x4c>)
   13eb4:	227f      	movs	r2, #127	@ 0x7f
   13eb6:	f7fd f8d7 	bl	11068 <am_util_stdio_printf>
   13eba:	e7fe      	b.n	13eba <PIS_task_move_volume+0x3e>
   13ebc:	0002b3e8 	.word	0x0002b3e8
   13ec0:	00013861 	.word	0x00013861
   13ec4:	0002b0bc 	.word	0x0002b0bc
   13ec8:	0002a268 	.word	0x0002a268

00013ecc <PIS_task_move_full>:
{
   13ecc:	b500      	push	{lr}
   13ece:	4602      	mov	r2, r0
   13ed0:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_full,
   13ed2:	2304      	movs	r3, #4
   13ed4:	e9cd 3200 	strd	r3, r2, [sp]
   13ed8:	490c      	ldr	r1, [pc, #48]	@ (13f0c <PIS_task_move_full+0x40>)
   13eda:	480d      	ldr	r0, [pc, #52]	@ (13f10 <PIS_task_move_full+0x44>)
   13edc:	2300      	movs	r3, #0
   13ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
   13ee2:	f7fa fd75 	bl	e9d0 <xTaskCreate>
   13ee6:	2801      	cmp	r0, #1
   13ee8:	d102      	bne.n	13ef0 <PIS_task_move_full+0x24>
}
   13eea:	b003      	add	sp, #12
   13eec:	f85d fb04 	ldr.w	pc, [sp], #4
   13ef0:	f04f 0380 	mov.w	r3, #128	@ 0x80
   13ef4:	f383 8811 	msr	BASEPRI, r3
   13ef8:	f3bf 8f6f 	isb	sy
   13efc:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_full,
   13f00:	4904      	ldr	r1, [pc, #16]	@ (13f14 <PIS_task_move_full+0x48>)
   13f02:	4805      	ldr	r0, [pc, #20]	@ (13f18 <PIS_task_move_full+0x4c>)
   13f04:	2287      	movs	r2, #135	@ 0x87
   13f06:	f7fd f8af 	bl	11068 <am_util_stdio_printf>
   13f0a:	e7fe      	b.n	13f0a <PIS_task_move_full+0x3e>
   13f0c:	0002b400 	.word	0x0002b400
   13f10:	00013b99 	.word	0x00013b99
   13f14:	0002b0bc 	.word	0x0002b0bc
   13f18:	0002a268 	.word	0x0002a268

00013f1c <PIS_task_move_zero>:
{
   13f1c:	b500      	push	{lr}
   13f1e:	4602      	mov	r2, r0
   13f20:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_zero,
   13f22:	2304      	movs	r3, #4
   13f24:	e9cd 3200 	strd	r3, r2, [sp]
   13f28:	490c      	ldr	r1, [pc, #48]	@ (13f5c <PIS_task_move_zero+0x40>)
   13f2a:	480d      	ldr	r0, [pc, #52]	@ (13f60 <PIS_task_move_zero+0x44>)
   13f2c:	2300      	movs	r3, #0
   13f2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
   13f32:	f7fa fd4d 	bl	e9d0 <xTaskCreate>
   13f36:	2801      	cmp	r0, #1
   13f38:	d102      	bne.n	13f40 <PIS_task_move_zero+0x24>
}
   13f3a:	b003      	add	sp, #12
   13f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f40:	f04f 0380 	mov.w	r3, #128	@ 0x80
   13f44:	f383 8811 	msr	BASEPRI, r3
   13f48:	f3bf 8f6f 	isb	sy
   13f4c:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t) task_move_piston_to_zero,
   13f50:	4904      	ldr	r1, [pc, #16]	@ (13f64 <PIS_task_move_zero+0x48>)
   13f52:	4805      	ldr	r0, [pc, #20]	@ (13f68 <PIS_task_move_zero+0x4c>)
   13f54:	228f      	movs	r2, #143	@ 0x8f
   13f56:	f7fd f887 	bl	11068 <am_util_stdio_printf>
   13f5a:	e7fe      	b.n	13f5a <PIS_task_move_zero+0x3e>
   13f5c:	0002b418 	.word	0x0002b418
   13f60:	000136c5 	.word	0x000136c5
   13f64:	0002b0bc 	.word	0x0002b0bc
   13f68:	0002a268 	.word	0x0002a268

00013f6c <PIS_task_delete>:
{
   13f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            ARTEMIS_DEBUG_PRINTF("PISTON :: Task is Suspended\n");
   13f70:	4f1f      	ldr	r7, [pc, #124]	@ (13ff0 <PIS_task_delete+0x84>)
            ARTEMIS_DEBUG_PRINTF("PISTON :: Task is in eRunning state, wait\n");
   13f72:	4e20      	ldr	r6, [pc, #128]	@ (13ff4 <PIS_task_delete+0x88>)
            if (pistonRun)
   13f74:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 13ffc <PIS_task_delete+0x90>
{
   13f78:	4605      	mov	r5, r0
   13f7a:	2414      	movs	r4, #20
        eTaskState eState = eTaskGetState(xHandle);
   13f7c:	4628      	mov	r0, r5
   13f7e:	f7fa fe95 	bl	ecac <eTaskGetState>
        if ( (eState==eReady) || (eState==eBlocked) )
   13f82:	2804      	cmp	r0, #4
   13f84:	d80b      	bhi.n	13f9e <PIS_task_delete+0x32>
   13f86:	e8df f000 	tbb	[pc, r0]
   13f8a:	0313      	.short	0x0313
   13f8c:	2803      	.short	0x2803
   13f8e:	1d          	.byte	0x1d
   13f8f:	00          	.byte	0x00
            if (pistonRun)
   13f90:	f898 3000 	ldrb.w	r3, [r8]
                pistonRun = false;
   13f94:	2200      	movs	r2, #0
        vTaskDelay(xDelay100ms);
   13f96:	2064      	movs	r0, #100	@ 0x64
            if (pistonRun)
   13f98:	b113      	cbz	r3, 13fa0 <PIS_task_delete+0x34>
                pistonRun = false;
   13f9a:	f888 2000 	strb.w	r2, [r8]
        vTaskDelay(xDelay100ms);
   13f9e:	2064      	movs	r0, #100	@ 0x64
   13fa0:	f7fb fa20 	bl	f3e4 <vTaskDelay>
    while (!delete && wait < 20)
   13fa4:	1e63      	subs	r3, r4, #1
   13fa6:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
   13faa:	d1e7      	bne.n	13f7c <PIS_task_delete+0x10>
}
   13fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ARTEMIS_DEBUG_PRINTF("PISTON :: Task is in eRunning state, wait\n");
   13fb0:	4630      	mov	r0, r6
   13fb2:	f7fd f859 	bl	11068 <am_util_stdio_printf>
   13fb6:	4630      	mov	r0, r6
   13fb8:	f009 ffde 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(xDelay100ms);
   13fbc:	2064      	movs	r0, #100	@ 0x64
   13fbe:	f7fb fa11 	bl	f3e4 <vTaskDelay>
    while (!delete && wait < 20)
   13fc2:	e7ef      	b.n	13fa4 <PIS_task_delete+0x38>
            ARTEMIS_DEBUG_PRINTF("PISTON :: Task is Deleted\n");
   13fc4:	480c      	ldr	r0, [pc, #48]	@ (13ff8 <PIS_task_delete+0x8c>)
   13fc6:	f7fd f84f 	bl	11068 <am_util_stdio_printf>
   13fca:	480b      	ldr	r0, [pc, #44]	@ (13ff8 <PIS_task_delete+0x8c>)
   13fcc:	f009 ffd4 	bl	1df78 <datalogger_log_debug>
}
   13fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        vTaskDelay(xDelay100ms);
   13fd4:	2064      	movs	r0, #100	@ 0x64
   13fd6:	f7fb ba05 	b.w	f3e4 <vTaskDelay>
            ARTEMIS_DEBUG_PRINTF("PISTON :: Task is Suspended\n");
   13fda:	4638      	mov	r0, r7
   13fdc:	f7fd f844 	bl	11068 <am_util_stdio_printf>
   13fe0:	4638      	mov	r0, r7
   13fe2:	f009 ffc9 	bl	1df78 <datalogger_log_debug>
            vTaskDelete(xHandle);
   13fe6:	4628      	mov	r0, r5
   13fe8:	f7fa fde8 	bl	ebbc <vTaskDelete>
        vTaskDelay(xDelay100ms);
   13fec:	e7d7      	b.n	13f9e <PIS_task_delete+0x32>
   13fee:	bf00      	nop
   13ff0:	0002b45c 	.word	0x0002b45c
   13ff4:	0002b430 	.word	0x0002b430
   13ff8:	0002b47c 	.word	0x0002b47c
   13ffc:	1000b934 	.word	0x1000b934

00014000 <PIS_Get_Volume>:
{
   14000:	b510      	push	{r4, lr}
   14002:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
   14004:	f7f9 f85e 	bl	d0c4 <vPortEnterCritical>
    *volume = piston.volume;
   14008:	4b03      	ldr	r3, [pc, #12]	@ (14018 <PIS_Get_Volume+0x18>)
   1400a:	691b      	ldr	r3, [r3, #16]
   1400c:	6023      	str	r3, [r4, #0]
    taskEXIT_CRITICAL();
   1400e:	f7f9 f885 	bl	d11c <vPortExitCritical>
}
   14012:	2001      	movs	r0, #1
   14014:	bd10      	pop	{r4, pc}
   14016:	bf00      	nop
   14018:	1000b938 	.word	0x1000b938

0001401c <PIS_Get_Length>:
{
   1401c:	b510      	push	{r4, lr}
   1401e:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
   14020:	f7f9 f850 	bl	d0c4 <vPortEnterCritical>
    *length = piston.length;
   14024:	4b03      	ldr	r3, [pc, #12]	@ (14034 <PIS_Get_Length+0x18>)
   14026:	695b      	ldr	r3, [r3, #20]
   14028:	6023      	str	r3, [r4, #0]
    taskEXIT_CRITICAL();
   1402a:	f7f9 f877 	bl	d11c <vPortExitCritical>
}
   1402e:	2001      	movs	r0, #1
   14030:	bd10      	pop	{r4, pc}
   14032:	bf00      	nop
   14034:	1000b938 	.word	0x1000b938

00014038 <PIS_set_piston_rate>:
    if (rate > 0 && rate <= 10)
   14038:	1e43      	subs	r3, r0, #1
   1403a:	2b09      	cmp	r3, #9
   1403c:	d900      	bls.n	14040 <PIS_set_piston_rate+0x8>
   1403e:	4770      	bx	lr
{
   14040:	b510      	push	{r4, lr}
   14042:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("PISTON :: Setting rate = %uHz\n", rate);
   14044:	4621      	mov	r1, r4
   14046:	4805      	ldr	r0, [pc, #20]	@ (1405c <PIS_set_piston_rate+0x24>)
   14048:	f7fd f80e 	bl	11068 <am_util_stdio_printf>
   1404c:	4803      	ldr	r0, [pc, #12]	@ (1405c <PIS_set_piston_rate+0x24>)
   1404e:	4621      	mov	r1, r4
   14050:	f009 ff92 	bl	1df78 <datalogger_log_debug>
        piston.rtos.rate = rate;
   14054:	4b02      	ldr	r3, [pc, #8]	@ (14060 <PIS_set_piston_rate+0x28>)
   14056:	801c      	strh	r4, [r3, #0]
}
   14058:	bd10      	pop	{r4, pc}
   1405a:	bf00      	nop
   1405c:	0002b498 	.word	0x0002b498
   14060:	1000b938 	.word	0x1000b938

00014064 <PIS_set_volume>:
    if( (volume > 0) && (volume < 1000) )
   14064:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   14068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1406c:	dd0f      	ble.n	1408e <PIS_set_volume+0x2a>
{
   1406e:	b538      	push	{r3, r4, r5, lr}
    if( (volume > 0) && (volume < 1000) )
   14070:	eddf 7a13 	vldr	s15, [pc, #76]	@ 140c0 <PIS_set_volume+0x5c>
   14074:	eeb4 0ae7 	vcmpe.f32	s0, s15
   14078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   1407c:	ed2d 8b02 	vpush	{d8}
   14080:	eeb0 8a40 	vmov.f32	s16, s0
    if( (volume > 0) && (volume < 1000) )
   14084:	d405      	bmi.n	14092 <PIS_set_volume+0x2e>
}
   14086:	ecbd 8b02 	vpop	{d8}
    bool retVal = false;
   1408a:	2000      	movs	r0, #0
}
   1408c:	bd38      	pop	{r3, r4, r5, pc}
    bool retVal = false;
   1408e:	2000      	movs	r0, #0
}
   14090:	4770      	bx	lr
        ARTEMIS_DEBUG_PRINTF("PISTON :: Volume, set-point = %0.4f\n", volume);
   14092:	ee10 0a10 	vmov	r0, s0
   14096:	f7f8 f997 	bl	c3c8 <__aeabi_f2d>
   1409a:	4604      	mov	r4, r0
   1409c:	460d      	mov	r5, r1
   1409e:	460b      	mov	r3, r1
   140a0:	4622      	mov	r2, r4
   140a2:	4808      	ldr	r0, [pc, #32]	@ (140c4 <PIS_set_volume+0x60>)
   140a4:	f7fc ffe0 	bl	11068 <am_util_stdio_printf>
   140a8:	4806      	ldr	r0, [pc, #24]	@ (140c4 <PIS_set_volume+0x60>)
   140aa:	462b      	mov	r3, r5
   140ac:	4622      	mov	r2, r4
   140ae:	f009 ff63 	bl	1df78 <datalogger_log_debug>
        piston.setpoint_v = volume;
   140b2:	4b05      	ldr	r3, [pc, #20]	@ (140c8 <PIS_set_volume+0x64>)
   140b4:	ed83 8a02 	vstr	s16, [r3, #8]
}
   140b8:	ecbd 8b02 	vpop	{d8}
        retVal = true;
   140bc:	2001      	movs	r0, #1
}
   140be:	bd38      	pop	{r3, r4, r5, pc}
   140c0:	447a0000 	.word	0x447a0000
   140c4:	0002b4b8 	.word	0x0002b4b8
   140c8:	1000b938 	.word	0x1000b938

000140cc <PIS_set_length>:
    if( (length >= 0) && (length < 12.0) )
   140cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   140d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140d4:	db0f      	blt.n	140f6 <PIS_set_length+0x2a>
{
   140d6:	b538      	push	{r3, r4, r5, lr}
    if( (length >= 0) && (length < 12.0) )
   140d8:	eef2 7a08 	vmov.f32	s15, #40	@ 0x41400000  12.0
   140dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   140e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   140e4:	ed2d 8b02 	vpush	{d8}
   140e8:	eeb0 8a40 	vmov.f32	s16, s0
    if( (length >= 0) && (length < 12.0) )
   140ec:	d405      	bmi.n	140fa <PIS_set_length+0x2e>
}
   140ee:	ecbd 8b02 	vpop	{d8}
    bool retVal = false;
   140f2:	2000      	movs	r0, #0
}
   140f4:	bd38      	pop	{r3, r4, r5, pc}
    bool retVal = false;
   140f6:	2000      	movs	r0, #0
}
   140f8:	4770      	bx	lr
        ARTEMIS_DEBUG_PRINTF("PISTON :: Length, set-point = %0.4f\n", length);
   140fa:	ee10 0a10 	vmov	r0, s0
   140fe:	f7f8 f963 	bl	c3c8 <__aeabi_f2d>
   14102:	4604      	mov	r4, r0
   14104:	460d      	mov	r5, r1
   14106:	460b      	mov	r3, r1
   14108:	4622      	mov	r2, r4
   1410a:	4807      	ldr	r0, [pc, #28]	@ (14128 <PIS_set_length+0x5c>)
   1410c:	f7fc ffac 	bl	11068 <am_util_stdio_printf>
   14110:	4805      	ldr	r0, [pc, #20]	@ (14128 <PIS_set_length+0x5c>)
   14112:	462b      	mov	r3, r5
   14114:	4622      	mov	r2, r4
   14116:	f009 ff2f 	bl	1df78 <datalogger_log_debug>
        piston.setpoint_l = length;
   1411a:	4b04      	ldr	r3, [pc, #16]	@ (1412c <PIS_set_length+0x60>)
   1411c:	ed83 8a03 	vstr	s16, [r3, #12]
}
   14120:	ecbd 8b02 	vpop	{d8}
        retVal = true;
   14124:	2001      	movs	r0, #1
}
   14126:	bd38      	pop	{r3, r4, r5, pc}
   14128:	0002b4e0 	.word	0x0002b4e0
   1412c:	1000b938 	.word	0x1000b938

00014130 <PIS_stop>:
{
   14130:	b510      	push	{r4, lr}
    uint8_t cmd[5] = {addr, 0x00, 0x01, 0x00, 0x01};
   14132:	2401      	movs	r4, #1
{
   14134:	b082      	sub	sp, #8
    uint8_t cmd[5] = {addr, 0x00, 0x01, 0x00, 0x01};
   14136:	4b07      	ldr	r3, [pc, #28]	@ (14154 <PIS_stop+0x24>)
   14138:	9300      	str	r3, [sp, #0]
    artemis_piston_set_write_mode(true);
   1413a:	4620      	mov	r0, r4
    uint8_t cmd[5] = {addr, 0x00, 0x01, 0x00, 0x01};
   1413c:	f88d 4004 	strb.w	r4, [sp, #4]
    artemis_piston_set_write_mode(true);
   14140:	f007 fc70 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 5, true);
   14144:	4622      	mov	r2, r4
   14146:	2105      	movs	r1, #5
   14148:	4668      	mov	r0, sp
   1414a:	f007 fbe9 	bl	1b920 <artemis_piston_i2c_send_msg>
}
   1414e:	b002      	add	sp, #8
   14150:	bd10      	pop	{r4, pc}
   14152:	bf00      	nop
   14154:	00010063 	.word	0x00010063

00014158 <PIS_Reset>:
{
   14158:	b500      	push	{lr}
   1415a:	b083      	sub	sp, #12
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   1415c:	f64c 2377 	movw	r3, #51831	@ 0xca77
    artemis_piston_set_write_mode(true);
   14160:	2001      	movs	r0, #1
    uint8_t cmd[2] = {addr, PISTON_I2C_W_RESET_KEY};
   14162:	f8ad 3004 	strh.w	r3, [sp, #4]
    artemis_piston_set_write_mode(true);
   14166:	f007 fc5d 	bl	1ba24 <artemis_piston_set_write_mode>
    artemis_piston_i2c_send_msg(cmd, 2, true);
   1416a:	2201      	movs	r2, #1
   1416c:	2102      	movs	r1, #2
   1416e:	a801      	add	r0, sp, #4
   14170:	f007 fbd6 	bl	1b920 <artemis_piston_i2c_send_msg>
}
   14174:	b003      	add	sp, #12
   14176:	f85d fb04 	ldr.w	pc, [sp], #4
   1417a:	bf00      	nop
   1417c:	0000      	movs	r0, r0
	...

00014180 <CTRL_set_lcp_density>:
    //ARTEMIS_DEBUG_PRINTF("LCP Depth = %0.4f\n", depth);
    return depth;
}

float CTRL_set_lcp_density(float density)
{
   14180:	b538      	push	{r3, r4, r5, lr}
    /* density = mass / volume , in kg/m3 */
    /* volume = mass / density */

    settings.water_density = density;
   14182:	4b17      	ldr	r3, [pc, #92]	@ (141e0 <CTRL_set_lcp_density+0x60>)
   14184:	ed83 0a05 	vstr	s0, [r3, #20]
    float volume = (settings.mass * 0.453592) / settings.water_density;
   14188:	6818      	ldr	r0, [r3, #0]
{
   1418a:	ee10 4a10 	vmov	r4, s0
    float volume = (settings.mass * 0.453592) / settings.water_density;
   1418e:	f7f8 f91b 	bl	c3c8 <__aeabi_f2d>
   14192:	a30f      	add	r3, pc, #60	@ (adr r3, 141d0 <CTRL_set_lcp_density+0x50>)
   14194:	e9d3 2300 	ldrd	r2, r3, [r3]
   14198:	f7f8 f96e 	bl	c478 <__aeabi_dmul>
   1419c:	4602      	mov	r2, r0
   1419e:	4620      	mov	r0, r4
   141a0:	460d      	mov	r5, r1
   141a2:	4614      	mov	r4, r2
   141a4:	f7f8 f910 	bl	c3c8 <__aeabi_f2d>
   141a8:	4602      	mov	r2, r0
   141aa:	460b      	mov	r3, r1
   141ac:	4620      	mov	r0, r4
   141ae:	4629      	mov	r1, r5
   141b0:	f7f8 fa8c 	bl	c6cc <__aeabi_ddiv>
   141b4:	f7f8 fc1a 	bl	c9ec <__aeabi_d2f>

    /* convert volume from m³ to in³, 1m³ = 61023.7 in³ and mass to kg */
    volume *= 61023.7 ;
   141b8:	f7f8 f906 	bl	c3c8 <__aeabi_f2d>
   141bc:	a306      	add	r3, pc, #24	@ (adr r3, 141d8 <CTRL_set_lcp_density+0x58>)
   141be:	e9d3 2300 	ldrd	r2, r3, [r3]
   141c2:	f7f8 f959 	bl	c478 <__aeabi_dmul>
   141c6:	f7f8 fc11 	bl	c9ec <__aeabi_d2f>
    //ARTEMIS_DEBUG_PRINTF("LCP Density = %0.4f\n", density);
    return volume;
}
   141ca:	ee00 0a10 	vmov	s0, r0
   141ce:	bd38      	pop	{r3, r4, r5, pc}
   141d0:	bd6e8af8 	.word	0xbd6e8af8
   141d4:	3fdd07a6 	.word	0x3fdd07a6
   141d8:	66666666 	.word	0x66666666
   141dc:	40edcbf6 	.word	0x40edcbf6
   141e0:	10002320 	.word	0x10002320
   141e4:	00000000 	.word	0x00000000

000141e8 <CTRL_calculate_lcp_density>:

float CTRL_calculate_lcp_density(float volume)
{
    /* density = mass / volume , in kg/m3 */
    /* convert volume from in³ to m³, 1 in³=0.000016387m³ and mass to kg */
    float density = (settings.mass * 0.453592) / (volume*0.000016387);
   141e8:	4b15      	ldr	r3, [pc, #84]	@ (14240 <CTRL_calculate_lcp_density+0x58>)
{
   141ea:	b570      	push	{r4, r5, r6, lr}
    float density = (settings.mass * 0.453592) / (volume*0.000016387);
   141ec:	6818      	ldr	r0, [r3, #0]
{
   141ee:	ee10 6a10 	vmov	r6, s0
    float density = (settings.mass * 0.453592) / (volume*0.000016387);
   141f2:	f7f8 f8e9 	bl	c3c8 <__aeabi_f2d>
   141f6:	a30e      	add	r3, pc, #56	@ (adr r3, 14230 <CTRL_calculate_lcp_density+0x48>)
   141f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   141fc:	f7f8 f93c 	bl	c478 <__aeabi_dmul>
   14200:	4604      	mov	r4, r0
   14202:	4630      	mov	r0, r6
   14204:	460d      	mov	r5, r1
   14206:	f7f8 f8df 	bl	c3c8 <__aeabi_f2d>
   1420a:	a30b      	add	r3, pc, #44	@ (adr r3, 14238 <CTRL_calculate_lcp_density+0x50>)
   1420c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14210:	f7f8 f932 	bl	c478 <__aeabi_dmul>
   14214:	4602      	mov	r2, r0
   14216:	460b      	mov	r3, r1
   14218:	4620      	mov	r0, r4
   1421a:	4629      	mov	r1, r5
   1421c:	f7f8 fa56 	bl	c6cc <__aeabi_ddiv>
   14220:	f7f8 fbe4 	bl	c9ec <__aeabi_d2f>
    //ARTEMIS_DEBUG_PRINTF("LCP Density = %0.4f\n", density);
    return density;
}
   14224:	ee00 0a10 	vmov	s0, r0
   14228:	bd70      	pop	{r4, r5, r6, pc}
   1422a:	bf00      	nop
   1422c:	f3af 8000 	nop.w
   14230:	bd6e8af8 	.word	0xbd6e8af8
   14234:	3fdd07a6 	.word	0x3fdd07a6
   14238:	10b5b867 	.word	0x10b5b867
   1423c:	3ef12eda 	.word	0x3ef12eda
   14240:	10002320 	.word	0x10002320
   14244:	00000000 	.word	0x00000000

00014248 <CTRL_calculate_piston_position>:

float CTRL_calculate_piston_position(float pressure, float temp)
{
   14248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    /*  guess volume_minimum = lcp_volume_min * [(1-r*pressure)+(a*(t0-temperatre))]
     *  r = gamma -> volume compressibility coefficient
     *  a = alpha -> linear expansion cofficient
     *  t0 = room temperature
     */
    float volume_min = settings.volume.min;
   1424c:	4c54      	ldr	r4, [pc, #336]	@ (143a0 <CTRL_calculate_piston_position+0x158>)
    volume_min *= ((1-settings.compress_coefficient*pressure)+(settings.thermal_coefficient*(25.0 - temp)));

    ARTEMIS_DEBUG_PRINTF("LCP Piston minimum volume = %0.4f kg/m³\n", volume_min);
   1424e:	4d55      	ldr	r5, [pc, #340]	@ (143a4 <CTRL_calculate_piston_position+0x15c>)
    volume_min *= ((1-settings.compress_coefficient*pressure)+(settings.thermal_coefficient*(25.0 - temp)));
   14250:	69a0      	ldr	r0, [r4, #24]
{
   14252:	ed2d 8b02 	vpush	{d8}
   14256:	ee10 9a90 	vmov	r9, s1
   1425a:	eef0 8a40 	vmov.f32	s17, s0
    volume_min *= ((1-settings.compress_coefficient*pressure)+(settings.thermal_coefficient*(25.0 - temp)));
   1425e:	f7f8 f8b3 	bl	c3c8 <__aeabi_f2d>
   14262:	edd4 7a04 	vldr	s15, [r4, #16]
   14266:	4606      	mov	r6, r0
   14268:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
   1426c:	68e0      	ldr	r0, [r4, #12]
   1426e:	eea7 8ae8 	vfms.f32	s16, s15, s17
   14272:	460f      	mov	r7, r1
   14274:	f7f8 f8a8 	bl	c3c8 <__aeabi_f2d>
   14278:	4602      	mov	r2, r0
   1427a:	4648      	mov	r0, r9
   1427c:	4690      	mov	r8, r2
   1427e:	4689      	mov	r9, r1
   14280:	f7f8 f8a2 	bl	c3c8 <__aeabi_f2d>
   14284:	4602      	mov	r2, r0
   14286:	460b      	mov	r3, r1
   14288:	2000      	movs	r0, #0
   1428a:	4947      	ldr	r1, [pc, #284]	@ (143a8 <CTRL_calculate_piston_position+0x160>)
   1428c:	f7f7 ff3c 	bl	c108 <__aeabi_dsub>
   14290:	4602      	mov	r2, r0
   14292:	460b      	mov	r3, r1
   14294:	4640      	mov	r0, r8
   14296:	4649      	mov	r1, r9
   14298:	f7f8 f8ee 	bl	c478 <__aeabi_dmul>
   1429c:	4680      	mov	r8, r0
   1429e:	ee18 0a10 	vmov	r0, s16
   142a2:	4689      	mov	r9, r1
   142a4:	f7f8 f890 	bl	c3c8 <__aeabi_f2d>
   142a8:	4602      	mov	r2, r0
   142aa:	460b      	mov	r3, r1
   142ac:	4640      	mov	r0, r8
   142ae:	4649      	mov	r1, r9
   142b0:	f7f7 ff2c 	bl	c10c <__adddf3>
   142b4:	4632      	mov	r2, r6
   142b6:	463b      	mov	r3, r7
   142b8:	f7f8 f8de 	bl	c478 <__aeabi_dmul>
   142bc:	f7f8 fb96 	bl	c9ec <__aeabi_d2f>
   142c0:	ee08 0a10 	vmov	s16, r0
    ARTEMIS_DEBUG_PRINTF("LCP Piston minimum volume = %0.4f kg/m³\n", volume_min);
   142c4:	f7f8 f880 	bl	c3c8 <__aeabi_f2d>
   142c8:	4606      	mov	r6, r0
   142ca:	460f      	mov	r7, r1
   142cc:	460b      	mov	r3, r1
   142ce:	4632      	mov	r2, r6
   142d0:	4628      	mov	r0, r5
   142d2:	f7fc fec9 	bl	11068 <am_util_stdio_printf>
   142d6:	4632      	mov	r2, r6
   142d8:	463b      	mov	r3, r7
   142da:	4628      	mov	r0, r5
   142dc:	f009 fe4c 	bl	1df78 <datalogger_log_debug>

    /* convert to cubic inches for pistonboard, 1m³ = 61023.7in³ */

    float volume_target = (settings.mass * 0.453592) / (settings.water_density);
   142e0:	6820      	ldr	r0, [r4, #0]

    float volume_change = (volume_target - volume_min);

    float position_change = volume_change / (PI * SMALL_PISTON_RADIUS_SQR );

    ARTEMIS_DEBUG_PRINTF("LCP Piston volume change = %0.4f kg/m³\n", volume_change);
   142e2:	4d32      	ldr	r5, [pc, #200]	@ (143ac <CTRL_calculate_piston_position+0x164>)
    float volume_target = (settings.mass * 0.453592) / (settings.water_density);
   142e4:	f7f8 f870 	bl	c3c8 <__aeabi_f2d>
   142e8:	a327      	add	r3, pc, #156	@ (adr r3, 14388 <CTRL_calculate_piston_position+0x140>)
   142ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   142ee:	f7f8 f8c3 	bl	c478 <__aeabi_dmul>
   142f2:	4606      	mov	r6, r0
   142f4:	6960      	ldr	r0, [r4, #20]
   142f6:	460f      	mov	r7, r1
   142f8:	f7f8 f866 	bl	c3c8 <__aeabi_f2d>
   142fc:	4602      	mov	r2, r0
   142fe:	460b      	mov	r3, r1
   14300:	4630      	mov	r0, r6
   14302:	4639      	mov	r1, r7
   14304:	f7f8 f9e2 	bl	c6cc <__aeabi_ddiv>
   14308:	f7f8 fb70 	bl	c9ec <__aeabi_d2f>
    volume_target *= 61023.7;
   1430c:	f7f8 f85c 	bl	c3c8 <__aeabi_f2d>
   14310:	a31f      	add	r3, pc, #124	@ (adr r3, 14390 <CTRL_calculate_piston_position+0x148>)
   14312:	e9d3 2300 	ldrd	r2, r3, [r3]
   14316:	f7f8 f8af 	bl	c478 <__aeabi_dmul>
   1431a:	f7f8 fb67 	bl	c9ec <__aeabi_d2f>
   1431e:	ee07 0a90 	vmov	s15, r0
    float position_change = volume_change / (PI * SMALL_PISTON_RADIUS_SQR );
   14322:	ee77 7ac8 	vsub.f32	s15, s15, s16
   14326:	ee17 0a90 	vmov	r0, s15
   1432a:	f7f8 f84d 	bl	c3c8 <__aeabi_f2d>
   1432e:	a31a      	add	r3, pc, #104	@ (adr r3, 14398 <CTRL_calculate_piston_position+0x150>)
   14330:	e9d3 2300 	ldrd	r2, r3, [r3]
   14334:	4606      	mov	r6, r0
   14336:	460f      	mov	r7, r1
   14338:	f7f8 f9c8 	bl	c6cc <__aeabi_ddiv>
   1433c:	f7f8 fb56 	bl	c9ec <__aeabi_d2f>
    ARTEMIS_DEBUG_PRINTF("LCP Piston volume change = %0.4f kg/m³\n", volume_change);
   14340:	4632      	mov	r2, r6
    float position_change = volume_change / (PI * SMALL_PISTON_RADIUS_SQR );
   14342:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("LCP Piston volume change = %0.4f kg/m³\n", volume_change);
   14344:	463b      	mov	r3, r7
   14346:	4628      	mov	r0, r5
   14348:	f7fc fe8e 	bl	11068 <am_util_stdio_printf>
   1434c:	4632      	mov	r2, r6
   1434e:	463b      	mov	r3, r7
   14350:	4628      	mov	r0, r5
   14352:	f009 fe11 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("LCP Piston position change = %0.4f in\n", position_change);
   14356:	4620      	mov	r0, r4
   14358:	f7f8 f836 	bl	c3c8 <__aeabi_f2d>
   1435c:	4d14      	ldr	r5, [pc, #80]	@ (143b0 <CTRL_calculate_piston_position+0x168>)
   1435e:	4606      	mov	r6, r0
   14360:	460f      	mov	r7, r1
   14362:	460b      	mov	r3, r1
   14364:	4632      	mov	r2, r6
   14366:	4628      	mov	r0, r5
   14368:	f7fc fe7e 	bl	11068 <am_util_stdio_printf>
   1436c:	4632      	mov	r2, r6
   1436e:	463b      	mov	r3, r7
   14370:	4628      	mov	r0, r5
   14372:	f009 fe01 	bl	1df78 <datalogger_log_debug>

    return position_change;
}
   14376:	ecbd 8b02 	vpop	{d8}
   1437a:	ee00 4a10 	vmov	s0, r4
   1437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14382:	bf00      	nop
   14384:	f3af 8000 	nop.w
   14388:	bd6e8af8 	.word	0xbd6e8af8
   1438c:	3fdd07a6 	.word	0x3fdd07a6
   14390:	66666666 	.word	0x66666666
   14394:	40edcbf6 	.word	0x40edcbf6
   14398:	16a64b60 	.word	0x16a64b60
   1439c:	400fcf02 	.word	0x400fcf02
   143a0:	10002320 	.word	0x10002320
   143a4:	0002b508 	.word	0x0002b508
   143a8:	40390000 	.word	0x40390000
   143ac:	0002b534 	.word	0x0002b534
   143b0:	0002b560 	.word	0x0002b560
   143b4:	00000000 	.word	0x00000000

000143b8 <CTRL_calculate_volume_from_length>:

float CTRL_calculate_volume_from_length(float length)
{
    float volume = HOUSING_VOLUME;

    if ((length>0.0f) && (length<=SMALL_PISTON_MAX_LENGTH))
   143b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   143bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   143c0:	dd34      	ble.n	1442c <CTRL_calculate_volume_from_length+0x74>
   143c2:	eef1 7a08 	vmov.f32	s15, #24	@ 0x40c00000  6.0
   143c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   143ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   143ce:	b508      	push	{r3, lr}
    if ((length>0.0f) && (length<=SMALL_PISTON_MAX_LENGTH))
   143d0:	d812      	bhi.n	143f8 <CTRL_calculate_volume_from_length+0x40>
    {
        volume += (PI*SMALL_PISTON_RADIUS_SQR*length);
   143d2:	ee10 0a10 	vmov	r0, s0
   143d6:	f7f7 fff7 	bl	c3c8 <__aeabi_f2d>
   143da:	a318      	add	r3, pc, #96	@ (adr r3, 1443c <CTRL_calculate_volume_from_length+0x84>)
   143dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   143e0:	f7f8 f84a 	bl	c478 <__aeabi_dmul>
   143e4:	a317      	add	r3, pc, #92	@ (adr r3, 14444 <CTRL_calculate_volume_from_length+0x8c>)
   143e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   143ea:	f7f7 fe8f 	bl	c10c <__adddf3>
   143ee:	f7f8 fafd 	bl	c9ec <__aeabi_d2f>
   143f2:	ee00 0a10 	vmov	s0, r0

    /* convert into cubic inches */
    //volume *= 61023.7;
    //ARTEMIS_DEBUG_PRINTF("LCP Length to Volume = %0.4f\n", volume);
    return volume;
}
   143f6:	bd08      	pop	{r3, pc}
    else if ((length>0.0) && (length<=(SMALL_PISTON_MAX_LENGTH+LARGE_PISTON_MAX_LENGTH)))
   143f8:	eef2 7a08 	vmov.f32	s15, #40	@ 0x41400000  12.0
   143fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   14400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14404:	d815      	bhi.n	14432 <CTRL_calculate_volume_from_length+0x7a>
        volume += (PI*SMALL_PISTON_RADIUS_SQR*length);
   14406:	ee10 0a10 	vmov	r0, s0
   1440a:	f7f7 ffdd 	bl	c3c8 <__aeabi_f2d>
   1440e:	a30b      	add	r3, pc, #44	@ (adr r3, 1443c <CTRL_calculate_volume_from_length+0x84>)
   14410:	e9d3 2300 	ldrd	r2, r3, [r3]
   14414:	f7f8 f830 	bl	c478 <__aeabi_dmul>
   14418:	a30c      	add	r3, pc, #48	@ (adr r3, 1444c <CTRL_calculate_volume_from_length+0x94>)
   1441a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1441e:	f7f7 fe75 	bl	c10c <__adddf3>
   14422:	f7f8 fae3 	bl	c9ec <__aeabi_d2f>
   14426:	ee00 0a10 	vmov	s0, r0
}
   1442a:	bd08      	pop	{r3, pc}
    float volume = HOUSING_VOLUME;
   1442c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 14438 <CTRL_calculate_volume_from_length+0x80>
}
   14430:	4770      	bx	lr
    float volume = HOUSING_VOLUME;
   14432:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 14438 <CTRL_calculate_volume_from_length+0x80>
}
   14436:	bd08      	pop	{r3, pc}
   14438:	4423a87c 	.word	0x4423a87c
   1443c:	16a64b60 	.word	0x16a64b60
   14440:	400fcf02 	.word	0x400fcf02
   14444:	80000000 	.word	0x80000000
   14448:	4084750f 	.word	0x4084750f
   1444c:	80000000 	.word	0x80000000
   14450:	408533e9 	.word	0x408533e9
   14454:	00000000 	.word	0x00000000

00014458 <CTRL_calculate_length_from_volume>:

float CTRL_calculate_length_from_volume(float volume)
{
   14458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1445a:	ed2d 8b02 	vpush	{d8}
    float length = 0.0;

    if ( (volume>0.0) && (volume<=HOUSING_VOLUME) )
   1445e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   14462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   14466:	b083      	sub	sp, #12
    if ( (volume>0.0) && (volume<=HOUSING_VOLUME) )
   14468:	dd0d      	ble.n	14486 <CTRL_calculate_length_from_volume+0x2e>
   1446a:	a74b      	add	r7, pc, #300	@ (adr r7, 14598 <CTRL_calculate_length_from_volume+0x140>)
   1446c:	e9d7 6700 	ldrd	r6, r7, [r7]
   14470:	ee10 0a10 	vmov	r0, s0
   14474:	f7f7 ffa8 	bl	c3c8 <__aeabi_f2d>
   14478:	4632      	mov	r2, r6
   1447a:	463b      	mov	r3, r7
   1447c:	4604      	mov	r4, r0
   1447e:	460d      	mov	r5, r1
   14480:	f7f8 fa76 	bl	c970 <__aeabi_dcmple>
   14484:	b198      	cbz	r0, 144ae <CTRL_calculate_length_from_volume+0x56>
    {
        length = 0.0;
   14486:	ed9f 8a40 	vldr	s16, [pc, #256]	@ 14588 <CTRL_calculate_length_from_volume+0x130>
   1448a:	2400      	movs	r4, #0
   1448c:	2500      	movs	r5, #0
        ARTEMIS_DEBUG_PRINTF("LCP Volume = %0.4f, Housing volume = %.4f\n", volume, HOUSING_VOLUME);
        length = (volume/(PI*LARGE_PISTON_RADIUS_SQR))+SMALL_PISTON_MAX_LENGTH ;
    }
    /* convert into inches */
    //length *= 39.3701;
    ARTEMIS_DEBUG_PRINTF("LCP Volume to Length = %0.4f\n", length);
   1448e:	4622      	mov	r2, r4
   14490:	462b      	mov	r3, r5
   14492:	483e      	ldr	r0, [pc, #248]	@ (1458c <CTRL_calculate_length_from_volume+0x134>)
   14494:	f7fc fde8 	bl	11068 <am_util_stdio_printf>
   14498:	483c      	ldr	r0, [pc, #240]	@ (1458c <CTRL_calculate_length_from_volume+0x134>)
   1449a:	4622      	mov	r2, r4
   1449c:	462b      	mov	r3, r5
   1449e:	f009 fd6b 	bl	1df78 <datalogger_log_debug>
    return length;
}
   144a2:	eeb0 0a48 	vmov.f32	s0, s16
   144a6:	b003      	add	sp, #12
   144a8:	ecbd 8b02 	vpop	{d8}
   144ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if ( (volume>0.0) && (volume<=SYSTEM_VOLUME_MAX) )
   144ae:	a32e      	add	r3, pc, #184	@ (adr r3, 14568 <CTRL_calculate_length_from_volume+0x110>)
   144b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   144b4:	4620      	mov	r0, r4
   144b6:	4629      	mov	r1, r5
   144b8:	f7f8 fa5a 	bl	c970 <__aeabi_dcmple>
   144bc:	b1b8      	cbz	r0, 144ee <CTRL_calculate_length_from_volume+0x96>
        volume -= HOUSING_VOLUME;
   144be:	4632      	mov	r2, r6
   144c0:	463b      	mov	r3, r7
   144c2:	4620      	mov	r0, r4
   144c4:	4629      	mov	r1, r5
   144c6:	f7f7 fe1f 	bl	c108 <__aeabi_dsub>
   144ca:	f7f8 fa8f 	bl	c9ec <__aeabi_d2f>
        length = volume/(PI*SMALL_PISTON_RADIUS_SQR);
   144ce:	f7f7 ff7b 	bl	c3c8 <__aeabi_f2d>
   144d2:	a327      	add	r3, pc, #156	@ (adr r3, 14570 <CTRL_calculate_length_from_volume+0x118>)
   144d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   144d8:	f7f8 f8f8 	bl	c6cc <__aeabi_ddiv>
        length = (volume/(PI*LARGE_PISTON_RADIUS_SQR))+SMALL_PISTON_MAX_LENGTH ;
   144dc:	f7f8 fa86 	bl	c9ec <__aeabi_d2f>
   144e0:	ee08 0a10 	vmov	s16, r0
    ARTEMIS_DEBUG_PRINTF("LCP Volume to Length = %0.4f\n", length);
   144e4:	f7f7 ff70 	bl	c3c8 <__aeabi_f2d>
   144e8:	4604      	mov	r4, r0
   144ea:	460d      	mov	r5, r1
   144ec:	e7cf      	b.n	1448e <CTRL_calculate_length_from_volume+0x36>
    else if ( (volume>0.0) && (volume<=SYSTEM_MAX_VOLUME) )
   144ee:	a322      	add	r3, pc, #136	@ (adr r3, 14578 <CTRL_calculate_length_from_volume+0x120>)
   144f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   144f4:	4620      	mov	r0, r4
   144f6:	4629      	mov	r1, r5
   144f8:	f7f8 fa3a 	bl	c970 <__aeabi_dcmple>
   144fc:	2800      	cmp	r0, #0
   144fe:	d0c2      	beq.n	14486 <CTRL_calculate_length_from_volume+0x2e>
        ARTEMIS_DEBUG_PRINTF("LCP Volume = %0.4f, Housing volume = %.4f\n", volume, HOUSING_VOLUME);
   14500:	4622      	mov	r2, r4
   14502:	462b      	mov	r3, r5
   14504:	e9cd 6700 	strd	r6, r7, [sp]
   14508:	4821      	ldr	r0, [pc, #132]	@ (14590 <CTRL_calculate_length_from_volume+0x138>)
   1450a:	f7fc fdad 	bl	11068 <am_util_stdio_printf>
   1450e:	4622      	mov	r2, r4
   14510:	462b      	mov	r3, r5
   14512:	e9cd 6700 	strd	r6, r7, [sp]
   14516:	481e      	ldr	r0, [pc, #120]	@ (14590 <CTRL_calculate_length_from_volume+0x138>)
   14518:	f009 fd2e 	bl	1df78 <datalogger_log_debug>
        volume -= HOUSING_VOLUME;
   1451c:	4632      	mov	r2, r6
   1451e:	463b      	mov	r3, r7
   14520:	4620      	mov	r0, r4
   14522:	4629      	mov	r1, r5
   14524:	f7f7 fdf0 	bl	c108 <__aeabi_dsub>
   14528:	f7f8 fa60 	bl	c9ec <__aeabi_d2f>
        ARTEMIS_DEBUG_PRINTF("LCP Volume = %0.4f, Housing volume = %.4f\n", volume, HOUSING_VOLUME);
   1452c:	f7f7 ff4c 	bl	c3c8 <__aeabi_f2d>
   14530:	e9cd 6700 	strd	r6, r7, [sp]
   14534:	460d      	mov	r5, r1
   14536:	4604      	mov	r4, r0
   14538:	460b      	mov	r3, r1
   1453a:	4602      	mov	r2, r0
   1453c:	4814      	ldr	r0, [pc, #80]	@ (14590 <CTRL_calculate_length_from_volume+0x138>)
   1453e:	f7fc fd93 	bl	11068 <am_util_stdio_printf>
   14542:	4622      	mov	r2, r4
   14544:	462b      	mov	r3, r5
   14546:	e9cd 6700 	strd	r6, r7, [sp]
   1454a:	4811      	ldr	r0, [pc, #68]	@ (14590 <CTRL_calculate_length_from_volume+0x138>)
   1454c:	f009 fd14 	bl	1df78 <datalogger_log_debug>
        length = (volume/(PI*LARGE_PISTON_RADIUS_SQR))+SMALL_PISTON_MAX_LENGTH ;
   14550:	a30b      	add	r3, pc, #44	@ (adr r3, 14580 <CTRL_calculate_length_from_volume+0x128>)
   14552:	e9d3 2300 	ldrd	r2, r3, [r3]
   14556:	4620      	mov	r0, r4
   14558:	4629      	mov	r1, r5
   1455a:	f7f8 f8b7 	bl	c6cc <__aeabi_ddiv>
   1455e:	4b0d      	ldr	r3, [pc, #52]	@ (14594 <CTRL_calculate_length_from_volume+0x13c>)
   14560:	2200      	movs	r2, #0
   14562:	f7f7 fdd3 	bl	c10c <__adddf3>
   14566:	e7b9      	b.n	144dc <CTRL_calculate_length_from_volume+0x84>
   14568:	85c99efd 	.word	0x85c99efd
   1456c:	408533e9 	.word	0x408533e9
   14570:	16a64b60 	.word	0x16a64b60
   14574:	400fcf02 	.word	0x400fcf02
   14578:	32ca760e 	.word	0x32ca760e
   1457c:	40882f66 	.word	0x40882f66
   14580:	16a64b60 	.word	0x16a64b60
   14584:	402fcf02 	.word	0x402fcf02
   14588:	00000000 	.word	0x00000000
   1458c:	0002b5b4 	.word	0x0002b5b4
   14590:	0002b588 	.word	0x0002b588
   14594:	40180000 	.word	0x40180000
   14598:	7941b939 	.word	0x7941b939
   1459c:	4084750f 	.word	0x4084750f

000145a0 <module_ctrl_set_buoyancy_from_rate>:
    volume *= 61023.7;
    return volume;
}

float module_ctrl_set_buoyancy_from_rate(float rate, bool falling)
{
   145a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   145a2:	ed2d 8b02 	vpush	{d8}
   145a6:	4604      	mov	r4, r0
   145a8:	b083      	sub	sp, #12
    ARTEMIS_DEBUG_PRINTF("Setting rate = %0.3f, falling = %i\n", rate, (uint8_t)falling);
   145aa:	ee10 0a10 	vmov	r0, s0
{
   145ae:	eeb0 8a40 	vmov.f32	s16, s0
    ARTEMIS_DEBUG_PRINTF("Setting rate = %0.3f, falling = %i\n", rate, (uint8_t)falling);
   145b2:	f7f7 ff09 	bl	c3c8 <__aeabi_f2d>
   145b6:	9400      	str	r4, [sp, #0]
   145b8:	4606      	mov	r6, r0
   145ba:	4602      	mov	r2, r0
   145bc:	460b      	mov	r3, r1
   145be:	4882      	ldr	r0, [pc, #520]	@ (147c8 <module_ctrl_set_buoyancy_from_rate+0x228>)
   145c0:	460f      	mov	r7, r1
   145c2:	f7fc fd51 	bl	11068 <am_util_stdio_printf>
   145c6:	4632      	mov	r2, r6
    f_drag *= settings.water_density;
   145c8:	4e80      	ldr	r6, [pc, #512]	@ (147cc <module_ctrl_set_buoyancy_from_rate+0x22c>)
    ARTEMIS_DEBUG_PRINTF("Setting rate = %0.3f, falling = %i\n", rate, (uint8_t)falling);
   145ca:	487f      	ldr	r0, [pc, #508]	@ (147c8 <module_ctrl_set_buoyancy_from_rate+0x228>)
   145cc:	9400      	str	r4, [sp, #0]
   145ce:	463b      	mov	r3, r7
   145d0:	f009 fcd2 	bl	1df78 <datalogger_log_debug>
    f_drag *= settings.water_density;
   145d4:	edd6 8a05 	vldr	s17, [r6, #20]
    f_drag *= ( settings.cross_section * 0.00064516 );
   145d8:	6870      	ldr	r0, [r6, #4]
    f_drag *= settings.water_density;
   145da:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
    f_drag *= (rate * rate);
   145de:	ee28 8a08 	vmul.f32	s16, s16, s16
    f_drag *= settings.water_density;
   145e2:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f_drag *= (rate * rate);
   145e6:	ee28 8a27 	vmul.f32	s16, s16, s15

    float buoyancy = 0.0f;
    float volume = 0.0f;
    if(falling)
   145ea:	2c00      	cmp	r4, #0
   145ec:	d06c      	beq.n	146c8 <module_ctrl_set_buoyancy_from_rate+0x128>
    f_drag *= ( settings.cross_section * 0.00064516 );
   145ee:	f7f7 feeb 	bl	c3c8 <__aeabi_f2d>
   145f2:	a36d      	add	r3, pc, #436	@ (adr r3, 147a8 <module_ctrl_set_buoyancy_from_rate+0x208>)
   145f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   145f8:	f7f7 ff3e 	bl	c478 <__aeabi_dmul>
    f_drag *= CYLINDER_DRAG_COEFF;
   145fc:	eddf 7a74 	vldr	s15, [pc, #464]	@ 147d0 <module_ctrl_set_buoyancy_from_rate+0x230>
    f_drag *= ( settings.cross_section * 0.00064516 );
   14600:	ee68 7a27 	vmul.f32	s15, s16, s15
   14604:	4604      	mov	r4, r0
   14606:	ee17 0a90 	vmov	r0, s15
   1460a:	460d      	mov	r5, r1
   1460c:	f7f7 fedc 	bl	c3c8 <__aeabi_f2d>
   14610:	4602      	mov	r2, r0
   14612:	460b      	mov	r3, r1
   14614:	4620      	mov	r0, r4
   14616:	4629      	mov	r1, r5
   14618:	f7f7 ff2e 	bl	c478 <__aeabi_dmul>
   1461c:	4604      	mov	r4, r0
    f_gravity = ( settings.mass * 0.453592 ) * G_CONST;
   1461e:	6830      	ldr	r0, [r6, #0]
    f_drag *= ( settings.cross_section * 0.00064516 );
   14620:	460d      	mov	r5, r1
    f_gravity = ( settings.mass * 0.453592 ) * G_CONST;
   14622:	f7f7 fed1 	bl	c3c8 <__aeabi_f2d>
   14626:	a362      	add	r3, pc, #392	@ (adr r3, 147b0 <module_ctrl_set_buoyancy_from_rate+0x210>)
   14628:	e9d3 2300 	ldrd	r2, r3, [r3]
   1462c:	f7f7 ff24 	bl	c478 <__aeabi_dmul>
   14630:	a361      	add	r3, pc, #388	@ (adr r3, 147b8 <module_ctrl_set_buoyancy_from_rate+0x218>)
   14632:	e9d3 2300 	ldrd	r2, r3, [r3]
   14636:	f7f7 ff1f 	bl	c478 <__aeabi_dmul>
   1463a:	f7f8 f9d7 	bl	c9ec <__aeabi_d2f>
    f_drag *= ( settings.cross_section * 0.00064516 );
   1463e:	4629      	mov	r1, r5
    f_gravity = ( settings.mass * 0.453592 ) * G_CONST;
   14640:	4603      	mov	r3, r0
    f_drag *= ( settings.cross_section * 0.00064516 );
   14642:	4620      	mov	r0, r4
    f_gravity = ( settings.mass * 0.453592 ) * G_CONST;
   14644:	ee08 3a10 	vmov	s16, r3
    f_drag *= ( settings.cross_section * 0.00064516 );
   14648:	f7f8 f9d0 	bl	c9ec <__aeabi_d2f>
   1464c:	ee07 0a90 	vmov	s15, r0
    float volume = buoyancy / (settings.water_density * G_CONST) ;
   14650:	ee78 7a67 	vsub.f32	s15, s16, s15
   14654:	ee17 0a90 	vmov	r0, s15
   14658:	f7f7 feb6 	bl	c3c8 <__aeabi_f2d>
   1465c:	4606      	mov	r6, r0
   1465e:	ee18 0a90 	vmov	r0, s17
   14662:	460f      	mov	r7, r1
   14664:	f7f7 feb0 	bl	c3c8 <__aeabi_f2d>
   14668:	a353      	add	r3, pc, #332	@ (adr r3, 147b8 <module_ctrl_set_buoyancy_from_rate+0x218>)
   1466a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1466e:	f7f7 ff03 	bl	c478 <__aeabi_dmul>
   14672:	4602      	mov	r2, r0
   14674:	460b      	mov	r3, r1
   14676:	4630      	mov	r0, r6
   14678:	4639      	mov	r1, r7
   1467a:	f7f8 f827 	bl	c6cc <__aeabi_ddiv>
   1467e:	f7f8 f9b5 	bl	c9ec <__aeabi_d2f>
    volume *= 61023.7;
   14682:	f7f7 fea1 	bl	c3c8 <__aeabi_f2d>
   14686:	a34e      	add	r3, pc, #312	@ (adr r3, 147c0 <module_ctrl_set_buoyancy_from_rate+0x220>)
   14688:	e9d3 2300 	ldrd	r2, r3, [r3]
   1468c:	f7f7 fef4 	bl	c478 <__aeabi_dmul>
   14690:	f7f8 f9ac 	bl	c9ec <__aeabi_d2f>
   14694:	ee08 0a10 	vmov	s16, r0
    {
        buoyancy = module_calculate_buoyancy_from_descent_rate(rate);
        volume = module_calculate_volume_from_descent_rate(rate);
        ARTEMIS_DEBUG_PRINTF("falling, buoyancy = %0.3f, volume=%0.3f\n", buoyancy, volume);
   14698:	f7f7 fe96 	bl	c3c8 <__aeabi_f2d>
   1469c:	460d      	mov	r5, r1
   1469e:	4604      	mov	r4, r0
   146a0:	4632      	mov	r2, r6
   146a2:	463b      	mov	r3, r7
   146a4:	e9cd 4500 	strd	r4, r5, [sp]
   146a8:	484a      	ldr	r0, [pc, #296]	@ (147d4 <module_ctrl_set_buoyancy_from_rate+0x234>)
   146aa:	f7fc fcdd 	bl	11068 <am_util_stdio_printf>
   146ae:	e9cd 4500 	strd	r4, r5, [sp]
   146b2:	4848      	ldr	r0, [pc, #288]	@ (147d4 <module_ctrl_set_buoyancy_from_rate+0x234>)
   146b4:	4632      	mov	r2, r6
   146b6:	463b      	mov	r3, r7
   146b8:	f009 fc5e 	bl	1df78 <datalogger_log_debug>
    //    profiler.volume.current = volume;
    //    profiler.buoyancy.previous = profiler.buoyancy.current;
    //    profiler.buoyancy.current = buoyancy;
    //}
    return volume;
}
   146bc:	eeb0 0a48 	vmov.f32	s0, s16
   146c0:	b003      	add	sp, #12
   146c2:	ecbd 8b02 	vpop	{d8}
   146c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_drag *= ( settings.cross_section * 0.00064516 );
   146c8:	f7f7 fe7e 	bl	c3c8 <__aeabi_f2d>
   146cc:	a336      	add	r3, pc, #216	@ (adr r3, 147a8 <module_ctrl_set_buoyancy_from_rate+0x208>)
   146ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   146d2:	f7f7 fed1 	bl	c478 <__aeabi_dmul>
    f_drag *= CYLINDER_DRAG_COEFF;
   146d6:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 147d0 <module_ctrl_set_buoyancy_from_rate+0x230>
    f_drag *= ( settings.cross_section * 0.00064516 );
   146da:	ee68 7a27 	vmul.f32	s15, s16, s15
   146de:	4604      	mov	r4, r0
   146e0:	ee17 0a90 	vmov	r0, s15
   146e4:	460d      	mov	r5, r1
   146e6:	f7f7 fe6f 	bl	c3c8 <__aeabi_f2d>
   146ea:	4602      	mov	r2, r0
   146ec:	460b      	mov	r3, r1
   146ee:	4620      	mov	r0, r4
   146f0:	4629      	mov	r1, r5
   146f2:	f7f7 fec1 	bl	c478 <__aeabi_dmul>
   146f6:	4604      	mov	r4, r0
    f_gravity = ( settings.mass * 0.453592) * G_CONST;
   146f8:	6830      	ldr	r0, [r6, #0]
    f_drag *= ( settings.cross_section * 0.00064516 );
   146fa:	460d      	mov	r5, r1
    f_gravity = ( settings.mass * 0.453592) * G_CONST;
   146fc:	f7f7 fe64 	bl	c3c8 <__aeabi_f2d>
   14700:	a32b      	add	r3, pc, #172	@ (adr r3, 147b0 <module_ctrl_set_buoyancy_from_rate+0x210>)
   14702:	e9d3 2300 	ldrd	r2, r3, [r3]
   14706:	f7f7 feb7 	bl	c478 <__aeabi_dmul>
   1470a:	a32b      	add	r3, pc, #172	@ (adr r3, 147b8 <module_ctrl_set_buoyancy_from_rate+0x218>)
   1470c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14710:	f7f7 feb2 	bl	c478 <__aeabi_dmul>
   14714:	f7f8 f96a 	bl	c9ec <__aeabi_d2f>
    f_drag *= ( settings.cross_section * 0.00064516 );
   14718:	4629      	mov	r1, r5
    f_gravity = ( settings.mass * 0.453592) * G_CONST;
   1471a:	4603      	mov	r3, r0
    f_drag *= ( settings.cross_section * 0.00064516 );
   1471c:	4620      	mov	r0, r4
    f_gravity = ( settings.mass * 0.453592) * G_CONST;
   1471e:	ee08 3a10 	vmov	s16, r3
    f_drag *= ( settings.cross_section * 0.00064516 );
   14722:	f7f8 f963 	bl	c9ec <__aeabi_d2f>
   14726:	ee07 0a90 	vmov	s15, r0
    float volume = buoyancy / (settings.water_density * G_CONST) ;
   1472a:	ee78 7a27 	vadd.f32	s15, s16, s15
   1472e:	ee17 0a90 	vmov	r0, s15
   14732:	f7f7 fe49 	bl	c3c8 <__aeabi_f2d>
   14736:	4606      	mov	r6, r0
   14738:	ee18 0a90 	vmov	r0, s17
   1473c:	460f      	mov	r7, r1
   1473e:	f7f7 fe43 	bl	c3c8 <__aeabi_f2d>
   14742:	a31d      	add	r3, pc, #116	@ (adr r3, 147b8 <module_ctrl_set_buoyancy_from_rate+0x218>)
   14744:	e9d3 2300 	ldrd	r2, r3, [r3]
   14748:	f7f7 fe96 	bl	c478 <__aeabi_dmul>
   1474c:	4602      	mov	r2, r0
   1474e:	460b      	mov	r3, r1
   14750:	4630      	mov	r0, r6
   14752:	4639      	mov	r1, r7
   14754:	f7f7 ffba 	bl	c6cc <__aeabi_ddiv>
   14758:	f7f8 f948 	bl	c9ec <__aeabi_d2f>
    volume *= 61023.7;
   1475c:	f7f7 fe34 	bl	c3c8 <__aeabi_f2d>
   14760:	a317      	add	r3, pc, #92	@ (adr r3, 147c0 <module_ctrl_set_buoyancy_from_rate+0x220>)
   14762:	e9d3 2300 	ldrd	r2, r3, [r3]
   14766:	f7f7 fe87 	bl	c478 <__aeabi_dmul>
   1476a:	f7f8 f93f 	bl	c9ec <__aeabi_d2f>
   1476e:	ee08 0a10 	vmov	s16, r0
        ARTEMIS_DEBUG_PRINTF("rising, buoyancy = %0.3f, volume=%0.3f\n", buoyancy, volume);
   14772:	f7f7 fe29 	bl	c3c8 <__aeabi_f2d>
   14776:	460d      	mov	r5, r1
   14778:	4604      	mov	r4, r0
   1477a:	4632      	mov	r2, r6
   1477c:	463b      	mov	r3, r7
   1477e:	e9cd 4500 	strd	r4, r5, [sp]
   14782:	4815      	ldr	r0, [pc, #84]	@ (147d8 <module_ctrl_set_buoyancy_from_rate+0x238>)
   14784:	f7fc fc70 	bl	11068 <am_util_stdio_printf>
   14788:	e9cd 4500 	strd	r4, r5, [sp]
   1478c:	4812      	ldr	r0, [pc, #72]	@ (147d8 <module_ctrl_set_buoyancy_from_rate+0x238>)
   1478e:	4632      	mov	r2, r6
   14790:	463b      	mov	r3, r7
   14792:	f009 fbf1 	bl	1df78 <datalogger_log_debug>
}
   14796:	eeb0 0a48 	vmov.f32	s0, s16
   1479a:	b003      	add	sp, #12
   1479c:	ecbd 8b02 	vpop	{d8}
   147a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147a2:	bf00      	nop
   147a4:	f3af 8000 	nop.w
   147a8:	8ce352cb 	.word	0x8ce352cb
   147ac:	3f4523fe 	.word	0x3f4523fe
   147b0:	bd6e8af8 	.word	0xbd6e8af8
   147b4:	3fdd07a6 	.word	0x3fdd07a6
   147b8:	3a92a305 	.word	0x3a92a305
   147bc:	40239d01 	.word	0x40239d01
   147c0:	66666666 	.word	0x66666666
   147c4:	40edcbf6 	.word	0x40edcbf6
   147c8:	0002b5d4 	.word	0x0002b5d4
   147cc:	10002320 	.word	0x10002320
   147d0:	3f4f5c29 	.word	0x3f4f5c29
   147d4:	0002b5f8 	.word	0x0002b5f8
   147d8:	0002b624 	.word	0x0002b624

000147dc <DATA_setbuffer>:
//    p->data.pPressure = pPressure;
//    p->data.pTemperature = pTemp;
//}

void DATA_setbuffer(Data_t *buf, pData *P, float *pressure, float *temperature, uint32_t length)
{
   147dc:	b538      	push	{r3, r4, r5, lr}
   147de:	4604      	mov	r4, r0
    buf->rLength = 0;

    /* profile arrays */
    buf->p = P;

    ARTEMIS_DEBUG_PRINTF("DATA :: SET, Maixmum Measurements (%u)\n", buf->cbuf.length);
   147e0:	4d0e      	ldr	r5, [pc, #56]	@ (1481c <DATA_setbuffer+0x40>)
{
   147e2:	9804      	ldr	r0, [sp, #16]
    buf->data.temperature = temperature;
   147e4:	6123      	str	r3, [r4, #16]
    buf->cbuf.read = 0;
   147e6:	2300      	movs	r3, #0
    buf->p = P;
   147e8:	f8c4 1019 	str.w	r1, [r4, #25]
    buf->cbuf.length = length;
   147ec:	6020      	str	r0, [r4, #0]
    ARTEMIS_DEBUG_PRINTF("DATA :: SET, Maixmum Measurements (%u)\n", buf->cbuf.length);
   147ee:	4601      	mov	r1, r0
    buf->data.pressure = pressure;
   147f0:	60e2      	str	r2, [r4, #12]
    ARTEMIS_DEBUG_PRINTF("DATA :: SET, Maixmum Measurements (%u)\n", buf->cbuf.length);
   147f2:	4628      	mov	r0, r5
    buf->cbuf.read = 0;
   147f4:	7223      	strb	r3, [r4, #8]
   147f6:	7263      	strb	r3, [r4, #9]
   147f8:	72a3      	strb	r3, [r4, #10]
   147fa:	72e3      	strb	r3, [r4, #11]
    buf->cbuf.written = 0;
   147fc:	7123      	strb	r3, [r4, #4]
   147fe:	7163      	strb	r3, [r4, #5]
   14800:	71a3      	strb	r3, [r4, #6]
   14802:	71e3      	strb	r3, [r4, #7]
    buf->pNumber = 0;
   14804:	7523      	strb	r3, [r4, #20]
    buf->wLength = 0;
   14806:	f8c4 3015 	str.w	r3, [r4, #21]
    ARTEMIS_DEBUG_PRINTF("DATA :: SET, Maixmum Measurements (%u)\n", buf->cbuf.length);
   1480a:	f7fc fc2d 	bl	11068 <am_util_stdio_printf>
   1480e:	6821      	ldr	r1, [r4, #0]
   14810:	4628      	mov	r0, r5
}
   14812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ARTEMIS_DEBUG_PRINTF("DATA :: SET, Maixmum Measurements (%u)\n", buf->cbuf.length);
   14816:	f009 bbaf 	b.w	1df78 <datalogger_log_debug>
   1481a:	bf00      	nop
   1481c:	0002b64c 	.word	0x0002b64c

00014820 <DATA_add_gps>:
    buf->wLength = 0;
    buf->rLength = 0;
}

void DATA_add_gps(Data_t *buf, float latitude, float longitude, uint8_t pNumber)
{
   14820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14824:	4605      	mov	r5, r0
    buf->p[pNumber].pLatitude = latitude;
   14826:	eb01 0681 	add.w	r6, r1, r1, lsl #2
   1482a:	f8d5 3019 	ldr.w	r3, [r5, #25]
{
   1482e:	ee10 7a90 	vmov	r7, s1
   14832:	ee10 0a10 	vmov	r0, s0
    buf->p[pNumber].pLatitude = latitude;
   14836:	eb03 0386 	add.w	r3, r3, r6, lsl #2
{
   1483a:	b083      	sub	sp, #12
    buf->p[pNumber].pLongitude = longitude;
   1483c:	60df      	str	r7, [r3, #12]
    buf->p[pNumber].pLatitude = latitude;
   1483e:	6098      	str	r0, [r3, #8]
{
   14840:	460c      	mov	r4, r1
    ARTEMIS_DEBUG_PRINTF("DATA :: GPS fixed, ProfileNr=%u, Latitude=%.7f, Longitude=%.7f\n",
   14842:	f7f7 fdc1 	bl	c3c8 <__aeabi_f2d>
   14846:	4680      	mov	r8, r0
   14848:	4638      	mov	r0, r7
   1484a:	4689      	mov	r9, r1
   1484c:	f7f7 fdbc 	bl	c3c8 <__aeabi_f2d>
   14850:	4f10      	ldr	r7, [pc, #64]	@ (14894 <DATA_add_gps+0x74>)
   14852:	4642      	mov	r2, r8
   14854:	e9cd 0100 	strd	r0, r1, [sp]
   14858:	464b      	mov	r3, r9
   1485a:	4621      	mov	r1, r4
   1485c:	4638      	mov	r0, r7
   1485e:	f7fc fc03 	bl	11068 <am_util_stdio_printf>
   14862:	f8d5 5019 	ldr.w	r5, [r5, #25]
    buf->p[pNumber].pLatitude = latitude;
   14866:	00b6      	lsls	r6, r6, #2
    ARTEMIS_DEBUG_PRINTF("DATA :: GPS fixed, ProfileNr=%u, Latitude=%.7f, Longitude=%.7f\n",
   14868:	4435      	add	r5, r6
   1486a:	68a8      	ldr	r0, [r5, #8]
   1486c:	f7f7 fdac 	bl	c3c8 <__aeabi_f2d>
   14870:	68eb      	ldr	r3, [r5, #12]
   14872:	4680      	mov	r8, r0
   14874:	4618      	mov	r0, r3
   14876:	4689      	mov	r9, r1
   14878:	f7f7 fda6 	bl	c3c8 <__aeabi_f2d>
   1487c:	4642      	mov	r2, r8
   1487e:	e9cd 0100 	strd	r0, r1, [sp]
   14882:	464b      	mov	r3, r9
   14884:	4621      	mov	r1, r4
   14886:	4638      	mov	r0, r7
   14888:	f009 fb76 	bl	1df78 <datalogger_log_debug>
                            pNumber, buf->p[pNumber].pLatitude, buf->p[pNumber].pLongitude);
}
   1488c:	b003      	add	sp, #12
   1488e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14892:	bf00      	nop
   14894:	0002b674 	.word	0x0002b674

00014898 <DATA_add>:

//size_t DATA_add(Data_t *buf, uint32_t time, float pressure, float temp, uint16_t prof_nr, bool finish)
void DATA_add(Data_t *buf, uint32_t time, float pressure, float temperature, uint8_t pNumber)
{
   14898:	b538      	push	{r3, r4, r5, lr}
   1489a:	ed2d 8b02 	vpush	{d8}
    if (buf->cbuf.written == 0)
   1489e:	6843      	ldr	r3, [r0, #4]
{
   148a0:	4604      	mov	r4, r0
   148a2:	eeb0 8a40 	vmov.f32	s16, s0
   148a6:	eef0 8a60 	vmov.f32	s17, s1
   148aa:	460d      	mov	r5, r1
    if (buf->cbuf.written == 0)
   148ac:	bb63      	cbnz	r3, 14908 <DATA_add+0x70>
    {
        if (pNumber != 0)
   148ae:	2a00      	cmp	r2, #0
   148b0:	d149      	bne.n	14946 <DATA_add+0xae>
        {
            ARTEMIS_DEBUG_PRINTF("DATA :: ERROR, Profile is not zero\n");
        }
        else
        {
            buf->p[buf->pNumber].pStart = time;
   148b2:	7d01      	ldrb	r1, [r0, #20]
   148b4:	f8d0 2019 	ldr.w	r2, [r0, #25]
   148b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   148bc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   148c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
            buf->p[buf->pNumber].pIndex = buf->cbuf.written;
   148c4:	7493      	strb	r3, [r2, #18]
   148c6:	74d3      	strb	r3, [r2, #19]
            buf->p[buf->pNumber].pStart = time;
            buf->wLength = 0;
        }
    }

    if (buf->cbuf.written < buf->cbuf.length)
   148c8:	6822      	ldr	r2, [r4, #0]
   148ca:	429a      	cmp	r2, r3
   148cc:	d931      	bls.n	14932 <DATA_add+0x9a>
    {
        buf->data.temperature[buf->cbuf.written] = temperature;
   148ce:	6922      	ldr	r2, [r4, #16]
   148d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   148d4:	edc2 8a00 	vstr	s17, [r2]
        buf->data.pressure[buf->cbuf.written] = pressure;
   148d8:	68e2      	ldr	r2, [r4, #12]
   148da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   148de:	ed82 8a00 	vstr	s16, [r2]
        buf->p[buf->pNumber].pStop = time;
   148e2:	7d21      	ldrb	r1, [r4, #20]
   148e4:	f8d4 2019 	ldr.w	r2, [r4, #25]
   148e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   148ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    //    buf->data.pTimeOffset[buf->cbuf.written] = time;
    //    buf->cbuf.written++;
    //    return(1);
    //}
    //return(0);
}
   148f0:	ecbd 8b02 	vpop	{d8}
        buf->p[buf->pNumber].pStop = time;
   148f4:	6055      	str	r5, [r2, #4]
        buf->wLength++;
   148f6:	f8b4 1015 	ldrh.w	r1, [r4, #21]
        buf->cbuf.written++;
   148fa:	3301      	adds	r3, #1
   148fc:	6063      	str	r3, [r4, #4]
        buf->wLength++;
   148fe:	1c4b      	adds	r3, r1, #1
   14900:	f8a4 3015 	strh.w	r3, [r4, #21]
        buf->p[buf->pNumber].pLength = buf->wLength;
   14904:	8213      	strh	r3, [r2, #16]
}
   14906:	bd38      	pop	{r3, r4, r5, pc}
        if (pNumber > buf->pNumber)
   14908:	7d01      	ldrb	r1, [r0, #20]
   1490a:	4291      	cmp	r1, r2
   1490c:	d2dc      	bcs.n	148c8 <DATA_add+0x30>
            buf->pNumber++;
   1490e:	3101      	adds	r1, #1
            buf->p[buf->pNumber].pIndex = buf->cbuf.written;
   14910:	f8d0 2019 	ldr.w	r2, [r0, #25]
            buf->pNumber++;
   14914:	b2c9      	uxtb	r1, r1
   14916:	7501      	strb	r1, [r0, #20]
            buf->p[buf->pNumber].pIndex = buf->cbuf.written;
   14918:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1491c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   14920:	8243      	strh	r3, [r0, #18]
            buf->p[buf->pNumber].pStart = time;
   14922:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
            buf->wLength = 0;
   14926:	2200      	movs	r2, #0
   14928:	7562      	strb	r2, [r4, #21]
   1492a:	75a2      	strb	r2, [r4, #22]
    if (buf->cbuf.written < buf->cbuf.length)
   1492c:	6822      	ldr	r2, [r4, #0]
   1492e:	429a      	cmp	r2, r3
   14930:	d8cd      	bhi.n	148ce <DATA_add+0x36>
        ARTEMIS_DEBUG_PRINTF("DATA :: ERROR, Maximum length overflows\n");
   14932:	4809      	ldr	r0, [pc, #36]	@ (14958 <DATA_add+0xc0>)
   14934:	f7fc fb98 	bl	11068 <am_util_stdio_printf>
}
   14938:	ecbd 8b02 	vpop	{d8}
        ARTEMIS_DEBUG_PRINTF("DATA :: ERROR, Maximum length overflows\n");
   1493c:	4806      	ldr	r0, [pc, #24]	@ (14958 <DATA_add+0xc0>)
}
   1493e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ARTEMIS_DEBUG_PRINTF("DATA :: ERROR, Maximum length overflows\n");
   14942:	f009 bb19 	b.w	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("DATA :: ERROR, Profile is not zero\n");
   14946:	4805      	ldr	r0, [pc, #20]	@ (1495c <DATA_add+0xc4>)
   14948:	f7fc fb8e 	bl	11068 <am_util_stdio_printf>
   1494c:	4803      	ldr	r0, [pc, #12]	@ (1495c <DATA_add+0xc4>)
   1494e:	f009 fb13 	bl	1df78 <datalogger_log_debug>
    if (buf->cbuf.written < buf->cbuf.length)
   14952:	6863      	ldr	r3, [r4, #4]
   14954:	e7b8      	b.n	148c8 <DATA_add+0x30>
   14956:	bf00      	nop
   14958:	0002b6d8 	.word	0x0002b6d8
   1495c:	0002b6b4 	.word	0x0002b6b4

00014960 <DATA_get_converted>:
        ARTEMIS_DEBUG_PRINTF("DATA :: READ : ERROR, read(%u) overflows\n", buf->cbuf.read);
    }
}

void DATA_get_converted(Data_t *buf, pData *P, uint8_t *pressure, uint16_t *temperature, uint8_t pNumber)
{
   14960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14964:	ed2d 8b02 	vpush	{d8}
   14968:	460d      	mov	r5, r1
   1496a:	461f      	mov	r7, r3
    if (buf->cbuf.read < buf->cbuf.written)
   1496c:	6881      	ldr	r1, [r0, #8]
   1496e:	6843      	ldr	r3, [r0, #4]
{
   14970:	f89d 6020 	ldrb.w	r6, [sp, #32]
    if (buf->cbuf.read < buf->cbuf.written)
   14974:	4299      	cmp	r1, r3
{
   14976:	4604      	mov	r4, r0
    if (buf->cbuf.read < buf->cbuf.written)
   14978:	d269      	bcs.n	14a4e <DATA_get_converted+0xee>
    {
        *pressure = module_convert_pressure_to_uint8_t(buf->data.pressure[buf->cbuf.read]);
   1497a:	68c3      	ldr	r3, [r0, #12]
 * @param temp Temperature
 * @return int16_t Converted value;
 */
STATIC uint16_t module_convert_temperature_to_uint16_t(float temp)
{
    temp = round(temp * 100) / 100;
   1497c:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 14a88 <DATA_get_converted+0x128>
        *pressure = module_convert_pressure_to_uint8_t(buf->data.pressure[buf->cbuf.read]);
   14980:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    pressure = round(pressure *10) / 10;
   14984:	edd3 7a00 	vldr	s15, [r3]
   14988:	eef2 8a04 	vmov.f32	s17, #36	@ 0x41200000  10.0
   1498c:	ee67 7aa8 	vmul.f32	s15, s15, s17
   14990:	4690      	mov	r8, r2
   14992:	ee17 0a90 	vmov	r0, s15
   14996:	f7f7 fd17 	bl	c3c8 <__aeabi_f2d>
   1499a:	ec41 0b10 	vmov	d0, r0, r1
   1499e:	f015 f867 	bl	29a70 <round>
   149a2:	2200      	movs	r2, #0
   149a4:	ec51 0b10 	vmov	r0, r1, d0
   149a8:	4b38      	ldr	r3, [pc, #224]	@ (14a8c <DATA_get_converted+0x12c>)
   149aa:	f7f7 fe8f 	bl	c6cc <__aeabi_ddiv>
   149ae:	f7f8 f81d 	bl	c9ec <__aeabi_d2f>
   149b2:	ee07 0a90 	vmov	s15, r0
    return (uint8_t) (pressure * 10.0f);
   149b6:	ee67 7aa8 	vmul.f32	s15, s15, s17
   149ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   149be:	ee17 1a90 	vmov	r1, s15
   149c2:	f888 1000 	strb.w	r1, [r8]
        *temperature = module_convert_temperature_to_uint16_t(buf->data.temperature[buf->cbuf.read]);
   149c6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   149ca:	6923      	ldr	r3, [r4, #16]
   149cc:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    temp = round(temp * 100) / 100;
   149d0:	edd3 7a00 	vldr	s15, [r3]
   149d4:	ee67 7a88 	vmul.f32	s15, s15, s16
        buf->cbuf.read++;
   149d8:	f108 0801 	add.w	r8, r8, #1
    temp = round(temp * 100) / 100;
   149dc:	ee17 0a90 	vmov	r0, s15
   149e0:	f7f7 fcf2 	bl	c3c8 <__aeabi_f2d>
   149e4:	ec41 0b10 	vmov	d0, r0, r1
   149e8:	f015 f842 	bl	29a70 <round>
   149ec:	4b28      	ldr	r3, [pc, #160]	@ (14a90 <DATA_get_converted+0x130>)
   149ee:	2200      	movs	r2, #0
   149f0:	ec51 0b10 	vmov	r0, r1, d0
   149f4:	f7f7 fe6a 	bl	c6cc <__aeabi_ddiv>
   149f8:	f7f7 fff8 	bl	c9ec <__aeabi_d2f>
    temp *= 100;
    temp += 500;
   149fc:	eddf 7a25 	vldr	s15, [pc, #148]	@ 14a94 <DATA_get_converted+0x134>
    temp = round(temp * 100) / 100;
   14a00:	ee07 0a10 	vmov	s14, r0
    temp += 500;
   14a04:	eee7 7a08 	vfma.f32	s15, s14, s16
        P->pStart = buf->p[pNumber].pStart;
   14a08:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    return (uint16_t) (temp);
   14a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14a10:	ee17 2a90 	vmov	r2, s15
   14a14:	803a      	strh	r2, [r7, #0]
        P->pStart = buf->p[pNumber].pStart;
   14a16:	f8d4 1019 	ldr.w	r1, [r4, #25]
   14a1a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   14a1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   14a22:	6851      	ldr	r1, [r2, #4]
   14a24:	6069      	str	r1, [r5, #4]
   14a26:	602b      	str	r3, [r5, #0]
        P->pLatitude = buf->p[pNumber].pLatitude;
   14a28:	6893      	ldr	r3, [r2, #8]
   14a2a:	60ab      	str	r3, [r5, #8]
        P->pLongitude = buf->p[pNumber].pLongitude;
   14a2c:	68d3      	ldr	r3, [r2, #12]
   14a2e:	60eb      	str	r3, [r5, #12]
        buf->rLength++;
   14a30:	f8b4 3017 	ldrh.w	r3, [r4, #23]
        buf->cbuf.read++;
   14a34:	f8c4 8008 	str.w	r8, [r4, #8]
        buf->rLength++;
   14a38:	3301      	adds	r3, #1
   14a3a:	f8a4 3017 	strh.w	r3, [r4, #23]
        if (buf->rLength == buf->p[pNumber].pLength)
   14a3e:	8a12      	ldrh	r2, [r2, #16]
        buf->rLength++;
   14a40:	b29b      	uxth	r3, r3
        if (buf->rLength == buf->p[pNumber].pLength)
   14a42:	429a      	cmp	r2, r3
   14a44:	d00e      	beq.n	14a64 <DATA_get_converted+0x104>
}
   14a46:	ecbd 8b02 	vpop	{d8}
   14a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ARTEMIS_DEBUG_PRINTF("DATA :: READ : ERROR, read(%u) overflows\n", buf->cbuf.read);
   14a4e:	4812      	ldr	r0, [pc, #72]	@ (14a98 <DATA_get_converted+0x138>)
   14a50:	f7fc fb0a 	bl	11068 <am_util_stdio_printf>
}
   14a54:	ecbd 8b02 	vpop	{d8}
        ARTEMIS_DEBUG_PRINTF("DATA :: READ : ERROR, read(%u) overflows\n", buf->cbuf.read);
   14a58:	68a1      	ldr	r1, [r4, #8]
   14a5a:	480f      	ldr	r0, [pc, #60]	@ (14a98 <DATA_get_converted+0x138>)
}
   14a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        ARTEMIS_DEBUG_PRINTF("DATA :: READ : ERROR, read(%u) overflows\n", buf->cbuf.read);
   14a60:	f009 ba8a 	b.w	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("\n\nDATA :: READ, Profile(%u) length (%u) reached\n", pNumber, buf->rLength);
   14a64:	4631      	mov	r1, r6
   14a66:	480d      	ldr	r0, [pc, #52]	@ (14a9c <DATA_get_converted+0x13c>)
   14a68:	f7fc fafe 	bl	11068 <am_util_stdio_printf>
   14a6c:	480b      	ldr	r0, [pc, #44]	@ (14a9c <DATA_get_converted+0x13c>)
   14a6e:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   14a72:	4631      	mov	r1, r6
   14a74:	f009 fa80 	bl	1df78 <datalogger_log_debug>
}
   14a78:	ecbd 8b02 	vpop	{d8}
            buf->rLength = 0;
   14a7c:	2300      	movs	r3, #0
   14a7e:	75e3      	strb	r3, [r4, #23]
   14a80:	7623      	strb	r3, [r4, #24]
}
   14a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a86:	bf00      	nop
   14a88:	42c80000 	.word	0x42c80000
   14a8c:	40240000 	.word	0x40240000
   14a90:	40590000 	.word	0x40590000
   14a94:	43fa0000 	.word	0x43fa0000
   14a98:	0002b734 	.word	0x0002b734
   14a9c:	0002b760 	.word	0x0002b760

00014aa0 <get_epoch_time>:
{
   14aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    const uint16_t daysInMonth[] = {0, 31, 59, 90, 120, 151, 181, 211, 242, 272, 303, 333 };
   14aa4:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 14b34 <get_epoch_time+0x94>
    year = year + 2000;
   14aa8:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
   14aac:	fa1f fc80 	uxth.w	ip, r0
{
   14ab0:	468e      	mov	lr, r1
   14ab2:	4691      	mov	r9, r2
   14ab4:	461e      	mov	r6, r3
    const uint16_t daysInMonth[] = {0, 31, 59, 90, 120, 151, 181, 211, 242, 272, 303, 333 };
   14ab6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
{
   14aba:	b087      	sub	sp, #28
    const uint16_t daysInMonth[] = {0, 31, 59, 90, 120, 151, 181, 211, 242, 272, 303, 333 };
   14abc:	466f      	mov	r7, sp
   14abe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   14ac0:	e898 0003 	ldmia.w	r8, {r0, r1}
                        daysInMonth[month - 1] * 86400 + (day - 1) * 86400 +
   14ac4:	aa06      	add	r2, sp, #24
    const uint16_t daysInMonth[] = {0, 31, 59, 90, 120, 151, 181, 211, 242, 272, 303, 333 };
   14ac6:	e887 0003 	stmia.w	r7, {r0, r1}
                        daysInMonth[month - 1] * 86400 + (day - 1) * 86400 +
   14aca:	eb02 024e 	add.w	r2, r2, lr, lsl #1
    uint32_t epoch =    (year - 1970) * 86400 * 365 + ((year - 1968) / 4) * 86400 +
   14ace:	f5bc 63f6 	subs.w	r3, ip, #1968	@ 0x7b0
   14ad2:	4f16      	ldr	r7, [pc, #88]	@ (14b2c <get_epoch_time+0x8c>)
                        daysInMonth[month - 1] * 86400 + (day - 1) * 86400 +
   14ad4:	f832 0c1a 	ldrh.w	r0, [r2, #-26]
    uint32_t epoch =    (year - 1970) * 86400 * 365 + ((year - 1968) / 4) * 86400 +
   14ad8:	4915      	ldr	r1, [pc, #84]	@ (14b30 <get_epoch_time+0x90>)
{
   14ada:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
   14ade:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c
    uint32_t epoch =    (year - 1970) * 86400 * 365 + ((year - 1968) / 4) * 86400 +
   14ae2:	bf48      	it	mi
   14ae4:	f2ac 73ad 	subwmi	r3, ip, #1965	@ 0x7ad
   14ae8:	f2ac 72b2 	subw	r2, ip, #1970	@ 0x7b2
   14aec:	109b      	asrs	r3, r3, #2
   14aee:	fb07 f202 	mul.w	r2, r7, r2
   14af2:	fb01 2203 	mla	r2, r1, r3, r2
   14af6:	fb01 2200 	mla	r2, r1, r0, r2
                        daysInMonth[month - 1] * 86400 + (day - 1) * 86400 +
   14afa:	f109 39ff 	add.w	r9, r9, #4294967295
   14afe:	fb01 2209 	mla	r2, r1, r9, r2
                        hour * 3600 + min * 60 + sec;
   14b02:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
                        daysInMonth[month - 1] * 86400 + (day - 1) * 86400 +
   14b06:	fb03 2306 	mla	r3, r3, r6, r2
                        hour * 3600 + min * 60 + sec;
   14b0a:	203c      	movs	r0, #60	@ 0x3c
   14b0c:	fb10 3005 	smlabb	r0, r0, r5, r3
    if (!(year % 4) && month <= 2)
   14b10:	f01c 0f03 	tst.w	ip, #3
                        hour * 3600 + min * 60 + sec;
   14b14:	4420      	add	r0, r4
    if (!(year % 4) && month <= 2)
   14b16:	d106      	bne.n	14b26 <get_epoch_time+0x86>
   14b18:	f1be 0f02 	cmp.w	lr, #2
        epoch -= 86400;
   14b1c:	bf9c      	itt	ls
   14b1e:	f5a0 30a8 	subls.w	r0, r0, #86016	@ 0x15000
   14b22:	f5a0 70c0 	subls.w	r0, r0, #384	@ 0x180
}
   14b26:	b007      	add	sp, #28
   14b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b2c:	01e13380 	.word	0x01e13380
   14b30:	00015180 	.word	0x00015180
   14b34:	0002a1fc 	.word	0x0002a1fc

00014b38 <create_header_irid>:
}

//void create_header_irid(uint8_t *df, pData *P, uint8_t mode_type, uint8_t profNumber, uint8_t pageNumber)
void create_header_irid(uint8_t *df, pData *P, sData *S)
{
   14b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14b3c:	b088      	sub	sp, #32
   14b3e:	4604      	mov	r4, r0
    uint8_t buf[IRID_HEADER_LENGTH] = {0};
    uint8_t profNumber = S->profNumber;
   14b40:	7856      	ldrb	r6, [r2, #1]
    uint8_t pageNumber = S->pageNumber;
   14b42:	7915      	ldrb	r5, [r2, #4]
    uint8_t modeType = S->modeType;
   14b44:	f892 9000 	ldrb.w	r9, [r2]
{
   14b48:	460f      	mov	r7, r1

    /** collect IRID_HEADER_LENGTH=29 bytes for the header and rest will be
        attached as a payload measurement data **/

    /*  1. System ID */
    buf[0] = SYS_get_system_id();
   14b4a:	f007 fc39 	bl	1c3c0 <SYS_get_system_id>
   14b4e:	f88d 0000 	strb.w	r0, [sp]

    /*  2. Firmware Version */
    buf[1] = SYS_get_firmware()>>8 ;
   14b52:	f007 fbfd 	bl	1c350 <SYS_get_firmware>
   14b56:	0a00      	lsrs	r0, r0, #8
   14b58:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = SYS_get_firmware()&0xFF;
   14b5c:	f007 fbf8 	bl	1c350 <SYS_get_firmware>
   14b60:	f88d 0002 	strb.w	r0, [sp, #2]

    /*  3. Build Year_Date */
    buf[3] = SYS_get_build_year_date()>>8 ;
   14b64:	f007 fc02 	bl	1c36c <SYS_get_build_year_date>
    buf[4] = SYS_get_build_year_date()&0xFF;

    /*  4. Latitude  */
    int32_t latitude = module_convert_latitude_to_int32_t(P[profNumber].pLatitude);
   14b68:	eb06 0a86 	add.w	sl, r6, r6, lsl #2
   14b6c:	eb07 088a 	add.w	r8, r7, sl, lsl #2
    buf[3] = SYS_get_build_year_date()>>8 ;
   14b70:	0a00      	lsrs	r0, r0, #8
   14b72:	f88d 0003 	strb.w	r0, [sp, #3]
    buf[4] = SYS_get_build_year_date()&0xFF;
   14b76:	f007 fbf9 	bl	1c36c <SYS_get_build_year_date>
    int32_t latitude = module_convert_latitude_to_int32_t(P[profNumber].pLatitude);
   14b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    }
}

STATIC int32_t module_convert_latitude_to_int32_t(float latitude)
{
    int32_t lat = latitude * 1000000;
   14b7e:	eddf 6a44 	vldr	s13, [pc, #272]	@ 14c90 <create_header_irid+0x158>
    int32_t latitude = module_convert_latitude_to_int32_t(P[profNumber].pLatitude);
   14b82:	ee07 3a10 	vmov	s14, r3
    int32_t longitude = module_convert_longitude_to_int32_t(P[profNumber].pLongitude);
   14b86:	f8d8 300c 	ldr.w	r3, [r8, #12]
   14b8a:	ee07 3a90 	vmov	s15, r3
    int32_t lat = latitude * 1000000;
   14b8e:	ee27 7a26 	vmul.f32	s14, s14, s13
    return lat;
}

STATIC int32_t module_convert_longitude_to_int32_t(float longitude)
{
    int32_t lon = longitude * 1000000;
   14b92:	ee67 7aa6 	vmul.f32	s15, s15, s13
    int32_t lat = latitude * 1000000;
   14b96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    int32_t lon = longitude * 1000000;
   14b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    int32_t lat = latitude * 1000000;
   14b9e:	ee17 2a10 	vmov	r2, s14
    int32_t lon = longitude * 1000000;
   14ba2:	ee17 3a90 	vmov	r3, s15
    buf[4] = SYS_get_build_year_date()&0xFF;
   14ba6:	f04f 0c00 	mov.w	ip, #0
   14baa:	f360 0c07 	bfi	ip, r0, #0, #8
   14bae:	2100      	movs	r1, #0
    buf[5] = latitude>>24;
   14bb0:	1610      	asrs	r0, r2, #24
    buf[4] = SYS_get_build_year_date()&0xFF;
   14bb2:	f362 0107 	bfi	r1, r2, #0, #8
   14bb6:	f360 2c0f 	bfi	ip, r0, #8, #8
    buf[9]  = longitude>>24;
   14bba:	1618      	asrs	r0, r3, #24
    buf[4] = SYS_get_build_year_date()&0xFF;
   14bbc:	f360 210f 	bfi	r1, r0, #8, #8
    buf[6] = latitude>>16;
   14bc0:	1410      	asrs	r0, r2, #16
    buf[4] = SYS_get_build_year_date()&0xFF;
   14bc2:	f360 4c17 	bfi	ip, r0, #16, #8
    buf[7] = latitude>>8;
   14bc6:	1212      	asrs	r2, r2, #8
    buf[4] = SYS_get_build_year_date()&0xFF;
   14bc8:	f362 6c1f 	bfi	ip, r2, #24, #8
    buf[10] = longitude>>16;
   14bcc:	141a      	asrs	r2, r3, #16
    buf[4] = SYS_get_build_year_date()&0xFF;
   14bce:	f362 4117 	bfi	r1, r2, #16, #8
    buf[12] = longitude&0xFF;
   14bd2:	f88d 300c 	strb.w	r3, [sp, #12]
    buf[11] = longitude>>8;
   14bd6:	121b      	asrs	r3, r3, #8
    buf[4] = SYS_get_build_year_date()&0xFF;
   14bd8:	f363 611f 	bfi	r1, r3, #24, #8
   14bdc:	f8cd c004 	str.w	ip, [sp, #4]
   14be0:	9102      	str	r1, [sp, #8]
    buf[13] = SYS_get_lcp_variant();
   14be2:	f007 fbf3 	bl	1c3cc <SYS_get_lcp_variant>
   14be6:	f88d 000d 	strb.w	r0, [sp, #13]
    uint32_t ser = SYS_get_serial_num();
   14bea:	f007 fbab 	bl	1c344 <SYS_get_serial_num>
    int32_t latitude = module_convert_latitude_to_int32_t(P[profNumber].pLatitude);
   14bee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    buf[20] = (modeType<<4&0xF0) | (pageNumber&0xF);
   14bf2:	f005 0c0f 	and.w	ip, r5, #15
    buf[18] = P[profNumber].pLength >> 8 & 0xFF;
   14bf6:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    uint32_t start = P[profNumber].pStart;
   14bfa:	f857 200a 	ldr.w	r2, [r7, sl]
    uint32_t stop = P[profNumber].pStop;
   14bfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    buf[28] = stop&0xFF;
   14c02:	f88d 301c 	strb.w	r3, [sp, #28]
    buf[14] = ser>>16&0xFF;
   14c06:	0c07      	lsrs	r7, r0, #16
   14c08:	2100      	movs	r1, #0
    buf[18] = P[profNumber].pLength >> 8 & 0xFF;
   14c0a:	ea4f 2e15 	mov.w	lr, r5, lsr #8
    buf[14] = ser>>16&0xFF;
   14c0e:	f367 0107 	bfi	r1, r7, #0, #8
   14c12:	2700      	movs	r7, #0
   14c14:	f36e 0707 	bfi	r7, lr, #0, #8
    buf[20] = (modeType<<4&0xF0) | (pageNumber&0xF);
   14c18:	ea4c 1c09 	orr.w	ip, ip, r9, lsl #4
    buf[14] = ser>>16&0xFF;
   14c1c:	f365 270f 	bfi	r7, r5, #8, #8
   14c20:	f36c 4717 	bfi	r7, ip, #16, #8
   14c24:	2500      	movs	r5, #0
    buf[22] = start>>16;
   14c26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    buf[14] = ser>>16&0xFF;
   14c2a:	f36c 0507 	bfi	r5, ip, #0, #8
    buf[15] = ser>>8&0xFF;
   14c2e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    buf[14] = ser>>16&0xFF;
   14c32:	f36c 210f 	bfi	r1, ip, #8, #8
   14c36:	f360 4117 	bfi	r1, r0, #16, #8
   14c3a:	f366 611f 	bfi	r1, r6, #24, #8
   14c3e:	f8cd 100e 	str.w	r1, [sp, #14]
    buf[23] = start>>8;
   14c42:	0a11      	lsrs	r1, r2, #8
    buf[14] = ser>>16&0xFF;
   14c44:	f361 250f 	bfi	r5, r1, #8, #8
   14c48:	f362 4517 	bfi	r5, r2, #16, #8
    buf[21] = start>>24;
   14c4c:	0e12      	lsrs	r2, r2, #24
    buf[14] = ser>>16&0xFF;
   14c4e:	f362 671f 	bfi	r7, r2, #24, #8
    buf[25] = stop>>24;
   14c52:	0e1a      	lsrs	r2, r3, #24
    buf[14] = ser>>16&0xFF;
   14c54:	f362 651f 	bfi	r5, r2, #24, #8
    buf[26] = stop>>16;
   14c58:	0c1a      	lsrs	r2, r3, #16
    buf[27] = stop>>8;
   14c5a:	0a1b      	lsrs	r3, r3, #8
    buf[14] = ser>>16&0xFF;
   14c5c:	f8cd 7012 	str.w	r7, [sp, #18]
   14c60:	f8cd 5016 	str.w	r5, [sp, #22]
    buf[26] = stop>>16;
   14c64:	f88d 201a 	strb.w	r2, [sp, #26]
    buf[27] = stop>>8;
   14c68:	f88d 301b 	strb.w	r3, [sp, #27]
        df[i] = buf[i];
   14c6c:	46ec      	mov	ip, sp
   14c6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   14c72:	6020      	str	r0, [r4, #0]
   14c74:	6061      	str	r1, [r4, #4]
   14c76:	60a2      	str	r2, [r4, #8]
   14c78:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
   14c7c:	60e3      	str	r3, [r4, #12]
   14c7e:	f89c 3000 	ldrb.w	r3, [ip]
   14c82:	6120      	str	r0, [r4, #16]
   14c84:	6161      	str	r1, [r4, #20]
   14c86:	61a2      	str	r2, [r4, #24]
   14c88:	7723      	strb	r3, [r4, #28]
}
   14c8a:	b008      	add	sp, #32
   14c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c90:	49742400 	.word	0x49742400

00014c94 <pack_measurements_irid>:
{
   14c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c98:	b0dd      	sub	sp, #372	@ 0x174
   14c9a:	4616      	mov	r6, r2
    uint8_t df[IRID_DATA_OUT] = {0};
   14c9c:	ad07      	add	r5, sp, #28
    uint8_t length = S->mLength;
   14c9e:	8854      	ldrh	r4, [r2, #2]
{
   14ca0:	9002      	str	r0, [sp, #8]
   14ca2:	468a      	mov	sl, r1
    uint8_t df[IRID_DATA_OUT] = {0};
   14ca4:	f44f 72aa 	mov.w	r2, #340	@ 0x154
   14ca8:	2100      	movs	r1, #0
   14caa:	4628      	mov	r0, r5
{
   14cac:	9305      	str	r3, [sp, #20]
    uint8_t pNumber = S->profNumber;
   14cae:	f896 b001 	ldrb.w	fp, [r6, #1]
    uint8_t df[IRID_DATA_OUT] = {0};
   14cb2:	f00f fb6d 	bl	24390 <memset>
    create_header_irid(df, P, S);
   14cb6:	4632      	mov	r2, r6
   14cb8:	4651      	mov	r1, sl
   14cba:	4628      	mov	r0, r5
   14cbc:	f7ff ff3c 	bl	14b38 <create_header_irid>
    uint8_t length = S->mLength;
   14cc0:	b2e4      	uxtb	r4, r4
    uint16_t bytes_length = (length * MEASUREMENT_BITS + 7) / 8 ;
   14cc2:	2207      	movs	r2, #7
   14cc4:	2314      	movs	r3, #20
   14cc6:	fb13 2304 	smlabb	r3, r3, r4, r2
   14cca:	10da      	asrs	r2, r3, #3
   14ccc:	4616      	mov	r6, r2
   14cce:	08db      	lsrs	r3, r3, #3
    ARTEMIS_DEBUG_PRINTF("DATA :: (%u) measurements require (%u) bytes\n", length, bytes_length);
   14cd0:	4621      	mov	r1, r4
   14cd2:	48a8      	ldr	r0, [pc, #672]	@ (14f74 <pack_measurements_irid+0x2e0>)
    uint16_t bytes_length = (length * MEASUREMENT_BITS + 7) / 8 ;
   14cd4:	9203      	str	r2, [sp, #12]
   14cd6:	9304      	str	r3, [sp, #16]
    ARTEMIS_DEBUG_PRINTF("DATA :: (%u) measurements require (%u) bytes\n", length, bytes_length);
   14cd8:	f7fc f9c6 	bl	11068 <am_util_stdio_printf>
   14cdc:	4632      	mov	r2, r6
   14cde:	48a5      	ldr	r0, [pc, #660]	@ (14f74 <pack_measurements_irid+0x2e0>)
    uint16_t Temp = 0;
   14ce0:	2600      	movs	r6, #0
    ARTEMIS_DEBUG_PRINTF("DATA :: (%u) measurements require (%u) bytes\n", length, bytes_length);
   14ce2:	4621      	mov	r1, r4
   14ce4:	f009 f948 	bl	1df78 <datalogger_log_debug>
    uint16_t Temp = 0;
   14ce8:	f8ad 601a 	strh.w	r6, [sp, #26]
    uint8_t Pressure = 0;
   14cec:	f88d 6019 	strb.w	r6, [sp, #25]
    for (uint16_t i=0; i<length; i++)
   14cf0:	2c00      	cmp	r4, #0
   14cf2:	f000 8115 	beq.w	14f20 <pack_measurements_irid+0x28c>
   14cf6:	fa1f f984 	uxth.w	r9, r4
   14cfa:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   14cfe:	ea4f 0989 	mov.w	r9, r9, lsl #2
    uint16_t bytes = IRID_HEADER_LENGTH;
   14d02:	241d      	movs	r4, #29
   14d04:	46b0      	mov	r8, r6
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d06:	2701      	movs	r7, #1
        DATA_get_converted(buf, P, &Pressure, &Temp, pNumber);
   14d08:	f10d 031a 	add.w	r3, sp, #26
   14d0c:	f10d 0219 	add.w	r2, sp, #25
   14d10:	9802      	ldr	r0, [sp, #8]
   14d12:	f8cd b000 	str.w	fp, [sp]
   14d16:	4651      	mov	r1, sl
   14d18:	f7ff fe22 	bl	14960 <DATA_get_converted>
            if (Temp & (1 << (11-j)))
   14d1c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   14d20:	051a      	lsls	r2, r3, #20
   14d22:	d507      	bpl.n	14d34 <pack_measurements_irid+0xa0>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d24:	43f2      	mvns	r2, r6
   14d26:	5d29      	ldrb	r1, [r5, r4]
   14d28:	f002 0207 	and.w	r2, r2, #7
   14d2c:	fa07 f202 	lsl.w	r2, r7, r2
   14d30:	430a      	orrs	r2, r1
   14d32:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14d34:	0558      	lsls	r0, r3, #21
   14d36:	d509      	bpl.n	14d4c <pack_measurements_irid+0xb8>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d38:	f06f 0201 	mvn.w	r2, #1
   14d3c:	1b92      	subs	r2, r2, r6
   14d3e:	5d29      	ldrb	r1, [r5, r4]
   14d40:	f002 0207 	and.w	r2, r2, #7
   14d44:	fa07 f202 	lsl.w	r2, r7, r2
   14d48:	430a      	orrs	r2, r1
   14d4a:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14d4c:	0599      	lsls	r1, r3, #22
   14d4e:	d509      	bpl.n	14d64 <pack_measurements_irid+0xd0>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d50:	f06f 0202 	mvn.w	r2, #2
   14d54:	1b92      	subs	r2, r2, r6
   14d56:	5d29      	ldrb	r1, [r5, r4]
   14d58:	f002 0207 	and.w	r2, r2, #7
   14d5c:	fa07 f202 	lsl.w	r2, r7, r2
   14d60:	430a      	orrs	r2, r1
   14d62:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14d64:	05da      	lsls	r2, r3, #23
   14d66:	d508      	bpl.n	14d7a <pack_measurements_irid+0xe6>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d68:	f1c6 0204 	rsb	r2, r6, #4
   14d6c:	5d29      	ldrb	r1, [r5, r4]
   14d6e:	f002 0207 	and.w	r2, r2, #7
   14d72:	fa07 f202 	lsl.w	r2, r7, r2
   14d76:	430a      	orrs	r2, r1
   14d78:	552a      	strb	r2, [r5, r4]
            bit_pos++;
   14d7a:	1d32      	adds	r2, r6, #4
            if ((bit_pos % 8) == 0)
   14d7c:	0750      	lsls	r0, r2, #29
                bytes++;
   14d7e:	bf04      	itt	eq
   14d80:	3401      	addeq	r4, #1
   14d82:	b2a4      	uxtheq	r4, r4
            if (Temp & (1 << (11-j)))
   14d84:	0619      	lsls	r1, r3, #24
   14d86:	d508      	bpl.n	14d9a <pack_measurements_irid+0x106>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d88:	f1c6 0203 	rsb	r2, r6, #3
   14d8c:	5d29      	ldrb	r1, [r5, r4]
   14d8e:	f002 0207 	and.w	r2, r2, #7
   14d92:	fa07 f202 	lsl.w	r2, r7, r2
   14d96:	430a      	orrs	r2, r1
   14d98:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14d9a:	065a      	lsls	r2, r3, #25
   14d9c:	d508      	bpl.n	14db0 <pack_measurements_irid+0x11c>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14d9e:	f1c6 0202 	rsb	r2, r6, #2
   14da2:	5d29      	ldrb	r1, [r5, r4]
   14da4:	f002 0207 	and.w	r2, r2, #7
   14da8:	fa07 f202 	lsl.w	r2, r7, r2
   14dac:	430a      	orrs	r2, r1
   14dae:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14db0:	0698      	lsls	r0, r3, #26
   14db2:	d508      	bpl.n	14dc6 <pack_measurements_irid+0x132>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14db4:	f1c6 0201 	rsb	r2, r6, #1
   14db8:	5d29      	ldrb	r1, [r5, r4]
   14dba:	f002 0207 	and.w	r2, r2, #7
   14dbe:	fa07 f202 	lsl.w	r2, r7, r2
   14dc2:	430a      	orrs	r2, r1
   14dc4:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14dc6:	06d9      	lsls	r1, r3, #27
   14dc8:	d507      	bpl.n	14dda <pack_measurements_irid+0x146>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14dca:	4272      	negs	r2, r6
   14dcc:	5d29      	ldrb	r1, [r5, r4]
   14dce:	f002 0207 	and.w	r2, r2, #7
   14dd2:	fa07 f202 	lsl.w	r2, r7, r2
   14dd6:	430a      	orrs	r2, r1
   14dd8:	552a      	strb	r2, [r5, r4]
            if ((bit_pos % 8) == 0)
   14dda:	f1b8 0f00 	cmp.w	r8, #0
   14dde:	d101      	bne.n	14de4 <pack_measurements_irid+0x150>
                bytes++;
   14de0:	3401      	adds	r4, #1
   14de2:	b2a4      	uxth	r4, r4
            if (Temp & (1 << (11-j)))
   14de4:	071a      	lsls	r2, r3, #28
   14de6:	d507      	bpl.n	14df8 <pack_measurements_irid+0x164>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14de8:	43f2      	mvns	r2, r6
   14dea:	5d29      	ldrb	r1, [r5, r4]
   14dec:	f002 0207 	and.w	r2, r2, #7
   14df0:	fa07 f202 	lsl.w	r2, r7, r2
   14df4:	430a      	orrs	r2, r1
   14df6:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14df8:	0758      	lsls	r0, r3, #29
   14dfa:	d508      	bpl.n	14e0e <pack_measurements_irid+0x17a>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14dfc:	f1c6 0206 	rsb	r2, r6, #6
   14e00:	5d29      	ldrb	r1, [r5, r4]
   14e02:	f002 0207 	and.w	r2, r2, #7
   14e06:	fa07 f202 	lsl.w	r2, r7, r2
   14e0a:	430a      	orrs	r2, r1
   14e0c:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14e0e:	0799      	lsls	r1, r3, #30
   14e10:	d508      	bpl.n	14e24 <pack_measurements_irid+0x190>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14e12:	f1c6 0205 	rsb	r2, r6, #5
   14e16:	5d29      	ldrb	r1, [r5, r4]
   14e18:	f002 0207 	and.w	r2, r2, #7
   14e1c:	fa07 f202 	lsl.w	r2, r7, r2
   14e20:	430a      	orrs	r2, r1
   14e22:	552a      	strb	r2, [r5, r4]
            if (Temp & (1 << (11-j)))
   14e24:	07da      	lsls	r2, r3, #31
   14e26:	d508      	bpl.n	14e3a <pack_measurements_irid+0x1a6>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14e28:	f1c6 0304 	rsb	r3, r6, #4
   14e2c:	5d2a      	ldrb	r2, [r5, r4]
   14e2e:	f003 0307 	and.w	r3, r3, #7
   14e32:	fa07 f303 	lsl.w	r3, r7, r3
   14e36:	4313      	orrs	r3, r2
   14e38:	552b      	strb	r3, [r5, r4]
            bit_pos++;
   14e3a:	f106 030c 	add.w	r3, r6, #12
            if ((bit_pos % 8) == 0)
   14e3e:	075b      	lsls	r3, r3, #29
            if (Pressure & (1 << (7-j)))
   14e40:	f89d 3019 	ldrb.w	r3, [sp, #25]
                bytes++;
   14e44:	bf04      	itt	eq
   14e46:	3401      	addeq	r4, #1
   14e48:	b2a4      	uxtheq	r4, r4
            if (Pressure & (1 << (7-j)))
   14e4a:	09da      	lsrs	r2, r3, #7
   14e4c:	d008      	beq.n	14e60 <pack_measurements_irid+0x1cc>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14e4e:	f1c6 0203 	rsb	r2, r6, #3
   14e52:	5d29      	ldrb	r1, [r5, r4]
   14e54:	f002 0207 	and.w	r2, r2, #7
   14e58:	fa07 f202 	lsl.w	r2, r7, r2
   14e5c:	430a      	orrs	r2, r1
   14e5e:	552a      	strb	r2, [r5, r4]
            if (Pressure & (1 << (7-j)))
   14e60:	0658      	lsls	r0, r3, #25
   14e62:	d508      	bpl.n	14e76 <pack_measurements_irid+0x1e2>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14e64:	f1c6 0202 	rsb	r2, r6, #2
   14e68:	5d29      	ldrb	r1, [r5, r4]
   14e6a:	f002 0207 	and.w	r2, r2, #7
   14e6e:	fa07 f202 	lsl.w	r2, r7, r2
   14e72:	430a      	orrs	r2, r1
   14e74:	552a      	strb	r2, [r5, r4]
            if (Pressure & (1 << (7-j)))
   14e76:	0699      	lsls	r1, r3, #26
   14e78:	d508      	bpl.n	14e8c <pack_measurements_irid+0x1f8>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14e7a:	f1c6 0201 	rsb	r2, r6, #1
   14e7e:	5d29      	ldrb	r1, [r5, r4]
   14e80:	f002 0207 	and.w	r2, r2, #7
   14e84:	fa07 f202 	lsl.w	r2, r7, r2
   14e88:	430a      	orrs	r2, r1
   14e8a:	552a      	strb	r2, [r5, r4]
            if (Pressure & (1 << (7-j)))
   14e8c:	06da      	lsls	r2, r3, #27
   14e8e:	d507      	bpl.n	14ea0 <pack_measurements_irid+0x20c>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14e90:	4272      	negs	r2, r6
   14e92:	5d29      	ldrb	r1, [r5, r4]
   14e94:	f002 0207 	and.w	r2, r2, #7
   14e98:	fa07 f202 	lsl.w	r2, r7, r2
   14e9c:	430a      	orrs	r2, r1
   14e9e:	552a      	strb	r2, [r5, r4]
            if ((bit_pos % 8) == 0)
   14ea0:	f1b8 0f00 	cmp.w	r8, #0
   14ea4:	d101      	bne.n	14eaa <pack_measurements_irid+0x216>
                bytes++;
   14ea6:	3401      	adds	r4, #1
   14ea8:	b2a4      	uxth	r4, r4
            if (Pressure & (1 << (7-j)))
   14eaa:	0718      	lsls	r0, r3, #28
   14eac:	d507      	bpl.n	14ebe <pack_measurements_irid+0x22a>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14eae:	43f2      	mvns	r2, r6
   14eb0:	5d29      	ldrb	r1, [r5, r4]
   14eb2:	f002 0207 	and.w	r2, r2, #7
   14eb6:	fa07 f202 	lsl.w	r2, r7, r2
   14eba:	430a      	orrs	r2, r1
   14ebc:	552a      	strb	r2, [r5, r4]
            if (Pressure & (1 << (7-j)))
   14ebe:	0759      	lsls	r1, r3, #29
   14ec0:	d508      	bpl.n	14ed4 <pack_measurements_irid+0x240>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14ec2:	f1c6 0206 	rsb	r2, r6, #6
   14ec6:	5d29      	ldrb	r1, [r5, r4]
   14ec8:	f002 0207 	and.w	r2, r2, #7
   14ecc:	fa07 f202 	lsl.w	r2, r7, r2
   14ed0:	430a      	orrs	r2, r1
   14ed2:	552a      	strb	r2, [r5, r4]
            if (Pressure & (1 << (7-j)))
   14ed4:	079a      	lsls	r2, r3, #30
   14ed6:	d508      	bpl.n	14eea <pack_measurements_irid+0x256>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14ed8:	f1c6 0205 	rsb	r2, r6, #5
   14edc:	5d29      	ldrb	r1, [r5, r4]
   14ede:	f002 0207 	and.w	r2, r2, #7
   14ee2:	fa07 f202 	lsl.w	r2, r7, r2
   14ee6:	430a      	orrs	r2, r1
   14ee8:	552a      	strb	r2, [r5, r4]
            if (Pressure & (1 << (7-j)))
   14eea:	07db      	lsls	r3, r3, #31
   14eec:	d508      	bpl.n	14f00 <pack_measurements_irid+0x26c>
                df[bytes] |= (1 << (7 - (bit_pos % 8)));
   14eee:	f1c6 0304 	rsb	r3, r6, #4
   14ef2:	5d2a      	ldrb	r2, [r5, r4]
   14ef4:	f003 0307 	and.w	r3, r3, #7
   14ef8:	fa07 f303 	lsl.w	r3, r7, r3
   14efc:	4313      	orrs	r3, r2
   14efe:	552b      	strb	r3, [r5, r4]
            bit_pos++;
   14f00:	3614      	adds	r6, #20
            if ((bit_pos % 8) == 0)
   14f02:	f016 0807 	ands.w	r8, r6, #7
                bytes++;
   14f06:	bf08      	it	eq
   14f08:	3401      	addeq	r4, #1
        Temp = 0, Pressure = 0;
   14f0a:	f04f 0300 	mov.w	r3, #0
                bytes++;
   14f0e:	bf08      	it	eq
   14f10:	b2a4      	uxtheq	r4, r4
    for (uint16_t i=0; i<length; i++)
   14f12:	454e      	cmp	r6, r9
        Temp = 0, Pressure = 0;
   14f14:	f8ad 301a 	strh.w	r3, [sp, #26]
   14f18:	f88d 3019 	strb.w	r3, [sp, #25]
    for (uint16_t i=0; i<length; i++)
   14f1c:	f47f aef4 	bne.w	14d08 <pack_measurements_irid+0x74>
    if (bytes_length > IRID_DATA_OUT)
   14f20:	9b03      	ldr	r3, [sp, #12]
   14f22:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   14f26:	dc13      	bgt.n	14f50 <pack_measurements_irid+0x2bc>
        rBuf[i] = df[i];
   14f28:	331d      	adds	r3, #29
   14f2a:	461c      	mov	r4, r3
   14f2c:	461a      	mov	r2, r3
   14f2e:	4629      	mov	r1, r5
   14f30:	9805      	ldr	r0, [sp, #20]
   14f32:	f7f7 fdfd 	bl	cb30 <memcpy>
    ARTEMIS_DEBUG_PRINTF("DATA :: RETURN Irid: total bytes = (%u)\n", bytes_length + IRID_HEADER_LENGTH);
   14f36:	4621      	mov	r1, r4
   14f38:	480f      	ldr	r0, [pc, #60]	@ (14f78 <pack_measurements_irid+0x2e4>)
   14f3a:	f7fc f895 	bl	11068 <am_util_stdio_printf>
   14f3e:	480e      	ldr	r0, [pc, #56]	@ (14f78 <pack_measurements_irid+0x2e4>)
   14f40:	4621      	mov	r1, r4
   14f42:	f009 f819 	bl	1df78 <datalogger_log_debug>
    return ( IRID_HEADER_LENGTH + bytes_length);
   14f46:	9804      	ldr	r0, [sp, #16]
   14f48:	301d      	adds	r0, #29
}
   14f4a:	b05d      	add	sp, #372	@ 0x174
   14f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f50:	461c      	mov	r4, r3
        ARTEMIS_DEBUG_PRINTF("DATA :: ERROR : bytes_length(%u) exceeds IRID_DATA_OUT (%u) bytes\n", bytes_length, IRID_DATA_OUT);
   14f52:	4619      	mov	r1, r3
   14f54:	f44f 72aa 	mov.w	r2, #340	@ 0x154
   14f58:	4808      	ldr	r0, [pc, #32]	@ (14f7c <pack_measurements_irid+0x2e8>)
   14f5a:	f7fc f885 	bl	11068 <am_util_stdio_printf>
   14f5e:	4807      	ldr	r0, [pc, #28]	@ (14f7c <pack_measurements_irid+0x2e8>)
   14f60:	f44f 72aa 	mov.w	r2, #340	@ 0x154
   14f64:	4621      	mov	r1, r4
   14f66:	f009 f807 	bl	1df78 <datalogger_log_debug>
        return 0;
   14f6a:	2000      	movs	r0, #0
}
   14f6c:	b05d      	add	sp, #372	@ 0x174
   14f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f72:	bf00      	nop
   14f74:	0002b794 	.word	0x0002b794
   14f78:	0002b7c4 	.word	0x0002b7c4
   14f7c:	0002b7f0 	.word	0x0002b7f0

00014f80 <std_div>:
    return lon;
}

float std_div(float *value, uint16_t len, float *var, float *avg)
{
   14f80:	b508      	push	{r3, lr}
}

float average(float *value, uint16_t len)
{
    float avg = 0;
    for (uint16_t i=0; i<len; i++)
   14f82:	b379      	cbz	r1, 14fe4 <std_div+0x64>
    float avg = 0;
   14f84:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 14ff4 <std_div+0x74>
   14f88:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
    for (uint16_t i=0; i<len; i++)
   14f8c:	4684      	mov	ip, r0
    {
        avg += *value++;
   14f8e:	ecbc 7a01 	vldmia	ip!, {s14}
    for (uint16_t i=0; i<len; i++)
   14f92:	45f4      	cmp	ip, lr
        avg += *value++;
   14f94:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (uint16_t i=0; i<len; i++)
   14f98:	d1f9      	bne.n	14f8e <std_div+0xe>
    }
    return (float) avg/len;
   14f9a:	ee07 1a10 	vmov	s14, r1
   14f9e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    float diff_sum = 0.0f;
   14fa2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 14ff4 <std_div+0x74>
    return (float) avg/len;
   14fa6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    *avg = average(value, len);
   14faa:	edc3 6a00 	vstr	s13, [r3]
        diff = *value++ - *avg;
   14fae:	ecf0 7a01 	vldmia	r0!, {s15}
   14fb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (uint16_t i=0; i<len; i++)
   14fb6:	4570      	cmp	r0, lr
        diff_sum += (diff * diff);
   14fb8:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (uint16_t i=0; i<len; i++)
   14fbc:	d1f7      	bne.n	14fae <std_div+0x2e>
    *var = diff_sum / len ;
   14fbe:	eec7 7a06 	vdiv.f32	s15, s14, s12
    float std = sqrt (*var);
   14fc2:	ee17 0a90 	vmov	r0, s15
    *var = diff_sum / len ;
   14fc6:	edc2 7a00 	vstr	s15, [r2]
    float std = sqrt (*var);
   14fca:	f7f7 f9fd 	bl	c3c8 <__aeabi_f2d>
   14fce:	ec41 0b10 	vmov	d0, r0, r1
   14fd2:	f014 fba1 	bl	29718 <sqrt>
   14fd6:	ec51 0b10 	vmov	r0, r1, d0
   14fda:	f7f7 fd07 	bl	c9ec <__aeabi_d2f>
}
   14fde:	ee00 0a10 	vmov	s0, r0
   14fe2:	bd08      	pop	{r3, pc}
    return (float) avg/len;
   14fe4:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 14ff4 <std_div+0x74>
   14fe8:	eec7 7a07 	vdiv.f32	s15, s14, s14
    *avg = average(value, len);
   14fec:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i=0; i<len; i++)
   14ff0:	e7e7      	b.n	14fc2 <std_div+0x42>
   14ff2:	bf00      	nop
   14ff4:	00000000 	.word	0x00000000

00014ff8 <xGPSTimer>:
static volatile bool xTemp_run  = false;
static volatile bool xDepth_run = false;

/* timer callback function */
void xGPSTimer(TimerHandle_t xTimer)
{
   14ff8:	b508      	push	{r3, lr}
    ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Timer has expired\n");
   14ffa:	4806      	ldr	r0, [pc, #24]	@ (15014 <xGPSTimer+0x1c>)
   14ffc:	f7fc f834 	bl	11068 <am_util_stdio_printf>
   15000:	4804      	ldr	r0, [pc, #16]	@ (15014 <xGPSTimer+0x1c>)
   15002:	f008 ffb9 	bl	1df78 <datalogger_log_debug>
    if (xGPS_run)
   15006:	4b04      	ldr	r3, [pc, #16]	@ (15018 <xGPSTimer+0x20>)
   15008:	781a      	ldrb	r2, [r3, #0]
   1500a:	b10a      	cbz	r2, 15010 <xGPSTimer+0x18>
    {
        xGPS_run = false;
   1500c:	2200      	movs	r2, #0
   1500e:	701a      	strb	r2, [r3, #0]
    }
}
   15010:	bd08      	pop	{r3, pc}
   15012:	bf00      	nop
   15014:	0002b834 	.word	0x0002b834
   15018:	10002388 	.word	0x10002388

0001501c <task_depth>:
        sensor_data.gps.rate = rate;
    }
}

void task_depth(void)
{
   1501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sDepth_Measurement_t depth = {0};
    assert(sensor_data.depth.rate != 0);
   15020:	4c69      	ldr	r4, [pc, #420]	@ (151c8 <task_depth+0x1ac>)
   15022:	edd4 7a00 	vldr	s15, [r4]
{
   15026:	b087      	sub	sp, #28
    assert(sensor_data.depth.rate != 0);
   15028:	eef5 7a40 	vcmp.f32	s15, #0.0
    sDepth_Measurement_t depth = {0};
   1502c:	f04f 0a00 	mov.w	sl, #0
    assert(sensor_data.depth.rate != 0);
   15030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sDepth_Measurement_t depth = {0};
   15034:	e9cd aa03 	strd	sl, sl, [sp, #12]
   15038:	f8cd a014 	str.w	sl, [sp, #20]
    assert(sensor_data.depth.rate != 0);
   1503c:	f000 80bc 	beq.w	151b8 <task_depth+0x19c>

    uint32_t period = xDelay1000ms/sensor_data.depth.rate;
   15040:	eddf 6a62 	vldr	s13, [pc, #392]	@ 151cc <task_depth+0x1b0>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Depth, Setting period = %ums\n", period);
   15044:	4862      	ldr	r0, [pc, #392]	@ (151d0 <task_depth+0x1b4>)

    /* Initialise the xLastWakeTime variable with the current time */
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    Event_e dEvent = IDLE;
    xDepth_run = true;
   15046:	4f63      	ldr	r7, [pc, #396]	@ (151d4 <task_depth+0x1b8>)
    uint32_t period = xDelay1000ms/sensor_data.depth.rate;
   15048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   1504c:	f10d 0b07 	add.w	fp, sp, #7
   15050:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   15054:	ee17 5a90 	vmov	r5, s15
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Depth, Setting period = %ums\n", period);
   15058:	4629      	mov	r1, r5
   1505a:	f7fc f805 	bl	11068 <am_util_stdio_printf>
   1505e:	485c      	ldr	r0, [pc, #368]	@ (151d0 <task_depth+0x1b4>)
   15060:	4629      	mov	r1, r5
   15062:	f008 ff89 	bl	1df78 <datalogger_log_debug>
    xLastWakeTime = xTaskGetTickCount();
   15066:	f7f9 ff7d 	bl	ef64 <xTaskGetTickCount>
    Event_e dEvent = IDLE;
   1506a:	2302      	movs	r3, #2
   1506c:	f88d 3007 	strb.w	r3, [sp, #7]
    xDepth_run = true;
   15070:	2301      	movs	r3, #1
   15072:	703b      	strb	r3, [r7, #0]

    while(xDepth_run)
   15074:	783b      	ldrb	r3, [r7, #0]
    xLastWakeTime = xTaskGetTickCount();
   15076:	9002      	str	r0, [sp, #8]
    while(xDepth_run)
   15078:	2b00      	cmp	r3, #0
   1507a:	d04b      	beq.n	15114 <task_depth+0xf8>
   1507c:	f242 730f 	movw	r3, #9999	@ 0x270f
   15080:	429d      	cmp	r5, r3
   15082:	4e55      	ldr	r6, [pc, #340]	@ (151d8 <task_depth+0x1bc>)
                vTaskDelete(NULL);
            }
        }
        else
        {
            ARTEMIS_DEBUG_PRINTF("SENSORS :: Depth, semaphore not available\n");
   15084:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 151f0 <task_depth+0x1d4>
   15088:	f10d 0908 	add.w	r9, sp, #8
   1508c:	f10d 0b07 	add.w	fp, sp, #7
   15090:	d90c      	bls.n	150ac <task_depth+0x90>
   15092:	e05e      	b.n	15152 <task_depth+0x136>
   15094:	4640      	mov	r0, r8
   15096:	f7fb ffe7 	bl	11068 <am_util_stdio_printf>
   1509a:	4640      	mov	r0, r8
   1509c:	f008 ff6c 	bl	1df78 <datalogger_log_debug>
        {
            vTaskDelayUntil(&xLastWakeTime, xDelay1000ms);
        }
        else
        {
            vTaskDelayUntil(&xLastWakeTime, period);
   150a0:	4629      	mov	r1, r5
   150a2:	4648      	mov	r0, r9
   150a4:	f7fa fa06 	bl	f4b4 <vTaskDelayUntil>
    while(xDepth_run)
   150a8:	783b      	ldrb	r3, [r7, #0]
   150aa:	b39b      	cbz	r3, 15114 <task_depth+0xf8>
        DEPTH_Power_ON();
   150ac:	f7fc f9a4 	bl	113f8 <DEPTH_Power_ON>
        if(xSemaphoreTake(xTDSemaphore, period) == pdTRUE)
   150b0:	6830      	ldr	r0, [r6, #0]
   150b2:	4629      	mov	r1, r5
   150b4:	f7f9 f9ba 	bl	e42c <xQueueSemaphoreTake>
   150b8:	2801      	cmp	r0, #1
   150ba:	d1eb      	bne.n	15094 <task_depth+0x78>
            DEPTH_Read(&depth);
   150bc:	a803      	add	r0, sp, #12
   150be:	f7fc f99f 	bl	11400 <DEPTH_Read>
            DEPTH_Power_OFF();
   150c2:	f7fc f99b 	bl	113fc <DEPTH_Power_OFF>
            sensor_data.depth.current = depth.Depth;
   150c6:	ed9d 7a03 	vldr	s14, [sp, #12]
            sensor_data.depth.previous = sensor_data.depth.current;
   150ca:	edd4 7a01 	vldr	s15, [r4, #4]
            sensor_data.pressure.previous = sensor_data.pressure.current;
   150ce:	69e3      	ldr	r3, [r4, #28]
            sensor_data.pressure.current = depth.Pressure;
   150d0:	9a04      	ldr	r2, [sp, #16]
            sensor_data.depth.previous = sensor_data.depth.current;
   150d2:	edc4 7a02 	vstr	s15, [r4, #8]
            sensor_data.pressure.previous = sensor_data.pressure.current;
   150d6:	6223      	str	r3, [r4, #32]
            sensor_data.depth.ascent_rate = (sensor_data.depth.current - sensor_data.depth.previous);
   150d8:	ee77 7a67 	vsub.f32	s15, s14, s15
            xSemaphoreGive(xTDSemaphore);
   150dc:	2300      	movs	r3, #0
   150de:	4619      	mov	r1, r3
            sensor_data.pressure.current = depth.Pressure;
   150e0:	61e2      	str	r2, [r4, #28]
            xSemaphoreGive(xTDSemaphore);
   150e2:	6830      	ldr	r0, [r6, #0]
            sensor_data.depth.current = depth.Depth;
   150e4:	ed84 7a01 	vstr	s14, [r4, #4]
            xSemaphoreGive(xTDSemaphore);
   150e8:	461a      	mov	r2, r3
            sensor_data.depth.ascent_rate = (sensor_data.depth.current - sensor_data.depth.previous);
   150ea:	edc4 7a03 	vstr	s15, [r4, #12]
            xSemaphoreGive(xTDSemaphore);
   150ee:	f7f8 fdb9 	bl	dc64 <xQueueGenericSend>
}

static void SendEvent(QueueHandle_t eventQueue, Event_e *event)
{
    /* wait for maximum 1 second, so it does not get stuck */
    xQueueSend(eventQueue, event, xDelay1000ms);
   150f2:	4b3a      	ldr	r3, [pc, #232]	@ (151dc <task_depth+0x1c0>)
            dEvent = RECEIVE;
   150f4:	f88d a007 	strb.w	sl, [sp, #7]
    xQueueSend(eventQueue, event, xDelay1000ms);
   150f8:	6818      	ldr	r0, [r3, #0]
   150fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   150fe:	2300      	movs	r3, #0
   15100:	4659      	mov	r1, fp
   15102:	f7f8 fdaf 	bl	dc64 <xQueueGenericSend>
            vTaskDelayUntil(&xLastWakeTime, period);
   15106:	4629      	mov	r1, r5
   15108:	4648      	mov	r0, r9
   1510a:	f7fa f9d3 	bl	f4b4 <vTaskDelayUntil>
    while(xDepth_run)
   1510e:	783b      	ldrb	r3, [r7, #0]
   15110:	2b00      	cmp	r3, #0
   15112:	d1cb      	bne.n	150ac <task_depth+0x90>
    SendEvent(xTDEventQueue, &dEvent);
   15114:	4b32      	ldr	r3, [pc, #200]	@ (151e0 <task_depth+0x1c4>)
    xQueueSend(eventQueue, event, xDelay1000ms);
   15116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1511a:	4659      	mov	r1, fp
   1511c:	6818      	ldr	r0, [r3, #0]
    dEvent = DELETE;
   1511e:	2401      	movs	r4, #1
    xQueueSend(eventQueue, event, xDelay1000ms);
   15120:	2300      	movs	r3, #0
    dEvent = DELETE;
   15122:	f88d 4007 	strb.w	r4, [sp, #7]
    xQueueSend(eventQueue, event, xDelay1000ms);
   15126:	f7f8 fd9d 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   1512a:	2000      	movs	r0, #0
   1512c:	f7f9 fd46 	bl	ebbc <vTaskDelete>
}
   15130:	b007      	add	sp, #28
   15132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ARTEMIS_DEBUG_PRINTF("SENSORS :: Depth, semaphore not available\n");
   15136:	4640      	mov	r0, r8
   15138:	f7fb ff96 	bl	11068 <am_util_stdio_printf>
   1513c:	4640      	mov	r0, r8
   1513e:	f008 ff1b 	bl	1df78 <datalogger_log_debug>
            vTaskDelayUntil(&xLastWakeTime, xDelay1000ms);
   15142:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   15146:	4648      	mov	r0, r9
   15148:	f7fa f9b4 	bl	f4b4 <vTaskDelayUntil>
    while(xDepth_run)
   1514c:	783b      	ldrb	r3, [r7, #0]
   1514e:	2b00      	cmp	r3, #0
   15150:	d0e0      	beq.n	15114 <task_depth+0xf8>
        DEPTH_Power_ON();
   15152:	f7fc f951 	bl	113f8 <DEPTH_Power_ON>
        if(xSemaphoreTake(xTDSemaphore, period) == pdTRUE)
   15156:	6830      	ldr	r0, [r6, #0]
   15158:	4629      	mov	r1, r5
   1515a:	f7f9 f967 	bl	e42c <xQueueSemaphoreTake>
   1515e:	2801      	cmp	r0, #1
   15160:	d1e9      	bne.n	15136 <task_depth+0x11a>
            DEPTH_Read(&depth);
   15162:	a803      	add	r0, sp, #12
   15164:	f7fc f94c 	bl	11400 <DEPTH_Read>
            DEPTH_Power_OFF();
   15168:	f7fc f948 	bl	113fc <DEPTH_Power_OFF>
            sensor_data.depth.previous = sensor_data.depth.current;
   1516c:	edd4 7a01 	vldr	s15, [r4, #4]
            sensor_data.depth.current = depth.Depth;
   15170:	ed9d 7a03 	vldr	s14, [sp, #12]
            sensor_data.pressure.previous = sensor_data.pressure.current;
   15174:	69e3      	ldr	r3, [r4, #28]
            sensor_data.pressure.current = depth.Pressure;
   15176:	9a04      	ldr	r2, [sp, #16]
            sensor_data.depth.previous = sensor_data.depth.current;
   15178:	edc4 7a02 	vstr	s15, [r4, #8]
            sensor_data.pressure.previous = sensor_data.pressure.current;
   1517c:	6223      	str	r3, [r4, #32]
            sensor_data.depth.ascent_rate = (sensor_data.depth.current - sensor_data.depth.previous);
   1517e:	ee77 7a67 	vsub.f32	s15, s14, s15
            xSemaphoreGive(xTDSemaphore);
   15182:	2300      	movs	r3, #0
            sensor_data.pressure.current = depth.Pressure;
   15184:	61e2      	str	r2, [r4, #28]
            xSemaphoreGive(xTDSemaphore);
   15186:	4619      	mov	r1, r3
   15188:	461a      	mov	r2, r3
   1518a:	6830      	ldr	r0, [r6, #0]
            sensor_data.depth.current = depth.Depth;
   1518c:	ed84 7a01 	vstr	s14, [r4, #4]
            sensor_data.depth.ascent_rate = (sensor_data.depth.current - sensor_data.depth.previous);
   15190:	edc4 7a03 	vstr	s15, [r4, #12]
            xSemaphoreGive(xTDSemaphore);
   15194:	f7f8 fd66 	bl	dc64 <xQueueGenericSend>
    xQueueSend(eventQueue, event, xDelay1000ms);
   15198:	4b10      	ldr	r3, [pc, #64]	@ (151dc <task_depth+0x1c0>)
            dEvent = RECEIVE;
   1519a:	f04f 0a00 	mov.w	sl, #0
    xQueueSend(eventQueue, event, xDelay1000ms);
   1519e:	6818      	ldr	r0, [r3, #0]
            dEvent = RECEIVE;
   151a0:	f88d a007 	strb.w	sl, [sp, #7]
    xQueueSend(eventQueue, event, xDelay1000ms);
   151a4:	4653      	mov	r3, sl
   151a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   151aa:	4659      	mov	r1, fp
   151ac:	f7f8 fd5a 	bl	dc64 <xQueueGenericSend>
                vTaskDelete(NULL);
   151b0:	4650      	mov	r0, sl
   151b2:	f7f9 fd03 	bl	ebbc <vTaskDelete>
            vTaskDelayUntil(&xLastWakeTime, xDelay1000ms);
   151b6:	e7c4      	b.n	15142 <task_depth+0x126>
    assert(sensor_data.depth.rate != 0);
   151b8:	4b0a      	ldr	r3, [pc, #40]	@ (151e4 <task_depth+0x1c8>)
   151ba:	4a0b      	ldr	r2, [pc, #44]	@ (151e8 <task_depth+0x1cc>)
   151bc:	480b      	ldr	r0, [pc, #44]	@ (151ec <task_depth+0x1d0>)
   151be:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
   151c2:	f00c fc33 	bl	21a2c <__assert_func>
   151c6:	bf00      	nop
   151c8:	1000b954 	.word	0x1000b954
   151cc:	447a0000 	.word	0x447a0000
   151d0:	0002b888 	.word	0x0002b888
   151d4:	1000b9ac 	.word	0x1000b9ac
   151d8:	1000b9bc 	.word	0x1000b9bc
   151dc:	1000b9b4 	.word	0x1000b9b4
   151e0:	1000b9b0 	.word	0x1000b9b0
   151e4:	0002b858 	.word	0x0002b858
   151e8:	00030df0 	.word	0x00030df0
   151ec:	0002b874 	.word	0x0002b874
   151f0:	0002b8b4 	.word	0x0002b8b4

000151f4 <task_temperature>:
{
   151f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(sensor_data.temperature.rate != 0);
   151f8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 15380 <task_temperature+0x18c>
   151fc:	edda 7a0b 	vldr	s15, [sl, #44]	@ 0x2c
   15200:	eef5 7a40 	vcmp.f32	s15, #0.0
   15204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   15208:	b085      	sub	sp, #20
    assert(sensor_data.temperature.rate != 0);
   1520a:	f000 809d 	beq.w	15348 <task_temperature+0x154>
    uint32_t period = xDelay1000ms/sensor_data.temperature.rate;
   1520e:	eddf 6a52 	vldr	s13, [pc, #328]	@ 15358 <task_temperature+0x164>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Temperature, Setting period = %ums\n", period);
   15212:	4852      	ldr	r0, [pc, #328]	@ (1535c <task_temperature+0x168>)
    xTemp_run = true;
   15214:	4e52      	ldr	r6, [pc, #328]	@ (15360 <task_temperature+0x16c>)
    uint32_t period = xDelay1000ms/sensor_data.temperature.rate;
   15216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    Temperature_Measurement_t temperature = {0};
   1521a:	f04f 0900 	mov.w	r9, #0
   1521e:	e9cd 9902 	strd	r9, r9, [sp, #8]
    uint32_t period = xDelay1000ms/sensor_data.temperature.rate;
   15222:	f10d 0b03 	add.w	fp, sp, #3
   15226:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   1522a:	ee17 4a90 	vmov	r4, s15
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Temperature, Setting period = %ums\n", period);
   1522e:	4621      	mov	r1, r4
   15230:	f7fb ff1a 	bl	11068 <am_util_stdio_printf>
   15234:	4849      	ldr	r0, [pc, #292]	@ (1535c <task_temperature+0x168>)
   15236:	4621      	mov	r1, r4
   15238:	f008 fe9e 	bl	1df78 <datalogger_log_debug>
    xLastWakeTime = xTaskGetTickCount();
   1523c:	f7f9 fe92 	bl	ef64 <xTaskGetTickCount>
    Event_e tEvent = IDLE;
   15240:	2302      	movs	r3, #2
   15242:	f88d 3003 	strb.w	r3, [sp, #3]
    xTemp_run = true;
   15246:	2301      	movs	r3, #1
   15248:	7033      	strb	r3, [r6, #0]
    while(xTemp_run)
   1524a:	7833      	ldrb	r3, [r6, #0]
    xLastWakeTime = xTaskGetTickCount();
   1524c:	9001      	str	r0, [sp, #4]
    while(xTemp_run)
   1524e:	2b00      	cmp	r3, #0
   15250:	d039      	beq.n	152c6 <task_temperature+0xd2>
   15252:	f242 730f 	movw	r3, #9999	@ 0x270f
   15256:	429c      	cmp	r4, r3
   15258:	4d42      	ldr	r5, [pc, #264]	@ (15364 <task_temperature+0x170>)
            ARTEMIS_DEBUG_PRINTF("SENSORS :: Temperature, semaphore not available\n");
   1525a:	4f43      	ldr	r7, [pc, #268]	@ (15368 <task_temperature+0x174>)
   1525c:	f10d 0804 	add.w	r8, sp, #4
   15260:	f10d 0b03 	add.w	fp, sp, #3
   15264:	d90c      	bls.n	15280 <task_temperature+0x8c>
   15266:	e04d      	b.n	15304 <task_temperature+0x110>
   15268:	4638      	mov	r0, r7
   1526a:	f7fb fefd 	bl	11068 <am_util_stdio_printf>
   1526e:	4638      	mov	r0, r7
   15270:	f008 fe82 	bl	1df78 <datalogger_log_debug>
            vTaskDelayUntil(&xLastWakeTime, period);
   15274:	4621      	mov	r1, r4
   15276:	4640      	mov	r0, r8
   15278:	f7fa f91c 	bl	f4b4 <vTaskDelayUntil>
    while(xTemp_run)
   1527c:	7833      	ldrb	r3, [r6, #0]
   1527e:	b313      	cbz	r3, 152c6 <task_temperature+0xd2>
        if(xSemaphoreTake(xTDSemaphore, period) == pdTRUE)
   15280:	6828      	ldr	r0, [r5, #0]
   15282:	4621      	mov	r1, r4
   15284:	f7f9 f8d2 	bl	e42c <xQueueSemaphoreTake>
   15288:	2801      	cmp	r0, #1
   1528a:	d1ed      	bne.n	15268 <task_temperature+0x74>
            TEMP_Read(&temperature);
   1528c:	a802      	add	r0, sp, #8
   1528e:	f007 f9ff 	bl	1c690 <TEMP_Read>
            xSemaphoreGive(xTDSemaphore);
   15292:	2300      	movs	r3, #0
            sensor_data.temperature.current = temperature.temperature;
   15294:	9902      	ldr	r1, [sp, #8]
   15296:	f8ca 1030 	str.w	r1, [sl, #48]	@ 0x30
            xSemaphoreGive(xTDSemaphore);
   1529a:	461a      	mov	r2, r3
   1529c:	4619      	mov	r1, r3
   1529e:	6828      	ldr	r0, [r5, #0]
   152a0:	f7f8 fce0 	bl	dc64 <xQueueGenericSend>
    xQueueSend(eventQueue, event, xDelay1000ms);
   152a4:	4b31      	ldr	r3, [pc, #196]	@ (1536c <task_temperature+0x178>)
            tEvent = RECEIVE;
   152a6:	f88d 9003 	strb.w	r9, [sp, #3]
    xQueueSend(eventQueue, event, xDelay1000ms);
   152aa:	6818      	ldr	r0, [r3, #0]
   152ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   152b0:	2300      	movs	r3, #0
   152b2:	4659      	mov	r1, fp
   152b4:	f7f8 fcd6 	bl	dc64 <xQueueGenericSend>
            vTaskDelayUntil(&xLastWakeTime, period);
   152b8:	4621      	mov	r1, r4
   152ba:	4640      	mov	r0, r8
   152bc:	f7fa f8fa 	bl	f4b4 <vTaskDelayUntil>
    while(xTemp_run)
   152c0:	7833      	ldrb	r3, [r6, #0]
   152c2:	2b00      	cmp	r3, #0
   152c4:	d1dc      	bne.n	15280 <task_temperature+0x8c>
    SendEvent(xTDEventQueue, &tEvent);
   152c6:	4b2a      	ldr	r3, [pc, #168]	@ (15370 <task_temperature+0x17c>)
    xQueueSend(eventQueue, event, xDelay1000ms);
   152c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   152cc:	4659      	mov	r1, fp
   152ce:	6818      	ldr	r0, [r3, #0]
    tEvent = DELETE;
   152d0:	2401      	movs	r4, #1
    xQueueSend(eventQueue, event, xDelay1000ms);
   152d2:	2300      	movs	r3, #0
    tEvent = DELETE;
   152d4:	f88d 4003 	strb.w	r4, [sp, #3]
    xQueueSend(eventQueue, event, xDelay1000ms);
   152d8:	f7f8 fcc4 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   152dc:	2000      	movs	r0, #0
   152de:	f7f9 fc6d 	bl	ebbc <vTaskDelete>
}
   152e2:	b005      	add	sp, #20
   152e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ARTEMIS_DEBUG_PRINTF("SENSORS :: Temperature, semaphore not available\n");
   152e8:	4638      	mov	r0, r7
   152ea:	f7fb febd 	bl	11068 <am_util_stdio_printf>
   152ee:	4638      	mov	r0, r7
   152f0:	f008 fe42 	bl	1df78 <datalogger_log_debug>
            vTaskDelayUntil(&xLastWakeTime, xDelay1000ms);
   152f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   152f8:	4640      	mov	r0, r8
   152fa:	f7fa f8db 	bl	f4b4 <vTaskDelayUntil>
    while(xTemp_run)
   152fe:	7833      	ldrb	r3, [r6, #0]
   15300:	2b00      	cmp	r3, #0
   15302:	d0e0      	beq.n	152c6 <task_temperature+0xd2>
        if(xSemaphoreTake(xTDSemaphore, period) == pdTRUE)
   15304:	6828      	ldr	r0, [r5, #0]
   15306:	4621      	mov	r1, r4
   15308:	f7f9 f890 	bl	e42c <xQueueSemaphoreTake>
   1530c:	2801      	cmp	r0, #1
   1530e:	d1eb      	bne.n	152e8 <task_temperature+0xf4>
            TEMP_Read(&temperature);
   15310:	a802      	add	r0, sp, #8
   15312:	f007 f9bd 	bl	1c690 <TEMP_Read>
            sensor_data.temperature.current = temperature.temperature;
   15316:	9902      	ldr	r1, [sp, #8]
   15318:	f8ca 1030 	str.w	r1, [sl, #48]	@ 0x30
            xSemaphoreGive(xTDSemaphore);
   1531c:	2300      	movs	r3, #0
   1531e:	461a      	mov	r2, r3
   15320:	4619      	mov	r1, r3
   15322:	6828      	ldr	r0, [r5, #0]
   15324:	f7f8 fc9e 	bl	dc64 <xQueueGenericSend>
    xQueueSend(eventQueue, event, xDelay1000ms);
   15328:	4b10      	ldr	r3, [pc, #64]	@ (1536c <task_temperature+0x178>)
            tEvent = RECEIVE;
   1532a:	f04f 0900 	mov.w	r9, #0
    xQueueSend(eventQueue, event, xDelay1000ms);
   1532e:	6818      	ldr	r0, [r3, #0]
            tEvent = RECEIVE;
   15330:	f88d 9003 	strb.w	r9, [sp, #3]
    xQueueSend(eventQueue, event, xDelay1000ms);
   15334:	464b      	mov	r3, r9
   15336:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1533a:	4659      	mov	r1, fp
   1533c:	f7f8 fc92 	bl	dc64 <xQueueGenericSend>
                vTaskDelete(NULL);
   15340:	4648      	mov	r0, r9
   15342:	f7f9 fc3b 	bl	ebbc <vTaskDelete>
            vTaskDelayUntil(&xLastWakeTime, xDelay1000ms);
   15346:	e7d5      	b.n	152f4 <task_temperature+0x100>
    assert(sensor_data.temperature.rate != 0);
   15348:	4b0a      	ldr	r3, [pc, #40]	@ (15374 <task_temperature+0x180>)
   1534a:	4a0b      	ldr	r2, [pc, #44]	@ (15378 <task_temperature+0x184>)
   1534c:	480b      	ldr	r0, [pc, #44]	@ (1537c <task_temperature+0x188>)
   1534e:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
   15352:	f00c fb6b 	bl	21a2c <__assert_func>
   15356:	bf00      	nop
   15358:	447a0000 	.word	0x447a0000
   1535c:	0002b904 	.word	0x0002b904
   15360:	1000b9ad 	.word	0x1000b9ad
   15364:	1000b9bc 	.word	0x1000b9bc
   15368:	0002b934 	.word	0x0002b934
   1536c:	1000b9b8 	.word	0x1000b9b8
   15370:	1000b9b0 	.word	0x1000b9b0
   15374:	0002b8e0 	.word	0x0002b8e0
   15378:	00030ddc 	.word	0x00030ddc
   1537c:	0002b874 	.word	0x0002b874
   15380:	1000b954 	.word	0x1000b954

00015384 <task_gps>:
{
   15384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert(sensor_data.gps.rate != 0);
   15388:	4c6f      	ldr	r4, [pc, #444]	@ (15548 <task_gps+0x1c4>)
   1538a:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
{
   1538c:	b08a      	sub	sp, #40	@ 0x28
    assert(sensor_data.gps.rate != 0);
   1538e:	2b00      	cmp	r3, #0
   15390:	f000 80d2 	beq.w	15538 <task_gps+0x1b4>
    GPS_Data_t gps = {0};
   15394:	2500      	movs	r5, #0
    ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Setting period = %ums\n", period);
   15396:	486d      	ldr	r0, [pc, #436]	@ (1554c <task_gps+0x1c8>)
    uint32_t period = xDelay1000ms/sensor_data.gps.rate;
   15398:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
   1539c:	fbb7 f7f3 	udiv	r7, r7, r3
    ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Setting period = %ums\n", period);
   153a0:	4639      	mov	r1, r7
    GPS_Data_t gps = {0};
   153a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
   153a6:	e9cd 5506 	strd	r5, r5, [sp, #24]
   153aa:	e9cd 5508 	strd	r5, r5, [sp, #32]
    ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Setting period = %ums\n", period);
   153ae:	f7fb fe5b 	bl	11068 <am_util_stdio_printf>
   153b2:	4866      	ldr	r0, [pc, #408]	@ (1554c <task_gps+0x1c8>)
   153b4:	4639      	mov	r1, r7
   153b6:	f008 fddf 	bl	1df78 <datalogger_log_debug>
    TimerHandle_t xTimer = xTimerCreate("GPS_Timer", xTimeMinutes, pdFALSE, (void*)1, xGPSTimer);
   153ba:	4b65      	ldr	r3, [pc, #404]	@ (15550 <task_gps+0x1cc>)
   153bc:	9300      	str	r3, [sp, #0]
   153be:	4965      	ldr	r1, [pc, #404]	@ (15554 <task_gps+0x1d0>)
   153c0:	4865      	ldr	r0, [pc, #404]	@ (15558 <task_gps+0x1d4>)
   153c2:	2301      	movs	r3, #1
   153c4:	462a      	mov	r2, r5
   153c6:	f7fa feef 	bl	101a8 <xTimerCreate>
    if (xTimer != NULL)
   153ca:	4681      	mov	r9, r0
   153cc:	2800      	cmp	r0, #0
   153ce:	f000 808b 	beq.w	154e8 <task_gps+0x164>
        configASSERT(xTimerStart(xTimer, 0) == pdPASS);
   153d2:	f7f9 fdc7 	bl	ef64 <xTaskGetTickCount>
   153d6:	9500      	str	r5, [sp, #0]
   153d8:	4602      	mov	r2, r0
   153da:	462b      	mov	r3, r5
   153dc:	2101      	movs	r1, #1
   153de:	4648      	mov	r0, r9
   153e0:	f7fa ff3c 	bl	1025c <xTimerGenericCommand>
   153e4:	2801      	cmp	r0, #1
   153e6:	d00e      	beq.n	15406 <task_gps+0x82>
   153e8:	f04f 0380 	mov.w	r3, #128	@ 0x80
   153ec:	f383 8811 	msr	BASEPRI, r3
   153f0:	f3bf 8f6f 	isb	sy
   153f4:	f3bf 8f4f 	dsb	sy
   153f8:	4958      	ldr	r1, [pc, #352]	@ (1555c <task_gps+0x1d8>)
   153fa:	4859      	ldr	r0, [pc, #356]	@ (15560 <task_gps+0x1dc>)
   153fc:	f240 222d 	movw	r2, #557	@ 0x22d
   15400:	f7fb fe32 	bl	11068 <am_util_stdio_printf>
   15404:	e7fe      	b.n	15404 <task_gps+0x80>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Timer has started for %f Minutes\n", GPS_TIMER);
   15406:	4b57      	ldr	r3, [pc, #348]	@ (15564 <task_gps+0x1e0>)
   15408:	4857      	ldr	r0, [pc, #348]	@ (15568 <task_gps+0x1e4>)
   1540a:	2200      	movs	r2, #0
   1540c:	f7fb fe2c 	bl	11068 <am_util_stdio_printf>
   15410:	4b54      	ldr	r3, [pc, #336]	@ (15564 <task_gps+0x1e0>)
   15412:	4855      	ldr	r0, [pc, #340]	@ (15568 <task_gps+0x1e4>)
   15414:	2200      	movs	r2, #0
   15416:	f008 fdaf 	bl	1df78 <datalogger_log_debug>
    xGPS_run = true;
   1541a:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 15578 <task_gps+0x1f4>
    xLastWakeTime = xTaskGetTickCount();
   1541e:	f7f9 fda1 	bl	ef64 <xTaskGetTickCount>
    xGPS_run = true;
   15422:	2301      	movs	r3, #1
   15424:	f888 3000 	strb.w	r3, [r8]
    while(xGPS_run)
   15428:	f898 3000 	ldrb.w	r3, [r8]
    xLastWakeTime = xTaskGetTickCount();
   1542c:	9003      	str	r0, [sp, #12]
    while(xGPS_run)
   1542e:	2b00      	cmp	r3, #0
   15430:	d048      	beq.n	154c4 <task_gps+0x140>
    uint8_t xFix = 0;
   15432:	2600      	movs	r6, #0
            xSemaphoreGive(sensor_data.gps.semaphore);
   15434:	46b2      	mov	sl, r6
   15436:	e029      	b.n	1548c <task_gps+0x108>
            configASSERT(xSemaphoreTake(sensor_data.gps.semaphore, period) == pdTRUE);
   15438:	4639      	mov	r1, r7
   1543a:	f7f8 fff7 	bl	e42c <xQueueSemaphoreTake>
   1543e:	2801      	cmp	r0, #1
   15440:	d15c      	bne.n	154fc <task_gps+0x178>
            sensor_data.gps.latitude = gps.position.lat;
   15442:	9905      	ldr	r1, [sp, #20]
            sensor_data.gps.longitude = gps.position.lon;
   15444:	9a06      	ldr	r2, [sp, #24]
            sensor_data.gps.latitude = gps.position.lat;
   15446:	6421      	str	r1, [r4, #64]	@ 0x40
            sensor_data.gps.longitude = gps.position.lon;
   15448:	6462      	str	r2, [r4, #68]	@ 0x44
            sensor_data.gps.altitude = gps.position.alt;
   1544a:	9907      	ldr	r1, [sp, #28]
            sensor_data.gps.year = gps.time.year;
   1544c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            sensor_data.gps.altitude = gps.position.alt;
   15450:	64a1      	str	r1, [r4, #72]	@ 0x48
            xSemaphoreGive(sensor_data.gps.semaphore);
   15452:	2300      	movs	r3, #0
            sensor_data.gps.month = gps.time.month;
   15454:	f8dd 1022 	ldr.w	r1, [sp, #34]	@ 0x22
            sensor_data.gps.year = gps.time.year;
   15458:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
            xFix++;
   1545c:	3601      	adds	r6, #1
            sensor_data.gps.sec = gps.time.sec;
   1545e:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
            sensor_data.gps.fix = true;
   15462:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
            sensor_data.gps.month = gps.time.month;
   15466:	f8c4 104e 	str.w	r1, [r4, #78]	@ 0x4e
            sensor_data.gps.sec = gps.time.sec;
   1546a:	f884 2052 	strb.w	r2, [r4, #82]	@ 0x52
            xSemaphoreGive(sensor_data.gps.semaphore);
   1546e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
   15470:	461a      	mov	r2, r3
   15472:	4619      	mov	r1, r3
            xFix++;
   15474:	b2f6      	uxtb	r6, r6
            xSemaphoreGive(sensor_data.gps.semaphore);
   15476:	f7f8 fbf5 	bl	dc64 <xQueueGenericSend>
            if(xFix > 9)
   1547a:	2e09      	cmp	r6, #9
   1547c:	d828      	bhi.n	154d0 <task_gps+0x14c>
        vTaskDelayUntil(&xLastWakeTime, period);
   1547e:	4639      	mov	r1, r7
   15480:	a803      	add	r0, sp, #12
   15482:	f7fa f817 	bl	f4b4 <vTaskDelayUntil>
    while(xGPS_run)
   15486:	f898 3000 	ldrb.w	r3, [r8]
   1548a:	b1db      	cbz	r3, 154c4 <task_gps+0x140>
        if(GPS_Read(&gps))
   1548c:	a804      	add	r0, sp, #16
   1548e:	f7fb ffeb 	bl	11468 <GPS_Read>
   15492:	4605      	mov	r5, r0
            configASSERT(xSemaphoreTake(sensor_data.gps.semaphore, period) == pdTRUE);
   15494:	6d60      	ldr	r0, [r4, #84]	@ 0x54
        if(GPS_Read(&gps))
   15496:	2d00      	cmp	r5, #0
   15498:	d1ce      	bne.n	15438 <task_gps+0xb4>
            configASSERT(xSemaphoreTake(sensor_data.gps.semaphore, xDelay100ms) == pdTRUE);
   1549a:	2164      	movs	r1, #100	@ 0x64
   1549c:	f7f8 ffc6 	bl	e42c <xQueueSemaphoreTake>
   154a0:	2801      	cmp	r0, #1
   154a2:	d13a      	bne.n	1551a <task_gps+0x196>
            xSemaphoreGive(sensor_data.gps.semaphore);
   154a4:	462b      	mov	r3, r5
   154a6:	462a      	mov	r2, r5
   154a8:	4629      	mov	r1, r5
   154aa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
            sensor_data.gps.fix = false;
   154ac:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            xSemaphoreGive(sensor_data.gps.semaphore);
   154b0:	f7f8 fbd8 	bl	dc64 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, period);
   154b4:	4639      	mov	r1, r7
   154b6:	a803      	add	r0, sp, #12
   154b8:	f7f9 fffc 	bl	f4b4 <vTaskDelayUntil>
    while(xGPS_run)
   154bc:	f898 3000 	ldrb.w	r3, [r8]
   154c0:	2b00      	cmp	r3, #0
   154c2:	d1e3      	bne.n	1548c <task_gps+0x108>
    vTaskDelete(NULL);
   154c4:	2000      	movs	r0, #0
   154c6:	f7f9 fb79 	bl	ebbc <vTaskDelete>
}
   154ca:	b00a      	add	sp, #40	@ 0x28
   154cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                xTimerStop(xTimer, 0);
   154d0:	2300      	movs	r3, #0
   154d2:	f8cd a000 	str.w	sl, [sp]
   154d6:	461a      	mov	r2, r3
                xGPS_run = false;
   154d8:	f888 a000 	strb.w	sl, [r8]
                xTimerStop(xTimer, 0);
   154dc:	2103      	movs	r1, #3
   154de:	4648      	mov	r0, r9
   154e0:	f7fa febc 	bl	1025c <xTimerGenericCommand>
                xFix = 0;
   154e4:	2600      	movs	r6, #0
   154e6:	e7ca      	b.n	1547e <task_gps+0xfa>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Timer did not start\n");
   154e8:	4820      	ldr	r0, [pc, #128]	@ (1556c <task_gps+0x1e8>)
   154ea:	f7fb fdbd 	bl	11068 <am_util_stdio_printf>
   154ee:	481f      	ldr	r0, [pc, #124]	@ (1556c <task_gps+0x1e8>)
   154f0:	f008 fd42 	bl	1df78 <datalogger_log_debug>
        vTaskDelete(NULL);
   154f4:	4648      	mov	r0, r9
   154f6:	f7f9 fb61 	bl	ebbc <vTaskDelete>
   154fa:	e78e      	b.n	1541a <task_gps+0x96>
   154fc:	f04f 0380 	mov.w	r3, #128	@ 0x80
   15500:	f383 8811 	msr	BASEPRI, r3
   15504:	f3bf 8f6f 	isb	sy
   15508:	f3bf 8f4f 	dsb	sy
            configASSERT(xSemaphoreTake(sensor_data.gps.semaphore, period) == pdTRUE);
   1550c:	4913      	ldr	r1, [pc, #76]	@ (1555c <task_gps+0x1d8>)
   1550e:	4814      	ldr	r0, [pc, #80]	@ (15560 <task_gps+0x1dc>)
   15510:	f240 2241 	movw	r2, #577	@ 0x241
   15514:	f7fb fda8 	bl	11068 <am_util_stdio_printf>
   15518:	e7fe      	b.n	15518 <task_gps+0x194>
   1551a:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1551e:	f383 8811 	msr	BASEPRI, r3
   15522:	f3bf 8f6f 	isb	sy
   15526:	f3bf 8f4f 	dsb	sy
            configASSERT(xSemaphoreTake(sensor_data.gps.semaphore, xDelay100ms) == pdTRUE);
   1552a:	490c      	ldr	r1, [pc, #48]	@ (1555c <task_gps+0x1d8>)
   1552c:	480c      	ldr	r0, [pc, #48]	@ (15560 <task_gps+0x1dc>)
   1552e:	f44f 7216 	mov.w	r2, #600	@ 0x258
   15532:	f7fb fd99 	bl	11068 <am_util_stdio_printf>
   15536:	e7fe      	b.n	15536 <task_gps+0x1b2>
    assert(sensor_data.gps.rate != 0);
   15538:	4b0d      	ldr	r3, [pc, #52]	@ (15570 <task_gps+0x1ec>)
   1553a:	4a0e      	ldr	r2, [pc, #56]	@ (15574 <task_gps+0x1f0>)
   1553c:	4807      	ldr	r0, [pc, #28]	@ (1555c <task_gps+0x1d8>)
   1553e:	f240 211a 	movw	r1, #538	@ 0x21a
   15542:	f00c fa73 	bl	21a2c <__assert_func>
   15546:	bf00      	nop
   15548:	1000b954 	.word	0x1000b954
   1554c:	0002b984 	.word	0x0002b984
   15550:	00014ff9 	.word	0x00014ff9
   15554:	0002bf20 	.word	0x0002bf20
   15558:	0002b9ac 	.word	0x0002b9ac
   1555c:	0002b874 	.word	0x0002b874
   15560:	0002a268 	.word	0x0002a268
   15564:	40080000 	.word	0x40080000
   15568:	0002b9b8 	.word	0x0002b9b8
   1556c:	0002b9ec 	.word	0x0002b9ec
   15570:	0002b968 	.word	0x0002b968
   15574:	00030dd0 	.word	0x00030dd0
   15578:	10002388 	.word	0x10002388

0001557c <SENS_initialize>:
{
   1557c:	b538      	push	{r3, r4, r5, lr}
    success = SYS_lcp_info();
   1557e:	f006 ff2b 	bl	1c3d8 <SYS_lcp_info>
    artemis_rtc_initialize();
   15582:	f008 fa67 	bl	1da54 <artemis_rtc_initialize>
    success = MAX14830_initialize();
   15586:	f7fd f947 	bl	12818 <MAX14830_initialize>
    success = DEPTH_initialize(DEPTH_Keller_PR9LX);
   1558a:	2002      	movs	r0, #2
   1558c:	f7fb ff0a 	bl	113a4 <DEPTH_initialize>
    success = TEMP_initialize(TEMP_SoundNine_OEM);
   15590:	2001      	movs	r0, #1
   15592:	f007 f853 	bl	1c63c <TEMP_initialize>
    MAX14830_disable_direct();
   15596:	f7fd fa93 	bl	12ac0 <MAX14830_disable_direct>
    success = GPS_initialize();
   1559a:	f7fb ff59 	bl	11450 <GPS_initialize>
    success = PIS_initialize();
   1559e:	f7fe fbcb 	bl	13d38 <PIS_initialize>
    xTDSemaphore = xSemaphoreCreateMutex();
   155a2:	2001      	movs	r0, #1
   155a4:	f7f8 fcfe 	bl	dfa4 <xQueueCreateMutex>
   155a8:	4b21      	ldr	r3, [pc, #132]	@ (15630 <SENS_initialize+0xb4>)
   155aa:	6018      	str	r0, [r3, #0]
    if (xTDSemaphore == NULL)
   155ac:	2800      	cmp	r0, #0
   155ae:	d038      	beq.n	15622 <SENS_initialize+0xa6>
    sensor_data.gps.semaphore = xSemaphoreCreateMutex();
   155b0:	2001      	movs	r0, #1
   155b2:	f7f8 fcf7 	bl	dfa4 <xQueueCreateMutex>
   155b6:	4b1f      	ldr	r3, [pc, #124]	@ (15634 <SENS_initialize+0xb8>)
   155b8:	6558      	str	r0, [r3, #84]	@ 0x54
    if (sensor_data.gps.semaphore == NULL)
   155ba:	b358      	cbz	r0, 15614 <SENS_initialize+0x98>
    xTempEventQueue = xQueueCreate(1, sizeof(Event_e));
   155bc:	2101      	movs	r1, #1
   155be:	2200      	movs	r2, #0
   155c0:	4608      	mov	r0, r1
   155c2:	f7f8 fb05 	bl	dbd0 <xQueueGenericCreate>
   155c6:	4c1c      	ldr	r4, [pc, #112]	@ (15638 <SENS_initialize+0xbc>)
    xDepthEventQueue = xQueueCreate(1, sizeof(Event_e));
   155c8:	4d1c      	ldr	r5, [pc, #112]	@ (1563c <SENS_initialize+0xc0>)
   155ca:	2101      	movs	r1, #1
    xTempEventQueue = xQueueCreate(1, sizeof(Event_e));
   155cc:	4603      	mov	r3, r0
    xDepthEventQueue = xQueueCreate(1, sizeof(Event_e));
   155ce:	2200      	movs	r2, #0
   155d0:	4608      	mov	r0, r1
    xTempEventQueue = xQueueCreate(1, sizeof(Event_e));
   155d2:	6023      	str	r3, [r4, #0]
    xDepthEventQueue = xQueueCreate(1, sizeof(Event_e));
   155d4:	f7f8 fafc 	bl	dbd0 <xQueueGenericCreate>
    xTDEventQueue = xQueueCreate(1, sizeof(Event_e));
   155d8:	2101      	movs	r1, #1
   155da:	2200      	movs	r2, #0
    xDepthEventQueue = xQueueCreate(1, sizeof(Event_e));
   155dc:	6028      	str	r0, [r5, #0]
    xTDEventQueue = xQueueCreate(1, sizeof(Event_e));
   155de:	4608      	mov	r0, r1
   155e0:	f7f8 faf6 	bl	dbd0 <xQueueGenericCreate>
   155e4:	4a16      	ldr	r2, [pc, #88]	@ (15640 <SENS_initialize+0xc4>)
    if (xTempEventQueue == NULL || xDepthEventQueue == NULL || xTDEventQueue == NULL)
   155e6:	6823      	ldr	r3, [r4, #0]
    xTDEventQueue = xQueueCreate(1, sizeof(Event_e));
   155e8:	6010      	str	r0, [r2, #0]
    if (xTempEventQueue == NULL || xDepthEventQueue == NULL || xTDEventQueue == NULL)
   155ea:	b123      	cbz	r3, 155f6 <SENS_initialize+0x7a>
   155ec:	682b      	ldr	r3, [r5, #0]
   155ee:	b113      	cbz	r3, 155f6 <SENS_initialize+0x7a>
   155f0:	b108      	cbz	r0, 155f6 <SENS_initialize+0x7a>
        success = true;
   155f2:	2401      	movs	r4, #1
   155f4:	e006      	b.n	15604 <SENS_initialize+0x88>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: ERROR, Temp-Depth Events is NULL\n");
   155f6:	4813      	ldr	r0, [pc, #76]	@ (15644 <SENS_initialize+0xc8>)
   155f8:	f7fb fd36 	bl	11068 <am_util_stdio_printf>
   155fc:	4811      	ldr	r0, [pc, #68]	@ (15644 <SENS_initialize+0xc8>)
   155fe:	f008 fcbb 	bl	1df78 <datalogger_log_debug>
        success = false;
   15602:	2400      	movs	r4, #0
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Sensors are initialized\n\n");
   15604:	4810      	ldr	r0, [pc, #64]	@ (15648 <SENS_initialize+0xcc>)
   15606:	f7fb fd2f 	bl	11068 <am_util_stdio_printf>
   1560a:	480f      	ldr	r0, [pc, #60]	@ (15648 <SENS_initialize+0xcc>)
   1560c:	f008 fcb4 	bl	1df78 <datalogger_log_debug>
}
   15610:	4620      	mov	r0, r4
   15612:	bd38      	pop	{r3, r4, r5, pc}
        ARTEMIS_DEBUG_PRINTF("SENSORS :: ERROR, sensor_data.gps.semaphore is NULL\n");
   15614:	480d      	ldr	r0, [pc, #52]	@ (1564c <SENS_initialize+0xd0>)
   15616:	f7fb fd27 	bl	11068 <am_util_stdio_printf>
   1561a:	480c      	ldr	r0, [pc, #48]	@ (1564c <SENS_initialize+0xd0>)
   1561c:	f008 fcac 	bl	1df78 <datalogger_log_debug>
        success = false;
   15620:	e7cc      	b.n	155bc <SENS_initialize+0x40>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: ERROR, xTDSemaphore is NULL\n");
   15622:	480b      	ldr	r0, [pc, #44]	@ (15650 <SENS_initialize+0xd4>)
   15624:	f7fb fd20 	bl	11068 <am_util_stdio_printf>
   15628:	4809      	ldr	r0, [pc, #36]	@ (15650 <SENS_initialize+0xd4>)
   1562a:	f008 fca5 	bl	1df78 <datalogger_log_debug>
        success = false;
   1562e:	e7bf      	b.n	155b0 <SENS_initialize+0x34>
   15630:	1000b9bc 	.word	0x1000b9bc
   15634:	1000b954 	.word	0x1000b954
   15638:	1000b9b8 	.word	0x1000b9b8
   1563c:	1000b9b4 	.word	0x1000b9b4
   15640:	1000b9b0 	.word	0x1000b9b0
   15644:	0002ba74 	.word	0x0002ba74
   15648:	0002baa4 	.word	0x0002baa4
   1564c:	0002ba3c 	.word	0x0002ba3c
   15650:	0002ba14 	.word	0x0002ba14

00015654 <SENS_uninitialize>:
{
   15654:	b510      	push	{r4, lr}
    MAX14830_uninitialize();
   15656:	f7fd f9f5 	bl	12a44 <MAX14830_uninitialize>
    GPS_uninitialize();
   1565a:	f7fb ff03 	bl	11464 <GPS_uninitialize>
    PIS_uninitialize();
   1565e:	f7fe fbe3 	bl	13e28 <PIS_uninitialize>
    vSemaphoreDelete(xTDSemaphore);
   15662:	4b0a      	ldr	r3, [pc, #40]	@ (1568c <SENS_uninitialize+0x38>)
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Sensors are uninitialized\n\n");
   15664:	4c0a      	ldr	r4, [pc, #40]	@ (15690 <SENS_uninitialize+0x3c>)
    vSemaphoreDelete(xTDSemaphore);
   15666:	6818      	ldr	r0, [r3, #0]
   15668:	f7f9 f89e 	bl	e7a8 <vQueueDelete>
    vSemaphoreDelete(sensor_data.gps.semaphore);
   1566c:	4b09      	ldr	r3, [pc, #36]	@ (15694 <SENS_uninitialize+0x40>)
   1566e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
   15670:	f7f9 f89a 	bl	e7a8 <vQueueDelete>
    vTaskDelay(xDelay10ms);
   15674:	200a      	movs	r0, #10
   15676:	f7f9 feb5 	bl	f3e4 <vTaskDelay>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Sensors are uninitialized\n\n");
   1567a:	4620      	mov	r0, r4
   1567c:	f7fb fcf4 	bl	11068 <am_util_stdio_printf>
   15680:	4620      	mov	r0, r4
}
   15682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ARTEMIS_DEBUG_PRINTF("SENSORS :: Sensors are uninitialized\n\n");
   15686:	f008 bc77 	b.w	1df78 <datalogger_log_debug>
   1568a:	bf00      	nop
   1568c:	1000b9bc 	.word	0x1000b9bc
   15690:	0002bacc 	.word	0x0002bacc
   15694:	1000b954 	.word	0x1000b954

00015698 <SENS_sensor_depth_off>:
void SENS_sensor_depth_off(void)        { DEPTH_uninitialize_RTOS();    }
   15698:	f7fb bea2 	b.w	113e0 <DEPTH_uninitialize_RTOS>

0001569c <SENS_sensor_depth_on>:
void SENS_sensor_depth_on(void)         { DEPTH_initialize_RTOS();      }
   1569c:	f7fb be92 	b.w	113c4 <DEPTH_initialize_RTOS>

000156a0 <SENS_sensor_gps_off>:
void SENS_sensor_gps_off(void)          { GPS_off();                    }
   156a0:	f7fb bf06 	b.w	114b0 <GPS_off>

000156a4 <SENS_sensor_gps_on>:
void SENS_sensor_gps_on(void)           { GPS_on();                     }
   156a4:	f7fb bf02 	b.w	114ac <GPS_on>

000156a8 <SENS_sensor_temperature_off>:
void SENS_sensor_temperature_off(void)  { TEMP_uninitialize_RTOS();     }
   156a8:	f006 bfe6 	b.w	1c678 <TEMP_uninitialize_RTOS>

000156ac <SENS_sensor_temperature_on>:
void SENS_sensor_temperature_on(void)   { TEMP_initialize_RTOS();       }
   156ac:	f006 bfd2 	b.w	1c654 <TEMP_initialize_RTOS>

000156b0 <SENS_get_depth>:
{
   156b0:	b570      	push	{r4, r5, r6, lr}
    ReceiveEvent(xDepthEventQueue, &dEvent);
   156b2:	4d11      	ldr	r5, [pc, #68]	@ (156f8 <SENS_get_depth+0x48>)
{
   156b4:	b082      	sub	sp, #8
    Event_e dEvent = IDLE;
   156b6:	2302      	movs	r3, #2
{
   156b8:	4606      	mov	r6, r0
   156ba:	4614      	mov	r4, r2
}

static void ReceiveEvent(QueueHandle_t eventQueue, Event_e *event)
{
    /* wait for maximum 2 seconds, so it does not get stuck */
    xQueueReceive(eventQueue, event, xDelay2000ms);
   156bc:	6828      	ldr	r0, [r5, #0]
    Event_e dEvent = IDLE;
   156be:	f88d 3007 	strb.w	r3, [sp, #7]
{
   156c2:	460d      	mov	r5, r1
    xQueueReceive(eventQueue, event, xDelay2000ms);
   156c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
   156c8:	f10d 0107 	add.w	r1, sp, #7
   156cc:	f7f8 fd18 	bl	e100 <xQueueReceive>
    if (dEvent == RECEIVE)
   156d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   156d4:	b113      	cbz	r3, 156dc <SENS_get_depth+0x2c>
    bool retVal = false;
   156d6:	2000      	movs	r0, #0
}
   156d8:	b002      	add	sp, #8
   156da:	bd70      	pop	{r4, r5, r6, pc}
        taskENTER_CRITICAL();
   156dc:	f7f7 fcf2 	bl	d0c4 <vPortEnterCritical>
        *depth = sensor_data.depth.current;
   156e0:	4b06      	ldr	r3, [pc, #24]	@ (156fc <SENS_get_depth+0x4c>)
   156e2:	685a      	ldr	r2, [r3, #4]
   156e4:	6032      	str	r2, [r6, #0]
        *rate = sensor_data.depth.ascent_rate;
   156e6:	68da      	ldr	r2, [r3, #12]
        *pressure = sensor_data.pressure.current;
   156e8:	69db      	ldr	r3, [r3, #28]
        *rate = sensor_data.depth.ascent_rate;
   156ea:	6022      	str	r2, [r4, #0]
        *pressure = sensor_data.pressure.current;
   156ec:	602b      	str	r3, [r5, #0]
        taskEXIT_CRITICAL();
   156ee:	f7f7 fd15 	bl	d11c <vPortExitCritical>
        retVal = true;
   156f2:	2001      	movs	r0, #1
}
   156f4:	b002      	add	sp, #8
   156f6:	bd70      	pop	{r4, r5, r6, pc}
   156f8:	1000b9b4 	.word	0x1000b9b4
   156fc:	1000b954 	.word	0x1000b954

00015700 <SENS_get_temperature>:
{
   15700:	b510      	push	{r4, lr}
    ReceiveEvent(xTempEventQueue, &tEvent);
   15702:	4a0f      	ldr	r2, [pc, #60]	@ (15740 <SENS_get_temperature+0x40>)
{
   15704:	b082      	sub	sp, #8
    Event_e tEvent = IDLE;
   15706:	f04f 0c02 	mov.w	ip, #2
{
   1570a:	4604      	mov	r4, r0
    xQueueReceive(eventQueue, event, xDelay2000ms);
   1570c:	f10d 0107 	add.w	r1, sp, #7
   15710:	6810      	ldr	r0, [r2, #0]
    Event_e tEvent = IDLE;
   15712:	f88d c007 	strb.w	ip, [sp, #7]
    xQueueReceive(eventQueue, event, xDelay2000ms);
   15716:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
   1571a:	f7f8 fcf1 	bl	e100 <xQueueReceive>
    if (tEvent == RECEIVE)
   1571e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15722:	b113      	cbz	r3, 1572a <SENS_get_temperature+0x2a>
    bool retVal = false;
   15724:	2000      	movs	r0, #0
}
   15726:	b002      	add	sp, #8
   15728:	bd10      	pop	{r4, pc}
        taskENTER_CRITICAL();
   1572a:	f7f7 fccb 	bl	d0c4 <vPortEnterCritical>
        *temperature = sensor_data.temperature.current;
   1572e:	4b05      	ldr	r3, [pc, #20]	@ (15744 <SENS_get_temperature+0x44>)
   15730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
   15732:	6023      	str	r3, [r4, #0]
        taskEXIT_CRITICAL();
   15734:	f7f7 fcf2 	bl	d11c <vPortExitCritical>
        retVal = true;
   15738:	2001      	movs	r0, #1
}
   1573a:	b002      	add	sp, #8
   1573c:	bd10      	pop	{r4, pc}
   1573e:	bf00      	nop
   15740:	1000b9b8 	.word	0x1000b9b8
   15744:	1000b954 	.word	0x1000b954

00015748 <SENS_get_gps>:
{
   15748:	b538      	push	{r3, r4, r5, lr}
    *gps = sensor_data.gps;
   1574a:	4d08      	ldr	r5, [pc, #32]	@ (1576c <SENS_get_gps+0x24>)
{
   1574c:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
   1574e:	f7f7 fcb9 	bl	d0c4 <vPortEnterCritical>
    *gps = sensor_data.gps;
   15752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15754:	46a4      	mov	ip, r4
   15756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1575a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1575e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    taskEXIT_CRITICAL();
   15762:	f7f7 fcdb 	bl	d11c <vPortExitCritical>
}
   15766:	2001      	movs	r0, #1
   15768:	bd38      	pop	{r3, r4, r5, pc}
   1576a:	bf00      	nop
   1576c:	1000b990 	.word	0x1000b990

00015770 <SENS_task_delete>:
{
   15770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15774:	b08c      	sub	sp, #48	@ 0x30
    Event_e xtdEvent = IDLE;
   15776:	2302      	movs	r3, #2
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s in eRunning state, wait\n", task_name);
   15778:	4e84      	ldr	r6, [pc, #528]	@ (1598c <SENS_task_delete+0x21c>)
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s in eReady state\n", task_name);
   1577a:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 159cc <SENS_task_delete+0x25c>
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s in eBlocked state\n", task_name);
   1577e:	f8df 8250 	ldr.w	r8, [pc, #592]	@ 159d0 <SENS_task_delete+0x260>
    Event_e xtdEvent = IDLE;
   15782:	f88d 3007 	strb.w	r3, [sp, #7]
{
   15786:	4607      	mov	r7, r0
   15788:	e00f      	b.n	157aa <SENS_task_delete+0x3a>
        else if (eState==eReady)
   1578a:	2b01      	cmp	r3, #1
   1578c:	d04f      	beq.n	1582e <SENS_task_delete+0xbe>
        else if (eState==eRunning)
   1578e:	2b00      	cmp	r3, #0
   15790:	f040 8085 	bne.w	1589e <SENS_task_delete+0x12e>
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s in eRunning state, wait\n", task_name);
   15794:	4621      	mov	r1, r4
   15796:	4630      	mov	r0, r6
   15798:	f7fb fc66 	bl	11068 <am_util_stdio_printf>
   1579c:	4621      	mov	r1, r4
   1579e:	4630      	mov	r0, r6
   157a0:	f008 fbea 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(xDelay50ms);
   157a4:	2032      	movs	r0, #50	@ 0x32
   157a6:	f7f9 fe1d 	bl	f3e4 <vTaskDelay>
        vTaskGetInfo(xHandle, &xTaskDetails, pdTRUE, eInvalid);
   157aa:	2305      	movs	r3, #5
   157ac:	2201      	movs	r2, #1
   157ae:	a903      	add	r1, sp, #12
   157b0:	4638      	mov	r0, r7
   157b2:	f7fa f989 	bl	fac8 <vTaskGetInfo>
        eTaskState eState = xTaskDetails.eCurrentState;
   157b6:	f89d 3018 	ldrb.w	r3, [sp, #24]
        const char *task_name = xTaskDetails.pcTaskName;
   157ba:	9c04      	ldr	r4, [sp, #16]
        if ( (eState==eBlocked) || (eState==eSuspended) )
   157bc:	1e9a      	subs	r2, r3, #2
   157be:	2a01      	cmp	r2, #1
   157c0:	d8e3      	bhi.n	1578a <SENS_task_delete+0x1a>
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s in eBlocked state\n", task_name);
   157c2:	4621      	mov	r1, r4
   157c4:	4640      	mov	r0, r8
   157c6:	f7fb fc4f 	bl	11068 <am_util_stdio_printf>
   157ca:	4621      	mov	r1, r4
   157cc:	4640      	mov	r0, r8
   157ce:	f008 fbd3 	bl	1df78 <datalogger_log_debug>
            if ( am_util_string_strcmp(task_name, "Depth_Task") == 0 )
   157d2:	496f      	ldr	r1, [pc, #444]	@ (15990 <SENS_task_delete+0x220>)
   157d4:	4620      	mov	r0, r4
   157d6:	f7fb fc61 	bl	1109c <am_util_string_strcmp>
   157da:	4605      	mov	r5, r0
   157dc:	bb80      	cbnz	r0, 15840 <SENS_task_delete+0xd0>
                taskENTER_CRITICAL();
   157de:	f7f7 fc71 	bl	d0c4 <vPortEnterCritical>
                xDepth_run = false;
   157e2:	4b6c      	ldr	r3, [pc, #432]	@ (15994 <SENS_task_delete+0x224>)
   157e4:	701d      	strb	r5, [r3, #0]
                taskEXIT_CRITICAL();
   157e6:	f7f7 fc99 	bl	d11c <vPortExitCritical>
                ReceiveEvent(xTDEventQueue, &xtdEvent);
   157ea:	4b6b      	ldr	r3, [pc, #428]	@ (15998 <SENS_task_delete+0x228>)
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   157ec:	4d6b      	ldr	r5, [pc, #428]	@ (1599c <SENS_task_delete+0x22c>)
    xQueueReceive(eventQueue, event, xDelay2000ms);
   157ee:	6818      	ldr	r0, [r3, #0]
   157f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
   157f4:	f10d 0107 	add.w	r1, sp, #7
   157f8:	f7f8 fc82 	bl	e100 <xQueueReceive>
                EmptyEventQueue(xDepthEventQueue);
   157fc:	4b68      	ldr	r3, [pc, #416]	@ (159a0 <SENS_task_delete+0x230>)
   157fe:	ac02      	add	r4, sp, #8
   15800:	f8d3 a000 	ldr.w	sl, [r3]
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   15804:	e004      	b.n	15810 <SENS_task_delete+0xa0>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   15806:	f7fb fc2f 	bl	11068 <am_util_stdio_printf>
   1580a:	4628      	mov	r0, r5
   1580c:	f008 fbb4 	bl	1df78 <datalogger_log_debug>
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   15810:	2200      	movs	r2, #0
   15812:	4621      	mov	r1, r4
   15814:	4650      	mov	r0, sl
   15816:	f7f8 fc73 	bl	e100 <xQueueReceive>
   1581a:	2801      	cmp	r0, #1
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   1581c:	4628      	mov	r0, r5
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   1581e:	d0f2      	beq.n	15806 <SENS_task_delete+0x96>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptied\n");
   15820:	4860      	ldr	r0, [pc, #384]	@ (159a4 <SENS_task_delete+0x234>)
   15822:	f7fb fc21 	bl	11068 <am_util_stdio_printf>
   15826:	485f      	ldr	r0, [pc, #380]	@ (159a4 <SENS_task_delete+0x234>)
   15828:	f008 fba6 	bl	1df78 <datalogger_log_debug>
}
   1582c:	e7ba      	b.n	157a4 <SENS_task_delete+0x34>
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s in eReady state\n", task_name);
   1582e:	4621      	mov	r1, r4
   15830:	4648      	mov	r0, r9
   15832:	f7fb fc19 	bl	11068 <am_util_stdio_printf>
   15836:	4621      	mov	r1, r4
   15838:	4648      	mov	r0, r9
   1583a:	f008 fb9d 	bl	1df78 <datalogger_log_debug>
   1583e:	e7b1      	b.n	157a4 <SENS_task_delete+0x34>
            else if ( am_util_string_strcmp(task_name, "Temperature_Task") == 0 )
   15840:	4959      	ldr	r1, [pc, #356]	@ (159a8 <SENS_task_delete+0x238>)
   15842:	4620      	mov	r0, r4
   15844:	f7fb fc2a 	bl	1109c <am_util_string_strcmp>
   15848:	4605      	mov	r5, r0
   1584a:	2800      	cmp	r0, #0
   1584c:	d15b      	bne.n	15906 <SENS_task_delete+0x196>
                taskENTER_CRITICAL();
   1584e:	f7f7 fc39 	bl	d0c4 <vPortEnterCritical>
                xTemp_run = false;
   15852:	4b56      	ldr	r3, [pc, #344]	@ (159ac <SENS_task_delete+0x23c>)
   15854:	701d      	strb	r5, [r3, #0]
                taskEXIT_CRITICAL();
   15856:	f7f7 fc61 	bl	d11c <vPortExitCritical>
                ReceiveEvent(xTDEventQueue, &xtdEvent);
   1585a:	4b4f      	ldr	r3, [pc, #316]	@ (15998 <SENS_task_delete+0x228>)
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   1585c:	4d4f      	ldr	r5, [pc, #316]	@ (1599c <SENS_task_delete+0x22c>)
    xQueueReceive(eventQueue, event, xDelay2000ms);
   1585e:	6818      	ldr	r0, [r3, #0]
   15860:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
   15864:	f10d 0107 	add.w	r1, sp, #7
   15868:	f7f8 fc4a 	bl	e100 <xQueueReceive>
                EmptyEventQueue(xTempEventQueue);
   1586c:	4b50      	ldr	r3, [pc, #320]	@ (159b0 <SENS_task_delete+0x240>)
   1586e:	ac02      	add	r4, sp, #8
   15870:	f8d3 a000 	ldr.w	sl, [r3]
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   15874:	e004      	b.n	15880 <SENS_task_delete+0x110>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   15876:	f7fb fbf7 	bl	11068 <am_util_stdio_printf>
   1587a:	4628      	mov	r0, r5
   1587c:	f008 fb7c 	bl	1df78 <datalogger_log_debug>
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   15880:	2200      	movs	r2, #0
   15882:	4621      	mov	r1, r4
   15884:	4650      	mov	r0, sl
   15886:	f7f8 fc3b 	bl	e100 <xQueueReceive>
   1588a:	2801      	cmp	r0, #1
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   1588c:	4628      	mov	r0, r5
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   1588e:	d0f2      	beq.n	15876 <SENS_task_delete+0x106>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptied\n");
   15890:	4844      	ldr	r0, [pc, #272]	@ (159a4 <SENS_task_delete+0x234>)
   15892:	f7fb fbe9 	bl	11068 <am_util_stdio_printf>
   15896:	4843      	ldr	r0, [pc, #268]	@ (159a4 <SENS_task_delete+0x234>)
   15898:	f008 fb6e 	bl	1df78 <datalogger_log_debug>
   1589c:	e782      	b.n	157a4 <SENS_task_delete+0x34>
        else if (eState==eDeleted)
   1589e:	2b04      	cmp	r3, #4
   158a0:	d019      	beq.n	158d6 <SENS_task_delete+0x166>
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s is in unknown state\n", task_name);
   158a2:	4621      	mov	r1, r4
   158a4:	4843      	ldr	r0, [pc, #268]	@ (159b4 <SENS_task_delete+0x244>)
   158a6:	f7fb fbdf 	bl	11068 <am_util_stdio_printf>
   158aa:	4842      	ldr	r0, [pc, #264]	@ (159b4 <SENS_task_delete+0x244>)
   158ac:	4621      	mov	r1, r4
            if(xSemaphoreTake(xTDSemaphore, xDelay10ms) == pdTRUE)
   158ae:	4d42      	ldr	r5, [pc, #264]	@ (159b8 <SENS_task_delete+0x248>)
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s is in unknown state\n", task_name);
   158b0:	f008 fb62 	bl	1df78 <datalogger_log_debug>
            if(xSemaphoreTake(xTDSemaphore, xDelay10ms) == pdTRUE)
   158b4:	6828      	ldr	r0, [r5, #0]
   158b6:	210a      	movs	r1, #10
   158b8:	f7f8 fdb8 	bl	e42c <xQueueSemaphoreTake>
   158bc:	2801      	cmp	r0, #1
   158be:	d011      	beq.n	158e4 <SENS_task_delete+0x174>
                ARTEMIS_DEBUG_PRINTF("SENSORS :: %s, xTDsemaphore->not available\n", task_name);
   158c0:	4621      	mov	r1, r4
   158c2:	483e      	ldr	r0, [pc, #248]	@ (159bc <SENS_task_delete+0x24c>)
   158c4:	f7fb fbd0 	bl	11068 <am_util_stdio_printf>
   158c8:	483c      	ldr	r0, [pc, #240]	@ (159bc <SENS_task_delete+0x24c>)
   158ca:	4621      	mov	r1, r4
   158cc:	f008 fb54 	bl	1df78 <datalogger_log_debug>
}
   158d0:	b00c      	add	sp, #48	@ 0x30
   158d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            ARTEMIS_DEBUG_PRINTF("SENSORS :: %s->Deleted\n", task_name);
   158d6:	4621      	mov	r1, r4
   158d8:	4839      	ldr	r0, [pc, #228]	@ (159c0 <SENS_task_delete+0x250>)
   158da:	f7fb fbc5 	bl	11068 <am_util_stdio_printf>
   158de:	4838      	ldr	r0, [pc, #224]	@ (159c0 <SENS_task_delete+0x250>)
   158e0:	4621      	mov	r1, r4
   158e2:	e7e4      	b.n	158ae <SENS_task_delete+0x13e>
                xSemaphoreGive(xTDSemaphore);
   158e4:	2300      	movs	r3, #0
   158e6:	4619      	mov	r1, r3
   158e8:	461a      	mov	r2, r3
   158ea:	6828      	ldr	r0, [r5, #0]
   158ec:	f7f8 f9ba 	bl	dc64 <xQueueGenericSend>
                ARTEMIS_DEBUG_PRINTF("SENSORS :: %s, xTDsemaphore->available\n", task_name);
   158f0:	4621      	mov	r1, r4
   158f2:	4834      	ldr	r0, [pc, #208]	@ (159c4 <SENS_task_delete+0x254>)
   158f4:	f7fb fbb8 	bl	11068 <am_util_stdio_printf>
   158f8:	4832      	ldr	r0, [pc, #200]	@ (159c4 <SENS_task_delete+0x254>)
   158fa:	4621      	mov	r1, r4
   158fc:	f008 fb3c 	bl	1df78 <datalogger_log_debug>
}
   15900:	b00c      	add	sp, #48	@ 0x30
   15902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                ARTEMIS_DEBUG_PRINTF("SENSORS :: %s is unknonwn\n", task_name);
   15906:	4621      	mov	r1, r4
   15908:	482f      	ldr	r0, [pc, #188]	@ (159c8 <SENS_task_delete+0x258>)
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   1590a:	4d24      	ldr	r5, [pc, #144]	@ (1599c <SENS_task_delete+0x22c>)
                ARTEMIS_DEBUG_PRINTF("SENSORS :: %s is unknonwn\n", task_name);
   1590c:	f7fb fbac 	bl	11068 <am_util_stdio_printf>
   15910:	4621      	mov	r1, r4
   15912:	482d      	ldr	r0, [pc, #180]	@ (159c8 <SENS_task_delete+0x258>)
   15914:	f008 fb30 	bl	1df78 <datalogger_log_debug>
                taskENTER_CRITICAL();
   15918:	f7f7 fbd4 	bl	d0c4 <vPortEnterCritical>
                xTemp_run = false;
   1591c:	4923      	ldr	r1, [pc, #140]	@ (159ac <SENS_task_delete+0x23c>)
                xDepth_run = false;
   1591e:	4a1d      	ldr	r2, [pc, #116]	@ (15994 <SENS_task_delete+0x224>)
                xTemp_run = false;
   15920:	2300      	movs	r3, #0
   15922:	700b      	strb	r3, [r1, #0]
                xDepth_run = false;
   15924:	7013      	strb	r3, [r2, #0]
                taskEXIT_CRITICAL();
   15926:	f7f7 fbf9 	bl	d11c <vPortExitCritical>
                EmptyEventQueue(xTempEventQueue);
   1592a:	4b21      	ldr	r3, [pc, #132]	@ (159b0 <SENS_task_delete+0x240>)
   1592c:	ac02      	add	r4, sp, #8
   1592e:	681e      	ldr	r6, [r3, #0]
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   15930:	e004      	b.n	1593c <SENS_task_delete+0x1cc>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   15932:	f7fb fb99 	bl	11068 <am_util_stdio_printf>
   15936:	4628      	mov	r0, r5
   15938:	f008 fb1e 	bl	1df78 <datalogger_log_debug>
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   1593c:	2200      	movs	r2, #0
   1593e:	4621      	mov	r1, r4
   15940:	4630      	mov	r0, r6
   15942:	f7f8 fbdd 	bl	e100 <xQueueReceive>
   15946:	2801      	cmp	r0, #1
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   15948:	4628      	mov	r0, r5
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   1594a:	d0f2      	beq.n	15932 <SENS_task_delete+0x1c2>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptied\n");
   1594c:	4815      	ldr	r0, [pc, #84]	@ (159a4 <SENS_task_delete+0x234>)
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   1594e:	4d13      	ldr	r5, [pc, #76]	@ (1599c <SENS_task_delete+0x22c>)
    ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptied\n");
   15950:	f7fb fb8a 	bl	11068 <am_util_stdio_printf>
   15954:	4813      	ldr	r0, [pc, #76]	@ (159a4 <SENS_task_delete+0x234>)
   15956:	f008 fb0f 	bl	1df78 <datalogger_log_debug>
                EmptyEventQueue(xDepthEventQueue);
   1595a:	4b11      	ldr	r3, [pc, #68]	@ (159a0 <SENS_task_delete+0x230>)
   1595c:	681e      	ldr	r6, [r3, #0]
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   1595e:	e004      	b.n	1596a <SENS_task_delete+0x1fa>
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   15960:	f7fb fb82 	bl	11068 <am_util_stdio_printf>
   15964:	4628      	mov	r0, r5
   15966:	f008 fb07 	bl	1df78 <datalogger_log_debug>
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   1596a:	2200      	movs	r2, #0
   1596c:	4621      	mov	r1, r4
   1596e:	4630      	mov	r0, r6
   15970:	f7f8 fbc6 	bl	e100 <xQueueReceive>
   15974:	2801      	cmp	r0, #1
        ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptying\n");
   15976:	4628      	mov	r0, r5
    while (xQueueReceive(eventQueue, &discard, 0) == pdPASS)
   15978:	d0f2      	beq.n	15960 <SENS_task_delete+0x1f0>
    ARTEMIS_DEBUG_PRINTF("SENSORS :: EmptyEventQueue : emptied\n");
   1597a:	480a      	ldr	r0, [pc, #40]	@ (159a4 <SENS_task_delete+0x234>)
   1597c:	f7fb fb74 	bl	11068 <am_util_stdio_printf>
   15980:	4808      	ldr	r0, [pc, #32]	@ (159a4 <SENS_task_delete+0x234>)
   15982:	f008 faf9 	bl	1df78 <datalogger_log_debug>
}
   15986:	b00c      	add	sp, #48	@ 0x30
   15988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1598c:	0002bbc4 	.word	0x0002bbc4
   15990:	0002bb18 	.word	0x0002bb18
   15994:	1000b9ac 	.word	0x1000b9ac
   15998:	1000b9b0 	.word	0x1000b9b0
   1599c:	0002bb24 	.word	0x0002bb24
   159a0:	1000b9b4 	.word	0x1000b9b4
   159a4:	0002bb4c 	.word	0x0002bb4c
   159a8:	0002bb74 	.word	0x0002bb74
   159ac:	1000b9ad 	.word	0x1000b9ad
   159b0:	1000b9b8 	.word	0x1000b9b8
   159b4:	0002bc58 	.word	0x0002bc58
   159b8:	1000b9bc 	.word	0x1000b9bc
   159bc:	0002bc2c 	.word	0x0002bc2c
   159c0:	0002bbec 	.word	0x0002bbec
   159c4:	0002bc04 	.word	0x0002bc04
   159c8:	0002bb88 	.word	0x0002bb88
   159cc:	0002bba4 	.word	0x0002bba4
   159d0:	0002baf4 	.word	0x0002baf4

000159d4 <SENS_task_profile_sensors>:
{
   159d4:	b510      	push	{r4, lr}
   159d6:	4602      	mov	r2, r0
   159d8:	b082      	sub	sp, #8
    configASSERT(xTaskCreate((TaskFunction_t)task_depth,
   159da:	2304      	movs	r3, #4
   159dc:	e9cd 3200 	strd	r3, r2, [sp]
   159e0:	481a      	ldr	r0, [pc, #104]	@ (15a4c <SENS_task_profile_sensors+0x78>)
{
   159e2:	460c      	mov	r4, r1
    configASSERT(xTaskCreate((TaskFunction_t)task_depth,
   159e4:	2300      	movs	r3, #0
   159e6:	491a      	ldr	r1, [pc, #104]	@ (15a50 <SENS_task_profile_sensors+0x7c>)
   159e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
   159ec:	f7f8 fff0 	bl	e9d0 <xTaskCreate>
   159f0:	2801      	cmp	r0, #1
   159f2:	d00e      	beq.n	15a12 <SENS_task_profile_sensors+0x3e>
   159f4:	f04f 0380 	mov.w	r3, #128	@ 0x80
   159f8:	f383 8811 	msr	BASEPRI, r3
   159fc:	f3bf 8f6f 	isb	sy
   15a00:	f3bf 8f4f 	dsb	sy
   15a04:	4913      	ldr	r1, [pc, #76]	@ (15a54 <SENS_task_profile_sensors+0x80>)
   15a06:	4814      	ldr	r0, [pc, #80]	@ (15a58 <SENS_task_profile_sensors+0x84>)
   15a08:	f44f 7294 	mov.w	r2, #296	@ 0x128
   15a0c:	f7fb fb2c 	bl	11068 <am_util_stdio_printf>
   15a10:	e7fe      	b.n	15a10 <SENS_task_profile_sensors+0x3c>
    configASSERT(xTaskCreate((TaskFunction_t)task_temperature,
   15a12:	2303      	movs	r3, #3
   15a14:	e9cd 3400 	strd	r3, r4, [sp]
   15a18:	4910      	ldr	r1, [pc, #64]	@ (15a5c <SENS_task_profile_sensors+0x88>)
   15a1a:	4811      	ldr	r0, [pc, #68]	@ (15a60 <SENS_task_profile_sensors+0x8c>)
   15a1c:	2300      	movs	r3, #0
   15a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
   15a22:	f7f8 ffd5 	bl	e9d0 <xTaskCreate>
   15a26:	2801      	cmp	r0, #1
   15a28:	d101      	bne.n	15a2e <SENS_task_profile_sensors+0x5a>
}
   15a2a:	b002      	add	sp, #8
   15a2c:	bd10      	pop	{r4, pc}
   15a2e:	f04f 0380 	mov.w	r3, #128	@ 0x80
   15a32:	f383 8811 	msr	BASEPRI, r3
   15a36:	f3bf 8f6f 	isb	sy
   15a3a:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t)task_temperature,
   15a3e:	4905      	ldr	r1, [pc, #20]	@ (15a54 <SENS_task_profile_sensors+0x80>)
   15a40:	4805      	ldr	r0, [pc, #20]	@ (15a58 <SENS_task_profile_sensors+0x84>)
   15a42:	f240 122d 	movw	r2, #301	@ 0x12d
   15a46:	f7fb fb0f 	bl	11068 <am_util_stdio_printf>
   15a4a:	e7fe      	b.n	15a4a <SENS_task_profile_sensors+0x76>
   15a4c:	0001501d 	.word	0x0001501d
   15a50:	0002bb18 	.word	0x0002bb18
   15a54:	0002b874 	.word	0x0002b874
   15a58:	0002a268 	.word	0x0002a268
   15a5c:	0002bb74 	.word	0x0002bb74
   15a60:	000151f5 	.word	0x000151f5

00015a64 <SENS_task_park_sensors>:
{
   15a64:	b510      	push	{r4, lr}
   15a66:	4602      	mov	r2, r0
   15a68:	b082      	sub	sp, #8
    configASSERT(xTaskCreate((TaskFunction_t)task_depth,
   15a6a:	2304      	movs	r3, #4
   15a6c:	e9cd 3200 	strd	r3, r2, [sp]
   15a70:	481a      	ldr	r0, [pc, #104]	@ (15adc <SENS_task_park_sensors+0x78>)
{
   15a72:	460c      	mov	r4, r1
    configASSERT(xTaskCreate((TaskFunction_t)task_depth,
   15a74:	2300      	movs	r3, #0
   15a76:	491a      	ldr	r1, [pc, #104]	@ (15ae0 <SENS_task_park_sensors+0x7c>)
   15a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
   15a7c:	f7f8 ffa8 	bl	e9d0 <xTaskCreate>
   15a80:	2801      	cmp	r0, #1
   15a82:	d00e      	beq.n	15aa2 <SENS_task_park_sensors+0x3e>
   15a84:	f04f 0380 	mov.w	r3, #128	@ 0x80
   15a88:	f383 8811 	msr	BASEPRI, r3
   15a8c:	f3bf 8f6f 	isb	sy
   15a90:	f3bf 8f4f 	dsb	sy
   15a94:	4913      	ldr	r1, [pc, #76]	@ (15ae4 <SENS_task_park_sensors+0x80>)
   15a96:	4814      	ldr	r0, [pc, #80]	@ (15ae8 <SENS_task_park_sensors+0x84>)
   15a98:	f240 1235 	movw	r2, #309	@ 0x135
   15a9c:	f7fb fae4 	bl	11068 <am_util_stdio_printf>
   15aa0:	e7fe      	b.n	15aa0 <SENS_task_park_sensors+0x3c>
    configASSERT(xTaskCreate((TaskFunction_t)task_temperature,
   15aa2:	2303      	movs	r3, #3
   15aa4:	e9cd 3400 	strd	r3, r4, [sp]
   15aa8:	4910      	ldr	r1, [pc, #64]	@ (15aec <SENS_task_park_sensors+0x88>)
   15aaa:	4811      	ldr	r0, [pc, #68]	@ (15af0 <SENS_task_park_sensors+0x8c>)
   15aac:	2300      	movs	r3, #0
   15aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
   15ab2:	f7f8 ff8d 	bl	e9d0 <xTaskCreate>
   15ab6:	2801      	cmp	r0, #1
   15ab8:	d101      	bne.n	15abe <SENS_task_park_sensors+0x5a>
}
   15aba:	b002      	add	sp, #8
   15abc:	bd10      	pop	{r4, pc}
   15abe:	f04f 0380 	mov.w	r3, #128	@ 0x80
   15ac2:	f383 8811 	msr	BASEPRI, r3
   15ac6:	f3bf 8f6f 	isb	sy
   15aca:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t)task_temperature,
   15ace:	4905      	ldr	r1, [pc, #20]	@ (15ae4 <SENS_task_park_sensors+0x80>)
   15ad0:	4805      	ldr	r0, [pc, #20]	@ (15ae8 <SENS_task_park_sensors+0x84>)
   15ad2:	f44f 729d 	mov.w	r2, #314	@ 0x13a
   15ad6:	f7fb fac7 	bl	11068 <am_util_stdio_printf>
   15ada:	e7fe      	b.n	15ada <SENS_task_park_sensors+0x76>
   15adc:	0001501d 	.word	0x0001501d
   15ae0:	0002bb18 	.word	0x0002bb18
   15ae4:	0002b874 	.word	0x0002b874
   15ae8:	0002a268 	.word	0x0002a268
   15aec:	0002bb74 	.word	0x0002bb74
   15af0:	000151f5 	.word	0x000151f5

00015af4 <SENS_task_sample_depth_continuous>:
{
   15af4:	b500      	push	{lr}
   15af6:	4602      	mov	r2, r0
   15af8:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t)task_depth,
   15afa:	2304      	movs	r3, #4
   15afc:	e9cd 3200 	strd	r3, r2, [sp]
   15b00:	490d      	ldr	r1, [pc, #52]	@ (15b38 <SENS_task_sample_depth_continuous+0x44>)
   15b02:	480e      	ldr	r0, [pc, #56]	@ (15b3c <SENS_task_sample_depth_continuous+0x48>)
   15b04:	2300      	movs	r3, #0
   15b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
   15b0a:	f7f8 ff61 	bl	e9d0 <xTaskCreate>
   15b0e:	2801      	cmp	r0, #1
   15b10:	d102      	bne.n	15b18 <SENS_task_sample_depth_continuous+0x24>
}
   15b12:	b003      	add	sp, #12
   15b14:	f85d fb04 	ldr.w	pc, [sp], #4
   15b18:	f04f 0380 	mov.w	r3, #128	@ 0x80
   15b1c:	f383 8811 	msr	BASEPRI, r3
   15b20:	f3bf 8f6f 	isb	sy
   15b24:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t)task_depth,
   15b28:	4905      	ldr	r1, [pc, #20]	@ (15b40 <SENS_task_sample_depth_continuous+0x4c>)
   15b2a:	4806      	ldr	r0, [pc, #24]	@ (15b44 <SENS_task_sample_depth_continuous+0x50>)
   15b2c:	f44f 72a1 	mov.w	r2, #322	@ 0x142
   15b30:	f7fb fa9a 	bl	11068 <am_util_stdio_printf>
   15b34:	e7fe      	b.n	15b34 <SENS_task_sample_depth_continuous+0x40>
   15b36:	bf00      	nop
   15b38:	0002bb18 	.word	0x0002bb18
   15b3c:	0001501d 	.word	0x0001501d
   15b40:	0002b874 	.word	0x0002b874
   15b44:	0002a268 	.word	0x0002a268

00015b48 <SENS_task_gps>:
{
   15b48:	b500      	push	{lr}
   15b4a:	4602      	mov	r2, r0
   15b4c:	b083      	sub	sp, #12
    configASSERT(xTaskCreate((TaskFunction_t)task_gps,
   15b4e:	2304      	movs	r3, #4
   15b50:	e9cd 3200 	strd	r3, r2, [sp]
   15b54:	490d      	ldr	r1, [pc, #52]	@ (15b8c <SENS_task_gps+0x44>)
   15b56:	480e      	ldr	r0, [pc, #56]	@ (15b90 <SENS_task_gps+0x48>)
   15b58:	2300      	movs	r3, #0
   15b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
   15b5e:	f7f8 ff37 	bl	e9d0 <xTaskCreate>
   15b62:	2801      	cmp	r0, #1
   15b64:	d102      	bne.n	15b6c <SENS_task_gps+0x24>
}
   15b66:	b003      	add	sp, #12
   15b68:	f85d fb04 	ldr.w	pc, [sp], #4
   15b6c:	f04f 0380 	mov.w	r3, #128	@ 0x80
   15b70:	f383 8811 	msr	BASEPRI, r3
   15b74:	f3bf 8f6f 	isb	sy
   15b78:	f3bf 8f4f 	dsb	sy
    configASSERT(xTaskCreate((TaskFunction_t)task_gps,
   15b7c:	4905      	ldr	r1, [pc, #20]	@ (15b94 <SENS_task_gps+0x4c>)
   15b7e:	4806      	ldr	r0, [pc, #24]	@ (15b98 <SENS_task_gps+0x50>)
   15b80:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
   15b84:	f7fb fa70 	bl	11068 <am_util_stdio_printf>
   15b88:	e7fe      	b.n	15b88 <SENS_task_gps+0x40>
   15b8a:	bf00      	nop
   15b8c:	0002bc7c 	.word	0x0002bc7c
   15b90:	00015385 	.word	0x00015385
   15b94:	0002b874 	.word	0x0002b874
   15b98:	0002a268 	.word	0x0002a268

00015b9c <SENS_set_depth_rate>:
    if( (rate > 0) && (rate < SENSOR_MAX_DEPTH_RATE) )
   15b9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   15ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15ba4:	dd0e      	ble.n	15bc4 <SENS_set_depth_rate+0x28>
{
   15ba6:	b538      	push	{r3, r4, r5, lr}
    if( (rate > 0) && (rate < SENSOR_MAX_DEPTH_RATE) )
   15ba8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
   15bac:	eeb4 0ae7 	vcmpe.f32	s0, s15
   15bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   15bb4:	ed2d 8b02 	vpush	{d8}
   15bb8:	eeb0 8a40 	vmov.f32	s16, s0
    if( (rate > 0) && (rate < SENSOR_MAX_DEPTH_RATE) )
   15bbc:	d403      	bmi.n	15bc6 <SENS_set_depth_rate+0x2a>
}
   15bbe:	ecbd 8b02 	vpop	{d8}
   15bc2:	bd38      	pop	{r3, r4, r5, pc}
   15bc4:	4770      	bx	lr
        ARTEMIS_DEBUG_PRINTF("SENSORS :: Depth, Setting rate = %.3fHz\n", rate);
   15bc6:	ee10 0a10 	vmov	r0, s0
   15bca:	f7f6 fbfd 	bl	c3c8 <__aeabi_f2d>
   15bce:	4604      	mov	r4, r0
   15bd0:	460d      	mov	r5, r1
   15bd2:	460b      	mov	r3, r1
   15bd4:	4622      	mov	r2, r4
   15bd6:	4807      	ldr	r0, [pc, #28]	@ (15bf4 <SENS_set_depth_rate+0x58>)
   15bd8:	f7fb fa46 	bl	11068 <am_util_stdio_printf>
   15bdc:	462b      	mov	r3, r5
   15bde:	4805      	ldr	r0, [pc, #20]	@ (15bf4 <SENS_set_depth_rate+0x58>)
   15be0:	4622      	mov	r2, r4
   15be2:	f008 f9c9 	bl	1df78 <datalogger_log_debug>
        sensor_data.depth.rate = rate;
   15be6:	4b04      	ldr	r3, [pc, #16]	@ (15bf8 <SENS_set_depth_rate+0x5c>)
   15be8:	ed83 8a00 	vstr	s16, [r3]
}
   15bec:	ecbd 8b02 	vpop	{d8}
   15bf0:	bd38      	pop	{r3, r4, r5, pc}
   15bf2:	bf00      	nop
   15bf4:	0002bc88 	.word	0x0002bc88
   15bf8:	1000b954 	.word	0x1000b954

00015bfc <SENS_set_temperature_rate>:
    if( (rate > 0) && (rate < SENSOR_MAX_TEMPERATURE_RATE))
   15bfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   15c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15c04:	dd0e      	ble.n	15c24 <SENS_set_temperature_rate+0x28>
{
   15c06:	b538      	push	{r3, r4, r5, lr}
    if( (rate > 0) && (rate < SENSOR_MAX_TEMPERATURE_RATE))
   15c08:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
   15c0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   15c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   15c14:	ed2d 8b02 	vpush	{d8}
   15c18:	eeb0 8a40 	vmov.f32	s16, s0
    if( (rate > 0) && (rate < SENSOR_MAX_TEMPERATURE_RATE))
   15c1c:	d403      	bmi.n	15c26 <SENS_set_temperature_rate+0x2a>
}
   15c1e:	ecbd 8b02 	vpop	{d8}
   15c22:	bd38      	pop	{r3, r4, r5, pc}
   15c24:	4770      	bx	lr
        ARTEMIS_DEBUG_PRINTF("SENSORS :: Temperature, Setting rate = %.3fHz\n", rate);
   15c26:	ee10 0a10 	vmov	r0, s0
   15c2a:	f7f6 fbcd 	bl	c3c8 <__aeabi_f2d>
   15c2e:	4604      	mov	r4, r0
   15c30:	460d      	mov	r5, r1
   15c32:	460b      	mov	r3, r1
   15c34:	4622      	mov	r2, r4
   15c36:	4807      	ldr	r0, [pc, #28]	@ (15c54 <SENS_set_temperature_rate+0x58>)
   15c38:	f7fb fa16 	bl	11068 <am_util_stdio_printf>
   15c3c:	462b      	mov	r3, r5
   15c3e:	4805      	ldr	r0, [pc, #20]	@ (15c54 <SENS_set_temperature_rate+0x58>)
   15c40:	4622      	mov	r2, r4
   15c42:	f008 f999 	bl	1df78 <datalogger_log_debug>
        sensor_data.temperature.rate = rate;
   15c46:	4b04      	ldr	r3, [pc, #16]	@ (15c58 <SENS_set_temperature_rate+0x5c>)
   15c48:	ed83 8a0b 	vstr	s16, [r3, #44]	@ 0x2c
}
   15c4c:	ecbd 8b02 	vpop	{d8}
   15c50:	bd38      	pop	{r3, r4, r5, pc}
   15c52:	bf00      	nop
   15c54:	0002bcb4 	.word	0x0002bcb4
   15c58:	1000b954 	.word	0x1000b954

00015c5c <SENS_set_gps_rate>:
    if( (rate > 0) && (rate < SENSOR_MAX_GPS_RATE))
   15c5c:	2801      	cmp	r0, #1
   15c5e:	d000      	beq.n	15c62 <SENS_set_gps_rate+0x6>
   15c60:	4770      	bx	lr
{
   15c62:	b510      	push	{r4, lr}
   15c64:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("SENSORS :: GPS, Setting rate = %uHz\n", rate);
   15c66:	4621      	mov	r1, r4
   15c68:	4804      	ldr	r0, [pc, #16]	@ (15c7c <SENS_set_gps_rate+0x20>)
   15c6a:	f7fb f9fd 	bl	11068 <am_util_stdio_printf>
   15c6e:	4803      	ldr	r0, [pc, #12]	@ (15c7c <SENS_set_gps_rate+0x20>)
   15c70:	4621      	mov	r1, r4
   15c72:	f008 f981 	bl	1df78 <datalogger_log_debug>
        sensor_data.gps.rate = rate;
   15c76:	4b02      	ldr	r3, [pc, #8]	@ (15c80 <SENS_set_gps_rate+0x24>)
   15c78:	879c      	strh	r4, [r3, #60]	@ 0x3c
}
   15c7a:	bd10      	pop	{r4, pc}
   15c7c:	0002bce4 	.word	0x0002bce4
   15c80:	1000b954 	.word	0x1000b954

00015c84 <module_pus_idle>:
        }
    }
}

void module_pus_idle(void)
{
   15c84:	b538      	push	{r3, r4, r5, lr}

    bool run = true;
    while (run)
    {
        /* go into deep sleep */
        ARTEMIS_DEBUG_PRINTF("\n\nPUS :: Idle, going to deep sleep\n");
   15c86:	4c1c      	ldr	r4, [pc, #112]	@ (15cf8 <module_pus_idle+0x74>)
        ARTEMIS_DEBUG_PRINTF("PUS :: Idle, << DONE HERE >>\n\n");
        vTaskDelay(xDelay1000ms);

        /* check Heap size */
        uint32_t size = xPortGetFreeHeapSize();
        ARTEMIS_DEBUG_PRINTF("\nPUS :: Idle, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   15c88:	4d1c      	ldr	r5, [pc, #112]	@ (15cfc <module_pus_idle+0x78>)
    SENS_sensor_depth_off();
   15c8a:	f7ff fd05 	bl	15698 <SENS_sensor_depth_off>
    SENS_sensor_temperature_off();
   15c8e:	f7ff fd0b 	bl	156a8 <SENS_sensor_temperature_off>
    SENS_sensor_gps_off();
   15c92:	f7ff fd05 	bl	156a0 <SENS_sensor_gps_off>
    i9603n_off();
   15c96:	f7fb fe87 	bl	119a8 <i9603n_off>
    SENS_uninitialize();
   15c9a:	f7ff fcdb 	bl	15654 <SENS_uninitialize>
        ARTEMIS_DEBUG_PRINTF("\n\nPUS :: Idle, going to deep sleep\n");
   15c9e:	4620      	mov	r0, r4
   15ca0:	f7fb f9e2 	bl	11068 <am_util_stdio_printf>
   15ca4:	4620      	mov	r0, r4
        ARTEMIS_DEBUG_PRINTF("PUS :: Idle, << DONE HERE >>\n\n");
   15ca6:	4c16      	ldr	r4, [pc, #88]	@ (15d00 <module_pus_idle+0x7c>)
        ARTEMIS_DEBUG_PRINTF("\n\nPUS :: Idle, going to deep sleep\n");
   15ca8:	f008 f966 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("PUS :: Idle, << DONE HERE >>\n\n");
   15cac:	4620      	mov	r0, r4
   15cae:	f7fb f9db 	bl	11068 <am_util_stdio_printf>
   15cb2:	4620      	mov	r0, r4
   15cb4:	f008 f960 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(xDelay1000ms);
   15cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15cbc:	f7f9 fb92 	bl	f3e4 <vTaskDelay>
        uint32_t size = xPortGetFreeHeapSize();
   15cc0:	f7f7 fdcc 	bl	d85c <xPortGetFreeHeapSize>
   15cc4:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("\nPUS :: Idle, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   15cc6:	4601      	mov	r1, r0
   15cc8:	4628      	mov	r0, r5
   15cca:	f7fb f9cd 	bl	11068 <am_util_stdio_printf>
   15cce:	4621      	mov	r1, r4
   15cd0:	4628      	mov	r0, r5
   15cd2:	f008 f951 	bl	1df78 <datalogger_log_debug>

        /* turn off datalogger */
        datalogger_power_off();
   15cd6:	f009 f827 	bl	1ed28 <datalogger_power_off>
        datalogger_deinit(4);
   15cda:	2004      	movs	r0, #4
   15cdc:	f007 ffd6 	bl	1dc8c <datalogger_deinit>

        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   15ce0:	2001      	movs	r0, #1
   15ce2:	f00b f827 	bl	20d34 <am_hal_sysctrl_sleep>
        vTaskDelay(portMAX_DELAY);
   15ce6:	f04f 30ff 	mov.w	r0, #4294967295
   15cea:	f7f9 fb7b 	bl	f3e4 <vTaskDelay>
        run = false;
    }
    vTaskDelete(NULL);
}
   15cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    vTaskDelete(NULL);
   15cf2:	2000      	movs	r0, #0
   15cf4:	f7f8 bf62 	b.w	ebbc <vTaskDelete>
   15cf8:	0002bd0c 	.word	0x0002bd0c
   15cfc:	0002bd50 	.word	0x0002bd50
   15d00:	0002bd30 	.word	0x0002bd30
   15d04:	00000000 	.word	0x00000000

00015d08 <module_pus_surface_float>:

void module_pus_surface_float(void)
{
   15d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d0c:	ed2d 8b06 	vpush	{d8-d10}
    uint32_t piston_period = xDelay1000ms;
    uint32_t piston_timer = 0;
    bool piston_move = false;
    float Volume = 0.0;
    float Length = 0.0;
   15d10:	ed9f 9acb 	vldr	s18, [pc, #812]	@ 16040 <module_pus_surface_float+0x338>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Pressure = %0.4f bar\n", Pressure);
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
        artemis_rtc_get_time(&time);
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Epoch    = %ld\n", epoch);
        if ( Depth <= CRITICAL_PISTON_POSITON_DEPTH )
   15d14:	eddf 8acb 	vldr	s17, [pc, #812]	@ 16044 <module_pus_surface_float+0x33c>
                    piston_timer = 0;
                }
            }
            else if (eStatus==eSuspended)
            {
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->suspended\n");
   15d18:	f8df 834c 	ldr.w	r8, [pc, #844]	@ 16068 <module_pus_surface_float+0x360>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Pressure = %0.4f bar\n", Pressure);
   15d1c:	f8df 934c 	ldr.w	r9, [pc, #844]	@ 1606c <module_pus_surface_float+0x364>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   15d20:	f8df a34c 	ldr.w	sl, [pc, #844]	@ 16070 <module_pus_surface_float+0x368>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Epoch    = %ld\n", epoch);
   15d24:	f8df b34c 	ldr.w	fp, [pc, #844]	@ 16074 <module_pus_surface_float+0x36c>
{
   15d28:	b08f      	sub	sp, #60	@ 0x3c
    PIS_Get_Length(&Length);
   15d2a:	a805      	add	r0, sp, #20
    float Length = 0.0;
   15d2c:	ed8d 9a05 	vstr	s18, [sp, #20]
    PIS_Get_Length(&Length);
   15d30:	f7fe f974 	bl	1401c <PIS_Get_Length>
    length_update = Length;
   15d34:	ed9d aa05 	vldr	s20, [sp, #20]
    Volume = CTRL_calculate_volume_from_length(Length);
   15d38:	eeb0 0a4a 	vmov.f32	s0, s20
   15d3c:	f7fe fb3c 	bl	143b8 <CTRL_calculate_volume_from_length>
   15d40:	ee10 5a10 	vmov	r5, s0
    Density = CTRL_calculate_lcp_density(Volume);
   15d44:	f7fe fa50 	bl	141e8 <CTRL_calculate_lcp_density>
   15d48:	ee10 0a10 	vmov	r0, s0
    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Density=%.3fkg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   15d4c:	f7f6 fb3c 	bl	c3c8 <__aeabi_f2d>
   15d50:	4602      	mov	r2, r0
   15d52:	4628      	mov	r0, r5
   15d54:	4614      	mov	r4, r2
   15d56:	460d      	mov	r5, r1
   15d58:	f7f6 fb36 	bl	c3c8 <__aeabi_f2d>
   15d5c:	4606      	mov	r6, r0
   15d5e:	9805      	ldr	r0, [sp, #20]
   15d60:	460f      	mov	r7, r1
   15d62:	f7f6 fb31 	bl	c3c8 <__aeabi_f2d>
   15d66:	4622      	mov	r2, r4
   15d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15d6c:	462b      	mov	r3, r5
   15d6e:	e9cd 6700 	strd	r6, r7, [sp]
   15d72:	48b5      	ldr	r0, [pc, #724]	@ (16048 <module_pus_surface_float+0x340>)
   15d74:	f7fb f978 	bl	11068 <am_util_stdio_printf>
   15d78:	9805      	ldr	r0, [sp, #20]
   15d7a:	f7f6 fb25 	bl	c3c8 <__aeabi_f2d>
   15d7e:	4622      	mov	r2, r4
   15d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15d84:	462b      	mov	r3, r5
   15d86:	e9cd 6700 	strd	r6, r7, [sp]
   15d8a:	48af      	ldr	r0, [pc, #700]	@ (16048 <module_pus_surface_float+0x340>)
   15d8c:	f008 f8f4 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston time-out, task->finished\n");
   15d90:	48ae      	ldr	r0, [pc, #696]	@ (1604c <module_pus_surface_float+0x344>)
   15d92:	f7fb f969 	bl	11068 <am_util_stdio_printf>
   15d96:	48ad      	ldr	r0, [pc, #692]	@ (1604c <module_pus_surface_float+0x344>)
   15d98:	f008 f8ee 	bl	1df78 <datalogger_log_debug>
    TaskHandle_t xPiston = NULL;
   15d9c:	2600      	movs	r6, #0
    PIS_set_piston_rate(1);
   15d9e:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   15da0:	9606      	str	r6, [sp, #24]
    PIS_set_piston_rate(1);
   15da2:	f7fe f949 	bl	14038 <PIS_set_piston_rate>
    SENS_set_depth_rate(1);
   15da6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
   15daa:	f7ff fef7 	bl	15b9c <SENS_set_depth_rate>
    SENS_sensor_depth_on();
   15dae:	f7ff fc75 	bl	1569c <SENS_sensor_depth_on>
    SENS_task_sample_depth_continuous(&xDepth);
   15db2:	a807      	add	r0, sp, #28
    TaskHandle_t xDepth = NULL;
   15db4:	9607      	str	r6, [sp, #28]
    float rate_avg = 0;
   15db6:	eeb0 8a49 	vmov.f32	s16, s18
    SENS_task_sample_depth_continuous(&xDepth);
   15dba:	f7ff fe9b 	bl	15af4 <SENS_task_sample_depth_continuous>
    float Depth = 0, Rate = 0;
   15dbe:	ed8d 9a08 	vstr	s18, [sp, #32]
   15dc2:	ed8d 9a09 	vstr	s18, [sp, #36]	@ 0x24
    float Pressure = 0;
   15dc6:	ed8d 9a0a 	vstr	s18, [sp, #40]	@ 0x28
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   15dca:	ed9f 9b9b 	vldr	d9, [pc, #620]	@ 16038 <module_pus_surface_float+0x330>
   15dce:	e020      	b.n	15e12 <module_pus_surface_float+0x10a>
            rate_count++;
   15dd0:	3601      	adds	r6, #1
            rate_avg += Rate;
   15dd2:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
            rate_count++;
   15dd6:	b2f6      	uxtb	r6, r6
            if (rate_count >= 5)
   15dd8:	2e05      	cmp	r6, #5
            rate_avg += Rate;
   15dda:	ee38 8a27 	vadd.f32	s16, s16, s15
            if (rate_count >= 5)
   15dde:	d114      	bne.n	15e0a <module_pus_surface_float+0x102>
                float averaged_rate = (float) (rate_avg / (float)rate_count);
   15de0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
   15de4:	eec8 7a07 	vdiv.f32	s15, s16, s14
                if (averaged_rate < 0.0)
   15de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   15dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15df0:	f100 823f 	bmi.w	16272 <module_pus_surface_float+0x56a>
                else if (averaged_rate > 0.0 && !piston_move)
   15df4:	f300 8187 	bgt.w	16106 <module_pus_surface_float+0x3fe>
                else if (averaged_rate == 0.0 && !piston_move)
   15df8:	eef5 7a40 	vcmp.f32	s15, #0.0
   15dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15e00:	f000 825a 	beq.w	162b8 <module_pus_surface_float+0x5b0>
                rate_count = 0;
   15e04:	ed9f 8a8e 	vldr	s16, [pc, #568]	@ 16040 <module_pus_surface_float+0x338>
   15e08:	2600      	movs	r6, #0
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->finished\n");
                piston_move = false;
                piston_timer = 0;
            }
        }
        vTaskDelay(period);
   15e0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15e0e:	f7f9 fae9 	bl	f3e4 <vTaskDelay>
        SENS_get_depth(&Depth, &Pressure, &Rate);
   15e12:	aa09      	add	r2, sp, #36	@ 0x24
   15e14:	a90a      	add	r1, sp, #40	@ 0x28
   15e16:	a808      	add	r0, sp, #32
   15e18:	f7ff fc4a 	bl	156b0 <SENS_get_depth>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Pressure = %0.4f bar\n", Pressure);
   15e1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   15e1e:	f7f6 fad3 	bl	c3c8 <__aeabi_f2d>
   15e22:	4602      	mov	r2, r0
   15e24:	460b      	mov	r3, r1
   15e26:	4648      	mov	r0, r9
   15e28:	f7fb f91e 	bl	11068 <am_util_stdio_printf>
   15e2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   15e2e:	f7f6 facb 	bl	c3c8 <__aeabi_f2d>
   15e32:	4602      	mov	r2, r0
   15e34:	460b      	mov	r3, r1
   15e36:	4648      	mov	r0, r9
   15e38:	f008 f89e 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   15e3c:	9808      	ldr	r0, [sp, #32]
   15e3e:	f7f6 fac3 	bl	c3c8 <__aeabi_f2d>
   15e42:	4604      	mov	r4, r0
   15e44:	9809      	ldr	r0, [sp, #36]	@ 0x24
   15e46:	460d      	mov	r5, r1
   15e48:	ed8d 9b02 	vstr	d9, [sp, #8]
   15e4c:	f7f6 fabc 	bl	c3c8 <__aeabi_f2d>
   15e50:	4622      	mov	r2, r4
   15e52:	462b      	mov	r3, r5
   15e54:	e9cd 0100 	strd	r0, r1, [sp]
   15e58:	4650      	mov	r0, sl
   15e5a:	f7fb f905 	bl	11068 <am_util_stdio_printf>
   15e5e:	9808      	ldr	r0, [sp, #32]
   15e60:	f7f6 fab2 	bl	c3c8 <__aeabi_f2d>
   15e64:	4604      	mov	r4, r0
   15e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
   15e68:	460d      	mov	r5, r1
   15e6a:	ed8d 9b02 	vstr	d9, [sp, #8]
   15e6e:	f7f6 faab 	bl	c3c8 <__aeabi_f2d>
   15e72:	4622      	mov	r2, r4
   15e74:	e9cd 0100 	strd	r0, r1, [sp]
   15e78:	462b      	mov	r3, r5
   15e7a:	4650      	mov	r0, sl
   15e7c:	f008 f87c 	bl	1df78 <datalogger_log_debug>
        artemis_rtc_get_time(&time);
   15e80:	a80b      	add	r0, sp, #44	@ 0x2c
   15e82:	f007 fea9 	bl	1dbd8 <artemis_rtc_get_time>
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   15e86:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
   15e8a:	9301      	str	r3, [sp, #4]
   15e8c:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
   15e90:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
   15e94:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
   15e98:	9300      	str	r3, [sp, #0]
   15e9a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	@ 0x2c
   15e9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
   15ea2:	f7fe fdfd 	bl	14aa0 <get_epoch_time>
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Epoch    = %ld\n", epoch);
   15ea6:	4601      	mov	r1, r0
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   15ea8:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Epoch    = %ld\n", epoch);
   15eaa:	4658      	mov	r0, fp
   15eac:	f7fb f8dc 	bl	11068 <am_util_stdio_printf>
   15eb0:	4621      	mov	r1, r4
   15eb2:	4658      	mov	r0, fp
   15eb4:	f008 f860 	bl	1df78 <datalogger_log_debug>
        if ( Depth <= CRITICAL_PISTON_POSITON_DEPTH )
   15eb8:	eddd 7a08 	vldr	s15, [sp, #32]
   15ebc:	eef4 7ae8 	vcmpe.f32	s15, s17
   15ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15ec4:	d884      	bhi.n	15dd0 <module_pus_surface_float+0xc8>
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Pressure reached = %0.4f bar\n", Pressure);
   15ec6:	980a      	ldr	r0, [sp, #40]	@ 0x28
        eStatus = eTaskGetState( xPiston );
        if ( (eStatus==eRunning) ||
             (eStatus==eReady)   ||
             (eStatus==eBlocked)  )
        {
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->active\n");
   15ec8:	4e61      	ldr	r6, [pc, #388]	@ (16050 <module_pus_surface_float+0x348>)

            /* piston time for up to 120 seconds */
            piston_timer += piston_period;
            if (piston_timer >= 120000)
   15eca:	4f62      	ldr	r7, [pc, #392]	@ (16054 <module_pus_surface_float+0x34c>)
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Pressure reached = %0.4f bar\n", Pressure);
   15ecc:	f7f6 fa7c 	bl	c3c8 <__aeabi_f2d>
   15ed0:	4602      	mov	r2, r0
   15ed2:	460b      	mov	r3, r1
   15ed4:	4860      	ldr	r0, [pc, #384]	@ (16058 <module_pus_surface_float+0x350>)
   15ed6:	f7fb f8c7 	bl	11068 <am_util_stdio_printf>
   15eda:	980a      	ldr	r0, [sp, #40]	@ 0x28
   15edc:	f7f6 fa74 	bl	c3c8 <__aeabi_f2d>
   15ee0:	4602      	mov	r2, r0
   15ee2:	460b      	mov	r3, r1
   15ee4:	485c      	ldr	r0, [pc, #368]	@ (16058 <module_pus_surface_float+0x350>)
   15ee6:	f008 f847 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth reached    = %0.4f m\n", Depth);
   15eea:	9808      	ldr	r0, [sp, #32]
   15eec:	f7f6 fa6c 	bl	c3c8 <__aeabi_f2d>
   15ef0:	4602      	mov	r2, r0
   15ef2:	460b      	mov	r3, r1
   15ef4:	4859      	ldr	r0, [pc, #356]	@ (1605c <module_pus_surface_float+0x354>)
   15ef6:	f7fb f8b7 	bl	11068 <am_util_stdio_printf>
   15efa:	9808      	ldr	r0, [sp, #32]
   15efc:	f7f6 fa64 	bl	c3c8 <__aeabi_f2d>
   15f00:	4602      	mov	r2, r0
   15f02:	460b      	mov	r3, r1
   15f04:	4855      	ldr	r0, [pc, #340]	@ (1605c <module_pus_surface_float+0x354>)
   15f06:	f008 f837 	bl	1df78 <datalogger_log_debug>
            SENS_task_delete(xDepth);
   15f0a:	9807      	ldr	r0, [sp, #28]
   15f0c:	f7ff fc30 	bl	15770 <SENS_task_delete>
            SENS_sensor_depth_off();
   15f10:	f7ff fbc2 	bl	15698 <SENS_sensor_depth_off>
        vTaskDelay(period);
   15f14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15f18:	f7f9 fa64 	bl	f3e4 <vTaskDelay>
    vTaskDelay(piston_period);
   15f1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15f20:	f7f9 fa60 	bl	f3e4 <vTaskDelay>
    PIS_task_move_full(&xPiston);
   15f24:	a806      	add	r0, sp, #24
   15f26:	f7fd ffd1 	bl	13ecc <PIS_task_move_full>
    vTaskDelay(piston_period);
   15f2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15f2e:	f7f9 fa59 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   15f32:	9806      	ldr	r0, [sp, #24]
   15f34:	f7f8 feba 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) ||
   15f38:	2802      	cmp	r0, #2
    vTaskDelay(piston_period);
   15f3a:	f04f 0500 	mov.w	r5, #0
        if ( (eStatus==eRunning) ||
   15f3e:	d90e      	bls.n	15f5e <module_pus_surface_float+0x256>
                piston_move = false;
                piston_timer = 0;
                pusEvent = MODE_DONE;
            }
        }
        else if (eStatus==eSuspended)
   15f40:	2803      	cmp	r0, #3
   15f42:	f000 8099 	beq.w	16078 <module_pus_surface_float+0x370>
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->suspended\n");
            PIS_task_delete(xPiston);
            //piston_move = false;
            piston_timer = 0;
        }
        else if (eStatus==eDeleted)
   15f46:	2804      	cmp	r0, #4
   15f48:	f000 80a1 	beq.w	1608e <module_pus_surface_float+0x386>
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->finished\n");
            piston_move = false;
            piston_timer = 0;
            pusEvent = MODE_DONE;
        }
        vTaskDelay(piston_period);
   15f4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15f50:	f7f9 fa48 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   15f54:	9806      	ldr	r0, [sp, #24]
   15f56:	f7f8 fea9 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) ||
   15f5a:	2802      	cmp	r0, #2
   15f5c:	d8f0      	bhi.n	15f40 <module_pus_surface_float+0x238>
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->active\n");
   15f5e:	4630      	mov	r0, r6
   15f60:	f7fb f882 	bl	11068 <am_util_stdio_printf>
            piston_timer += piston_period;
   15f64:	f505 757a 	add.w	r5, r5, #1000	@ 0x3e8
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->active\n");
   15f68:	4630      	mov	r0, r6
   15f6a:	f008 f805 	bl	1df78 <datalogger_log_debug>
            if (piston_timer >= 120000)
   15f6e:	42bd      	cmp	r5, r7
   15f70:	d9ec      	bls.n	15f4c <module_pus_surface_float+0x244>
                PIS_Get_Length(&Length);
   15f72:	a805      	add	r0, sp, #20
   15f74:	f7fe f852 	bl	1401c <PIS_Get_Length>
                Volume = CTRL_calculate_volume_from_length(Length);
   15f78:	ed9d 0a05 	vldr	s0, [sp, #20]
   15f7c:	f7fe fa1c 	bl	143b8 <CTRL_calculate_volume_from_length>
   15f80:	ee10 5a10 	vmov	r5, s0
                Density = CTRL_calculate_lcp_density(Volume);
   15f84:	f7fe f930 	bl	141e8 <CTRL_calculate_lcp_density>
   15f88:	ee10 0a10 	vmov	r0, s0
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Density=%.3fkg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   15f8c:	f7f6 fa1c 	bl	c3c8 <__aeabi_f2d>
   15f90:	4602      	mov	r2, r0
   15f92:	4628      	mov	r0, r5
   15f94:	4614      	mov	r4, r2
   15f96:	460d      	mov	r5, r1
   15f98:	f7f6 fa16 	bl	c3c8 <__aeabi_f2d>
   15f9c:	4606      	mov	r6, r0
   15f9e:	9805      	ldr	r0, [sp, #20]
   15fa0:	460f      	mov	r7, r1
   15fa2:	f7f6 fa11 	bl	c3c8 <__aeabi_f2d>
   15fa6:	4622      	mov	r2, r4
   15fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15fac:	462b      	mov	r3, r5
   15fae:	e9cd 6700 	strd	r6, r7, [sp]
   15fb2:	4825      	ldr	r0, [pc, #148]	@ (16048 <module_pus_surface_float+0x340>)
   15fb4:	f7fb f858 	bl	11068 <am_util_stdio_printf>
   15fb8:	9805      	ldr	r0, [sp, #20]
   15fba:	f7f6 fa05 	bl	c3c8 <__aeabi_f2d>
   15fbe:	462b      	mov	r3, r5
   15fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15fc4:	4622      	mov	r2, r4
   15fc6:	4820      	ldr	r0, [pc, #128]	@ (16048 <module_pus_surface_float+0x340>)
   15fc8:	e9cd 6700 	strd	r6, r7, [sp]
   15fcc:	f007 ffd4 	bl	1df78 <datalogger_log_debug>
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston time-out, task->finished\n");
   15fd0:	481e      	ldr	r0, [pc, #120]	@ (1604c <module_pus_surface_float+0x344>)
   15fd2:	f7fb f849 	bl	11068 <am_util_stdio_printf>
   15fd6:	481d      	ldr	r0, [pc, #116]	@ (1604c <module_pus_surface_float+0x344>)
   15fd8:	f007 ffce 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   15fdc:	9806      	ldr	r0, [sp, #24]
   15fde:	f7fd ffc5 	bl	13f6c <PIS_task_delete>
                vTaskDelay(piston_period);
   15fe2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   15fe6:	f7f9 f9fd 	bl	f3e4 <vTaskDelay>
                PIS_Reset();
   15fea:	f7fe f8b5 	bl	14158 <PIS_Reset>
                pusEvent = MODE_DONE;
   15fee:	2304      	movs	r3, #4
        vTaskDelay(piston_period);
   15ff0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                pusEvent = MODE_DONE;
   15ff4:	f88d 3013 	strb.w	r3, [sp, #19]
        vTaskDelay(piston_period);
   15ff8:	f7f9 f9f4 	bl	f3e4 <vTaskDelay>
    }

    /* check Heap size */
    uint32_t size = xPortGetFreeHeapSize();
   15ffc:	f7f7 fc2e 	bl	d85c <xPortGetFreeHeapSize>
   16000:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nPUS :: surface_float, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   16002:	4621      	mov	r1, r4
   16004:	4816      	ldr	r0, [pc, #88]	@ (16060 <module_pus_surface_float+0x358>)
   16006:	f7fb f82f 	bl	11068 <am_util_stdio_printf>
   1600a:	4621      	mov	r1, r4
   1600c:	4814      	ldr	r0, [pc, #80]	@ (16060 <module_pus_surface_float+0x358>)
   1600e:	f007 ffb3 	bl	1df78 <datalogger_log_debug>

    SendEvent(pusEventQueue, &pusEvent);
   16012:	4a14      	ldr	r2, [pc, #80]	@ (16064 <module_pus_surface_float+0x35c>)
    /** Iridium OFF */
}

static void SendEvent(QueueHandle_t eventQueue, Event_e *event)
{
    xQueueSend(eventQueue, event, portMAX_DELAY);
   16014:	2300      	movs	r3, #0
   16016:	f10d 0113 	add.w	r1, sp, #19
   1601a:	6810      	ldr	r0, [r2, #0]
   1601c:	f04f 32ff 	mov.w	r2, #4294967295
   16020:	f7f7 fe20 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   16024:	2000      	movs	r0, #0
   16026:	f7f8 fdc9 	bl	ebbc <vTaskDelete>
}
   1602a:	b00f      	add	sp, #60	@ 0x3c
   1602c:	ecbd 8b06 	vpop	{d8-d10}
   16030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16034:	f3af 8000 	nop.w
   16038:	00000000 	.word	0x00000000
   1603c:	3ff00000 	.word	0x3ff00000
   16040:	00000000 	.word	0x00000000
   16044:	42340000 	.word	0x42340000
   16048:	0002bd80 	.word	0x0002bd80
   1604c:	0002bdcc 	.word	0x0002bdcc
   16050:	0002c048 	.word	0x0002c048
   16054:	0001d4bf 	.word	0x0001d4bf
   16058:	0002be98 	.word	0x0002be98
   1605c:	0002becc 	.word	0x0002becc
   16060:	0002c0d4 	.word	0x0002c0d4
   16064:	1000bc90 	.word	0x1000bc90
   16068:	0002c074 	.word	0x0002c074
   1606c:	0002be04 	.word	0x0002be04
   16070:	0002be30 	.word	0x0002be30
   16074:	0002be70 	.word	0x0002be70
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->suspended\n");
   16078:	48ad      	ldr	r0, [pc, #692]	@ (16330 <module_pus_surface_float+0x628>)
   1607a:	f7fa fff5 	bl	11068 <am_util_stdio_printf>
   1607e:	48ac      	ldr	r0, [pc, #688]	@ (16330 <module_pus_surface_float+0x628>)
   16080:	f007 ff7a 	bl	1df78 <datalogger_log_debug>
            PIS_task_delete(xPiston);
   16084:	9806      	ldr	r0, [sp, #24]
   16086:	f7fd ff71 	bl	13f6c <PIS_task_delete>
            piston_timer = 0;
   1608a:	2500      	movs	r5, #0
   1608c:	e75e      	b.n	15f4c <module_pus_surface_float+0x244>
            PIS_Get_Length(&Length);
   1608e:	4604      	mov	r4, r0
   16090:	a805      	add	r0, sp, #20
   16092:	f7fd ffc3 	bl	1401c <PIS_Get_Length>
            Volume = CTRL_calculate_volume_from_length(Length);
   16096:	ed9d 0a05 	vldr	s0, [sp, #20]
   1609a:	f7fe f98d 	bl	143b8 <CTRL_calculate_volume_from_length>
   1609e:	ee10 5a10 	vmov	r5, s0
            Density = CTRL_calculate_lcp_density(Volume);
   160a2:	f7fe f8a1 	bl	141e8 <CTRL_calculate_lcp_density>
   160a6:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Density=%.3fkg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   160aa:	f7f6 f98d 	bl	c3c8 <__aeabi_f2d>
   160ae:	4606      	mov	r6, r0
   160b0:	4628      	mov	r0, r5
   160b2:	460f      	mov	r7, r1
   160b4:	f7f6 f988 	bl	c3c8 <__aeabi_f2d>
   160b8:	4680      	mov	r8, r0
   160ba:	9805      	ldr	r0, [sp, #20]
   160bc:	4689      	mov	r9, r1
   160be:	f7f6 f983 	bl	c3c8 <__aeabi_f2d>
   160c2:	4632      	mov	r2, r6
   160c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   160c8:	463b      	mov	r3, r7
   160ca:	e9cd 8900 	strd	r8, r9, [sp]
   160ce:	4899      	ldr	r0, [pc, #612]	@ (16334 <module_pus_surface_float+0x62c>)
   160d0:	f7fa ffca 	bl	11068 <am_util_stdio_printf>
   160d4:	9805      	ldr	r0, [sp, #20]
   160d6:	f7f6 f977 	bl	c3c8 <__aeabi_f2d>
   160da:	4632      	mov	r2, r6
   160dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   160e0:	463b      	mov	r3, r7
   160e2:	e9cd 8900 	strd	r8, r9, [sp]
   160e6:	4893      	ldr	r0, [pc, #588]	@ (16334 <module_pus_surface_float+0x62c>)
   160e8:	f007 ff46 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->finished\n");
   160ec:	4892      	ldr	r0, [pc, #584]	@ (16338 <module_pus_surface_float+0x630>)
   160ee:	f7fa ffbb 	bl	11068 <am_util_stdio_printf>
   160f2:	4891      	ldr	r0, [pc, #580]	@ (16338 <module_pus_surface_float+0x630>)
   160f4:	f007 ff40 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(piston_period);
   160f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
            pusEvent = MODE_DONE;
   160fc:	f88d 4013 	strb.w	r4, [sp, #19]
        vTaskDelay(piston_period);
   16100:	f7f9 f970 	bl	f3e4 <vTaskDelay>
    while (piston_move)
   16104:	e77a      	b.n	15ffc <module_pus_surface_float+0x2f4>
                    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth Rate is positive, increase %fin\n", PARK_POSITION_INCREMENT);
   16106:	a386      	add	r3, pc, #536	@ (adr r3, 16320 <module_pus_surface_float+0x618>)
   16108:	e9d3 2300 	ldrd	r2, r3, [r3]
   1610c:	488b      	ldr	r0, [pc, #556]	@ (1633c <module_pus_surface_float+0x634>)
   1610e:	f7fa ffab 	bl	11068 <am_util_stdio_printf>
   16112:	a383      	add	r3, pc, #524	@ (adr r3, 16320 <module_pus_surface_float+0x618>)
   16114:	e9d3 2300 	ldrd	r2, r3, [r3]
   16118:	4888      	ldr	r0, [pc, #544]	@ (1633c <module_pus_surface_float+0x634>)
   1611a:	f007 ff2d 	bl	1df78 <datalogger_log_debug>
                    length_update += PARK_POSITION_INCREMENT;
   1611e:	eddf 7a88 	vldr	s15, [pc, #544]	@ 16340 <module_pus_surface_float+0x638>
   16122:	ee3a aa27 	vadd.f32	s20, s20, s15
                    if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   16126:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
   1612a:	eeb4 aac8 	vcmpe.f32	s20, s16
   1612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16132:	f280 80a5 	bge.w	16280 <module_pus_surface_float+0x578>
                    PIS_set_length(length_update);
   16136:	eeb0 0a4a 	vmov.f32	s0, s20
   1613a:	f7fd ffc7 	bl	140cc <PIS_set_length>
                    PIS_task_move_length(&xPiston);
   1613e:	a806      	add	r0, sp, #24
   16140:	f7fd fe74 	bl	13e2c <PIS_task_move_length>
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->active\n");
   16144:	4d7f      	ldr	r5, [pc, #508]	@ (16344 <module_pus_surface_float+0x63c>)
                if (piston_timer >= 120000)
   16146:	4e80      	ldr	r6, [pc, #512]	@ (16348 <module_pus_surface_float+0x640>)
                            length_update = CRUSH_DEPTH_PISTON_POSITION;
   16148:	2400      	movs	r4, #0
            eStatus = eTaskGetState( xPiston );
   1614a:	9806      	ldr	r0, [sp, #24]
   1614c:	f7f8 fdae 	bl	ecac <eTaskGetState>
            if ( (eStatus==eRunning) ||
   16150:	2802      	cmp	r0, #2
   16152:	d93a      	bls.n	161ca <module_pus_surface_float+0x4c2>
            else if (eStatus==eSuspended)
   16154:	2803      	cmp	r0, #3
   16156:	f000 8081 	beq.w	1625c <module_pus_surface_float+0x554>
            else if (eStatus==eDeleted)
   1615a:	2804      	cmp	r0, #4
   1615c:	d1f5      	bne.n	1614a <module_pus_surface_float+0x442>
                PIS_Get_Length(&Length);
   1615e:	a805      	add	r0, sp, #20
   16160:	f7fd ff5c 	bl	1401c <PIS_Get_Length>
                Volume = CTRL_calculate_volume_from_length(Length);
   16164:	ed9d 0a05 	vldr	s0, [sp, #20]
   16168:	f7fe f926 	bl	143b8 <CTRL_calculate_volume_from_length>
   1616c:	ee10 5a10 	vmov	r5, s0
                Density = CTRL_calculate_lcp_density(Volume);
   16170:	f7fe f83a 	bl	141e8 <CTRL_calculate_lcp_density>
   16174:	ee10 0a10 	vmov	r0, s0
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Density=%.3fkg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   16178:	f7f6 f926 	bl	c3c8 <__aeabi_f2d>
   1617c:	4602      	mov	r2, r0
   1617e:	4628      	mov	r0, r5
   16180:	4614      	mov	r4, r2
   16182:	460d      	mov	r5, r1
   16184:	f7f6 f920 	bl	c3c8 <__aeabi_f2d>
   16188:	4606      	mov	r6, r0
   1618a:	9805      	ldr	r0, [sp, #20]
   1618c:	460f      	mov	r7, r1
   1618e:	f7f6 f91b 	bl	c3c8 <__aeabi_f2d>
   16192:	4622      	mov	r2, r4
   16194:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16198:	462b      	mov	r3, r5
   1619a:	e9cd 6700 	strd	r6, r7, [sp]
   1619e:	4865      	ldr	r0, [pc, #404]	@ (16334 <module_pus_surface_float+0x62c>)
   161a0:	f7fa ff62 	bl	11068 <am_util_stdio_printf>
   161a4:	9805      	ldr	r0, [sp, #20]
   161a6:	f7f6 f90f 	bl	c3c8 <__aeabi_f2d>
   161aa:	4622      	mov	r2, r4
   161ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   161b0:	462b      	mov	r3, r5
   161b2:	e9cd 6700 	strd	r6, r7, [sp]
   161b6:	485f      	ldr	r0, [pc, #380]	@ (16334 <module_pus_surface_float+0x62c>)
   161b8:	f007 fede 	bl	1df78 <datalogger_log_debug>
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->finished\n");
   161bc:	485e      	ldr	r0, [pc, #376]	@ (16338 <module_pus_surface_float+0x630>)
   161be:	f7fa ff53 	bl	11068 <am_util_stdio_printf>
   161c2:	485d      	ldr	r0, [pc, #372]	@ (16338 <module_pus_surface_float+0x630>)
   161c4:	f007 fed8 	bl	1df78 <datalogger_log_debug>
        while (piston_move)
   161c8:	e61c      	b.n	15e04 <module_pus_surface_float+0xfc>
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->active\n");
   161ca:	4628      	mov	r0, r5
   161cc:	f7fa ff4c 	bl	11068 <am_util_stdio_printf>
                piston_timer += piston_period;
   161d0:	f504 747a 	add.w	r4, r4, #1000	@ 0x3e8
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->active\n");
   161d4:	4628      	mov	r0, r5
   161d6:	f007 fecf 	bl	1df78 <datalogger_log_debug>
                if (piston_timer >= 120000)
   161da:	42b4      	cmp	r4, r6
   161dc:	d9b5      	bls.n	1614a <module_pus_surface_float+0x442>
                    PIS_Get_Length(&Length);
   161de:	a805      	add	r0, sp, #20
   161e0:	f7fd ff1c 	bl	1401c <PIS_Get_Length>
                    Volume = CTRL_calculate_volume_from_length(Length);
   161e4:	ed9d 0a05 	vldr	s0, [sp, #20]
   161e8:	f7fe f8e6 	bl	143b8 <CTRL_calculate_volume_from_length>
   161ec:	ee10 5a10 	vmov	r5, s0
                    Density = CTRL_calculate_lcp_density(Volume);
   161f0:	f7fd fffa 	bl	141e8 <CTRL_calculate_lcp_density>
   161f4:	ee10 0a10 	vmov	r0, s0
                    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Density=%.3fkg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   161f8:	f7f6 f8e6 	bl	c3c8 <__aeabi_f2d>
   161fc:	4602      	mov	r2, r0
   161fe:	4628      	mov	r0, r5
   16200:	4614      	mov	r4, r2
   16202:	460d      	mov	r5, r1
   16204:	f7f6 f8e0 	bl	c3c8 <__aeabi_f2d>
   16208:	4606      	mov	r6, r0
   1620a:	9805      	ldr	r0, [sp, #20]
   1620c:	460f      	mov	r7, r1
   1620e:	f7f6 f8db 	bl	c3c8 <__aeabi_f2d>
   16212:	4622      	mov	r2, r4
   16214:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16218:	462b      	mov	r3, r5
   1621a:	e9cd 6700 	strd	r6, r7, [sp]
   1621e:	4845      	ldr	r0, [pc, #276]	@ (16334 <module_pus_surface_float+0x62c>)
   16220:	f7fa ff22 	bl	11068 <am_util_stdio_printf>
   16224:	9805      	ldr	r0, [sp, #20]
   16226:	f7f6 f8cf 	bl	c3c8 <__aeabi_f2d>
   1622a:	4622      	mov	r2, r4
   1622c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16230:	462b      	mov	r3, r5
   16232:	e9cd 6700 	strd	r6, r7, [sp]
   16236:	483f      	ldr	r0, [pc, #252]	@ (16334 <module_pus_surface_float+0x62c>)
   16238:	f007 fe9e 	bl	1df78 <datalogger_log_debug>
                    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston time-out, task->finished\n");
   1623c:	4843      	ldr	r0, [pc, #268]	@ (1634c <module_pus_surface_float+0x644>)
   1623e:	f7fa ff13 	bl	11068 <am_util_stdio_printf>
   16242:	4842      	ldr	r0, [pc, #264]	@ (1634c <module_pus_surface_float+0x644>)
   16244:	f007 fe98 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   16248:	9806      	ldr	r0, [sp, #24]
   1624a:	f7fd fe8f 	bl	13f6c <PIS_task_delete>
                    vTaskDelay(piston_period);
   1624e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16252:	f7f9 f8c7 	bl	f3e4 <vTaskDelay>
                    PIS_Reset();
   16256:	f7fd ff7f 	bl	14158 <PIS_Reset>
        while (piston_move)
   1625a:	e5d3      	b.n	15e04 <module_pus_surface_float+0xfc>
                ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Piston task->suspended\n");
   1625c:	4640      	mov	r0, r8
   1625e:	f7fa ff03 	bl	11068 <am_util_stdio_printf>
   16262:	4640      	mov	r0, r8
   16264:	f007 fe88 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   16268:	9806      	ldr	r0, [sp, #24]
   1626a:	f7fd fe7f 	bl	13f6c <PIS_task_delete>
                piston_timer = 0;
   1626e:	2400      	movs	r4, #0
   16270:	e76b      	b.n	1614a <module_pus_surface_float+0x442>
                    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth Rate is negative, do nothing\n");
   16272:	4837      	ldr	r0, [pc, #220]	@ (16350 <module_pus_surface_float+0x648>)
   16274:	f7fa fef8 	bl	11068 <am_util_stdio_printf>
   16278:	4835      	ldr	r0, [pc, #212]	@ (16350 <module_pus_surface_float+0x648>)
   1627a:	f007 fe7d 	bl	1df78 <datalogger_log_debug>
        while (piston_move)
   1627e:	e5c1      	b.n	15e04 <module_pus_surface_float+0xfc>
                        if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   16280:	eddd 7a08 	vldr	s15, [sp, #32]
   16284:	eef4 7ae8 	vcmpe.f32	s15, s17
   16288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1628c:	f6ff af53 	blt.w	16136 <module_pus_surface_float+0x42e>
                            ARTEMIS_DEBUG_PRINTF("\n<< PUS :: surface_float, Depth = %.4f is @critial piston position >>\n", Depth);
   16290:	ee17 0a90 	vmov	r0, s15
   16294:	f7f6 f898 	bl	c3c8 <__aeabi_f2d>
   16298:	4602      	mov	r2, r0
   1629a:	460b      	mov	r3, r1
   1629c:	482d      	ldr	r0, [pc, #180]	@ (16354 <module_pus_surface_float+0x64c>)
   1629e:	f7fa fee3 	bl	11068 <am_util_stdio_printf>
   162a2:	9808      	ldr	r0, [sp, #32]
   162a4:	f7f6 f890 	bl	c3c8 <__aeabi_f2d>
   162a8:	4602      	mov	r2, r0
   162aa:	460b      	mov	r3, r1
   162ac:	4829      	ldr	r0, [pc, #164]	@ (16354 <module_pus_surface_float+0x64c>)
   162ae:	f007 fe63 	bl	1df78 <datalogger_log_debug>
                            length_update = CRUSH_DEPTH_PISTON_POSITION;
   162b2:	eeb0 aa48 	vmov.f32	s20, s16
                    PIS_set_length(length_update);
   162b6:	e73e      	b.n	16136 <module_pus_surface_float+0x42e>
                    ARTEMIS_DEBUG_PRINTF("PUS :: surface_float, Depth Rate is stable, increase %fin\n", PARK_POSITION_INCREMENT2);
   162b8:	a31b      	add	r3, pc, #108	@ (adr r3, 16328 <module_pus_surface_float+0x620>)
   162ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   162be:	4826      	ldr	r0, [pc, #152]	@ (16358 <module_pus_surface_float+0x650>)
   162c0:	f7fa fed2 	bl	11068 <am_util_stdio_printf>
   162c4:	a318      	add	r3, pc, #96	@ (adr r3, 16328 <module_pus_surface_float+0x620>)
   162c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   162ca:	4823      	ldr	r0, [pc, #140]	@ (16358 <module_pus_surface_float+0x650>)
   162cc:	f007 fe54 	bl	1df78 <datalogger_log_debug>
                    length_update += PARK_POSITION_INCREMENT;
   162d0:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 16340 <module_pus_surface_float+0x638>
   162d4:	ee3a aa27 	vadd.f32	s20, s20, s15
                    if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   162d8:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
   162dc:	eeb4 aac8 	vcmpe.f32	s20, s16
   162e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   162e4:	f6ff af27 	blt.w	16136 <module_pus_surface_float+0x42e>
                        if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   162e8:	eddd 7a08 	vldr	s15, [sp, #32]
   162ec:	eef4 7ae8 	vcmpe.f32	s15, s17
   162f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   162f4:	f6ff af1f 	blt.w	16136 <module_pus_surface_float+0x42e>
                            ARTEMIS_DEBUG_PRINTF("\n<< PUS :: surface_float, Depth=%.4f is @critial piston position >>\n", Depth);
   162f8:	ee17 0a90 	vmov	r0, s15
   162fc:	f7f6 f864 	bl	c3c8 <__aeabi_f2d>
   16300:	4602      	mov	r2, r0
   16302:	460b      	mov	r3, r1
   16304:	4815      	ldr	r0, [pc, #84]	@ (1635c <module_pus_surface_float+0x654>)
   16306:	f7fa feaf 	bl	11068 <am_util_stdio_printf>
   1630a:	9808      	ldr	r0, [sp, #32]
   1630c:	f7f6 f85c 	bl	c3c8 <__aeabi_f2d>
   16310:	4602      	mov	r2, r0
   16312:	460b      	mov	r3, r1
   16314:	4811      	ldr	r0, [pc, #68]	@ (1635c <module_pus_surface_float+0x654>)
   16316:	f007 fe2f 	bl	1df78 <datalogger_log_debug>
                            length_update = CRUSH_DEPTH_PISTON_POSITION;
   1631a:	eeb0 aa48 	vmov.f32	s20, s16
   1631e:	e70a      	b.n	16136 <module_pus_surface_float+0x42e>
   16320:	e0000000 	.word	0xe0000000
   16324:	3f9eb851 	.word	0x3f9eb851
   16328:	40000000 	.word	0x40000000
   1632c:	3f847ae1 	.word	0x3f847ae1
   16330:	0002c074 	.word	0x0002c074
   16334:	0002bd80 	.word	0x0002bd80
   16338:	0002c0a4 	.word	0x0002c0a4
   1633c:	0002bf3c 	.word	0x0002bf3c
   16340:	3cf5c28f 	.word	0x3cf5c28f
   16344:	0002c048 	.word	0x0002c048
   16348:	0001d4bf 	.word	0x0001d4bf
   1634c:	0002bdcc 	.word	0x0002bdcc
   16350:	0002bf00 	.word	0x0002bf00
   16354:	0002bf7c 	.word	0x0002bf7c
   16358:	0002bfc4 	.word	0x0002bfc4
   1635c:	0002c000 	.word	0x0002c000

00016360 <module_sps_idle>:
{
   16360:	b530      	push	{r4, r5, lr}
        ARTEMIS_DEBUG_PRINTF("SPS :: Idle, %u sec wait\n", wait_time);
   16362:	4c22      	ldr	r4, [pc, #136]	@ (163ec <module_sps_idle+0x8c>)
    ARTEMIS_DEBUG_PRINTF("\n<<< Starting Profile %u >>>\n\n", prof_number+1);
   16364:	4d22      	ldr	r5, [pc, #136]	@ (163f0 <module_sps_idle+0x90>)
{
   16366:	b083      	sub	sp, #12
    SENS_sensor_gps_off();
   16368:	f7ff f99a 	bl	156a0 <SENS_sensor_gps_off>
    SENS_sensor_depth_off();
   1636c:	f7ff f994 	bl	15698 <SENS_sensor_depth_off>
    SENS_sensor_temperature_off();
   16370:	f7ff f99a 	bl	156a8 <SENS_sensor_temperature_off>
        ARTEMIS_DEBUG_PRINTF("SPS :: Idle, %u sec wait\n", wait_time);
   16374:	2101      	movs	r1, #1
   16376:	4620      	mov	r0, r4
   16378:	f7fa fe76 	bl	11068 <am_util_stdio_printf>
   1637c:	2101      	movs	r1, #1
   1637e:	4620      	mov	r0, r4
    ARTEMIS_DEBUG_PRINTF("SPS :: Idle, Task->finished\n");
   16380:	4c1c      	ldr	r4, [pc, #112]	@ (163f4 <module_sps_idle+0x94>)
        ARTEMIS_DEBUG_PRINTF("SPS :: Idle, %u sec wait\n", wait_time);
   16382:	f007 fdf9 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(xDelay);
   16386:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1638a:	f7f9 f82b 	bl	f3e4 <vTaskDelay>
        spsEvent = MODE_DONE;
   1638e:	2304      	movs	r3, #4
    ARTEMIS_DEBUG_PRINTF("SPS :: Idle, Task->finished\n");
   16390:	4620      	mov	r0, r4
        spsEvent = MODE_DONE;
   16392:	f88d 3007 	strb.w	r3, [sp, #7]
    ARTEMIS_DEBUG_PRINTF("SPS :: Idle, Task->finished\n");
   16396:	f7fa fe67 	bl	11068 <am_util_stdio_printf>
   1639a:	4620      	mov	r0, r4
   1639c:	f007 fdec 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\n<<< Starting Profile %u >>>\n\n", prof_number+1);
   163a0:	4c15      	ldr	r4, [pc, #84]	@ (163f8 <module_sps_idle+0x98>)
   163a2:	7829      	ldrb	r1, [r5, #0]
   163a4:	4620      	mov	r0, r4
   163a6:	3101      	adds	r1, #1
   163a8:	f7fa fe5e 	bl	11068 <am_util_stdio_printf>
   163ac:	7829      	ldrb	r1, [r5, #0]
    ARTEMIS_DEBUG_PRINTF("SPS :: Idle, FreeRTOS HEAP SIZE = %u Bytes\n", size);
   163ae:	4d13      	ldr	r5, [pc, #76]	@ (163fc <module_sps_idle+0x9c>)
    ARTEMIS_DEBUG_PRINTF("\n<<< Starting Profile %u >>>\n\n", prof_number+1);
   163b0:	4620      	mov	r0, r4
   163b2:	3101      	adds	r1, #1
   163b4:	f007 fde0 	bl	1df78 <datalogger_log_debug>
    uint32_t size = xPortGetFreeHeapSize();
   163b8:	f7f7 fa50 	bl	d85c <xPortGetFreeHeapSize>
   163bc:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("SPS :: Idle, FreeRTOS HEAP SIZE = %u Bytes\n", size);
   163be:	4601      	mov	r1, r0
   163c0:	4628      	mov	r0, r5
   163c2:	f7fa fe51 	bl	11068 <am_util_stdio_printf>
   163c6:	4621      	mov	r1, r4
   163c8:	4628      	mov	r0, r5
   163ca:	f007 fdd5 	bl	1df78 <datalogger_log_debug>
    SendEvent(spsEventQueue, &spsEvent);
   163ce:	4a0c      	ldr	r2, [pc, #48]	@ (16400 <module_sps_idle+0xa0>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   163d0:	2300      	movs	r3, #0
   163d2:	f10d 0107 	add.w	r1, sp, #7
   163d6:	6810      	ldr	r0, [r2, #0]
   163d8:	f04f 32ff 	mov.w	r2, #4294967295
   163dc:	f7f7 fc42 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   163e0:	2000      	movs	r0, #0
   163e2:	f7f8 fbeb 	bl	ebbc <vTaskDelete>
}
   163e6:	b003      	add	sp, #12
   163e8:	bd30      	pop	{r4, r5, pc}
   163ea:	bf00      	nop
   163ec:	0002c10c 	.word	0x0002c10c
   163f0:	1000b9e2 	.word	0x1000b9e2
   163f4:	0002c128 	.word	0x0002c128
   163f8:	0002c148 	.word	0x0002c148
   163fc:	0002c168 	.word	0x0002c168
   16400:	1000bc98 	.word	0x1000bc98
   16404:	00000000 	.word	0x00000000

00016408 <module_pds_idle>:
{
   16408:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   1640c:	ed2d 8b02 	vpush	{d8}
    ARTEMIS_DEBUG_PRINTF("\nPDS :: Idle, piston move to park density=%.3f kg/m³\n", PARK_DENSITY);
   16410:	a3c3      	add	r3, pc, #780	@ (adr r3, 16720 <module_pds_idle+0x318>)
   16412:	e9d3 2300 	ldrd	r2, r3, [r3]
{
   16416:	b090      	sub	sp, #64	@ 0x40
    ARTEMIS_DEBUG_PRINTF("\nPDS :: Idle, piston move to park density=%.3f kg/m³\n", PARK_DENSITY);
   16418:	48c3      	ldr	r0, [pc, #780]	@ (16728 <module_pds_idle+0x320>)
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston task->suspended\n");
   1641a:	4fc4      	ldr	r7, [pc, #784]	@ (1672c <module_pds_idle+0x324>)
            if (piston_timer >= 120000)
   1641c:	4ec4      	ldr	r6, [pc, #784]	@ (16730 <module_pds_idle+0x328>)
    ARTEMIS_DEBUG_PRINTF("\nPDS :: Idle, piston move to park density=%.3f kg/m³\n", PARK_DENSITY);
   1641e:	f7fa fe23 	bl	11068 <am_util_stdio_printf>
   16422:	a3bf      	add	r3, pc, #764	@ (adr r3, 16720 <module_pds_idle+0x318>)
   16424:	e9d3 2300 	ldrd	r2, r3, [r3]
   16428:	48bf      	ldr	r0, [pc, #764]	@ (16728 <module_pds_idle+0x320>)
   1642a:	f007 fda5 	bl	1df78 <datalogger_log_debug>
    float Volume = CTRL_set_lcp_density(Density);
   1642e:	ed9f 0ac1 	vldr	s0, [pc, #772]	@ 16734 <module_pds_idle+0x32c>
   16432:	f7fd fea5 	bl	14180 <CTRL_set_lcp_density>
   16436:	ed8d 0a06 	vstr	s0, [sp, #24]
    float Length = CTRL_calculate_length_from_volume(Volume);
   1643a:	f7fe f80d 	bl	14458 <CTRL_calculate_length_from_volume>
   1643e:	ee10 0a10 	vmov	r0, s0
    ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Setting -> density=%.3f kg/m³, volume=%.3fin³, length=%.4fin\n\n", Density, Volume, Length);
   16442:	f7f5 ffc1 	bl	c3c8 <__aeabi_f2d>
   16446:	4604      	mov	r4, r0
   16448:	460d      	mov	r5, r1
   1644a:	9806      	ldr	r0, [sp, #24]
   1644c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   16450:	f7f5 ffba 	bl	c3c8 <__aeabi_f2d>
   16454:	460b      	mov	r3, r1
   16456:	4602      	mov	r2, r0
   16458:	e9cd 2300 	strd	r2, r3, [sp]
   1645c:	48b6      	ldr	r0, [pc, #728]	@ (16738 <module_pds_idle+0x330>)
   1645e:	a3b0      	add	r3, pc, #704	@ (adr r3, 16720 <module_pds_idle+0x318>)
   16460:	e9d3 2300 	ldrd	r2, r3, [r3]
   16464:	f7fa fe00 	bl	11068 <am_util_stdio_printf>
   16468:	9806      	ldr	r0, [sp, #24]
   1646a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1646e:	f7f5 ffab 	bl	c3c8 <__aeabi_f2d>
   16472:	a3ab      	add	r3, pc, #684	@ (adr r3, 16720 <module_pds_idle+0x318>)
   16474:	e9d3 2300 	ldrd	r2, r3, [r3]
   16478:	e9cd 0100 	strd	r0, r1, [sp]
   1647c:	48ae      	ldr	r0, [pc, #696]	@ (16738 <module_pds_idle+0x330>)
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston task->active\n");
   1647e:	4daf      	ldr	r5, [pc, #700]	@ (1673c <module_pds_idle+0x334>)
    ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Setting -> density=%.3f kg/m³, volume=%.3fin³, length=%.4fin\n\n", Density, Volume, Length);
   16480:	f007 fd7a 	bl	1df78 <datalogger_log_debug>
    TaskHandle_t xPiston = NULL;
   16484:	2400      	movs	r4, #0
    PIS_set_piston_rate(1);
   16486:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   16488:	9407      	str	r4, [sp, #28]
    PIS_set_piston_rate(1);
   1648a:	f7fd fdd5 	bl	14038 <PIS_set_piston_rate>
    PIS_set_volume(Volume);
   1648e:	ed9d 0a06 	vldr	s0, [sp, #24]
   16492:	f7fd fde7 	bl	14064 <PIS_set_volume>
    PIS_task_move_volume(&xPiston);
   16496:	a807      	add	r0, sp, #28
   16498:	f7fd fcf0 	bl	13e7c <PIS_task_move_volume>
        eStatus = eTaskGetState( xPiston );
   1649c:	9807      	ldr	r0, [sp, #28]
   1649e:	f7f8 fc05 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) ||
   164a2:	2802      	cmp	r0, #2
   164a4:	d90e      	bls.n	164c4 <module_pds_idle+0xbc>
        else if (eStatus==eSuspended)
   164a6:	2803      	cmp	r0, #3
   164a8:	f000 80ee 	beq.w	16688 <module_pds_idle+0x280>
        else if (eStatus==eDeleted)
   164ac:	2804      	cmp	r0, #4
   164ae:	f000 80f6 	beq.w	1669e <module_pds_idle+0x296>
        vTaskDelay(piston_period);
   164b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   164b6:	f7f8 ff95 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   164ba:	9807      	ldr	r0, [sp, #28]
   164bc:	f7f8 fbf6 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) ||
   164c0:	2802      	cmp	r0, #2
   164c2:	d8f0      	bhi.n	164a6 <module_pds_idle+0x9e>
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston task->active\n");
   164c4:	4628      	mov	r0, r5
   164c6:	f7fa fdcf 	bl	11068 <am_util_stdio_printf>
            piston_timer += piston_period;
   164ca:	f504 747a 	add.w	r4, r4, #1000	@ 0x3e8
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston task->active\n");
   164ce:	4628      	mov	r0, r5
   164d0:	f007 fd52 	bl	1df78 <datalogger_log_debug>
            if (piston_timer >= 120000)
   164d4:	42b4      	cmp	r4, r6
   164d6:	d9ec      	bls.n	164b2 <module_pds_idle+0xaa>
                ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston time-out, task->finished\n");
   164d8:	4899      	ldr	r0, [pc, #612]	@ (16740 <module_pds_idle+0x338>)
   164da:	f7fa fdc5 	bl	11068 <am_util_stdio_printf>
   164de:	4898      	ldr	r0, [pc, #608]	@ (16740 <module_pds_idle+0x338>)
   164e0:	f007 fd4a 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   164e4:	9807      	ldr	r0, [sp, #28]
   164e6:	f7fd fd41 	bl	13f6c <PIS_task_delete>
                vTaskDelay(piston_period);
   164ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   164ee:	f7f8 ff79 	bl	f3e4 <vTaskDelay>
                PIS_Reset();
   164f2:	f7fd fe31 	bl	14158 <PIS_Reset>
        vTaskDelay(piston_period);
   164f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   164fa:	f7f8 ff73 	bl	f3e4 <vTaskDelay>
    SENS_set_depth_rate(s_rate);
   164fe:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
   16502:	f7ff fb4b 	bl	15b9c <SENS_set_depth_rate>
    SENS_sensor_depth_on();
   16506:	f7ff f8c9 	bl	1569c <SENS_sensor_depth_on>
    TaskHandle_t xDepth = NULL;
   1650a:	2300      	movs	r3, #0
    SENS_task_sample_depth_continuous(&xDepth);
   1650c:	a808      	add	r0, sp, #32
    TaskHandle_t xDepth = NULL;
   1650e:	9308      	str	r3, [sp, #32]
    SENS_task_sample_depth_continuous(&xDepth);
   16510:	f7ff faf0 	bl	15af4 <SENS_task_sample_depth_continuous>
    float Depth = 0, Rate = 0;
   16514:	2300      	movs	r3, #0
   16516:	9309      	str	r3, [sp, #36]	@ 0x24
   16518:	930a      	str	r3, [sp, #40]	@ 0x28
    float Pressure = 0;
   1651a:	930b      	str	r3, [sp, #44]	@ 0x2c
    xLastWakeTime = xTaskGetTickCount();
   1651c:	f7f8 fd22 	bl	ef64 <xTaskGetTickCount>
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Pressure = %0.4f bar\n", Pressure);
   16520:	f8df 8240 	ldr.w	r8, [pc, #576]	@ 16764 <module_pds_idle+0x35c>
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16524:	4f87      	ldr	r7, [pc, #540]	@ (16744 <module_pds_idle+0x33c>)
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Epoch    = %ld\n", epoch);
   16526:	4e88      	ldr	r6, [pc, #544]	@ (16748 <module_pds_idle+0x340>)
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16528:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 16768 <module_pds_idle+0x360>
    xLastWakeTime = xTaskGetTickCount();
   1652c:	900c      	str	r0, [sp, #48]	@ 0x30
        if ( Depth>BALLAST_DEPTH )
   1652e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16532:	f04f 0a00 	mov.w	sl, #0
        SENS_get_depth(&Depth, &Pressure, &Rate);
   16536:	aa0a      	add	r2, sp, #40	@ 0x28
   16538:	a90b      	add	r1, sp, #44	@ 0x2c
   1653a:	a809      	add	r0, sp, #36	@ 0x24
   1653c:	f7ff f8b8 	bl	156b0 <SENS_get_depth>
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Pressure = %0.4f bar\n", Pressure);
   16540:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   16542:	f7f5 ff41 	bl	c3c8 <__aeabi_f2d>
   16546:	4602      	mov	r2, r0
   16548:	460b      	mov	r3, r1
   1654a:	4640      	mov	r0, r8
   1654c:	f7fa fd8c 	bl	11068 <am_util_stdio_printf>
   16550:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   16552:	f7f5 ff39 	bl	c3c8 <__aeabi_f2d>
   16556:	4602      	mov	r2, r0
   16558:	460b      	mov	r3, r1
   1655a:	4640      	mov	r0, r8
   1655c:	f007 fd0c 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16560:	9809      	ldr	r0, [sp, #36]	@ 0x24
   16562:	f7f5 ff31 	bl	c3c8 <__aeabi_f2d>
   16566:	4604      	mov	r4, r0
   16568:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1656a:	460d      	mov	r5, r1
   1656c:	e9cd ab02 	strd	sl, fp, [sp, #8]
   16570:	f7f5 ff2a 	bl	c3c8 <__aeabi_f2d>
   16574:	4622      	mov	r2, r4
   16576:	462b      	mov	r3, r5
   16578:	e9cd 0100 	strd	r0, r1, [sp]
   1657c:	4638      	mov	r0, r7
   1657e:	f7fa fd73 	bl	11068 <am_util_stdio_printf>
   16582:	9809      	ldr	r0, [sp, #36]	@ 0x24
   16584:	f7f5 ff20 	bl	c3c8 <__aeabi_f2d>
   16588:	4604      	mov	r4, r0
   1658a:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1658c:	460d      	mov	r5, r1
   1658e:	e9cd ab02 	strd	sl, fp, [sp, #8]
   16592:	f7f5 ff19 	bl	c3c8 <__aeabi_f2d>
   16596:	4622      	mov	r2, r4
   16598:	e9cd 0100 	strd	r0, r1, [sp]
   1659c:	462b      	mov	r3, r5
   1659e:	4638      	mov	r0, r7
   165a0:	f007 fcea 	bl	1df78 <datalogger_log_debug>
        artemis_rtc_get_time(&time);
   165a4:	a80d      	add	r0, sp, #52	@ 0x34
   165a6:	f007 fb17 	bl	1dbd8 <artemis_rtc_get_time>
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   165aa:	f89d 003a 	ldrb.w	r0, [sp, #58]	@ 0x3a
   165ae:	f89d 1039 	ldrb.w	r1, [sp, #57]	@ 0x39
   165b2:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
   165b6:	f89d 2037 	ldrb.w	r2, [sp, #55]	@ 0x37
   165ba:	e9cd 1000 	strd	r1, r0, [sp]
   165be:	f89d 1036 	ldrb.w	r1, [sp, #54]	@ 0x36
   165c2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
   165c6:	f7fe fa6b 	bl	14aa0 <get_epoch_time>
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Epoch    = %ld\n", epoch);
   165ca:	4601      	mov	r1, r0
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   165cc:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Epoch    = %ld\n", epoch);
   165ce:	4630      	mov	r0, r6
   165d0:	f7fa fd4a 	bl	11068 <am_util_stdio_printf>
   165d4:	4621      	mov	r1, r4
   165d6:	4630      	mov	r0, r6
   165d8:	f007 fcce 	bl	1df78 <datalogger_log_debug>
        if ( Depth>BALLAST_DEPTH )
   165dc:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
   165e0:	eef4 7ac8 	vcmpe.f32	s15, s16
   165e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        vTaskDelayUntil(&xLastWakeTime, period);
   165e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
   165ec:	a80c      	add	r0, sp, #48	@ 0x30
        if ( Depth>BALLAST_DEPTH )
   165ee:	dc02      	bgt.n	165f6 <module_pds_idle+0x1ee>
        vTaskDelayUntil(&xLastWakeTime, period);
   165f0:	f7f8 ff60 	bl	f4b4 <vTaskDelayUntil>
    while (run)
   165f4:	e79f      	b.n	16536 <module_pds_idle+0x12e>
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Pressure reached = %0.4f bar\n", Pressure);
   165f6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   165f8:	f7f5 fee6 	bl	c3c8 <__aeabi_f2d>
   165fc:	4602      	mov	r2, r0
   165fe:	460b      	mov	r3, r1
   16600:	4852      	ldr	r0, [pc, #328]	@ (1674c <module_pds_idle+0x344>)
   16602:	f7fa fd31 	bl	11068 <am_util_stdio_printf>
   16606:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   16608:	f7f5 fede 	bl	c3c8 <__aeabi_f2d>
   1660c:	4602      	mov	r2, r0
   1660e:	460b      	mov	r3, r1
   16610:	484e      	ldr	r0, [pc, #312]	@ (1674c <module_pds_idle+0x344>)
   16612:	f007 fcb1 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Depth reached    = %0.4f m\n", Depth);
   16616:	9809      	ldr	r0, [sp, #36]	@ 0x24
   16618:	f7f5 fed6 	bl	c3c8 <__aeabi_f2d>
   1661c:	4602      	mov	r2, r0
   1661e:	460b      	mov	r3, r1
   16620:	484b      	ldr	r0, [pc, #300]	@ (16750 <module_pds_idle+0x348>)
   16622:	f7fa fd21 	bl	11068 <am_util_stdio_printf>
   16626:	9809      	ldr	r0, [sp, #36]	@ 0x24
   16628:	f7f5 fece 	bl	c3c8 <__aeabi_f2d>
   1662c:	4602      	mov	r2, r0
   1662e:	460b      	mov	r3, r1
   16630:	4847      	ldr	r0, [pc, #284]	@ (16750 <module_pds_idle+0x348>)
   16632:	f007 fca1 	bl	1df78 <datalogger_log_debug>
            SENS_task_delete(xDepth);
   16636:	9808      	ldr	r0, [sp, #32]
   16638:	f7ff f89a 	bl	15770 <SENS_task_delete>
            SENS_sensor_depth_off();
   1663c:	f7ff f82c 	bl	15698 <SENS_sensor_depth_off>
            pdsEvent = MODE_PROFILE;
   16640:	2301      	movs	r3, #1
        vTaskDelayUntil(&xLastWakeTime, period);
   16642:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
   16646:	a80c      	add	r0, sp, #48	@ 0x30
            pdsEvent = MODE_PROFILE;
   16648:	f88d 3017 	strb.w	r3, [sp, #23]
        vTaskDelayUntil(&xLastWakeTime, period);
   1664c:	f7f8 ff32 	bl	f4b4 <vTaskDelayUntil>
    uint32_t size = xPortGetFreeHeapSize();
   16650:	f7f7 f904 	bl	d85c <xPortGetFreeHeapSize>
   16654:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nPDS :: Idle, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   16656:	4621      	mov	r1, r4
   16658:	483e      	ldr	r0, [pc, #248]	@ (16754 <module_pds_idle+0x34c>)
   1665a:	f7fa fd05 	bl	11068 <am_util_stdio_printf>
   1665e:	4621      	mov	r1, r4
   16660:	483c      	ldr	r0, [pc, #240]	@ (16754 <module_pds_idle+0x34c>)
   16662:	f007 fc89 	bl	1df78 <datalogger_log_debug>
    SendEvent(pdsEventQueue, &pdsEvent);
   16666:	4a3c      	ldr	r2, [pc, #240]	@ (16758 <module_pds_idle+0x350>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   16668:	2300      	movs	r3, #0
   1666a:	f10d 0117 	add.w	r1, sp, #23
   1666e:	6810      	ldr	r0, [r2, #0]
   16670:	f04f 32ff 	mov.w	r2, #4294967295
   16674:	f7f7 faf6 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   16678:	2000      	movs	r0, #0
   1667a:	f7f8 fa9f 	bl	ebbc <vTaskDelete>
}
   1667e:	b010      	add	sp, #64	@ 0x40
   16680:	ecbd 8b02 	vpop	{d8}
   16684:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston task->suspended\n");
   16688:	4638      	mov	r0, r7
   1668a:	f7fa fced 	bl	11068 <am_util_stdio_printf>
   1668e:	4638      	mov	r0, r7
   16690:	f007 fc72 	bl	1df78 <datalogger_log_debug>
            PIS_task_delete(xPiston);
   16694:	9807      	ldr	r0, [sp, #28]
   16696:	f7fd fc69 	bl	13f6c <PIS_task_delete>
            piston_timer = 0;
   1669a:	2400      	movs	r4, #0
   1669c:	e709      	b.n	164b2 <module_pds_idle+0xaa>
            PIS_Get_Volume(&Volume);
   1669e:	a806      	add	r0, sp, #24
   166a0:	f7fd fcae 	bl	14000 <PIS_Get_Volume>
            Length = CTRL_calculate_length_from_volume(Volume);
   166a4:	ed9d 0a06 	vldr	s0, [sp, #24]
   166a8:	f7fd fed6 	bl	14458 <CTRL_calculate_length_from_volume>
   166ac:	eef0 7a40 	vmov.f32	s15, s0
            Density = CTRL_calculate_lcp_density(Volume);
   166b0:	ed9d 0a06 	vldr	s0, [sp, #24]
            Length = CTRL_calculate_length_from_volume(Volume);
   166b4:	ee17 5a90 	vmov	r5, s15
            Density = CTRL_calculate_lcp_density(Volume);
   166b8:	f7fd fd96 	bl	141e8 <CTRL_calculate_lcp_density>
   166bc:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, density=%.3f kg/m³, volume=%.3fin³, length=%.4fin\n", Density, Volume, Length);
   166c0:	f7f5 fe82 	bl	c3c8 <__aeabi_f2d>
   166c4:	4602      	mov	r2, r0
   166c6:	4628      	mov	r0, r5
   166c8:	4614      	mov	r4, r2
   166ca:	460d      	mov	r5, r1
   166cc:	f7f5 fe7c 	bl	c3c8 <__aeabi_f2d>
   166d0:	4606      	mov	r6, r0
   166d2:	460f      	mov	r7, r1
   166d4:	9806      	ldr	r0, [sp, #24]
   166d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   166da:	f7f5 fe75 	bl	c3c8 <__aeabi_f2d>
   166de:	4622      	mov	r2, r4
   166e0:	e9cd 0100 	strd	r0, r1, [sp]
   166e4:	462b      	mov	r3, r5
   166e6:	481d      	ldr	r0, [pc, #116]	@ (1675c <module_pds_idle+0x354>)
   166e8:	f7fa fcbe 	bl	11068 <am_util_stdio_printf>
   166ec:	9806      	ldr	r0, [sp, #24]
   166ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
   166f2:	f7f5 fe69 	bl	c3c8 <__aeabi_f2d>
   166f6:	460b      	mov	r3, r1
   166f8:	4602      	mov	r2, r0
   166fa:	e9cd 2300 	strd	r2, r3, [sp]
   166fe:	4817      	ldr	r0, [pc, #92]	@ (1675c <module_pds_idle+0x354>)
   16700:	4622      	mov	r2, r4
   16702:	462b      	mov	r3, r5
   16704:	f007 fc38 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("PDS :: Idle, Piston task->finished\n");
   16708:	4815      	ldr	r0, [pc, #84]	@ (16760 <module_pds_idle+0x358>)
   1670a:	f7fa fcad 	bl	11068 <am_util_stdio_printf>
   1670e:	4814      	ldr	r0, [pc, #80]	@ (16760 <module_pds_idle+0x358>)
   16710:	f007 fc32 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(piston_period);
   16714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16718:	f7f8 fe64 	bl	f3e4 <vTaskDelay>
    while (piston_move)
   1671c:	e6ef      	b.n	164fe <module_pds_idle+0xf6>
   1671e:	bf00      	nop
   16720:	00000000 	.word	0x00000000
   16724:	40902400 	.word	0x40902400
   16728:	0002c194 	.word	0x0002c194
   1672c:	0002c270 	.word	0x0002c270
   16730:	0001d4bf 	.word	0x0001d4bf
   16734:	44812000 	.word	0x44812000
   16738:	0002c1cc 	.word	0x0002c1cc
   1673c:	0002c21c 	.word	0x0002c21c
   16740:	0002c240 	.word	0x0002c240
   16744:	0002c324 	.word	0x0002c324
   16748:	0002c35c 	.word	0x0002c35c
   1674c:	0002c37c 	.word	0x0002c37c
   16750:	0002c3a8 	.word	0x0002c3a8
   16754:	0002c3d4 	.word	0x0002c3d4
   16758:	1000bc94 	.word	0x1000bc94
   1675c:	0002c298 	.word	0x0002c298
   16760:	0002c2dc 	.word	0x0002c2dc
   16764:	0002c300 	.word	0x0002c300
   16768:	3fe00000 	.word	0x3fe00000

0001676c <module_pds_systemcheck>:
{
   1676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (sensors_check == true)
   16770:	4b8a      	ldr	r3, [pc, #552]	@ (1699c <module_pds_systemcheck+0x230>)
   16772:	781b      	ldrb	r3, [r3, #0]
{
   16774:	b08e      	sub	sp, #56	@ 0x38
    if (sensors_check == true)
   16776:	2b00      	cmp	r3, #0
   16778:	f000 80d8 	beq.w	1692c <module_pds_systemcheck+0x1c0>
        SENS_sensor_depth_off();
   1677c:	f7fe ff8c 	bl	15698 <SENS_sensor_depth_off>
        SENS_sensor_temperature_off();
   16780:	f7fe ff92 	bl	156a8 <SENS_sensor_temperature_off>
        SENS_sensor_gps_on();
   16784:	f7fe ff8e 	bl	156a4 <SENS_sensor_gps_on>
        SENS_set_gps_rate(s_rate);
   16788:	2001      	movs	r0, #1
   1678a:	f7ff fa67 	bl	15c5c <SENS_set_gps_rate>
        TaskHandle_t xGps = NULL;
   1678e:	2400      	movs	r4, #0
        SENS_task_gps(&xGps);
   16790:	a805      	add	r0, sp, #20
        TaskHandle_t xGps = NULL;
   16792:	9405      	str	r4, [sp, #20]
        SENS_task_gps(&xGps);
   16794:	f7ff f9d8 	bl	15b48 <SENS_task_gps>
        xLastWakeTime = xTaskGetTickCount();
   16798:	f7f8 fbe4 	bl	ef64 <xTaskGetTickCount>
                ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS task->suspended\n");
   1679c:	f8df a228 	ldr.w	sl, [pc, #552]	@ 169c8 <module_pds_systemcheck+0x25c>
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS task->active : No fix\n");
   167a0:	f8df 8228 	ldr.w	r8, [pc, #552]	@ 169cc <module_pds_systemcheck+0x260>
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   167a4:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 169d0 <module_pds_systemcheck+0x264>
        xLastWakeTime = xTaskGetTickCount();
   167a8:	9006      	str	r0, [sp, #24]
        while (run)
   167aa:	ad07      	add	r5, sp, #28
   167ac:	e009      	b.n	167c2 <module_pds_systemcheck+0x56>
            else if (eStatus==eSuspended)
   167ae:	2803      	cmp	r0, #3
   167b0:	f000 80b2 	beq.w	16918 <module_pds_systemcheck+0x1ac>
            else if (eStatus==eDeleted)
   167b4:	2804      	cmp	r0, #4
   167b6:	d04f      	beq.n	16858 <module_pds_systemcheck+0xec>
            vTaskDelayUntil(&xLastWakeTime, period);
   167b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   167bc:	a806      	add	r0, sp, #24
   167be:	f7f8 fe79 	bl	f4b4 <vTaskDelayUntil>
            eStatus = eTaskGetState(xGps);
   167c2:	9805      	ldr	r0, [sp, #20]
   167c4:	f7f8 fa72 	bl	ecac <eTaskGetState>
            if ( (eStatus==eRunning) ||
   167c8:	2802      	cmp	r0, #2
   167ca:	d8f0      	bhi.n	167ae <module_pds_systemcheck+0x42>
                SENS_get_gps(&gps);
   167cc:	4628      	mov	r0, r5
   167ce:	f7fe ffbb 	bl	15748 <SENS_get_gps>
                if (gps.fix == true)
   167d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS task->active : No fix\n");
   167d6:	4640      	mov	r0, r8
                if (gps.fix == true)
   167d8:	2b00      	cmp	r3, #0
   167da:	f000 8097 	beq.w	1690c <module_pds_systemcheck+0x1a0>
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   167de:	9808      	ldr	r0, [sp, #32]
   167e0:	f7f5 fdf2 	bl	c3c8 <__aeabi_f2d>
   167e4:	4606      	mov	r6, r0
   167e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
   167e8:	460f      	mov	r7, r1
   167ea:	f7f5 fded 	bl	c3c8 <__aeabi_f2d>
   167ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   167f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
   167f4:	f7f5 fde8 	bl	c3c8 <__aeabi_f2d>
   167f8:	4632      	mov	r2, r6
   167fa:	463b      	mov	r3, r7
   167fc:	e9cd 0100 	strd	r0, r1, [sp]
   16800:	4648      	mov	r0, r9
   16802:	f7fa fc31 	bl	11068 <am_util_stdio_printf>
   16806:	9808      	ldr	r0, [sp, #32]
   16808:	f7f5 fdde 	bl	c3c8 <__aeabi_f2d>
   1680c:	4606      	mov	r6, r0
   1680e:	980a      	ldr	r0, [sp, #40]	@ 0x28
   16810:	460f      	mov	r7, r1
   16812:	f7f5 fdd9 	bl	c3c8 <__aeabi_f2d>
   16816:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1681a:	9809      	ldr	r0, [sp, #36]	@ 0x24
   1681c:	f7f5 fdd4 	bl	c3c8 <__aeabi_f2d>
                    fix++;
   16820:	3401      	adds	r4, #1
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   16822:	e9cd 0100 	strd	r0, r1, [sp]
   16826:	4632      	mov	r2, r6
   16828:	463b      	mov	r3, r7
   1682a:	4648      	mov	r0, r9
                    fix++;
   1682c:	b2e4      	uxtb	r4, r4
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   1682e:	f007 fba3 	bl	1df78 <datalogger_log_debug>
                    if (fix > 9)
   16832:	2c09      	cmp	r4, #9
   16834:	d9c0      	bls.n	167b8 <module_pds_systemcheck+0x4c>
                        systemcheck_Lat = gps.latitude;
   16836:	4b5a      	ldr	r3, [pc, #360]	@ (169a0 <module_pds_systemcheck+0x234>)
   16838:	9a08      	ldr	r2, [sp, #32]
   1683a:	601a      	str	r2, [r3, #0]
                        systemcheck_Lon = gps.longitude;
   1683c:	4b59      	ldr	r3, [pc, #356]	@ (169a4 <module_pds_systemcheck+0x238>)
   1683e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                        ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : <GPS Time Set>\n");
   16840:	4859      	ldr	r0, [pc, #356]	@ (169a8 <module_pds_systemcheck+0x23c>)
                        systemcheck_Lon = gps.longitude;
   16842:	601a      	str	r2, [r3, #0]
                        ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : <GPS Time Set>\n");
   16844:	f7fa fc10 	bl	11068 <am_util_stdio_printf>
   16848:	4857      	ldr	r0, [pc, #348]	@ (169a8 <module_pds_systemcheck+0x23c>)
   1684a:	f007 fb95 	bl	1df78 <datalogger_log_debug>
                        artemis_rtc_gps_calibration(&gps);
   1684e:	4628      	mov	r0, r5
   16850:	f007 f9f6 	bl	1dc40 <artemis_rtc_gps_calibration>
                        fix = 0;
   16854:	2400      	movs	r4, #0
   16856:	e7af      	b.n	167b8 <module_pds_systemcheck+0x4c>
                if (fix >= 2)
   16858:	2c01      	cmp	r4, #1
   1685a:	f200 808f 	bhi.w	1697c <module_pds_systemcheck+0x210>
                ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS task->finished\n");
   1685e:	4853      	ldr	r0, [pc, #332]	@ (169ac <module_pds_systemcheck+0x240>)
   16860:	f7fa fc02 	bl	11068 <am_util_stdio_printf>
   16864:	4851      	ldr	r0, [pc, #324]	@ (169ac <module_pds_systemcheck+0x240>)
   16866:	f007 fb87 	bl	1df78 <datalogger_log_debug>
                SENS_sensor_gps_off();
   1686a:	f7fe ff19 	bl	156a0 <SENS_sensor_gps_off>
                datalogger_predeploy_mode(&gps, true);
   1686e:	2101      	movs	r1, #1
   16870:	4628      	mov	r0, r5
   16872:	f007 fbe9 	bl	1e048 <datalogger_predeploy_mode>
                pdsEvent = MODE_PRE_DEPLOY;
   16876:	2300      	movs	r3, #0
            vTaskDelayUntil(&xLastWakeTime, period);
   16878:	a806      	add	r0, sp, #24
   1687a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
                pdsEvent = MODE_PRE_DEPLOY;
   1687e:	f88d 3013 	strb.w	r3, [sp, #19]
            vTaskDelayUntil(&xLastWakeTime, period);
   16882:	f7f8 fe17 	bl	f4b4 <vTaskDelayUntil>
    bool utc = artemis_rtc_get_time(&time);
   16886:	4628      	mov	r0, r5
   16888:	f007 f9a6 	bl	1dbd8 <artemis_rtc_get_time>
    if (utc)
   1688c:	2800      	cmp	r0, #0
   1688e:	d061      	beq.n	16954 <module_pds_systemcheck+0x1e8>
        ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : TimeStamp, %02d.%02d.20%02d, %02d:%02d:%02d (UTC)\n",
   16890:	f89d 0022 	ldrb.w	r0, [sp, #34]	@ 0x22
   16894:	f89d 1021 	ldrb.w	r1, [sp, #33]	@ 0x21
   16898:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1689c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   168a0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   168a4:	9400      	str	r4, [sp, #0]
   168a6:	e9cd 1001 	strd	r1, r0, [sp, #4]
   168aa:	f89d 101e 	ldrb.w	r1, [sp, #30]
   168ae:	4840      	ldr	r0, [pc, #256]	@ (169b0 <module_pds_systemcheck+0x244>)
   168b0:	f7fa fbda 	bl	11068 <am_util_stdio_printf>
   168b4:	483e      	ldr	r0, [pc, #248]	@ (169b0 <module_pds_systemcheck+0x244>)
        ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : TimeStamp, %02d.%02d.20%02d, %02d:%02d:%02d (local)\n",
   168b6:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
   168ba:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   168be:	f89d 4020 	ldrb.w	r4, [sp, #32]
   168c2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   168c6:	9400      	str	r4, [sp, #0]
   168c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   168cc:	f89d 201f 	ldrb.w	r2, [sp, #31]
   168d0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   168d4:	f007 fb50 	bl	1df78 <datalogger_log_debug>
    uint32_t size = xPortGetFreeHeapSize();
   168d8:	f7f6 ffc0 	bl	d85c <xPortGetFreeHeapSize>
   168dc:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nPDS :: systemcheck, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   168de:	4621      	mov	r1, r4
   168e0:	4834      	ldr	r0, [pc, #208]	@ (169b4 <module_pds_systemcheck+0x248>)
   168e2:	f7fa fbc1 	bl	11068 <am_util_stdio_printf>
   168e6:	4621      	mov	r1, r4
   168e8:	4832      	ldr	r0, [pc, #200]	@ (169b4 <module_pds_systemcheck+0x248>)
   168ea:	f007 fb45 	bl	1df78 <datalogger_log_debug>
    SendEvent(pdsEventQueue, &pdsEvent);
   168ee:	4a32      	ldr	r2, [pc, #200]	@ (169b8 <module_pds_systemcheck+0x24c>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   168f0:	2300      	movs	r3, #0
   168f2:	f10d 0113 	add.w	r1, sp, #19
   168f6:	6810      	ldr	r0, [r2, #0]
   168f8:	f04f 32ff 	mov.w	r2, #4294967295
   168fc:	f7f7 f9b2 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   16900:	2000      	movs	r0, #0
   16902:	f7f8 f95b 	bl	ebbc <vTaskDelete>
}
   16906:	b00e      	add	sp, #56	@ 0x38
   16908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS task->active : No fix\n");
   1690c:	f7fa fbac 	bl	11068 <am_util_stdio_printf>
   16910:	4640      	mov	r0, r8
   16912:	f007 fb31 	bl	1df78 <datalogger_log_debug>
   16916:	e74f      	b.n	167b8 <module_pds_systemcheck+0x4c>
                ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, GPS task->suspended\n");
   16918:	4650      	mov	r0, sl
   1691a:	f7fa fba5 	bl	11068 <am_util_stdio_printf>
   1691e:	4650      	mov	r0, sl
   16920:	f007 fb2a 	bl	1df78 <datalogger_log_debug>
                vTaskDelete(xGps);
   16924:	9805      	ldr	r0, [sp, #20]
   16926:	f7f8 f949 	bl	ebbc <vTaskDelete>
   1692a:	e745      	b.n	167b8 <module_pds_systemcheck+0x4c>
        ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, ->>> ERROR !!\n");
   1692c:	4823      	ldr	r0, [pc, #140]	@ (169bc <module_pds_systemcheck+0x250>)
   1692e:	f7fa fb9b 	bl	11068 <am_util_stdio_printf>
   16932:	4822      	ldr	r0, [pc, #136]	@ (169bc <module_pds_systemcheck+0x250>)
   16934:	f007 fb20 	bl	1df78 <datalogger_log_debug>
        am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
   16938:	4b21      	ldr	r3, [pc, #132]	@ (169c0 <module_pds_systemcheck+0x254>)
   1693a:	2201      	movs	r2, #1
        vTaskDelay(portMAX_DELAY);
   1693c:	f04f 30ff 	mov.w	r0, #4294967295
        am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
   16940:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        vTaskDelay(portMAX_DELAY);
   16944:	ad07      	add	r5, sp, #28
   16946:	f7f8 fd4d 	bl	f3e4 <vTaskDelay>
    bool utc = artemis_rtc_get_time(&time);
   1694a:	4628      	mov	r0, r5
   1694c:	f007 f944 	bl	1dbd8 <artemis_rtc_get_time>
    if (utc)
   16950:	2800      	cmp	r0, #0
   16952:	d19d      	bne.n	16890 <module_pds_systemcheck+0x124>
        ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : TimeStamp, %02d.%02d.20%02d, %02d:%02d:%02d (local)\n",
   16954:	f89d 0022 	ldrb.w	r0, [sp, #34]	@ 0x22
   16958:	f89d 1021 	ldrb.w	r1, [sp, #33]	@ 0x21
   1695c:	f89d 4020 	ldrb.w	r4, [sp, #32]
   16960:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   16964:	f89d 201f 	ldrb.w	r2, [sp, #31]
   16968:	9400      	str	r4, [sp, #0]
   1696a:	e9cd 1001 	strd	r1, r0, [sp, #4]
   1696e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   16972:	4814      	ldr	r0, [pc, #80]	@ (169c4 <module_pds_systemcheck+0x258>)
   16974:	f7fa fb78 	bl	11068 <am_util_stdio_printf>
   16978:	4812      	ldr	r0, [pc, #72]	@ (169c4 <module_pds_systemcheck+0x258>)
   1697a:	e79c      	b.n	168b6 <module_pds_systemcheck+0x14a>
                    systemcheck_Lat = gps.latitude;
   1697c:	4b08      	ldr	r3, [pc, #32]	@ (169a0 <module_pds_systemcheck+0x234>)
   1697e:	9908      	ldr	r1, [sp, #32]
   16980:	6019      	str	r1, [r3, #0]
                    systemcheck_Lon = gps.longitude;
   16982:	4b08      	ldr	r3, [pc, #32]	@ (169a4 <module_pds_systemcheck+0x238>)
   16984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : <GPS Time Set>\n");
   16986:	4808      	ldr	r0, [pc, #32]	@ (169a8 <module_pds_systemcheck+0x23c>)
                    systemcheck_Lon = gps.longitude;
   16988:	601a      	str	r2, [r3, #0]
                    ARTEMIS_DEBUG_PRINTF("PDS :: systemcheck, RTC : <GPS Time Set>\n");
   1698a:	f7fa fb6d 	bl	11068 <am_util_stdio_printf>
   1698e:	4806      	ldr	r0, [pc, #24]	@ (169a8 <module_pds_systemcheck+0x23c>)
   16990:	f007 faf2 	bl	1df78 <datalogger_log_debug>
                    artemis_rtc_gps_calibration(&gps);
   16994:	4628      	mov	r0, r5
   16996:	f007 f953 	bl	1dc40 <artemis_rtc_gps_calibration>
                    fix = 0;
   1699a:	e760      	b.n	1685e <module_pds_systemcheck+0xf2>
   1699c:	1000b9e4 	.word	0x1000b9e4
   169a0:	1000b9d4 	.word	0x1000b9d4
   169a4:	1000b9d0 	.word	0x1000b9d0
   169a8:	0002c458 	.word	0x0002c458
   169ac:	0002c4e0 	.word	0x0002c4e0
   169b0:	0002c52c 	.word	0x0002c52c
   169b4:	0002c5cc 	.word	0x0002c5cc
   169b8:	1000bc94 	.word	0x1000bc94
   169bc:	0002c508 	.word	0x0002c508
   169c0:	40010000 	.word	0x40010000
   169c4:	0002c57c 	.word	0x0002c57c
   169c8:	0002c4b4 	.word	0x0002c4b4
   169cc:	0002c484 	.word	0x0002c484
   169d0:	0002c404 	.word	0x0002c404
   169d4:	00000000 	.word	0x00000000

000169d8 <module_sps_move_to_park>:
{
   169d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169dc:	ed2d 8b08 	vpush	{d8-d11}
    if( pistoncal_number >= PISTON_ZEROCAL_COUNTER )
   169e0:	4ecd      	ldr	r6, [pc, #820]	@ (16d18 <module_sps_move_to_park+0x340>)
   169e2:	7833      	ldrb	r3, [r6, #0]
{
   169e4:	b093      	sub	sp, #76	@ 0x4c
    float Length = 0.0;
   169e6:	2200      	movs	r2, #0
    if( pistoncal_number >= PISTON_ZEROCAL_COUNTER )
   169e8:	2b09      	cmp	r3, #9
    float Length = 0.0;
   169ea:	920c      	str	r2, [sp, #48]	@ 0x30
    if( pistoncal_number >= PISTON_ZEROCAL_COUNTER )
   169ec:	f200 83f9 	bhi.w	171e2 <module_sps_move_to_park+0x80a>
   169f0:	ab11      	add	r3, sp, #68	@ 0x44
   169f2:	9305      	str	r3, [sp, #20]
   169f4:	ab0c      	add	r3, sp, #48	@ 0x30
   169f6:	9308      	str	r3, [sp, #32]
    if (park_piston_length == 0.0)
   169f8:	4cc8      	ldr	r4, [pc, #800]	@ (16d1c <module_sps_move_to_park+0x344>)
   169fa:	edd4 7a00 	vldr	s15, [r4]
   169fe:	eef5 7a40 	vcmp.f32	s15, #0.0
   16a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16a06:	f040 83b9 	bne.w	1717c <module_sps_move_to_park+0x7a4>
        CTRL_set_lcp_density(PARK_DENSITY);
   16a0a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 16d20 <module_sps_move_to_park+0x348>
        if (length_update <= PISTON_POSITION_MINIMUM)
   16a0e:	ed9f 8ac5 	vldr	s16, [pc, #788]	@ 16d24 <module_sps_move_to_park+0x34c>
        CTRL_set_lcp_density(PARK_DENSITY);
   16a12:	f7fd fbb5 	bl	14180 <CTRL_set_lcp_density>
        park_piston_length = CTRL_calculate_piston_position(0.0, 0.0);
   16a16:	eddf 0ad2 	vldr	s1, [pc, #840]	@ 16d60 <module_sps_move_to_park+0x388>
   16a1a:	eeb0 0a60 	vmov.f32	s0, s1
   16a1e:	f7fd fc13 	bl	14248 <CTRL_calculate_piston_position>
   16a22:	ed84 0a00 	vstr	s0, [r4]
        length_update = park_piston_length;
   16a26:	ed94 aa00 	vldr	s20, [r4]
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_park, Setting -> first time park_piston_length=%.4fin >>\n", park_piston_length);
   16a2a:	6820      	ldr	r0, [r4, #0]
   16a2c:	f7f5 fccc 	bl	c3c8 <__aeabi_f2d>
   16a30:	4602      	mov	r2, r0
   16a32:	460b      	mov	r3, r1
   16a34:	48bc      	ldr	r0, [pc, #752]	@ (16d28 <module_sps_move_to_park+0x350>)
   16a36:	f7fa fb17 	bl	11068 <am_util_stdio_printf>
   16a3a:	6820      	ldr	r0, [r4, #0]
   16a3c:	f7f5 fcc4 	bl	c3c8 <__aeabi_f2d>
   16a40:	4602      	mov	r2, r0
   16a42:	460b      	mov	r3, r1
   16a44:	48b8      	ldr	r0, [pc, #736]	@ (16d28 <module_sps_move_to_park+0x350>)
   16a46:	f007 fa97 	bl	1df78 <datalogger_log_debug>
        if (length_update <= PISTON_POSITION_MINIMUM)
   16a4a:	eeb4 aac8 	vcmpe.f32	s20, s16
   16a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16a52:	f240 8481 	bls.w	17358 <module_sps_move_to_park+0x980>
    Volume = CTRL_calculate_volume_from_length(length_update);
   16a56:	eeb0 0a4a 	vmov.f32	s0, s20
   16a5a:	f7fd fcad 	bl	143b8 <CTRL_calculate_volume_from_length>
   16a5e:	ee10 4a10 	vmov	r4, s0
    Density = CTRL_calculate_lcp_density(Volume);
   16a62:	f7fd fbc1 	bl	141e8 <CTRL_calculate_lcp_density>
   16a66:	ee10 0a10 	vmov	r0, s0
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   16a6a:	f7f5 fcad 	bl	c3c8 <__aeabi_f2d>
   16a6e:	4606      	mov	r6, r0
   16a70:	4620      	mov	r0, r4
   16a72:	460f      	mov	r7, r1
   16a74:	f7f5 fca8 	bl	c3c8 <__aeabi_f2d>
   16a78:	4680      	mov	r8, r0
   16a7a:	ee1a 0a10 	vmov	r0, s20
   16a7e:	4689      	mov	r9, r1
   16a80:	f7f5 fca2 	bl	c3c8 <__aeabi_f2d>
   16a84:	460d      	mov	r5, r1
   16a86:	4604      	mov	r4, r0
   16a88:	e9cd 8900 	strd	r8, r9, [sp]
   16a8c:	4632      	mov	r2, r6
   16a8e:	463b      	mov	r3, r7
   16a90:	e9cd 4502 	strd	r4, r5, [sp, #8]
   16a94:	48a5      	ldr	r0, [pc, #660]	@ (16d2c <module_sps_move_to_park+0x354>)
   16a96:	f7fa fae7 	bl	11068 <am_util_stdio_printf>
   16a9a:	4632      	mov	r2, r6
   16a9c:	463b      	mov	r3, r7
   16a9e:	e9cd 8900 	strd	r8, r9, [sp]
   16aa2:	48a2      	ldr	r0, [pc, #648]	@ (16d2c <module_sps_move_to_park+0x354>)
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->active\n");
   16aa4:	4fa2      	ldr	r7, [pc, #648]	@ (16d30 <module_sps_move_to_park+0x358>)
            if (piston_timer >= 180000)
   16aa6:	f8df 82a8 	ldr.w	r8, [pc, #680]	@ 16d50 <module_sps_move_to_park+0x378>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston time-out, task->finished\n");
   16aaa:	f8df 92a8 	ldr.w	r9, [pc, #680]	@ 16d54 <module_sps_move_to_park+0x37c>
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   16aae:	e9cd 4502 	strd	r4, r5, [sp, #8]
   16ab2:	f007 fa61 	bl	1df78 <datalogger_log_debug>
    TaskHandle_t xPiston = NULL;
   16ab6:	2600      	movs	r6, #0
    PIS_set_piston_rate(1);
   16ab8:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   16aba:	960d      	str	r6, [sp, #52]	@ 0x34
    PIS_set_piston_rate(1);
   16abc:	f7fd fabc 	bl	14038 <PIS_set_piston_rate>
    PIS_set_length(length_update);
   16ac0:	eeb0 0a4a 	vmov.f32	s0, s20
   16ac4:	f7fd fb02 	bl	140cc <PIS_set_length>
    PIS_task_move_length(&xPiston);
   16ac8:	a80d      	add	r0, sp, #52	@ 0x34
   16aca:	f7fd f9af 	bl	13e2c <PIS_task_move_length>
    vTaskDelay(piston_period);
   16ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16ad2:	f7f8 fc87 	bl	f3e4 <vTaskDelay>
    while (piston_move)
   16ad6:	e008      	b.n	16aea <module_sps_move_to_park+0x112>
        else if (eStatus==eSuspended)
   16ad8:	2803      	cmp	r0, #3
   16ada:	f000 8367 	beq.w	171ac <module_sps_move_to_park+0x7d4>
        else if (eStatus==eDeleted)
   16ade:	2804      	cmp	r0, #4
   16ae0:	d023      	beq.n	16b2a <module_sps_move_to_park+0x152>
        vTaskDelay(piston_period);
   16ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16ae6:	f7f8 fc7d 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   16aea:	980d      	ldr	r0, [sp, #52]	@ 0x34
   16aec:	f7f8 f8de 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) || (eStatus==eBlocked) || (eStatus==eReady) )
   16af0:	2802      	cmp	r0, #2
   16af2:	d8f1      	bhi.n	16ad8 <module_sps_move_to_park+0x100>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->active\n");
   16af4:	4638      	mov	r0, r7
   16af6:	f7fa fab7 	bl	11068 <am_util_stdio_printf>
            piston_timer += piston_period;
   16afa:	f506 767a 	add.w	r6, r6, #1000	@ 0x3e8
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->active\n");
   16afe:	4638      	mov	r0, r7
   16b00:	f007 fa3a 	bl	1df78 <datalogger_log_debug>
            if (piston_timer >= 180000)
   16b04:	4546      	cmp	r6, r8
   16b06:	d9ec      	bls.n	16ae2 <module_sps_move_to_park+0x10a>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston time-out, task->finished\n");
   16b08:	4648      	mov	r0, r9
   16b0a:	f7fa faad 	bl	11068 <am_util_stdio_printf>
   16b0e:	4648      	mov	r0, r9
   16b10:	f007 fa32 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   16b14:	980d      	ldr	r0, [sp, #52]	@ 0x34
   16b16:	f7fd fa29 	bl	13f6c <PIS_task_delete>
                vTaskDelay(piston_period);
   16b1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16b1e:	f7f8 fc61 	bl	f3e4 <vTaskDelay>
                PIS_Reset();
   16b22:	f7fd fb19 	bl	14158 <PIS_Reset>
                piston_timer = 0;
   16b26:	2600      	movs	r6, #0
   16b28:	e7db      	b.n	16ae2 <module_sps_move_to_park+0x10a>
            PIS_Get_Length(&Length);
   16b2a:	9808      	ldr	r0, [sp, #32]
    float Depth = 0.0, Rate = 0.0;
   16b2c:	ed9f 8a8c 	vldr	s16, [pc, #560]	@ 16d60 <module_sps_move_to_park+0x388>
            if (averaged_rate >= SYSTEM_FALL_RATE_MIN && !crush_depth)
   16b30:	eddf 8a80 	vldr	s17, [pc, #512]	@ 16d34 <module_sps_move_to_park+0x35c>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Pressure  = %.4f bar\n", Pressure);
   16b34:	f8df b220 	ldr.w	fp, [pc, #544]	@ 16d58 <module_sps_move_to_park+0x380>
            PIS_Get_Length(&Length);
   16b38:	f7fd fa70 	bl	1401c <PIS_Get_Length>
            Volume = CTRL_calculate_volume_from_length(Length);
   16b3c:	ed9d 0a0c 	vldr	s0, [sp, #48]	@ 0x30
   16b40:	f7fd fc3a 	bl	143b8 <CTRL_calculate_volume_from_length>
   16b44:	ee10 7a10 	vmov	r7, s0
            Density = CTRL_calculate_lcp_density(Volume);
   16b48:	f7fd fb4e 	bl	141e8 <CTRL_calculate_lcp_density>
   16b4c:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   16b50:	f7f5 fc3a 	bl	c3c8 <__aeabi_f2d>
   16b54:	4602      	mov	r2, r0
   16b56:	4638      	mov	r0, r7
   16b58:	4616      	mov	r6, r2
   16b5a:	460f      	mov	r7, r1
   16b5c:	f7f5 fc34 	bl	c3c8 <__aeabi_f2d>
   16b60:	4680      	mov	r8, r0
   16b62:	980c      	ldr	r0, [sp, #48]	@ 0x30
   16b64:	4689      	mov	r9, r1
   16b66:	f7f5 fc2f 	bl	c3c8 <__aeabi_f2d>
   16b6a:	4632      	mov	r2, r6
   16b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16b70:	e9cd 8900 	strd	r8, r9, [sp]
   16b74:	463b      	mov	r3, r7
   16b76:	4870      	ldr	r0, [pc, #448]	@ (16d38 <module_sps_move_to_park+0x360>)
   16b78:	f7fa fa76 	bl	11068 <am_util_stdio_printf>
   16b7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
   16b7e:	f7f5 fc23 	bl	c3c8 <__aeabi_f2d>
   16b82:	4632      	mov	r2, r6
   16b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16b88:	463b      	mov	r3, r7
   16b8a:	e9cd 8900 	strd	r8, r9, [sp]
   16b8e:	486a      	ldr	r0, [pc, #424]	@ (16d38 <module_sps_move_to_park+0x360>)
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Depth     = %.4f m, rate = %.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16b90:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 16d5c <module_sps_move_to_park+0x384>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   16b94:	f007 f9f0 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->finished\n");
   16b98:	4868      	ldr	r0, [pc, #416]	@ (16d3c <module_sps_move_to_park+0x364>)
   16b9a:	f7fa fa65 	bl	11068 <am_util_stdio_printf>
   16b9e:	4867      	ldr	r0, [pc, #412]	@ (16d3c <module_sps_move_to_park+0x364>)
   16ba0:	f007 f9ea 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(piston_period);
   16ba4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16ba8:	f7f8 fc1c 	bl	f3e4 <vTaskDelay>
    TaskHandle_t xDepth = NULL;
   16bac:	2600      	movs	r6, #0
    SENS_set_depth_rate(s_rate);
   16bae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
   16bb2:	f7fe fff3 	bl	15b9c <SENS_set_depth_rate>
    TaskHandle_t xDepth = NULL;
   16bb6:	960e      	str	r6, [sp, #56]	@ 0x38
        SENS_sensor_depth_on();
   16bb8:	f7fe fd70 	bl	1569c <SENS_sensor_depth_on>
        vTaskDelay(xDelay10ms);
   16bbc:	200a      	movs	r0, #10
   16bbe:	f7f8 fc11 	bl	f3e4 <vTaskDelay>
        SENS_task_sample_depth_continuous(&xDepth);
   16bc2:	a80e      	add	r0, sp, #56	@ 0x38
   16bc4:	f7fe ff96 	bl	15af4 <SENS_task_sample_depth_continuous>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Depth     = %.4f m, rate = %.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16bc8:	ed9f 9b51 	vldr	d9, [pc, #324]	@ 16d10 <module_sps_move_to_park+0x338>
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_park, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   16bcc:	4622      	mov	r2, r4
   16bce:	462b      	mov	r3, r5
   16bd0:	485b      	ldr	r0, [pc, #364]	@ (16d40 <module_sps_move_to_park+0x368>)
    float Depth = 0.0, Rate = 0.0;
   16bd2:	ed8d 8a0f 	vstr	s16, [sp, #60]	@ 0x3c
   16bd6:	ed8d 8a10 	vstr	s16, [sp, #64]	@ 0x40
    float Pressure = 0.0;
   16bda:	ed8d 8a11 	vstr	s16, [sp, #68]	@ 0x44
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_park, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   16bde:	f7fa fa43 	bl	11068 <am_util_stdio_printf>
   16be2:	4622      	mov	r2, r4
   16be4:	462b      	mov	r3, r5
   16be6:	4856      	ldr	r0, [pc, #344]	@ (16d40 <module_sps_move_to_park+0x368>)
   16be8:	f007 f9c6 	bl	1df78 <datalogger_log_debug>
    uint32_t to_park_state_time = 0;
   16bec:	4635      	mov	r5, r6
   16bee:	9609      	str	r6, [sp, #36]	@ 0x24
    float piston_on_bottom_length = length_update;
   16bf0:	eeb0 ba4a 	vmov.f32	s22, s20
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_park, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   16bf4:	eef0 aa4a 	vmov.f32	s21, s20
    uint8_t rate_count = 0;
   16bf8:	4634      	mov	r4, r6
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_park, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   16bfa:	46b0      	mov	r8, r6
   16bfc:	9606      	str	r6, [sp, #24]
            SENS_get_depth(&Depth, &Pressure, &Rate);
   16bfe:	aa10      	add	r2, sp, #64	@ 0x40
   16c00:	9905      	ldr	r1, [sp, #20]
   16c02:	a80f      	add	r0, sp, #60	@ 0x3c
   16c04:	f7fe fd54 	bl	156b0 <SENS_get_depth>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Pressure  = %.4f bar\n", Pressure);
   16c08:	9811      	ldr	r0, [sp, #68]	@ 0x44
   16c0a:	f7f5 fbdd 	bl	c3c8 <__aeabi_f2d>
   16c0e:	4602      	mov	r2, r0
   16c10:	460b      	mov	r3, r1
   16c12:	4658      	mov	r0, fp
   16c14:	f7fa fa28 	bl	11068 <am_util_stdio_printf>
   16c18:	9811      	ldr	r0, [sp, #68]	@ 0x44
   16c1a:	f7f5 fbd5 	bl	c3c8 <__aeabi_f2d>
   16c1e:	4602      	mov	r2, r0
   16c20:	460b      	mov	r3, r1
   16c22:	4658      	mov	r0, fp
   16c24:	f007 f9a8 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Depth     = %.4f m, rate = %.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16c28:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   16c2a:	f7f5 fbcd 	bl	c3c8 <__aeabi_f2d>
   16c2e:	4606      	mov	r6, r0
   16c30:	9810      	ldr	r0, [sp, #64]	@ 0x40
   16c32:	460f      	mov	r7, r1
   16c34:	ed8d 9b02 	vstr	d9, [sp, #8]
   16c38:	f7f5 fbc6 	bl	c3c8 <__aeabi_f2d>
   16c3c:	4632      	mov	r2, r6
   16c3e:	463b      	mov	r3, r7
   16c40:	e9cd 0100 	strd	r0, r1, [sp]
   16c44:	4648      	mov	r0, r9
   16c46:	f7fa fa0f 	bl	11068 <am_util_stdio_printf>
   16c4a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   16c4c:	f7f5 fbbc 	bl	c3c8 <__aeabi_f2d>
   16c50:	4606      	mov	r6, r0
   16c52:	9810      	ldr	r0, [sp, #64]	@ 0x40
   16c54:	460f      	mov	r7, r1
   16c56:	ed8d 9b02 	vstr	d9, [sp, #8]
   16c5a:	f7f5 fbb5 	bl	c3c8 <__aeabi_f2d>
	    rate_count++;
   16c5e:	3401      	adds	r4, #1
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Depth     = %.4f m, rate = %.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16c60:	e9cd 0100 	strd	r0, r1, [sp]
   16c64:	4632      	mov	r2, r6
   16c66:	463b      	mov	r3, r7
   16c68:	4648      	mov	r0, r9
   16c6a:	f007 f985 	bl	1df78 <datalogger_log_debug>
	    rate_count++;
   16c6e:	b2e4      	uxtb	r4, r4
        rate_avg += Rate;
   16c70:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
        if (rate_count >= 3)
   16c74:	2c03      	cmp	r4, #3
        rate_avg += Rate;
   16c76:	ee38 8a27 	vadd.f32	s16, s16, s15
        if (rate_count >= 3)
   16c7a:	d176      	bne.n	16d6a <module_sps_move_to_park+0x392>
            float averaged_rate = (float) (rate_avg / (float)rate_count);
   16c7c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
   16c80:	eec8 7a07 	vdiv.f32	s15, s16, s14
            if (averaged_rate >= SYSTEM_FALL_RATE_MIN && !crush_depth)
   16c84:	eef4 7ae8 	vcmpe.f32	s15, s17
   16c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c8c:	f2c0 80fa 	blt.w	16e84 <module_sps_move_to_park+0x4ac>
        if (Depth >= PARK_DEPTH && !crush_depth)
   16c90:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
            if (averaged_rate >= SYSTEM_FALL_RATE_MIN && !crush_depth)
   16c94:	f1b8 0f00 	cmp.w	r8, #0
   16c98:	f040 81ca 	bne.w	17030 <module_sps_move_to_park+0x658>
                piston_on_bottom_length = length_update;
   16c9c:	eeb0 ba6a 	vmov.f32	s22, s21
   16ca0:	f04f 0a01 	mov.w	sl, #1
        if (Depth >= PARK_DEPTH && !crush_depth)
   16ca4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
   16ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
   16cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16cb0:	da72      	bge.n	16d98 <module_sps_move_to_park+0x3c0>
   16cb2:	ed9f 8a2b 	vldr	s16, [pc, #172]	@ 16d60 <module_sps_move_to_park+0x388>
   16cb6:	2400      	movs	r4, #0
        if (piston_move)
   16cb8:	2d00      	cmp	r5, #0
   16cba:	f040 80d8 	bne.w	16e6e <module_sps_move_to_park+0x496>
        vTaskDelay(period);
   16cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16cc2:	f7f8 fb8f 	bl	f3e4 <vTaskDelay>
    while (run)
   16cc6:	f1ba 0f00 	cmp.w	sl, #0
   16cca:	d198      	bne.n	16bfe <module_sps_move_to_park+0x226>
    uint32_t size = xPortGetFreeHeapSize();
   16ccc:	f7f6 fdc6 	bl	d85c <xPortGetFreeHeapSize>
   16cd0:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   16cd2:	4621      	mov	r1, r4
   16cd4:	481b      	ldr	r0, [pc, #108]	@ (16d44 <module_sps_move_to_park+0x36c>)
   16cd6:	f7fa f9c7 	bl	11068 <am_util_stdio_printf>
   16cda:	4621      	mov	r1, r4
   16cdc:	4819      	ldr	r0, [pc, #100]	@ (16d44 <module_sps_move_to_park+0x36c>)
   16cde:	f007 f94b 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Task->finished\n\n");
   16ce2:	4819      	ldr	r0, [pc, #100]	@ (16d48 <module_sps_move_to_park+0x370>)
   16ce4:	f7fa f9c0 	bl	11068 <am_util_stdio_printf>
   16ce8:	4817      	ldr	r0, [pc, #92]	@ (16d48 <module_sps_move_to_park+0x370>)
   16cea:	f007 f945 	bl	1df78 <datalogger_log_debug>
    SendEvent(spsEventQueue, &spsEvent);
   16cee:	4a17      	ldr	r2, [pc, #92]	@ (16d4c <module_sps_move_to_park+0x374>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   16cf0:	2300      	movs	r3, #0
   16cf2:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
   16cf6:	6810      	ldr	r0, [r2, #0]
   16cf8:	f04f 32ff 	mov.w	r2, #4294967295
   16cfc:	f7f6 ffb2 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   16d00:	2000      	movs	r0, #0
   16d02:	f7f7 ff5b 	bl	ebbc <vTaskDelete>
}
   16d06:	b013      	add	sp, #76	@ 0x4c
   16d08:	ecbd 8b08 	vpop	{d8-d11}
   16d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d10:	00000000 	.word	0x00000000
   16d14:	3ff00000 	.word	0x3ff00000
   16d18:	1000b9d8 	.word	0x1000b9d8
   16d1c:	1000b9cc 	.word	0x1000b9cc
   16d20:	44812000 	.word	0x44812000
   16d24:	3dcccccd 	.word	0x3dcccccd
   16d28:	0002c77c 	.word	0x0002c77c
   16d2c:	0002c864 	.word	0x0002c864
   16d30:	0002c8bc 	.word	0x0002c8bc
   16d34:	3ba3d70a 	.word	0x3ba3d70a
   16d38:	0002c950 	.word	0x0002c950
   16d3c:	0002c99c 	.word	0x0002c99c
   16d40:	0002c9c8 	.word	0x0002c9c8
   16d44:	0002cdb8 	.word	0x0002cdb8
   16d48:	0002cdf0 	.word	0x0002cdf0
   16d4c:	1000bc98 	.word	0x1000bc98
   16d50:	0002bf1f 	.word	0x0002bf1f
   16d54:	0002c8e8 	.word	0x0002c8e8
   16d58:	0002ca20 	.word	0x0002ca20
   16d5c:	0002ca4c 	.word	0x0002ca4c
   16d60:	00000000 	.word	0x00000000
            rate_avg = 0.0;
   16d64:	ed1f 8a02 	vldr	s16, [pc, #-8]	@ 16d60 <module_sps_move_to_park+0x388>
            rate_count = 0;
   16d68:	2400      	movs	r4, #0
        if (Depth >= PARK_DEPTH && !crush_depth)
   16d6a:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16d6e:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
   16d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d7a:	db73      	blt.n	16e64 <module_sps_move_to_park+0x48c>
   16d7c:	f1b8 0f00 	cmp.w	r8, #0
   16d80:	d00d      	beq.n	16d9e <module_sps_move_to_park+0x3c6>
        if (piston_move)
   16d82:	2d00      	cmp	r5, #0
   16d84:	f040 8141 	bne.w	1700a <module_sps_move_to_park+0x632>
        vTaskDelay(period);
   16d88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16d8c:	f7f8 fb2a 	bl	f3e4 <vTaskDelay>
   16d90:	2500      	movs	r5, #0
   16d92:	f04f 0801 	mov.w	r8, #1
   16d96:	e732      	b.n	16bfe <module_sps_move_to_park+0x226>
        if (Depth >= PARK_DEPTH && !crush_depth)
   16d98:	ed1f 8a0f 	vldr	s16, [pc, #-60]	@ 16d60 <module_sps_move_to_park+0x388>
   16d9c:	2400      	movs	r4, #0
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Pressure Reached = %0.4f bar\n", Pressure);
   16d9e:	9811      	ldr	r0, [sp, #68]	@ 0x44
   16da0:	f7f5 fb12 	bl	c3c8 <__aeabi_f2d>
   16da4:	4602      	mov	r2, r0
   16da6:	460b      	mov	r3, r1
   16da8:	48c2      	ldr	r0, [pc, #776]	@ (170b4 <module_sps_move_to_park+0x6dc>)
   16daa:	f7fa f95d 	bl	11068 <am_util_stdio_printf>
   16dae:	9811      	ldr	r0, [sp, #68]	@ 0x44
   16db0:	f7f5 fb0a 	bl	c3c8 <__aeabi_f2d>
   16db4:	4602      	mov	r2, r0
   16db6:	460b      	mov	r3, r1
   16db8:	48be      	ldr	r0, [pc, #760]	@ (170b4 <module_sps_move_to_park+0x6dc>)
   16dba:	f007 f8dd 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Depth Reached    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   16dbe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   16dc0:	f7f5 fb02 	bl	c3c8 <__aeabi_f2d>
   16dc4:	4606      	mov	r6, r0
   16dc6:	9810      	ldr	r0, [sp, #64]	@ 0x40
   16dc8:	460f      	mov	r7, r1
   16dca:	ed8d 9b02 	vstr	d9, [sp, #8]
   16dce:	f7f5 fafb 	bl	c3c8 <__aeabi_f2d>
   16dd2:	4632      	mov	r2, r6
   16dd4:	463b      	mov	r3, r7
   16dd6:	e9cd 0100 	strd	r0, r1, [sp]
   16dda:	48b7      	ldr	r0, [pc, #732]	@ (170b8 <module_sps_move_to_park+0x6e0>)
   16ddc:	f7fa f944 	bl	11068 <am_util_stdio_printf>
   16de0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   16de2:	f7f5 faf1 	bl	c3c8 <__aeabi_f2d>
   16de6:	4606      	mov	r6, r0
   16de8:	9810      	ldr	r0, [sp, #64]	@ 0x40
   16dea:	460f      	mov	r7, r1
   16dec:	ed8d 9b02 	vstr	d9, [sp, #8]
   16df0:	f7f5 faea 	bl	c3c8 <__aeabi_f2d>
   16df4:	4632      	mov	r2, r6
   16df6:	e9cd 0100 	strd	r0, r1, [sp]
   16dfa:	463b      	mov	r3, r7
   16dfc:	48ae      	ldr	r0, [pc, #696]	@ (170b8 <module_sps_move_to_park+0x6e0>)
   16dfe:	f007 f8bb 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Reach PARK Depth\n");
   16e02:	48ae      	ldr	r0, [pc, #696]	@ (170bc <module_sps_move_to_park+0x6e4>)
   16e04:	f7fa f930 	bl	11068 <am_util_stdio_printf>
   16e08:	48ac      	ldr	r0, [pc, #688]	@ (170bc <module_sps_move_to_park+0x6e4>)
   16e0a:	f007 f8b5 	bl	1df78 <datalogger_log_debug>
            if (piston_move)
   16e0e:	2d00      	cmp	r5, #0
   16e10:	f040 811c 	bne.w	1704c <module_sps_move_to_park+0x674>
                SENS_task_delete(xDepth);
   16e14:	980e      	ldr	r0, [sp, #56]	@ 0x38
   16e16:	f7fe fcab 	bl	15770 <SENS_task_delete>
                SENS_sensor_depth_off();
   16e1a:	f7fe fc3d 	bl	15698 <SENS_sensor_depth_off>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16e1e:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16e22:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   16e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
            spsEvent = MODE_DONE;
   16e2a:	2304      	movs	r3, #4
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            spsEvent = MODE_DONE;
   16e30:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16e34:	f2c0 8392 	blt.w	1755c <module_sps_move_to_park+0xb84>
            vTaskDelay(piston_period);
   16e38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   16e3c:	f7f8 fad2 	bl	f3e4 <vTaskDelay>
            PIS_set_length(CRUSH_DEPTH_PISTON_POSITION);
   16e40:	eeb1 0a05 	vmov.f32	s0, #21	@ 0x40a80000  5.250
   16e44:	f7fd f942 	bl	140cc <PIS_set_length>
            PIS_task_move_length(&xPiston);
   16e48:	a80d      	add	r0, sp, #52	@ 0x34
   16e4a:	f7fc ffef 	bl	13e2c <PIS_task_move_length>
            ARTEMIS_DEBUG_PRINTF("\n\n\nSPS :: move_to_park, <<< CRUSH DEPTH activated >>>\n\n\n");
   16e4e:	489c      	ldr	r0, [pc, #624]	@ (170c0 <module_sps_move_to_park+0x6e8>)
   16e50:	f7fa f90a 	bl	11068 <am_util_stdio_printf>
   16e54:	46c2      	mov	sl, r8
   16e56:	489a      	ldr	r0, [pc, #616]	@ (170c0 <module_sps_move_to_park+0x6e8>)
            piston_move = true;
   16e58:	f04f 0801 	mov.w	r8, #1
            ARTEMIS_DEBUG_PRINTF("\n\n\nSPS :: move_to_park, <<< CRUSH DEPTH activated >>>\n\n\n");
   16e5c:	f007 f88c 	bl	1df78 <datalogger_log_debug>
            crush_depth = true;
   16e60:	4645      	mov	r5, r8
   16e62:	e72c      	b.n	16cbe <module_sps_move_to_park+0x2e6>
   16e64:	f04f 0a01 	mov.w	sl, #1
        if (piston_move)
   16e68:	2d00      	cmp	r5, #0
   16e6a:	f43f af28 	beq.w	16cbe <module_sps_move_to_park+0x2e6>
                eStatus = eTaskGetState( xPiston );
   16e6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
   16e70:	f7f7 ff1c 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   16e74:	2804      	cmp	r0, #4
   16e76:	f200 821b 	bhi.w	172b0 <module_sps_move_to_park+0x8d8>
   16e7a:	e8df f000 	tbb	[pc, r0]
   16e7e:	a110      	.short	0xa110
   16e80:	8910      	.short	0x8910
   16e82:	3f          	.byte	0x3f
   16e83:	00          	.byte	0x00
            else if (averaged_rate < SYSTEM_FALL_RATE_MIN && !piston_move && !crush_depth)
   16e84:	f57f af6e 	bpl.w	16d64 <module_sps_move_to_park+0x38c>
   16e88:	2d00      	cmp	r5, #0
   16e8a:	f040 80ae 	bne.w	16fea <module_sps_move_to_park+0x612>
   16e8e:	f1b8 0f00 	cmp.w	r8, #0
   16e92:	f000 8127 	beq.w	170e4 <module_sps_move_to_park+0x70c>
            rate_avg = 0.0;
   16e96:	ed9f 8a8b 	vldr	s16, [pc, #556]	@ 170c4 <module_sps_move_to_park+0x6ec>
   16e9a:	462c      	mov	r4, r5
   16e9c:	e774      	b.n	16d88 <module_sps_move_to_park+0x3b0>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->active\n");
   16e9e:	488a      	ldr	r0, [pc, #552]	@ (170c8 <module_sps_move_to_park+0x6f0>)
   16ea0:	f7fa f8e2 	bl	11068 <am_util_stdio_printf>
   16ea4:	4888      	ldr	r0, [pc, #544]	@ (170c8 <module_sps_move_to_park+0x6f0>)
   16ea6:	f007 f867 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   16eaa:	9b06      	ldr	r3, [sp, #24]
   16eac:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   16eb0:	9306      	str	r3, [sp, #24]
                    if (crush_depth)
   16eb2:	f1b8 0f00 	cmp.w	r8, #0
   16eb6:	f040 80ec 	bne.w	17092 <module_sps_move_to_park+0x6ba>
   16eba:	461a      	mov	r2, r3
                        if (piston_timer >= 30000)
   16ebc:	f247 532f 	movw	r3, #29999	@ 0x752f
   16ec0:	429a      	cmp	r2, r3
   16ec2:	f200 8201 	bhi.w	172c8 <module_sps_move_to_park+0x8f0>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16ec6:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16eca:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   16ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16ed6:	f2c0 81f5 	blt.w	172c4 <module_sps_move_to_park+0x8ec>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, deliberately stopping the Piston\n");
   16eda:	487c      	ldr	r0, [pc, #496]	@ (170cc <module_sps_move_to_park+0x6f4>)
   16edc:	f7fa f8c4 	bl	11068 <am_util_stdio_printf>
   16ee0:	487a      	ldr	r0, [pc, #488]	@ (170cc <module_sps_move_to_park+0x6f4>)
   16ee2:	f007 f849 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   16ee6:	980d      	ldr	r0, [sp, #52]	@ 0x34
   16ee8:	f7fd f840 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   16eec:	f7fd f920 	bl	14130 <PIS_stop>
                piston_timer = 0;
   16ef0:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16ef2:	46d0      	mov	r8, sl
                piston_timer = 0;
   16ef4:	9306      	str	r3, [sp, #24]
   16ef6:	e79f      	b.n	16e38 <module_sps_move_to_park+0x460>
                eStatus = eTaskGetState( xPiston );
   16ef8:	f04f 0a01 	mov.w	sl, #1
                    PIS_Get_Length(&Length);
   16efc:	9808      	ldr	r0, [sp, #32]
   16efe:	f7fd f88d 	bl	1401c <PIS_Get_Length>
                    Volume = CTRL_calculate_volume_from_length(Length);
   16f02:	ed9d 0a0c 	vldr	s0, [sp, #48]	@ 0x30
   16f06:	f7fd fa57 	bl	143b8 <CTRL_calculate_volume_from_length>
   16f0a:	ee10 5a10 	vmov	r5, s0
                    Density = CTRL_calculate_lcp_density(Volume);
   16f0e:	f7fd f96b 	bl	141e8 <CTRL_calculate_lcp_density>
   16f12:	ee10 0a10 	vmov	r0, s0
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   16f16:	f7f5 fa57 	bl	c3c8 <__aeabi_f2d>
   16f1a:	4602      	mov	r2, r0
   16f1c:	460b      	mov	r3, r1
   16f1e:	4628      	mov	r0, r5
   16f20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16f24:	f7f5 fa50 	bl	c3c8 <__aeabi_f2d>
   16f28:	4606      	mov	r6, r0
   16f2a:	980c      	ldr	r0, [sp, #48]	@ 0x30
   16f2c:	460f      	mov	r7, r1
   16f2e:	f7f5 fa4b 	bl	c3c8 <__aeabi_f2d>
   16f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16f3a:	e9cd 6700 	strd	r6, r7, [sp]
   16f3e:	4864      	ldr	r0, [pc, #400]	@ (170d0 <module_sps_move_to_park+0x6f8>)
   16f40:	f7fa f892 	bl	11068 <am_util_stdio_printf>
   16f44:	980c      	ldr	r0, [sp, #48]	@ 0x30
   16f46:	f7f5 fa3f 	bl	c3c8 <__aeabi_f2d>
   16f4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16f52:	e9cd 6700 	strd	r6, r7, [sp]
   16f56:	485e      	ldr	r0, [pc, #376]	@ (170d0 <module_sps_move_to_park+0x6f8>)
   16f58:	f007 f80e 	bl	1df78 <datalogger_log_debug>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->finished\n");
   16f5c:	485d      	ldr	r0, [pc, #372]	@ (170d4 <module_sps_move_to_park+0x6fc>)
   16f5e:	f7fa f883 	bl	11068 <am_util_stdio_printf>
   16f62:	485c      	ldr	r0, [pc, #368]	@ (170d4 <module_sps_move_to_park+0x6fc>)
   16f64:	f007 f808 	bl	1df78 <datalogger_log_debug>
                    if (crush_depth)
   16f68:	f1b8 0f00 	cmp.w	r8, #0
   16f6c:	f040 8128 	bne.w	171c0 <module_sps_move_to_park+0x7e8>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16f70:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16f74:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   16f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16f80:	f2c0 8110 	blt.w	171a4 <module_sps_move_to_park+0x7cc>
                    piston_timer = 0;
   16f84:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16f86:	46d0      	mov	r8, sl
                    piston_timer = 0;
   16f88:	9306      	str	r3, [sp, #24]
   16f8a:	e755      	b.n	16e38 <module_sps_move_to_park+0x460>
                eStatus = eTaskGetState( xPiston );
   16f8c:	f04f 0a01 	mov.w	sl, #1
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->suspended\n");
   16f90:	4851      	ldr	r0, [pc, #324]	@ (170d8 <module_sps_move_to_park+0x700>)
   16f92:	f7fa f869 	bl	11068 <am_util_stdio_printf>
   16f96:	4850      	ldr	r0, [pc, #320]	@ (170d8 <module_sps_move_to_park+0x700>)
   16f98:	f006 ffee 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   16f9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
   16f9e:	f7fc ffe5 	bl	13f6c <PIS_task_delete>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16fa2:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16fa6:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   16faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16fb2:	da76      	bge.n	170a2 <module_sps_move_to_park+0x6ca>
                    piston_timer = 0;
   16fb4:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16fb6:	2501      	movs	r5, #1
                    piston_timer = 0;
   16fb8:	9306      	str	r3, [sp, #24]
   16fba:	e680      	b.n	16cbe <module_sps_move_to_park+0x2e6>
                eStatus = eTaskGetState( xPiston );
   16fbc:	f04f 0a01 	mov.w	sl, #1
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->Ready\n");
   16fc0:	4846      	ldr	r0, [pc, #280]	@ (170dc <module_sps_move_to_park+0x704>)
   16fc2:	f7fa f851 	bl	11068 <am_util_stdio_printf>
   16fc6:	4845      	ldr	r0, [pc, #276]	@ (170dc <module_sps_move_to_park+0x704>)
   16fc8:	f006 ffd6 	bl	1df78 <datalogger_log_debug>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   16fcc:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16fd0:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   16fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16fdc:	db02      	blt.n	16fe4 <module_sps_move_to_park+0x60c>
   16fde:	f1b8 0f00 	cmp.w	r8, #0
   16fe2:	d0cf      	beq.n	16f84 <module_sps_move_to_park+0x5ac>
                    piston_move = false;
   16fe4:	2500      	movs	r5, #0
                    piston_timer = 0;
   16fe6:	9506      	str	r5, [sp, #24]
   16fe8:	e669      	b.n	16cbe <module_sps_move_to_park+0x2e6>
        if (Depth >= PARK_DEPTH && !crush_depth)
   16fea:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   16fee:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
   16ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16ffa:	db39      	blt.n	17070 <module_sps_move_to_park+0x698>
   16ffc:	f1b8 0f00 	cmp.w	r8, #0
   17000:	f43f aeca 	beq.w	16d98 <module_sps_move_to_park+0x3c0>
            rate_avg = 0.0;
   17004:	ed9f 8a2f 	vldr	s16, [pc, #188]	@ 170c4 <module_sps_move_to_park+0x6ec>
            rate_count = 0;
   17008:	2400      	movs	r4, #0
                eStatus = eTaskGetState( xPiston );
   1700a:	980d      	ldr	r0, [sp, #52]	@ 0x34
   1700c:	f7f7 fe4e 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   17010:	2804      	cmp	r0, #4
   17012:	f200 814b 	bhi.w	172ac <module_sps_move_to_park+0x8d4>
   17016:	a301      	add	r3, pc, #4	@ (adr r3, 1701c <module_sps_move_to_park+0x644>)
   17018:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1701c:	0001707b 	.word	0x0001707b
   17020:	00016fbd 	.word	0x00016fbd
   17024:	0001707b 	.word	0x0001707b
   17028:	00016f8d 	.word	0x00016f8d
   1702c:	00016ef9 	.word	0x00016ef9
        if (Depth >= PARK_DEPTH && !crush_depth)
   17030:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
   17034:	eef4 7ac7 	vcmpe.f32	s15, s14
   17038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            rate_avg = 0.0;
   1703c:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 170c4 <module_sps_move_to_park+0x6ec>
        if (Depth >= PARK_DEPTH && !crush_depth)
   17040:	da02      	bge.n	17048 <module_sps_move_to_park+0x670>
   17042:	46c2      	mov	sl, r8
            rate_count = 0;
   17044:	2400      	movs	r4, #0
   17046:	e637      	b.n	16cb8 <module_sps_move_to_park+0x2e0>
   17048:	2400      	movs	r4, #0
   1704a:	e69a      	b.n	16d82 <module_sps_move_to_park+0x3aa>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, deliberately stopping the Piston\n");
   1704c:	481f      	ldr	r0, [pc, #124]	@ (170cc <module_sps_move_to_park+0x6f4>)
   1704e:	f7fa f80b 	bl	11068 <am_util_stdio_printf>
   17052:	481e      	ldr	r0, [pc, #120]	@ (170cc <module_sps_move_to_park+0x6f4>)
   17054:	f006 ff90 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   17058:	980d      	ldr	r0, [sp, #52]	@ 0x34
   1705a:	f7fc ff87 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   1705e:	f7fd f867 	bl	14130 <PIS_stop>
                vTaskDelay(piston_period);
   17062:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17066:	f7f8 f9bd 	bl	f3e4 <vTaskDelay>
                piston_timer = 0;
   1706a:	2300      	movs	r3, #0
   1706c:	9306      	str	r3, [sp, #24]
   1706e:	e6d1      	b.n	16e14 <module_sps_move_to_park+0x43c>
            rate_avg = 0.0;
   17070:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 170c4 <module_sps_move_to_park+0x6ec>
        if (Depth >= PARK_DEPTH && !crush_depth)
   17074:	46aa      	mov	sl, r5
            rate_count = 0;
   17076:	2400      	movs	r4, #0
   17078:	e6f9      	b.n	16e6e <module_sps_move_to_park+0x496>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->active\n");
   1707a:	4813      	ldr	r0, [pc, #76]	@ (170c8 <module_sps_move_to_park+0x6f0>)
   1707c:	f7f9 fff4 	bl	11068 <am_util_stdio_printf>
   17080:	4811      	ldr	r0, [pc, #68]	@ (170c8 <module_sps_move_to_park+0x6f0>)
   17082:	f006 ff79 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   17086:	9b06      	ldr	r3, [sp, #24]
   17088:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   1708c:	9306      	str	r3, [sp, #24]
   1708e:	f04f 0a01 	mov.w	sl, #1
                        if (piston_timer >= 120000)
   17092:	4b13      	ldr	r3, [pc, #76]	@ (170e0 <module_sps_move_to_park+0x708>)
   17094:	9a06      	ldr	r2, [sp, #24]
   17096:	429a      	cmp	r2, r3
   17098:	f200 8133 	bhi.w	17302 <module_sps_move_to_park+0x92a>
   1709c:	2501      	movs	r5, #1
   1709e:	46a8      	mov	r8, r5
   170a0:	e60d      	b.n	16cbe <module_sps_move_to_park+0x2e6>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   170a2:	f1b8 0f00 	cmp.w	r8, #0
   170a6:	f43f af18 	beq.w	16eda <module_sps_move_to_park+0x502>
                    piston_timer = 0;
   170aa:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   170ac:	4645      	mov	r5, r8
                    piston_timer = 0;
   170ae:	9306      	str	r3, [sp, #24]
   170b0:	e605      	b.n	16cbe <module_sps_move_to_park+0x2e6>
   170b2:	bf00      	nop
   170b4:	0002cc30 	.word	0x0002cc30
   170b8:	0002cc64 	.word	0x0002cc64
   170bc:	0002ccac 	.word	0x0002ccac
   170c0:	0002cd7c 	.word	0x0002cd7c
   170c4:	00000000 	.word	0x00000000
   170c8:	0002c8bc 	.word	0x0002c8bc
   170cc:	0002ccd4 	.word	0x0002ccd4
   170d0:	0002c950 	.word	0x0002c950
   170d4:	0002c99c 	.word	0x0002c99c
   170d8:	0002c920 	.word	0x0002c920
   170dc:	0002cd50 	.word	0x0002cd50
   170e0:	0001d4bf 	.word	0x0001d4bf
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Depth Rate is negative, decrease %fin\n", PARK_POSITION_INCREMENT);
   170e4:	a3d0      	add	r3, pc, #832	@ (adr r3, 17428 <module_sps_move_to_park+0xa50>)
   170e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   170ea:	48d1      	ldr	r0, [pc, #836]	@ (17430 <module_sps_move_to_park+0xa58>)
   170ec:	f7f9 ffbc 	bl	11068 <am_util_stdio_printf>
   170f0:	a3cd      	add	r3, pc, #820	@ (adr r3, 17428 <module_sps_move_to_park+0xa50>)
   170f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   170f6:	48ce      	ldr	r0, [pc, #824]	@ (17430 <module_sps_move_to_park+0xa58>)
   170f8:	f006 ff3e 	bl	1df78 <datalogger_log_debug>
                length_update -= PARK_POSITION_INCREMENT;
   170fc:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 17434 <module_sps_move_to_park+0xa5c>
   17100:	ee7a aac7 	vsub.f32	s21, s21, s14
                if ( (piston_on_bottom_length - length_update) <= PISTON_MOVEMENT_ON_BOTTOM)
   17104:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   17108:	ee3b 7a6a 	vsub.f32	s14, s22, s21
   1710c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17114:	f240 8134 	bls.w	17380 <module_sps_move_to_park+0x9a8>
                else if ( (piston_on_bottom_length - length_update) > PISTON_MOVEMENT_ON_BOTTOM)
   17118:	f300 820d 	bgt.w	17536 <module_sps_move_to_park+0xb5e>
                if (length_update <= PISTON_POSITION_MINIMUM)
   1711c:	eddf 7ac6 	vldr	s15, [pc, #792]	@ 17438 <module_sps_move_to_park+0xa60>
   17120:	eef4 aae7 	vcmpe.f32	s21, s15
   17124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17128:	f240 8138 	bls.w	1739c <module_sps_move_to_park+0x9c4>
                else if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   1712c:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
   17130:	eef4 aac8 	vcmpe.f32	s21, s16
   17134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17138:	f2c0 80f7 	blt.w	1732a <module_sps_move_to_park+0x952>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   1713c:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
   17140:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 1743c <module_sps_move_to_park+0xa64>
   17144:	eef4 7ac7 	vcmpe.f32	s15, s14
   17148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1714c:	f280 81ad 	bge.w	174aa <module_sps_move_to_park+0xad2>
                PIS_Get_Length(&Length);
   17150:	9808      	ldr	r0, [sp, #32]
   17152:	f7fc ff63 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1715a:	f7f8 f943 	bl	f3e4 <vTaskDelay>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   1715e:	eddf 7ab7 	vldr	s15, [pc, #732]	@ 1743c <module_sps_move_to_park+0xa64>
   17162:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   17166:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1716e:	f2c0 818b 	blt.w	17488 <module_sps_move_to_park+0xab0>
   17172:	2500      	movs	r5, #0
            rate_avg = 0.0;
   17174:	ed9f 8ab2 	vldr	s16, [pc, #712]	@ 17440 <module_sps_move_to_park+0xa68>
            rate_count = 0;
   17178:	462c      	mov	r4, r5
   1717a:	e610      	b.n	16d9e <module_sps_move_to_park+0x3c6>
        length_update = park_piston_length;
   1717c:	4cb1      	ldr	r4, [pc, #708]	@ (17444 <module_sps_move_to_park+0xa6c>)
   1717e:	ed94 aa00 	vldr	s20, [r4]
        ARTEMIS_DEBUG_PRINTF("\n<<SPS :: move_to_park, Setting -> adjusted park_piston_length=%.4fin >>\n", park_piston_length);
   17182:	6820      	ldr	r0, [r4, #0]
   17184:	f7f5 f920 	bl	c3c8 <__aeabi_f2d>
   17188:	4602      	mov	r2, r0
   1718a:	460b      	mov	r3, r1
   1718c:	48ae      	ldr	r0, [pc, #696]	@ (17448 <module_sps_move_to_park+0xa70>)
   1718e:	f7f9 ff6b 	bl	11068 <am_util_stdio_printf>
   17192:	6820      	ldr	r0, [r4, #0]
   17194:	f7f5 f918 	bl	c3c8 <__aeabi_f2d>
   17198:	4602      	mov	r2, r0
   1719a:	460b      	mov	r3, r1
   1719c:	48aa      	ldr	r0, [pc, #680]	@ (17448 <module_sps_move_to_park+0xa70>)
   1719e:	f006 feeb 	bl	1df78 <datalogger_log_debug>
   171a2:	e458      	b.n	16a56 <module_sps_move_to_park+0x7e>
                    piston_move = false;
   171a4:	4645      	mov	r5, r8
                    piston_timer = 0;
   171a6:	f8cd 8018 	str.w	r8, [sp, #24]
   171aa:	e588      	b.n	16cbe <module_sps_move_to_park+0x2e6>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston task->suspended\n");
   171ac:	48a7      	ldr	r0, [pc, #668]	@ (1744c <module_sps_move_to_park+0xa74>)
   171ae:	f7f9 ff5b 	bl	11068 <am_util_stdio_printf>
   171b2:	48a6      	ldr	r0, [pc, #664]	@ (1744c <module_sps_move_to_park+0xa74>)
   171b4:	f006 fee0 	bl	1df78 <datalogger_log_debug>
            PIS_task_delete(xPiston);
   171b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
   171ba:	f7fc fed7 	bl	13f6c <PIS_task_delete>
            piston_timer = 0;
   171be:	e4b2      	b.n	16b26 <module_sps_move_to_park+0x14e>
                            SENS_task_delete(xDepth);
   171c0:	980e      	ldr	r0, [sp, #56]	@ 0x38
   171c2:	f7fe fad5 	bl	15770 <SENS_task_delete>
                            SENS_sensor_depth_off();
   171c6:	f7fe fa67 	bl	15698 <SENS_sensor_depth_off>
                        spsEvent = MODE_POPUP;
   171ca:	2302      	movs	r3, #2
                        vTaskDelay(piston_period);
   171cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                        spsEvent = MODE_POPUP;
   171d0:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                        vTaskDelay(piston_period);
   171d4:	f7f8 f906 	bl	f3e4 <vTaskDelay>
        vTaskDelay(period);
   171d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   171dc:	f7f8 f902 	bl	f3e4 <vTaskDelay>
    while (run)
   171e0:	e574      	b.n	16ccc <module_sps_move_to_park+0x2f4>
        TaskHandle_t xPiston = NULL;
   171e2:	2400      	movs	r4, #0
        PIS_set_piston_rate(1);
   171e4:	2001      	movs	r0, #1
        TaskHandle_t xPiston = NULL;
   171e6:	9411      	str	r4, [sp, #68]	@ 0x44
        PIS_set_piston_rate(1);
   171e8:	f7fc ff26 	bl	14038 <PIS_set_piston_rate>
        PIS_task_move_zero(&xPiston); /*This is the piston zero reset command*/
   171ec:	ab11      	add	r3, sp, #68	@ 0x44
   171ee:	4618      	mov	r0, r3
   171f0:	9305      	str	r3, [sp, #20]
   171f2:	f7fc fe93 	bl	13f1c <PIS_task_move_zero>
        vTaskDelay(piston_period);
   171f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   171fa:	f7f8 f8f3 	bl	f3e4 <vTaskDelay>
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_park, Setting -> Piston encoder value to zero, %u profiles reached since last cal >>\n\n", pistoncal_number);
   171fe:	7831      	ldrb	r1, [r6, #0]
   17200:	4893      	ldr	r0, [pc, #588]	@ (17450 <module_sps_move_to_park+0xa78>)
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston zero task->active\n");
   17202:	4d94      	ldr	r5, [pc, #592]	@ (17454 <module_sps_move_to_park+0xa7c>)
                if (piston_timer >= 180000)
   17204:	4f94      	ldr	r7, [pc, #592]	@ (17458 <module_sps_move_to_park+0xa80>)
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_park, Setting -> Piston encoder value to zero, %u profiles reached since last cal >>\n\n", pistoncal_number);
   17206:	f7f9 ff2f 	bl	11068 <am_util_stdio_printf>
   1720a:	7831      	ldrb	r1, [r6, #0]
   1720c:	4890      	ldr	r0, [pc, #576]	@ (17450 <module_sps_move_to_park+0xa78>)
   1720e:	f006 feb3 	bl	1df78 <datalogger_log_debug>
        pistoncal_number = 0;
   17212:	7034      	strb	r4, [r6, #0]
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston zero time-out, task->finished\n");
   17214:	4e91      	ldr	r6, [pc, #580]	@ (1745c <module_sps_move_to_park+0xa84>)
   17216:	e008      	b.n	1722a <module_sps_move_to_park+0x852>
            else if (eStatus==eSuspended)
   17218:	2803      	cmp	r0, #3
   1721a:	f000 80f8 	beq.w	1740e <module_sps_move_to_park+0xa36>
            else if (eStatus==eDeleted)
   1721e:	2804      	cmp	r0, #4
   17220:	d023      	beq.n	1726a <module_sps_move_to_park+0x892>
            vTaskDelay(piston_period);
   17222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17226:	f7f8 f8dd 	bl	f3e4 <vTaskDelay>
            eStatus = eTaskGetState( xPiston );
   1722a:	9811      	ldr	r0, [sp, #68]	@ 0x44
   1722c:	f7f7 fd3e 	bl	ecac <eTaskGetState>
            if ( (eStatus==eRunning) || (eStatus==eBlocked) || (eStatus==eReady) )
   17230:	2802      	cmp	r0, #2
   17232:	d8f1      	bhi.n	17218 <module_sps_move_to_park+0x840>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston zero task->active\n");
   17234:	4628      	mov	r0, r5
   17236:	f7f9 ff17 	bl	11068 <am_util_stdio_printf>
                piston_timer += piston_period;
   1723a:	f504 747a 	add.w	r4, r4, #1000	@ 0x3e8
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston zero task->active\n");
   1723e:	4628      	mov	r0, r5
   17240:	f006 fe9a 	bl	1df78 <datalogger_log_debug>
                if (piston_timer >= 180000)
   17244:	42bc      	cmp	r4, r7
   17246:	d9ec      	bls.n	17222 <module_sps_move_to_park+0x84a>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston zero time-out, task->finished\n");
   17248:	4630      	mov	r0, r6
   1724a:	f7f9 ff0d 	bl	11068 <am_util_stdio_printf>
   1724e:	4630      	mov	r0, r6
   17250:	f006 fe92 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   17254:	9811      	ldr	r0, [sp, #68]	@ 0x44
   17256:	f7fc fe89 	bl	13f6c <PIS_task_delete>
                    vTaskDelay(piston_period);
   1725a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1725e:	f7f8 f8c1 	bl	f3e4 <vTaskDelay>
                    PIS_Reset();
   17262:	f7fc ff79 	bl	14158 <PIS_Reset>
                    piston_timer = 0;
   17266:	2400      	movs	r4, #0
   17268:	e7db      	b.n	17222 <module_sps_move_to_park+0x84a>
                PIS_Get_Length(&Length);
   1726a:	ab0c      	add	r3, sp, #48	@ 0x30
   1726c:	4618      	mov	r0, r3
   1726e:	9308      	str	r3, [sp, #32]
   17270:	f7fc fed4 	bl	1401c <PIS_Get_Length>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston Zero Cal Length=%.4fin\n", Length);
   17274:	980c      	ldr	r0, [sp, #48]	@ 0x30
   17276:	f7f5 f8a7 	bl	c3c8 <__aeabi_f2d>
   1727a:	4602      	mov	r2, r0
   1727c:	460b      	mov	r3, r1
   1727e:	4878      	ldr	r0, [pc, #480]	@ (17460 <module_sps_move_to_park+0xa88>)
   17280:	f7f9 fef2 	bl	11068 <am_util_stdio_printf>
   17284:	980c      	ldr	r0, [sp, #48]	@ 0x30
   17286:	f7f5 f89f 	bl	c3c8 <__aeabi_f2d>
   1728a:	4602      	mov	r2, r0
   1728c:	460b      	mov	r3, r1
   1728e:	4874      	ldr	r0, [pc, #464]	@ (17460 <module_sps_move_to_park+0xa88>)
   17290:	f006 fe72 	bl	1df78 <datalogger_log_debug>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston Zero Cal Task->Finished\n");
   17294:	4873      	ldr	r0, [pc, #460]	@ (17464 <module_sps_move_to_park+0xa8c>)
   17296:	f7f9 fee7 	bl	11068 <am_util_stdio_printf>
   1729a:	4872      	ldr	r0, [pc, #456]	@ (17464 <module_sps_move_to_park+0xa8c>)
   1729c:	f006 fe6c 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(piston_period);
   172a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   172a4:	f7f8 f89e 	bl	f3e4 <vTaskDelay>
        while (piston_move)
   172a8:	f7ff bba6 	b.w	169f8 <module_sps_move_to_park+0x20>
                eStatus = eTaskGetState( xPiston );
   172ac:	f04f 0a01 	mov.w	sl, #1
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   172b0:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   172b4:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   172b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   172bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   172c0:	f280 8152 	bge.w	17568 <module_sps_move_to_park+0xb90>
   172c4:	2501      	movs	r5, #1
   172c6:	e4fa      	b.n	16cbe <module_sps_move_to_park+0x2e6>
                            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston time-out, task->finished\n");
   172c8:	4867      	ldr	r0, [pc, #412]	@ (17468 <module_sps_move_to_park+0xa90>)
   172ca:	f7f9 fecd 	bl	11068 <am_util_stdio_printf>
   172ce:	4866      	ldr	r0, [pc, #408]	@ (17468 <module_sps_move_to_park+0xa90>)
   172d0:	f006 fe52 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   172d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
   172d6:	f7fc fe49 	bl	13f6c <PIS_task_delete>
                            vTaskDelay(piston_period);
   172da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   172de:	f7f8 f881 	bl	f3e4 <vTaskDelay>
                            PIS_Reset();
   172e2:	f7fc ff39 	bl	14158 <PIS_Reset>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   172e6:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
   172ea:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   172ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
   172f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   172f6:	f6bf adf0 	bge.w	16eda <module_sps_move_to_park+0x502>
   172fa:	2501      	movs	r5, #1
                            piston_timer = 0;
   172fc:	f8cd 8018 	str.w	r8, [sp, #24]
   17300:	e4dd      	b.n	16cbe <module_sps_move_to_park+0x2e6>
                            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston CRUSH_DEPTH time-out, task->finished\n");
   17302:	485a      	ldr	r0, [pc, #360]	@ (1746c <module_sps_move_to_park+0xa94>)
   17304:	f7f9 feb0 	bl	11068 <am_util_stdio_printf>
   17308:	4858      	ldr	r0, [pc, #352]	@ (1746c <module_sps_move_to_park+0xa94>)
   1730a:	f006 fe35 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   1730e:	980d      	ldr	r0, [sp, #52]	@ 0x34
   17310:	f7fc fe2c 	bl	13f6c <PIS_task_delete>
                            vTaskDelay(piston_period);
   17314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17318:	f7f8 f864 	bl	f3e4 <vTaskDelay>
                            PIS_Reset();
   1731c:	2501      	movs	r5, #1
   1731e:	f7fc ff1b 	bl	14158 <PIS_Reset>
                            piston_timer = 0;
   17322:	2300      	movs	r3, #0
   17324:	9306      	str	r3, [sp, #24]
                            PIS_Reset();
   17326:	46a8      	mov	r8, r5
   17328:	e4c9      	b.n	16cbe <module_sps_move_to_park+0x2e6>
                PIS_Get_Length(&Length);
   1732a:	9808      	ldr	r0, [sp, #32]
   1732c:	f7fc fe76 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17330:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17334:	f7f8 f856 	bl	f3e4 <vTaskDelay>
   17338:	f04f 0a01 	mov.w	sl, #1
                    park_piston_length = length_update;
   1733c:	4b41      	ldr	r3, [pc, #260]	@ (17444 <module_sps_move_to_park+0xa6c>)
                    PIS_set_length(length_update);
   1733e:	eeb0 0a6a 	vmov.f32	s0, s21
                    park_piston_length = length_update;
   17342:	edc3 aa00 	vstr	s21, [r3]
                    PIS_set_length(length_update);
   17346:	f7fc fec1 	bl	140cc <PIS_set_length>
                    PIS_task_move_length(&xPiston);
   1734a:	a80d      	add	r0, sp, #52	@ 0x34
   1734c:	f7fc fd6e 	bl	13e2c <PIS_task_move_length>
                    piston_move = true;
   17350:	2501      	movs	r5, #1
   17352:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
   17356:	e4a5      	b.n	16ca4 <module_sps_move_to_park+0x2cc>
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_park, length_update=%.4fin < piston position minimum >>\n", length_update);
   17358:	ee1a 0a10 	vmov	r0, s20
   1735c:	f7f5 f834 	bl	c3c8 <__aeabi_f2d>
   17360:	4604      	mov	r4, r0
   17362:	460d      	mov	r5, r1
   17364:	460b      	mov	r3, r1
   17366:	4622      	mov	r2, r4
   17368:	4841      	ldr	r0, [pc, #260]	@ (17470 <module_sps_move_to_park+0xa98>)
   1736a:	f7f9 fe7d 	bl	11068 <am_util_stdio_printf>
   1736e:	4840      	ldr	r0, [pc, #256]	@ (17470 <module_sps_move_to_park+0xa98>)
   17370:	4622      	mov	r2, r4
   17372:	462b      	mov	r3, r5
   17374:	f006 fe00 	bl	1df78 <datalogger_log_debug>
        length_update = PISTON_POSITION_MINIMUM;
   17378:	eeb0 aa48 	vmov.f32	s20, s16
   1737c:	f7ff bb6b 	b.w	16a56 <module_sps_move_to_park+0x7e>
                    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_park, LCP is not hitting the bottom\n\n");
   17380:	483c      	ldr	r0, [pc, #240]	@ (17474 <module_sps_move_to_park+0xa9c>)
   17382:	f7f9 fe71 	bl	11068 <am_util_stdio_printf>
   17386:	483b      	ldr	r0, [pc, #236]	@ (17474 <module_sps_move_to_park+0xa9c>)
   17388:	f006 fdf6 	bl	1df78 <datalogger_log_debug>
                if (length_update <= PISTON_POSITION_MINIMUM)
   1738c:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 17438 <module_sps_move_to_park+0xa60>
   17390:	eef4 aae7 	vcmpe.f32	s21, s15
   17394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17398:	f63f aec8 	bhi.w	1712c <module_sps_move_to_park+0x754>
                    to_park_state_time += (period * rate_count);
   1739c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1739e:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
                    ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_park, critical piston minimum position time = %.2f seconds >>\n", (float)to_park_state_time/xDelay1000ms);
   173a2:	ee07 3a90 	vmov	s15, r3
   173a6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   173aa:	eddf 7a33 	vldr	s15, [pc, #204]	@ 17478 <module_sps_move_to_park+0xaa0>
                    to_park_state_time += (period * rate_count);
   173ae:	9309      	str	r3, [sp, #36]	@ 0x24
                    ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_park, critical piston minimum position time = %.2f seconds >>\n", (float)to_park_state_time/xDelay1000ms);
   173b0:	eec8 7a27 	vdiv.f32	s15, s16, s15
   173b4:	ee17 0a90 	vmov	r0, s15
   173b8:	f7f5 f806 	bl	c3c8 <__aeabi_f2d>
   173bc:	4604      	mov	r4, r0
   173be:	460d      	mov	r5, r1
   173c0:	460b      	mov	r3, r1
   173c2:	4622      	mov	r2, r4
   173c4:	482d      	ldr	r0, [pc, #180]	@ (1747c <module_sps_move_to_park+0xaa4>)
   173c6:	f7f9 fe4f 	bl	11068 <am_util_stdio_printf>
   173ca:	482c      	ldr	r0, [pc, #176]	@ (1747c <module_sps_move_to_park+0xaa4>)
   173cc:	4622      	mov	r2, r4
   173ce:	462b      	mov	r3, r5
   173d0:	f006 fdd2 	bl	1df78 <datalogger_log_debug>
                    if (to_park_state_time >= (TO_PARK_STATE_TIMER*xDelay1000ms))
   173d4:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 17480 <module_sps_move_to_park+0xaa8>
   173d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   173dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   173e0:	da7e      	bge.n	174e0 <module_sps_move_to_park+0xb08>
                PIS_Get_Length(&Length);
   173e2:	9808      	ldr	r0, [sp, #32]
   173e4:	f7fc fe1a 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   173e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   173ec:	f7f7 fffa 	bl	f3e4 <vTaskDelay>
   173f0:	f04f 0a01 	mov.w	sl, #1
                if (length_update <= PISTON_POSITION_MINIMUM && Length <= PISTON_POSITION_MINIMUM)
   173f4:	eddf aa10 	vldr	s21, [pc, #64]	@ 17438 <module_sps_move_to_park+0xa60>
   173f8:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
   173fc:	eef4 7aea 	vcmpe.f32	s15, s21
   17400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17404:	d89a      	bhi.n	1733c <module_sps_move_to_park+0x964>
   17406:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
   1740a:	2500      	movs	r5, #0
   1740c:	e44a      	b.n	16ca4 <module_sps_move_to_park+0x2cc>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_park, Piston zero task->suspended\n");
   1740e:	481d      	ldr	r0, [pc, #116]	@ (17484 <module_sps_move_to_park+0xaac>)
   17410:	f7f9 fe2a 	bl	11068 <am_util_stdio_printf>
   17414:	481b      	ldr	r0, [pc, #108]	@ (17484 <module_sps_move_to_park+0xaac>)
   17416:	f006 fdaf 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   1741a:	9811      	ldr	r0, [sp, #68]	@ 0x44
   1741c:	f7fc fda6 	bl	13f6c <PIS_task_delete>
                piston_timer = 0;
   17420:	e721      	b.n	17266 <module_sps_move_to_park+0x88e>
   17422:	bf00      	nop
   17424:	f3af 8000 	nop.w
   17428:	e0000000 	.word	0xe0000000
   1742c:	3f9eb851 	.word	0x3f9eb851
   17430:	0002ca8c 	.word	0x0002ca8c
   17434:	3cf5c28f 	.word	0x3cf5c28f
   17438:	3dcccccd 	.word	0x3dcccccd
   1743c:	42340000 	.word	0x42340000
   17440:	00000000 	.word	0x00000000
   17444:	1000b9cc 	.word	0x1000b9cc
   17448:	0002c818 	.word	0x0002c818
   1744c:	0002c920 	.word	0x0002c920
   17450:	0002c604 	.word	0x0002c604
   17454:	0002c670 	.word	0x0002c670
   17458:	0002bf1f 	.word	0x0002bf1f
   1745c:	0002c6a0 	.word	0x0002c6a0
   17460:	0002c710 	.word	0x0002c710
   17464:	0002c744 	.word	0x0002c744
   17468:	0002c8e8 	.word	0x0002c8e8
   1746c:	0002cd0c 	.word	0x0002cd0c
   17470:	0002c7cc 	.word	0x0002c7cc
   17474:	0002cac8 	.word	0x0002cac8
   17478:	447a0000 	.word	0x447a0000
   1747c:	0002cb40 	.word	0x0002cb40
   17480:	48927c00 	.word	0x48927c00
   17484:	0002c6dc 	.word	0x0002c6dc
                        park_piston_length = length_update;
   17488:	4b3d      	ldr	r3, [pc, #244]	@ (17580 <module_sps_move_to_park+0xba8>)
                        PIS_set_length(length_update);
   1748a:	eeb0 0a6a 	vmov.f32	s0, s21
                        park_piston_length = length_update;
   1748e:	edc3 aa00 	vstr	s21, [r3]
                        PIS_task_move_length(&xPiston);
   17492:	f04f 0a01 	mov.w	sl, #1
                        PIS_set_length(length_update);
   17496:	f7fc fe19 	bl	140cc <PIS_set_length>
                        PIS_task_move_length(&xPiston);
   1749a:	a80d      	add	r0, sp, #52	@ 0x34
   1749c:	f7fc fcc6 	bl	13e2c <PIS_task_move_length>
                    piston_move = true;
   174a0:	4655      	mov	r5, sl
   174a2:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
   174a6:	f7ff bbfd 	b.w	16ca4 <module_sps_move_to_park+0x2cc>
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_park, Depth = %.4f is @critial piston position >>\n", Depth);
   174aa:	ee17 0a90 	vmov	r0, s15
   174ae:	f7f4 ff8b 	bl	c3c8 <__aeabi_f2d>
   174b2:	4602      	mov	r2, r0
   174b4:	460b      	mov	r3, r1
   174b6:	4833      	ldr	r0, [pc, #204]	@ (17584 <module_sps_move_to_park+0xbac>)
   174b8:	f7f9 fdd6 	bl	11068 <am_util_stdio_printf>
   174bc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   174be:	f7f4 ff83 	bl	c3c8 <__aeabi_f2d>
   174c2:	4602      	mov	r2, r0
   174c4:	460b      	mov	r3, r1
   174c6:	482f      	ldr	r0, [pc, #188]	@ (17584 <module_sps_move_to_park+0xbac>)
   174c8:	f006 fd56 	bl	1df78 <datalogger_log_debug>
                PIS_Get_Length(&Length);
   174cc:	9808      	ldr	r0, [sp, #32]
   174ce:	f7fc fda5 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   174d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   174d6:	f7f7 ff85 	bl	f3e4 <vTaskDelay>
                        length_update = CRUSH_DEPTH_PISTON_POSITION;
   174da:	eef0 aa48 	vmov.f32	s21, s16
   174de:	e63e      	b.n	1715e <module_sps_move_to_park+0x786>
                        ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_park, critical piston minimum position time out = %.2f mins >>\n", (float)to_park_state_time/(60.0*xDelay1000ms));
   174e0:	ee18 0a10 	vmov	r0, s16
   174e4:	f7f4 ff70 	bl	c3c8 <__aeabi_f2d>
   174e8:	a323      	add	r3, pc, #140	@ (adr r3, 17578 <module_sps_move_to_park+0xba0>)
   174ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   174ee:	f7f5 f8ed 	bl	c6cc <__aeabi_ddiv>
   174f2:	4604      	mov	r4, r0
   174f4:	460d      	mov	r5, r1
   174f6:	460b      	mov	r3, r1
   174f8:	4622      	mov	r2, r4
   174fa:	4823      	ldr	r0, [pc, #140]	@ (17588 <module_sps_move_to_park+0xbb0>)
   174fc:	f7f9 fdb4 	bl	11068 <am_util_stdio_printf>
   17500:	4622      	mov	r2, r4
   17502:	4821      	ldr	r0, [pc, #132]	@ (17588 <module_sps_move_to_park+0xbb0>)
   17504:	462b      	mov	r3, r5
   17506:	f006 fd37 	bl	1df78 <datalogger_log_debug>
                        park_piston_length = length_update_last_adjusted;
   1750a:	4b1d      	ldr	r3, [pc, #116]	@ (17580 <module_sps_move_to_park+0xba8>)
                            SENS_task_delete(xDepth);
   1750c:	980e      	ldr	r0, [sp, #56]	@ 0x38
                        park_piston_length = length_update_last_adjusted;
   1750e:	ed83 aa00 	vstr	s20, [r3]
                            SENS_task_delete(xDepth);
   17512:	f7fe f92d 	bl	15770 <SENS_task_delete>
                            SENS_sensor_depth_off();
   17516:	f7fe f8bf 	bl	15698 <SENS_sensor_depth_off>
                        spsEvent = MODE_DONE;
   1751a:	2304      	movs	r3, #4
                PIS_Get_Length(&Length);
   1751c:	9808      	ldr	r0, [sp, #32]
                        spsEvent = MODE_DONE;
   1751e:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                PIS_Get_Length(&Length);
   17522:	f7fc fd7b 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1752a:	f7f7 ff5b 	bl	f3e4 <vTaskDelay>
                        run = false;
   1752e:	2300      	movs	r3, #0
   17530:	9309      	str	r3, [sp, #36]	@ 0x24
                        to_park_state_time = 0;
   17532:	469a      	mov	sl, r3
   17534:	e75e      	b.n	173f4 <module_sps_move_to_park+0xa1c>
                    ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_park, LCP presumably hitting the bottom >>\n\n");
   17536:	4815      	ldr	r0, [pc, #84]	@ (1758c <module_sps_move_to_park+0xbb4>)
   17538:	f7f9 fd96 	bl	11068 <am_util_stdio_printf>
   1753c:	4813      	ldr	r0, [pc, #76]	@ (1758c <module_sps_move_to_park+0xbb4>)
   1753e:	f006 fd1b 	bl	1df78 <datalogger_log_debug>
                    park_piston_length = length_update_last_adjusted;
   17542:	4b0f      	ldr	r3, [pc, #60]	@ (17580 <module_sps_move_to_park+0xba8>)
                        SENS_task_delete(xDepth);
   17544:	980e      	ldr	r0, [sp, #56]	@ 0x38
                    park_piston_length = length_update_last_adjusted;
   17546:	ed83 aa00 	vstr	s20, [r3]
                        SENS_task_delete(xDepth);
   1754a:	f7fe f911 	bl	15770 <SENS_task_delete>
                        SENS_sensor_depth_off();
   1754e:	f7fe f8a3 	bl	15698 <SENS_sensor_depth_off>
                    spsEvent = MODE_DONE;
   17552:	2304      	movs	r3, #4
   17554:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                    break;
   17558:	f7ff bbb8 	b.w	16ccc <module_sps_move_to_park+0x2f4>
        vTaskDelay(period);
   1755c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17560:	f7f7 ff40 	bl	f3e4 <vTaskDelay>
    while (run)
   17564:	f7ff bbb2 	b.w	16ccc <module_sps_move_to_park+0x2f4>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17568:	f1b8 0f00 	cmp.w	r8, #0
   1756c:	f43f acb5 	beq.w	16eda <module_sps_move_to_park+0x502>
   17570:	4645      	mov	r5, r8
   17572:	f7ff bba4 	b.w	16cbe <module_sps_move_to_park+0x2e6>
   17576:	bf00      	nop
   17578:	00000000 	.word	0x00000000
   1757c:	40ed4c00 	.word	0x40ed4c00
   17580:	1000b9cc 	.word	0x1000b9cc
   17584:	0002cbe8 	.word	0x0002cbe8
   17588:	0002cb94 	.word	0x0002cb94
   1758c:	0002cb00 	.word	0x0002cb00

00017590 <module_sps_move_to_profile>:
{
   17590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (to_prof_piston_length == 0.0)
   17594:	4bc2      	ldr	r3, [pc, #776]	@ (178a0 <module_sps_move_to_profile+0x310>)
{
   17596:	ed2d 8b0a 	vpush	{d8-d12}
    if (to_prof_piston_length == 0.0)
   1759a:	edd3 7a00 	vldr	s15, [r3]
    float Length = 0.0;
   1759e:	ed9f 8ac1 	vldr	s16, [pc, #772]	@ 178a4 <module_sps_move_to_profile+0x314>
    if (to_prof_piston_length == 0.0)
   175a2:	eef4 7a48 	vcmp.f32	s15, s16
{
   175a6:	b091      	sub	sp, #68	@ 0x44
    if (to_prof_piston_length == 0.0)
   175a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float Length = 0.0;
   175ac:	ed8d 8a0a 	vstr	s16, [sp, #40]	@ 0x28
    if (to_prof_piston_length == 0.0)
   175b0:	f000 83e3 	beq.w	17d7a <module_sps_move_to_profile+0x7ea>
        if (to_prof_piston_length > park_piston_length)
   175b4:	4cbc      	ldr	r4, [pc, #752]	@ (178a8 <module_sps_move_to_profile+0x318>)
   175b6:	4bba      	ldr	r3, [pc, #744]	@ (178a0 <module_sps_move_to_profile+0x310>)
   175b8:	ed93 7a00 	vldr	s14, [r3]
   175bc:	edd4 7a00 	vldr	s15, [r4]
   175c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   175c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   175c8:	f300 8334 	bgt.w	17c34 <module_sps_move_to_profile+0x6a4>
        length_update = to_prof_piston_length;
   175cc:	4cb4      	ldr	r4, [pc, #720]	@ (178a0 <module_sps_move_to_profile+0x310>)
   175ce:	edd4 aa00 	vldr	s21, [r4]
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, Setting -> adjusted to_prof_piston_length=%.4fin >>\n", to_prof_piston_length);
   175d2:	6820      	ldr	r0, [r4, #0]
   175d4:	f7f4 fef8 	bl	c3c8 <__aeabi_f2d>
   175d8:	4602      	mov	r2, r0
   175da:	460b      	mov	r3, r1
   175dc:	48b3      	ldr	r0, [pc, #716]	@ (178ac <module_sps_move_to_profile+0x31c>)
   175de:	f7f9 fd43 	bl	11068 <am_util_stdio_printf>
   175e2:	6820      	ldr	r0, [r4, #0]
   175e4:	f7f4 fef0 	bl	c3c8 <__aeabi_f2d>
   175e8:	4602      	mov	r2, r0
   175ea:	460b      	mov	r3, r1
   175ec:	48af      	ldr	r0, [pc, #700]	@ (178ac <module_sps_move_to_profile+0x31c>)
   175ee:	f006 fcc3 	bl	1df78 <datalogger_log_debug>
    Volume = CTRL_calculate_volume_from_length(length_update);
   175f2:	eeb0 0a6a 	vmov.f32	s0, s21
   175f6:	f7fc fedf 	bl	143b8 <CTRL_calculate_volume_from_length>
   175fa:	ee10 4a10 	vmov	r4, s0
    Density = CTRL_calculate_lcp_density(Volume);
   175fe:	f7fc fdf3 	bl	141e8 <CTRL_calculate_lcp_density>
   17602:	ee10 0a10 	vmov	r0, s0
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   17606:	f7f4 fedf 	bl	c3c8 <__aeabi_f2d>
   1760a:	4606      	mov	r6, r0
   1760c:	4620      	mov	r0, r4
   1760e:	460f      	mov	r7, r1
   17610:	f7f4 feda 	bl	c3c8 <__aeabi_f2d>
   17614:	4680      	mov	r8, r0
   17616:	ee1a 0a90 	vmov	r0, s21
   1761a:	4689      	mov	r9, r1
   1761c:	f7f4 fed4 	bl	c3c8 <__aeabi_f2d>
   17620:	460d      	mov	r5, r1
   17622:	4604      	mov	r4, r0
   17624:	e9cd 8900 	strd	r8, r9, [sp]
   17628:	4632      	mov	r2, r6
   1762a:	463b      	mov	r3, r7
   1762c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   17630:	489f      	ldr	r0, [pc, #636]	@ (178b0 <module_sps_move_to_profile+0x320>)
   17632:	f7f9 fd19 	bl	11068 <am_util_stdio_printf>
   17636:	4632      	mov	r2, r6
   17638:	463b      	mov	r3, r7
   1763a:	e9cd 8900 	strd	r8, r9, [sp]
   1763e:	489c      	ldr	r0, [pc, #624]	@ (178b0 <module_sps_move_to_profile+0x320>)
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->active\n");
   17640:	4f9c      	ldr	r7, [pc, #624]	@ (178b4 <module_sps_move_to_profile+0x324>)
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston time-out, task->finished\n");
   17642:	f8df 9288 	ldr.w	r9, [pc, #648]	@ 178cc <module_sps_move_to_profile+0x33c>
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   17646:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1764a:	f006 fc95 	bl	1df78 <datalogger_log_debug>
    TaskHandle_t xPiston = NULL;
   1764e:	2600      	movs	r6, #0
    PIS_set_piston_rate(1);
   17650:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   17652:	960b      	str	r6, [sp, #44]	@ 0x2c
    PIS_set_piston_rate(1);
   17654:	f7fc fcf0 	bl	14038 <PIS_set_piston_rate>
    PIS_set_length(length_update);
   17658:	eeb0 0a6a 	vmov.f32	s0, s21
   1765c:	f7fc fd36 	bl	140cc <PIS_set_length>
    PIS_task_move_length(&xPiston);
   17660:	a80b      	add	r0, sp, #44	@ 0x2c
   17662:	f7fc fbe3 	bl	13e2c <PIS_task_move_length>
    vTaskDelay(piston_period);
   17666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1766a:	f7f7 febb 	bl	f3e4 <vTaskDelay>
            if (piston_timer >= 60000)
   1766e:	f64e 285f 	movw	r8, #59999	@ 0xea5f
   17672:	e008      	b.n	17686 <module_sps_move_to_profile+0xf6>
        else if (eStatus==eSuspended)
   17674:	2803      	cmp	r0, #3
   17676:	f000 82f1 	beq.w	17c5c <module_sps_move_to_profile+0x6cc>
        else if (eStatus==eDeleted)
   1767a:	2804      	cmp	r0, #4
   1767c:	d023      	beq.n	176c6 <module_sps_move_to_profile+0x136>
        vTaskDelay(piston_period);
   1767e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17682:	f7f7 feaf 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   17686:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17688:	f7f7 fb10 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) || (eStatus==eBlocked) || (eStatus==eReady) )
   1768c:	2802      	cmp	r0, #2
   1768e:	d8f1      	bhi.n	17674 <module_sps_move_to_profile+0xe4>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->active\n");
   17690:	4638      	mov	r0, r7
   17692:	f7f9 fce9 	bl	11068 <am_util_stdio_printf>
            piston_timer += piston_period;
   17696:	f506 767a 	add.w	r6, r6, #1000	@ 0x3e8
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->active\n");
   1769a:	4638      	mov	r0, r7
   1769c:	f006 fc6c 	bl	1df78 <datalogger_log_debug>
            if (piston_timer >= 60000)
   176a0:	4546      	cmp	r6, r8
   176a2:	d9ec      	bls.n	1767e <module_sps_move_to_profile+0xee>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston time-out, task->finished\n");
   176a4:	4648      	mov	r0, r9
   176a6:	f7f9 fcdf 	bl	11068 <am_util_stdio_printf>
   176aa:	4648      	mov	r0, r9
   176ac:	f006 fc64 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   176b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   176b2:	f7fc fc5b 	bl	13f6c <PIS_task_delete>
                vTaskDelay(piston_period);
   176b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   176ba:	f7f7 fe93 	bl	f3e4 <vTaskDelay>
                PIS_Reset();
   176be:	f7fc fd4b 	bl	14158 <PIS_Reset>
                piston_timer = 0;
   176c2:	2600      	movs	r6, #0
   176c4:	e7db      	b.n	1767e <module_sps_move_to_profile+0xee>
            PIS_Get_Length(&Length);
   176c6:	a80a      	add	r0, sp, #40	@ 0x28
   176c8:	f7fc fca8 	bl	1401c <PIS_Get_Length>
            Volume = CTRL_calculate_volume_from_length(Length);
   176cc:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
    float Depth = 0, Rate = 0;
   176d0:	ed9f 8a74 	vldr	s16, [pc, #464]	@ 178a4 <module_sps_move_to_profile+0x314>
            if (averaged_rate >= SYSTEM_FALL_RATE_MIN)
   176d4:	eddf 8a78 	vldr	s17, [pc, #480]	@ 178b8 <module_sps_move_to_profile+0x328>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   176d8:	f8df b1f4 	ldr.w	fp, [pc, #500]	@ 178d0 <module_sps_move_to_profile+0x340>
            Volume = CTRL_calculate_volume_from_length(Length);
   176dc:	f7fc fe6c 	bl	143b8 <CTRL_calculate_volume_from_length>
   176e0:	ee10 7a10 	vmov	r7, s0
            Density = CTRL_calculate_lcp_density(Volume);
   176e4:	f7fc fd80 	bl	141e8 <CTRL_calculate_lcp_density>
   176e8:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   176ec:	f7f4 fe6c 	bl	c3c8 <__aeabi_f2d>
   176f0:	4602      	mov	r2, r0
   176f2:	4638      	mov	r0, r7
   176f4:	4616      	mov	r6, r2
   176f6:	460f      	mov	r7, r1
   176f8:	f7f4 fe66 	bl	c3c8 <__aeabi_f2d>
   176fc:	4680      	mov	r8, r0
   176fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
   17700:	4689      	mov	r9, r1
   17702:	f7f4 fe61 	bl	c3c8 <__aeabi_f2d>
   17706:	4632      	mov	r2, r6
   17708:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1770c:	e9cd 8900 	strd	r8, r9, [sp]
   17710:	463b      	mov	r3, r7
   17712:	486a      	ldr	r0, [pc, #424]	@ (178bc <module_sps_move_to_profile+0x32c>)
   17714:	f7f9 fca8 	bl	11068 <am_util_stdio_printf>
   17718:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1771a:	f7f4 fe55 	bl	c3c8 <__aeabi_f2d>
   1771e:	4632      	mov	r2, r6
   17720:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17724:	463b      	mov	r3, r7
   17726:	e9cd 8900 	strd	r8, r9, [sp]
   1772a:	4864      	ldr	r0, [pc, #400]	@ (178bc <module_sps_move_to_profile+0x32c>)
   1772c:	f006 fc24 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->finished\n");
   17730:	4863      	ldr	r0, [pc, #396]	@ (178c0 <module_sps_move_to_profile+0x330>)
   17732:	f7f9 fc99 	bl	11068 <am_util_stdio_printf>
   17736:	4862      	ldr	r0, [pc, #392]	@ (178c0 <module_sps_move_to_profile+0x330>)
   17738:	f006 fc1e 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(piston_period);
   1773c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17740:	f7f7 fe50 	bl	f3e4 <vTaskDelay>
    TaskHandle_t xDepth = NULL;
   17744:	2600      	movs	r6, #0
    SENS_set_depth_rate(s_rate);
   17746:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
   1774a:	f7fe fa27 	bl	15b9c <SENS_set_depth_rate>
    TaskHandle_t xDepth = NULL;
   1774e:	960c      	str	r6, [sp, #48]	@ 0x30
        SENS_sensor_depth_on();
   17750:	f7fd ffa4 	bl	1569c <SENS_sensor_depth_on>
        vTaskDelay(xDelay10ms);
   17754:	200a      	movs	r0, #10
   17756:	f7f7 fe45 	bl	f3e4 <vTaskDelay>
        SENS_task_sample_depth_continuous(&xDepth);
   1775a:	a80c      	add	r0, sp, #48	@ 0x30
   1775c:	f7fe f9ca 	bl	15af4 <SENS_task_sample_depth_continuous>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   17760:	ed9f 9b4d 	vldr	d9, [pc, #308]	@ 17898 <module_sps_move_to_profile+0x308>
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   17764:	4622      	mov	r2, r4
   17766:	462b      	mov	r3, r5
   17768:	4856      	ldr	r0, [pc, #344]	@ (178c4 <module_sps_move_to_profile+0x334>)
    float Depth = 0, Rate = 0;
   1776a:	ed8d 8a0d 	vstr	s16, [sp, #52]	@ 0x34
   1776e:	ed8d 8a0e 	vstr	s16, [sp, #56]	@ 0x38
    float Pressure = 0;
   17772:	ed8d 8a0f 	vstr	s16, [sp, #60]	@ 0x3c
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   17776:	f7f9 fc77 	bl	11068 <am_util_stdio_printf>
   1777a:	4622      	mov	r2, r4
   1777c:	462b      	mov	r3, r5
   1777e:	4851      	ldr	r0, [pc, #324]	@ (178c4 <module_sps_move_to_profile+0x334>)
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Pressure = %0.4f bar\n", Pressure);
   17780:	4d51      	ldr	r5, [pc, #324]	@ (178c8 <module_sps_move_to_profile+0x338>)
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   17782:	f006 fbf9 	bl	1df78 <datalogger_log_debug>
    float piston_on_bottom_length = length_update;
   17786:	eeb0 ba6a 	vmov.f32	s22, s21
    uint32_t to_profile_state_time = 0;
   1778a:	9607      	str	r6, [sp, #28]
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   1778c:	eeb0 aa6a 	vmov.f32	s20, s21
    uint8_t rate_count = 0;
   17790:	4634      	mov	r4, r6
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, << Setting Length %.4fin to piston_on_bottom_length variable >>\n\n", length_update);
   17792:	46b0      	mov	r8, r6
   17794:	9604      	str	r6, [sp, #16]
    bool crush_depth = false;
   17796:	46b1      	mov	r9, r6
            SENS_get_depth(&Depth, &Pressure, &Rate);
   17798:	aa0e      	add	r2, sp, #56	@ 0x38
   1779a:	a90f      	add	r1, sp, #60	@ 0x3c
   1779c:	a80d      	add	r0, sp, #52	@ 0x34
   1779e:	f7fd ff87 	bl	156b0 <SENS_get_depth>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Pressure = %0.4f bar\n", Pressure);
   177a2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   177a4:	f7f4 fe10 	bl	c3c8 <__aeabi_f2d>
   177a8:	4602      	mov	r2, r0
   177aa:	460b      	mov	r3, r1
   177ac:	4628      	mov	r0, r5
   177ae:	f7f9 fc5b 	bl	11068 <am_util_stdio_printf>
   177b2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   177b4:	f7f4 fe08 	bl	c3c8 <__aeabi_f2d>
   177b8:	4602      	mov	r2, r0
   177ba:	460b      	mov	r3, r1
   177bc:	4628      	mov	r0, r5
   177be:	f006 fbdb 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   177c2:	980d      	ldr	r0, [sp, #52]	@ 0x34
   177c4:	f7f4 fe00 	bl	c3c8 <__aeabi_f2d>
   177c8:	4606      	mov	r6, r0
   177ca:	980e      	ldr	r0, [sp, #56]	@ 0x38
   177cc:	460f      	mov	r7, r1
   177ce:	ed8d 9b02 	vstr	d9, [sp, #8]
   177d2:	f7f4 fdf9 	bl	c3c8 <__aeabi_f2d>
   177d6:	4632      	mov	r2, r6
   177d8:	463b      	mov	r3, r7
   177da:	e9cd 0100 	strd	r0, r1, [sp]
   177de:	4658      	mov	r0, fp
   177e0:	f7f9 fc42 	bl	11068 <am_util_stdio_printf>
   177e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
   177e6:	f7f4 fdef 	bl	c3c8 <__aeabi_f2d>
   177ea:	4606      	mov	r6, r0
   177ec:	980e      	ldr	r0, [sp, #56]	@ 0x38
   177ee:	460f      	mov	r7, r1
   177f0:	ed8d 9b02 	vstr	d9, [sp, #8]
   177f4:	f7f4 fde8 	bl	c3c8 <__aeabi_f2d>
	    rate_count++;
   177f8:	3401      	adds	r4, #1
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Depth    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   177fa:	e9cd 0100 	strd	r0, r1, [sp]
   177fe:	4632      	mov	r2, r6
   17800:	463b      	mov	r3, r7
   17802:	4658      	mov	r0, fp
   17804:	f006 fbb8 	bl	1df78 <datalogger_log_debug>
	    rate_count++;
   17808:	b2e4      	uxtb	r4, r4
        rate_avg += Rate;
   1780a:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
	    if (rate_count >= 3)
   1780e:	2c03      	cmp	r4, #3
        rate_avg += Rate;
   17810:	ee38 8a27 	vadd.f32	s16, s16, s15
	    if (rate_count >= 3)
   17814:	d123      	bne.n	1785e <module_sps_move_to_profile+0x2ce>
            float averaged_rate = (float) (rate_avg / (float)(rate_count));
   17816:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
   1781a:	eec8 7a07 	vdiv.f32	s15, s16, s14
            if (averaged_rate >= SYSTEM_FALL_RATE_MIN)
   1781e:	eef4 7ae8 	vcmpe.f32	s15, s17
   17822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17826:	da15      	bge.n	17854 <module_sps_move_to_profile+0x2c4>
            else if (averaged_rate < SYSTEM_FALL_RATE_MIN && !piston_move && !crush_depth)
   17828:	f140 81b0 	bpl.w	17b8c <module_sps_move_to_profile+0x5fc>
   1782c:	f1b8 0f00 	cmp.w	r8, #0
   17830:	f040 814b 	bne.w	17aca <module_sps_move_to_profile+0x53a>
   17834:	f1b9 0f00 	cmp.w	r9, #0
   17838:	f000 822b 	beq.w	17c92 <module_sps_move_to_profile+0x702>
            rate_avg = 0.0;
   1783c:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 178a4 <module_sps_move_to_profile+0x314>
   17840:	4644      	mov	r4, r8
        vTaskDelay(period);
   17842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17846:	f7f7 fdcd 	bl	f3e4 <vTaskDelay>
   1784a:	f04f 0800 	mov.w	r8, #0
   1784e:	f04f 0901 	mov.w	r9, #1
   17852:	e7a1      	b.n	17798 <module_sps_move_to_profile+0x208>
            rate_avg = 0.0;
   17854:	ed9f 8a13 	vldr	s16, [pc, #76]	@ 178a4 <module_sps_move_to_profile+0x314>
                piston_on_bottom_length = length_update;
   17858:	eeb0 ba4a 	vmov.f32	s22, s20
            rate_count = 0;
   1785c:	2400      	movs	r4, #0
        if (Depth >= PROFILE_DEPTH-PROFILE_DEPTH_ERR && !crush_depth)
   1785e:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17862:	eef3 7a07 	vmov.f32	s15, #55	@ 0x41b80000  23.0
   17866:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1786e:	db31      	blt.n	178d4 <module_sps_move_to_profile+0x344>
   17870:	f1b9 0f00 	cmp.w	r9, #0
   17874:	f000 813a 	beq.w	17aec <module_sps_move_to_profile+0x55c>
        if (piston_move)
   17878:	f1b8 0f00 	cmp.w	r8, #0
   1787c:	d0e1      	beq.n	17842 <module_sps_move_to_profile+0x2b2>
                eStatus = eTaskGetState( xPiston );
   1787e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17880:	f7f7 fa14 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked)  )
   17884:	2804      	cmp	r0, #4
   17886:	f200 82b2 	bhi.w	17dee <module_sps_move_to_profile+0x85e>
   1788a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1788e:	019b      	.short	0x019b
   17890:	019b0104 	.word	0x019b0104
   17894:	00a100ea 	.word	0x00a100ea
   17898:	00000000 	.word	0x00000000
   1789c:	3ff00000 	.word	0x3ff00000
   178a0:	1000b9c8 	.word	0x1000b9c8
   178a4:	00000000 	.word	0x00000000
   178a8:	1000b9cc 	.word	0x1000b9cc
   178ac:	0002cf1c 	.word	0x0002cf1c
   178b0:	0002cf70 	.word	0x0002cf70
   178b4:	0002cfcc 	.word	0x0002cfcc
   178b8:	3ba3d70a 	.word	0x3ba3d70a
   178bc:	0002d068 	.word	0x0002d068
   178c0:	0002d0b8 	.word	0x0002d0b8
   178c4:	0002d0e8 	.word	0x0002d0e8
   178c8:	0002d144 	.word	0x0002d144
   178cc:	0002cffc 	.word	0x0002cffc
   178d0:	0002d174 	.word	0x0002d174
   178d4:	f04f 0a01 	mov.w	sl, #1
        if (piston_move)
   178d8:	f1b8 0f00 	cmp.w	r8, #0
   178dc:	d12d      	bne.n	1793a <module_sps_move_to_profile+0x3aa>
        vTaskDelay(period);
   178de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   178e2:	f7f7 fd7f 	bl	f3e4 <vTaskDelay>
    while (run)
   178e6:	f1ba 0f00 	cmp.w	sl, #0
   178ea:	f47f af55 	bne.w	17798 <module_sps_move_to_profile+0x208>
    uint32_t size = xPortGetFreeHeapSize();
   178ee:	f7f5 ffb5 	bl	d85c <xPortGetFreeHeapSize>
   178f2:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   178f4:	4621      	mov	r1, r4
   178f6:	48c0      	ldr	r0, [pc, #768]	@ (17bf8 <module_sps_move_to_profile+0x668>)
   178f8:	f7f9 fbb6 	bl	11068 <am_util_stdio_printf>
   178fc:	4621      	mov	r1, r4
   178fe:	48be      	ldr	r0, [pc, #760]	@ (17bf8 <module_sps_move_to_profile+0x668>)
   17900:	f006 fb3a 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Task->finished\n\n");
   17904:	48bd      	ldr	r0, [pc, #756]	@ (17bfc <module_sps_move_to_profile+0x66c>)
   17906:	f7f9 fbaf 	bl	11068 <am_util_stdio_printf>
   1790a:	48bc      	ldr	r0, [pc, #752]	@ (17bfc <module_sps_move_to_profile+0x66c>)
   1790c:	f006 fb34 	bl	1df78 <datalogger_log_debug>
    SendEvent(spsEventQueue, &spsEvent);
   17910:	4abb      	ldr	r2, [pc, #748]	@ (17c00 <module_sps_move_to_profile+0x670>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   17912:	2300      	movs	r3, #0
   17914:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
   17918:	6810      	ldr	r0, [r2, #0]
   1791a:	f04f 32ff 	mov.w	r2, #4294967295
   1791e:	f7f6 f9a1 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   17922:	2000      	movs	r0, #0
   17924:	f7f7 f94a 	bl	ebbc <vTaskDelete>
}
   17928:	b011      	add	sp, #68	@ 0x44
   1792a:	ecbd 8b0a 	vpop	{d8-d12}
   1792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            rate_avg = 0.0;
   17932:	ed9f 8ab4 	vldr	s16, [pc, #720]	@ 17c04 <module_sps_move_to_profile+0x674>
        if (Depth >= PROFILE_DEPTH-PROFILE_DEPTH_ERR && !crush_depth)
   17936:	46c2      	mov	sl, r8
            rate_count = 0;
   17938:	2400      	movs	r4, #0
                eStatus = eTaskGetState( xPiston );
   1793a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1793c:	f7f7 f9b6 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked)  )
   17940:	2804      	cmp	r0, #4
   17942:	f200 8256 	bhi.w	17df2 <module_sps_move_to_profile+0x862>
   17946:	e8df f000 	tbb	[pc, r0]
   1794a:	a803      	.short	0xa803
   1794c:	8e03      	.short	0x8e03
   1794e:	45          	.byte	0x45
   1794f:	00          	.byte	0x00
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_porfile, Piston task->active\n");
   17950:	48ad      	ldr	r0, [pc, #692]	@ (17c08 <module_sps_move_to_profile+0x678>)
   17952:	f7f9 fb89 	bl	11068 <am_util_stdio_printf>
   17956:	48ac      	ldr	r0, [pc, #688]	@ (17c08 <module_sps_move_to_profile+0x678>)
   17958:	f006 fb0e 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   1795c:	9b04      	ldr	r3, [sp, #16]
   1795e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   17962:	9304      	str	r3, [sp, #16]
                    if (crush_depth)
   17964:	f1b9 0f00 	cmp.w	r9, #0
   17968:	f040 8138 	bne.w	17bdc <module_sps_move_to_profile+0x64c>
   1796c:	461a      	mov	r2, r3
                        if (piston_timer >= 30000)
   1796e:	f247 532f 	movw	r3, #29999	@ 0x752f
   17972:	429a      	cmp	r2, r3
   17974:	f200 824a 	bhi.w	17e0c <module_sps_move_to_profile+0x87c>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17978:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   1797c:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17980:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17988:	f2c0 823d 	blt.w	17e06 <module_sps_move_to_profile+0x876>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, deliberately stopping the Piston\n");
   1798c:	489f      	ldr	r0, [pc, #636]	@ (17c0c <module_sps_move_to_profile+0x67c>)
   1798e:	f7f9 fb6b 	bl	11068 <am_util_stdio_printf>
   17992:	489e      	ldr	r0, [pc, #632]	@ (17c0c <module_sps_move_to_profile+0x67c>)
   17994:	f006 faf0 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   17998:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1799a:	f7fc fae7 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   1799e:	f7fc fbc7 	bl	14130 <PIS_stop>
            vTaskDelay(piston_period);
   179a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   179a6:	f7f7 fd1d 	bl	f3e4 <vTaskDelay>
            PIS_set_length(CRUSH_DEPTH_PISTON_POSITION);
   179aa:	eeb1 0a05 	vmov.f32	s0, #21	@ 0x40a80000  5.250
   179ae:	f7fc fb8d 	bl	140cc <PIS_set_length>
            PIS_task_move_length(&xPiston);
   179b2:	a80b      	add	r0, sp, #44	@ 0x2c
   179b4:	f7fc fa3a 	bl	13e2c <PIS_task_move_length>
            ARTEMIS_DEBUG_PRINTF("\n\nSPS :: move_to_profile, <<< CRUSH DEPTH activated >>>\n\n");
   179b8:	4895      	ldr	r0, [pc, #596]	@ (17c10 <module_sps_move_to_profile+0x680>)
   179ba:	f7f9 fb55 	bl	11068 <am_util_stdio_printf>
   179be:	4894      	ldr	r0, [pc, #592]	@ (17c10 <module_sps_move_to_profile+0x680>)
   179c0:	f006 fada 	bl	1df78 <datalogger_log_debug>
            piston_move = true;
   179c4:	f04f 0801 	mov.w	r8, #1
            piston_timer = 0;
   179c8:	2300      	movs	r3, #0
   179ca:	9304      	str	r3, [sp, #16]
            crush_depth = true;
   179cc:	46c1      	mov	r9, r8
   179ce:	e786      	b.n	178de <module_sps_move_to_profile+0x34e>
                eStatus = eTaskGetState( xPiston );
   179d0:	f04f 0a01 	mov.w	sl, #1
                    PIS_Get_Length(&Length);
   179d4:	a80a      	add	r0, sp, #40	@ 0x28
   179d6:	f7fc fb21 	bl	1401c <PIS_Get_Length>
                    Volume = CTRL_calculate_volume_from_length(Length);
   179da:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
   179de:	f7fc fceb 	bl	143b8 <CTRL_calculate_volume_from_length>
   179e2:	ee10 6a10 	vmov	r6, s0
                    Density = CTRL_calculate_lcp_density(Volume);
   179e6:	f7fc fbff 	bl	141e8 <CTRL_calculate_lcp_density>
   179ea:	ee10 0a10 	vmov	r0, s0
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_porfile, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   179ee:	f7f4 fceb 	bl	c3c8 <__aeabi_f2d>
   179f2:	4602      	mov	r2, r0
   179f4:	460b      	mov	r3, r1
   179f6:	4630      	mov	r0, r6
   179f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   179fc:	f7f4 fce4 	bl	c3c8 <__aeabi_f2d>
   17a00:	4606      	mov	r6, r0
   17a02:	980a      	ldr	r0, [sp, #40]	@ 0x28
   17a04:	460f      	mov	r7, r1
   17a06:	f7f4 fcdf 	bl	c3c8 <__aeabi_f2d>
   17a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17a12:	e9cd 6700 	strd	r6, r7, [sp]
   17a16:	487f      	ldr	r0, [pc, #508]	@ (17c14 <module_sps_move_to_profile+0x684>)
   17a18:	f7f9 fb26 	bl	11068 <am_util_stdio_printf>
   17a1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   17a1e:	f7f4 fcd3 	bl	c3c8 <__aeabi_f2d>
   17a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17a2a:	e9cd 6700 	strd	r6, r7, [sp]
   17a2e:	4879      	ldr	r0, [pc, #484]	@ (17c14 <module_sps_move_to_profile+0x684>)
   17a30:	f006 faa2 	bl	1df78 <datalogger_log_debug>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->finished\n");
   17a34:	4878      	ldr	r0, [pc, #480]	@ (17c18 <module_sps_move_to_profile+0x688>)
   17a36:	f7f9 fb17 	bl	11068 <am_util_stdio_printf>
   17a3a:	4877      	ldr	r0, [pc, #476]	@ (17c18 <module_sps_move_to_profile+0x688>)
   17a3c:	f006 fa9c 	bl	1df78 <datalogger_log_debug>
                    if (crush_depth)
   17a40:	f1b9 0f00 	cmp.w	r9, #0
   17a44:	f040 8114 	bne.w	17c70 <module_sps_move_to_profile+0x6e0>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17a48:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17a4c:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17a58:	daa3      	bge.n	179a2 <module_sps_move_to_profile+0x412>
                    piston_move = false;
   17a5a:	46c8      	mov	r8, r9
                    piston_timer = 0;
   17a5c:	f8cd 9010 	str.w	r9, [sp, #16]
   17a60:	e73d      	b.n	178de <module_sps_move_to_profile+0x34e>
                eStatus = eTaskGetState( xPiston );
   17a62:	f04f 0a01 	mov.w	sl, #1
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_porfile, Piston task->suspended\n");
   17a66:	486d      	ldr	r0, [pc, #436]	@ (17c1c <module_sps_move_to_profile+0x68c>)
   17a68:	f7f9 fafe 	bl	11068 <am_util_stdio_printf>
   17a6c:	486b      	ldr	r0, [pc, #428]	@ (17c1c <module_sps_move_to_profile+0x68c>)
   17a6e:	f006 fa83 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   17a72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17a74:	f7fc fa7a 	bl	13f6c <PIS_task_delete>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17a78:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17a7c:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17a88:	f280 8094 	bge.w	17bb4 <module_sps_move_to_profile+0x624>
                    piston_timer = 0;
   17a8c:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17a8e:	f04f 0801 	mov.w	r8, #1
                    piston_timer = 0;
   17a92:	9304      	str	r3, [sp, #16]
   17a94:	e723      	b.n	178de <module_sps_move_to_profile+0x34e>
                eStatus = eTaskGetState( xPiston );
   17a96:	f04f 0a01 	mov.w	sl, #1
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->ready\n");
   17a9a:	4861      	ldr	r0, [pc, #388]	@ (17c20 <module_sps_move_to_profile+0x690>)
   17a9c:	f7f9 fae4 	bl	11068 <am_util_stdio_printf>
   17aa0:	485f      	ldr	r0, [pc, #380]	@ (17c20 <module_sps_move_to_profile+0x690>)
   17aa2:	f006 fa69 	bl	1df78 <datalogger_log_debug>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17aa6:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17aaa:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17ab6:	db03      	blt.n	17ac0 <module_sps_move_to_profile+0x530>
   17ab8:	f1b9 0f00 	cmp.w	r9, #0
   17abc:	f43f af71 	beq.w	179a2 <module_sps_move_to_profile+0x412>
                    piston_move = false;
   17ac0:	f04f 0800 	mov.w	r8, #0
                    piston_timer = 0;
   17ac4:	f8cd 8010 	str.w	r8, [sp, #16]
   17ac8:	e709      	b.n	178de <module_sps_move_to_profile+0x34e>
        if (Depth >= PROFILE_DEPTH-PROFILE_DEPTH_ERR && !crush_depth)
   17aca:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17ace:	eef3 7a07 	vmov.f32	s15, #55	@ 0x41b80000  23.0
   17ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17ada:	f6ff af2a 	blt.w	17932 <module_sps_move_to_profile+0x3a2>
   17ade:	f1b9 0f00 	cmp.w	r9, #0
   17ae2:	f040 8084 	bne.w	17bee <module_sps_move_to_profile+0x65e>
   17ae6:	ed9f 8a47 	vldr	s16, [pc, #284]	@ 17c04 <module_sps_move_to_profile+0x674>
   17aea:	2400      	movs	r4, #0
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Pressure Reached = %0.4f bar\n", Pressure);
   17aec:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   17aee:	f7f4 fc6b 	bl	c3c8 <__aeabi_f2d>
   17af2:	4602      	mov	r2, r0
   17af4:	460b      	mov	r3, r1
   17af6:	484b      	ldr	r0, [pc, #300]	@ (17c24 <module_sps_move_to_profile+0x694>)
   17af8:	f7f9 fab6 	bl	11068 <am_util_stdio_printf>
   17afc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   17afe:	f7f4 fc63 	bl	c3c8 <__aeabi_f2d>
   17b02:	4602      	mov	r2, r0
   17b04:	460b      	mov	r3, r1
   17b06:	4847      	ldr	r0, [pc, #284]	@ (17c24 <module_sps_move_to_profile+0x694>)
   17b08:	f006 fa36 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Depth Reached    = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   17b0c:	980d      	ldr	r0, [sp, #52]	@ 0x34
   17b0e:	f7f4 fc5b 	bl	c3c8 <__aeabi_f2d>
   17b12:	4606      	mov	r6, r0
   17b14:	980e      	ldr	r0, [sp, #56]	@ 0x38
   17b16:	460f      	mov	r7, r1
   17b18:	ed8d 9b02 	vstr	d9, [sp, #8]
   17b1c:	f7f4 fc54 	bl	c3c8 <__aeabi_f2d>
   17b20:	4632      	mov	r2, r6
   17b22:	463b      	mov	r3, r7
   17b24:	e9cd 0100 	strd	r0, r1, [sp]
   17b28:	483f      	ldr	r0, [pc, #252]	@ (17c28 <module_sps_move_to_profile+0x698>)
   17b2a:	f7f9 fa9d 	bl	11068 <am_util_stdio_printf>
   17b2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
   17b30:	f7f4 fc4a 	bl	c3c8 <__aeabi_f2d>
   17b34:	4606      	mov	r6, r0
   17b36:	980e      	ldr	r0, [sp, #56]	@ 0x38
   17b38:	460f      	mov	r7, r1
   17b3a:	ed8d 9b02 	vstr	d9, [sp, #8]
   17b3e:	f7f4 fc43 	bl	c3c8 <__aeabi_f2d>
   17b42:	4632      	mov	r2, r6
   17b44:	e9cd 0100 	strd	r0, r1, [sp]
   17b48:	463b      	mov	r3, r7
   17b4a:	4837      	ldr	r0, [pc, #220]	@ (17c28 <module_sps_move_to_profile+0x698>)
   17b4c:	f006 fa14 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Reach Porfile Depth\n");
   17b50:	4836      	ldr	r0, [pc, #216]	@ (17c2c <module_sps_move_to_profile+0x69c>)
   17b52:	f7f9 fa89 	bl	11068 <am_util_stdio_printf>
   17b56:	4835      	ldr	r0, [pc, #212]	@ (17c2c <module_sps_move_to_profile+0x69c>)
   17b58:	f006 fa0e 	bl	1df78 <datalogger_log_debug>
            if (piston_move)
   17b5c:	f1b8 0f00 	cmp.w	r8, #0
   17b60:	d118      	bne.n	17b94 <module_sps_move_to_profile+0x604>
                SENS_task_delete(xDepth);
   17b62:	980c      	ldr	r0, [sp, #48]	@ 0x30
   17b64:	f7fd fe04 	bl	15770 <SENS_task_delete>
                SENS_sensor_depth_off();
   17b68:	f7fd fd96 	bl	15698 <SENS_sensor_depth_off>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17b6c:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17b70:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
            spsEvent = MODE_DONE;
   17b78:	2304      	movs	r3, #4
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            spsEvent = MODE_DONE;
   17b7e:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17b82:	f2c0 8264 	blt.w	1804e <module_sps_move_to_profile+0xabe>
            run = false;
   17b86:	f04f 0a00 	mov.w	sl, #0
   17b8a:	e70a      	b.n	179a2 <module_sps_move_to_profile+0x412>
            rate_avg = 0.0;
   17b8c:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 17c04 <module_sps_move_to_profile+0x674>
            rate_count = 0;
   17b90:	2400      	movs	r4, #0
   17b92:	e664      	b.n	1785e <module_sps_move_to_profile+0x2ce>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, deliberately stopping the Piston\n");
   17b94:	481d      	ldr	r0, [pc, #116]	@ (17c0c <module_sps_move_to_profile+0x67c>)
   17b96:	f7f9 fa67 	bl	11068 <am_util_stdio_printf>
   17b9a:	481c      	ldr	r0, [pc, #112]	@ (17c0c <module_sps_move_to_profile+0x67c>)
   17b9c:	f006 f9ec 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   17ba0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17ba2:	f7fc f9e3 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   17ba6:	f7fc fac3 	bl	14130 <PIS_stop>
                vTaskDelay(period);
   17baa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17bae:	f7f7 fc19 	bl	f3e4 <vTaskDelay>
   17bb2:	e7d6      	b.n	17b62 <module_sps_move_to_profile+0x5d2>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17bb4:	f1b9 0f00 	cmp.w	r9, #0
   17bb8:	f43f aee8 	beq.w	1798c <module_sps_move_to_profile+0x3fc>
                    piston_timer = 0;
   17bbc:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17bbe:	46c8      	mov	r8, r9
                    piston_timer = 0;
   17bc0:	9304      	str	r3, [sp, #16]
   17bc2:	e68c      	b.n	178de <module_sps_move_to_profile+0x34e>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_porfile, Piston task->active\n");
   17bc4:	4810      	ldr	r0, [pc, #64]	@ (17c08 <module_sps_move_to_profile+0x678>)
   17bc6:	f7f9 fa4f 	bl	11068 <am_util_stdio_printf>
   17bca:	480f      	ldr	r0, [pc, #60]	@ (17c08 <module_sps_move_to_profile+0x678>)
   17bcc:	f006 f9d4 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   17bd0:	9b04      	ldr	r3, [sp, #16]
   17bd2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   17bd6:	9304      	str	r3, [sp, #16]
   17bd8:	f04f 0a01 	mov.w	sl, #1
                        if (piston_timer >= 120000)
   17bdc:	4b14      	ldr	r3, [pc, #80]	@ (17c30 <module_sps_move_to_profile+0x6a0>)
   17bde:	9a04      	ldr	r2, [sp, #16]
   17be0:	429a      	cmp	r2, r3
   17be2:	f200 812d 	bhi.w	17e40 <module_sps_move_to_profile+0x8b0>
   17be6:	f04f 0801 	mov.w	r8, #1
   17bea:	46c1      	mov	r9, r8
   17bec:	e677      	b.n	178de <module_sps_move_to_profile+0x34e>
            rate_avg = 0.0;
   17bee:	ed9f 8a05 	vldr	s16, [pc, #20]	@ 17c04 <module_sps_move_to_profile+0x674>
            rate_count = 0;
   17bf2:	2400      	movs	r4, #0
   17bf4:	e643      	b.n	1787e <module_sps_move_to_profile+0x2ee>
   17bf6:	bf00      	nop
   17bf8:	0002d5c4 	.word	0x0002d5c4
   17bfc:	0002d600 	.word	0x0002d600
   17c00:	1000bc98 	.word	0x1000bc98
   17c04:	00000000 	.word	0x00000000
   17c08:	0002d464 	.word	0x0002d464
   17c0c:	0002d428 	.word	0x0002d428
   17c10:	0002d588 	.word	0x0002d588
   17c14:	0002d538 	.word	0x0002d538
   17c18:	0002d0b8 	.word	0x0002d0b8
   17c1c:	0002d508 	.word	0x0002d508
   17c20:	0002d4dc 	.word	0x0002d4dc
   17c24:	0002d374 	.word	0x0002d374
   17c28:	0002d3ac 	.word	0x0002d3ac
   17c2c:	0002d3f8 	.word	0x0002d3f8
   17c30:	0001d4bf 	.word	0x0001d4bf
            to_prof_piston_length = park_piston_length;
   17c34:	4ad0      	ldr	r2, [pc, #832]	@ (17f78 <module_sps_move_to_profile+0x9e8>)
   17c36:	6823      	ldr	r3, [r4, #0]
   17c38:	6013      	str	r3, [r2, #0]
            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, Setting -> park_piston_length (%.4fin) to to_prof_piston_length >>\n", park_piston_length);
   17c3a:	6820      	ldr	r0, [r4, #0]
   17c3c:	f7f4 fbc4 	bl	c3c8 <__aeabi_f2d>
   17c40:	4602      	mov	r2, r0
   17c42:	460b      	mov	r3, r1
   17c44:	48cd      	ldr	r0, [pc, #820]	@ (17f7c <module_sps_move_to_profile+0x9ec>)
   17c46:	f7f9 fa0f 	bl	11068 <am_util_stdio_printf>
   17c4a:	6820      	ldr	r0, [r4, #0]
   17c4c:	f7f4 fbbc 	bl	c3c8 <__aeabi_f2d>
   17c50:	4602      	mov	r2, r0
   17c52:	460b      	mov	r3, r1
   17c54:	48c9      	ldr	r0, [pc, #804]	@ (17f7c <module_sps_move_to_profile+0x9ec>)
   17c56:	f006 f98f 	bl	1df78 <datalogger_log_debug>
   17c5a:	e4b7      	b.n	175cc <module_sps_move_to_profile+0x3c>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston task->suspended\n");
   17c5c:	48c8      	ldr	r0, [pc, #800]	@ (17f80 <module_sps_move_to_profile+0x9f0>)
   17c5e:	f7f9 fa03 	bl	11068 <am_util_stdio_printf>
   17c62:	48c7      	ldr	r0, [pc, #796]	@ (17f80 <module_sps_move_to_profile+0x9f0>)
   17c64:	f006 f988 	bl	1df78 <datalogger_log_debug>
            PIS_task_delete(xPiston);
   17c68:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17c6a:	f7fc f97f 	bl	13f6c <PIS_task_delete>
            piston_timer = 0;
   17c6e:	e528      	b.n	176c2 <module_sps_move_to_profile+0x132>
                            SENS_task_delete(xDepth);
   17c70:	980c      	ldr	r0, [sp, #48]	@ 0x30
   17c72:	f7fd fd7d 	bl	15770 <SENS_task_delete>
                            SENS_sensor_depth_off();
   17c76:	f7fd fd0f 	bl	15698 <SENS_sensor_depth_off>
                        spsEvent = MODE_POPUP;
   17c7a:	2302      	movs	r3, #2
                        vTaskDelay(piston_period);
   17c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                        spsEvent = MODE_POPUP;
   17c80:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                        vTaskDelay(piston_period);
   17c84:	f7f7 fbae 	bl	f3e4 <vTaskDelay>
        vTaskDelay(period);
   17c88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17c8c:	f7f7 fbaa 	bl	f3e4 <vTaskDelay>
    while (run)
   17c90:	e62d      	b.n	178ee <module_sps_move_to_profile+0x35e>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Depth averaged_rate = %f, decrease %fin\n", averaged_rate, PARK_POSITION_INCREMENT);
   17c92:	ee17 0a90 	vmov	r0, s15
   17c96:	f7f4 fb97 	bl	c3c8 <__aeabi_f2d>
   17c9a:	ed9f cbb1 	vldr	d12, [pc, #708]	@ 17f60 <module_sps_move_to_profile+0x9d0>
   17c9e:	4606      	mov	r6, r0
   17ca0:	460f      	mov	r7, r1
   17ca2:	460b      	mov	r3, r1
   17ca4:	4632      	mov	r2, r6
   17ca6:	ed8d cb00 	vstr	d12, [sp]
   17caa:	48b6      	ldr	r0, [pc, #728]	@ (17f84 <module_sps_move_to_profile+0x9f4>)
   17cac:	f7f9 f9dc 	bl	11068 <am_util_stdio_printf>
   17cb0:	ed8d cb00 	vstr	d12, [sp]
   17cb4:	48b3      	ldr	r0, [pc, #716]	@ (17f84 <module_sps_move_to_profile+0x9f4>)
   17cb6:	4632      	mov	r2, r6
   17cb8:	463b      	mov	r3, r7
   17cba:	f006 f95d 	bl	1df78 <datalogger_log_debug>
                length_update -= PARK_POSITION_INCREMENT;
   17cbe:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 17f88 <module_sps_move_to_profile+0x9f8>
   17cc2:	ee3a aa47 	vsub.f32	s20, s20, s14
                if ( (piston_on_bottom_length-length_update) <= PISTON_MOVEMENT_ON_BOTTOM)
   17cc6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   17cca:	ee3b 7a4a 	vsub.f32	s14, s22, s20
   17cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17cd6:	f240 811c 	bls.w	17f12 <module_sps_move_to_profile+0x982>
                else if ( (piston_on_bottom_length-length_update) > PISTON_MOVEMENT_ON_BOTTOM)
   17cda:	f300 819a 	bgt.w	18012 <module_sps_move_to_profile+0xa82>
                if (length_update <= PISTON_POSITION_MINIMUM)
   17cde:	eddf 7aab 	vldr	s15, [pc, #684]	@ 17f8c <module_sps_move_to_profile+0x9fc>
   17ce2:	eeb4 aae7 	vcmpe.f32	s20, s15
   17ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17cea:	f200 80ba 	bhi.w	17e62 <module_sps_move_to_profile+0x8d2>
                    if (Depth < PARK_DEPTH-PARK_DEPTH_ERR)
   17cee:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17cf2:	eef3 7a02 	vmov.f32	s15, #50	@ 0x41900000  18.0
   17cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17cfe:	f140 80da 	bpl.w	17eb6 <module_sps_move_to_profile+0x926>
                    ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_profile, critical piston minimum position time = %.2f seconds >>\n", (float)to_profile_state_time/xDelay1000ms);
   17d02:	a399      	add	r3, pc, #612	@ (adr r3, 17f68 <module_sps_move_to_profile+0x9d8>)
   17d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d08:	48a1      	ldr	r0, [pc, #644]	@ (17f90 <module_sps_move_to_profile+0xa00>)
   17d0a:	f7f9 f9ad 	bl	11068 <am_util_stdio_printf>
   17d0e:	a396      	add	r3, pc, #600	@ (adr r3, 17f68 <module_sps_move_to_profile+0x9d8>)
   17d10:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d14:	489e      	ldr	r0, [pc, #632]	@ (17f90 <module_sps_move_to_profile+0xa00>)
   17d16:	f006 f92f 	bl	1df78 <datalogger_log_debug>
   17d1a:	a795      	add	r7, pc, #596	@ (adr r7, 17f70 <module_sps_move_to_profile+0x9e0>)
   17d1c:	e9d7 6700 	ldrd	r6, r7, [r7]
                        ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_profile, critical piston minimum position time out = %.2f mins >>\n", (float)to_profile_state_time/(60.0*xDelay1000ms));
   17d20:	4632      	mov	r2, r6
   17d22:	463b      	mov	r3, r7
   17d24:	489b      	ldr	r0, [pc, #620]	@ (17f94 <module_sps_move_to_profile+0xa04>)
   17d26:	f7f9 f99f 	bl	11068 <am_util_stdio_printf>
   17d2a:	4632      	mov	r2, r6
   17d2c:	4899      	ldr	r0, [pc, #612]	@ (17f94 <module_sps_move_to_profile+0xa04>)
   17d2e:	463b      	mov	r3, r7
   17d30:	f006 f922 	bl	1df78 <datalogger_log_debug>
                        to_prof_piston_length = length_update_last_adjusted;
   17d34:	4b90      	ldr	r3, [pc, #576]	@ (17f78 <module_sps_move_to_profile+0x9e8>)
                            SENS_task_delete(xDepth);
   17d36:	980c      	ldr	r0, [sp, #48]	@ 0x30
                        to_prof_piston_length = length_update_last_adjusted;
   17d38:	edc3 aa00 	vstr	s21, [r3]
                            SENS_task_delete(xDepth);
   17d3c:	f7fd fd18 	bl	15770 <SENS_task_delete>
                            SENS_sensor_depth_off();
   17d40:	f7fd fcaa 	bl	15698 <SENS_sensor_depth_off>
                        spsEvent = MODE_DONE;
   17d44:	2304      	movs	r3, #4
                PIS_Get_Length(&Length);
   17d46:	a80a      	add	r0, sp, #40	@ 0x28
                        spsEvent = MODE_DONE;
   17d48:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                        run = false;
   17d4c:	f04f 0a00 	mov.w	sl, #0
                PIS_Get_Length(&Length);
   17d50:	f7fc f964 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17d54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17d58:	f7f7 fb44 	bl	f3e4 <vTaskDelay>
                        to_profile_state_time = 0;
   17d5c:	f8cd a01c 	str.w	sl, [sp, #28]
                if (length_update <= PISTON_POSITION_MINIMUM && Length <= PISTON_POSITION_MINIMUM)
   17d60:	ed9f aa8a 	vldr	s20, [pc, #552]	@ 17f8c <module_sps_move_to_profile+0x9fc>
   17d64:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
   17d68:	eef4 7aca 	vcmpe.f32	s15, s20
   17d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17d70:	f200 8087 	bhi.w	17e82 <module_sps_move_to_profile+0x8f2>
   17d74:	f04f 0800 	mov.w	r8, #0
   17d78:	e08f      	b.n	17e9a <module_sps_move_to_profile+0x90a>
        CTRL_set_lcp_density(TO_PROFILE_DENSITY);
   17d7a:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 17f98 <module_sps_move_to_profile+0xa08>
        to_prof_piston_length = CTRL_calculate_piston_position(0.0, 0.0);
   17d7e:	4c7e      	ldr	r4, [pc, #504]	@ (17f78 <module_sps_move_to_profile+0x9e8>)
        CTRL_set_lcp_density(TO_PROFILE_DENSITY);
   17d80:	f7fc f9fe 	bl	14180 <CTRL_set_lcp_density>
        to_prof_piston_length = CTRL_calculate_piston_position(0.0, 0.0);
   17d84:	eef0 0a48 	vmov.f32	s1, s16
   17d88:	eeb0 0a48 	vmov.f32	s0, s16
   17d8c:	f7fc fa5c 	bl	14248 <CTRL_calculate_piston_position>
   17d90:	ed84 0a00 	vstr	s0, [r4]
        length_update = to_prof_piston_length;
   17d94:	edd4 aa00 	vldr	s21, [r4]
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, Setting -> first time to_prof_piston_length=%.4fin >>\n", to_prof_piston_length);
   17d98:	6820      	ldr	r0, [r4, #0]
        if (length_update <= PISTON_POSITION_MINIMUM)
   17d9a:	ed9f 8a7c 	vldr	s16, [pc, #496]	@ 17f8c <module_sps_move_to_profile+0x9fc>
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, Setting -> first time to_prof_piston_length=%.4fin >>\n", to_prof_piston_length);
   17d9e:	f7f4 fb13 	bl	c3c8 <__aeabi_f2d>
   17da2:	4602      	mov	r2, r0
   17da4:	460b      	mov	r3, r1
   17da6:	487d      	ldr	r0, [pc, #500]	@ (17f9c <module_sps_move_to_profile+0xa0c>)
   17da8:	f7f9 f95e 	bl	11068 <am_util_stdio_printf>
   17dac:	6820      	ldr	r0, [r4, #0]
   17dae:	f7f4 fb0b 	bl	c3c8 <__aeabi_f2d>
   17db2:	4602      	mov	r2, r0
   17db4:	460b      	mov	r3, r1
   17db6:	4879      	ldr	r0, [pc, #484]	@ (17f9c <module_sps_move_to_profile+0xa0c>)
   17db8:	f006 f8de 	bl	1df78 <datalogger_log_debug>
        if (length_update <= PISTON_POSITION_MINIMUM)
   17dbc:	eef4 aac8 	vcmpe.f32	s21, s16
   17dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17dc4:	f63f ac15 	bhi.w	175f2 <module_sps_move_to_profile+0x62>
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, length_update=%.4fin < piston position minimum >>\n", length_update);
   17dc8:	ee1a 0a90 	vmov	r0, s21
   17dcc:	f7f4 fafc 	bl	c3c8 <__aeabi_f2d>
   17dd0:	460d      	mov	r5, r1
   17dd2:	4602      	mov	r2, r0
   17dd4:	460b      	mov	r3, r1
   17dd6:	4604      	mov	r4, r0
   17dd8:	4871      	ldr	r0, [pc, #452]	@ (17fa0 <module_sps_move_to_profile+0xa10>)
   17dda:	f7f9 f945 	bl	11068 <am_util_stdio_printf>
   17dde:	4870      	ldr	r0, [pc, #448]	@ (17fa0 <module_sps_move_to_profile+0xa10>)
   17de0:	4622      	mov	r2, r4
   17de2:	462b      	mov	r3, r5
   17de4:	f006 f8c8 	bl	1df78 <datalogger_log_debug>
        length_update = PISTON_POSITION_MINIMUM;
   17de8:	eef0 aa48 	vmov.f32	s21, s16
   17dec:	e401      	b.n	175f2 <module_sps_move_to_profile+0x62>
                eStatus = eTaskGetState( xPiston );
   17dee:	f04f 0a01 	mov.w	sl, #1
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17df2:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17df6:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17e02:	f280 8129 	bge.w	18058 <module_sps_move_to_profile+0xac8>
   17e06:	f04f 0801 	mov.w	r8, #1
   17e0a:	e568      	b.n	178de <module_sps_move_to_profile+0x34e>
                            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston time-out, task->finished\n");
   17e0c:	4865      	ldr	r0, [pc, #404]	@ (17fa4 <module_sps_move_to_profile+0xa14>)
   17e0e:	f7f9 f92b 	bl	11068 <am_util_stdio_printf>
   17e12:	4864      	ldr	r0, [pc, #400]	@ (17fa4 <module_sps_move_to_profile+0xa14>)
   17e14:	f006 f8b0 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   17e18:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17e1a:	f7fc f8a7 	bl	13f6c <PIS_task_delete>
                            PIS_Reset();
   17e1e:	f7fc f99b 	bl	14158 <PIS_Reset>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   17e22:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17e26:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   17e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17e32:	f6bf adab 	bge.w	1798c <module_sps_move_to_profile+0x3fc>
   17e36:	f04f 0801 	mov.w	r8, #1
                            piston_timer = 0;
   17e3a:	f8cd 9010 	str.w	r9, [sp, #16]
   17e3e:	e54e      	b.n	178de <module_sps_move_to_profile+0x34e>
                            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_profile, Piston CRUSH_DEPTH time-out, task->finished\n");
   17e40:	4859      	ldr	r0, [pc, #356]	@ (17fa8 <module_sps_move_to_profile+0xa18>)
   17e42:	f7f9 f911 	bl	11068 <am_util_stdio_printf>
   17e46:	4858      	ldr	r0, [pc, #352]	@ (17fa8 <module_sps_move_to_profile+0xa18>)
   17e48:	f006 f896 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   17e4c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   17e4e:	f7fc f88d 	bl	13f6c <PIS_task_delete>
                            PIS_Reset();
   17e52:	f04f 0801 	mov.w	r8, #1
   17e56:	f7fc f97f 	bl	14158 <PIS_Reset>
                            piston_timer = 0;
   17e5a:	2300      	movs	r3, #0
   17e5c:	9304      	str	r3, [sp, #16]
                            PIS_Reset();
   17e5e:	46c1      	mov	r9, r8
   17e60:	e53d      	b.n	178de <module_sps_move_to_profile+0x34e>
                else if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   17e62:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
   17e66:	eeb4 aac8 	vcmpe.f32	s20, s16
   17e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17e6e:	da57      	bge.n	17f20 <module_sps_move_to_profile+0x990>
                PIS_Get_Length(&Length);
   17e70:	a80a      	add	r0, sp, #40	@ 0x28
   17e72:	f7fc f8d3 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17e76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17e7a:	f7f7 fab3 	bl	f3e4 <vTaskDelay>
   17e7e:	f04f 0a01 	mov.w	sl, #1
                    to_prof_piston_length = length_update;
   17e82:	4b3d      	ldr	r3, [pc, #244]	@ (17f78 <module_sps_move_to_profile+0x9e8>)
                    PIS_set_length(length_update);
   17e84:	eeb0 0a4a 	vmov.f32	s0, s20
                    to_prof_piston_length = length_update;
   17e88:	ed83 aa00 	vstr	s20, [r3]
                    PIS_set_length(length_update);
   17e8c:	f7fc f91e 	bl	140cc <PIS_set_length>
                    PIS_task_move_length(&xPiston);
   17e90:	a80b      	add	r0, sp, #44	@ 0x2c
   17e92:	f7fb ffcb 	bl	13e2c <PIS_task_move_length>
                    piston_move = true;
   17e96:	f04f 0801 	mov.w	r8, #1
        if (Depth >= PROFILE_DEPTH-PROFILE_DEPTH_ERR && !crush_depth)
   17e9a:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17e9e:	eef3 7a07 	vmov.f32	s15, #55	@ 0x41b80000  23.0
   17ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17eaa:	f6bf ae1c 	bge.w	17ae6 <module_sps_move_to_profile+0x556>
   17eae:	ed9f 8a3f 	vldr	s16, [pc, #252]	@ 17fac <module_sps_move_to_profile+0xa1c>
   17eb2:	2400      	movs	r4, #0
   17eb4:	e510      	b.n	178d8 <module_sps_move_to_profile+0x348>
                    to_profile_state_time += (period * rate_count);
   17eb6:	9b07      	ldr	r3, [sp, #28]
   17eb8:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
                    ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_profile, critical piston minimum position time = %.2f seconds >>\n", (float)to_profile_state_time/xDelay1000ms);
   17ebc:	ee07 3a90 	vmov	s15, r3
   17ec0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   17ec4:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 17fb0 <module_sps_move_to_profile+0xa20>
                    to_profile_state_time += (period * rate_count);
   17ec8:	9307      	str	r3, [sp, #28]
                    ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_profile, critical piston minimum position time = %.2f seconds >>\n", (float)to_profile_state_time/xDelay1000ms);
   17eca:	eec8 7a27 	vdiv.f32	s15, s16, s15
   17ece:	ee17 0a90 	vmov	r0, s15
   17ed2:	f7f4 fa79 	bl	c3c8 <__aeabi_f2d>
   17ed6:	4606      	mov	r6, r0
   17ed8:	460f      	mov	r7, r1
   17eda:	460b      	mov	r3, r1
   17edc:	4632      	mov	r2, r6
   17ede:	482c      	ldr	r0, [pc, #176]	@ (17f90 <module_sps_move_to_profile+0xa00>)
   17ee0:	f7f9 f8c2 	bl	11068 <am_util_stdio_printf>
   17ee4:	482a      	ldr	r0, [pc, #168]	@ (17f90 <module_sps_move_to_profile+0xa00>)
   17ee6:	4632      	mov	r2, r6
   17ee8:	463b      	mov	r3, r7
   17eea:	f006 f845 	bl	1df78 <datalogger_log_debug>
                    if (to_profile_state_time >= TO_PROFILE_STATE_TIMER*xDelay1000ms)
   17eee:	eddf 7a31 	vldr	s15, [pc, #196]	@ 17fb4 <module_sps_move_to_profile+0xa24>
   17ef2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   17ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17efa:	f280 809c 	bge.w	18036 <module_sps_move_to_profile+0xaa6>
                PIS_Get_Length(&Length);
   17efe:	a80a      	add	r0, sp, #40	@ 0x28
   17f00:	f7fc f88c 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17f04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17f08:	f7f7 fa6c 	bl	f3e4 <vTaskDelay>
   17f0c:	f04f 0a01 	mov.w	sl, #1
   17f10:	e726      	b.n	17d60 <module_sps_move_to_profile+0x7d0>
                    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_profile, LCP is not hitting the bottom\n\n");
   17f12:	4829      	ldr	r0, [pc, #164]	@ (17fb8 <module_sps_move_to_profile+0xa28>)
   17f14:	f7f9 f8a8 	bl	11068 <am_util_stdio_printf>
   17f18:	4827      	ldr	r0, [pc, #156]	@ (17fb8 <module_sps_move_to_profile+0xa28>)
   17f1a:	f006 f82d 	bl	1df78 <datalogger_log_debug>
   17f1e:	e6de      	b.n	17cde <module_sps_move_to_profile+0x74e>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   17f20:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
   17f24:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 17fbc <module_sps_move_to_profile+0xa2c>
   17f28:	eef4 7ac7 	vcmpe.f32	s15, s14
   17f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17f30:	da54      	bge.n	17fdc <module_sps_move_to_profile+0xa4c>
                PIS_Get_Length(&Length);
   17f32:	a80a      	add	r0, sp, #40	@ 0x28
   17f34:	f7fc f872 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   17f38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   17f3c:	f7f7 fa52 	bl	f3e4 <vTaskDelay>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   17f40:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 17fbc <module_sps_move_to_profile+0xa2c>
   17f44:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
   17f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17f50:	db36      	blt.n	17fc0 <module_sps_move_to_profile+0xa30>
   17f52:	f04f 0800 	mov.w	r8, #0
            rate_avg = 0.0;
   17f56:	ed9f 8a15 	vldr	s16, [pc, #84]	@ 17fac <module_sps_move_to_profile+0xa1c>
            rate_count = 0;
   17f5a:	4644      	mov	r4, r8
   17f5c:	e5c6      	b.n	17aec <module_sps_move_to_profile+0x55c>
   17f5e:	bf00      	nop
   17f60:	e0000000 	.word	0xe0000000
   17f64:	3f9eb851 	.word	0x3f9eb851
   17f68:	00000000 	.word	0x00000000
   17f6c:	4072f000 	.word	0x4072f000
   17f70:	33333333 	.word	0x33333333
   17f74:	40143333 	.word	0x40143333
   17f78:	1000b9c8 	.word	0x1000b9c8
   17f7c:	0002cebc 	.word	0x0002cebc
   17f80:	0002d038 	.word	0x0002d038
   17f84:	0002d1b8 	.word	0x0002d1b8
   17f88:	3cf5c28f 	.word	0x3cf5c28f
   17f8c:	3dcccccd 	.word	0x3dcccccd
   17f90:	0002d27c 	.word	0x0002d27c
   17f94:	0002d2d0 	.word	0x0002d2d0
   17f98:	44816000 	.word	0x44816000
   17f9c:	0002ce18 	.word	0x0002ce18
   17fa0:	0002ce6c 	.word	0x0002ce6c
   17fa4:	0002cffc 	.word	0x0002cffc
   17fa8:	0002d494 	.word	0x0002d494
   17fac:	00000000 	.word	0x00000000
   17fb0:	447a0000 	.word	0x447a0000
   17fb4:	48927c00 	.word	0x48927c00
   17fb8:	0002d1fc 	.word	0x0002d1fc
   17fbc:	42340000 	.word	0x42340000
                        to_prof_piston_length = length_update;
   17fc0:	4b2b      	ldr	r3, [pc, #172]	@ (18070 <module_sps_move_to_profile+0xae0>)
                        PIS_set_length(length_update);
   17fc2:	eeb0 0a4a 	vmov.f32	s0, s20
                        to_prof_piston_length = length_update;
   17fc6:	ed83 aa00 	vstr	s20, [r3]
                        PIS_task_move_length(&xPiston);
   17fca:	f04f 0a01 	mov.w	sl, #1
                        PIS_set_length(length_update);
   17fce:	f7fc f87d 	bl	140cc <PIS_set_length>
                        PIS_task_move_length(&xPiston);
   17fd2:	a80b      	add	r0, sp, #44	@ 0x2c
   17fd4:	f7fb ff2a 	bl	13e2c <PIS_task_move_length>
                    piston_move = true;
   17fd8:	46d0      	mov	r8, sl
   17fda:	e75e      	b.n	17e9a <module_sps_move_to_profile+0x90a>
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, Depth=%.4f m is @critial piston position >>\n", Depth);
   17fdc:	ee17 0a90 	vmov	r0, s15
   17fe0:	f7f4 f9f2 	bl	c3c8 <__aeabi_f2d>
   17fe4:	4602      	mov	r2, r0
   17fe6:	460b      	mov	r3, r1
   17fe8:	4822      	ldr	r0, [pc, #136]	@ (18074 <module_sps_move_to_profile+0xae4>)
   17fea:	f7f9 f83d 	bl	11068 <am_util_stdio_printf>
   17fee:	980d      	ldr	r0, [sp, #52]	@ 0x34
   17ff0:	f7f4 f9ea 	bl	c3c8 <__aeabi_f2d>
   17ff4:	4602      	mov	r2, r0
   17ff6:	460b      	mov	r3, r1
   17ff8:	481e      	ldr	r0, [pc, #120]	@ (18074 <module_sps_move_to_profile+0xae4>)
   17ffa:	f005 ffbd 	bl	1df78 <datalogger_log_debug>
                PIS_Get_Length(&Length);
   17ffe:	a80a      	add	r0, sp, #40	@ 0x28
   18000:	f7fc f80c 	bl	1401c <PIS_Get_Length>
                vTaskDelay(piston_period);
   18004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18008:	f7f7 f9ec 	bl	f3e4 <vTaskDelay>
                        length_update = CRUSH_DEPTH_PISTON_POSITION;
   1800c:	eeb0 aa48 	vmov.f32	s20, s16
   18010:	e796      	b.n	17f40 <module_sps_move_to_profile+0x9b0>
                    ARTEMIS_DEBUG_PRINTF("\n<< SPS :: move_to_profile, LCP presumably hitting the bottom >>\n\n");
   18012:	4819      	ldr	r0, [pc, #100]	@ (18078 <module_sps_move_to_profile+0xae8>)
   18014:	f7f9 f828 	bl	11068 <am_util_stdio_printf>
   18018:	4817      	ldr	r0, [pc, #92]	@ (18078 <module_sps_move_to_profile+0xae8>)
   1801a:	f005 ffad 	bl	1df78 <datalogger_log_debug>
                    to_prof_piston_length = length_update_last_adjusted;
   1801e:	4b14      	ldr	r3, [pc, #80]	@ (18070 <module_sps_move_to_profile+0xae0>)
                        SENS_task_delete(xDepth);
   18020:	980c      	ldr	r0, [sp, #48]	@ 0x30
                    to_prof_piston_length = length_update_last_adjusted;
   18022:	edc3 aa00 	vstr	s21, [r3]
                        SENS_task_delete(xDepth);
   18026:	f7fd fba3 	bl	15770 <SENS_task_delete>
                        SENS_sensor_depth_off();
   1802a:	f7fd fb35 	bl	15698 <SENS_sensor_depth_off>
                    spsEvent = MODE_DONE;
   1802e:	2304      	movs	r3, #4
   18030:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                    break;
   18034:	e45b      	b.n	178ee <module_sps_move_to_profile+0x35e>
                        ARTEMIS_DEBUG_PRINTF("<< SPS :: move_to_profile, critical piston minimum position time out = %.2f mins >>\n", (float)to_profile_state_time/(60.0*xDelay1000ms));
   18036:	ee18 0a10 	vmov	r0, s16
   1803a:	f7f4 f9c5 	bl	c3c8 <__aeabi_f2d>
   1803e:	a30a      	add	r3, pc, #40	@ (adr r3, 18068 <module_sps_move_to_profile+0xad8>)
   18040:	e9d3 2300 	ldrd	r2, r3, [r3]
   18044:	f7f4 fb42 	bl	c6cc <__aeabi_ddiv>
   18048:	4606      	mov	r6, r0
   1804a:	460f      	mov	r7, r1
   1804c:	e668      	b.n	17d20 <module_sps_move_to_profile+0x790>
        vTaskDelay(period);
   1804e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18052:	f7f7 f9c7 	bl	f3e4 <vTaskDelay>
    while (run)
   18056:	e44a      	b.n	178ee <module_sps_move_to_profile+0x35e>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18058:	f1b9 0f00 	cmp.w	r9, #0
   1805c:	f43f ac96 	beq.w	1798c <module_sps_move_to_profile+0x3fc>
   18060:	46c8      	mov	r8, r9
   18062:	e43c      	b.n	178de <module_sps_move_to_profile+0x34e>
   18064:	f3af 8000 	nop.w
   18068:	00000000 	.word	0x00000000
   1806c:	40ed4c00 	.word	0x40ed4c00
   18070:	1000b9c8 	.word	0x1000b9c8
   18074:	0002d328 	.word	0x0002d328
   18078:	0002d238 	.word	0x0002d238
   1807c:	00000000 	.word	0x00000000

00018080 <module_sps_park>:
{
   18080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18084:	ed2d 8b06 	vpush	{d8-d10}
    if (park_number == 0)
   18088:	4bc9      	ldr	r3, [pc, #804]	@ (183b0 <module_sps_park+0x330>)
   1808a:	781b      	ldrb	r3, [r3, #0]
{
   1808c:	b0b1      	sub	sp, #196	@ 0xc4
    if (park_number == 0)
   1808e:	2b00      	cmp	r3, #0
   18090:	f040 83b8 	bne.w	18804 <module_sps_park+0x784>
        ARTEMIS_DEBUG_PRINTF("\nSPS :: park, < PARK_TIME_FIRST = %.2f mins >\n\n", (float)(PARK_TIME_FIRST/60));
   18094:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
   18098:	2200      	movs	r2, #0
   1809a:	4bc6      	ldr	r3, [pc, #792]	@ (183b4 <module_sps_park+0x334>)
   1809c:	48c6      	ldr	r0, [pc, #792]	@ (183b8 <module_sps_park+0x338>)
   1809e:	f7f8 ffe3 	bl	11068 <am_util_stdio_printf>
   180a2:	4bc4      	ldr	r3, [pc, #784]	@ (183b4 <module_sps_park+0x334>)
   180a4:	48c4      	ldr	r0, [pc, #784]	@ (183b8 <module_sps_park+0x338>)
   180a6:	2200      	movs	r2, #0
   180a8:	f005 ff66 	bl	1df78 <datalogger_log_debug>
    SENS_set_depth_rate(s_rate);
   180ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
   180b0:	f7fd fd74 	bl	15b9c <SENS_set_depth_rate>
    SENS_set_temperature_rate(s_rate);
   180b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
   180b8:	f7fd fda0 	bl	15bfc <SENS_set_temperature_rate>
    vTaskDelay(xDelay100ms);
   180bc:	2064      	movs	r0, #100	@ 0x64
    TaskHandle_t xTemp  = NULL;
   180be:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
    vTaskDelay(xDelay100ms);
   180c2:	f7f7 f98f 	bl	f3e4 <vTaskDelay>
        SENS_sensor_temperature_on();
   180c6:	f7fd faf1 	bl	156ac <SENS_sensor_temperature_on>
        SENS_sensor_depth_on();
   180ca:	f7fd fae7 	bl	1569c <SENS_sensor_depth_on>
        SENS_task_park_sensors(&xDepth, &xTemp);
   180ce:	a90f      	add	r1, sp, #60	@ 0x3c
   180d0:	a80e      	add	r0, sp, #56	@ 0x38
   180d2:	f7fd fcc7 	bl	15a64 <SENS_task_park_sensors>
        park_time = (xDelay1000ms * PARK_TIME_FIRST);
   180d6:	f64e 2360 	movw	r3, #60000	@ 0xea60
    uint32_t park_period = xDelay1000ms/s_rate;
   180da:	f44f 7b7a 	mov.w	fp, #1000	@ 0x3e8
        park_time = (xDelay1000ms * PARK_TIME_FIRST);
   180de:	930b      	str	r3, [sp, #44]	@ 0x2c
        s_rate = PARK_RATE_FAST;
   180e0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
    char *filename = datalogger_park_create_file(park_number);
   180e4:	4bb2      	ldr	r3, [pc, #712]	@ (183b0 <module_sps_park+0x330>)
    float Temperature = 0.0;
   180e6:	ed9f 8ab5 	vldr	s16, [pc, #724]	@ 183bc <module_sps_park+0x33c>
    char *filename = datalogger_park_create_file(park_number);
   180ea:	7818      	ldrb	r0, [r3, #0]
    float Temperature = 0.0;
   180ec:	ed8d 8a10 	vstr	s16, [sp, #64]	@ 0x40
    float Depth = 0.0, Rate = 0.0;
   180f0:	ed8d 8a11 	vstr	s16, [sp, #68]	@ 0x44
   180f4:	ed8d 8a12 	vstr	s16, [sp, #72]	@ 0x48
    float Pressure = 0.0;
   180f8:	ed8d 8a13 	vstr	s16, [sp, #76]	@ 0x4c
    char *filename = datalogger_park_create_file(park_number);
   180fc:	f006 fa58 	bl	1e5b0 <datalogger_park_create_file>
   18100:	4603      	mov	r3, r0
    vTaskDelay(xDelay100ms);
   18102:	2064      	movs	r0, #100	@ 0x64
    TaskHandle_t xPiston = NULL;
   18104:	2400      	movs	r4, #0
    char *filename = datalogger_park_create_file(park_number);
   18106:	930a      	str	r3, [sp, #40]	@ 0x28
    vTaskDelay(xDelay100ms);
   18108:	f7f7 f96c 	bl	f3e4 <vTaskDelay>
    PIS_set_piston_rate(1);
   1810c:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   1810e:	9414      	str	r4, [sp, #80]	@ 0x50
    PIS_set_piston_rate(1);
   18110:	f7fb ff92 	bl	14038 <PIS_set_piston_rate>
    float length_update = park_piston_length;
   18114:	4baa      	ldr	r3, [pc, #680]	@ (183c0 <module_sps_park+0x340>)
    float Length = 0.0;
   18116:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
    float samples_p[10] = {0};
   1811a:	2228      	movs	r2, #40	@ 0x28
   1811c:	4621      	mov	r1, r4
   1811e:	a81c      	add	r0, sp, #112	@ 0x70
    float length_update = park_piston_length;
   18120:	ed93 9a00 	vldr	s18, [r3]
    float samples_p[10] = {0};
   18124:	f00c f934 	bl	24390 <memset>
    float samples_t[10] = {0};
   18128:	2228      	movs	r2, #40	@ 0x28
   1812a:	4621      	mov	r1, r4
   1812c:	a826      	add	r0, sp, #152	@ 0x98
   1812e:	f00c f92f 	bl	24390 <memset>
    bool start_time = true;
   18132:	2301      	movs	r3, #1
   18134:	9305      	str	r3, [sp, #20]
        if (park_period >= xDelay10000ms)
   18136:	f242 730f 	movw	r3, #9999	@ 0x270f
   1813a:	459b      	cmp	fp, r3
    uint8_t samples = 0;
   1813c:	46a2      	mov	sl, r4
    float samples_t[10] = {0};
   1813e:	46d8      	mov	r8, fp
    uint32_t piston_timer = 0;
   18140:	9409      	str	r4, [sp, #36]	@ 0x24
    bool crush_depth = false;
   18142:	4627      	mov	r7, r4
   18144:	46a1      	mov	r9, r4
   18146:	9408      	str	r4, [sp, #32]
        if (park_period >= xDelay10000ms)
   18148:	f240 8161 	bls.w	1840e <module_sps_park+0x38e>
            SENS_sensor_temperature_on();
   1814c:	f7fd faae 	bl	156ac <SENS_sensor_temperature_on>
            SENS_sensor_depth_on();
   18150:	f7fd faa4 	bl	1569c <SENS_sensor_depth_on>
            vTaskDelay(xDelay10ms);
   18154:	200a      	movs	r0, #10
   18156:	f7f7 f945 	bl	f3e4 <vTaskDelay>
            SENS_task_park_sensors(&xDepth, &xTemp);
   1815a:	a90f      	add	r1, sp, #60	@ 0x3c
   1815c:	a80e      	add	r0, sp, #56	@ 0x38
   1815e:	f7fd fc81 	bl	15a64 <SENS_task_park_sensors>
            SENS_get_depth(&Depth, &Pressure, &Rate);
   18162:	aa12      	add	r2, sp, #72	@ 0x48
   18164:	a913      	add	r1, sp, #76	@ 0x4c
   18166:	a811      	add	r0, sp, #68	@ 0x44
   18168:	f7fd faa2 	bl	156b0 <SENS_get_depth>
            SENS_get_temperature(&Temperature);
   1816c:	a810      	add	r0, sp, #64	@ 0x40
   1816e:	f7fd fac7 	bl	15700 <SENS_get_temperature>
            vTaskDelay(xDelay100ms);
   18172:	2064      	movs	r0, #100	@ 0x64
   18174:	f7f7 f936 	bl	f3e4 <vTaskDelay>
            SENS_sensor_temperature_off();
   18178:	f7fd fa96 	bl	156a8 <SENS_sensor_temperature_off>
            SENS_sensor_depth_off();
   1817c:	f7fd fa8c 	bl	15698 <SENS_sensor_depth_off>
        ARTEMIS_DEBUG_PRINTF("SPS :: park, Pressure    = %0.4f bar\n", Pressure);
   18180:	9813      	ldr	r0, [sp, #76]	@ 0x4c
   18182:	f7f4 f921 	bl	c3c8 <__aeabi_f2d>
   18186:	4602      	mov	r2, r0
   18188:	460b      	mov	r3, r1
   1818a:	488e      	ldr	r0, [pc, #568]	@ (183c4 <module_sps_park+0x344>)
   1818c:	f7f8 ff6c 	bl	11068 <am_util_stdio_printf>
   18190:	9813      	ldr	r0, [sp, #76]	@ 0x4c
   18192:	f7f4 f919 	bl	c3c8 <__aeabi_f2d>
   18196:	4602      	mov	r2, r0
   18198:	460b      	mov	r3, r1
   1819a:	488a      	ldr	r0, [pc, #552]	@ (183c4 <module_sps_park+0x344>)
   1819c:	f005 feec 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth       = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   181a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   181a4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
   181a8:	ee17 0a90 	vmov	r0, s15
   181ac:	f7f4 f90c 	bl	c3c8 <__aeabi_f2d>
   181b0:	4604      	mov	r4, r0
   181b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
   181b4:	460d      	mov	r5, r1
   181b6:	f7f4 f907 	bl	c3c8 <__aeabi_f2d>
   181ba:	4602      	mov	r2, r0
   181bc:	460b      	mov	r3, r1
   181be:	9812      	ldr	r0, [sp, #72]	@ 0x48
   181c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   181c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   181c8:	f7f4 f8fe 	bl	c3c8 <__aeabi_f2d>
   181cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   181d0:	e9cd 0100 	strd	r0, r1, [sp]
   181d4:	487c      	ldr	r0, [pc, #496]	@ (183c8 <module_sps_park+0x348>)
   181d6:	f7f8 ff47 	bl	11068 <am_util_stdio_printf>
   181da:	9811      	ldr	r0, [sp, #68]	@ 0x44
   181dc:	f7f4 f8f4 	bl	c3c8 <__aeabi_f2d>
   181e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   181e4:	4604      	mov	r4, r0
   181e6:	9812      	ldr	r0, [sp, #72]	@ 0x48
   181e8:	460d      	mov	r5, r1
   181ea:	f7f4 f8ed 	bl	c3c8 <__aeabi_f2d>
   181ee:	4622      	mov	r2, r4
   181f0:	e9cd 0100 	strd	r0, r1, [sp]
   181f4:	462b      	mov	r3, r5
   181f6:	4874      	ldr	r0, [pc, #464]	@ (183c8 <module_sps_park+0x348>)
   181f8:	f005 febe 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("SPS :: park, Temperature = %0.4f °C\n", Temperature);
   181fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
   181fe:	f7f4 f8e3 	bl	c3c8 <__aeabi_f2d>
   18202:	4602      	mov	r2, r0
   18204:	460b      	mov	r3, r1
   18206:	4871      	ldr	r0, [pc, #452]	@ (183cc <module_sps_park+0x34c>)
   18208:	f7f8 ff2e 	bl	11068 <am_util_stdio_printf>
   1820c:	9810      	ldr	r0, [sp, #64]	@ 0x40
   1820e:	f7f4 f8db 	bl	c3c8 <__aeabi_f2d>
   18212:	4602      	mov	r2, r0
   18214:	460b      	mov	r3, r1
   18216:	486d      	ldr	r0, [pc, #436]	@ (183cc <module_sps_park+0x34c>)
   18218:	f005 feae 	bl	1df78 <datalogger_log_debug>
        artemis_rtc_get_time(&time);
   1821c:	a819      	add	r0, sp, #100	@ 0x64
   1821e:	f005 fcdb 	bl	1dbd8 <artemis_rtc_get_time>
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   18222:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
   18226:	9301      	str	r3, [sp, #4]
   18228:	f89d 3069 	ldrb.w	r3, [sp, #105]	@ 0x69
   1822c:	f89d 2067 	ldrb.w	r2, [sp, #103]	@ 0x67
   18230:	f89d 1066 	ldrb.w	r1, [sp, #102]	@ 0x66
   18234:	9300      	str	r3, [sp, #0]
   18236:	f8bd 0064 	ldrh.w	r0, [sp, #100]	@ 0x64
   1823a:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
   1823e:	f7fc fc2f 	bl	14aa0 <get_epoch_time>
        ARTEMIS_DEBUG_PRINTF("SPS :: park, Epoch       = %ld\n", epoch);
   18242:	4601      	mov	r1, r0
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   18244:	4606      	mov	r6, r0
        ARTEMIS_DEBUG_PRINTF("SPS :: park, Epoch       = %ld\n", epoch);
   18246:	4862      	ldr	r0, [pc, #392]	@ (183d0 <module_sps_park+0x350>)
   18248:	f7f8 ff0e 	bl	11068 <am_util_stdio_printf>
   1824c:	4860      	ldr	r0, [pc, #384]	@ (183d0 <module_sps_park+0x350>)
   1824e:	4631      	mov	r1, r6
   18250:	f005 fe92 	bl	1df78 <datalogger_log_debug>
        if (start_time)
   18254:	9b05      	ldr	r3, [sp, #20]
   18256:	2b00      	cmp	r3, #0
   18258:	f040 8142 	bne.w	184e0 <module_sps_park+0x460>
        samples_p[samples] = Pressure;
   1825c:	a830      	add	r0, sp, #192	@ 0xc0
        samples++;
   1825e:	f10a 0301 	add.w	r3, sl, #1
        samples_p[samples] = Pressure;
   18262:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
   18266:	9913      	ldr	r1, [sp, #76]	@ 0x4c
        samples_t[samples] = Temperature;
   18268:	9a10      	ldr	r2, [sp, #64]	@ 0x40
        samples_p[samples] = Pressure;
   1826a:	f84a 1c50 	str.w	r1, [sl, #-80]
        samples_t[samples] = Temperature;
   1826e:	f84a 2c28 	str.w	r2, [sl, #-40]
        samples++;
   18272:	fa5f fa83 	uxtb.w	sl, r3
        if (samples > 9)
   18276:	f1ba 0f0a 	cmp.w	sl, #10
   1827a:	f000 8207 	beq.w	1868c <module_sps_park+0x60c>
        if (Depth >= PARK_DEPTH-PARK_DEPTH_ERR && Depth <= PARK_DEPTH+PARK_DEPTH_ERR)
   1827e:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18282:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
   18286:	eef4 7ac7 	vcmpe.f32	s15, s14
   1828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1828e:	f280 80c7 	bge.w	18420 <module_sps_park+0x3a0>
            rate_count++;
   18292:	9b08      	ldr	r3, [sp, #32]
            rate_avg += Rate;
   18294:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
            rate_count++;
   18298:	3301      	adds	r3, #1
   1829a:	b2db      	uxtb	r3, r3
            if (rate_count >= PARK_DEPTH_RATE_COUNTER)
   1829c:	ee06 3a90 	vmov	s13, r3
   182a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   182a4:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
   182a8:	eef4 6ac6 	vcmpe.f32	s13, s12
   182ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            rate_avg += Rate;
   182b0:	ee38 8a25 	vadd.f32	s16, s16, s11
            rate_count++;
   182b4:	9308      	str	r3, [sp, #32]
            if (rate_count >= PARK_DEPTH_RATE_COUNTER)
   182b6:	db1c      	blt.n	182f2 <module_sps_park+0x272>
                else if (Depth < PARK_DEPTH-PARK_DEPTH_ERR)
   182b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   182bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   182c0:	d513      	bpl.n	182ea <module_sps_park+0x26a>
                float averaged_rate = (float) (rate_avg / rate_count);
   182c2:	eec8 7a26 	vdiv.f32	s15, s16, s13
                    if (averaged_rate <= 0.0 && !piston_move && !crush_depth)
   182c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   182ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   182ce:	f240 8347 	bls.w	18960 <module_sps_park+0x8e0>
                    else if (averaged_rate > 0.0 && !piston_move && !crush_depth)
   182d2:	dd0a      	ble.n	182ea <module_sps_park+0x26a>
   182d4:	2f00      	cmp	r7, #0
   182d6:	f040 8116 	bne.w	18506 <module_sps_park+0x486>
   182da:	f1b9 0f00 	cmp.w	r9, #0
   182de:	f000 83a3 	beq.w	18a28 <module_sps_park+0x9a8>
   182e2:	ed9f 8a36 	vldr	s16, [pc, #216]	@ 183bc <module_sps_park+0x33c>
   182e6:	9708      	str	r7, [sp, #32]
   182e8:	e006      	b.n	182f8 <module_sps_park+0x278>
                rate_count = 0;
   182ea:	2300      	movs	r3, #0
                rate_avg = 0.0;
   182ec:	ed9f 8a33 	vldr	s16, [pc, #204]	@ 183bc <module_sps_park+0x33c>
                rate_count = 0;
   182f0:	9308      	str	r3, [sp, #32]
        if (piston_move)
   182f2:	2f00      	cmp	r7, #0
   182f4:	f040 810b 	bne.w	1850e <module_sps_park+0x48e>
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   182f8:	2401      	movs	r4, #1
   182fa:	2700      	movs	r7, #0
        if (wait_time >= park_time && !crush_depth)
   182fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   182fe:	4543      	cmp	r3, r8
   18300:	d878      	bhi.n	183f4 <module_sps_park+0x374>
   18302:	f1b9 0f00 	cmp.w	r9, #0
   18306:	d175      	bne.n	183f4 <module_sps_park+0x374>
            ARTEMIS_DEBUG_PRINTF("\n\nSPS :: park, << Timer out %f mins >>\n\n", (float) (wait_time/(60.0*xDelay1000ms)));
   18308:	4640      	mov	r0, r8
   1830a:	f7f4 f83b 	bl	c384 <__aeabi_ui2d>
   1830e:	a326      	add	r3, pc, #152	@ (adr r3, 183a8 <module_sps_park+0x328>)
   18310:	e9d3 2300 	ldrd	r2, r3, [r3]
   18314:	f7f4 f9da 	bl	c6cc <__aeabi_ddiv>
   18318:	f7f4 fb68 	bl	c9ec <__aeabi_d2f>
   1831c:	f7f4 f854 	bl	c3c8 <__aeabi_f2d>
   18320:	4604      	mov	r4, r0
   18322:	460d      	mov	r5, r1
   18324:	4622      	mov	r2, r4
   18326:	460b      	mov	r3, r1
   18328:	482a      	ldr	r0, [pc, #168]	@ (183d4 <module_sps_park+0x354>)
   1832a:	f7f8 fe9d 	bl	11068 <am_util_stdio_printf>
   1832e:	4829      	ldr	r0, [pc, #164]	@ (183d4 <module_sps_park+0x354>)
   18330:	4622      	mov	r2, r4
   18332:	462b      	mov	r3, r5
   18334:	f005 fe20 	bl	1df78 <datalogger_log_debug>
            if (piston_move)
   18338:	2f00      	cmp	r7, #0
   1833a:	f040 83d2 	bne.w	18ae2 <module_sps_park+0xa62>
            if (park_period >= xDelay10000ms)
   1833e:	f242 730f 	movw	r3, #9999	@ 0x270f
   18342:	459b      	cmp	fp, r3
   18344:	f240 8468 	bls.w	18c18 <module_sps_park+0xb98>
            spsEvent = MODE_DONE;
   18348:	2304      	movs	r3, #4
            vTaskDelay(piston_period);
   1834a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
            spsEvent = MODE_DONE;
   1834e:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
            vTaskDelay(piston_period);
   18352:	f7f7 f847 	bl	f3e4 <vTaskDelay>
    park_number++;
   18356:	4a16      	ldr	r2, [pc, #88]	@ (183b0 <module_sps_park+0x330>)
   18358:	7813      	ldrb	r3, [r2, #0]
   1835a:	3301      	adds	r3, #1
   1835c:	b2db      	uxtb	r3, r3
   1835e:	7013      	strb	r3, [r2, #0]
    uint32_t size = xPortGetFreeHeapSize();
   18360:	f7f5 fa7c 	bl	d85c <xPortGetFreeHeapSize>
   18364:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nSPS :: park, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   18366:	4621      	mov	r1, r4
   18368:	481b      	ldr	r0, [pc, #108]	@ (183d8 <module_sps_park+0x358>)
   1836a:	f7f8 fe7d 	bl	11068 <am_util_stdio_printf>
   1836e:	4621      	mov	r1, r4
   18370:	4819      	ldr	r0, [pc, #100]	@ (183d8 <module_sps_park+0x358>)
   18372:	f005 fe01 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: park, Task->finished\n\n");
   18376:	4819      	ldr	r0, [pc, #100]	@ (183dc <module_sps_park+0x35c>)
   18378:	f7f8 fe76 	bl	11068 <am_util_stdio_printf>
   1837c:	4817      	ldr	r0, [pc, #92]	@ (183dc <module_sps_park+0x35c>)
   1837e:	f005 fdfb 	bl	1df78 <datalogger_log_debug>
    SendEvent(spsEventQueue, &spsEvent);
   18382:	4a17      	ldr	r2, [pc, #92]	@ (183e0 <module_sps_park+0x360>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   18384:	2300      	movs	r3, #0
   18386:	f10d 0137 	add.w	r1, sp, #55	@ 0x37
   1838a:	6810      	ldr	r0, [r2, #0]
   1838c:	f04f 32ff 	mov.w	r2, #4294967295
   18390:	f7f5 fc68 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   18394:	2000      	movs	r0, #0
   18396:	f7f6 fc11 	bl	ebbc <vTaskDelete>
}
   1839a:	b031      	add	sp, #196	@ 0xc4
   1839c:	ecbd 8b06 	vpop	{d8-d10}
   183a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183a4:	f3af 8000 	nop.w
   183a8:	00000000 	.word	0x00000000
   183ac:	40ed4c00 	.word	0x40ed4c00
   183b0:	1000b9e1 	.word	0x1000b9e1
   183b4:	3ff00000 	.word	0x3ff00000
   183b8:	0002d62c 	.word	0x0002d62c
   183bc:	00000000 	.word	0x00000000
   183c0:	1000b9cc 	.word	0x1000b9cc
   183c4:	0002d688 	.word	0x0002d688
   183c8:	0002d6b0 	.word	0x0002d6b0
   183cc:	0002d6ec 	.word	0x0002d6ec
   183d0:	0002d714 	.word	0x0002d714
   183d4:	0002db1c 	.word	0x0002db1c
   183d8:	0002db48 	.word	0x0002db48
   183dc:	0002db78 	.word	0x0002db78
   183e0:	1000bc98 	.word	0x1000bc98
                        run = false;
   183e4:	f04f 0900 	mov.w	r9, #0
                    piston_move = false;
   183e8:	464f      	mov	r7, r9
                    piston_timer = 0;
   183ea:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   183ee:	464c      	mov	r4, r9
   183f0:	f04f 0901 	mov.w	r9, #1
        vTaskDelay(park_period);
   183f4:	4658      	mov	r0, fp
   183f6:	f7f6 fff5 	bl	f3e4 <vTaskDelay>
    while (run)
   183fa:	44d8      	add	r8, fp
   183fc:	2c00      	cmp	r4, #0
   183fe:	d0aa      	beq.n	18356 <module_sps_park+0x2d6>
        s_rate = PARK_RATE_FAST;
   18400:	2300      	movs	r3, #0
   18402:	9305      	str	r3, [sp, #20]
        if (park_period >= xDelay10000ms)
   18404:	f242 730f 	movw	r3, #9999	@ 0x270f
   18408:	459b      	cmp	fp, r3
   1840a:	f63f ae9f 	bhi.w	1814c <module_sps_park+0xcc>
            SENS_get_depth(&Depth, &Pressure, &Rate);
   1840e:	aa12      	add	r2, sp, #72	@ 0x48
   18410:	a913      	add	r1, sp, #76	@ 0x4c
   18412:	a811      	add	r0, sp, #68	@ 0x44
   18414:	f7fd f94c 	bl	156b0 <SENS_get_depth>
            SENS_get_temperature(&Temperature);
   18418:	a810      	add	r0, sp, #64	@ 0x40
   1841a:	f7fd f971 	bl	15700 <SENS_get_temperature>
   1841e:	e6af      	b.n	18180 <module_sps_park+0x100>
        if (Depth >= PARK_DEPTH-PARK_DEPTH_ERR && Depth <= PARK_DEPTH+PARK_DEPTH_ERR)
   18420:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
   18424:	eef4 7ac7 	vcmpe.f32	s15, s14
   18428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1842c:	f67f af61 	bls.w	182f2 <module_sps_park+0x272>
            rate_count++;
   18430:	9b08      	ldr	r3, [sp, #32]
            rate_avg += Rate;
   18432:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
            rate_count++;
   18436:	3301      	adds	r3, #1
   18438:	b2db      	uxtb	r3, r3
            if (rate_count >= PARK_DEPTH_RATE_COUNTER)
   1843a:	ee07 3a10 	vmov	s14, r3
   1843e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   18442:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
   18446:	eeb4 7ae6 	vcmpe.f32	s14, s13
   1844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            rate_avg += Rate;
   1844e:	ee38 8a06 	vadd.f32	s16, s16, s12
            rate_count++;
   18452:	9308      	str	r3, [sp, #32]
            if (rate_count >= PARK_DEPTH_RATE_COUNTER)
   18454:	da2b      	bge.n	184ae <module_sps_park+0x42e>
        if (piston_move)
   18456:	2f00      	cmp	r7, #0
   18458:	d159      	bne.n	1850e <module_sps_park+0x48e>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1845a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   1845e:	eef4 7ac7 	vcmpe.f32	s15, s14
   18462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18466:	f2c0 80fe 	blt.w	18666 <module_sps_park+0x5e6>
   1846a:	f1b9 0f00 	cmp.w	r9, #0
   1846e:	d1be      	bne.n	183ee <module_sps_park+0x36e>
            vTaskDelay(piston_period);
   18470:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18474:	f7f6 ffb6 	bl	f3e4 <vTaskDelay>
            PIS_set_length(PISTON_POSITION_MAXIMUM);
   18478:	eeb2 0a07 	vmov.f32	s0, #39	@ 0x41380000  11.5
   1847c:	f7fb fe26 	bl	140cc <PIS_set_length>
            PIS_task_move_length(&xPiston);
   18480:	a814      	add	r0, sp, #80	@ 0x50
   18482:	f7fb fcd3 	bl	13e2c <PIS_task_move_length>
            ARTEMIS_DEBUG_PRINTF("\n\n\nSPS :: park, <<< CRUSH DEPTH activated >>>\n\n\n");
   18486:	48be      	ldr	r0, [pc, #760]	@ (18780 <module_sps_park+0x700>)
   18488:	f7f8 fdee 	bl	11068 <am_util_stdio_printf>
   1848c:	48bc      	ldr	r0, [pc, #752]	@ (18780 <module_sps_park+0x700>)
   1848e:	f005 fd73 	bl	1df78 <datalogger_log_debug>
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   18492:	ed9d 7a11 	vldr	s14, [sp, #68]	@ 0x44
   18496:	eef3 7a07 	vmov.f32	s15, #55	@ 0x41b80000  23.0
   1849a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1849e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   184a2:	f280 815d 	bge.w	18760 <module_sps_park+0x6e0>
   184a6:	2401      	movs	r4, #1
            piston_move = true;
   184a8:	4627      	mov	r7, r4
            crush_depth = true;
   184aa:	46a1      	mov	r9, r4
   184ac:	e726      	b.n	182fc <module_sps_park+0x27c>
                float averaged_rate = (float) (rate_avg / rate_count);
   184ae:	eec8 6a07 	vdiv.f32	s13, s16, s14
                    if (averaged_rate >= 0.0 && !piston_move && !crush_depth)
   184b2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
   184b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   184ba:	f2c0 818c 	blt.w	187d6 <module_sps_park+0x756>
   184be:	bb17      	cbnz	r7, 18506 <module_sps_park+0x486>
   184c0:	f1b9 0f00 	cmp.w	r9, #0
   184c4:	f000 81de 	beq.w	18884 <module_sps_park+0x804>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   184c8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   184cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   184d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   184d4:	ed9f 8ab6 	vldr	s16, [pc, #728]	@ 187b0 <module_sps_park+0x730>
   184d8:	f2c0 81d1 	blt.w	1887e <module_sps_park+0x7fe>
   184dc:	9708      	str	r7, [sp, #32]
   184de:	e0ce      	b.n	1867e <module_sps_park+0x5fe>
            DATA_add(&park, epoch, Pressure, Temperature, park_number);
   184e0:	4ba8      	ldr	r3, [pc, #672]	@ (18784 <module_sps_park+0x704>)
   184e2:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
   184e6:	ed9d 0a13 	vldr	s0, [sp, #76]	@ 0x4c
   184ea:	781a      	ldrb	r2, [r3, #0]
   184ec:	48a6      	ldr	r0, [pc, #664]	@ (18788 <module_sps_park+0x708>)
   184ee:	4631      	mov	r1, r6
   184f0:	f7fc f9d2 	bl	14898 <DATA_add>
            datalogger_park_mode(filename, Pressure, Temperature, &time);
   184f4:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
   184f8:	ed9d 0a13 	vldr	s0, [sp, #76]	@ 0x4c
   184fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
   184fe:	a919      	add	r1, sp, #100	@ 0x64
   18500:	f006 f91a 	bl	1e738 <datalogger_park_mode>
            start_time = false;
   18504:	e6aa      	b.n	1825c <module_sps_park+0x1dc>
   18506:	2300      	movs	r3, #0
   18508:	ed9f 8aa9 	vldr	s16, [pc, #676]	@ 187b0 <module_sps_park+0x730>
   1850c:	9308      	str	r3, [sp, #32]
   1850e:	f242 730f 	movw	r3, #9999	@ 0x270f
   18512:	459b      	cmp	fp, r3
   18514:	f240 83b7 	bls.w	18c86 <module_sps_park+0xc06>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->suspended\n");
   18518:	4d9c      	ldr	r5, [pc, #624]	@ (1878c <module_sps_park+0x70c>)
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->active\n");
   1851a:	4c9d      	ldr	r4, [pc, #628]	@ (18790 <module_sps_park+0x710>)
   1851c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
   1851e:	464f      	mov	r7, r9
                eStatus = eTaskGetState( xPiston );
   18520:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18522:	f7f6 fbc3 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   18526:	2804      	cmp	r0, #4
   18528:	d813      	bhi.n	18552 <module_sps_park+0x4d2>
   1852a:	e8df f000 	tbb	[pc, r0]
   1852e:	8503      	.short	0x8503
   18530:	7603      	.short	0x7603
   18532:	17          	.byte	0x17
   18533:	00          	.byte	0x00
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->active\n");
   18534:	4620      	mov	r0, r4
   18536:	f7f8 fd97 	bl	11068 <am_util_stdio_printf>
   1853a:	4620      	mov	r0, r4
   1853c:	f005 fd1c 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   18540:	f506 767a 	add.w	r6, r6, #1000	@ 0x3e8
                    if (crush_depth)
   18544:	2f00      	cmp	r7, #0
   18546:	f000 80f6 	beq.w	18736 <module_sps_park+0x6b6>
                        if (piston_timer >= 120000)
   1854a:	4b92      	ldr	r3, [pc, #584]	@ (18794 <module_sps_park+0x714>)
   1854c:	429e      	cmp	r6, r3
   1854e:	f200 8154 	bhi.w	187fa <module_sps_park+0x77a>
                    vTaskDelay(piston_period);
   18552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18556:	f7f6 ff45 	bl	f3e4 <vTaskDelay>
            } while (piston_move && park_period >= xDelay10000ms);
   1855a:	e7e1      	b.n	18520 <module_sps_park+0x4a0>
   1855c:	46b9      	mov	r9, r7
                    PIS_Get_Length(&Length);
   1855e:	a815      	add	r0, sp, #84	@ 0x54
   18560:	f7fb fd5c 	bl	1401c <PIS_Get_Length>
                    Volume = CTRL_calculate_volume_from_length(Length);
   18564:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
   18568:	f7fb ff26 	bl	143b8 <CTRL_calculate_volume_from_length>
   1856c:	ee10 5a10 	vmov	r5, s0
                    Density = CTRL_calculate_lcp_density(Volume);
   18570:	f7fb fe3a 	bl	141e8 <CTRL_calculate_lcp_density>
   18574:	ee10 0a10 	vmov	r0, s0
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   18578:	f7f3 ff26 	bl	c3c8 <__aeabi_f2d>
   1857c:	4602      	mov	r2, r0
   1857e:	4628      	mov	r0, r5
   18580:	4614      	mov	r4, r2
   18582:	460d      	mov	r5, r1
   18584:	f7f3 ff20 	bl	c3c8 <__aeabi_f2d>
   18588:	4606      	mov	r6, r0
   1858a:	9815      	ldr	r0, [sp, #84]	@ 0x54
   1858c:	460f      	mov	r7, r1
   1858e:	f7f3 ff1b 	bl	c3c8 <__aeabi_f2d>
   18592:	4622      	mov	r2, r4
   18594:	e9cd 0102 	strd	r0, r1, [sp, #8]
   18598:	462b      	mov	r3, r5
   1859a:	e9cd 6700 	strd	r6, r7, [sp]
   1859e:	487e      	ldr	r0, [pc, #504]	@ (18798 <module_sps_park+0x718>)
   185a0:	f7f8 fd62 	bl	11068 <am_util_stdio_printf>
   185a4:	9815      	ldr	r0, [sp, #84]	@ 0x54
   185a6:	f7f3 ff0f 	bl	c3c8 <__aeabi_f2d>
   185aa:	462b      	mov	r3, r5
   185ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   185b0:	4622      	mov	r2, r4
   185b2:	4879      	ldr	r0, [pc, #484]	@ (18798 <module_sps_park+0x718>)
   185b4:	e9cd 6700 	strd	r6, r7, [sp]
   185b8:	f005 fcde 	bl	1df78 <datalogger_log_debug>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->finished\n");
   185bc:	4877      	ldr	r0, [pc, #476]	@ (1879c <module_sps_park+0x71c>)
   185be:	f7f8 fd53 	bl	11068 <am_util_stdio_printf>
   185c2:	4876      	ldr	r0, [pc, #472]	@ (1879c <module_sps_park+0x71c>)
   185c4:	f005 fcd8 	bl	1df78 <datalogger_log_debug>
                        if (park_period >= xDelay10000ms)
   185c8:	f242 730f 	movw	r3, #9999	@ 0x270f
                    if (crush_depth)
   185cc:	f1b9 0f00 	cmp.w	r9, #0
   185d0:	f000 80c8 	beq.w	18764 <module_sps_park+0x6e4>
                        if (park_period >= xDelay10000ms)
   185d4:	459b      	cmp	fp, r3
   185d6:	f240 8105 	bls.w	187e4 <module_sps_park+0x764>
                        spsEvent = MODE_POPUP;
   185da:	2302      	movs	r3, #2
                        vTaskDelay(piston_period);
   185dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                        spsEvent = MODE_POPUP;
   185e0:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
                        vTaskDelay(piston_period);
   185e4:	f7f6 fefe 	bl	f3e4 <vTaskDelay>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   185e8:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   185ec:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   185f0:	eef4 7ac7 	vcmpe.f32	s15, s14
   185f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   185f8:	f6bf aef4 	bge.w	183e4 <module_sps_park+0x364>
                        run = false;
   185fc:	2400      	movs	r4, #0
                    piston_timer = 0;
   185fe:	9409      	str	r4, [sp, #36]	@ 0x24
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   18600:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
   18604:	eef4 7ac7 	vcmpe.f32	s15, s14
   18608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1860c:	f04f 0700 	mov.w	r7, #0
   18610:	f6bf aeee 	bge.w	183f0 <module_sps_park+0x370>
   18614:	f04f 0901 	mov.w	r9, #1
   18618:	e670      	b.n	182fc <module_sps_park+0x27c>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->suspended\n");
   1861a:	4628      	mov	r0, r5
   1861c:	f7f8 fd24 	bl	11068 <am_util_stdio_printf>
   18620:	4628      	mov	r0, r5
   18622:	f005 fca9 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   18626:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18628:	f7fb fca0 	bl	13f6c <PIS_task_delete>
                    vTaskDelay(piston_period);
   1862c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18630:	f7f6 fed8 	bl	f3e4 <vTaskDelay>
                            piston_timer = 0;
   18634:	2600      	movs	r6, #0
   18636:	e773      	b.n	18520 <module_sps_park+0x4a0>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->Ready\n");
   18638:	4859      	ldr	r0, [pc, #356]	@ (187a0 <module_sps_park+0x720>)
   1863a:	f7f8 fd15 	bl	11068 <am_util_stdio_printf>
   1863e:	4858      	ldr	r0, [pc, #352]	@ (187a0 <module_sps_park+0x720>)
   18640:	46b9      	mov	r9, r7
   18642:	f005 fc99 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(piston_period);
   18646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1864a:	f7f6 fecb 	bl	f3e4 <vTaskDelay>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1864e:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18652:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18656:	eef4 7ac7 	vcmpe.f32	s15, s14
   1865a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1865e:	f280 8105 	bge.w	1886c <module_sps_park+0x7ec>
                    piston_move = false;
   18662:	2700      	movs	r7, #0
                    piston_timer = 0;
   18664:	9709      	str	r7, [sp, #36]	@ 0x24
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   18666:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
   1866a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1866e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18672:	f2c0 837b 	blt.w	18d6c <module_sps_park+0xcec>
   18676:	f1b9 0f00 	cmp.w	r9, #0
   1867a:	f000 81c0 	beq.w	189fe <module_sps_park+0x97e>
        vTaskDelay(park_period);
   1867e:	4658      	mov	r0, fp
   18680:	f7f6 feb0 	bl	f3e4 <vTaskDelay>
    while (run)
   18684:	44d8      	add	r8, fp
   18686:	f04f 0901 	mov.w	r9, #1
   1868a:	e6b9      	b.n	18400 <module_sps_park+0x380>
            float std = std_div(samples_p, samples, &var, &avg_p);
   1868c:	ab17      	add	r3, sp, #92	@ 0x5c
   1868e:	aa16      	add	r2, sp, #88	@ 0x58
   18690:	4651      	mov	r1, sl
   18692:	a81c      	add	r0, sp, #112	@ 0x70
   18694:	f7fc fc74 	bl	14f80 <std_div>
   18698:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("SPS :: park, Pressure Variance = %0.4f, Std_Div = %0.4f\n", var, std);
   1869c:	f7f3 fe94 	bl	c3c8 <__aeabi_f2d>
   186a0:	4604      	mov	r4, r0
   186a2:	9816      	ldr	r0, [sp, #88]	@ 0x58
   186a4:	460d      	mov	r5, r1
   186a6:	f7f3 fe8f 	bl	c3c8 <__aeabi_f2d>
   186aa:	e9cd 4500 	strd	r4, r5, [sp]
   186ae:	4602      	mov	r2, r0
   186b0:	460b      	mov	r3, r1
   186b2:	483c      	ldr	r0, [pc, #240]	@ (187a4 <module_sps_park+0x724>)
   186b4:	f7f8 fcd8 	bl	11068 <am_util_stdio_printf>
   186b8:	9816      	ldr	r0, [sp, #88]	@ 0x58
   186ba:	f7f3 fe85 	bl	c3c8 <__aeabi_f2d>
   186be:	e9cd 4500 	strd	r4, r5, [sp]
   186c2:	4602      	mov	r2, r0
   186c4:	460b      	mov	r3, r1
   186c6:	4837      	ldr	r0, [pc, #220]	@ (187a4 <module_sps_park+0x724>)
   186c8:	f005 fc56 	bl	1df78 <datalogger_log_debug>
            std = std_div(samples_t, samples, &var, &avg_t);
   186cc:	aa16      	add	r2, sp, #88	@ 0x58
   186ce:	ab18      	add	r3, sp, #96	@ 0x60
   186d0:	4651      	mov	r1, sl
   186d2:	a826      	add	r0, sp, #152	@ 0x98
   186d4:	f7fc fc54 	bl	14f80 <std_div>
   186d8:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("SPS :: park, Temperature Variance = %0.4f, Std_Div = %0.4f\n", var, std);
   186dc:	f7f3 fe74 	bl	c3c8 <__aeabi_f2d>
   186e0:	4604      	mov	r4, r0
   186e2:	9816      	ldr	r0, [sp, #88]	@ 0x58
   186e4:	460d      	mov	r5, r1
   186e6:	f7f3 fe6f 	bl	c3c8 <__aeabi_f2d>
   186ea:	e9cd 4500 	strd	r4, r5, [sp]
   186ee:	4602      	mov	r2, r0
   186f0:	460b      	mov	r3, r1
   186f2:	482d      	ldr	r0, [pc, #180]	@ (187a8 <module_sps_park+0x728>)
   186f4:	f7f8 fcb8 	bl	11068 <am_util_stdio_printf>
   186f8:	9816      	ldr	r0, [sp, #88]	@ 0x58
   186fa:	f7f3 fe65 	bl	c3c8 <__aeabi_f2d>
   186fe:	e9cd 4500 	strd	r4, r5, [sp]
   18702:	4602      	mov	r2, r0
   18704:	460b      	mov	r3, r1
   18706:	4828      	ldr	r0, [pc, #160]	@ (187a8 <module_sps_park+0x728>)
   18708:	f005 fc36 	bl	1df78 <datalogger_log_debug>
            DATA_add(&park, epoch, avg_p, avg_t, park_number);
   1870c:	4b1d      	ldr	r3, [pc, #116]	@ (18784 <module_sps_park+0x704>)
   1870e:	eddd 0a18 	vldr	s1, [sp, #96]	@ 0x60
   18712:	ed9d 0a17 	vldr	s0, [sp, #92]	@ 0x5c
   18716:	781a      	ldrb	r2, [r3, #0]
   18718:	481b      	ldr	r0, [pc, #108]	@ (18788 <module_sps_park+0x708>)
   1871a:	4631      	mov	r1, r6
   1871c:	f7fc f8bc 	bl	14898 <DATA_add>
            datalogger_park_mode(filename, avg_p, avg_t, &time);
   18720:	eddd 0a18 	vldr	s1, [sp, #96]	@ 0x60
   18724:	ed9d 0a17 	vldr	s0, [sp, #92]	@ 0x5c
   18728:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1872a:	a919      	add	r1, sp, #100	@ 0x64
   1872c:	f006 f804 	bl	1e738 <datalogger_park_mode>
            samples = 0;
   18730:	f04f 0a00 	mov.w	sl, #0
   18734:	e5a3      	b.n	1827e <module_sps_park+0x1fe>
                        if (piston_timer >= 30000)
   18736:	f247 532f 	movw	r3, #29999	@ 0x752f
   1873a:	429e      	cmp	r6, r3
   1873c:	f67f af09 	bls.w	18552 <module_sps_park+0x4d2>
                            ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston time-out, task->finished\n");
   18740:	481a      	ldr	r0, [pc, #104]	@ (187ac <module_sps_park+0x72c>)
   18742:	f7f8 fc91 	bl	11068 <am_util_stdio_printf>
   18746:	4819      	ldr	r0, [pc, #100]	@ (187ac <module_sps_park+0x72c>)
   18748:	f005 fc16 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   1874c:	9814      	ldr	r0, [sp, #80]	@ 0x50
   1874e:	f7fb fc0d 	bl	13f6c <PIS_task_delete>
                            vTaskDelay(piston_period);
   18752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18756:	f7f6 fe45 	bl	f3e4 <vTaskDelay>
                            PIS_Reset();
   1875a:	f7fb fcfd 	bl	14158 <PIS_Reset>
                if (park_period >= xDelay10000ms)
   1875e:	e765      	b.n	1862c <module_sps_park+0x5ac>
            piston_move = true;
   18760:	2701      	movs	r7, #1
   18762:	e78c      	b.n	1867e <module_sps_park+0x5fe>
                if (park_period >= xDelay10000ms)
   18764:	459b      	cmp	fp, r3
   18766:	d825      	bhi.n	187b4 <module_sps_park+0x734>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18768:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   1876c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18770:	eef4 7ac7 	vcmpe.f32	s15, s14
   18774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18778:	db29      	blt.n	187ce <module_sps_park+0x74e>
                piston_timer = 0;
   1877a:	2300      	movs	r3, #0
   1877c:	9309      	str	r3, [sp, #36]	@ 0x24
   1877e:	e677      	b.n	18470 <module_sps_park+0x3f0>
   18780:	0002dab4 	.word	0x0002dab4
   18784:	1000b9e1 	.word	0x1000b9e1
   18788:	1000bcd4 	.word	0x1000bcd4
   1878c:	0002d994 	.word	0x0002d994
   18790:	0002d940 	.word	0x0002d940
   18794:	0001d4bf 	.word	0x0001d4bf
   18798:	0002da1c 	.word	0x0002da1c
   1879c:	0002da60 	.word	0x0002da60
   187a0:	0002d9f8 	.word	0x0002d9f8
   187a4:	0002d734 	.word	0x0002d734
   187a8:	0002d770 	.word	0x0002d770
   187ac:	0002d964 	.word	0x0002d964
   187b0:	00000000 	.word	0x00000000
                    vTaskDelay(piston_period);
   187b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   187b8:	f7f6 fe14 	bl	f3e4 <vTaskDelay>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   187bc:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   187c0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   187c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   187c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   187cc:	dad5      	bge.n	1877a <module_sps_park+0x6fa>
   187ce:	464f      	mov	r7, r9
                    piston_timer = 0;
   187d0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
   187d4:	e747      	b.n	18666 <module_sps_park+0x5e6>
                    else if (averaged_rate < 0.0 && !piston_move && !crush_depth)
   187d6:	f100 8108 	bmi.w	189ea <module_sps_park+0x96a>
                rate_count = 0;
   187da:	2300      	movs	r3, #0
                rate_avg = 0.0;
   187dc:	ed1f 8a0c 	vldr	s16, [pc, #-48]	@ 187b0 <module_sps_park+0x730>
                rate_count = 0;
   187e0:	9308      	str	r3, [sp, #32]
   187e2:	e638      	b.n	18456 <module_sps_park+0x3d6>
                            SENS_task_delete(xTemp);
   187e4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   187e6:	f7fc ffc3 	bl	15770 <SENS_task_delete>
                            SENS_sensor_temperature_off();
   187ea:	f7fc ff5d 	bl	156a8 <SENS_sensor_temperature_off>
                            SENS_task_delete(xDepth);
   187ee:	980e      	ldr	r0, [sp, #56]	@ 0x38
   187f0:	f7fc ffbe 	bl	15770 <SENS_task_delete>
                            SENS_sensor_depth_off();
   187f4:	f7fc ff50 	bl	15698 <SENS_sensor_depth_off>
   187f8:	e6ef      	b.n	185da <module_sps_park+0x55a>
                            ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston CRUSH_DEPTH time-out, task->finished\n");
   187fa:	48cf      	ldr	r0, [pc, #828]	@ (18b38 <module_sps_park+0xab8>)
   187fc:	f7f8 fc34 	bl	11068 <am_util_stdio_printf>
   18800:	48cd      	ldr	r0, [pc, #820]	@ (18b38 <module_sps_park+0xab8>)
   18802:	e7a1      	b.n	18748 <module_sps_park+0x6c8>
        ARTEMIS_DEBUG_PRINTF("\nSPS :: park, < PARK_TIME = %.2f mins >\n\n", (float)(PARK_TIME/60));
   18804:	4bcd      	ldr	r3, [pc, #820]	@ (18b3c <module_sps_park+0xabc>)
   18806:	48ce      	ldr	r0, [pc, #824]	@ (18b40 <module_sps_park+0xac0>)
    uint32_t park_period = xDelay1000ms/s_rate;
   18808:	f8df b378 	ldr.w	fp, [pc, #888]	@ 18b84 <module_sps_park+0xb04>
        s_rate = PARK_RATE;
   1880c:	eddf 8acd 	vldr	s17, [pc, #820]	@ 18b44 <module_sps_park+0xac4>
        ARTEMIS_DEBUG_PRINTF("\nSPS :: park, < PARK_TIME = %.2f mins >\n\n", (float)(PARK_TIME/60));
   18810:	2200      	movs	r2, #0
   18812:	f7f8 fc29 	bl	11068 <am_util_stdio_printf>
   18816:	4bc9      	ldr	r3, [pc, #804]	@ (18b3c <module_sps_park+0xabc>)
   18818:	48c9      	ldr	r0, [pc, #804]	@ (18b40 <module_sps_park+0xac0>)
   1881a:	2200      	movs	r2, #0
   1881c:	f005 fbac 	bl	1df78 <datalogger_log_debug>
    SENS_set_depth_rate(s_rate);
   18820:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 18b44 <module_sps_park+0xac4>
   18824:	f7fd f9ba 	bl	15b9c <SENS_set_depth_rate>
    SENS_set_temperature_rate(s_rate);
   18828:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 18b44 <module_sps_park+0xac4>
   1882c:	f7fd f9e6 	bl	15bfc <SENS_set_temperature_rate>
    TaskHandle_t xDepth = NULL;
   18830:	2300      	movs	r3, #0
    vTaskDelay(xDelay100ms);
   18832:	2064      	movs	r0, #100	@ 0x64
    TaskHandle_t xTemp  = NULL;
   18834:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    vTaskDelay(xDelay100ms);
   18838:	f7f6 fdd4 	bl	f3e4 <vTaskDelay>
        park_time = (xDelay1000ms * PARK_TIME);
   1883c:	4bc2      	ldr	r3, [pc, #776]	@ (18b48 <module_sps_park+0xac8>)
   1883e:	930b      	str	r3, [sp, #44]	@ 0x2c
   18840:	e450      	b.n	180e4 <module_sps_park+0x64>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->Ready\n");
   18842:	48c2      	ldr	r0, [pc, #776]	@ (18b4c <module_sps_park+0xacc>)
   18844:	f7f8 fc10 	bl	11068 <am_util_stdio_printf>
   18848:	48c0      	ldr	r0, [pc, #768]	@ (18b4c <module_sps_park+0xacc>)
   1884a:	f005 fb95 	bl	1df78 <datalogger_log_debug>
                if (park_period >= xDelay10000ms)
   1884e:	f242 730f 	movw	r3, #9999	@ 0x270f
   18852:	459b      	cmp	fp, r3
   18854:	f63f aef7 	bhi.w	18646 <module_sps_park+0x5c6>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18858:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   1885c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18860:	eef4 7ac7 	vcmpe.f32	s15, s14
   18864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18868:	f6ff aefb 	blt.w	18662 <module_sps_park+0x5e2>
   1886c:	f1b9 0f00 	cmp.w	r9, #0
   18870:	d083      	beq.n	1877a <module_sps_park+0x6fa>
    while (run)
   18872:	2700      	movs	r7, #0
   18874:	f04f 0901 	mov.w	r9, #1
                    piston_timer = 0;
   18878:	9709      	str	r7, [sp, #36]	@ 0x24
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   1887a:	464c      	mov	r4, r9
   1887c:	e5b8      	b.n	183f0 <module_sps_park+0x370>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1887e:	464c      	mov	r4, r9
   18880:	9708      	str	r7, [sp, #32]
   18882:	e6bd      	b.n	18600 <module_sps_park+0x580>
                        length_update += PARK_POSITION_INCREMENT;
   18884:	eddf 7ab2 	vldr	s15, [pc, #712]	@ 18b50 <module_sps_park+0xad0>
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Positive, averaged_rate=%f, increase %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT, length_update);
   18888:	ee16 0a90 	vmov	r0, s13
                        length_update += PARK_POSITION_INCREMENT2;
   1888c:	ee39 9a27 	vadd.f32	s18, s18, s15
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Positive, averaged_rate=%f, increase %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT, length_update);
   18890:	f7f3 fd9a 	bl	c3c8 <__aeabi_f2d>
   18894:	4606      	mov	r6, r0
   18896:	ee19 0a10 	vmov	r0, s18
   1889a:	460f      	mov	r7, r1
   1889c:	f7f3 fd94 	bl	c3c8 <__aeabi_f2d>
   188a0:	ed9f aba1 	vldr	d10, [pc, #644]	@ 18b28 <module_sps_park+0xaa8>
   188a4:	460d      	mov	r5, r1
   188a6:	4604      	mov	r4, r0
   188a8:	4632      	mov	r2, r6
   188aa:	463b      	mov	r3, r7
   188ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
   188b0:	ed8d ab00 	vstr	d10, [sp]
   188b4:	48a7      	ldr	r0, [pc, #668]	@ (18b54 <module_sps_park+0xad4>)
   188b6:	f7f8 fbd7 	bl	11068 <am_util_stdio_printf>
                        if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   188ba:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Positive, averaged_rate=%f, increase %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT, length_update);
   188be:	e9cd 4502 	strd	r4, r5, [sp, #8]
   188c2:	ed8d ab00 	vstr	d10, [sp]
   188c6:	48a3      	ldr	r0, [pc, #652]	@ (18b54 <module_sps_park+0xad4>)
   188c8:	4632      	mov	r2, r6
   188ca:	463b      	mov	r3, r7
   188cc:	f005 fb54 	bl	1df78 <datalogger_log_debug>
                        if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   188d0:	eeb4 9ac8 	vcmpe.f32	s18, s16
   188d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   188d8:	db1b      	blt.n	18912 <module_sps_park+0x892>
                            if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   188da:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   188de:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 18b58 <module_sps_park+0xad8>
   188e2:	eef4 7ac7 	vcmpe.f32	s15, s14
   188e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   188ea:	db12      	blt.n	18912 <module_sps_park+0x892>
                                ARTEMIS_DEBUG_PRINTF("\n<< SPS :: park, Depth=%.4f is @critial piston position >>\n", Depth);
   188ec:	ee17 0a90 	vmov	r0, s15
   188f0:	f7f3 fd6a 	bl	c3c8 <__aeabi_f2d>
   188f4:	4602      	mov	r2, r0
   188f6:	460b      	mov	r3, r1
   188f8:	4898      	ldr	r0, [pc, #608]	@ (18b5c <module_sps_park+0xadc>)
   188fa:	f7f8 fbb5 	bl	11068 <am_util_stdio_printf>
   188fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
   18900:	f7f3 fd62 	bl	c3c8 <__aeabi_f2d>
   18904:	4602      	mov	r2, r0
   18906:	460b      	mov	r3, r1
   18908:	4894      	ldr	r0, [pc, #592]	@ (18b5c <module_sps_park+0xadc>)
   1890a:	f005 fb35 	bl	1df78 <datalogger_log_debug>
                                length_update = CRUSH_DEPTH_PISTON_POSITION;
   1890e:	eeb0 9a48 	vmov.f32	s18, s16
                        park_piston_length = length_update;
   18912:	4b93      	ldr	r3, [pc, #588]	@ (18b60 <module_sps_park+0xae0>)
   18914:	ed9f 8a93 	vldr	s16, [pc, #588]	@ 18b64 <module_sps_park+0xae4>
   18918:	ed83 9a00 	vstr	s18, [r3]
                        PIS_set_length(length_update);
   1891c:	eeb0 0a49 	vmov.f32	s0, s18
   18920:	f7fb fbd4 	bl	140cc <PIS_set_length>
                        PIS_task_move_length(&xPiston);
   18924:	a814      	add	r0, sp, #80	@ 0x50
   18926:	f7fb fa81 	bl	13e2c <PIS_task_move_length>
        if (piston_move)
   1892a:	f242 730f 	movw	r3, #9999	@ 0x270f
   1892e:	459b      	cmp	fp, r3
   18930:	f04f 0300 	mov.w	r3, #0
   18934:	9308      	str	r3, [sp, #32]
   18936:	f63f adef 	bhi.w	18518 <module_sps_park+0x498>
                eStatus = eTaskGetState( xPiston );
   1893a:	9814      	ldr	r0, [sp, #80]	@ 0x50
   1893c:	f7f6 f9b6 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   18940:	2804      	cmp	r0, #4
   18942:	f200 8137 	bhi.w	18bb4 <module_sps_park+0xb34>
   18946:	a301      	add	r3, pc, #4	@ (adr r3, 1894c <module_sps_park+0x8cc>)
   18948:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1894c:	00018be3 	.word	0x00018be3
   18950:	00018843 	.word	0x00018843
   18954:	00018be3 	.word	0x00018be3
   18958:	00018b9f 	.word	0x00018b9f
   1895c:	0001855f 	.word	0x0001855f
                    if (averaged_rate <= 0.0 && !piston_move && !crush_depth)
   18960:	2f00      	cmp	r7, #0
   18962:	f47f add0 	bne.w	18506 <module_sps_park+0x486>
   18966:	f1b9 0f00 	cmp.w	r9, #0
   1896a:	f47f acba 	bne.w	182e2 <module_sps_park+0x262>
                        length_update -= PARK_POSITION_INCREMENT;
   1896e:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 18b50 <module_sps_park+0xad0>
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Negative, averaged_rate=%f, decrease %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT, length_update);
   18972:	ee17 0a90 	vmov	r0, s15
                        length_update -= PARK_POSITION_INCREMENT;
   18976:	ee39 9a47 	vsub.f32	s18, s18, s14
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Negative, averaged_rate=%f, decrease %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT, length_update);
   1897a:	f7f3 fd25 	bl	c3c8 <__aeabi_f2d>
   1897e:	4604      	mov	r4, r0
   18980:	ee19 0a10 	vmov	r0, s18
   18984:	460d      	mov	r5, r1
   18986:	f7f3 fd1f 	bl	c3c8 <__aeabi_f2d>
   1898a:	ed9f ab67 	vldr	d10, [pc, #412]	@ 18b28 <module_sps_park+0xaa8>
   1898e:	460f      	mov	r7, r1
   18990:	4606      	mov	r6, r0
   18992:	4622      	mov	r2, r4
   18994:	462b      	mov	r3, r5
   18996:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1899a:	ed8d ab00 	vstr	d10, [sp]
   1899e:	4872      	ldr	r0, [pc, #456]	@ (18b68 <module_sps_park+0xae8>)
   189a0:	f7f8 fb62 	bl	11068 <am_util_stdio_printf>
                        if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   189a4:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Negative, averaged_rate=%f, decrease %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT, length_update);
   189a8:	ed8d ab00 	vstr	d10, [sp]
   189ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
   189b0:	486d      	ldr	r0, [pc, #436]	@ (18b68 <module_sps_park+0xae8>)
   189b2:	4622      	mov	r2, r4
   189b4:	462b      	mov	r3, r5
   189b6:	f005 fadf 	bl	1df78 <datalogger_log_debug>
                        if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   189ba:	eeb4 9ac8 	vcmpe.f32	s18, s16
   189be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   189c2:	f2c0 8150 	blt.w	18c66 <module_sps_park+0xbe6>
                            if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   189c6:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   189ca:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 18b58 <module_sps_park+0xad8>
   189ce:	eef4 7ac7 	vcmpe.f32	s15, s14
   189d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   189d6:	f280 812b 	bge.w	18c30 <module_sps_park+0xbb0>
                        PIS_Get_Length(&Length);
   189da:	a815      	add	r0, sp, #84	@ 0x54
   189dc:	f7fb fb1e 	bl	1401c <PIS_Get_Length>
                        vTaskDelay(piston_period);
   189e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   189e4:	f7f6 fcfe 	bl	f3e4 <vTaskDelay>
                        if (length_update <= PISTON_POSITION_MINIMUM && Length <= PISTON_POSITION_MINIMUM)
   189e8:	e793      	b.n	18912 <module_sps_park+0x892>
                    else if (averaged_rate < 0.0 && !piston_move && !crush_depth)
   189ea:	2f00      	cmp	r7, #0
   189ec:	f47f ad8b 	bne.w	18506 <module_sps_park+0x486>
   189f0:	f1b9 0f00 	cmp.w	r9, #0
   189f4:	f47f ad68 	bne.w	184c8 <module_sps_park+0x448>
                        length_update += PARK_POSITION_INCREMENT2;
   189f8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 18b6c <module_sps_park+0xaec>
   189fc:	e744      	b.n	18888 <module_sps_park+0x808>
            if (piston_move)
   189fe:	2f00      	cmp	r7, #0
   18a00:	d17f      	bne.n	18b02 <module_sps_park+0xa82>
            if (park_period >= xDelay10000ms)
   18a02:	f242 730f 	movw	r3, #9999	@ 0x270f
   18a06:	459b      	cmp	fp, r3
   18a08:	f240 80be 	bls.w	18b88 <module_sps_park+0xb08>
            ARTEMIS_DEBUG_PRINTF("\n\nSPS :: park, << Reached maximum Park Depth >>\n\n");
   18a0c:	4858      	ldr	r0, [pc, #352]	@ (18b70 <module_sps_park+0xaf0>)
   18a0e:	f7f8 fb2b 	bl	11068 <am_util_stdio_printf>
   18a12:	4857      	ldr	r0, [pc, #348]	@ (18b70 <module_sps_park+0xaf0>)
   18a14:	f005 fab0 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(piston_period);
   18a18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18a1c:	f7f6 fce2 	bl	f3e4 <vTaskDelay>
            spsEvent = MODE_DONE;
   18a20:	2304      	movs	r3, #4
   18a22:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
            break;
   18a26:	e496      	b.n	18356 <module_sps_park+0x2d6>
                        length_update -= PARK_POSITION_INCREMENT2;
   18a28:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 18b6c <module_sps_park+0xaec>
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Positive, averaged_rate=%f, decrease %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT2, length_update);
   18a2c:	ee17 0a90 	vmov	r0, s15
                        length_update -= PARK_POSITION_INCREMENT2;
   18a30:	ee39 9a47 	vsub.f32	s18, s18, s14
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Positive, averaged_rate=%f, decrease %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT2, length_update);
   18a34:	f7f3 fcc8 	bl	c3c8 <__aeabi_f2d>
   18a38:	4606      	mov	r6, r0
   18a3a:	ee19 0a10 	vmov	r0, s18
   18a3e:	460f      	mov	r7, r1
   18a40:	f7f3 fcc2 	bl	c3c8 <__aeabi_f2d>
   18a44:	ed9f ab3a 	vldr	d10, [pc, #232]	@ 18b30 <module_sps_park+0xab0>
   18a48:	460d      	mov	r5, r1
   18a4a:	4604      	mov	r4, r0
   18a4c:	4632      	mov	r2, r6
   18a4e:	463b      	mov	r3, r7
   18a50:	e9cd 4502 	strd	r4, r5, [sp, #8]
   18a54:	ed8d ab00 	vstr	d10, [sp]
   18a58:	4846      	ldr	r0, [pc, #280]	@ (18b74 <module_sps_park+0xaf4>)
   18a5a:	f7f8 fb05 	bl	11068 <am_util_stdio_printf>
                        if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   18a5e:	eeb1 8a05 	vmov.f32	s16, #21	@ 0x40a80000  5.250
                        ARTEMIS_DEBUG_PRINTF("SPS :: park, Depth Rate Positive, averaged_rate=%f, decrease %fin, length_update=%.4fin\n", averaged_rate, PARK_POSITION_INCREMENT2, length_update);
   18a62:	ed8d ab00 	vstr	d10, [sp]
   18a66:	e9cd 4502 	strd	r4, r5, [sp, #8]
   18a6a:	4842      	ldr	r0, [pc, #264]	@ (18b74 <module_sps_park+0xaf4>)
   18a6c:	4632      	mov	r2, r6
   18a6e:	463b      	mov	r3, r7
   18a70:	f005 fa82 	bl	1df78 <datalogger_log_debug>
                        if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   18a74:	eeb4 9ac8 	vcmpe.f32	s18, s16
   18a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18a7c:	daa3      	bge.n	189c6 <module_sps_park+0x946>
                        if (length_update <= PISTON_POSITION_MINIMUM)
   18a7e:	ed9f 8a3e 	vldr	s16, [pc, #248]	@ 18b78 <module_sps_park+0xaf8>
   18a82:	eeb4 9ac8 	vcmpe.f32	s18, s16
   18a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18a8a:	d8a6      	bhi.n	189da <module_sps_park+0x95a>
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: park, length_update=%.4fin < piston position minimum >>\n", length_update);
   18a8c:	4622      	mov	r2, r4
   18a8e:	462b      	mov	r3, r5
   18a90:	483a      	ldr	r0, [pc, #232]	@ (18b7c <module_sps_park+0xafc>)
   18a92:	f7f8 fae9 	bl	11068 <am_util_stdio_printf>
   18a96:	4622      	mov	r2, r4
   18a98:	462b      	mov	r3, r5
   18a9a:	4838      	ldr	r0, [pc, #224]	@ (18b7c <module_sps_park+0xafc>)
   18a9c:	f005 fa6c 	bl	1df78 <datalogger_log_debug>
                        PIS_Get_Length(&Length);
   18aa0:	a815      	add	r0, sp, #84	@ 0x54
   18aa2:	f7fb fabb 	bl	1401c <PIS_Get_Length>
                        vTaskDelay(piston_period);
   18aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18aaa:	f7f6 fc9b 	bl	f3e4 <vTaskDelay>
                        if (length_update <= PISTON_POSITION_MINIMUM && Length <= PISTON_POSITION_MINIMUM)
   18aae:	eddd 7a15 	vldr	s15, [sp, #84]	@ 0x54
   18ab2:	eef4 7ac8 	vcmpe.f32	s15, s16
   18ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18aba:	f200 80d1 	bhi.w	18c60 <module_sps_park+0xbe0>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18abe:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18ac2:	ed9f 9a2d 	vldr	s18, [pc, #180]	@ 18b78 <module_sps_park+0xaf8>
   18ac6:	ed9f 8a27 	vldr	s16, [pc, #156]	@ 18b64 <module_sps_park+0xae4>
   18aca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18ace:	eef4 7ac7 	vcmpe.f32	s15, s14
   18ad2:	2300      	movs	r3, #0
   18ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ad8:	9308      	str	r3, [sp, #32]
   18ada:	f6bf acc9 	bge.w	18470 <module_sps_park+0x3f0>
   18ade:	461f      	mov	r7, r3
   18ae0:	e5c1      	b.n	18666 <module_sps_park+0x5e6>
                ARTEMIS_DEBUG_PRINTF("SPS :: park, deliberately stopping the Piston\n");
   18ae2:	4827      	ldr	r0, [pc, #156]	@ (18b80 <module_sps_park+0xb00>)
   18ae4:	f7f8 fac0 	bl	11068 <am_util_stdio_printf>
   18ae8:	4825      	ldr	r0, [pc, #148]	@ (18b80 <module_sps_park+0xb00>)
   18aea:	f005 fa45 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   18aee:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18af0:	f7fb fa3c 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   18af4:	f7fb fb1c 	bl	14130 <PIS_stop>
                vTaskDelay(piston_period);
   18af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18afc:	f7f6 fc72 	bl	f3e4 <vTaskDelay>
                piston_timer = 0;
   18b00:	e41d      	b.n	1833e <module_sps_park+0x2be>
                ARTEMIS_DEBUG_PRINTF("SPS :: park, deliberately stopping the Piston\n");
   18b02:	481f      	ldr	r0, [pc, #124]	@ (18b80 <module_sps_park+0xb00>)
   18b04:	f7f8 fab0 	bl	11068 <am_util_stdio_printf>
   18b08:	481d      	ldr	r0, [pc, #116]	@ (18b80 <module_sps_park+0xb00>)
   18b0a:	f005 fa35 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   18b0e:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18b10:	f7fb fa2c 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   18b14:	f7fb fb0c 	bl	14130 <PIS_stop>
                vTaskDelay(piston_period);
   18b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18b1c:	f7f6 fc62 	bl	f3e4 <vTaskDelay>
                piston_timer = 0;
   18b20:	e76f      	b.n	18a02 <module_sps_park+0x982>
   18b22:	bf00      	nop
   18b24:	f3af 8000 	nop.w
   18b28:	e0000000 	.word	0xe0000000
   18b2c:	3f9eb851 	.word	0x3f9eb851
   18b30:	40000000 	.word	0x40000000
   18b34:	3f847ae1 	.word	0x3f847ae1
   18b38:	0002d9bc 	.word	0x0002d9bc
   18b3c:	40080000 	.word	0x40080000
   18b40:	0002d65c 	.word	0x0002d65c
   18b44:	3ada740e 	.word	0x3ada740e
   18b48:	0002bf20 	.word	0x0002bf20
   18b4c:	0002d9f8 	.word	0x0002d9f8
   18b50:	3cf5c28f 	.word	0x3cf5c28f
   18b54:	0002d7ac 	.word	0x0002d7ac
   18b58:	42340000 	.word	0x42340000
   18b5c:	0002d808 	.word	0x0002d808
   18b60:	1000b9cc 	.word	0x1000b9cc
   18b64:	00000000 	.word	0x00000000
   18b68:	0002d844 	.word	0x0002d844
   18b6c:	3c23d70a 	.word	0x3c23d70a
   18b70:	0002dae8 	.word	0x0002dae8
   18b74:	0002d8e4 	.word	0x0002d8e4
   18b78:	3dcccccd 	.word	0x3dcccccd
   18b7c:	0002d8a0 	.word	0x0002d8a0
   18b80:	0002da84 	.word	0x0002da84
   18b84:	000927c0 	.word	0x000927c0
                SENS_task_delete(xTemp);
   18b88:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   18b8a:	f7fc fdf1 	bl	15770 <SENS_task_delete>
                SENS_sensor_temperature_off();
   18b8e:	f7fc fd8b 	bl	156a8 <SENS_sensor_temperature_off>
                SENS_task_delete(xDepth);
   18b92:	980e      	ldr	r0, [sp, #56]	@ 0x38
   18b94:	f7fc fdec 	bl	15770 <SENS_task_delete>
                SENS_sensor_depth_off();
   18b98:	f7fc fd7e 	bl	15698 <SENS_sensor_depth_off>
   18b9c:	e736      	b.n	18a0c <module_sps_park+0x98c>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->suspended\n");
   18b9e:	4875      	ldr	r0, [pc, #468]	@ (18d74 <module_sps_park+0xcf4>)
   18ba0:	f7f8 fa62 	bl	11068 <am_util_stdio_printf>
   18ba4:	4873      	ldr	r0, [pc, #460]	@ (18d74 <module_sps_park+0xcf4>)
   18ba6:	f005 f9e7 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   18baa:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18bac:	f7fb f9de 	bl	13f6c <PIS_task_delete>
                            piston_timer = 0;
   18bb0:	2300      	movs	r3, #0
   18bb2:	9309      	str	r3, [sp, #36]	@ 0x24
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18bb4:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18bb8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
   18bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18bc4:	db26      	blt.n	18c14 <module_sps_park+0xb94>
                ARTEMIS_DEBUG_PRINTF("SPS :: park, deliberately stopping the Piston\n");
   18bc6:	486c      	ldr	r0, [pc, #432]	@ (18d78 <module_sps_park+0xcf8>)
   18bc8:	f7f8 fa4e 	bl	11068 <am_util_stdio_printf>
   18bcc:	486a      	ldr	r0, [pc, #424]	@ (18d78 <module_sps_park+0xcf8>)
   18bce:	f005 f9d3 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   18bd2:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18bd4:	f7fb f9ca 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   18bd8:	f7fb faaa 	bl	14130 <PIS_stop>
                piston_timer = 0;
   18bdc:	2300      	movs	r3, #0
   18bde:	9309      	str	r3, [sp, #36]	@ 0x24
   18be0:	e446      	b.n	18470 <module_sps_park+0x3f0>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->active\n");
   18be2:	4866      	ldr	r0, [pc, #408]	@ (18d7c <module_sps_park+0xcfc>)
   18be4:	f7f8 fa40 	bl	11068 <am_util_stdio_printf>
   18be8:	4864      	ldr	r0, [pc, #400]	@ (18d7c <module_sps_park+0xcfc>)
   18bea:	f005 f9c5 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   18bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   18bf0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   18bf4:	461a      	mov	r2, r3
   18bf6:	9309      	str	r3, [sp, #36]	@ 0x24
                        if (piston_timer >= 30000)
   18bf8:	f247 532f 	movw	r3, #29999	@ 0x752f
   18bfc:	429a      	cmp	r2, r3
   18bfe:	f200 80a5 	bhi.w	18d4c <module_sps_park+0xccc>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18c02:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18c06:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
   18c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18c12:	dad8      	bge.n	18bc6 <module_sps_park+0xb46>
   18c14:	2701      	movs	r7, #1
   18c16:	e526      	b.n	18666 <module_sps_park+0x5e6>
                SENS_task_delete(xTemp);
   18c18:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   18c1a:	f7fc fda9 	bl	15770 <SENS_task_delete>
                SENS_sensor_temperature_off();
   18c1e:	f7fc fd43 	bl	156a8 <SENS_sensor_temperature_off>
                SENS_task_delete(xDepth);
   18c22:	980e      	ldr	r0, [sp, #56]	@ 0x38
   18c24:	f7fc fda4 	bl	15770 <SENS_task_delete>
                SENS_sensor_depth_off();
   18c28:	f7fc fd36 	bl	15698 <SENS_sensor_depth_off>
   18c2c:	f7ff bb8c 	b.w	18348 <module_sps_park+0x2c8>
                                ARTEMIS_DEBUG_PRINTF("\n<< SPS :: park, Depth=%.4f is @critial piston position >>\n", Depth);
   18c30:	ee17 0a90 	vmov	r0, s15
   18c34:	f7f3 fbc8 	bl	c3c8 <__aeabi_f2d>
   18c38:	4602      	mov	r2, r0
   18c3a:	460b      	mov	r3, r1
   18c3c:	4850      	ldr	r0, [pc, #320]	@ (18d80 <module_sps_park+0xd00>)
   18c3e:	f7f8 fa13 	bl	11068 <am_util_stdio_printf>
   18c42:	9811      	ldr	r0, [sp, #68]	@ 0x44
   18c44:	f7f3 fbc0 	bl	c3c8 <__aeabi_f2d>
   18c48:	4602      	mov	r2, r0
   18c4a:	460b      	mov	r3, r1
   18c4c:	484c      	ldr	r0, [pc, #304]	@ (18d80 <module_sps_park+0xd00>)
   18c4e:	f005 f993 	bl	1df78 <datalogger_log_debug>
                        PIS_Get_Length(&Length);
   18c52:	a815      	add	r0, sp, #84	@ 0x54
   18c54:	f7fb f9e2 	bl	1401c <PIS_Get_Length>
                        vTaskDelay(piston_period);
   18c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18c5c:	f7f6 fbc2 	bl	f3e4 <vTaskDelay>
                                length_update = CRUSH_DEPTH_PISTON_POSITION;
   18c60:	eeb0 9a48 	vmov.f32	s18, s16
   18c64:	e655      	b.n	18912 <module_sps_park+0x892>
                        if (length_update <= PISTON_POSITION_MINIMUM)
   18c66:	ed9f 8a47 	vldr	s16, [pc, #284]	@ 18d84 <module_sps_park+0xd04>
   18c6a:	eeb4 9ac8 	vcmpe.f32	s18, s16
   18c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18c72:	f63f aeb2 	bhi.w	189da <module_sps_park+0x95a>
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: park, length_update=%.4fin < piston position minimum >>\n", length_update);
   18c76:	4632      	mov	r2, r6
   18c78:	463b      	mov	r3, r7
   18c7a:	4843      	ldr	r0, [pc, #268]	@ (18d88 <module_sps_park+0xd08>)
   18c7c:	f7f8 f9f4 	bl	11068 <am_util_stdio_printf>
   18c80:	4632      	mov	r2, r6
   18c82:	463b      	mov	r3, r7
   18c84:	e709      	b.n	18a9a <module_sps_park+0xa1a>
   18c86:	f1b9 0f00 	cmp.w	r9, #0
   18c8a:	f43f ae56 	beq.w	1893a <module_sps_park+0x8ba>
                eStatus = eTaskGetState( xPiston );
   18c8e:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18c90:	f7f6 f80c 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   18c94:	2804      	cmp	r0, #4
   18c96:	d81b      	bhi.n	18cd0 <module_sps_park+0xc50>
   18c98:	a301      	add	r3, pc, #4	@ (adr r3, 18ca0 <module_sps_park+0xc20>)
   18c9a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   18c9e:	bf00      	nop
   18ca0:	00018cb5 	.word	0x00018cb5
   18ca4:	00018d1f 	.word	0x00018d1f
   18ca8:	00018cb5 	.word	0x00018cb5
   18cac:	00018ced 	.word	0x00018ced
   18cb0:	0001855f 	.word	0x0001855f
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->active\n");
   18cb4:	4831      	ldr	r0, [pc, #196]	@ (18d7c <module_sps_park+0xcfc>)
   18cb6:	f7f8 f9d7 	bl	11068 <am_util_stdio_printf>
   18cba:	4830      	ldr	r0, [pc, #192]	@ (18d7c <module_sps_park+0xcfc>)
   18cbc:	f005 f95c 	bl	1df78 <datalogger_log_debug>
                    piston_timer += piston_period;
   18cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   18cc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   18cc6:	461a      	mov	r2, r3
   18cc8:	9309      	str	r3, [sp, #36]	@ 0x24
                        if (piston_timer >= 120000)
   18cca:	4b30      	ldr	r3, [pc, #192]	@ (18d8c <module_sps_park+0xd0c>)
   18ccc:	429a      	cmp	r2, r3
   18cce:	d82d      	bhi.n	18d2c <module_sps_park+0xcac>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18cd0:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18cd4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
   18cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ce0:	464f      	mov	r7, r9
   18ce2:	f6ff acc0 	blt.w	18666 <module_sps_park+0x5e6>
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   18ce6:	464c      	mov	r4, r9
   18ce8:	f7ff bb82 	b.w	183f0 <module_sps_park+0x370>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->suspended\n");
   18cec:	4821      	ldr	r0, [pc, #132]	@ (18d74 <module_sps_park+0xcf4>)
   18cee:	f7f8 f9bb 	bl	11068 <am_util_stdio_printf>
   18cf2:	4820      	ldr	r0, [pc, #128]	@ (18d74 <module_sps_park+0xcf4>)
   18cf4:	f005 f940 	bl	1df78 <datalogger_log_debug>
                    PIS_task_delete(xPiston);
   18cf8:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18cfa:	f7fb f937 	bl	13f6c <PIS_task_delete>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18cfe:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
   18d02:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   18d06:	eef4 7ac7 	vcmpe.f32	s15, s14
                            piston_timer = 0;
   18d0a:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18d10:	464f      	mov	r7, r9
                            piston_timer = 0;
   18d12:	9309      	str	r3, [sp, #36]	@ 0x24
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18d14:	f6ff aca7 	blt.w	18666 <module_sps_park+0x5e6>
        if (Depth >= PARK_DEPTH_MAX && !crush_depth)
   18d18:	464c      	mov	r4, r9
   18d1a:	f7ff bb69 	b.w	183f0 <module_sps_park+0x370>
                    ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston task->Ready\n");
   18d1e:	481c      	ldr	r0, [pc, #112]	@ (18d90 <module_sps_park+0xd10>)
   18d20:	f7f8 f9a2 	bl	11068 <am_util_stdio_printf>
   18d24:	481a      	ldr	r0, [pc, #104]	@ (18d90 <module_sps_park+0xd10>)
   18d26:	f005 f927 	bl	1df78 <datalogger_log_debug>
                if (park_period >= xDelay10000ms)
   18d2a:	e595      	b.n	18858 <module_sps_park+0x7d8>
                            ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston CRUSH_DEPTH time-out, task->finished\n");
   18d2c:	4819      	ldr	r0, [pc, #100]	@ (18d94 <module_sps_park+0xd14>)
   18d2e:	f7f8 f99b 	bl	11068 <am_util_stdio_printf>
   18d32:	4818      	ldr	r0, [pc, #96]	@ (18d94 <module_sps_park+0xd14>)
   18d34:	f005 f920 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   18d38:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18d3a:	f7fb f917 	bl	13f6c <PIS_task_delete>
                            vTaskDelay(piston_period);
   18d3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18d42:	f7f6 fb4f 	bl	f3e4 <vTaskDelay>
                            PIS_Reset();
   18d46:	f7fb fa07 	bl	14158 <PIS_Reset>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   18d4a:	e7d8      	b.n	18cfe <module_sps_park+0xc7e>
                            ARTEMIS_DEBUG_PRINTF("SPS :: park, Piston time-out, task->finished\n");
   18d4c:	4812      	ldr	r0, [pc, #72]	@ (18d98 <module_sps_park+0xd18>)
   18d4e:	f7f8 f98b 	bl	11068 <am_util_stdio_printf>
   18d52:	4811      	ldr	r0, [pc, #68]	@ (18d98 <module_sps_park+0xd18>)
   18d54:	f005 f910 	bl	1df78 <datalogger_log_debug>
                            PIS_task_delete(xPiston);
   18d58:	9814      	ldr	r0, [sp, #80]	@ 0x50
   18d5a:	f7fb f907 	bl	13f6c <PIS_task_delete>
                            vTaskDelay(piston_period);
   18d5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18d62:	f7f6 fb3f 	bl	f3e4 <vTaskDelay>
                            PIS_Reset();
   18d66:	f7fb f9f7 	bl	14158 <PIS_Reset>
                if (park_period >= xDelay10000ms)
   18d6a:	e721      	b.n	18bb0 <module_sps_park+0xb30>
   18d6c:	2401      	movs	r4, #1
   18d6e:	f7ff bac5 	b.w	182fc <module_sps_park+0x27c>
   18d72:	bf00      	nop
   18d74:	0002d994 	.word	0x0002d994
   18d78:	0002da84 	.word	0x0002da84
   18d7c:	0002d940 	.word	0x0002d940
   18d80:	0002d808 	.word	0x0002d808
   18d84:	3dcccccd 	.word	0x3dcccccd
   18d88:	0002d8a0 	.word	0x0002d8a0
   18d8c:	0001d4bf 	.word	0x0001d4bf
   18d90:	0002d9f8 	.word	0x0002d9f8
   18d94:	0002d9bc 	.word	0x0002d9bc
   18d98:	0002d964 	.word	0x0002d964
   18d9c:	00000000 	.word	0x00000000

00018da0 <module_sps_profile>:
{
   18da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18da4:	ed2d 8b0a 	vpush	{d8-d12}
    SENS_set_depth_rate(s_rate);
   18da8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
{
   18dac:	b095      	sub	sp, #84	@ 0x54
    SENS_set_depth_rate(s_rate);
   18dae:	f7fc fef5 	bl	15b9c <SENS_set_depth_rate>
    if (prof_piston_length == 0.0)
   18db2:	4e89      	ldr	r6, [pc, #548]	@ (18fd8 <module_sps_profile+0x238>)
    SENS_set_temperature_rate(s_rate);
   18db4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
   18db8:	f7fc ff20 	bl	15bfc <SENS_set_temperature_rate>
    TaskHandle_t xDepth = NULL;
   18dbc:	2400      	movs	r4, #0
    SENS_sensor_gps_off();
   18dbe:	f7fc fc6f 	bl	156a0 <SENS_sensor_gps_off>
    SENS_sensor_depth_on();
   18dc2:	f7fc fc6b 	bl	1569c <SENS_sensor_depth_on>
    SENS_sensor_temperature_on();
   18dc6:	f7fc fc71 	bl	156ac <SENS_sensor_temperature_on>
    vTaskDelay(xDelay100ms);
   18dca:	2064      	movs	r0, #100	@ 0x64
    TaskHandle_t xTemp  = NULL;
   18dcc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    vTaskDelay(xDelay100ms);
   18dd0:	f7f6 fb08 	bl	f3e4 <vTaskDelay>
    if (prof_piston_length == 0.0)
   18dd4:	edd6 7a00 	vldr	s15, [r6]
   18dd8:	eef5 7a40 	vcmp.f32	s15, #0.0
    float Length = 0.0;
   18ddc:	2300      	movs	r3, #0
    if (prof_piston_length == 0.0)
   18dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float Length = 0.0;
   18de2:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (prof_piston_length == 0.0)
   18de4:	f040 853e 	bne.w	19864 <module_sps_profile+0xac4>
        Volume = module_ctrl_set_buoyancy_from_rate(v_rate, false);
   18de8:	ed9f 8a7c 	vldr	s16, [pc, #496]	@ 18fdc <module_sps_profile+0x23c>
   18dec:	4620      	mov	r0, r4
   18dee:	eeb0 0a48 	vmov.f32	s0, s16
   18df2:	f7fb fbd5 	bl	145a0 <module_ctrl_set_buoyancy_from_rate>
   18df6:	ee10 5a10 	vmov	r5, s0
        Density = CTRL_calculate_lcp_density(Volume);
   18dfa:	f7fb f9f5 	bl	141e8 <CTRL_calculate_lcp_density>
   18dfe:	eef0 7a40 	vmov.f32	s15, s0
        prof_piston_length = CTRL_calculate_length_from_volume(Volume);
   18e02:	ee00 5a10 	vmov	s0, r5
        Density = CTRL_calculate_lcp_density(Volume);
   18e06:	ee17 4a90 	vmov	r4, s15
        prof_piston_length = CTRL_calculate_length_from_volume(Volume);
   18e0a:	f7fb fb25 	bl	14458 <CTRL_calculate_length_from_volume>
   18e0e:	ed86 0a00 	vstr	s0, [r6]
        length_update = prof_piston_length;
   18e12:	ed96 ca00 	vldr	s24, [r6]
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Setting -> first time prof_piston_length=%.4f >>\n", prof_piston_length);
   18e16:	6830      	ldr	r0, [r6, #0]
   18e18:	f7f3 fad6 	bl	c3c8 <__aeabi_f2d>
   18e1c:	4602      	mov	r2, r0
   18e1e:	460b      	mov	r3, r1
   18e20:	486f      	ldr	r0, [pc, #444]	@ (18fe0 <module_sps_profile+0x240>)
   18e22:	f7f8 f921 	bl	11068 <am_util_stdio_printf>
   18e26:	6830      	ldr	r0, [r6, #0]
   18e28:	f7f3 face 	bl	c3c8 <__aeabi_f2d>
   18e2c:	4602      	mov	r2, r0
   18e2e:	460b      	mov	r3, r1
   18e30:	486b      	ldr	r0, [pc, #428]	@ (18fe0 <module_sps_profile+0x240>)
   18e32:	f005 f8a1 	bl	1df78 <datalogger_log_debug>
        if (length_update <= PISTON_POSITION_MINIMUM)
   18e36:	eeb4 cac8 	vcmpe.f32	s24, s16
   18e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, length_update=%.4fin < piston position minimum >>\n", length_update);
   18e3e:	ee1c 0a10 	vmov	r0, s24
        if (length_update <= PISTON_POSITION_MINIMUM)
   18e42:	f240 8611 	bls.w	19a68 <module_sps_profile+0xcc8>
    ARTEMIS_DEBUG_PRINTF("SPS :: profile, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   18e46:	f7f3 fabf 	bl	c3c8 <__aeabi_f2d>
   18e4a:	4680      	mov	r8, r0
   18e4c:	4689      	mov	r9, r1
   18e4e:	4620      	mov	r0, r4
   18e50:	f7f3 faba 	bl	c3c8 <__aeabi_f2d>
   18e54:	4602      	mov	r2, r0
   18e56:	4628      	mov	r0, r5
   18e58:	4614      	mov	r4, r2
   18e5a:	460d      	mov	r5, r1
   18e5c:	f7f3 fab4 	bl	c3c8 <__aeabi_f2d>
   18e60:	460f      	mov	r7, r1
   18e62:	4606      	mov	r6, r0
   18e64:	e9cd 6700 	strd	r6, r7, [sp]
   18e68:	4622      	mov	r2, r4
   18e6a:	462b      	mov	r3, r5
   18e6c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   18e70:	485c      	ldr	r0, [pc, #368]	@ (18fe4 <module_sps_profile+0x244>)
   18e72:	f7f8 f8f9 	bl	11068 <am_util_stdio_printf>
   18e76:	4622      	mov	r2, r4
   18e78:	462b      	mov	r3, r5
   18e7a:	e9cd 6700 	strd	r6, r7, [sp]
   18e7e:	4859      	ldr	r0, [pc, #356]	@ (18fe4 <module_sps_profile+0x244>)
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->active\n");
   18e80:	4d59      	ldr	r5, [pc, #356]	@ (18fe8 <module_sps_profile+0x248>)
            if (piston_timer >= 120000)
   18e82:	4e5a      	ldr	r6, [pc, #360]	@ (18fec <module_sps_profile+0x24c>)
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston time-out, task->finished\n");
   18e84:	4f5a      	ldr	r7, [pc, #360]	@ (18ff0 <module_sps_profile+0x250>)
    ARTEMIS_DEBUG_PRINTF("SPS :: profile, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   18e86:	e9cd 8902 	strd	r8, r9, [sp, #8]
   18e8a:	f005 f875 	bl	1df78 <datalogger_log_debug>
    TaskHandle_t xPiston = NULL;
   18e8e:	2400      	movs	r4, #0
    PIS_set_piston_rate(1);
   18e90:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   18e92:	940c      	str	r4, [sp, #48]	@ 0x30
    PIS_set_piston_rate(1);
   18e94:	f7fb f8d0 	bl	14038 <PIS_set_piston_rate>
    PIS_set_length(length_update);
   18e98:	eeb0 0a4c 	vmov.f32	s0, s24
   18e9c:	f7fb f916 	bl	140cc <PIS_set_length>
    PIS_task_move_length(&xPiston);
   18ea0:	a80c      	add	r0, sp, #48	@ 0x30
   18ea2:	f7fa ffc3 	bl	13e2c <PIS_task_move_length>
    vTaskDelay(piston_period);
   18ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18eaa:	f7f6 fa9b 	bl	f3e4 <vTaskDelay>
    while (piston_move)
   18eae:	e008      	b.n	18ec2 <module_sps_profile+0x122>
        else if (eStatus==eSuspended)
   18eb0:	2803      	cmp	r0, #3
   18eb2:	f000 8516 	beq.w	198e2 <module_sps_profile+0xb42>
        else if (eStatus==eDeleted)
   18eb6:	2804      	cmp	r0, #4
   18eb8:	d01f      	beq.n	18efa <module_sps_profile+0x15a>
        vTaskDelay(piston_period);
   18eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18ebe:	f7f6 fa91 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   18ec2:	980c      	ldr	r0, [sp, #48]	@ 0x30
   18ec4:	f7f5 fef2 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) || (eStatus==eBlocked) || (eStatus==eReady) )
   18ec8:	2802      	cmp	r0, #2
   18eca:	d8f1      	bhi.n	18eb0 <module_sps_profile+0x110>
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->active\n");
   18ecc:	4628      	mov	r0, r5
   18ece:	f7f8 f8cb 	bl	11068 <am_util_stdio_printf>
            piston_timer += piston_period;
   18ed2:	f504 747a 	add.w	r4, r4, #1000	@ 0x3e8
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->active\n");
   18ed6:	4628      	mov	r0, r5
   18ed8:	f005 f84e 	bl	1df78 <datalogger_log_debug>
            if (piston_timer >= 120000)
   18edc:	42b4      	cmp	r4, r6
   18ede:	d9ec      	bls.n	18eba <module_sps_profile+0x11a>
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston time-out, task->finished\n");
   18ee0:	4638      	mov	r0, r7
   18ee2:	f7f8 f8c1 	bl	11068 <am_util_stdio_printf>
   18ee6:	4638      	mov	r0, r7
   18ee8:	f005 f846 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   18eec:	980c      	ldr	r0, [sp, #48]	@ 0x30
   18eee:	f7fb f83d 	bl	13f6c <PIS_task_delete>
                PIS_Reset();
   18ef2:	f7fb f931 	bl	14158 <PIS_Reset>
                piston_timer = 0;
   18ef6:	2400      	movs	r4, #0
   18ef8:	e7df      	b.n	18eba <module_sps_profile+0x11a>
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->finished\n");
   18efa:	483e      	ldr	r0, [pc, #248]	@ (18ff4 <module_sps_profile+0x254>)
    float Temperature = 0.0;
   18efc:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 19008 <module_sps_profile+0x268>
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Pressure    = %0.4f bar\n", Pressure);
   18f00:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 19000 <module_sps_profile+0x260>
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->finished\n");
   18f04:	f7f8 f8b0 	bl	11068 <am_util_stdio_printf>
   18f08:	483a      	ldr	r0, [pc, #232]	@ (18ff4 <module_sps_profile+0x254>)
   18f0a:	f005 f835 	bl	1df78 <datalogger_log_debug>
            PIS_Get_Length(&Length);
   18f0e:	a80b      	add	r0, sp, #44	@ 0x2c
   18f10:	f7fb f884 	bl	1401c <PIS_Get_Length>
            Volume = CTRL_calculate_volume_from_length(Length);
   18f14:	ed9d 0a0b 	vldr	s0, [sp, #44]	@ 0x2c
   18f18:	f7fb fa4e 	bl	143b8 <CTRL_calculate_volume_from_length>
   18f1c:	ee10 5a10 	vmov	r5, s0
            Density = CTRL_calculate_lcp_density(Volume);
   18f20:	f7fb f962 	bl	141e8 <CTRL_calculate_lcp_density>
   18f24:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   18f28:	f7f3 fa4e 	bl	c3c8 <__aeabi_f2d>
   18f2c:	4602      	mov	r2, r0
   18f2e:	4628      	mov	r0, r5
   18f30:	4614      	mov	r4, r2
   18f32:	460d      	mov	r5, r1
   18f34:	f7f3 fa48 	bl	c3c8 <__aeabi_f2d>
   18f38:	4606      	mov	r6, r0
   18f3a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   18f3c:	460f      	mov	r7, r1
   18f3e:	f7f3 fa43 	bl	c3c8 <__aeabi_f2d>
   18f42:	462b      	mov	r3, r5
   18f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
   18f48:	4622      	mov	r2, r4
   18f4a:	e9cd 6700 	strd	r6, r7, [sp]
   18f4e:	482a      	ldr	r0, [pc, #168]	@ (18ff8 <module_sps_profile+0x258>)
   18f50:	f7f8 f88a 	bl	11068 <am_util_stdio_printf>
   18f54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   18f56:	f7f3 fa37 	bl	c3c8 <__aeabi_f2d>
   18f5a:	4622      	mov	r2, r4
   18f5c:	462b      	mov	r3, r5
   18f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   18f62:	e9cd 6700 	strd	r6, r7, [sp]
   18f66:	4824      	ldr	r0, [pc, #144]	@ (18ff8 <module_sps_profile+0x258>)
   18f68:	f005 f806 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(piston_period);
   18f6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   18f70:	f7f6 fa38 	bl	f3e4 <vTaskDelay>
    SENS_task_profile_sensors(&xDepth, &xTemp);
   18f74:	a90a      	add	r1, sp, #40	@ 0x28
   18f76:	a809      	add	r0, sp, #36	@ 0x24
   18f78:	f7fc fd2c 	bl	159d4 <SENS_task_profile_sensors>
    char *filename = datalogger_profile_create_file(prof_number);
   18f7c:	4b1f      	ldr	r3, [pc, #124]	@ (18ffc <module_sps_profile+0x25c>)
    float Temperature = 0.0;
   18f7e:	ed8d 8a0d 	vstr	s16, [sp, #52]	@ 0x34
    char *filename = datalogger_profile_create_file(prof_number);
   18f82:	7818      	ldrb	r0, [r3, #0]
    float Depth = 0.0, Rate = 0.0;
   18f84:	ed8d 8a0e 	vstr	s16, [sp, #56]	@ 0x38
   18f88:	ed8d 8a0f 	vstr	s16, [sp, #60]	@ 0x3c
    float Pressure = 0.0;
   18f8c:	ed8d 8a10 	vstr	s16, [sp, #64]	@ 0x40
    char *filename = datalogger_profile_create_file(prof_number);
   18f90:	f005 f9a6 	bl	1e2e0 <datalogger_profile_create_file>
   18f94:	9005      	str	r0, [sp, #20]
    vTaskDelay(xDelay100ms);
   18f96:	2064      	movs	r0, #100	@ 0x64
   18f98:	f7f6 fa24 	bl	f3e4 <vTaskDelay>
    uint32_t crit_depth_piston_pos_time = 0;
   18f9c:	f04f 0c00 	mov.w	ip, #0
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Depth       = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   18fa0:	ed9f bb0b 	vldr	d11, [pc, #44]	@ 18fd0 <module_sps_profile+0x230>
    vTaskDelay(xDelay100ms);
   18fa4:	eef0 aa4c 	vmov.f32	s21, s24
    float rate_avg = 0;
   18fa8:	eeb0 aa48 	vmov.f32	s20, s16
    float samples_t = 0.0;
   18fac:	eeb0 9a48 	vmov.f32	s18, s16
    float samples_p = 0.0;
   18fb0:	eef0 9a48 	vmov.f32	s19, s16
    uint8_t rate_count = 0;
   18fb4:	4665      	mov	r5, ip
    bool start_time = true;
   18fb6:	f04f 0901 	mov.w	r9, #1
    uint16_t samples = 0;
   18fba:	46e2      	mov	sl, ip
    vTaskDelay(xDelay100ms);
   18fbc:	f8cd c018 	str.w	ip, [sp, #24]
   18fc0:	46e0      	mov	r8, ip
    bool crush_depth = false;
   18fc2:	f8cd c010 	str.w	ip, [sp, #16]
   18fc6:	f8cd c01c 	str.w	ip, [sp, #28]
   18fca:	e04a      	b.n	19062 <module_sps_profile+0x2c2>
   18fcc:	f3af 8000 	nop.w
   18fd0:	00000000 	.word	0x00000000
   18fd4:	3ff00000 	.word	0x3ff00000
   18fd8:	1000b9c4 	.word	0x1000b9c4
   18fdc:	3dcccccd 	.word	0x3dcccccd
   18fe0:	0002db98 	.word	0x0002db98
   18fe4:	0002dc6c 	.word	0x0002dc6c
   18fe8:	0002dcc0 	.word	0x0002dcc0
   18fec:	0001d4bf 	.word	0x0001d4bf
   18ff0:	0002dce8 	.word	0x0002dce8
   18ff4:	0002dd44 	.word	0x0002dd44
   18ff8:	0002dd6c 	.word	0x0002dd6c
   18ffc:	1000b9e2 	.word	0x1000b9e2
   19000:	0002ddb4 	.word	0x0002ddb4
   19004:	bd8f5c29 	.word	0xbd8f5c29
   19008:	00000000 	.word	0x00000000
            float averaged_rate = (float) (rate_avg/rate_count);
   1900c:	ee8a 7a27 	vdiv.f32	s14, s20, s15
            if ( averaged_rate >= (-1*SYSTEM_RISE_RATE_MIN) && !piston_move && !crush_depth)
   19010:	ed5f 7a04 	vldr	s15, [pc, #-16]	@ 19004 <module_sps_profile+0x264>
   19014:	eeb4 7ae7 	vcmpe.f32	s14, s15
   19018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1901c:	f2c0 82a7 	blt.w	1956e <module_sps_profile+0x7ce>
   19020:	2d00      	cmp	r5, #0
   19022:	f040 818c 	bne.w	1933e <module_sps_profile+0x59e>
   19026:	9b04      	ldr	r3, [sp, #16]
   19028:	2b00      	cmp	r3, #0
   1902a:	f000 83a4 	beq.w	19776 <module_sps_profile+0x9d6>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1902e:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   19032:	ed1f aa0b 	vldr	s20, [pc, #-44]	@ 19008 <module_sps_profile+0x268>
   19036:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   1903a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19042:	46a8      	mov	r8, r5
   19044:	da07      	bge.n	19056 <module_sps_profile+0x2b6>
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   19046:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   1904a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19052:	f240 81c4 	bls.w	193de <module_sps_profile+0x63e>
        vTaskDelay(period);
   19056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1905a:	f7f6 f9c3 	bl	f3e4 <vTaskDelay>
    while (run)
   1905e:	f04f 0900 	mov.w	r9, #0
        SENS_get_depth(&Depth, &Pressure, &Rate);
   19062:	aa0f      	add	r2, sp, #60	@ 0x3c
   19064:	a910      	add	r1, sp, #64	@ 0x40
   19066:	a80e      	add	r0, sp, #56	@ 0x38
   19068:	f7fc fb22 	bl	156b0 <SENS_get_depth>
        SENS_get_temperature(&Temperature);
   1906c:	a80d      	add	r0, sp, #52	@ 0x34
   1906e:	f7fc fb47 	bl	15700 <SENS_get_temperature>
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Pressure    = %0.4f bar\n", Pressure);
   19072:	9810      	ldr	r0, [sp, #64]	@ 0x40
   19074:	f7f3 f9a8 	bl	c3c8 <__aeabi_f2d>
   19078:	4602      	mov	r2, r0
   1907a:	460b      	mov	r3, r1
   1907c:	4658      	mov	r0, fp
   1907e:	f7f7 fff3 	bl	11068 <am_util_stdio_printf>
   19082:	9810      	ldr	r0, [sp, #64]	@ 0x40
   19084:	f7f3 f9a0 	bl	c3c8 <__aeabi_f2d>
   19088:	4602      	mov	r2, r0
   1908a:	460b      	mov	r3, r1
   1908c:	4658      	mov	r0, fp
   1908e:	f004 ff73 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Depth       = %0.4f m, rate = %0.4fm/%.1fs\n", Depth, Rate, (float)(1/s_rate));
   19092:	980e      	ldr	r0, [sp, #56]	@ 0x38
   19094:	f7f3 f998 	bl	c3c8 <__aeabi_f2d>
   19098:	4606      	mov	r6, r0
   1909a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   1909c:	460f      	mov	r7, r1
   1909e:	ed8d bb02 	vstr	d11, [sp, #8]
   190a2:	f7f3 f991 	bl	c3c8 <__aeabi_f2d>
   190a6:	4632      	mov	r2, r6
   190a8:	463b      	mov	r3, r7
   190aa:	e9cd 0100 	strd	r0, r1, [sp]
   190ae:	48ae      	ldr	r0, [pc, #696]	@ (19368 <module_sps_profile+0x5c8>)
   190b0:	f7f7 ffda 	bl	11068 <am_util_stdio_printf>
   190b4:	980e      	ldr	r0, [sp, #56]	@ 0x38
   190b6:	f7f3 f987 	bl	c3c8 <__aeabi_f2d>
   190ba:	4606      	mov	r6, r0
   190bc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   190be:	460f      	mov	r7, r1
   190c0:	ed8d bb02 	vstr	d11, [sp, #8]
   190c4:	f7f3 f980 	bl	c3c8 <__aeabi_f2d>
   190c8:	4632      	mov	r2, r6
   190ca:	e9cd 0100 	strd	r0, r1, [sp]
   190ce:	463b      	mov	r3, r7
   190d0:	48a5      	ldr	r0, [pc, #660]	@ (19368 <module_sps_profile+0x5c8>)
   190d2:	f004 ff51 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature = %0.4f °C\n", Temperature);
   190d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
   190d8:	f7f3 f976 	bl	c3c8 <__aeabi_f2d>
   190dc:	4602      	mov	r2, r0
   190de:	460b      	mov	r3, r1
   190e0:	48a2      	ldr	r0, [pc, #648]	@ (1936c <module_sps_profile+0x5cc>)
   190e2:	f7f7 ffc1 	bl	11068 <am_util_stdio_printf>
   190e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
   190e8:	f7f3 f96e 	bl	c3c8 <__aeabi_f2d>
   190ec:	4602      	mov	r2, r0
   190ee:	460b      	mov	r3, r1
   190f0:	489e      	ldr	r0, [pc, #632]	@ (1936c <module_sps_profile+0x5cc>)
   190f2:	f004 ff41 	bl	1df78 <datalogger_log_debug>
        artemis_rtc_get_time(&time);
   190f6:	a811      	add	r0, sp, #68	@ 0x44
   190f8:	f004 fd6e 	bl	1dbd8 <artemis_rtc_get_time>
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   190fc:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
   19100:	9301      	str	r3, [sp, #4]
   19102:	f89d 3049 	ldrb.w	r3, [sp, #73]	@ 0x49
   19106:	f89d 2047 	ldrb.w	r2, [sp, #71]	@ 0x47
   1910a:	f89d 1046 	ldrb.w	r1, [sp, #70]	@ 0x46
   1910e:	9300      	str	r3, [sp, #0]
   19110:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
   19114:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
   19118:	f7fb fcc2 	bl	14aa0 <get_epoch_time>
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Epoch       = %ld \n", epoch);
   1911c:	4601      	mov	r1, r0
        uint32_t epoch = get_epoch_time(time.year, time.month, time.day, time.hour, time.min, time.sec);
   1911e:	4604      	mov	r4, r0
        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Epoch       = %ld \n", epoch);
   19120:	4893      	ldr	r0, [pc, #588]	@ (19370 <module_sps_profile+0x5d0>)
   19122:	f7f7 ffa1 	bl	11068 <am_util_stdio_printf>
   19126:	4892      	ldr	r0, [pc, #584]	@ (19370 <module_sps_profile+0x5d0>)
   19128:	4621      	mov	r1, r4
   1912a:	f004 ff25 	bl	1df78 <datalogger_log_debug>
        if (start_time == true)
   1912e:	f1b9 0f00 	cmp.w	r9, #0
   19132:	f040 80cb 	bne.w	192cc <module_sps_profile+0x52c>
        if (Pressure <= (bin_pressure - 0.1))
   19136:	ee18 0a10 	vmov	r0, s16
   1913a:	f7f3 f945 	bl	c3c8 <__aeabi_f2d>
   1913e:	4606      	mov	r6, r0
   19140:	460f      	mov	r7, r1
        samples_t += Temperature;
   19142:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
        samples_p += Pressure;
   19146:	eddd 8a10 	vldr	s17, [sp, #64]	@ 0x40
        if (Pressure <= (bin_pressure - 0.1))
   1914a:	a385      	add	r3, pc, #532	@ (adr r3, 19360 <module_sps_profile+0x5c0>)
   1914c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19150:	4630      	mov	r0, r6
   19152:	4639      	mov	r1, r7
        samples_t += Temperature;
   19154:	ee39 9a27 	vadd.f32	s18, s18, s15
        if (Pressure <= (bin_pressure - 0.1))
   19158:	f7f2 ffd6 	bl	c108 <__aeabi_dsub>
   1915c:	4606      	mov	r6, r0
   1915e:	460f      	mov	r7, r1
   19160:	ee18 0a90 	vmov	r0, s17
   19164:	f7f3 f930 	bl	c3c8 <__aeabi_f2d>
        samples++;
   19168:	f10a 0a01 	add.w	sl, sl, #1
        if (Pressure <= (bin_pressure - 0.1))
   1916c:	4632      	mov	r2, r6
   1916e:	463b      	mov	r3, r7
        samples_p += Pressure;
   19170:	ee79 9aa8 	vadd.f32	s19, s19, s17
        samples++;
   19174:	fa1f fa8a 	uxth.w	sl, sl
        if (Pressure <= (bin_pressure - 0.1))
   19178:	f7f3 fbfa 	bl	c970 <__aeabi_dcmple>
   1917c:	2800      	cmp	r0, #0
   1917e:	d174      	bne.n	1926a <module_sps_profile+0x4ca>
        if (Pressure >= bin_pressure)
   19180:	eeb4 8ae8 	vcmpe.f32	s16, s17
   19184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19188:	d939      	bls.n	191fe <module_sps_profile+0x45e>
	    rate_count++;
   1918a:	f108 0301 	add.w	r3, r8, #1
   1918e:	fa5f f883 	uxtb.w	r8, r3
	    if (rate_count >= PROFILE_DEPTH_RATE_COUNTER)
   19192:	ee07 8a90 	vmov	s15, r8
   19196:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 19374 <module_sps_profile+0x5d4>
        rate_avg += Rate;
   1919a:	eddd 6a0f 	vldr	s13, [sp, #60]	@ 0x3c
	    if (rate_count >= PROFILE_DEPTH_RATE_COUNTER)
   1919e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        rate_avg += Rate;
   191a2:	ee3a aa26 	vadd.f32	s20, s20, s13
	    if (rate_count >= PROFILE_DEPTH_RATE_COUNTER)
   191a6:	eef4 7ac7 	vcmpe.f32	s15, s14
   191aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   191ae:	f6bf af2d 	bge.w	1900c <module_sps_profile+0x26c>
        if (piston_move)
   191b2:	2d00      	cmp	r5, #0
   191b4:	f040 80c7 	bne.w	19346 <module_sps_profile+0x5a6>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   191b8:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   191bc:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   191c0:	eef4 8ae7 	vcmpe.f32	s17, s15
   191c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   191c8:	f6ff af3d 	blt.w	19046 <module_sps_profile+0x2a6>
   191cc:	9b04      	ldr	r3, [sp, #16]
   191ce:	2b00      	cmp	r3, #0
   191d0:	f47f af41 	bne.w	19056 <module_sps_profile+0x2b6>
            vTaskDelay(piston_period);
   191d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   191d8:	f7f6 f904 	bl	f3e4 <vTaskDelay>
            PIS_set_length(CRUSH_DEPTH_PISTON_POSITION);
   191dc:	eeb1 0a05 	vmov.f32	s0, #21	@ 0x40a80000  5.250
   191e0:	f7fa ff74 	bl	140cc <PIS_set_length>
            PIS_task_move_length(&xPiston);
   191e4:	a80c      	add	r0, sp, #48	@ 0x30
   191e6:	f7fa fe21 	bl	13e2c <PIS_task_move_length>
            ARTEMIS_DEBUG_PRINTF("\n\n\nSPS :: profile, <<< CRUSH DEPTH activated >>>\n\n\n");
   191ea:	4863      	ldr	r0, [pc, #396]	@ (19378 <module_sps_profile+0x5d8>)
   191ec:	f7f7 ff3c 	bl	11068 <am_util_stdio_printf>
   191f0:	4861      	ldr	r0, [pc, #388]	@ (19378 <module_sps_profile+0x5d8>)
   191f2:	f004 fec1 	bl	1df78 <datalogger_log_debug>
            crush_depth = true;
   191f6:	2301      	movs	r3, #1
   191f8:	9304      	str	r3, [sp, #16]
            piston_move = true;
   191fa:	461d      	mov	r5, r3
   191fc:	e72b      	b.n	19056 <module_sps_profile+0x2b6>
            bin_pressure = bin_pressure + 0.1;
   191fe:	ee18 0a10 	vmov	r0, s16
   19202:	f7f3 f8e1 	bl	c3c8 <__aeabi_f2d>
   19206:	a356      	add	r3, pc, #344	@ (adr r3, 19360 <module_sps_profile+0x5c0>)
   19208:	e9d3 2300 	ldrd	r2, r3, [r3]
   1920c:	f7f2 ff7e 	bl	c10c <__adddf3>
   19210:	f7f3 fbec 	bl	c9ec <__aeabi_d2f>
            float avg_p = (float) samples_p / samples;
   19214:	ee07 aa90 	vmov	s15, sl
   19218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature and Pressure -> number of samples = %u\n", samples);
   1921c:	4651      	mov	r1, sl
            float avg_p = (float) samples_p / samples;
   1921e:	eec9 8aa7 	vdiv.f32	s17, s19, s15
            float avg_t = (float) samples_t / samples;
   19222:	eec9 9a27 	vdiv.f32	s19, s18, s15
            bin_pressure = bin_pressure + 0.1;
   19226:	ee08 0a10 	vmov	s16, r0
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature and Pressure -> number of samples = %u\n", samples);
   1922a:	4854      	ldr	r0, [pc, #336]	@ (1937c <module_sps_profile+0x5dc>)
            samples_t = 0;
   1922c:	ed9f 9a54 	vldr	s18, [pc, #336]	@ 19380 <module_sps_profile+0x5e0>
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature and Pressure -> number of samples = %u\n", samples);
   19230:	f7f7 ff1a 	bl	11068 <am_util_stdio_printf>
   19234:	4651      	mov	r1, sl
   19236:	4851      	ldr	r0, [pc, #324]	@ (1937c <module_sps_profile+0x5dc>)
   19238:	f004 fe9e 	bl	1df78 <datalogger_log_debug>
            DATA_add(&prof, epoch, avg_p, avg_t, prof_number);
   1923c:	4b51      	ldr	r3, [pc, #324]	@ (19384 <module_sps_profile+0x5e4>)
   1923e:	4852      	ldr	r0, [pc, #328]	@ (19388 <module_sps_profile+0x5e8>)
   19240:	781a      	ldrb	r2, [r3, #0]
   19242:	eef0 0a69 	vmov.f32	s1, s19
   19246:	eeb0 0a68 	vmov.f32	s0, s17
   1924a:	4621      	mov	r1, r4
   1924c:	f7fb fb24 	bl	14898 <DATA_add>
            datalogger_profile_mode(filename, avg_p, avg_t, &time);
   19250:	eef0 0a69 	vmov.f32	s1, s19
   19254:	9805      	ldr	r0, [sp, #20]
   19256:	a911      	add	r1, sp, #68	@ 0x44
   19258:	eeb0 0a68 	vmov.f32	s0, s17
   1925c:	f005 f904 	bl	1e468 <datalogger_profile_mode>
            samples_p = 0;
   19260:	eef0 9a49 	vmov.f32	s19, s18
            samples = 0;
   19264:	f04f 0a00 	mov.w	sl, #0
   19268:	e78f      	b.n	1918a <module_sps_profile+0x3ea>
            bin_pressure = bin_pressure - 0.1;
   1926a:	4639      	mov	r1, r7
   1926c:	4630      	mov	r0, r6
   1926e:	f7f3 fbbd 	bl	c9ec <__aeabi_d2f>
            float avg_p = (float) samples_p / samples;
   19272:	ee07 aa90 	vmov	s15, sl
   19276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature and Pressure -> number of samples = %u\n", samples);
   1927a:	4651      	mov	r1, sl
            float avg_p = (float) samples_p / samples;
   1927c:	eec9 8aa7 	vdiv.f32	s17, s19, s15
            float avg_t = (float) samples_t / samples;
   19280:	eec9 9a27 	vdiv.f32	s19, s18, s15
            bin_pressure = bin_pressure - 0.1;
   19284:	ee08 0a10 	vmov	s16, r0
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature and Pressure -> number of samples = %u\n", samples);
   19288:	483c      	ldr	r0, [pc, #240]	@ (1937c <module_sps_profile+0x5dc>)
            samples_t = 0;
   1928a:	ed9f 9a3d 	vldr	s18, [pc, #244]	@ 19380 <module_sps_profile+0x5e0>
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Temperature and Pressure -> number of samples = %u\n", samples);
   1928e:	f7f7 feeb 	bl	11068 <am_util_stdio_printf>
   19292:	4651      	mov	r1, sl
   19294:	4839      	ldr	r0, [pc, #228]	@ (1937c <module_sps_profile+0x5dc>)
   19296:	f004 fe6f 	bl	1df78 <datalogger_log_debug>
            DATA_add(&prof, epoch, avg_p, avg_t, prof_number);
   1929a:	4b3a      	ldr	r3, [pc, #232]	@ (19384 <module_sps_profile+0x5e4>)
   1929c:	483a      	ldr	r0, [pc, #232]	@ (19388 <module_sps_profile+0x5e8>)
   1929e:	781a      	ldrb	r2, [r3, #0]
   192a0:	eef0 0a69 	vmov.f32	s1, s19
   192a4:	eeb0 0a68 	vmov.f32	s0, s17
   192a8:	4621      	mov	r1, r4
   192aa:	f7fb faf5 	bl	14898 <DATA_add>
            datalogger_profile_mode(filename, avg_p, avg_t, &time);
   192ae:	eef0 0a69 	vmov.f32	s1, s19
   192b2:	eeb0 0a68 	vmov.f32	s0, s17
   192b6:	9805      	ldr	r0, [sp, #20]
   192b8:	a911      	add	r1, sp, #68	@ 0x44
   192ba:	f005 f8d5 	bl	1e468 <datalogger_profile_mode>
            samples_p = 0;
   192be:	eef0 9a49 	vmov.f32	s19, s18
        if (Pressure >= bin_pressure)
   192c2:	eddd 8a10 	vldr	s17, [sp, #64]	@ 0x40
            samples = 0;
   192c6:	f04f 0a00 	mov.w	sl, #0
   192ca:	e759      	b.n	19180 <module_sps_profile+0x3e0>
            DATA_add(&prof, epoch, Pressure, Temperature, prof_number);
   192cc:	4b2d      	ldr	r3, [pc, #180]	@ (19384 <module_sps_profile+0x5e4>)
   192ce:	eddd 0a0d 	vldr	s1, [sp, #52]	@ 0x34
   192d2:	781a      	ldrb	r2, [r3, #0]
   192d4:	ed9d 0a10 	vldr	s0, [sp, #64]	@ 0x40
   192d8:	482b      	ldr	r0, [pc, #172]	@ (19388 <module_sps_profile+0x5e8>)
   192da:	4621      	mov	r1, r4
   192dc:	f7fb fadc 	bl	14898 <DATA_add>
            datalogger_profile_mode(filename, Pressure, Temperature, &time);
   192e0:	eddd 0a0d 	vldr	s1, [sp, #52]	@ 0x34
   192e4:	ed9d 0a10 	vldr	s0, [sp, #64]	@ 0x40
   192e8:	9805      	ldr	r0, [sp, #20]
   192ea:	a911      	add	r1, sp, #68	@ 0x44
   192ec:	f005 f8bc 	bl	1e468 <datalogger_profile_mode>
            bin_pressure = ceil(Pressure * 10) / 10;
   192f0:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
   192f4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
   192f8:	ee67 7a27 	vmul.f32	s15, s14, s15
   192fc:	ee17 0a90 	vmov	r0, s15
   19300:	f7f3 f862 	bl	c3c8 <__aeabi_f2d>
   19304:	ec41 0b10 	vmov	d0, r0, r1
   19308:	f010 fb32 	bl	29970 <ceil>
   1930c:	4b1f      	ldr	r3, [pc, #124]	@ (1938c <module_sps_profile+0x5ec>)
   1930e:	ec51 0b10 	vmov	r0, r1, d0
   19312:	2200      	movs	r2, #0
   19314:	f7f3 f9da 	bl	c6cc <__aeabi_ddiv>
   19318:	f7f3 fb68 	bl	c9ec <__aeabi_d2f>
   1931c:	ee08 0a10 	vmov	s16, r0
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, profile start bin = %0.4f bar\n", bin_pressure);
   19320:	f7f3 f852 	bl	c3c8 <__aeabi_f2d>
   19324:	4606      	mov	r6, r0
   19326:	460f      	mov	r7, r1
   19328:	4632      	mov	r2, r6
   1932a:	460b      	mov	r3, r1
   1932c:	4818      	ldr	r0, [pc, #96]	@ (19390 <module_sps_profile+0x5f0>)
   1932e:	f7f7 fe9b 	bl	11068 <am_util_stdio_printf>
   19332:	4817      	ldr	r0, [pc, #92]	@ (19390 <module_sps_profile+0x5f0>)
   19334:	4632      	mov	r2, r6
   19336:	463b      	mov	r3, r7
   19338:	f004 fe1e 	bl	1df78 <datalogger_log_debug>
   1933c:	e701      	b.n	19142 <module_sps_profile+0x3a2>
            rate_avg = 0.0;
   1933e:	ed9f aa10 	vldr	s20, [pc, #64]	@ 19380 <module_sps_profile+0x5e0>
            rate_count = 0;
   19342:	f04f 0800 	mov.w	r8, #0
            eStatus = eTaskGetState( xPiston );
   19346:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19348:	f7f5 fcb0 	bl	ecac <eTaskGetState>
            if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   1934c:	2804      	cmp	r0, #4
   1934e:	f200 81cd 	bhi.w	196ec <module_sps_profile+0x94c>
   19352:	e8df f010 	tbh	[pc, r0, lsl #1]
   19356:	001f      	.short	0x001f
   19358:	001f00f8 	.word	0x001f00f8
   1935c:	008c00dd 	.word	0x008c00dd
   19360:	9999999a 	.word	0x9999999a
   19364:	3fb99999 	.word	0x3fb99999
   19368:	0002dde0 	.word	0x0002dde0
   1936c:	0002de1c 	.word	0x0002de1c
   19370:	0002de48 	.word	0x0002de48
   19374:	42700000 	.word	0x42700000
   19378:	0002e1cc 	.word	0x0002e1cc
   1937c:	0002de9c 	.word	0x0002de9c
   19380:	00000000 	.word	0x00000000
   19384:	1000b9e2 	.word	0x1000b9e2
   19388:	1000bcb4 	.word	0x1000bcb4
   1938c:	40240000 	.word	0x40240000
   19390:	0002de6c 	.word	0x0002de6c
                ARTEMIS_DEBUG_PRINTF("SPS :: porfile, Piston task->active\n");
   19394:	48c2      	ldr	r0, [pc, #776]	@ (196a0 <module_sps_profile+0x900>)
   19396:	f7f7 fe67 	bl	11068 <am_util_stdio_printf>
   1939a:	48c1      	ldr	r0, [pc, #772]	@ (196a0 <module_sps_profile+0x900>)
   1939c:	f004 fdec 	bl	1df78 <datalogger_log_debug>
                piston_timer += period;
   193a0:	9b06      	ldr	r3, [sp, #24]
   193a2:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
                if (crush_depth)
   193a6:	9b04      	ldr	r3, [sp, #16]
                piston_timer += period;
   193a8:	9206      	str	r2, [sp, #24]
                if (crush_depth)
   193aa:	2b00      	cmp	r3, #0
   193ac:	f000 814a 	beq.w	19644 <module_sps_profile+0x8a4>
                    if (piston_timer >= 120000)
   193b0:	4bbc      	ldr	r3, [pc, #752]	@ (196a4 <module_sps_profile+0x904>)
   193b2:	429a      	cmp	r2, r3
   193b4:	f200 82bf 	bhi.w	19936 <module_sps_profile+0xb96>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   193b8:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   193bc:	9d04      	ldr	r5, [sp, #16]
   193be:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   193c2:	eef4 8ae7 	vcmpe.f32	s17, s15
   193c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   193ca:	f6bf ae44 	bge.w	19056 <module_sps_profile+0x2b6>
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   193ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   193d2:	eef4 8ae7 	vcmpe.f32	s17, s15
   193d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   193da:	f63f ae3c 	bhi.w	19056 <module_sps_profile+0x2b6>
   193de:	9b04      	ldr	r3, [sp, #16]
   193e0:	2b00      	cmp	r3, #0
   193e2:	f47f ae38 	bne.w	19056 <module_sps_profile+0x2b6>
            if (piston_move)
   193e6:	2d00      	cmp	r5, #0
   193e8:	f040 8143 	bne.w	19672 <module_sps_profile+0x8d2>
            SENS_task_delete(xTemp);
   193ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
   193ee:	f7fc f9bf 	bl	15770 <SENS_task_delete>
            SENS_sensor_temperature_off();
   193f2:	f7fc f959 	bl	156a8 <SENS_sensor_temperature_off>
            SENS_task_delete(xDepth);
   193f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
   193f8:	f7fc f9ba 	bl	15770 <SENS_task_delete>
            SENS_sensor_depth_off();
   193fc:	f7fc f94c 	bl	15698 <SENS_sensor_depth_off>
            spsEvent = MODE_DONE;
   19400:	2304      	movs	r3, #4
        vTaskDelay(period);
   19402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
            spsEvent = MODE_DONE;
   19406:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
        vTaskDelay(period);
   1940a:	f7f5 ffeb 	bl	f3e4 <vTaskDelay>
    prof_number++;
   1940e:	49a6      	ldr	r1, [pc, #664]	@ (196a8 <module_sps_profile+0x908>)
    pistoncal_number++;
   19410:	4aa6      	ldr	r2, [pc, #664]	@ (196ac <module_sps_profile+0x90c>)
    prof_number++;
   19412:	780b      	ldrb	r3, [r1, #0]
   19414:	3301      	adds	r3, #1
   19416:	b2db      	uxtb	r3, r3
   19418:	700b      	strb	r3, [r1, #0]
    pistoncal_number++;
   1941a:	7813      	ldrb	r3, [r2, #0]
   1941c:	3301      	adds	r3, #1
   1941e:	b2db      	uxtb	r3, r3
   19420:	7013      	strb	r3, [r2, #0]
    uint32_t size = xPortGetFreeHeapSize();
   19422:	f7f4 fa1b 	bl	d85c <xPortGetFreeHeapSize>
   19426:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nSPS :: profile, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   19428:	4621      	mov	r1, r4
   1942a:	48a1      	ldr	r0, [pc, #644]	@ (196b0 <module_sps_profile+0x910>)
   1942c:	f7f7 fe1c 	bl	11068 <am_util_stdio_printf>
   19430:	4621      	mov	r1, r4
   19432:	489f      	ldr	r0, [pc, #636]	@ (196b0 <module_sps_profile+0x910>)
   19434:	f004 fda0 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: profile, Task->finished\n");
   19438:	489e      	ldr	r0, [pc, #632]	@ (196b4 <module_sps_profile+0x914>)
   1943a:	f7f7 fe15 	bl	11068 <am_util_stdio_printf>
   1943e:	489d      	ldr	r0, [pc, #628]	@ (196b4 <module_sps_profile+0x914>)
   19440:	f004 fd9a 	bl	1df78 <datalogger_log_debug>
    SendEvent(spsEventQueue, &spsEvent);
   19444:	4a9c      	ldr	r2, [pc, #624]	@ (196b8 <module_sps_profile+0x918>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   19446:	2300      	movs	r3, #0
   19448:	f10d 0123 	add.w	r1, sp, #35	@ 0x23
   1944c:	6810      	ldr	r0, [r2, #0]
   1944e:	f04f 32ff 	mov.w	r2, #4294967295
   19452:	f7f4 fc07 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   19456:	2000      	movs	r0, #0
   19458:	f7f5 fbb0 	bl	ebbc <vTaskDelete>
}
   1945c:	b015      	add	sp, #84	@ 0x54
   1945e:	ecbd 8b0a 	vpop	{d8-d12}
   19462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            eStatus = eTaskGetState( xPiston );
   19466:	ed9f aa9e 	vldr	s20, [pc, #632]	@ 196e0 <module_sps_profile+0x940>
   1946a:	f04f 0800 	mov.w	r8, #0
                PIS_Get_Length(&Length);
   1946e:	a80b      	add	r0, sp, #44	@ 0x2c
   19470:	f7fa fdd4 	bl	1401c <PIS_Get_Length>
                Volume = CTRL_calculate_volume_from_length(Length);
   19474:	ed9d 0a0b 	vldr	s0, [sp, #44]	@ 0x2c
   19478:	f7fa ff9e 	bl	143b8 <CTRL_calculate_volume_from_length>
   1947c:	ee10 4a10 	vmov	r4, s0
                Density = CTRL_calculate_lcp_density(Volume);
   19480:	f7fa feb2 	bl	141e8 <CTRL_calculate_lcp_density>
   19484:	ee10 0a10 	vmov	r0, s0
                ARTEMIS_DEBUG_PRINTF("SPS :: porfile, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   19488:	f7f2 ff9e 	bl	c3c8 <__aeabi_f2d>
   1948c:	4606      	mov	r6, r0
   1948e:	4620      	mov	r0, r4
   19490:	460f      	mov	r7, r1
   19492:	f7f2 ff99 	bl	c3c8 <__aeabi_f2d>
   19496:	4604      	mov	r4, r0
   19498:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1949a:	460d      	mov	r5, r1
   1949c:	f7f2 ff94 	bl	c3c8 <__aeabi_f2d>
   194a0:	4632      	mov	r2, r6
   194a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   194a6:	463b      	mov	r3, r7
   194a8:	e9cd 4500 	strd	r4, r5, [sp]
   194ac:	4883      	ldr	r0, [pc, #524]	@ (196bc <module_sps_profile+0x91c>)
   194ae:	f7f7 fddb 	bl	11068 <am_util_stdio_printf>
   194b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   194b4:	f7f2 ff88 	bl	c3c8 <__aeabi_f2d>
   194b8:	463b      	mov	r3, r7
   194ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   194be:	4632      	mov	r2, r6
   194c0:	487e      	ldr	r0, [pc, #504]	@ (196bc <module_sps_profile+0x91c>)
   194c2:	e9cd 4500 	strd	r4, r5, [sp]
   194c6:	f004 fd57 	bl	1df78 <datalogger_log_debug>
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->finished\n");
   194ca:	487d      	ldr	r0, [pc, #500]	@ (196c0 <module_sps_profile+0x920>)
   194cc:	f7f7 fdcc 	bl	11068 <am_util_stdio_printf>
   194d0:	487b      	ldr	r0, [pc, #492]	@ (196c0 <module_sps_profile+0x920>)
   194d2:	f004 fd51 	bl	1df78 <datalogger_log_debug>
                if (crush_depth)
   194d6:	9b04      	ldr	r3, [sp, #16]
   194d8:	2b00      	cmp	r3, #0
   194da:	f040 82db 	bne.w	19a94 <module_sps_profile+0xcf4>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   194de:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
   194e2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   194e6:	eef4 7ac7 	vcmpe.f32	s15, s14
   194ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194ee:	f280 8117 	bge.w	19720 <module_sps_profile+0x980>
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   194f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
   194f6:	eef4 7ac7 	vcmpe.f32	s15, s14
   194fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194fe:	f67f af75 	bls.w	193ec <module_sps_profile+0x64c>
                piston_move = false;
   19502:	461d      	mov	r5, r3
                piston_timer = 0;
   19504:	9306      	str	r3, [sp, #24]
   19506:	e5a6      	b.n	19056 <module_sps_profile+0x2b6>
            eStatus = eTaskGetState( xPiston );
   19508:	ed9f aa75 	vldr	s20, [pc, #468]	@ 196e0 <module_sps_profile+0x940>
   1950c:	f04f 0800 	mov.w	r8, #0
                ARTEMIS_DEBUG_PRINTF("SPS :: porfile, Piston task->suspended\n");
   19510:	486c      	ldr	r0, [pc, #432]	@ (196c4 <module_sps_profile+0x924>)
   19512:	f7f7 fda9 	bl	11068 <am_util_stdio_printf>
   19516:	486b      	ldr	r0, [pc, #428]	@ (196c4 <module_sps_profile+0x924>)
   19518:	f004 fd2e 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   1951c:	980c      	ldr	r0, [sp, #48]	@ 0x30
   1951e:	f7fa fd25 	bl	13f6c <PIS_task_delete>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19522:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   19526:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   1952a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19532:	f280 8166 	bge.w	19802 <module_sps_profile+0xa62>
                piston_timer = 0;
   19536:	2300      	movs	r3, #0
   19538:	9306      	str	r3, [sp, #24]
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1953a:	2501      	movs	r5, #1
   1953c:	e583      	b.n	19046 <module_sps_profile+0x2a6>
            eStatus = eTaskGetState( xPiston );
   1953e:	ed9f aa68 	vldr	s20, [pc, #416]	@ 196e0 <module_sps_profile+0x940>
   19542:	f04f 0800 	mov.w	r8, #0
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->ready\n");
   19546:	4860      	ldr	r0, [pc, #384]	@ (196c8 <module_sps_profile+0x928>)
   19548:	f7f7 fd8e 	bl	11068 <am_util_stdio_printf>
   1954c:	485e      	ldr	r0, [pc, #376]	@ (196c8 <module_sps_profile+0x928>)
   1954e:	f004 fd13 	bl	1df78 <datalogger_log_debug>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19552:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   19556:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   1955a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1955e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19562:	f280 8156 	bge.w	19812 <module_sps_profile+0xa72>
                piston_timer = 0;
   19566:	2300      	movs	r3, #0
   19568:	9306      	str	r3, [sp, #24]
                piston_move = false;
   1956a:	461d      	mov	r5, r3
   1956c:	e56b      	b.n	19046 <module_sps_profile+0x2a6>
            else if ( averaged_rate < (-1*SYSTEM_RISE_RATE_MAX) && !piston_move && !crush_depth)
   1956e:	eddf 7a57 	vldr	s15, [pc, #348]	@ 196cc <module_sps_profile+0x92c>
   19572:	eeb4 7ae7 	vcmpe.f32	s14, s15
   19576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1957a:	f140 80f7 	bpl.w	1976c <module_sps_profile+0x9cc>
   1957e:	2d00      	cmp	r5, #0
   19580:	f47f aedd 	bne.w	1933e <module_sps_profile+0x59e>
   19584:	9b04      	ldr	r3, [sp, #16]
   19586:	2b00      	cmp	r3, #0
   19588:	f47f ad51 	bne.w	1902e <module_sps_profile+0x28e>
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, Depth Rate = %.4f, decrease %fin\n", averaged_rate, PARK_POSITION_INCREMENT2);
   1958c:	ee17 0a10 	vmov	r0, s14
   19590:	f7f2 ff1a 	bl	c3c8 <__aeabi_f2d>
   19594:	a73e      	add	r7, pc, #248	@ (adr r7, 19690 <module_sps_profile+0x8f0>)
   19596:	e9d7 6700 	ldrd	r6, r7, [r7]
   1959a:	4604      	mov	r4, r0
   1959c:	460d      	mov	r5, r1
   1959e:	460b      	mov	r3, r1
   195a0:	4622      	mov	r2, r4
   195a2:	e9cd 6700 	strd	r6, r7, [sp]
   195a6:	484a      	ldr	r0, [pc, #296]	@ (196d0 <module_sps_profile+0x930>)
   195a8:	f7f7 fd5e 	bl	11068 <am_util_stdio_printf>
   195ac:	e9cd 6700 	strd	r6, r7, [sp]
   195b0:	4847      	ldr	r0, [pc, #284]	@ (196d0 <module_sps_profile+0x930>)
   195b2:	4622      	mov	r2, r4
   195b4:	462b      	mov	r3, r5
   195b6:	f004 fcdf 	bl	1df78 <datalogger_log_debug>
                length_update -= PARK_POSITION_INCREMENT2;
   195ba:	eddf 7a46 	vldr	s15, [pc, #280]	@ 196d4 <module_sps_profile+0x934>
   195be:	ee7a aae7 	vsub.f32	s21, s21, s15
                if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   195c2:	eef1 8a05 	vmov.f32	s17, #21	@ 0x40a80000  5.250
   195c6:	eef4 aae8 	vcmpe.f32	s21, s17
   195ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   195ce:	f2c0 80a9 	blt.w	19724 <module_sps_profile+0x984>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   195d2:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
   195d6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 196d8 <module_sps_profile+0x938>
   195da:	eef4 7ac7 	vcmpe.f32	s15, s14
   195de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   195e2:	f280 81fb 	bge.w	199dc <module_sps_profile+0xc3c>
                    PIS_Get_Length(&Length);
   195e6:	a80b      	add	r0, sp, #44	@ 0x2c
   195e8:	f7fa fd18 	bl	1401c <PIS_Get_Length>
                    vTaskDelay(piston_period);
   195ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   195f0:	f7f5 fef8 	bl	f3e4 <vTaskDelay>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   195f4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 196d8 <module_sps_profile+0x938>
   195f8:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   195fc:	eef4 8ae7 	vcmpe.f32	s17, s15
   19600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19604:	f2c0 810c 	blt.w	19820 <module_sps_profile+0xa80>
                        if (Length >= (CRUSH_DEPTH_PISTON_POSITION - 0.01))
   19608:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1960a:	f7f2 fedd 	bl	c3c8 <__aeabi_f2d>
   1960e:	a322      	add	r3, pc, #136	@ (adr r3, 19698 <module_sps_profile+0x8f8>)
   19610:	e9d3 2300 	ldrd	r2, r3, [r3]
   19614:	f7f3 f9b6 	bl	c984 <__aeabi_dcmpge>
   19618:	2800      	cmp	r0, #0
   1961a:	f000 808b 	beq.w	19734 <module_sps_profile+0x994>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1961e:	ed9f aa30 	vldr	s20, [pc, #192]	@ 196e0 <module_sps_profile+0x940>
   19622:	f04f 0800 	mov.w	r8, #0
   19626:	e5d5      	b.n	191d4 <module_sps_profile+0x434>
                ARTEMIS_DEBUG_PRINTF("SPS :: porfile, Piston task->active\n");
   19628:	481d      	ldr	r0, [pc, #116]	@ (196a0 <module_sps_profile+0x900>)
                piston_timer += period;
   1962a:	ed9f aa2d 	vldr	s20, [pc, #180]	@ 196e0 <module_sps_profile+0x940>
                ARTEMIS_DEBUG_PRINTF("SPS :: porfile, Piston task->active\n");
   1962e:	f7f7 fd1b 	bl	11068 <am_util_stdio_printf>
   19632:	481b      	ldr	r0, [pc, #108]	@ (196a0 <module_sps_profile+0x900>)
   19634:	f004 fca0 	bl	1df78 <datalogger_log_debug>
                piston_timer += period;
   19638:	9b06      	ldr	r3, [sp, #24]
   1963a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   1963e:	9306      	str	r3, [sp, #24]
   19640:	f04f 0800 	mov.w	r8, #0
                    if (piston_timer >= 30000)
   19644:	9a06      	ldr	r2, [sp, #24]
   19646:	f247 532f 	movw	r3, #29999	@ 0x752f
   1964a:	429a      	cmp	r2, r3
   1964c:	f200 8154 	bhi.w	198f8 <module_sps_profile+0xb58>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19650:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
   19654:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   19658:	eef4 7ac7 	vcmpe.f32	s15, s14
   1965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19660:	da52      	bge.n	19708 <module_sps_profile+0x968>
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   19662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
   19666:	eef4 7ac7 	vcmpe.f32	s15, s14
   1966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1966e:	f200 811a 	bhi.w	198a6 <module_sps_profile+0xb06>
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, deliberately stopping the Piston\n");
   19672:	481a      	ldr	r0, [pc, #104]	@ (196dc <module_sps_profile+0x93c>)
   19674:	f7f7 fcf8 	bl	11068 <am_util_stdio_printf>
   19678:	4818      	ldr	r0, [pc, #96]	@ (196dc <module_sps_profile+0x93c>)
   1967a:	f004 fc7d 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   1967e:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19680:	f7fa fc74 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   19684:	f7fa fd54 	bl	14130 <PIS_stop>
                piston_timer = 0;
   19688:	e6b0      	b.n	193ec <module_sps_profile+0x64c>
   1968a:	bf00      	nop
   1968c:	f3af 8000 	nop.w
   19690:	40000000 	.word	0x40000000
   19694:	3f847ae1 	.word	0x3f847ae1
   19698:	8f5c28f6 	.word	0x8f5c28f6
   1969c:	4014f5c2 	.word	0x4014f5c2
   196a0:	0002e09c 	.word	0x0002e09c
   196a4:	0001d4bf 	.word	0x0001d4bf
   196a8:	1000b9e2 	.word	0x1000b9e2
   196ac:	1000b9d8 	.word	0x1000b9d8
   196b0:	0002e200 	.word	0x0002e200
   196b4:	0002e234 	.word	0x0002e234
   196b8:	1000bc98 	.word	0x1000bc98
   196bc:	0002e150 	.word	0x0002e150
   196c0:	0002dd44 	.word	0x0002dd44
   196c4:	0002e128 	.word	0x0002e128
   196c8:	0002e104 	.word	0x0002e104
   196cc:	beaa7efa 	.word	0xbeaa7efa
   196d0:	0002e028 	.word	0x0002e028
   196d4:	3c23d70a 	.word	0x3c23d70a
   196d8:	42340000 	.word	0x42340000
   196dc:	0002e198 	.word	0x0002e198
   196e0:	00000000 	.word	0x00000000
            eStatus = eTaskGetState( xPiston );
   196e4:	ed1f aa02 	vldr	s20, [pc, #-8]	@ 196e0 <module_sps_profile+0x940>
   196e8:	f04f 0800 	mov.w	r8, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   196ec:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   196f0:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   196f4:	eef4 8ae7 	vcmpe.f32	s17, s15
   196f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   196fc:	f2c0 81fa 	blt.w	19af4 <module_sps_profile+0xd54>
   19700:	9b04      	ldr	r3, [sp, #16]
   19702:	2b00      	cmp	r3, #0
   19704:	f040 81f9 	bne.w	19afa <module_sps_profile+0xd5a>
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, deliberately stopping the Piston\n");
   19708:	48c5      	ldr	r0, [pc, #788]	@ (19a20 <module_sps_profile+0xc80>)
   1970a:	f7f7 fcad 	bl	11068 <am_util_stdio_printf>
   1970e:	48c4      	ldr	r0, [pc, #784]	@ (19a20 <module_sps_profile+0xc80>)
   19710:	f004 fc32 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   19714:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19716:	f7fa fc29 	bl	13f6c <PIS_task_delete>
                PIS_stop();
   1971a:	f7fa fd09 	bl	14130 <PIS_stop>
                piston_timer = 0;
   1971e:	2300      	movs	r3, #0
   19720:	9306      	str	r3, [sp, #24]
   19722:	e557      	b.n	191d4 <module_sps_profile+0x434>
                if (length_update <= PISTON_POSITION_MINIMUM)
   19724:	eddf 8abf 	vldr	s17, [pc, #764]	@ 19a24 <module_sps_profile+0xc84>
   19728:	eef4 aae8 	vcmpe.f32	s21, s17
   1972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19730:	f240 80c4 	bls.w	198bc <module_sps_profile+0xb1c>
                    prof_piston_length = length_update;
   19734:	4bbc      	ldr	r3, [pc, #752]	@ (19a28 <module_sps_profile+0xc88>)
                    PIS_set_length(length_update);
   19736:	eeb0 0a6a 	vmov.f32	s0, s21
                    prof_piston_length = length_update;
   1973a:	edc3 aa00 	vstr	s21, [r3]
                    PIS_set_length(length_update);
   1973e:	f7fa fcc5 	bl	140cc <PIS_set_length>
                    PIS_task_move_length(&xPiston);
   19742:	a80c      	add	r0, sp, #48	@ 0x30
   19744:	f7fa fb72 	bl	13e2c <PIS_task_move_length>
            eStatus = eTaskGetState( xPiston );
   19748:	980c      	ldr	r0, [sp, #48]	@ 0x30
   1974a:	f7f5 faaf 	bl	ecac <eTaskGetState>
            if ( (eStatus==eRunning) || (eStatus==eBlocked) )
   1974e:	2804      	cmp	r0, #4
   19750:	d8c8      	bhi.n	196e4 <module_sps_profile+0x944>
   19752:	a301      	add	r3, pc, #4	@ (adr r3, 19758 <module_sps_profile+0x9b8>)
   19754:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   19758:	00019629 	.word	0x00019629
   1975c:	0001953f 	.word	0x0001953f
   19760:	00019629 	.word	0x00019629
   19764:	00019509 	.word	0x00019509
   19768:	00019467 	.word	0x00019467
            rate_avg = 0.0;
   1976c:	ed9f aaaf 	vldr	s20, [pc, #700]	@ 19a2c <module_sps_profile+0xc8c>
            rate_count = 0;
   19770:	f04f 0800 	mov.w	r8, #0
   19774:	e51d      	b.n	191b2 <module_sps_profile+0x412>
                ARTEMIS_DEBUG_PRINTF("SPS :: profile, Depth Rate = %.4f, increase %fin\n", averaged_rate, PARK_POSITION_INCREMENT);
   19776:	ee17 0a10 	vmov	r0, s14
   1977a:	f7f2 fe25 	bl	c3c8 <__aeabi_f2d>
   1977e:	a7a4      	add	r7, pc, #656	@ (adr r7, 19a10 <module_sps_profile+0xc70>)
   19780:	e9d7 6700 	ldrd	r6, r7, [r7]
   19784:	4604      	mov	r4, r0
   19786:	460d      	mov	r5, r1
   19788:	460b      	mov	r3, r1
   1978a:	4622      	mov	r2, r4
   1978c:	e9cd 6700 	strd	r6, r7, [sp]
   19790:	48a7      	ldr	r0, [pc, #668]	@ (19a30 <module_sps_profile+0xc90>)
   19792:	f7f7 fc69 	bl	11068 <am_util_stdio_printf>
   19796:	e9cd 6700 	strd	r6, r7, [sp]
   1979a:	48a5      	ldr	r0, [pc, #660]	@ (19a30 <module_sps_profile+0xc90>)
   1979c:	4622      	mov	r2, r4
   1979e:	462b      	mov	r3, r5
   197a0:	f004 fbea 	bl	1df78 <datalogger_log_debug>
                length_update += PARK_POSITION_INCREMENT;
   197a4:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 19a34 <module_sps_profile+0xc94>
   197a8:	ee7a aaa7 	vadd.f32	s21, s21, s15
                if (length_update >= CRUSH_DEPTH_PISTON_POSITION)
   197ac:	eef1 8a05 	vmov.f32	s17, #21	@ 0x40a80000  5.250
   197b0:	eef4 aae8 	vcmpe.f32	s21, s17
   197b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   197b8:	dbbc      	blt.n	19734 <module_sps_profile+0x994>
                    if (Depth >= CRITICAL_PISTON_POSITON_DEPTH)
   197ba:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
   197be:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 19a38 <module_sps_profile+0xc98>
   197c2:	eef4 7ac7 	vcmpe.f32	s15, s14
   197c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   197ca:	f280 80ce 	bge.w	1996a <module_sps_profile+0xbca>
                    else if (Depth < CRITICAL_PISTON_POSITON_DEPTH)
   197ce:	f57f af0a 	bpl.w	195e6 <module_sps_profile+0x846>
                        if (length_update >= PISTON_POSITION_MAXIMUM)
   197d2:	eef2 8a07 	vmov.f32	s17, #39	@ 0x41380000  11.5
   197d6:	eef4 aae8 	vcmpe.f32	s21, s17
   197da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   197de:	f6ff af02 	blt.w	195e6 <module_sps_profile+0x846>
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Depth=%.4f is @Maximum piston position >>\n", Depth);
   197e2:	ee17 0a90 	vmov	r0, s15
   197e6:	f7f2 fdef 	bl	c3c8 <__aeabi_f2d>
   197ea:	4602      	mov	r2, r0
   197ec:	460b      	mov	r3, r1
   197ee:	4893      	ldr	r0, [pc, #588]	@ (19a3c <module_sps_profile+0xc9c>)
   197f0:	f7f7 fc3a 	bl	11068 <am_util_stdio_printf>
   197f4:	980e      	ldr	r0, [sp, #56]	@ 0x38
   197f6:	f7f2 fde7 	bl	c3c8 <__aeabi_f2d>
   197fa:	4602      	mov	r2, r0
   197fc:	460b      	mov	r3, r1
   197fe:	488f      	ldr	r0, [pc, #572]	@ (19a3c <module_sps_profile+0xc9c>)
   19800:	e0c2      	b.n	19988 <module_sps_profile+0xbe8>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19802:	9b04      	ldr	r3, [sp, #16]
   19804:	2b00      	cmp	r3, #0
   19806:	f43f af7f 	beq.w	19708 <module_sps_profile+0x968>
   1980a:	461d      	mov	r5, r3
                piston_timer = 0;
   1980c:	2300      	movs	r3, #0
   1980e:	9306      	str	r3, [sp, #24]
   19810:	e421      	b.n	19056 <module_sps_profile+0x2b6>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19812:	9b04      	ldr	r3, [sp, #16]
   19814:	2b00      	cmp	r3, #0
   19816:	d083      	beq.n	19720 <module_sps_profile+0x980>
                piston_timer = 0;
   19818:	2300      	movs	r3, #0
   1981a:	9306      	str	r3, [sp, #24]
                piston_move = false;
   1981c:	461d      	mov	r5, r3
   1981e:	e41a      	b.n	19056 <module_sps_profile+0x2b6>
                    else if (Depth < CRITICAL_PISTON_POSITON_DEPTH)
   19820:	d546      	bpl.n	198b0 <module_sps_profile+0xb10>
                        if (length_update >= PISTON_POSITION_MAXIMUM && Length >= (PISTON_POSITION_MAXIMUM -.01))
   19822:	eef2 7a07 	vmov.f32	s15, #39	@ 0x41380000  11.5
   19826:	eef4 aae7 	vcmpe.f32	s21, s15
   1982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1982e:	db81      	blt.n	19734 <module_sps_profile+0x994>
   19830:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   19832:	f7f2 fdc9 	bl	c3c8 <__aeabi_f2d>
   19836:	a378      	add	r3, pc, #480	@ (adr r3, 19a18 <module_sps_profile+0xc78>)
   19838:	e9d3 2300 	ldrd	r2, r3, [r3]
   1983c:	f7f3 f8a2 	bl	c984 <__aeabi_dcmpge>
   19840:	2800      	cmp	r0, #0
   19842:	f43f af77 	beq.w	19734 <module_sps_profile+0x994>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19846:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   1984a:	eef4 8ae7 	vcmpe.f32	s17, s15
   1984e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19852:	f6bf aee4 	bge.w	1961e <module_sps_profile+0x87e>
   19856:	f04f 0800 	mov.w	r8, #0
   1985a:	ed9f aa74 	vldr	s20, [pc, #464]	@ 19a2c <module_sps_profile+0xc8c>
   1985e:	4645      	mov	r5, r8
   19860:	f7ff bbf1 	b.w	19046 <module_sps_profile+0x2a6>
        length_update = prof_piston_length;
   19864:	4e70      	ldr	r6, [pc, #448]	@ (19a28 <module_sps_profile+0xc88>)
   19866:	ed96 ca00 	vldr	s24, [r6]
        Volume = CTRL_calculate_volume_from_length(length_update);
   1986a:	eeb0 0a4c 	vmov.f32	s0, s24
   1986e:	f7fa fda3 	bl	143b8 <CTRL_calculate_volume_from_length>
   19872:	ee10 5a10 	vmov	r5, s0
        Density = CTRL_calculate_lcp_density(Volume);
   19876:	f7fa fcb7 	bl	141e8 <CTRL_calculate_lcp_density>
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Setting -> adjusted prof_piston_length=%.4f >>\n", prof_piston_length);
   1987a:	6830      	ldr	r0, [r6, #0]
        Density = CTRL_calculate_lcp_density(Volume);
   1987c:	ee10 4a10 	vmov	r4, s0
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Setting -> adjusted prof_piston_length=%.4f >>\n", prof_piston_length);
   19880:	f7f2 fda2 	bl	c3c8 <__aeabi_f2d>
   19884:	4602      	mov	r2, r0
   19886:	460b      	mov	r3, r1
   19888:	486d      	ldr	r0, [pc, #436]	@ (19a40 <module_sps_profile+0xca0>)
   1988a:	f7f7 fbed 	bl	11068 <am_util_stdio_printf>
   1988e:	6830      	ldr	r0, [r6, #0]
   19890:	f7f2 fd9a 	bl	c3c8 <__aeabi_f2d>
   19894:	4602      	mov	r2, r0
   19896:	460b      	mov	r3, r1
   19898:	4869      	ldr	r0, [pc, #420]	@ (19a40 <module_sps_profile+0xca0>)
   1989a:	f004 fb6d 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: profile, Setting -> Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n\n", Density, Volume, length_update);
   1989e:	ee1c 0a10 	vmov	r0, s24
   198a2:	f7ff bad0 	b.w	18e46 <module_sps_profile+0xa6>
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   198a6:	2300      	movs	r3, #0
   198a8:	9304      	str	r3, [sp, #16]
   198aa:	2501      	movs	r5, #1
   198ac:	f7ff bbd3 	b.w	19056 <module_sps_profile+0x2b6>
   198b0:	2500      	movs	r5, #0
   198b2:	ed9f aa5e 	vldr	s20, [pc, #376]	@ 19a2c <module_sps_profile+0xc8c>
   198b6:	46a8      	mov	r8, r5
   198b8:	f7ff bbcd 	b.w	19056 <module_sps_profile+0x2b6>
                    ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, length_update=%.4fin < piston position minimum >>\n", length_update);
   198bc:	ee1a 0a90 	vmov	r0, s21
   198c0:	f7f2 fd82 	bl	c3c8 <__aeabi_f2d>
   198c4:	4604      	mov	r4, r0
   198c6:	460d      	mov	r5, r1
   198c8:	460b      	mov	r3, r1
   198ca:	4622      	mov	r2, r4
   198cc:	485d      	ldr	r0, [pc, #372]	@ (19a44 <module_sps_profile+0xca4>)
   198ce:	f7f7 fbcb 	bl	11068 <am_util_stdio_printf>
   198d2:	485c      	ldr	r0, [pc, #368]	@ (19a44 <module_sps_profile+0xca4>)
   198d4:	4622      	mov	r2, r4
   198d6:	462b      	mov	r3, r5
   198d8:	f004 fb4e 	bl	1df78 <datalogger_log_debug>
                    length_update = PISTON_POSITION_MINIMUM;
   198dc:	eef0 aa68 	vmov.f32	s21, s17
   198e0:	e728      	b.n	19734 <module_sps_profile+0x994>
            ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston task->suspended\n");
   198e2:	4859      	ldr	r0, [pc, #356]	@ (19a48 <module_sps_profile+0xca8>)
   198e4:	f7f7 fbc0 	bl	11068 <am_util_stdio_printf>
   198e8:	4857      	ldr	r0, [pc, #348]	@ (19a48 <module_sps_profile+0xca8>)
   198ea:	f004 fb45 	bl	1df78 <datalogger_log_debug>
            PIS_task_delete(xPiston);
   198ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
   198f0:	f7fa fb3c 	bl	13f6c <PIS_task_delete>
            piston_timer = 0;
   198f4:	f7ff baff 	b.w	18ef6 <module_sps_profile+0x156>
                        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston time-out, task->finished\n");
   198f8:	4854      	ldr	r0, [pc, #336]	@ (19a4c <module_sps_profile+0xcac>)
   198fa:	f7f7 fbb5 	bl	11068 <am_util_stdio_printf>
   198fe:	4853      	ldr	r0, [pc, #332]	@ (19a4c <module_sps_profile+0xcac>)
   19900:	f004 fb3a 	bl	1df78 <datalogger_log_debug>
                        PIS_task_delete(xPiston);
   19904:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19906:	f7fa fb31 	bl	13f6c <PIS_task_delete>
                        PIS_Reset();
   1990a:	f7fa fc25 	bl	14158 <PIS_Reset>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1990e:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
   19912:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
   19916:	eef4 7ac7 	vcmpe.f32	s15, s14
   1991a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1991e:	f6bf aef3 	bge.w	19708 <module_sps_profile+0x968>
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   19922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
   19926:	eef4 7ac7 	vcmpe.f32	s15, s14
                        piston_timer = 0;
   1992a:	2300      	movs	r3, #0
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   1992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        piston_timer = 0;
   19930:	9306      	str	r3, [sp, #24]
        if (Depth <= BALLAST_DEPTH_PROFILE && !crush_depth)
   19932:	d8b8      	bhi.n	198a6 <module_sps_profile+0xb06>
   19934:	e69d      	b.n	19672 <module_sps_profile+0x8d2>
                        ARTEMIS_DEBUG_PRINTF("SPS :: profile, Piston CRUSH_DEPTH time-out, task->finished\n");
   19936:	4846      	ldr	r0, [pc, #280]	@ (19a50 <module_sps_profile+0xcb0>)
   19938:	f7f7 fb96 	bl	11068 <am_util_stdio_printf>
   1993c:	4844      	ldr	r0, [pc, #272]	@ (19a50 <module_sps_profile+0xcb0>)
   1993e:	f004 fb1b 	bl	1df78 <datalogger_log_debug>
                        PIS_task_delete(xPiston);
   19942:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19944:	f7fa fb12 	bl	13f6c <PIS_task_delete>
                        PIS_Reset();
   19948:	f7fa fc06 	bl	14158 <PIS_Reset>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1994c:	eddd 8a0e 	vldr	s17, [sp, #56]	@ 0x38
   19950:	9d04      	ldr	r5, [sp, #16]
   19952:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
   19956:	eef4 8ae7 	vcmpe.f32	s17, s15
                        piston_timer = 0;
   1995a:	2300      	movs	r3, #0
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   1995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        piston_timer = 0;
   19960:	9306      	str	r3, [sp, #24]
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19962:	f6bf ab78 	bge.w	19056 <module_sps_profile+0x2b6>
   19966:	f7ff bb6e 	b.w	19046 <module_sps_profile+0x2a6>
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Depth=%.4f is @critical piston position >>\n", Depth);
   1996a:	ee17 0a90 	vmov	r0, s15
   1996e:	f7f2 fd2b 	bl	c3c8 <__aeabi_f2d>
   19972:	4602      	mov	r2, r0
   19974:	460b      	mov	r3, r1
   19976:	4837      	ldr	r0, [pc, #220]	@ (19a54 <module_sps_profile+0xcb4>)
   19978:	f7f7 fb76 	bl	11068 <am_util_stdio_printf>
   1997c:	980e      	ldr	r0, [sp, #56]	@ 0x38
   1997e:	f7f2 fd23 	bl	c3c8 <__aeabi_f2d>
   19982:	4602      	mov	r2, r0
   19984:	4833      	ldr	r0, [pc, #204]	@ (19a54 <module_sps_profile+0xcb4>)
   19986:	460b      	mov	r3, r1
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Depth=%.4f is @Maximum piston position >>\n", Depth);
   19988:	f004 faf6 	bl	1df78 <datalogger_log_debug>
                            crit_depth_piston_pos_time += (period * rate_count);
   1998c:	9a07      	ldr	r2, [sp, #28]
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Critical Depth Piston Position Timer = %f seconds >>\n", (float) crit_depth_piston_pos_time/period);
   1998e:	eddf 7a32 	vldr	s15, [pc, #200]	@ 19a58 <module_sps_profile+0xcb8>
                            crit_depth_piston_pos_time += (period * rate_count);
   19992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
   19996:	fb03 2308 	mla	r3, r3, r8, r2
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Critical Depth Piston Position Timer = %f seconds >>\n", (float) crit_depth_piston_pos_time/period);
   1999a:	ee07 3a10 	vmov	s14, r3
   1999e:	eeb8 aa47 	vcvt.f32.u32	s20, s14
                        crit_depth_piston_pos_time += period;
   199a2:	9307      	str	r3, [sp, #28]
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Critical Depth Piston Position Timer = %f seconds >>\n", (float) crit_depth_piston_pos_time/period);
   199a4:	eeca 7a27 	vdiv.f32	s15, s20, s15
   199a8:	ee17 0a90 	vmov	r0, s15
   199ac:	f7f2 fd0c 	bl	c3c8 <__aeabi_f2d>
   199b0:	4604      	mov	r4, r0
   199b2:	460d      	mov	r5, r1
   199b4:	460b      	mov	r3, r1
   199b6:	4622      	mov	r2, r4
   199b8:	4828      	ldr	r0, [pc, #160]	@ (19a5c <module_sps_profile+0xcbc>)
   199ba:	f7f7 fb55 	bl	11068 <am_util_stdio_printf>
   199be:	4827      	ldr	r0, [pc, #156]	@ (19a5c <module_sps_profile+0xcbc>)
   199c0:	4622      	mov	r2, r4
   199c2:	462b      	mov	r3, r5
   199c4:	f004 fad8 	bl	1df78 <datalogger_log_debug>
                        if (crit_depth_piston_pos_time >= period*SYSTEM_CDPP_TIMER)
   199c8:	eddf 7a25 	vldr	s15, [pc, #148]	@ 19a60 <module_sps_profile+0xcc0>
   199cc:	eeb4 aae7 	vcmpe.f32	s20, s15
   199d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   199d4:	da70      	bge.n	19ab8 <module_sps_profile+0xd18>
                        length_update = CRUSH_DEPTH_PISTON_POSITION;
   199d6:	eef0 aa68 	vmov.f32	s21, s17
   199da:	e604      	b.n	195e6 <module_sps_profile+0x846>
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Depth=%.4f is @critial piston position >>\n", Depth);
   199dc:	ee17 0a90 	vmov	r0, s15
   199e0:	f7f2 fcf2 	bl	c3c8 <__aeabi_f2d>
   199e4:	4602      	mov	r2, r0
   199e6:	460b      	mov	r3, r1
   199e8:	481e      	ldr	r0, [pc, #120]	@ (19a64 <module_sps_profile+0xcc4>)
   199ea:	f7f7 fb3d 	bl	11068 <am_util_stdio_printf>
   199ee:	980e      	ldr	r0, [sp, #56]	@ 0x38
   199f0:	f7f2 fcea 	bl	c3c8 <__aeabi_f2d>
   199f4:	4602      	mov	r2, r0
   199f6:	460b      	mov	r3, r1
   199f8:	481a      	ldr	r0, [pc, #104]	@ (19a64 <module_sps_profile+0xcc4>)
   199fa:	f004 fabd 	bl	1df78 <datalogger_log_debug>
                        crit_depth_piston_pos_time += period;
   199fe:	9b07      	ldr	r3, [sp, #28]
                        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Critical Depth Piston Position Timer = %f seconds >>\n", (float) crit_depth_piston_pos_time/period);
   19a00:	eddf 7a15 	vldr	s15, [pc, #84]	@ 19a58 <module_sps_profile+0xcb8>
                        crit_depth_piston_pos_time += period;
   19a04:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
   19a08:	e7c7      	b.n	1999a <module_sps_profile+0xbfa>
   19a0a:	bf00      	nop
   19a0c:	f3af 8000 	nop.w
   19a10:	e0000000 	.word	0xe0000000
   19a14:	3f9eb851 	.word	0x3f9eb851
   19a18:	47ae147b 	.word	0x47ae147b
   19a1c:	4026fae1 	.word	0x4026fae1
   19a20:	0002e198 	.word	0x0002e198
   19a24:	3dcccccd 	.word	0x3dcccccd
   19a28:	1000b9c4 	.word	0x1000b9c4
   19a2c:	00000000 	.word	0x00000000
   19a30:	0002dee0 	.word	0x0002dee0
   19a34:	3cf5c28f 	.word	0x3cf5c28f
   19a38:	42340000 	.word	0x42340000
   19a3c:	0002dfe8 	.word	0x0002dfe8
   19a40:	0002dc28 	.word	0x0002dc28
   19a44:	0002dbe0 	.word	0x0002dbe0
   19a48:	0002dd1c 	.word	0x0002dd1c
   19a4c:	0002dce8 	.word	0x0002dce8
   19a50:	0002e0c4 	.word	0x0002e0c4
   19a54:	0002df14 	.word	0x0002df14
   19a58:	447a0000 	.word	0x447a0000
   19a5c:	0002df54 	.word	0x0002df54
   19a60:	486a6000 	.word	0x486a6000
   19a64:	0002e05c 	.word	0x0002e05c
        ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, length_update=%.4fin < piston position minimum >>\n", length_update);
   19a68:	f7f2 fcae 	bl	c3c8 <__aeabi_f2d>
   19a6c:	4606      	mov	r6, r0
   19a6e:	460f      	mov	r7, r1
   19a70:	460b      	mov	r3, r1
   19a72:	4632      	mov	r2, r6
   19a74:	4824      	ldr	r0, [pc, #144]	@ (19b08 <module_sps_profile+0xd68>)
   19a76:	f7f7 faf7 	bl	11068 <am_util_stdio_printf>
   19a7a:	4823      	ldr	r0, [pc, #140]	@ (19b08 <module_sps_profile+0xd68>)
   19a7c:	4632      	mov	r2, r6
   19a7e:	463b      	mov	r3, r7
   19a80:	f004 fa7a 	bl	1df78 <datalogger_log_debug>
   19a84:	f20f 0978 	addw	r9, pc, #120	@ 0x78
   19a88:	e9d9 8900 	ldrd	r8, r9, [r9]
        length_update = PISTON_POSITION_MINIMUM;
   19a8c:	eeb0 ca48 	vmov.f32	s24, s16
   19a90:	f7ff b9dd 	b.w	18e4e <module_sps_profile+0xae>
                    SENS_task_delete(xTemp);
   19a94:	980a      	ldr	r0, [sp, #40]	@ 0x28
   19a96:	f7fb fe6b 	bl	15770 <SENS_task_delete>
                    SENS_sensor_temperature_off();
   19a9a:	f7fb fe05 	bl	156a8 <SENS_sensor_temperature_off>
                    SENS_task_delete(xDepth);
   19a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
   19aa0:	f7fb fe66 	bl	15770 <SENS_task_delete>
                    SENS_sensor_depth_off();
   19aa4:	f7fb fdf8 	bl	15698 <SENS_sensor_depth_off>
                    spsEvent = MODE_POPUP;
   19aa8:	2302      	movs	r3, #2
                    vTaskDelay(piston_period);
   19aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                    spsEvent = MODE_POPUP;
   19aae:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
                    vTaskDelay(piston_period);
   19ab2:	f7f5 fc97 	bl	f3e4 <vTaskDelay>
                    break;
   19ab6:	e4aa      	b.n	1940e <module_sps_profile+0x66e>
                            prof_piston_length = length_update_last_adjusted;
   19ab8:	4914      	ldr	r1, [pc, #80]	@ (19b0c <module_sps_profile+0xd6c>)
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Critical Depth Piston Position Time out %f mins >>\n", (float) SYSTEM_CDPP_TIMER/60);
   19aba:	4b15      	ldr	r3, [pc, #84]	@ (19b10 <module_sps_profile+0xd70>)
   19abc:	4815      	ldr	r0, [pc, #84]	@ (19b14 <module_sps_profile+0xd74>)
                            prof_piston_length = length_update_last_adjusted;
   19abe:	ed81 ca00 	vstr	s24, [r1]
                            ARTEMIS_DEBUG_PRINTF("\n<< SPS :: profile, Critical Depth Piston Position Time out %f mins >>\n", (float) SYSTEM_CDPP_TIMER/60);
   19ac2:	2200      	movs	r2, #0
   19ac4:	f7f7 fad0 	bl	11068 <am_util_stdio_printf>
   19ac8:	4b11      	ldr	r3, [pc, #68]	@ (19b10 <module_sps_profile+0xd70>)
   19aca:	4812      	ldr	r0, [pc, #72]	@ (19b14 <module_sps_profile+0xd74>)
   19acc:	2200      	movs	r2, #0
   19ace:	f004 fa53 	bl	1df78 <datalogger_log_debug>
                            critical_park_state = true;
   19ad2:	4a11      	ldr	r2, [pc, #68]	@ (19b18 <module_sps_profile+0xd78>)
                            SENS_task_delete(xTemp);
   19ad4:	980a      	ldr	r0, [sp, #40]	@ 0x28
                            critical_park_state = true;
   19ad6:	2101      	movs	r1, #1
                            spsEvent = MODE_CRIT_TO_PARK;
   19ad8:	2305      	movs	r3, #5
                            critical_park_state = true;
   19ada:	7011      	strb	r1, [r2, #0]
                            spsEvent = MODE_CRIT_TO_PARK;
   19adc:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
                            SENS_task_delete(xTemp);
   19ae0:	f7fb fe46 	bl	15770 <SENS_task_delete>
                            SENS_sensor_temperature_off();
   19ae4:	f7fb fde0 	bl	156a8 <SENS_sensor_temperature_off>
                            SENS_task_delete(xDepth);
   19ae8:	9809      	ldr	r0, [sp, #36]	@ 0x24
   19aea:	f7fb fe41 	bl	15770 <SENS_task_delete>
                            SENS_sensor_depth_off();
   19aee:	f7fb fdd3 	bl	15698 <SENS_sensor_depth_off>
                            break;
   19af2:	e48c      	b.n	1940e <module_sps_profile+0x66e>
        if (Depth >= CRUSH_DEPTH && !crush_depth)
   19af4:	2501      	movs	r5, #1
   19af6:	f7ff baa6 	b.w	19046 <module_sps_profile+0x2a6>
   19afa:	9d04      	ldr	r5, [sp, #16]
   19afc:	f7ff baab 	b.w	19056 <module_sps_profile+0x2b6>
   19b00:	a0000000 	.word	0xa0000000
   19b04:	3fb99999 	.word	0x3fb99999
   19b08:	0002dbe0 	.word	0x0002dbe0
   19b0c:	1000b9c4 	.word	0x1000b9c4
   19b10:	40100000 	.word	0x40100000
   19b14:	0002dfa0 	.word	0x0002dfa0
   19b18:	1000b9c0 	.word	0x1000b9c0

00019b1c <module_sps_move_to_surface>:
{
   19b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b20:	b095      	sub	sp, #84	@ 0x54
    float Length = 0.0;
   19b22:	2300      	movs	r3, #0
    PIS_set_piston_rate(1);
   19b24:	2001      	movs	r0, #1
    TaskHandle_t xPiston = NULL;
   19b26:	2400      	movs	r4, #0
    float Length = 0.0;
   19b28:	9306      	str	r3, [sp, #24]
    TaskHandle_t xPiston = NULL;
   19b2a:	9407      	str	r4, [sp, #28]
    PIS_set_piston_rate(1);
   19b2c:	f7fa fa84 	bl	14038 <PIS_set_piston_rate>
    PIS_set_length(10.5);
   19b30:	eeb2 0a05 	vmov.f32	s0, #37	@ 0x41280000  10.5
   19b34:	f7fa faca 	bl	140cc <PIS_set_length>
    PIS_task_move_length(&xPiston);
   19b38:	a807      	add	r0, sp, #28
   19b3a:	f7fa f977 	bl	13e2c <PIS_task_move_length>
    vTaskDelay(piston_period);
   19b3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19b42:	f7f5 fc4f 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   19b46:	9807      	ldr	r0, [sp, #28]
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Piston task->active\n");
   19b48:	4dc2      	ldr	r5, [pc, #776]	@ (19e54 <module_sps_move_to_surface+0x338>)
            if (piston_timer >= 120000)
   19b4a:	4ec3      	ldr	r6, [pc, #780]	@ (19e58 <module_sps_move_to_surface+0x33c>)
        eStatus = eTaskGetState( xPiston );
   19b4c:	f7f5 f8ae 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) || (eStatus==eBlocked) || (eStatus==eReady) )
   19b50:	2802      	cmp	r0, #2
   19b52:	d90e      	bls.n	19b72 <module_sps_move_to_surface+0x56>
        else if (eStatus==eSuspended)
   19b54:	2803      	cmp	r0, #3
   19b56:	f000 81a3 	beq.w	19ea0 <module_sps_move_to_surface+0x384>
        else if (eStatus==eDeleted)
   19b5a:	2804      	cmp	r0, #4
   19b5c:	f000 81ab 	beq.w	19eb6 <module_sps_move_to_surface+0x39a>
        vTaskDelay(piston_period);
   19b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19b64:	f7f5 fc3e 	bl	f3e4 <vTaskDelay>
        eStatus = eTaskGetState( xPiston );
   19b68:	9807      	ldr	r0, [sp, #28]
   19b6a:	f7f5 f89f 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) || (eStatus==eBlocked) || (eStatus==eReady) )
   19b6e:	2802      	cmp	r0, #2
   19b70:	d8f0      	bhi.n	19b54 <module_sps_move_to_surface+0x38>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Piston task->active\n");
   19b72:	4628      	mov	r0, r5
   19b74:	f7f7 fa78 	bl	11068 <am_util_stdio_printf>
            piston_timer += piston_period;
   19b78:	f504 747a 	add.w	r4, r4, #1000	@ 0x3e8
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Piston task->active\n");
   19b7c:	4628      	mov	r0, r5
   19b7e:	f004 f9fb 	bl	1df78 <datalogger_log_debug>
            if (piston_timer >= 120000)
   19b82:	42b4      	cmp	r4, r6
   19b84:	d9ec      	bls.n	19b60 <module_sps_move_to_surface+0x44>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Piston time-out, task->finished\n");
   19b86:	48b5      	ldr	r0, [pc, #724]	@ (19e5c <module_sps_move_to_surface+0x340>)
   19b88:	f7f7 fa6e 	bl	11068 <am_util_stdio_printf>
   19b8c:	48b3      	ldr	r0, [pc, #716]	@ (19e5c <module_sps_move_to_surface+0x340>)
   19b8e:	f004 f9f3 	bl	1df78 <datalogger_log_debug>
                PIS_Get_Length(&Length);
   19b92:	a806      	add	r0, sp, #24
   19b94:	f7fa fa42 	bl	1401c <PIS_Get_Length>
                Volume = CTRL_calculate_volume_from_length(Length);
   19b98:	ed9d 0a06 	vldr	s0, [sp, #24]
   19b9c:	f7fa fc0c 	bl	143b8 <CTRL_calculate_volume_from_length>
   19ba0:	ee10 5a10 	vmov	r5, s0
                Density = CTRL_calculate_lcp_density(Volume);
   19ba4:	f7fa fb20 	bl	141e8 <CTRL_calculate_lcp_density>
   19ba8:	ee10 0a10 	vmov	r0, s0
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   19bac:	f7f2 fc0c 	bl	c3c8 <__aeabi_f2d>
   19bb0:	4602      	mov	r2, r0
   19bb2:	4628      	mov	r0, r5
   19bb4:	4614      	mov	r4, r2
   19bb6:	460d      	mov	r5, r1
   19bb8:	f7f2 fc06 	bl	c3c8 <__aeabi_f2d>
   19bbc:	4606      	mov	r6, r0
   19bbe:	9806      	ldr	r0, [sp, #24]
   19bc0:	460f      	mov	r7, r1
   19bc2:	f7f2 fc01 	bl	c3c8 <__aeabi_f2d>
   19bc6:	460b      	mov	r3, r1
   19bc8:	4602      	mov	r2, r0
   19bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19bce:	e9cd 6700 	strd	r6, r7, [sp]
   19bd2:	4622      	mov	r2, r4
   19bd4:	462b      	mov	r3, r5
   19bd6:	48a2      	ldr	r0, [pc, #648]	@ (19e60 <module_sps_move_to_surface+0x344>)
   19bd8:	f7f7 fa46 	bl	11068 <am_util_stdio_printf>
   19bdc:	9806      	ldr	r0, [sp, #24]
   19bde:	f7f2 fbf3 	bl	c3c8 <__aeabi_f2d>
   19be2:	460b      	mov	r3, r1
   19be4:	4602      	mov	r2, r0
   19be6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19bea:	489d      	ldr	r0, [pc, #628]	@ (19e60 <module_sps_move_to_surface+0x344>)
   19bec:	4622      	mov	r2, r4
   19bee:	462b      	mov	r3, r5
   19bf0:	e9cd 6700 	strd	r6, r7, [sp]
   19bf4:	f004 f9c0 	bl	1df78 <datalogger_log_debug>
                PIS_task_delete(xPiston);
   19bf8:	9807      	ldr	r0, [sp, #28]
   19bfa:	f7fa f9b7 	bl	13f6c <PIS_task_delete>
                vTaskDelay(piston_period);
   19bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19c02:	f7f5 fbef 	bl	f3e4 <vTaskDelay>
                PIS_Reset();
   19c06:	f7fa faa7 	bl	14158 <PIS_Reset>
        vTaskDelay(piston_period);
   19c0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19c0e:	f7f5 fbe9 	bl	f3e4 <vTaskDelay>
    SENS_set_gps_rate(s_rate);
   19c12:	2001      	movs	r0, #1
   19c14:	f7fc f822 	bl	15c5c <SENS_set_gps_rate>
    TaskHandle_t xGps = NULL;
   19c18:	2400      	movs	r4, #0
    SENS_sensor_gps_on();
   19c1a:	f7fb fd43 	bl	156a4 <SENS_sensor_gps_on>
    SENS_task_gps(&xGps);
   19c1e:	a808      	add	r0, sp, #32
    TaskHandle_t xGps = NULL;
   19c20:	9408      	str	r4, [sp, #32]
    SENS_task_gps(&xGps);
   19c22:	f7fb ff91 	bl	15b48 <SENS_task_gps>
    xLastWakeTime = xTaskGetTickCount();
   19c26:	f7f5 f99d 	bl	ef64 <xTaskGetTickCount>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->suspended\n");
   19c2a:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 19e98 <module_sps_move_to_surface+0x37c>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : No fix\n");
   19c2e:	4d8d      	ldr	r5, [pc, #564]	@ (19e64 <module_sps_move_to_surface+0x348>)
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   19c30:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 19e9c <module_sps_move_to_surface+0x380>
    xLastWakeTime = xTaskGetTickCount();
   19c34:	9009      	str	r0, [sp, #36]	@ 0x24
    while (run)
   19c36:	e009      	b.n	19c4c <module_sps_move_to_surface+0x130>
        else if (eStatus==eSuspended)
   19c38:	2803      	cmp	r0, #3
   19c3a:	f000 80ef 	beq.w	19e1c <module_sps_move_to_surface+0x300>
        else if (eStatus==eDeleted)
   19c3e:	2804      	cmp	r0, #4
   19c40:	d05f      	beq.n	19d02 <module_sps_move_to_surface+0x1e6>
        vTaskDelayUntil(&xLastWakeTime, period);
   19c42:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   19c46:	a809      	add	r0, sp, #36	@ 0x24
   19c48:	f7f5 fc34 	bl	f4b4 <vTaskDelayUntil>
        eStatus = eTaskGetState( xGps );
   19c4c:	9808      	ldr	r0, [sp, #32]
   19c4e:	f7f5 f82d 	bl	ecac <eTaskGetState>
        if ( (eStatus==eRunning) ||
   19c52:	2802      	cmp	r0, #2
   19c54:	d8f0      	bhi.n	19c38 <module_sps_move_to_surface+0x11c>
            SENS_get_gps(&gps);
   19c56:	a80d      	add	r0, sp, #52	@ 0x34
   19c58:	f7fb fd76 	bl	15748 <SENS_get_gps>
            if (gps.fix == true)
   19c5c:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : No fix\n");
   19c60:	4628      	mov	r0, r5
            if (gps.fix == true)
   19c62:	2b00      	cmp	r3, #0
   19c64:	f000 80d4 	beq.w	19e10 <module_sps_move_to_surface+0x2f4>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   19c68:	980e      	ldr	r0, [sp, #56]	@ 0x38
   19c6a:	f7f2 fbad 	bl	c3c8 <__aeabi_f2d>
   19c6e:	4606      	mov	r6, r0
   19c70:	9810      	ldr	r0, [sp, #64]	@ 0x40
   19c72:	460f      	mov	r7, r1
   19c74:	f7f2 fba8 	bl	c3c8 <__aeabi_f2d>
   19c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19c7c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   19c7e:	f7f2 fba3 	bl	c3c8 <__aeabi_f2d>
   19c82:	4632      	mov	r2, r6
   19c84:	463b      	mov	r3, r7
   19c86:	e9cd 0100 	strd	r0, r1, [sp]
   19c8a:	4640      	mov	r0, r8
   19c8c:	f7f7 f9ec 	bl	11068 <am_util_stdio_printf>
   19c90:	980e      	ldr	r0, [sp, #56]	@ 0x38
   19c92:	f7f2 fb99 	bl	c3c8 <__aeabi_f2d>
   19c96:	4606      	mov	r6, r0
   19c98:	9810      	ldr	r0, [sp, #64]	@ 0x40
   19c9a:	460f      	mov	r7, r1
   19c9c:	f7f2 fb94 	bl	c3c8 <__aeabi_f2d>
   19ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19ca4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   19ca6:	f7f2 fb8f 	bl	c3c8 <__aeabi_f2d>
                fix++;
   19caa:	3401      	adds	r4, #1
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   19cac:	e9cd 0100 	strd	r0, r1, [sp]
   19cb0:	4632      	mov	r2, r6
   19cb2:	463b      	mov	r3, r7
   19cb4:	4640      	mov	r0, r8
                fix++;
   19cb6:	b2e4      	uxtb	r4, r4
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : fixed, latitude=%0.7f, longitude=%0.7f, altitude=%0.7f\n", gps.latitude, gps.longitude, gps.altitude);
   19cb8:	f004 f95e 	bl	1df78 <datalogger_log_debug>
                if (fix > 9)
   19cbc:	2c09      	cmp	r4, #9
   19cbe:	d9c0      	bls.n	19c42 <module_sps_move_to_surface+0x126>
                    DATA_add_gps(&park, gps.latitude, gps.longitude, park_number-1);
   19cc0:	4b69      	ldr	r3, [pc, #420]	@ (19e68 <module_sps_move_to_surface+0x34c>)
   19cc2:	eddd 0a0f 	vldr	s1, [sp, #60]	@ 0x3c
   19cc6:	7819      	ldrb	r1, [r3, #0]
   19cc8:	ed9d 0a0e 	vldr	s0, [sp, #56]	@ 0x38
   19ccc:	4867      	ldr	r0, [pc, #412]	@ (19e6c <module_sps_move_to_surface+0x350>)
   19cce:	3901      	subs	r1, #1
   19cd0:	b2c9      	uxtb	r1, r1
   19cd2:	f7fa fda5 	bl	14820 <DATA_add_gps>
                    DATA_add_gps(&prof, gps.latitude, gps.longitude, prof_number-1);
   19cd6:	4b66      	ldr	r3, [pc, #408]	@ (19e70 <module_sps_move_to_surface+0x354>)
   19cd8:	eddd 0a0f 	vldr	s1, [sp, #60]	@ 0x3c
   19cdc:	7819      	ldrb	r1, [r3, #0]
   19cde:	ed9d 0a0e 	vldr	s0, [sp, #56]	@ 0x38
   19ce2:	4864      	ldr	r0, [pc, #400]	@ (19e74 <module_sps_move_to_surface+0x358>)
   19ce4:	3901      	subs	r1, #1
   19ce6:	b2c9      	uxtb	r1, r1
   19ce8:	f7fa fd9a 	bl	14820 <DATA_add_gps>
                    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, RTC : <GPS Time Set>\n");
   19cec:	4862      	ldr	r0, [pc, #392]	@ (19e78 <module_sps_move_to_surface+0x35c>)
   19cee:	f7f7 f9bb 	bl	11068 <am_util_stdio_printf>
   19cf2:	4861      	ldr	r0, [pc, #388]	@ (19e78 <module_sps_move_to_surface+0x35c>)
   19cf4:	f004 f940 	bl	1df78 <datalogger_log_debug>
                    artemis_rtc_gps_calibration(&gps);
   19cf8:	a80d      	add	r0, sp, #52	@ 0x34
   19cfa:	f003 ffa1 	bl	1dc40 <artemis_rtc_gps_calibration>
                    fix = 0;
   19cfe:	2400      	movs	r4, #0
   19d00:	e79f      	b.n	19c42 <module_sps_move_to_surface+0x126>
            if (fix >= 2)
   19d02:	2c01      	cmp	r4, #1
   19d04:	d91e      	bls.n	19d44 <module_sps_move_to_surface+0x228>
                DATA_add_gps(&park, gps.latitude, gps.longitude, park_number-1);
   19d06:	4b58      	ldr	r3, [pc, #352]	@ (19e68 <module_sps_move_to_surface+0x34c>)
   19d08:	eddd 0a0f 	vldr	s1, [sp, #60]	@ 0x3c
   19d0c:	7819      	ldrb	r1, [r3, #0]
   19d0e:	ed9d 0a0e 	vldr	s0, [sp, #56]	@ 0x38
   19d12:	4856      	ldr	r0, [pc, #344]	@ (19e6c <module_sps_move_to_surface+0x350>)
   19d14:	3901      	subs	r1, #1
   19d16:	b2c9      	uxtb	r1, r1
   19d18:	f7fa fd82 	bl	14820 <DATA_add_gps>
                DATA_add_gps(&prof, gps.latitude, gps.longitude, prof_number-1);
   19d1c:	4b54      	ldr	r3, [pc, #336]	@ (19e70 <module_sps_move_to_surface+0x354>)
   19d1e:	eddd 0a0f 	vldr	s1, [sp, #60]	@ 0x3c
   19d22:	7819      	ldrb	r1, [r3, #0]
   19d24:	ed9d 0a0e 	vldr	s0, [sp, #56]	@ 0x38
   19d28:	4852      	ldr	r0, [pc, #328]	@ (19e74 <module_sps_move_to_surface+0x358>)
   19d2a:	3901      	subs	r1, #1
   19d2c:	b2c9      	uxtb	r1, r1
   19d2e:	f7fa fd77 	bl	14820 <DATA_add_gps>
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, RTC : <GPS Time Set>\n");
   19d32:	4851      	ldr	r0, [pc, #324]	@ (19e78 <module_sps_move_to_surface+0x35c>)
   19d34:	f7f7 f998 	bl	11068 <am_util_stdio_printf>
   19d38:	484f      	ldr	r0, [pc, #316]	@ (19e78 <module_sps_move_to_surface+0x35c>)
   19d3a:	f004 f91d 	bl	1df78 <datalogger_log_debug>
                artemis_rtc_gps_calibration(&gps);
   19d3e:	a80d      	add	r0, sp, #52	@ 0x34
   19d40:	f003 ff7e 	bl	1dc40 <artemis_rtc_gps_calibration>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->finished\n");
   19d44:	484d      	ldr	r0, [pc, #308]	@ (19e7c <module_sps_move_to_surface+0x360>)
   19d46:	f7f7 f98f 	bl	11068 <am_util_stdio_printf>
   19d4a:	484c      	ldr	r0, [pc, #304]	@ (19e7c <module_sps_move_to_surface+0x360>)
   19d4c:	f004 f914 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(xDelay100ms);
   19d50:	2064      	movs	r0, #100	@ 0x64
   19d52:	f7f5 fb47 	bl	f3e4 <vTaskDelay>
            SENS_sensor_gps_off();
   19d56:	f7fb fca3 	bl	156a0 <SENS_sensor_gps_off>
            spsEvent = MODE_DONE;
   19d5a:	2304      	movs	r3, #4
        vTaskDelayUntil(&xLastWakeTime, period);
   19d5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
   19d60:	a809      	add	r0, sp, #36	@ 0x24
            spsEvent = MODE_DONE;
   19d62:	f88d 3017 	strb.w	r3, [sp, #23]
        vTaskDelayUntil(&xLastWakeTime, period);
   19d66:	f7f5 fba5 	bl	f4b4 <vTaskDelayUntil>
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, task->finished\n");
   19d6a:	4845      	ldr	r0, [pc, #276]	@ (19e80 <module_sps_move_to_surface+0x364>)
   19d6c:	f7f7 f97c 	bl	11068 <am_util_stdio_printf>
   19d70:	4843      	ldr	r0, [pc, #268]	@ (19e80 <module_sps_move_to_surface+0x364>)
   19d72:	f004 f901 	bl	1df78 <datalogger_log_debug>
    vTaskDelay(xDelay1000ms);
   19d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19d7a:	f7f5 fb33 	bl	f3e4 <vTaskDelay>
    bool utc = artemis_rtc_get_time(&time);
   19d7e:	a80a      	add	r0, sp, #40	@ 0x28
   19d80:	f003 ff2a 	bl	1dbd8 <artemis_rtc_get_time>
    if (utc)
   19d84:	2800      	cmp	r0, #0
   19d86:	d050      	beq.n	19e2a <module_sps_move_to_surface+0x30e>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, RTC : TimeStamp, %02d.%02d.20%02d, %02d:%02d:%02d (UTC)\n",
   19d88:	f89d 002e 	ldrb.w	r0, [sp, #46]	@ 0x2e
   19d8c:	f89d 102d 	ldrb.w	r1, [sp, #45]	@ 0x2d
   19d90:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
   19d94:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
   19d98:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
   19d9c:	9400      	str	r4, [sp, #0]
   19d9e:	e9cd 1001 	strd	r1, r0, [sp, #4]
   19da2:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
   19da6:	4837      	ldr	r0, [pc, #220]	@ (19e84 <module_sps_move_to_surface+0x368>)
   19da8:	f7f7 f95e 	bl	11068 <am_util_stdio_printf>
   19dac:	4835      	ldr	r0, [pc, #212]	@ (19e84 <module_sps_move_to_surface+0x368>)
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, RTC : TimeStamp, %02d.%02d.20%02d, %02d:%02d:%02d (local)\n",
   19dae:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
   19db2:	f89d 202d 	ldrb.w	r2, [sp, #45]	@ 0x2d
   19db6:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
   19dba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
   19dbe:	9400      	str	r4, [sp, #0]
   19dc0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   19dc4:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
   19dc8:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
   19dcc:	f004 f8d4 	bl	1df78 <datalogger_log_debug>
    uint32_t size = xPortGetFreeHeapSize();
   19dd0:	f7f3 fd44 	bl	d85c <xPortGetFreeHeapSize>
   19dd4:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nSPS :: move_to_surface, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   19dd6:	4621      	mov	r1, r4
   19dd8:	482b      	ldr	r0, [pc, #172]	@ (19e88 <module_sps_move_to_surface+0x36c>)
   19dda:	f7f7 f945 	bl	11068 <am_util_stdio_printf>
   19dde:	4621      	mov	r1, r4
   19de0:	4829      	ldr	r0, [pc, #164]	@ (19e88 <module_sps_move_to_surface+0x36c>)
   19de2:	f004 f8c9 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Task->finished\n\n");
   19de6:	4829      	ldr	r0, [pc, #164]	@ (19e8c <module_sps_move_to_surface+0x370>)
   19de8:	f7f7 f93e 	bl	11068 <am_util_stdio_printf>
   19dec:	4827      	ldr	r0, [pc, #156]	@ (19e8c <module_sps_move_to_surface+0x370>)
   19dee:	f004 f8c3 	bl	1df78 <datalogger_log_debug>
    SendEvent(spsEventQueue, &spsEvent);
   19df2:	4a27      	ldr	r2, [pc, #156]	@ (19e90 <module_sps_move_to_surface+0x374>)
    xQueueSend(eventQueue, event, portMAX_DELAY);
   19df4:	2300      	movs	r3, #0
   19df6:	f10d 0117 	add.w	r1, sp, #23
   19dfa:	6810      	ldr	r0, [r2, #0]
   19dfc:	f04f 32ff 	mov.w	r2, #4294967295
   19e00:	f7f3 ff30 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   19e04:	2000      	movs	r0, #0
   19e06:	f7f4 fed9 	bl	ebbc <vTaskDelete>
}
   19e0a:	b015      	add	sp, #84	@ 0x54
   19e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->active : No fix\n");
   19e10:	f7f7 f92a 	bl	11068 <am_util_stdio_printf>
   19e14:	4628      	mov	r0, r5
   19e16:	f004 f8af 	bl	1df78 <datalogger_log_debug>
   19e1a:	e712      	b.n	19c42 <module_sps_move_to_surface+0x126>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, GPS task->suspended\n");
   19e1c:	4648      	mov	r0, r9
   19e1e:	f7f7 f923 	bl	11068 <am_util_stdio_printf>
   19e22:	4648      	mov	r0, r9
   19e24:	f004 f8a8 	bl	1df78 <datalogger_log_debug>
   19e28:	e70b      	b.n	19c42 <module_sps_move_to_surface+0x126>
        ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, RTC : TimeStamp, %02d.%02d.20%02d, %02d:%02d:%02d (local)\n",
   19e2a:	f89d 002e 	ldrb.w	r0, [sp, #46]	@ 0x2e
   19e2e:	f89d 102d 	ldrb.w	r1, [sp, #45]	@ 0x2d
   19e32:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
   19e36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
   19e3a:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
   19e3e:	9400      	str	r4, [sp, #0]
   19e40:	e9cd 1001 	strd	r1, r0, [sp, #4]
   19e44:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
   19e48:	4812      	ldr	r0, [pc, #72]	@ (19e94 <module_sps_move_to_surface+0x378>)
   19e4a:	f7f7 f90d 	bl	11068 <am_util_stdio_printf>
   19e4e:	4811      	ldr	r0, [pc, #68]	@ (19e94 <module_sps_move_to_surface+0x378>)
   19e50:	e7ad      	b.n	19dae <module_sps_move_to_surface+0x292>
   19e52:	bf00      	nop
   19e54:	0002e254 	.word	0x0002e254
   19e58:	0001d4bf 	.word	0x0001d4bf
   19e5c:	0002e284 	.word	0x0002e284
   19e60:	0002e2c0 	.word	0x0002e2c0
   19e64:	0002e404 	.word	0x0002e404
   19e68:	1000b9e1 	.word	0x1000b9e1
   19e6c:	1000bcd4 	.word	0x1000bcd4
   19e70:	1000b9e2 	.word	0x1000b9e2
   19e74:	1000bcb4 	.word	0x1000bcb4
   19e78:	0002e3d4 	.word	0x0002e3d4
   19e7c:	0002e468 	.word	0x0002e468
   19e80:	0002e494 	.word	0x0002e494
   19e84:	0002e4bc 	.word	0x0002e4bc
   19e88:	0002e564 	.word	0x0002e564
   19e8c:	0002e5a0 	.word	0x0002e5a0
   19e90:	1000bc98 	.word	0x1000bc98
   19e94:	0002e510 	.word	0x0002e510
   19e98:	0002e438 	.word	0x0002e438
   19e9c:	0002e370 	.word	0x0002e370
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Piston task->suspended\n");
   19ea0:	4822      	ldr	r0, [pc, #136]	@ (19f2c <module_sps_move_to_surface+0x410>)
   19ea2:	f7f7 f8e1 	bl	11068 <am_util_stdio_printf>
   19ea6:	4821      	ldr	r0, [pc, #132]	@ (19f2c <module_sps_move_to_surface+0x410>)
   19ea8:	f004 f866 	bl	1df78 <datalogger_log_debug>
            PIS_task_delete(xPiston);
   19eac:	9807      	ldr	r0, [sp, #28]
   19eae:	f7fa f85d 	bl	13f6c <PIS_task_delete>
            piston_timer = 0;
   19eb2:	2400      	movs	r4, #0
   19eb4:	e654      	b.n	19b60 <module_sps_move_to_surface+0x44>
            PIS_Get_Length(&Length);
   19eb6:	a806      	add	r0, sp, #24
   19eb8:	f7fa f8b0 	bl	1401c <PIS_Get_Length>
            Volume = CTRL_calculate_volume_from_length(Length);
   19ebc:	ed9d 0a06 	vldr	s0, [sp, #24]
   19ec0:	f7fa fa7a 	bl	143b8 <CTRL_calculate_volume_from_length>
   19ec4:	ee10 5a10 	vmov	r5, s0
            Density = CTRL_calculate_lcp_density(Volume);
   19ec8:	f7fa f98e 	bl	141e8 <CTRL_calculate_lcp_density>
   19ecc:	ee10 0a10 	vmov	r0, s0
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Density=%.3f kg/m³, Volume=%.3fin³, Length=%.4fin\n", Density, Volume, Length);
   19ed0:	f7f2 fa7a 	bl	c3c8 <__aeabi_f2d>
   19ed4:	4602      	mov	r2, r0
   19ed6:	4628      	mov	r0, r5
   19ed8:	4614      	mov	r4, r2
   19eda:	460d      	mov	r5, r1
   19edc:	f7f2 fa74 	bl	c3c8 <__aeabi_f2d>
   19ee0:	4606      	mov	r6, r0
   19ee2:	9806      	ldr	r0, [sp, #24]
   19ee4:	460f      	mov	r7, r1
   19ee6:	f7f2 fa6f 	bl	c3c8 <__aeabi_f2d>
   19eea:	4622      	mov	r2, r4
   19eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19ef0:	462b      	mov	r3, r5
   19ef2:	e9cd 6700 	strd	r6, r7, [sp]
   19ef6:	480e      	ldr	r0, [pc, #56]	@ (19f30 <module_sps_move_to_surface+0x414>)
   19ef8:	f7f7 f8b6 	bl	11068 <am_util_stdio_printf>
   19efc:	9806      	ldr	r0, [sp, #24]
   19efe:	f7f2 fa63 	bl	c3c8 <__aeabi_f2d>
   19f02:	4622      	mov	r2, r4
   19f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19f08:	462b      	mov	r3, r5
   19f0a:	e9cd 6700 	strd	r6, r7, [sp]
   19f0e:	4808      	ldr	r0, [pc, #32]	@ (19f30 <module_sps_move_to_surface+0x414>)
   19f10:	f004 f832 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("SPS :: move_to_surface, Piston task->finished\n");
   19f14:	4807      	ldr	r0, [pc, #28]	@ (19f34 <module_sps_move_to_surface+0x418>)
   19f16:	f7f7 f8a7 	bl	11068 <am_util_stdio_printf>
   19f1a:	4806      	ldr	r0, [pc, #24]	@ (19f34 <module_sps_move_to_surface+0x418>)
   19f1c:	f004 f82c 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(piston_period);
   19f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19f24:	f7f5 fa5e 	bl	f3e4 <vTaskDelay>
    while (piston_move)
   19f28:	e673      	b.n	19c12 <module_sps_move_to_surface+0xf6>
   19f2a:	bf00      	nop
   19f2c:	0002e310 	.word	0x0002e310
   19f30:	0002e2c0 	.word	0x0002e2c0
   19f34:	0002e340 	.word	0x0002e340

00019f38 <module_sps_tx>:
{
   19f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!iridium_init)
   19f3c:	4c85      	ldr	r4, [pc, #532]	@ (1a154 <module_sps_tx+0x21c>)
{
   19f3e:	ed2d 8b02 	vpush	{d8}
    if (!iridium_init)
   19f42:	7823      	ldrb	r3, [r4, #0]
{
   19f44:	b093      	sub	sp, #76	@ 0x4c
    if (!iridium_init)
   19f46:	2b00      	cmp	r3, #0
   19f48:	f000 8504 	beq.w	1a954 <module_sps_tx+0xa1c>
    while (wait < 2 && tries < 2)
   19f4c:	2500      	movs	r5, #0
        bool retVal = i9603n_on();
   19f4e:	f7f7 fd1f 	bl	11990 <i9603n_on>
        if (!retVal)
   19f52:	2800      	cmp	r0, #0
   19f54:	f040 84e4 	bne.w	1a920 <module_sps_tx+0x9e8>
        bool retVal = i9603n_on();
   19f58:	f7f7 fd1a 	bl	11990 <i9603n_on>
        if (!retVal)
   19f5c:	4604      	mov	r4, r0
   19f5e:	2800      	cmp	r0, #0
   19f60:	f040 84de 	bne.w	1a920 <module_sps_tx+0x9e8>
                i9603n_off();
   19f64:	f7f7 fd20 	bl	119a8 <i9603n_off>
                vTaskDelay(xDelay1000ms);
   19f68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19f6c:	f7f5 fa3a 	bl	f3e4 <vTaskDelay>
    while (wait < 2 && tries < 2)
   19f70:	b90d      	cbnz	r5, 19f76 <module_sps_tx+0x3e>
   19f72:	2501      	movs	r5, #1
   19f74:	e7eb      	b.n	19f4e <module_sps_tx+0x16>
        i9603n_off();
   19f76:	f7f7 fd17 	bl	119a8 <i9603n_off>
        datalogger_read_test_profile(true);
   19f7a:	2001      	movs	r0, #1
   19f7c:	f004 fce0 	bl	1e940 <datalogger_read_test_profile>
        SendEvent(spsEventQueue, &spsEvent);
   19f80:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 1a190 <module_sps_tx+0x258>
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Iridium not charged, try again\n");
   19f84:	4874      	ldr	r0, [pc, #464]	@ (1a158 <module_sps_tx+0x220>)
        spsEvent = MODE_IDLE;
   19f86:	2303      	movs	r3, #3
   19f88:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    xQueueSend(eventQueue, event, portMAX_DELAY);
   19f8c:	f10d 0727 	add.w	r7, sp, #39	@ 0x27
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Iridium not charged, try again\n");
   19f90:	f7f7 f86a 	bl	11068 <am_util_stdio_printf>
   19f94:	4870      	ldr	r0, [pc, #448]	@ (1a158 <module_sps_tx+0x220>)
   19f96:	f003 ffef 	bl	1df78 <datalogger_log_debug>
    xQueueSend(eventQueue, event, portMAX_DELAY);
   19f9a:	f04f 32ff 	mov.w	r2, #4294967295
   19f9e:	4623      	mov	r3, r4
   19fa0:	4639      	mov	r1, r7
   19fa2:	f8d8 0000 	ldr.w	r0, [r8]
   19fa6:	f7f3 fe5d 	bl	dc64 <xQueueGenericSend>
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Task->finished abruptly, NOT transmitting today\n");
   19faa:	486c      	ldr	r0, [pc, #432]	@ (1a15c <module_sps_tx+0x224>)
   19fac:	f7f7 f85c 	bl	11068 <am_util_stdio_printf>
   19fb0:	486a      	ldr	r0, [pc, #424]	@ (1a15c <module_sps_tx+0x224>)
   19fb2:	f003 ffe1 	bl	1df78 <datalogger_log_debug>
        vTaskDelete(NULL);
   19fb6:	4620      	mov	r0, r4
   19fb8:	f7f4 fe00 	bl	ebbc <vTaskDelete>
    vTaskDelay(xDelay1000ms);
   19fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19fc0:	f7f5 fa10 	bl	f3e4 <vTaskDelay>
    TaskHandle_t xIridium = NULL;
   19fc4:	2400      	movs	r4, #0
    task_Iridium_satellite_visibility(&xSatellite);
   19fc6:	a80b      	add	r0, sp, #44	@ 0x2c
    TaskHandle_t xSatellite = NULL;
   19fc8:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
    task_Iridium_satellite_visibility(&xSatellite);
   19fcc:	4e64      	ldr	r6, [pc, #400]	@ (1a160 <module_sps_tx+0x228>)
                            SET_Iridium_delay_rate(0.1);
   19fce:	ed9f 8a65 	vldr	s16, [pc, #404]	@ 1a164 <module_sps_tx+0x22c>
   19fd2:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 1a194 <module_sps_tx+0x25c>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite, task->suspended\n");
   19fd6:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 1a198 <module_sps_tx+0x260>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite, task->active\n");
   19fda:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 1a19c <module_sps_tx+0x264>
    task_Iridium_satellite_visibility(&xSatellite);
   19fde:	f7f7 fcfb 	bl	119d8 <task_Iridium_satellite_visibility>
   19fe2:	9405      	str	r4, [sp, #20]
    sPark.modeType = LCP_PARK_MODE;
   19fe4:	4c60      	ldr	r4, [pc, #384]	@ (1a168 <module_sps_tx+0x230>)
   19fe6:	f8cd 8010 	str.w	r8, [sp, #16]
    task_Iridium_satellite_visibility(&xSatellite);
   19fea:	2500      	movs	r5, #0
   19fec:	e007      	b.n	19ffe <module_sps_tx+0xc6>
                else if (eStatus==eSuspended)
   19fee:	2803      	cmp	r0, #3
   19ff0:	d011      	beq.n	1a016 <module_sps_tx+0xde>
                else if (eStatus==eDeleted)
   19ff2:	2804      	cmp	r0, #4
   19ff4:	d016      	beq.n	1a024 <module_sps_tx+0xec>
                vTaskDelay(xDelay1000ms);
   19ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   19ffa:	f7f5 f9f3 	bl	f3e4 <vTaskDelay>
                eStatus = eTaskGetState( xSatellite );
   19ffe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1a000:	f7f4 fe54 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) ||
   1a004:	2802      	cmp	r0, #2
   1a006:	d8f2      	bhi.n	19fee <module_sps_tx+0xb6>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite, task->active\n");
   1a008:	4648      	mov	r0, r9
   1a00a:	f7f7 f82d 	bl	11068 <am_util_stdio_printf>
   1a00e:	4648      	mov	r0, r9
   1a010:	f003 ffb2 	bl	1df78 <datalogger_log_debug>
   1a014:	e7ef      	b.n	19ff6 <module_sps_tx+0xbe>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite, task->suspended\n");
   1a016:	4658      	mov	r0, fp
   1a018:	f7f7 f826 	bl	11068 <am_util_stdio_printf>
   1a01c:	4658      	mov	r0, fp
   1a01e:	f003 ffab 	bl	1df78 <datalogger_log_debug>
   1a022:	e7e8      	b.n	19ff6 <module_sps_tx+0xbe>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite task->finished\n");
   1a024:	4851      	ldr	r0, [pc, #324]	@ (1a16c <module_sps_tx+0x234>)
   1a026:	f7f7 f81f 	bl	11068 <am_util_stdio_printf>
   1a02a:	4850      	ldr	r0, [pc, #320]	@ (1a16c <module_sps_tx+0x234>)
   1a02c:	f003 ffa4 	bl	1df78 <datalogger_log_debug>
                    bool visible = GET_Iridium_satellite();
   1a030:	f7f7 fcc6 	bl	119c0 <GET_Iridium_satellite>
                    if (visible)
   1a034:	2800      	cmp	r0, #0
   1a036:	f040 8161 	bne.w	1a2fc <module_sps_tx+0x3c4>
                    satellite_tries++;
   1a03a:	3501      	adds	r5, #1
   1a03c:	b2ed      	uxtb	r5, r5
                        if (satellite_tries >= SATELLITE_VISIBILITY_TRIES)
   1a03e:	2d01      	cmp	r5, #1
                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite <NOT Visible>, waiting for %u seconds\n\n", visibility_period);
   1a040:	484b      	ldr	r0, [pc, #300]	@ (1a170 <module_sps_tx+0x238>)
   1a042:	f04f 0114 	mov.w	r1, #20
                        if (satellite_tries >= SATELLITE_VISIBILITY_TRIES)
   1a046:	f240 8205 	bls.w	1a454 <module_sps_tx+0x51c>
                            SET_Iridium_delay_rate(0.1);
   1a04a:	eeb0 0a48 	vmov.f32	s0, s16
   1a04e:	f7f7 fd27 	bl	11aa0 <SET_Iridium_delay_rate>
                            vTaskDelay(xDelay500ms);
   1a052:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1a056:	f7f5 f9c5 	bl	f3e4 <vTaskDelay>
                vTaskDelay(xDelay1000ms);
   1a05a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a05e:	f7f5 f9c1 	bl	f3e4 <vTaskDelay>
    if (m_park_length == 0)
   1a062:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 1a1a0 <module_sps_tx+0x268>
   1a066:	9703      	str	r7, [sp, #12]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Measurements written=%u, read=%u\n\n", park.cbuf.written, park.cbuf.read);
   1a068:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
   1a06c:	4841      	ldr	r0, [pc, #260]	@ (1a174 <module_sps_tx+0x23c>)
   1a06e:	f7f6 fffb 	bl	11068 <am_util_stdio_printf>
   1a072:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
   1a076:	483f      	ldr	r0, [pc, #252]	@ (1a174 <module_sps_tx+0x23c>)
   1a078:	f003 ff7e 	bl	1df78 <datalogger_log_debug>
    if (m_park_number >= park_number)
   1a07c:	4b3e      	ldr	r3, [pc, #248]	@ (1a178 <module_sps_tx+0x240>)
   1a07e:	f89a 2000 	ldrb.w	r2, [sl]
   1a082:	781b      	ldrb	r3, [r3, #0]
   1a084:	429a      	cmp	r2, r3
   1a086:	f080 8241 	bcs.w	1a50c <module_sps_tx+0x5d4>
    if (m_park_length == 0)
   1a08a:	f8b8 5000 	ldrh.w	r5, [r8]
    sPark.modeType = LCP_PARK_MODE;
   1a08e:	2100      	movs	r1, #0
    if (m_park_length == 0)
   1a090:	b2ad      	uxth	r5, r5
    sPark.modeType = LCP_PARK_MODE;
   1a092:	7021      	strb	r1, [r4, #0]
    if (m_park_length == 0)
   1a094:	2d00      	cmp	r5, #0
   1a096:	f000 818d 	beq.w	1a3b4 <module_sps_tx+0x47c>
        if (m_park_length > MEASUREMENT_MAX)
   1a09a:	f8b8 3000 	ldrh.w	r3, [r8]
   1a09e:	b29b      	uxth	r3, r3
   1a0a0:	2b7b      	cmp	r3, #123	@ 0x7b
   1a0a2:	f240 8247 	bls.w	1a534 <module_sps_tx+0x5fc>
            m_park_length = m_park_length - sPark.mLength;
   1a0a6:	f8b8 3000 	ldrh.w	r3, [r8]
   1a0aa:	3b7b      	subs	r3, #123	@ 0x7b
   1a0ac:	b29b      	uxth	r3, r3
   1a0ae:	f8a8 3000 	strh.w	r3, [r8]
            sPark.mLength = MEASUREMENT_MAX;
   1a0b2:	237b      	movs	r3, #123	@ 0x7b
   1a0b4:	8063      	strh	r3, [r4, #2]
    uint16_t nrBytes = pack_measurements_irid(&park, pPark, &sPark, ptrPark);
   1a0b6:	4b31      	ldr	r3, [pc, #196]	@ (1a17c <module_sps_tx+0x244>)
   1a0b8:	4931      	ldr	r1, [pc, #196]	@ (1a180 <module_sps_tx+0x248>)
   1a0ba:	4829      	ldr	r0, [pc, #164]	@ (1a160 <module_sps_tx+0x228>)
   1a0bc:	4622      	mov	r2, r4
   1a0be:	f7fa fde9 	bl	14c94 <pack_measurements_irid>
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park : profile_number=%u, pageNumber=%u, m_park_number=%u, total_bytes=%u\n", sPark.profNumber, sPark.pageNumber, m_park_number, nrBytes);
   1a0c2:	9000      	str	r0, [sp, #0]
    uint16_t nrBytes = pack_measurements_irid(&park, pPark, &sPark, ptrPark);
   1a0c4:	4605      	mov	r5, r0
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park : profile_number=%u, pageNumber=%u, m_park_number=%u, total_bytes=%u\n", sPark.profNumber, sPark.pageNumber, m_park_number, nrBytes);
   1a0c6:	f89a 3000 	ldrb.w	r3, [sl]
   1a0ca:	7922      	ldrb	r2, [r4, #4]
   1a0cc:	7861      	ldrb	r1, [r4, #1]
   1a0ce:	482d      	ldr	r0, [pc, #180]	@ (1a184 <module_sps_tx+0x24c>)
    *readlength = sPark.mLength;
   1a0d0:	8867      	ldrh	r7, [r4, #2]
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park : profile_number=%u, pageNumber=%u, m_park_number=%u, total_bytes=%u\n", sPark.profNumber, sPark.pageNumber, m_park_number, nrBytes);
   1a0d2:	f7f6 ffc9 	bl	11068 <am_util_stdio_printf>
   1a0d6:	9500      	str	r5, [sp, #0]
   1a0d8:	f89a 3000 	ldrb.w	r3, [sl]
   1a0dc:	7922      	ldrb	r2, [r4, #4]
   1a0de:	7861      	ldrb	r1, [r4, #1]
   1a0e0:	4828      	ldr	r0, [pc, #160]	@ (1a184 <module_sps_tx+0x24c>)
   1a0e2:	f003 ff49 	bl	1df78 <datalogger_log_debug>
            if ( txpark > 0 )
   1a0e6:	2d00      	cmp	r5, #0
   1a0e8:	f040 8286 	bne.w	1a5f8 <module_sps_tx+0x6c0>
            vTaskDelay(xDelay1000ms);
   1a0ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a0f0:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
   1a0f4:	f7f5 f976 	bl	f3e4 <vTaskDelay>
        task_Iridium_satellite_visibility(&xSatellite);
   1a0f8:	a80b      	add	r0, sp, #44	@ 0x2c
   1a0fa:	f7f7 fc6d 	bl	119d8 <task_Iridium_satellite_visibility>
            while(run_satellite)
   1a0fe:	4e22      	ldr	r6, [pc, #136]	@ (1a188 <module_sps_tx+0x250>)
   1a100:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 1a1a4 <module_sps_tx+0x26c>
                            SET_Iridium_delay_rate(0.1);
   1a104:	ed9f 8a17 	vldr	s16, [pc, #92]	@ 1a164 <module_sps_tx+0x22c>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, task->suspended\n");
   1a108:	f8df b09c 	ldr.w	fp, [pc, #156]	@ 1a1a8 <module_sps_tx+0x270>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, task->active\n");
   1a10c:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 1a1ac <module_sps_tx+0x274>
    sProf.modeType = LCP_PROFILE_MODE;
   1a110:	4c1e      	ldr	r4, [pc, #120]	@ (1a18c <module_sps_tx+0x254>)
   1a112:	f8cd 8010 	str.w	r8, [sp, #16]
        task_Iridium_satellite_visibility(&xSatellite);
   1a116:	2300      	movs	r3, #0
   1a118:	9305      	str	r3, [sp, #20]
   1a11a:	2500      	movs	r5, #0
   1a11c:	e007      	b.n	1a12e <module_sps_tx+0x1f6>
                else if (eStatus==eSuspended)
   1a11e:	2803      	cmp	r0, #3
   1a120:	d011      	beq.n	1a146 <module_sps_tx+0x20e>
                else if (eStatus==eDeleted)
   1a122:	2804      	cmp	r0, #4
   1a124:	d044      	beq.n	1a1b0 <module_sps_tx+0x278>
                vTaskDelay(xDelay1000ms);
   1a126:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a12a:	f7f5 f95b 	bl	f3e4 <vTaskDelay>
                eStatus = eTaskGetState( xSatellite );
   1a12e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1a130:	f7f4 fdbc 	bl	ecac <eTaskGetState>
                if ( (eStatus==eRunning) ||
   1a134:	2802      	cmp	r0, #2
   1a136:	d8f2      	bhi.n	1a11e <module_sps_tx+0x1e6>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, task->active\n");
   1a138:	4648      	mov	r0, r9
   1a13a:	f7f6 ff95 	bl	11068 <am_util_stdio_printf>
   1a13e:	4648      	mov	r0, r9
   1a140:	f003 ff1a 	bl	1df78 <datalogger_log_debug>
   1a144:	e7ef      	b.n	1a126 <module_sps_tx+0x1ee>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, task->suspended\n");
   1a146:	4658      	mov	r0, fp
   1a148:	f7f6 ff8e 	bl	11068 <am_util_stdio_printf>
   1a14c:	4658      	mov	r0, fp
   1a14e:	f003 ff13 	bl	1df78 <datalogger_log_debug>
   1a152:	e7e8      	b.n	1a126 <module_sps_tx+0x1ee>
   1a154:	1000b9e3 	.word	0x1000b9e3
   1a158:	0002e5ec 	.word	0x0002e5ec
   1a15c:	0002e618 	.word	0x0002e618
   1a160:	1000bcd4 	.word	0x1000bcd4
   1a164:	3dcccccd 	.word	0x3dcccccd
   1a168:	1000bcac 	.word	0x1000bcac
   1a16c:	0002e6b0 	.word	0x0002e6b0
   1a170:	0002e704 	.word	0x0002e704
   1a174:	0002e748 	.word	0x0002e748
   1a178:	1000b9e1 	.word	0x1000b9e1
   1a17c:	1000bb3c 	.word	0x1000bb3c
   1a180:	10048d84 	.word	0x10048d84
   1a184:	0002e914 	.word	0x0002e914
   1a188:	1000bcb4 	.word	0x1000bcb4
   1a18c:	1000bca4 	.word	0x1000bca4
   1a190:	1000bc98 	.word	0x1000bc98
   1a194:	1000b9dc 	.word	0x1000b9dc
   1a198:	0002e680 	.word	0x0002e680
   1a19c:	0002e654 	.word	0x0002e654
   1a1a0:	1000b9da 	.word	0x1000b9da
   1a1a4:	1000b9e0 	.word	0x1000b9e0
   1a1a8:	0002ec58 	.word	0x0002ec58
   1a1ac:	0002ec28 	.word	0x0002ec28
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, task->finished\n");
   1a1b0:	48c1      	ldr	r0, [pc, #772]	@ (1a4b8 <module_sps_tx+0x580>)
   1a1b2:	f7f6 ff59 	bl	11068 <am_util_stdio_printf>
   1a1b6:	48c0      	ldr	r0, [pc, #768]	@ (1a4b8 <module_sps_tx+0x580>)
   1a1b8:	f003 fede 	bl	1df78 <datalogger_log_debug>
                    bool visible = GET_Iridium_satellite();
   1a1bc:	f7f7 fc00 	bl	119c0 <GET_Iridium_satellite>
                    if (visible)
   1a1c0:	2800      	cmp	r0, #0
   1a1c2:	f040 80aa 	bne.w	1a31a <module_sps_tx+0x3e2>
                    satellite_tries++;
   1a1c6:	3501      	adds	r5, #1
   1a1c8:	b2ed      	uxtb	r5, r5
                        if (satellite_tries >= SATELLITE_VISIBILITY_TRIES)
   1a1ca:	2d01      	cmp	r5, #1
                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, <NOT Visible>, waiting for %u seconds\n\n", visibility_period);
   1a1cc:	48bb      	ldr	r0, [pc, #748]	@ (1a4bc <module_sps_tx+0x584>)
   1a1ce:	f04f 0114 	mov.w	r1, #20
                        if (satellite_tries >= SATELLITE_VISIBILITY_TRIES)
   1a1d2:	f240 812d 	bls.w	1a430 <module_sps_tx+0x4f8>
                            SET_Iridium_delay_rate(0.1);
   1a1d6:	eeb0 0a48 	vmov.f32	s0, s16
   1a1da:	f7f7 fc61 	bl	11aa0 <SET_Iridium_delay_rate>
                            vTaskDelay(xDelay500ms);
   1a1de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1a1e2:	f7f5 f8ff 	bl	f3e4 <vTaskDelay>
                vTaskDelay(xDelay1000ms);
   1a1e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a1ea:	f7f5 f8fb 	bl	f3e4 <vTaskDelay>
    if (m_prof_length == 0)
   1a1ee:	f8df 8318 	ldr.w	r8, [pc, #792]	@ 1a508 <module_sps_tx+0x5d0>
   1a1f2:	9703      	str	r7, [sp, #12]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Measurements written=%u, read=%u\n", prof.cbuf.written, prof.cbuf.read);
   1a1f4:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
   1a1f8:	48b1      	ldr	r0, [pc, #708]	@ (1a4c0 <module_sps_tx+0x588>)
   1a1fa:	f7f6 ff35 	bl	11068 <am_util_stdio_printf>
   1a1fe:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
   1a202:	48af      	ldr	r0, [pc, #700]	@ (1a4c0 <module_sps_tx+0x588>)
   1a204:	f003 feb8 	bl	1df78 <datalogger_log_debug>
    if (m_prof_number >= prof_number)
   1a208:	4bae      	ldr	r3, [pc, #696]	@ (1a4c4 <module_sps_tx+0x58c>)
   1a20a:	f89a 2000 	ldrb.w	r2, [sl]
   1a20e:	781b      	ldrb	r3, [r3, #0]
   1a210:	429a      	cmp	r2, r3
   1a212:	f080 8131 	bcs.w	1a478 <module_sps_tx+0x540>
    if (m_prof_length == 0)
   1a216:	f8b8 5000 	ldrh.w	r5, [r8]
    sProf.modeType = LCP_PROFILE_MODE;
   1a21a:	2301      	movs	r3, #1
    if (m_prof_length == 0)
   1a21c:	b2ad      	uxth	r5, r5
    sProf.modeType = LCP_PROFILE_MODE;
   1a21e:	7023      	strb	r3, [r4, #0]
    if (m_prof_length == 0)
   1a220:	2d00      	cmp	r5, #0
   1a222:	f000 8089 	beq.w	1a338 <module_sps_tx+0x400>
        if (m_prof_length > MEASUREMENT_MAX)
   1a226:	f8b8 3000 	ldrh.w	r3, [r8]
   1a22a:	b29b      	uxth	r3, r3
   1a22c:	2b7b      	cmp	r3, #123	@ 0x7b
   1a22e:	f240 8191 	bls.w	1a554 <module_sps_tx+0x61c>
            m_prof_length = m_prof_length - sProf.mLength;
   1a232:	f8b8 3000 	ldrh.w	r3, [r8]
   1a236:	3b7b      	subs	r3, #123	@ 0x7b
   1a238:	b29b      	uxth	r3, r3
   1a23a:	f8a8 3000 	strh.w	r3, [r8]
            sProf.mLength = MEASUREMENT_MAX;
   1a23e:	237b      	movs	r3, #123	@ 0x7b
   1a240:	8063      	strh	r3, [r4, #2]
    uint16_t nrBytes = pack_measurements_irid(&prof, pProf, &sProf, ptrProf);
   1a242:	4ba1      	ldr	r3, [pc, #644]	@ (1a4c8 <module_sps_tx+0x590>)
   1a244:	49a1      	ldr	r1, [pc, #644]	@ (1a4cc <module_sps_tx+0x594>)
   1a246:	48a2      	ldr	r0, [pc, #648]	@ (1a4d0 <module_sps_tx+0x598>)
   1a248:	4622      	mov	r2, r4
   1a24a:	f7fa fd23 	bl	14c94 <pack_measurements_irid>
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile : profile_number=%u, pageNumber=%u, m_prof_number=%u, total_bytes=%u\n", sProf.profNumber, sProf.pageNumber, m_prof_number, nrBytes);
   1a24e:	9000      	str	r0, [sp, #0]
    uint16_t nrBytes = pack_measurements_irid(&prof, pProf, &sProf, ptrProf);
   1a250:	4605      	mov	r5, r0
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile : profile_number=%u, pageNumber=%u, m_prof_number=%u, total_bytes=%u\n", sProf.profNumber, sProf.pageNumber, m_prof_number, nrBytes);
   1a252:	f89a 3000 	ldrb.w	r3, [sl]
   1a256:	7922      	ldrb	r2, [r4, #4]
   1a258:	7861      	ldrb	r1, [r4, #1]
   1a25a:	489e      	ldr	r0, [pc, #632]	@ (1a4d4 <module_sps_tx+0x59c>)
    *readlength = sProf.mLength;
   1a25c:	8867      	ldrh	r7, [r4, #2]
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile : profile_number=%u, pageNumber=%u, m_prof_number=%u, total_bytes=%u\n", sProf.profNumber, sProf.pageNumber, m_prof_number, nrBytes);
   1a25e:	f7f6 ff03 	bl	11068 <am_util_stdio_printf>
   1a262:	9500      	str	r5, [sp, #0]
   1a264:	f89a 3000 	ldrb.w	r3, [sl]
   1a268:	7922      	ldrb	r2, [r4, #4]
   1a26a:	7861      	ldrb	r1, [r4, #1]
   1a26c:	4899      	ldr	r0, [pc, #612]	@ (1a4d4 <module_sps_tx+0x59c>)
   1a26e:	f003 fe83 	bl	1df78 <datalogger_log_debug>
            if ( txprof > 0 )
   1a272:	2d00      	cmp	r5, #0
   1a274:	f040 817f 	bne.w	1a576 <module_sps_tx+0x63e>
            vTaskDelay(xDelay1000ms);
   1a278:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a27c:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
   1a280:	f7f5 f8b0 	bl	f3e4 <vTaskDelay>
            if (prof_number >= SYSTEM_PROFILE_NUMBER)
   1a284:	4a8f      	ldr	r2, [pc, #572]	@ (1a4c4 <module_sps_tx+0x58c>)
   1a286:	7813      	ldrb	r3, [r2, #0]
   1a288:	2b63      	cmp	r3, #99	@ 0x63
   1a28a:	f240 810d 	bls.w	1a4a8 <module_sps_tx+0x570>
                ARTEMIS_DEBUG_PRINTF("\nSPS :: tx, << %u Profiles have been reached >>\n\n", prof_number);
   1a28e:	4614      	mov	r4, r2
   1a290:	7811      	ldrb	r1, [r2, #0]
   1a292:	4891      	ldr	r0, [pc, #580]	@ (1a4d8 <module_sps_tx+0x5a0>)
                spsEvent = MODE_POPUP;
   1a294:	2302      	movs	r3, #2
   1a296:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                ARTEMIS_DEBUG_PRINTF("\nSPS :: tx, << %u Profiles have been reached >>\n\n", prof_number);
   1a29a:	f7f6 fee5 	bl	11068 <am_util_stdio_printf>
   1a29e:	488e      	ldr	r0, [pc, #568]	@ (1a4d8 <module_sps_tx+0x5a0>)
   1a2a0:	7821      	ldrb	r1, [r4, #0]
   1a2a2:	f003 fe69 	bl	1df78 <datalogger_log_debug>
        vTaskDelay(xDelay2000ms);
   1a2a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   1a2aa:	f7f5 f89b 	bl	f3e4 <vTaskDelay>
    i9603n_off();
   1a2ae:	f7f7 fb7b 	bl	119a8 <i9603n_off>
    vTaskDelay(xDelay1000ms);
   1a2b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a2b6:	f7f5 f895 	bl	f3e4 <vTaskDelay>
    uint32_t size = xPortGetFreeHeapSize();
   1a2ba:	f7f3 facf 	bl	d85c <xPortGetFreeHeapSize>
   1a2be:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_PRINTF("\nSPS :: tx, FreeRTOS HEAP SIZE = %u Bytes\n\n", size);
   1a2c0:	4621      	mov	r1, r4
   1a2c2:	4886      	ldr	r0, [pc, #536]	@ (1a4dc <module_sps_tx+0x5a4>)
   1a2c4:	f7f6 fed0 	bl	11068 <am_util_stdio_printf>
   1a2c8:	4621      	mov	r1, r4
   1a2ca:	4884      	ldr	r0, [pc, #528]	@ (1a4dc <module_sps_tx+0x5a4>)
   1a2cc:	f003 fe54 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Task->finished\n\n");
   1a2d0:	4883      	ldr	r0, [pc, #524]	@ (1a4e0 <module_sps_tx+0x5a8>)
   1a2d2:	f7f6 fec9 	bl	11068 <am_util_stdio_printf>
   1a2d6:	4882      	ldr	r0, [pc, #520]	@ (1a4e0 <module_sps_tx+0x5a8>)
   1a2d8:	f003 fe4e 	bl	1df78 <datalogger_log_debug>
    xQueueSend(eventQueue, event, portMAX_DELAY);
   1a2dc:	2300      	movs	r3, #0
   1a2de:	f04f 32ff 	mov.w	r2, #4294967295
   1a2e2:	4639      	mov	r1, r7
   1a2e4:	f8d8 0000 	ldr.w	r0, [r8]
   1a2e8:	f7f3 fcbc 	bl	dc64 <xQueueGenericSend>
    vTaskDelete(NULL);
   1a2ec:	2000      	movs	r0, #0
   1a2ee:	f7f4 fc65 	bl	ebbc <vTaskDelete>
}
   1a2f2:	b013      	add	sp, #76	@ 0x4c
   1a2f4:	ecbd 8b02 	vpop	{d8}
   1a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite <Visible>\n");
   1a2fc:	4879      	ldr	r0, [pc, #484]	@ (1a4e4 <module_sps_tx+0x5ac>)
   1a2fe:	f7f6 feb3 	bl	11068 <am_util_stdio_printf>
   1a302:	4878      	ldr	r0, [pc, #480]	@ (1a4e4 <module_sps_tx+0x5ac>)
   1a304:	f003 fe38 	bl	1df78 <datalogger_log_debug>
                        SET_Iridium_delay_rate(0.5);
   1a308:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
   1a30c:	f7f7 fbc8 	bl	11aa0 <SET_Iridium_delay_rate>
                vTaskDelay(xDelay1000ms);
   1a310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a314:	f7f5 f866 	bl	f3e4 <vTaskDelay>
            while(run_satellite)
   1a318:	e6a3      	b.n	1a062 <module_sps_tx+0x12a>
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, <Visible>\n");
   1a31a:	4873      	ldr	r0, [pc, #460]	@ (1a4e8 <module_sps_tx+0x5b0>)
   1a31c:	f7f6 fea4 	bl	11068 <am_util_stdio_printf>
   1a320:	4871      	ldr	r0, [pc, #452]	@ (1a4e8 <module_sps_tx+0x5b0>)
   1a322:	f003 fe29 	bl	1df78 <datalogger_log_debug>
                        SET_Iridium_delay_rate(0.5);
   1a326:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
   1a32a:	f7f7 fbb9 	bl	11aa0 <SET_Iridium_delay_rate>
                vTaskDelay(xDelay1000ms);
   1a32e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a332:	f7f5 f857 	bl	f3e4 <vTaskDelay>
            while(run_satellite)
   1a336:	e75a      	b.n	1a1ee <module_sps_tx+0x2b6>
        m_prof_length = pProf[m_prof_number].pLength;
   1a338:	f89a 3000 	ldrb.w	r3, [sl]
   1a33c:	4f63      	ldr	r7, [pc, #396]	@ (1a4cc <module_sps_tx+0x594>)
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u, pageNumber=%u, measurement_length=%u\n", m_prof_number, sProf.pageNumber, m_prof_length);
   1a33e:	486b      	ldr	r0, [pc, #428]	@ (1a4ec <module_sps_tx+0x5b4>)
        sProf.pageNumber = 0;
   1a340:	7125      	strb	r5, [r4, #4]
        m_prof_length = pProf[m_prof_number].pLength;
   1a342:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1a346:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u, pageNumber=%u, measurement_length=%u\n", m_prof_number, sProf.pageNumber, m_prof_length);
   1a34a:	462a      	mov	r2, r5
        m_prof_length = pProf[m_prof_number].pLength;
   1a34c:	8a1b      	ldrh	r3, [r3, #16]
   1a34e:	f8a8 3000 	strh.w	r3, [r8]
        sProf.profNumber = m_prof_number;
   1a352:	f89a 3000 	ldrb.w	r3, [sl]
   1a356:	7063      	strb	r3, [r4, #1]
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u, pageNumber=%u, measurement_length=%u\n", m_prof_number, sProf.pageNumber, m_prof_length);
   1a358:	f89a 1000 	ldrb.w	r1, [sl]
   1a35c:	f8b8 3000 	ldrh.w	r3, [r8]
   1a360:	b29b      	uxth	r3, r3
   1a362:	f7f6 fe81 	bl	11068 <am_util_stdio_printf>
   1a366:	f89a 1000 	ldrb.w	r1, [sl]
   1a36a:	f8b8 3000 	ldrh.w	r3, [r8]
   1a36e:	485f      	ldr	r0, [pc, #380]	@ (1a4ec <module_sps_tx+0x5b4>)
   1a370:	7922      	ldrb	r2, [r4, #4]
   1a372:	b29b      	uxth	r3, r3
   1a374:	f003 fe00 	bl	1df78 <datalogger_log_debug>
        if (m_prof_length > MEASUREMENT_MAX)
   1a378:	f8b8 3000 	ldrh.w	r3, [r8]
   1a37c:	b29b      	uxth	r3, r3
   1a37e:	2b7b      	cmp	r3, #123	@ 0x7b
   1a380:	f240 8271 	bls.w	1a866 <module_sps_tx+0x92e>
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, WARNING : Profile, profile_number=%u exceeding (%u) length of measurements, creating pages!\n", sProf.profNumber, MEASUREMENT_MAX);
   1a384:	7861      	ldrb	r1, [r4, #1]
   1a386:	485a      	ldr	r0, [pc, #360]	@ (1a4f0 <module_sps_tx+0x5b8>)
   1a388:	227b      	movs	r2, #123	@ 0x7b
   1a38a:	f7f6 fe6d 	bl	11068 <am_util_stdio_printf>
   1a38e:	4858      	ldr	r0, [pc, #352]	@ (1a4f0 <module_sps_tx+0x5b8>)
   1a390:	7861      	ldrb	r1, [r4, #1]
   1a392:	227b      	movs	r2, #123	@ 0x7b
   1a394:	f003 fdf0 	bl	1df78 <datalogger_log_debug>
            sProf.mLength = MEASUREMENT_MAX;
   1a398:	237b      	movs	r3, #123	@ 0x7b
   1a39a:	8063      	strh	r3, [r4, #2]
            m_prof_length = pProf[m_prof_number].pLength - sProf.mLength;
   1a39c:	f89a 3000 	ldrb.w	r3, [sl]
   1a3a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1a3a4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   1a3a8:	8a3b      	ldrh	r3, [r7, #16]
   1a3aa:	3b7b      	subs	r3, #123	@ 0x7b
   1a3ac:	b29b      	uxth	r3, r3
   1a3ae:	f8a8 3000 	strh.w	r3, [r8]
   1a3b2:	e746      	b.n	1a242 <module_sps_tx+0x30a>
        m_park_length = pPark[m_park_number].pLength;
   1a3b4:	f89a 3000 	ldrb.w	r3, [sl]
   1a3b8:	4f4e      	ldr	r7, [pc, #312]	@ (1a4f4 <module_sps_tx+0x5bc>)
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u, pageNumber=%u, measurement_length=%u\n", m_park_number, sPark.pageNumber, m_park_length);
   1a3ba:	484f      	ldr	r0, [pc, #316]	@ (1a4f8 <module_sps_tx+0x5c0>)
        sPark.pageNumber = 0;
   1a3bc:	7125      	strb	r5, [r4, #4]
        m_park_length = pPark[m_park_number].pLength;
   1a3be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1a3c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u, pageNumber=%u, measurement_length=%u\n", m_park_number, sPark.pageNumber, m_park_length);
   1a3c6:	462a      	mov	r2, r5
        m_park_length = pPark[m_park_number].pLength;
   1a3c8:	8a1b      	ldrh	r3, [r3, #16]
   1a3ca:	f8a8 3000 	strh.w	r3, [r8]
        sPark.profNumber = m_park_number;
   1a3ce:	f89a 3000 	ldrb.w	r3, [sl]
   1a3d2:	7063      	strb	r3, [r4, #1]
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u, pageNumber=%u, measurement_length=%u\n", m_park_number, sPark.pageNumber, m_park_length);
   1a3d4:	f89a 1000 	ldrb.w	r1, [sl]
   1a3d8:	f8b8 3000 	ldrh.w	r3, [r8]
   1a3dc:	b29b      	uxth	r3, r3
   1a3de:	f7f6 fe43 	bl	11068 <am_util_stdio_printf>
   1a3e2:	f89a 1000 	ldrb.w	r1, [sl]
   1a3e6:	f8b8 3000 	ldrh.w	r3, [r8]
   1a3ea:	4843      	ldr	r0, [pc, #268]	@ (1a4f8 <module_sps_tx+0x5c0>)
   1a3ec:	7922      	ldrb	r2, [r4, #4]
   1a3ee:	b29b      	uxth	r3, r3
   1a3f0:	f003 fdc2 	bl	1df78 <datalogger_log_debug>
        if (m_park_length > MEASUREMENT_MAX)
   1a3f4:	f8b8 3000 	ldrh.w	r3, [r8]
   1a3f8:	b29b      	uxth	r3, r3
   1a3fa:	2b7b      	cmp	r3, #123	@ 0x7b
   1a3fc:	f240 8243 	bls.w	1a886 <module_sps_tx+0x94e>
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, WARNING : Park, profile_number=%u exceeding (%u) length of measurements, creating pages!\n", sPark.profNumber, MEASUREMENT_MAX);
   1a400:	7861      	ldrb	r1, [r4, #1]
   1a402:	483e      	ldr	r0, [pc, #248]	@ (1a4fc <module_sps_tx+0x5c4>)
   1a404:	227b      	movs	r2, #123	@ 0x7b
   1a406:	f7f6 fe2f 	bl	11068 <am_util_stdio_printf>
   1a40a:	483c      	ldr	r0, [pc, #240]	@ (1a4fc <module_sps_tx+0x5c4>)
   1a40c:	7861      	ldrb	r1, [r4, #1]
   1a40e:	227b      	movs	r2, #123	@ 0x7b
   1a410:	f003 fdb2 	bl	1df78 <datalogger_log_debug>
            sPark.mLength = MEASUREMENT_MAX;
   1a414:	237b      	movs	r3, #123	@ 0x7b
   1a416:	8063      	strh	r3, [r4, #2]
            m_park_length = pPark[m_park_number].pLength - sPark.mLength;
   1a418:	f89a 3000 	ldrb.w	r3, [sl]
   1a41c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1a420:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   1a424:	8a3b      	ldrh	r3, [r7, #16]
   1a426:	3b7b      	subs	r3, #123	@ 0x7b
   1a428:	b29b      	uxth	r3, r3
   1a42a:	f8a8 3000 	strh.w	r3, [r8]
   1a42e:	e642      	b.n	1a0b6 <module_sps_tx+0x17e>
                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, Satellite, <NOT Visible>, waiting for %u seconds\n\n", visibility_period);
   1a430:	f7f6 fe1a 	bl	11068 <am_util_stdio_printf>
   1a434:	2114      	movs	r1, #20
   1a436:	4821      	ldr	r0, [pc, #132]	@ (1a4bc <module_sps_tx+0x584>)
   1a438:	f003 fd9e 	bl	1df78 <datalogger_log_debug>
                            i9603n_sleep();
   1a43c:	f7f7 fabc 	bl	119b8 <i9603n_sleep>
                            vTaskDelay(xDelay1000ms * visibility_period);
   1a440:	f644 6020 	movw	r0, #20000	@ 0x4e20
   1a444:	f7f4 ffce 	bl	f3e4 <vTaskDelay>
                            i9603n_wakeup();
   1a448:	f7f7 fab8 	bl	119bc <i9603n_wakeup>
                            task_Iridium_satellite_visibility(&xSatellite);
   1a44c:	a80b      	add	r0, sp, #44	@ 0x2c
   1a44e:	f7f7 fac3 	bl	119d8 <task_Iridium_satellite_visibility>
   1a452:	e668      	b.n	1a126 <module_sps_tx+0x1ee>
                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, Satellite <NOT Visible>, waiting for %u seconds\n\n", visibility_period);
   1a454:	f7f6 fe08 	bl	11068 <am_util_stdio_printf>
   1a458:	2114      	movs	r1, #20
   1a45a:	4829      	ldr	r0, [pc, #164]	@ (1a500 <module_sps_tx+0x5c8>)
   1a45c:	f003 fd8c 	bl	1df78 <datalogger_log_debug>
                            i9603n_sleep();
   1a460:	f7f7 faaa 	bl	119b8 <i9603n_sleep>
                            vTaskDelay(xDelay1000ms * visibility_period);
   1a464:	f644 6020 	movw	r0, #20000	@ 0x4e20
   1a468:	f7f4 ffbc 	bl	f3e4 <vTaskDelay>
                            i9603n_wakeup();
   1a46c:	f7f7 faa6 	bl	119bc <i9603n_wakeup>
                            task_Iridium_satellite_visibility(&xSatellite);
   1a470:	a80b      	add	r0, sp, #44	@ 0x2c
   1a472:	f7f7 fab1 	bl	119d8 <task_Iridium_satellite_visibility>
   1a476:	e5be      	b.n	19ff6 <module_sps_tx+0xbe>
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, No more measurements available m_prof_number=%u, prof_number=%u\n", m_prof_number, prof_number);
   1a478:	4c12      	ldr	r4, [pc, #72]	@ (1a4c4 <module_sps_tx+0x58c>)
   1a47a:	f89a 1000 	ldrb.w	r1, [sl]
   1a47e:	4821      	ldr	r0, [pc, #132]	@ (1a504 <module_sps_tx+0x5cc>)
   1a480:	7822      	ldrb	r2, [r4, #0]
   1a482:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
   1a486:	f7f6 fdef 	bl	11068 <am_util_stdio_printf>
   1a48a:	f89a 1000 	ldrb.w	r1, [sl]
   1a48e:	481d      	ldr	r0, [pc, #116]	@ (1a504 <module_sps_tx+0x5cc>)
   1a490:	7822      	ldrb	r2, [r4, #0]
   1a492:	f003 fd71 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(xDelay1000ms);
   1a496:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a49a:	f7f4 ffa3 	bl	f3e4 <vTaskDelay>
            if (prof_number >= SYSTEM_PROFILE_NUMBER)
   1a49e:	4a09      	ldr	r2, [pc, #36]	@ (1a4c4 <module_sps_tx+0x58c>)
   1a4a0:	7813      	ldrb	r3, [r2, #0]
   1a4a2:	2b63      	cmp	r3, #99	@ 0x63
   1a4a4:	f63f aef3 	bhi.w	1a28e <module_sps_tx+0x356>
                datalogger_read_test_profile(true);
   1a4a8:	2001      	movs	r0, #1
   1a4aa:	f004 fa49 	bl	1e940 <datalogger_read_test_profile>
                spsEvent = MODE_IDLE;
   1a4ae:	2303      	movs	r3, #3
   1a4b0:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
   1a4b4:	e6f7      	b.n	1a2a6 <module_sps_tx+0x36e>
   1a4b6:	bf00      	nop
   1a4b8:	0002ec88 	.word	0x0002ec88
   1a4bc:	0002ece4 	.word	0x0002ece4
   1a4c0:	0002ed2c 	.word	0x0002ed2c
   1a4c4:	1000b9e2 	.word	0x1000b9e2
   1a4c8:	1000b9e8 	.word	0x1000b9e8
   1a4cc:	10038bb4 	.word	0x10038bb4
   1a4d0:	1000bcb4 	.word	0x1000bcb4
   1a4d4:	0002ef0c 	.word	0x0002ef0c
   1a4d8:	0002f24c 	.word	0x0002f24c
   1a4dc:	0002f280 	.word	0x0002f280
   1a4e0:	0002f2ac 	.word	0x0002f2ac
   1a4e4:	0002e6dc 	.word	0x0002e6dc
   1a4e8:	0002ecb8 	.word	0x0002ecb8
   1a4ec:	0002edbc 	.word	0x0002edbc
   1a4f0:	0002ee0c 	.word	0x0002ee0c
   1a4f4:	10048d84 	.word	0x10048d84
   1a4f8:	0002e7d0 	.word	0x0002e7d0
   1a4fc:	0002e81c 	.word	0x0002e81c
   1a500:	0002e704 	.word	0x0002e704
   1a504:	0002ed64 	.word	0x0002ed64
   1a508:	1000b9de 	.word	0x1000b9de
        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, No more measurements available m_park_number=%u, park_number=%u\n", m_park_number, park_number);
   1a50c:	4c90      	ldr	r4, [pc, #576]	@ (1a750 <module_sps_tx+0x818>)
   1a50e:	f89a 1000 	ldrb.w	r1, [sl]
   1a512:	4890      	ldr	r0, [pc, #576]	@ (1a754 <module_sps_tx+0x81c>)
   1a514:	7822      	ldrb	r2, [r4, #0]
   1a516:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
   1a51a:	f7f6 fda5 	bl	11068 <am_util_stdio_printf>
   1a51e:	f89a 1000 	ldrb.w	r1, [sl]
   1a522:	488c      	ldr	r0, [pc, #560]	@ (1a754 <module_sps_tx+0x81c>)
   1a524:	7822      	ldrb	r2, [r4, #0]
   1a526:	f003 fd27 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(xDelay1000ms);
   1a52a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a52e:	f7f4 ff59 	bl	f3e4 <vTaskDelay>
        while (send_park)
   1a532:	e5e1      	b.n	1a0f8 <module_sps_tx+0x1c0>
            sPark.mLength = m_park_length;
   1a534:	f8b8 2000 	ldrh.w	r2, [r8]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u measurement_length=%u\n", sPark.profNumber, sPark.mLength);
   1a538:	4887      	ldr	r0, [pc, #540]	@ (1a758 <module_sps_tx+0x820>)
            m_park_length = 0;
   1a53a:	f8a8 1000 	strh.w	r1, [r8]
            sPark.mLength = m_park_length;
   1a53e:	b292      	uxth	r2, r2
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u measurement_length=%u\n", sPark.profNumber, sPark.mLength);
   1a540:	7861      	ldrb	r1, [r4, #1]
            sPark.mLength = m_park_length;
   1a542:	8062      	strh	r2, [r4, #2]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u measurement_length=%u\n", sPark.profNumber, sPark.mLength);
   1a544:	f7f6 fd90 	bl	11068 <am_util_stdio_printf>
   1a548:	4883      	ldr	r0, [pc, #524]	@ (1a758 <module_sps_tx+0x820>)
   1a54a:	8862      	ldrh	r2, [r4, #2]
   1a54c:	7861      	ldrb	r1, [r4, #1]
   1a54e:	f003 fd13 	bl	1df78 <datalogger_log_debug>
   1a552:	e5b0      	b.n	1a0b6 <module_sps_tx+0x17e>
            sProf.mLength = m_prof_length;
   1a554:	f8b8 2000 	ldrh.w	r2, [r8]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u measurement_length=%u\n", sProf.profNumber, sProf.mLength);
   1a558:	7861      	ldrb	r1, [r4, #1]
   1a55a:	4880      	ldr	r0, [pc, #512]	@ (1a75c <module_sps_tx+0x824>)
            sProf.mLength = m_prof_length;
   1a55c:	b292      	uxth	r2, r2
            m_prof_length = 0;
   1a55e:	2300      	movs	r3, #0
            sProf.mLength = m_prof_length;
   1a560:	8062      	strh	r2, [r4, #2]
            m_prof_length = 0;
   1a562:	f8a8 3000 	strh.w	r3, [r8]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u measurement_length=%u\n", sProf.profNumber, sProf.mLength);
   1a566:	f7f6 fd7f 	bl	11068 <am_util_stdio_printf>
   1a56a:	487c      	ldr	r0, [pc, #496]	@ (1a75c <module_sps_tx+0x824>)
   1a56c:	8862      	ldrh	r2, [r4, #2]
   1a56e:	7861      	ldrb	r1, [r4, #1]
   1a570:	f003 fd02 	bl	1df78 <datalogger_log_debug>
   1a574:	e665      	b.n	1a242 <module_sps_tx+0x30a>
    *readlength = sProf.mLength;
   1a576:	b2ff      	uxtb	r7, r7
                bool ret = i9603n_send_data(irid_prof, txprof);
   1a578:	4879      	ldr	r0, [pc, #484]	@ (1a760 <module_sps_tx+0x828>)
    *readlength = sProf.mLength;
   1a57a:	9707      	str	r7, [sp, #28]
                bool ret = i9603n_send_data(irid_prof, txprof);
   1a57c:	4629      	mov	r1, r5
   1a57e:	f7f7 fc7b 	bl	11e78 <i9603n_send_data>
                if (ret)
   1a582:	2800      	cmp	r0, #0
   1a584:	f000 818f 	beq.w	1a8a6 <module_sps_tx+0x96e>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile measurements=%u, bytes=%u are being transmitted\n", nr_prof, txprof);
   1a588:	462a      	mov	r2, r5
   1a58a:	4639      	mov	r1, r7
   1a58c:	4875      	ldr	r0, [pc, #468]	@ (1a764 <module_sps_tx+0x82c>)
   1a58e:	f7f6 fd6b 	bl	11068 <am_util_stdio_printf>
   1a592:	4874      	ldr	r0, [pc, #464]	@ (1a764 <module_sps_tx+0x82c>)
   1a594:	462a      	mov	r2, r5
   1a596:	4639      	mov	r1, r7
   1a598:	f003 fcee 	bl	1df78 <datalogger_log_debug>
                vTaskDelay(xDelay1000ms);
   1a59c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a5a0:	f7f4 ff20 	bl	f3e4 <vTaskDelay>
                task_Iridium_transfer(&xIridium);
   1a5a4:	a80a      	add	r0, sp, #40	@ 0x28
   1a5a6:	f7f7 fa51 	bl	11a4c <task_Iridium_transfer>
                while (prof_run)
   1a5aa:	ab0c      	add	r3, sp, #48	@ 0x30
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Prof checking task eState\n");
   1a5ac:	4d6e      	ldr	r5, [pc, #440]	@ (1a768 <module_sps_tx+0x830>)
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile task->active\n");
   1a5ae:	4f6f      	ldr	r7, [pc, #444]	@ (1a76c <module_sps_tx+0x834>)
   1a5b0:	9306      	str	r3, [sp, #24]
   1a5b2:	e008      	b.n	1a5c6 <module_sps_tx+0x68e>
                    else if (eStatus==eSuspended)
   1a5b4:	2803      	cmp	r0, #3
   1a5b6:	d018      	beq.n	1a5ea <module_sps_tx+0x6b2>
                    else if (eStatus==eDeleted)
   1a5b8:	2804      	cmp	r0, #4
   1a5ba:	f000 80ed 	beq.w	1a798 <module_sps_tx+0x860>
                    vTaskDelay(xDelay1000ms);
   1a5be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a5c2:	f7f4 ff0f 	bl	f3e4 <vTaskDelay>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Prof checking task eState\n");
   1a5c6:	4628      	mov	r0, r5
   1a5c8:	f7f6 fd4e 	bl	11068 <am_util_stdio_printf>
   1a5cc:	4628      	mov	r0, r5
   1a5ce:	f003 fcd3 	bl	1df78 <datalogger_log_debug>
                    eStatus = eTaskGetState( xIridium );
   1a5d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1a5d4:	f7f4 fb6a 	bl	ecac <eTaskGetState>
                    if ( (eStatus==eRunning) ||
   1a5d8:	2802      	cmp	r0, #2
   1a5da:	d8eb      	bhi.n	1a5b4 <module_sps_tx+0x67c>
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile task->active\n");
   1a5dc:	4638      	mov	r0, r7
   1a5de:	f7f6 fd43 	bl	11068 <am_util_stdio_printf>
   1a5e2:	4638      	mov	r0, r7
   1a5e4:	f003 fcc8 	bl	1df78 <datalogger_log_debug>
   1a5e8:	e7e9      	b.n	1a5be <module_sps_tx+0x686>
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile task->suspended\n");
   1a5ea:	4861      	ldr	r0, [pc, #388]	@ (1a770 <module_sps_tx+0x838>)
   1a5ec:	f7f6 fd3c 	bl	11068 <am_util_stdio_printf>
   1a5f0:	485f      	ldr	r0, [pc, #380]	@ (1a770 <module_sps_tx+0x838>)
   1a5f2:	f003 fcc1 	bl	1df78 <datalogger_log_debug>
   1a5f6:	e7e2      	b.n	1a5be <module_sps_tx+0x686>
    *readlength = sPark.mLength;
   1a5f8:	b2ff      	uxtb	r7, r7
                bool ret = i9603n_send_data(irid_park, txpark);
   1a5fa:	485e      	ldr	r0, [pc, #376]	@ (1a774 <module_sps_tx+0x83c>)
    *readlength = sPark.mLength;
   1a5fc:	9707      	str	r7, [sp, #28]
                bool ret = i9603n_send_data(irid_park, txpark);
   1a5fe:	4629      	mov	r1, r5
   1a600:	f7f7 fc3a 	bl	11e78 <i9603n_send_data>
                if (ret)
   1a604:	2800      	cmp	r0, #0
   1a606:	f000 8155 	beq.w	1a8b4 <module_sps_tx+0x97c>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park measurements=%u, bytes=%u are being transmitted\n", nr_park, txpark);
   1a60a:	462a      	mov	r2, r5
   1a60c:	4639      	mov	r1, r7
   1a60e:	485a      	ldr	r0, [pc, #360]	@ (1a778 <module_sps_tx+0x840>)
   1a610:	f7f6 fd2a 	bl	11068 <am_util_stdio_printf>
   1a614:	4858      	ldr	r0, [pc, #352]	@ (1a778 <module_sps_tx+0x840>)
   1a616:	462a      	mov	r2, r5
   1a618:	4639      	mov	r1, r7
   1a61a:	f003 fcad 	bl	1df78 <datalogger_log_debug>
                vTaskDelay(xDelay1000ms);
   1a61e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a622:	f7f4 fedf 	bl	f3e4 <vTaskDelay>
                task_Iridium_transfer(&xIridium);
   1a626:	a80a      	add	r0, sp, #40	@ 0x28
   1a628:	f7f7 fa10 	bl	11a4c <task_Iridium_transfer>
                while (park_run)
   1a62c:	ab0c      	add	r3, sp, #48	@ 0x30
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park checking task eState\n");
   1a62e:	4d53      	ldr	r5, [pc, #332]	@ (1a77c <module_sps_tx+0x844>)
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park task->active\n");
   1a630:	4f53      	ldr	r7, [pc, #332]	@ (1a780 <module_sps_tx+0x848>)
   1a632:	9306      	str	r3, [sp, #24]
   1a634:	e007      	b.n	1a646 <module_sps_tx+0x70e>
                    else if (eStatus==eSuspended)
   1a636:	2803      	cmp	r0, #3
   1a638:	d017      	beq.n	1a66a <module_sps_tx+0x732>
                    else if (eStatus==eDeleted)
   1a63a:	2804      	cmp	r0, #4
   1a63c:	d01c      	beq.n	1a678 <module_sps_tx+0x740>
                    vTaskDelay(xDelay1000ms);
   1a63e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a642:	f7f4 fecf 	bl	f3e4 <vTaskDelay>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park checking task eState\n");
   1a646:	4628      	mov	r0, r5
   1a648:	f7f6 fd0e 	bl	11068 <am_util_stdio_printf>
   1a64c:	4628      	mov	r0, r5
   1a64e:	f003 fc93 	bl	1df78 <datalogger_log_debug>
                    eStatus = eTaskGetState( xIridium );
   1a652:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1a654:	f7f4 fb2a 	bl	ecac <eTaskGetState>
                    if ( (eStatus==eRunning) ||
   1a658:	2802      	cmp	r0, #2
   1a65a:	d8ec      	bhi.n	1a636 <module_sps_tx+0x6fe>
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park task->active\n");
   1a65c:	4638      	mov	r0, r7
   1a65e:	f7f6 fd03 	bl	11068 <am_util_stdio_printf>
   1a662:	4638      	mov	r0, r7
   1a664:	f003 fc88 	bl	1df78 <datalogger_log_debug>
   1a668:	e7e9      	b.n	1a63e <module_sps_tx+0x706>
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park task->suspended\n");
   1a66a:	4846      	ldr	r0, [pc, #280]	@ (1a784 <module_sps_tx+0x84c>)
   1a66c:	f7f6 fcfc 	bl	11068 <am_util_stdio_printf>
   1a670:	4844      	ldr	r0, [pc, #272]	@ (1a784 <module_sps_tx+0x84c>)
   1a672:	f003 fc81 	bl	1df78 <datalogger_log_debug>
   1a676:	e7e2      	b.n	1a63e <module_sps_tx+0x706>
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park task->finished\n");
   1a678:	4843      	ldr	r0, [pc, #268]	@ (1a788 <module_sps_tx+0x850>)
   1a67a:	f7f6 fcf5 	bl	11068 <am_util_stdio_printf>
   1a67e:	4842      	ldr	r0, [pc, #264]	@ (1a788 <module_sps_tx+0x850>)
   1a680:	f003 fc7a 	bl	1df78 <datalogger_log_debug>
                        vTaskDelay(xDelay500ms);
   1a684:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1a688:	f7f4 feac 	bl	f3e4 <vTaskDelay>
                        bool ret = GET_Iridium_status (recv);
   1a68c:	9a06      	ldr	r2, [sp, #24]
                        uint8_t recv[6] = {0};
   1a68e:	2300      	movs	r3, #0
                        bool ret = GET_Iridium_status (recv);
   1a690:	4610      	mov	r0, r2
                        uint8_t recv[6] = {0};
   1a692:	6013      	str	r3, [r2, #0]
   1a694:	8093      	strh	r3, [r2, #4]
                        bool ret = GET_Iridium_status (recv);
   1a696:	f7f7 f9c9 	bl	11a2c <GET_Iridium_status>
                        if (ret)
   1a69a:	2800      	cmp	r0, #0
   1a69c:	f000 8153 	beq.w	1a946 <module_sps_tx+0xa0e>
            park_tries++;
   1a6a0:	9a05      	ldr	r2, [sp, #20]
   1a6a2:	3201      	adds	r2, #1
   1a6a4:	b2d3      	uxtb	r3, r2
                            if (recv[0] <= 4)
   1a6a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
            park_tries++;
   1a6aa:	9305      	str	r3, [sp, #20]
                            if (recv[0] <= 4)
   1a6ac:	2a04      	cmp	r2, #4
   1a6ae:	f240 811f 	bls.w	1a8f0 <module_sps_tx+0x9b8>
                            else if (recv[0] == 38)
   1a6b2:	2a26      	cmp	r2, #38	@ 0x26
   1a6b4:	f000 81bd 	beq.w	1aa32 <module_sps_tx+0xafa>
                                i9603n_sleep();
   1a6b8:	9f03      	ldr	r7, [sp, #12]
   1a6ba:	f7f7 f97d 	bl	119b8 <i9603n_sleep>
                                if (recv[0] == 18)
   1a6be:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, waiting for %u seconds\n", wait_time);
   1a6c2:	4832      	ldr	r0, [pc, #200]	@ (1a78c <module_sps_tx+0x854>)
                                if (recv[0] == 18)
   1a6c4:	2b12      	cmp	r3, #18
   1a6c6:	f000 8169 	beq.w	1a99c <module_sps_tx+0xa64>
                                else if (recv[0] == 37)
   1a6ca:	2b25      	cmp	r3, #37	@ 0x25
   1a6cc:	f000 8166 	beq.w	1a99c <module_sps_tx+0xa64>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, waiting for %u seconds\n", wait_time);
   1a6d0:	2102      	movs	r1, #2
   1a6d2:	f7f6 fcc9 	bl	11068 <am_util_stdio_printf>
   1a6d6:	482d      	ldr	r0, [pc, #180]	@ (1a78c <module_sps_tx+0x854>)
   1a6d8:	2102      	movs	r1, #2
   1a6da:	f003 fc4d 	bl	1df78 <datalogger_log_debug>
                                    vTaskDelay(xDelay1000ms * wait_time);
   1a6de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   1a6e2:	f7f4 fe7f 	bl	f3e4 <vTaskDelay>
                                i9603n_wakeup();
   1a6e6:	f7f7 f969 	bl	119bc <i9603n_wakeup>
                                vTaskDelay(xDelay1000ms);
   1a6ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a6ee:	f7f4 fe79 	bl	f3e4 <vTaskDelay>
                                m_park_length += nr_park;
   1a6f2:	9d07      	ldr	r5, [sp, #28]
   1a6f4:	f8b8 3000 	ldrh.w	r3, [r8]
                                park.cbuf.read = park.cbuf.read - nr_park;
   1a6f8:	68b1      	ldr	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1a6fa:	4825      	ldr	r0, [pc, #148]	@ (1a790 <module_sps_tx+0x858>)
                                m_park_length += nr_park;
   1a6fc:	fa15 f383 	uxtah	r3, r5, r3
   1a700:	b29b      	uxth	r3, r3
   1a702:	f8a8 3000 	strh.w	r3, [r8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1a706:	f8b8 2000 	ldrh.w	r2, [r8]
                                park.cbuf.read = park.cbuf.read - nr_park;
   1a70a:	1b49      	subs	r1, r1, r5
   1a70c:	462b      	mov	r3, r5
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1a70e:	b292      	uxth	r2, r2
                                park.cbuf.read = park.cbuf.read - nr_park;
   1a710:	60b1      	str	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1a712:	f7f6 fca9 	bl	11068 <am_util_stdio_printf>
   1a716:	f8b8 2000 	ldrh.w	r2, [r8]
   1a71a:	68b1      	ldr	r1, [r6, #8]
   1a71c:	481c      	ldr	r0, [pc, #112]	@ (1a790 <module_sps_tx+0x858>)
   1a71e:	462b      	mov	r3, r5
   1a720:	b292      	uxth	r2, r2
   1a722:	f003 fc29 	bl	1df78 <datalogger_log_debug>
                                if (park_tries >= PARK_TRANSMIT_TRIES)
   1a726:	9b05      	ldr	r3, [sp, #20]
   1a728:	2b01      	cmp	r3, #1
   1a72a:	f240 81ec 	bls.w	1ab06 <module_sps_tx+0xbce>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park transmit <NOT Successful>\n\n");
   1a72e:	4819      	ldr	r0, [pc, #100]	@ (1a794 <module_sps_tx+0x85c>)
   1a730:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1a734:	f7f6 fc98 	bl	11068 <am_util_stdio_printf>
   1a738:	4816      	ldr	r0, [pc, #88]	@ (1a794 <module_sps_tx+0x85c>)
   1a73a:	f003 fc1d 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(xDelay1000ms);
   1a73e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a742:	f7f4 fe4f 	bl	f3e4 <vTaskDelay>
            vTaskDelay(xDelay1000ms);
   1a746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a74a:	f7f4 fe4b 	bl	f3e4 <vTaskDelay>
        while (send_park)
   1a74e:	e4d3      	b.n	1a0f8 <module_sps_tx+0x1c0>
   1a750:	1000b9e1 	.word	0x1000b9e1
   1a754:	0002e77c 	.word	0x0002e77c
   1a758:	0002e8d8 	.word	0x0002e8d8
   1a75c:	0002eecc 	.word	0x0002eecc
   1a760:	1000b9e8 	.word	0x1000b9e8
   1a764:	0002ef68 	.word	0x0002ef68
   1a768:	0002efd0 	.word	0x0002efd0
   1a76c:	0002eff8 	.word	0x0002eff8
   1a770:	0002f01c 	.word	0x0002f01c
   1a774:	1000bb3c 	.word	0x1000bb3c
   1a778:	0002e96c 	.word	0x0002e96c
   1a77c:	0002e9d0 	.word	0x0002e9d0
   1a780:	0002e9f8 	.word	0x0002e9f8
   1a784:	0002ea18 	.word	0x0002ea18
   1a788:	0002ea3c 	.word	0x0002ea3c
   1a78c:	0002eb9c 	.word	0x0002eb9c
   1a790:	0002eb58 	.word	0x0002eb58
   1a794:	0002ebc8 	.word	0x0002ebc8
                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile task->finished\n");
   1a798:	48c1      	ldr	r0, [pc, #772]	@ (1aaa0 <module_sps_tx+0xb68>)
   1a79a:	f7f6 fc65 	bl	11068 <am_util_stdio_printf>
   1a79e:	48c0      	ldr	r0, [pc, #768]	@ (1aaa0 <module_sps_tx+0xb68>)
   1a7a0:	f003 fbea 	bl	1df78 <datalogger_log_debug>
                        vTaskDelay(xDelay1000ms);
   1a7a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a7a8:	f7f4 fe1c 	bl	f3e4 <vTaskDelay>
                        bool ret = GET_Iridium_status (recv);
   1a7ac:	9a06      	ldr	r2, [sp, #24]
                        uint8_t recv[6] = {0};
   1a7ae:	2300      	movs	r3, #0
                        bool ret = GET_Iridium_status (recv);
   1a7b0:	4610      	mov	r0, r2
                        uint8_t recv[6] = {0};
   1a7b2:	6013      	str	r3, [r2, #0]
   1a7b4:	8093      	strh	r3, [r2, #4]
                        bool ret = GET_Iridium_status (recv);
   1a7b6:	f7f7 f939 	bl	11a2c <GET_Iridium_status>
                        if (ret)
   1a7ba:	2800      	cmp	r0, #0
   1a7bc:	f000 80bc 	beq.w	1a938 <module_sps_tx+0xa00>
            prof_tries++;
   1a7c0:	9a05      	ldr	r2, [sp, #20]
   1a7c2:	3201      	adds	r2, #1
   1a7c4:	b2d3      	uxtb	r3, r2
                            if (recv[0] <= 4)
   1a7c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
            prof_tries++;
   1a7ca:	9305      	str	r3, [sp, #20]
                            if (recv[0] <= 4)
   1a7cc:	2a04      	cmp	r2, #4
   1a7ce:	d978      	bls.n	1a8c2 <module_sps_tx+0x98a>
                            else if (recv[0] == 38)
   1a7d0:	2a26      	cmp	r2, #38	@ 0x26
   1a7d2:	f000 80fb 	beq.w	1a9cc <module_sps_tx+0xa94>
                                i9603n_sleep();
   1a7d6:	9f03      	ldr	r7, [sp, #12]
   1a7d8:	f7f7 f8ee 	bl	119b8 <i9603n_sleep>
                                if (recv[0] == 18)
   1a7dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, waiting for %u seconds\n", wait_time);
   1a7e0:	48b0      	ldr	r0, [pc, #704]	@ (1aaa4 <module_sps_tx+0xb6c>)
                                if (recv[0] == 18)
   1a7e2:	2b12      	cmp	r3, #18
   1a7e4:	f000 80e6 	beq.w	1a9b4 <module_sps_tx+0xa7c>
                                else if (recv[0] == 37)
   1a7e8:	2b25      	cmp	r3, #37	@ 0x25
   1a7ea:	f000 80e3 	beq.w	1a9b4 <module_sps_tx+0xa7c>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, waiting for %u seconds\n", wait_time);
   1a7ee:	2102      	movs	r1, #2
   1a7f0:	f7f6 fc3a 	bl	11068 <am_util_stdio_printf>
   1a7f4:	48ab      	ldr	r0, [pc, #684]	@ (1aaa4 <module_sps_tx+0xb6c>)
   1a7f6:	2102      	movs	r1, #2
   1a7f8:	f003 fbbe 	bl	1df78 <datalogger_log_debug>
                                    vTaskDelay(xDelay1000ms * wait_time);
   1a7fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   1a800:	f7f4 fdf0 	bl	f3e4 <vTaskDelay>
                                i9603n_wakeup();
   1a804:	f7f7 f8da 	bl	119bc <i9603n_wakeup>
                                m_prof_length += nr_prof;
   1a808:	9d07      	ldr	r5, [sp, #28]
   1a80a:	f8b8 3000 	ldrh.w	r3, [r8]
                                prof.cbuf.read = prof.cbuf.read - nr_prof;
   1a80e:	68b1      	ldr	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1a810:	48a5      	ldr	r0, [pc, #660]	@ (1aaa8 <module_sps_tx+0xb70>)
                                m_prof_length += nr_prof;
   1a812:	fa15 f383 	uxtah	r3, r5, r3
   1a816:	b29b      	uxth	r3, r3
   1a818:	f8a8 3000 	strh.w	r3, [r8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1a81c:	f8b8 2000 	ldrh.w	r2, [r8]
                                prof.cbuf.read = prof.cbuf.read - nr_prof;
   1a820:	1b49      	subs	r1, r1, r5
   1a822:	462b      	mov	r3, r5
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1a824:	b292      	uxth	r2, r2
                                prof.cbuf.read = prof.cbuf.read - nr_prof;
   1a826:	60b1      	str	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1a828:	f7f6 fc1e 	bl	11068 <am_util_stdio_printf>
   1a82c:	f8b8 2000 	ldrh.w	r2, [r8]
   1a830:	68b1      	ldr	r1, [r6, #8]
   1a832:	489d      	ldr	r0, [pc, #628]	@ (1aaa8 <module_sps_tx+0xb70>)
   1a834:	462b      	mov	r3, r5
   1a836:	b292      	uxth	r2, r2
   1a838:	f003 fb9e 	bl	1df78 <datalogger_log_debug>
                                if (prof_tries >= PROF_TRANSMIT_TRIES)
   1a83c:	9b05      	ldr	r3, [sp, #20]
   1a83e:	2b03      	cmp	r3, #3
   1a840:	f240 814e 	bls.w	1aae0 <module_sps_tx+0xba8>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile transmit <NOT Successful>\n\n");
   1a844:	4899      	ldr	r0, [pc, #612]	@ (1aaac <module_sps_tx+0xb74>)
   1a846:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1a84a:	f7f6 fc0d 	bl	11068 <am_util_stdio_printf>
   1a84e:	4897      	ldr	r0, [pc, #604]	@ (1aaac <module_sps_tx+0xb74>)
   1a850:	f003 fb92 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(xDelay1000ms);
   1a854:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a858:	f7f4 fdc4 	bl	f3e4 <vTaskDelay>
            vTaskDelay(xDelay1000ms);
   1a85c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a860:	f7f4 fdc0 	bl	f3e4 <vTaskDelay>
        while (send_prof)
   1a864:	e50e      	b.n	1a284 <module_sps_tx+0x34c>
            sProf.mLength = m_prof_length;
   1a866:	f8b8 2000 	ldrh.w	r2, [r8]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u length of measurements=%u fitting in one page!\n", sProf.profNumber, sProf.mLength);
   1a86a:	7861      	ldrb	r1, [r4, #1]
   1a86c:	4890      	ldr	r0, [pc, #576]	@ (1aab0 <module_sps_tx+0xb78>)
            m_prof_length = 0;
   1a86e:	f8a8 5000 	strh.w	r5, [r8]
            sProf.mLength = m_prof_length;
   1a872:	b292      	uxth	r2, r2
   1a874:	8062      	strh	r2, [r4, #2]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, profile_number=%u length of measurements=%u fitting in one page!\n", sProf.profNumber, sProf.mLength);
   1a876:	f7f6 fbf7 	bl	11068 <am_util_stdio_printf>
   1a87a:	488d      	ldr	r0, [pc, #564]	@ (1aab0 <module_sps_tx+0xb78>)
   1a87c:	8862      	ldrh	r2, [r4, #2]
   1a87e:	7861      	ldrb	r1, [r4, #1]
   1a880:	f003 fb7a 	bl	1df78 <datalogger_log_debug>
   1a884:	e4dd      	b.n	1a242 <module_sps_tx+0x30a>
            sPark.mLength = m_park_length;
   1a886:	f8b8 2000 	ldrh.w	r2, [r8]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u length of measurements=%u fitting in one page!\n", sPark.profNumber, sPark.mLength);
   1a88a:	7861      	ldrb	r1, [r4, #1]
   1a88c:	4889      	ldr	r0, [pc, #548]	@ (1aab4 <module_sps_tx+0xb7c>)
            m_park_length = 0;
   1a88e:	f8a8 5000 	strh.w	r5, [r8]
            sPark.mLength = m_park_length;
   1a892:	b292      	uxth	r2, r2
   1a894:	8062      	strh	r2, [r4, #2]
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, profile_number=%u length of measurements=%u fitting in one page!\n", sPark.profNumber, sPark.mLength);
   1a896:	f7f6 fbe7 	bl	11068 <am_util_stdio_printf>
   1a89a:	4886      	ldr	r0, [pc, #536]	@ (1aab4 <module_sps_tx+0xb7c>)
   1a89c:	8862      	ldrh	r2, [r4, #2]
   1a89e:	7861      	ldrb	r1, [r4, #1]
   1a8a0:	f003 fb6a 	bl	1df78 <datalogger_log_debug>
   1a8a4:	e407      	b.n	1a0b6 <module_sps_tx+0x17e>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile returned false\n");
   1a8a6:	4884      	ldr	r0, [pc, #528]	@ (1aab8 <module_sps_tx+0xb80>)
   1a8a8:	f7f6 fbde 	bl	11068 <am_util_stdio_printf>
   1a8ac:	4882      	ldr	r0, [pc, #520]	@ (1aab8 <module_sps_tx+0xb80>)
   1a8ae:	f003 fb63 	bl	1df78 <datalogger_log_debug>
   1a8b2:	e673      	b.n	1a59c <module_sps_tx+0x664>
                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park returned false\n");
   1a8b4:	4881      	ldr	r0, [pc, #516]	@ (1aabc <module_sps_tx+0xb84>)
   1a8b6:	f7f6 fbd7 	bl	11068 <am_util_stdio_printf>
   1a8ba:	4880      	ldr	r0, [pc, #512]	@ (1aabc <module_sps_tx+0xb84>)
   1a8bc:	f003 fb5c 	bl	1df78 <datalogger_log_debug>
   1a8c0:	e6ad      	b.n	1a61e <module_sps_tx+0x6e6>
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile transmit <Successful>\n\n");
   1a8c2:	487f      	ldr	r0, [pc, #508]	@ (1aac0 <module_sps_tx+0xb88>)
   1a8c4:	f7f6 fbd0 	bl	11068 <am_util_stdio_printf>
   1a8c8:	487d      	ldr	r0, [pc, #500]	@ (1aac0 <module_sps_tx+0xb88>)
   1a8ca:	f003 fb55 	bl	1df78 <datalogger_log_debug>
                                if (m_prof_length == 0)
   1a8ce:	f8b8 3000 	ldrh.w	r3, [r8]
   1a8d2:	b29b      	uxth	r3, r3
   1a8d4:	2b00      	cmp	r3, #0
   1a8d6:	d047      	beq.n	1a968 <module_sps_tx+0xa30>
                                    sProf.pageNumber++;
   1a8d8:	7923      	ldrb	r3, [r4, #4]
                    vTaskDelay(xDelay1000ms);
   1a8da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                                    sProf.pageNumber++;
   1a8de:	3301      	adds	r3, #1
   1a8e0:	7123      	strb	r3, [r4, #4]
                    vTaskDelay(xDelay1000ms);
   1a8e2:	f7f4 fd7f 	bl	f3e4 <vTaskDelay>
            vTaskDelay(xDelay1000ms);
   1a8e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a8ea:	f7f4 fd7b 	bl	f3e4 <vTaskDelay>
            while(run_satellite)
   1a8ee:	e481      	b.n	1a1f4 <module_sps_tx+0x2bc>
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park transmit <Successful>\n\n");
   1a8f0:	4874      	ldr	r0, [pc, #464]	@ (1aac4 <module_sps_tx+0xb8c>)
   1a8f2:	f7f6 fbb9 	bl	11068 <am_util_stdio_printf>
   1a8f6:	4873      	ldr	r0, [pc, #460]	@ (1aac4 <module_sps_tx+0xb8c>)
   1a8f8:	f003 fb3e 	bl	1df78 <datalogger_log_debug>
                                if (m_park_length == 0)
   1a8fc:	f8b8 3000 	ldrh.w	r3, [r8]
   1a900:	b29b      	uxth	r3, r3
   1a902:	2b00      	cmp	r3, #0
   1a904:	d03d      	beq.n	1a982 <module_sps_tx+0xa4a>
                                    sPark.pageNumber++;
   1a906:	7923      	ldrb	r3, [r4, #4]
                    vTaskDelay(xDelay1000ms);
   1a908:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                                    sPark.pageNumber++;
   1a90c:	3301      	adds	r3, #1
   1a90e:	7123      	strb	r3, [r4, #4]
                    vTaskDelay(xDelay1000ms);
   1a910:	f7f4 fd68 	bl	f3e4 <vTaskDelay>
            vTaskDelay(xDelay1000ms);
   1a914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1a918:	f7f4 fd64 	bl	f3e4 <vTaskDelay>
            while(run_satellite)
   1a91c:	f7ff bba4 	b.w	1a068 <module_sps_tx+0x130>
            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Iridium looks fine\n");
   1a920:	4869      	ldr	r0, [pc, #420]	@ (1aac8 <module_sps_tx+0xb90>)
   1a922:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 1aadc <module_sps_tx+0xba4>
   1a926:	f7f6 fb9f 	bl	11068 <am_util_stdio_printf>
   1a92a:	4867      	ldr	r0, [pc, #412]	@ (1aac8 <module_sps_tx+0xb90>)
   1a92c:	f003 fb24 	bl	1df78 <datalogger_log_debug>
    if (tries >= 2)
   1a930:	f10d 0727 	add.w	r7, sp, #39	@ 0x27
   1a934:	f7ff bb42 	b.w	19fbc <module_sps_tx+0x84>
                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile ERROR :: getting transmit status\n");
   1a938:	4864      	ldr	r0, [pc, #400]	@ (1aacc <module_sps_tx+0xb94>)
   1a93a:	f7f6 fb95 	bl	11068 <am_util_stdio_printf>
   1a93e:	4863      	ldr	r0, [pc, #396]	@ (1aacc <module_sps_tx+0xb94>)
   1a940:	f003 fb1a 	bl	1df78 <datalogger_log_debug>
   1a944:	e63b      	b.n	1a5be <module_sps_tx+0x686>
                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park ERROR :: getting transmit status\n");
   1a946:	4862      	ldr	r0, [pc, #392]	@ (1aad0 <module_sps_tx+0xb98>)
   1a948:	f7f6 fb8e 	bl	11068 <am_util_stdio_printf>
   1a94c:	4860      	ldr	r0, [pc, #384]	@ (1aad0 <module_sps_tx+0xb98>)
   1a94e:	f003 fb13 	bl	1df78 <datalogger_log_debug>
   1a952:	e674      	b.n	1a63e <module_sps_tx+0x706>
        i9603n_initialize();
   1a954:	f7f7 f814 	bl	11980 <i9603n_initialize>
        iridium_init = true;
   1a958:	2301      	movs	r3, #1
        vTaskDelay(xDelay1000ms);
   1a95a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        iridium_init = true;
   1a95e:	7023      	strb	r3, [r4, #0]
        vTaskDelay(xDelay1000ms);
   1a960:	f7f4 fd40 	bl	f3e4 <vTaskDelay>
   1a964:	f7ff baf2 	b.w	19f4c <module_sps_tx+0x14>
                                    sProf.pageNumber = 0;
   1a968:	7123      	strb	r3, [r4, #4]
                                    sProf.mLength = 0;
   1a96a:	8063      	strh	r3, [r4, #2]
                                    m_prof_number++;
   1a96c:	f89a 3000 	ldrb.w	r3, [sl]
   1a970:	3301      	adds	r3, #1
   1a972:	b2db      	uxtb	r3, r3
                    vTaskDelay(xDelay1000ms);
   1a974:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                                    m_prof_number++;
   1a978:	f88a 3000 	strb.w	r3, [sl]
                    vTaskDelay(xDelay1000ms);
   1a97c:	f7f4 fd32 	bl	f3e4 <vTaskDelay>
                while (prof_run)
   1a980:	e7b1      	b.n	1a8e6 <module_sps_tx+0x9ae>
                                    sPark.pageNumber = 0;
   1a982:	7123      	strb	r3, [r4, #4]
                                    sPark.mLength = 0;
   1a984:	8063      	strh	r3, [r4, #2]
                                    m_park_number++;
   1a986:	f89a 3000 	ldrb.w	r3, [sl]
   1a98a:	3301      	adds	r3, #1
   1a98c:	b2db      	uxtb	r3, r3
                    vTaskDelay(xDelay1000ms);
   1a98e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
                                    m_park_number++;
   1a992:	f88a 3000 	strb.w	r3, [sl]
                    vTaskDelay(xDelay1000ms);
   1a996:	f7f4 fd25 	bl	f3e4 <vTaskDelay>
                while (park_run)
   1a99a:	e7bb      	b.n	1a914 <module_sps_tx+0x9dc>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, waiting for %u seconds\n", wait_time);
   1a99c:	210a      	movs	r1, #10
   1a99e:	f7f6 fb63 	bl	11068 <am_util_stdio_printf>
   1a9a2:	484c      	ldr	r0, [pc, #304]	@ (1aad4 <module_sps_tx+0xb9c>)
   1a9a4:	210a      	movs	r1, #10
   1a9a6:	f003 fae7 	bl	1df78 <datalogger_log_debug>
                                    vTaskDelay(xDelay1000ms * wait_time);
   1a9aa:	f242 7010 	movw	r0, #10000	@ 0x2710
   1a9ae:	f7f4 fd19 	bl	f3e4 <vTaskDelay>
   1a9b2:	e698      	b.n	1a6e6 <module_sps_tx+0x7ae>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, waiting for %u seconds\n", wait_time);
   1a9b4:	210a      	movs	r1, #10
   1a9b6:	f7f6 fb57 	bl	11068 <am_util_stdio_printf>
   1a9ba:	483a      	ldr	r0, [pc, #232]	@ (1aaa4 <module_sps_tx+0xb6c>)
   1a9bc:	210a      	movs	r1, #10
   1a9be:	f003 fadb 	bl	1df78 <datalogger_log_debug>
                                    vTaskDelay(xDelay1000ms * wait_time);
   1a9c2:	f242 7010 	movw	r0, #10000	@ 0x2710
   1a9c6:	f7f4 fd0d 	bl	f3e4 <vTaskDelay>
   1a9ca:	e71b      	b.n	1a804 <module_sps_tx+0x8cc>
                                vTaskDelay(xDelay2000ms);
   1a9cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   1a9d0:	f7f4 fd08 	bl	f3e4 <vTaskDelay>
                                uint16_t buf[8] = {0};
   1a9d4:	2300      	movs	r3, #0
                                uint8_t len = i9603n_traffic_mgmt_time(buf);
   1a9d6:	a80e      	add	r0, sp, #56	@ 0x38
                                uint16_t buf[8] = {0};
   1a9d8:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
   1a9dc:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
                                uint8_t len = i9603n_traffic_mgmt_time(buf);
   1a9e0:	f7f7 fae4 	bl	11fac <i9603n_traffic_mgmt_time>
   1a9e4:	4607      	mov	r7, r0
                                i9603n_sleep();
   1a9e6:	f7f6 ffe7 	bl	119b8 <i9603n_sleep>
                                if (len > 0)
   1a9ea:	2f00      	cmp	r7, #0
   1a9ec:	f040 809e 	bne.w	1ab2c <module_sps_tx+0xbf4>
                                i9603n_wakeup();
   1a9f0:	f7f6 ffe4 	bl	119bc <i9603n_wakeup>
                                m_prof_length += nr_prof;
   1a9f4:	9d07      	ldr	r5, [sp, #28]
   1a9f6:	f8b8 3000 	ldrh.w	r3, [r8]
                                prof.cbuf.read = prof.cbuf.read - nr_prof;
   1a9fa:	68b1      	ldr	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1a9fc:	482a      	ldr	r0, [pc, #168]	@ (1aaa8 <module_sps_tx+0xb70>)
                                m_prof_length += nr_prof;
   1a9fe:	fa15 f383 	uxtah	r3, r5, r3
   1aa02:	b29b      	uxth	r3, r3
   1aa04:	f8a8 3000 	strh.w	r3, [r8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1aa08:	f8b8 2000 	ldrh.w	r2, [r8]
                                prof.cbuf.read = prof.cbuf.read - nr_prof;
   1aa0c:	1b49      	subs	r1, r1, r5
   1aa0e:	462b      	mov	r3, r5
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1aa10:	b292      	uxth	r2, r2
                                prof.cbuf.read = prof.cbuf.read - nr_prof;
   1aa12:	60b1      	str	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile after reset read=%u, m_prof_length=%u, nr_prof=%u\n\n", prof.cbuf.read, m_prof_length, nr_prof);
   1aa14:	f7f6 fb28 	bl	11068 <am_util_stdio_printf>
   1aa18:	f8b8 2000 	ldrh.w	r2, [r8]
   1aa1c:	68b1      	ldr	r1, [r6, #8]
   1aa1e:	4822      	ldr	r0, [pc, #136]	@ (1aaa8 <module_sps_tx+0xb70>)
   1aa20:	462b      	mov	r3, r5
   1aa22:	b292      	uxth	r2, r2
   1aa24:	f003 faa8 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(xDelay1000ms);
   1aa28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1aa2c:	f7f4 fcda 	bl	f3e4 <vTaskDelay>
                while (prof_run)
   1aa30:	e759      	b.n	1a8e6 <module_sps_tx+0x9ae>
                                vTaskDelay(xDelay2000ms);
   1aa32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   1aa36:	f7f4 fcd5 	bl	f3e4 <vTaskDelay>
                                uint16_t buf[8] = {0};
   1aa3a:	2300      	movs	r3, #0
                                uint8_t len = i9603n_traffic_mgmt_time(buf);
   1aa3c:	a80e      	add	r0, sp, #56	@ 0x38
                                uint16_t buf[8] = {0};
   1aa3e:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
   1aa42:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
                                uint8_t len = i9603n_traffic_mgmt_time(buf);
   1aa46:	f7f7 fab1 	bl	11fac <i9603n_traffic_mgmt_time>
   1aa4a:	4607      	mov	r7, r0
                                i9603n_sleep();
   1aa4c:	f7f6 ffb4 	bl	119b8 <i9603n_sleep>
                                if (len > 0)
   1aa50:	2f00      	cmp	r7, #0
   1aa52:	f040 809f 	bne.w	1ab94 <module_sps_tx+0xc5c>
                                i9603n_wakeup();
   1aa56:	f7f6 ffb1 	bl	119bc <i9603n_wakeup>
                                vTaskDelay(xDelay1000ms);
   1aa5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1aa5e:	f7f4 fcc1 	bl	f3e4 <vTaskDelay>
                                m_park_length += nr_park;
   1aa62:	9d07      	ldr	r5, [sp, #28]
   1aa64:	f8b8 3000 	ldrh.w	r3, [r8]
                                park.cbuf.read = park.cbuf.read - nr_park;
   1aa68:	68b1      	ldr	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1aa6a:	481b      	ldr	r0, [pc, #108]	@ (1aad8 <module_sps_tx+0xba0>)
                                m_park_length += nr_park;
   1aa6c:	fa15 f383 	uxtah	r3, r5, r3
   1aa70:	b29b      	uxth	r3, r3
   1aa72:	f8a8 3000 	strh.w	r3, [r8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1aa76:	f8b8 2000 	ldrh.w	r2, [r8]
                                park.cbuf.read = park.cbuf.read - nr_park;
   1aa7a:	1b49      	subs	r1, r1, r5
   1aa7c:	462b      	mov	r3, r5
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1aa7e:	b292      	uxth	r2, r2
                                park.cbuf.read = park.cbuf.read - nr_park;
   1aa80:	60b1      	str	r1, [r6, #8]
                                ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park after reset read=%u, m_park_length=%u, nr_park=%u\n\n", park.cbuf.read, m_park_length, nr_park);
   1aa82:	f7f6 faf1 	bl	11068 <am_util_stdio_printf>
   1aa86:	f8b8 2000 	ldrh.w	r2, [r8]
   1aa8a:	68b1      	ldr	r1, [r6, #8]
   1aa8c:	4812      	ldr	r0, [pc, #72]	@ (1aad8 <module_sps_tx+0xba0>)
   1aa8e:	462b      	mov	r3, r5
   1aa90:	b292      	uxth	r2, r2
   1aa92:	f003 fa71 	bl	1df78 <datalogger_log_debug>
                    vTaskDelay(xDelay1000ms);
   1aa96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1aa9a:	f7f4 fca3 	bl	f3e4 <vTaskDelay>
                while (park_run)
   1aa9e:	e739      	b.n	1a914 <module_sps_tx+0x9dc>
   1aaa0:	0002f040 	.word	0x0002f040
   1aaa4:	0002f1b8 	.word	0x0002f1b8
   1aaa8:	0002f170 	.word	0x0002f170
   1aaac:	0002f1e4 	.word	0x0002f1e4
   1aab0:	0002ee74 	.word	0x0002ee74
   1aab4:	0002e884 	.word	0x0002e884
   1aab8:	0002efac 	.word	0x0002efac
   1aabc:	0002e9b0 	.word	0x0002e9b0
   1aac0:	0002f064 	.word	0x0002f064
   1aac4:	0002ea5c 	.word	0x0002ea5c
   1aac8:	0002e5cc 	.word	0x0002e5cc
   1aacc:	0002f214 	.word	0x0002f214
   1aad0:	0002ebf4 	.word	0x0002ebf4
   1aad4:	0002eb9c 	.word	0x0002eb9c
   1aad8:	0002eb58 	.word	0x0002eb58
   1aadc:	1000bc98 	.word	0x1000bc98
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile transmit <NOT Successful>\n\n");
   1aae0:	4860      	ldr	r0, [pc, #384]	@ (1ac64 <module_sps_tx+0xd2c>)
   1aae2:	f7f6 fac1 	bl	11068 <am_util_stdio_printf>
   1aae6:	485f      	ldr	r0, [pc, #380]	@ (1ac64 <module_sps_tx+0xd2c>)
   1aae8:	f003 fa46 	bl	1df78 <datalogger_log_debug>
                                    task_Iridium_satellite_visibility(&xSatellite);
   1aaec:	a80b      	add	r0, sp, #44	@ 0x2c
   1aaee:	f7f6 ff73 	bl	119d8 <task_Iridium_satellite_visibility>
                    vTaskDelay(xDelay1000ms);
   1aaf2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1aaf6:	f7f4 fc75 	bl	f3e4 <vTaskDelay>
            vTaskDelay(xDelay1000ms);
   1aafa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1aafe:	f7f4 fc71 	bl	f3e4 <vTaskDelay>
            while(run_satellite)
   1ab02:	f7ff bb0a 	b.w	1a11a <module_sps_tx+0x1e2>
                                    ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park transmit <NOT Successful>\n\n");
   1ab06:	4858      	ldr	r0, [pc, #352]	@ (1ac68 <module_sps_tx+0xd30>)
   1ab08:	f7f6 faae 	bl	11068 <am_util_stdio_printf>
   1ab0c:	4856      	ldr	r0, [pc, #344]	@ (1ac68 <module_sps_tx+0xd30>)
   1ab0e:	f003 fa33 	bl	1df78 <datalogger_log_debug>
                                    task_Iridium_satellite_visibility(&xSatellite);
   1ab12:	a80b      	add	r0, sp, #44	@ 0x2c
   1ab14:	f7f6 ff60 	bl	119d8 <task_Iridium_satellite_visibility>
                    vTaskDelay(xDelay1000ms);
   1ab18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1ab1c:	f7f4 fc62 	bl	f3e4 <vTaskDelay>
            vTaskDelay(xDelay1000ms);
   1ab20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1ab24:	f7f4 fc5e 	bl	f3e4 <vTaskDelay>
            while(run_satellite)
   1ab28:	f7ff ba5f 	b.w	19fea <module_sps_tx+0xb2>
   1ab2c:	f10d 0536 	add.w	r5, sp, #54	@ 0x36
   1ab30:	2302      	movs	r3, #2
   1ab32:	fb13 5307 	smlabb	r3, r3, r7, r5
                                        ARTEMIS_DEBUG_PRINTF("%u ", buf[i]);
   1ab36:	4f4d      	ldr	r7, [pc, #308]	@ (1ac6c <module_sps_tx+0xd34>)
   1ab38:	9306      	str	r3, [sp, #24]
   1ab3a:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   1ab3e:	4638      	mov	r0, r7
   1ab40:	f7f6 fa92 	bl	11068 <am_util_stdio_printf>
   1ab44:	8829      	ldrh	r1, [r5, #0]
   1ab46:	4638      	mov	r0, r7
   1ab48:	f003 fa16 	bl	1df78 <datalogger_log_debug>
                                    for (uint8_t i=0; i<len; i++)
   1ab4c:	9b06      	ldr	r3, [sp, #24]
   1ab4e:	429d      	cmp	r5, r3
   1ab50:	d1f3      	bne.n	1ab3a <module_sps_tx+0xc02>
                                    ARTEMIS_DEBUG_PRINTF("\n");
   1ab52:	4847      	ldr	r0, [pc, #284]	@ (1ac70 <module_sps_tx+0xd38>)
   1ab54:	f7f6 fa88 	bl	11068 <am_util_stdio_printf>
   1ab58:	4845      	ldr	r0, [pc, #276]	@ (1ac70 <module_sps_tx+0xd38>)
   1ab5a:	f003 fa0d 	bl	1df78 <datalogger_log_debug>
                                    if (buf[0] == 0)
   1ab5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
   1ab62:	2b00      	cmp	r3, #0
   1ab64:	d149      	bne.n	1abfa <module_sps_tx+0xcc2>
                                        wait_time = buf[1];
   1ab66:	f8bd 503a 	ldrh.w	r5, [sp, #58]	@ 0x3a
                                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, traffic management time is valid, %u seconds\n", wait_time);
   1ab6a:	4842      	ldr	r0, [pc, #264]	@ (1ac74 <module_sps_tx+0xd3c>)
   1ab6c:	4629      	mov	r1, r5
   1ab6e:	f7f6 fa7b 	bl	11068 <am_util_stdio_printf>
   1ab72:	4840      	ldr	r0, [pc, #256]	@ (1ac74 <module_sps_tx+0xd3c>)
   1ab74:	4629      	mov	r1, r5
   1ab76:	f003 f9ff 	bl	1df78 <datalogger_log_debug>
                                        if (wait_time < 10 )
   1ab7a:	2d09      	cmp	r5, #9
   1ab7c:	d863      	bhi.n	1ac46 <module_sps_tx+0xd0e>
                                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, waiting for 10 seconds instead\n");
   1ab7e:	483e      	ldr	r0, [pc, #248]	@ (1ac78 <module_sps_tx+0xd40>)
   1ab80:	f7f6 fa72 	bl	11068 <am_util_stdio_printf>
   1ab84:	483c      	ldr	r0, [pc, #240]	@ (1ac78 <module_sps_tx+0xd40>)
   1ab86:	f003 f9f7 	bl	1df78 <datalogger_log_debug>
                                            vTaskDelay(xDelay10000ms);
   1ab8a:	f242 7010 	movw	r0, #10000	@ 0x2710
   1ab8e:	f7f4 fc29 	bl	f3e4 <vTaskDelay>
   1ab92:	e72d      	b.n	1a9f0 <module_sps_tx+0xab8>
   1ab94:	f10d 0536 	add.w	r5, sp, #54	@ 0x36
   1ab98:	2302      	movs	r3, #2
   1ab9a:	fb13 5307 	smlabb	r3, r3, r7, r5
                                        ARTEMIS_DEBUG_PRINTF("%u ", buf[i]);
   1ab9e:	4f33      	ldr	r7, [pc, #204]	@ (1ac6c <module_sps_tx+0xd34>)
   1aba0:	9306      	str	r3, [sp, #24]
   1aba2:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   1aba6:	4638      	mov	r0, r7
   1aba8:	f7f6 fa5e 	bl	11068 <am_util_stdio_printf>
   1abac:	8829      	ldrh	r1, [r5, #0]
   1abae:	4638      	mov	r0, r7
   1abb0:	f003 f9e2 	bl	1df78 <datalogger_log_debug>
                                    for (uint8_t i=0; i<len; i++)
   1abb4:	9b06      	ldr	r3, [sp, #24]
   1abb6:	429d      	cmp	r5, r3
   1abb8:	d1f3      	bne.n	1aba2 <module_sps_tx+0xc6a>
                                    ARTEMIS_DEBUG_PRINTF("\n");
   1abba:	482d      	ldr	r0, [pc, #180]	@ (1ac70 <module_sps_tx+0xd38>)
   1abbc:	f7f6 fa54 	bl	11068 <am_util_stdio_printf>
   1abc0:	482b      	ldr	r0, [pc, #172]	@ (1ac70 <module_sps_tx+0xd38>)
   1abc2:	f003 f9d9 	bl	1df78 <datalogger_log_debug>
                                    if (buf[0] == 0)
   1abc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
   1abca:	bb4b      	cbnz	r3, 1ac20 <module_sps_tx+0xce8>
                                        wait_time = buf[1];
   1abcc:	f8bd 503a 	ldrh.w	r5, [sp, #58]	@ 0x3a
                                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, traffic management time is valid, %u seconds\n", wait_time);
   1abd0:	482a      	ldr	r0, [pc, #168]	@ (1ac7c <module_sps_tx+0xd44>)
   1abd2:	4629      	mov	r1, r5
   1abd4:	f7f6 fa48 	bl	11068 <am_util_stdio_printf>
   1abd8:	4828      	ldr	r0, [pc, #160]	@ (1ac7c <module_sps_tx+0xd44>)
   1abda:	4629      	mov	r1, r5
   1abdc:	f003 f9cc 	bl	1df78 <datalogger_log_debug>
                                        if (wait_time < 10 )
   1abe0:	2d09      	cmp	r5, #9
   1abe2:	d837      	bhi.n	1ac54 <module_sps_tx+0xd1c>
                                            ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, waiting for 10 seconds instead\n");
   1abe4:	4826      	ldr	r0, [pc, #152]	@ (1ac80 <module_sps_tx+0xd48>)
   1abe6:	f7f6 fa3f 	bl	11068 <am_util_stdio_printf>
   1abea:	4825      	ldr	r0, [pc, #148]	@ (1ac80 <module_sps_tx+0xd48>)
   1abec:	f003 f9c4 	bl	1df78 <datalogger_log_debug>
                                            vTaskDelay(xDelay10000ms);
   1abf0:	f242 7010 	movw	r0, #10000	@ 0x2710
   1abf4:	f7f4 fbf6 	bl	f3e4 <vTaskDelay>
   1abf8:	e72d      	b.n	1aa56 <module_sps_tx+0xb1e>
                                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, traffic management time is not valid\n");
   1abfa:	4822      	ldr	r0, [pc, #136]	@ (1ac84 <module_sps_tx+0xd4c>)
   1abfc:	f7f6 fa34 	bl	11068 <am_util_stdio_printf>
   1ac00:	4820      	ldr	r0, [pc, #128]	@ (1ac84 <module_sps_tx+0xd4c>)
   1ac02:	f003 f9b9 	bl	1df78 <datalogger_log_debug>
                                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Profile, wait for %u seconds\n", wait_time);
   1ac06:	210a      	movs	r1, #10
   1ac08:	481f      	ldr	r0, [pc, #124]	@ (1ac88 <module_sps_tx+0xd50>)
   1ac0a:	f7f6 fa2d 	bl	11068 <am_util_stdio_printf>
   1ac0e:	481e      	ldr	r0, [pc, #120]	@ (1ac88 <module_sps_tx+0xd50>)
   1ac10:	210a      	movs	r1, #10
   1ac12:	f003 f9b1 	bl	1df78 <datalogger_log_debug>
                                        vTaskDelay(xDelay1000ms * wait_time);
   1ac16:	f242 7010 	movw	r0, #10000	@ 0x2710
   1ac1a:	f7f4 fbe3 	bl	f3e4 <vTaskDelay>
   1ac1e:	e6e7      	b.n	1a9f0 <module_sps_tx+0xab8>
                                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, traffic management time is not valid\n");
   1ac20:	481a      	ldr	r0, [pc, #104]	@ (1ac8c <module_sps_tx+0xd54>)
   1ac22:	f7f6 fa21 	bl	11068 <am_util_stdio_printf>
   1ac26:	4819      	ldr	r0, [pc, #100]	@ (1ac8c <module_sps_tx+0xd54>)
   1ac28:	f003 f9a6 	bl	1df78 <datalogger_log_debug>
                                        ARTEMIS_DEBUG_PRINTF("SPS :: tx, Park, wait for %u seconds\n", wait_time);
   1ac2c:	210a      	movs	r1, #10
   1ac2e:	4818      	ldr	r0, [pc, #96]	@ (1ac90 <module_sps_tx+0xd58>)
   1ac30:	f7f6 fa1a 	bl	11068 <am_util_stdio_printf>
   1ac34:	4816      	ldr	r0, [pc, #88]	@ (1ac90 <module_sps_tx+0xd58>)
   1ac36:	210a      	movs	r1, #10
   1ac38:	f003 f99e 	bl	1df78 <datalogger_log_debug>
                                        vTaskDelay(xDelay1000ms * wait_time);
   1ac3c:	f242 7010 	movw	r0, #10000	@ 0x2710
   1ac40:	f7f4 fbd0 	bl	f3e4 <vTaskDelay>
   1ac44:	e707      	b.n	1aa56 <module_sps_tx+0xb1e>
                                            vTaskDelay(xDelay1000ms * wait_time);
   1ac46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1ac4a:	fb05 f000 	mul.w	r0, r5, r0
   1ac4e:	f7f4 fbc9 	bl	f3e4 <vTaskDelay>
   1ac52:	e6cd      	b.n	1a9f0 <module_sps_tx+0xab8>
                                            vTaskDelay(xDelay1000ms * wait_time);
   1ac54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1ac58:	fb05 f000 	mul.w	r0, r5, r0
   1ac5c:	f7f4 fbc2 	bl	f3e4 <vTaskDelay>
   1ac60:	e6f9      	b.n	1aa56 <module_sps_tx+0xb1e>
   1ac62:	bf00      	nop
   1ac64:	0002f1e4 	.word	0x0002f1e4
   1ac68:	0002ebc8 	.word	0x0002ebc8
   1ac6c:	0002a9fc 	.word	0x0002a9fc
   1ac70:	000305a0 	.word	0x000305a0
   1ac74:	0002f090 	.word	0x0002f090
   1ac78:	0002f0d4 	.word	0x0002f0d4
   1ac7c:	0002ea84 	.word	0x0002ea84
   1ac80:	0002eac4 	.word	0x0002eac4
   1ac84:	0002f108 	.word	0x0002f108
   1ac88:	0002f144 	.word	0x0002f144
   1ac8c:	0002eaf8 	.word	0x0002eaf8
   1ac90:	0002eb30 	.word	0x0002eb30

0001ac94 <STATE_initialize>:
{
   1ac94:	b510      	push	{r4, lr}
   1ac96:	b082      	sub	sp, #8
   1ac98:	4604      	mov	r4, r0
    sensors_check = SENS_initialize();
   1ac9a:	f7fa fc6f 	bl	1557c <SENS_initialize>
   1ac9e:	4b10      	ldr	r3, [pc, #64]	@ (1ace0 <STATE_initialize+0x4c>)
    gEventQueue = xQueueCreate(3, sizeof(Event_e));
   1aca0:	2200      	movs	r2, #0
    sensors_check = SENS_initialize();
   1aca2:	7018      	strb	r0, [r3, #0]
    gEventQueue = xQueueCreate(3, sizeof(Event_e));
   1aca4:	2101      	movs	r1, #1
   1aca6:	2003      	movs	r0, #3
   1aca8:	f7f2 ff92 	bl	dbd0 <xQueueGenericCreate>
   1acac:	4b0d      	ldr	r3, [pc, #52]	@ (1ace4 <STATE_initialize+0x50>)
    switch(mode)
   1acae:	2c02      	cmp	r4, #2
    gEventQueue = xQueueCreate(3, sizeof(Event_e));
   1acb0:	6018      	str	r0, [r3, #0]
    switch(mode)
   1acb2:	d001      	beq.n	1acb8 <STATE_initialize+0x24>
}
   1acb4:	b002      	add	sp, #8
   1acb6:	bd10      	pop	{r4, pc}
            DATA_setbuffer(&park, pPark, park_pressure, park_temp, DATA_PARK_SAMPLES_MAX);
   1acb8:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
   1acbc:	9400      	str	r4, [sp, #0]
   1acbe:	4b0a      	ldr	r3, [pc, #40]	@ (1ace8 <STATE_initialize+0x54>)
   1acc0:	4a0a      	ldr	r2, [pc, #40]	@ (1acec <STATE_initialize+0x58>)
   1acc2:	490b      	ldr	r1, [pc, #44]	@ (1acf0 <STATE_initialize+0x5c>)
   1acc4:	480b      	ldr	r0, [pc, #44]	@ (1acf4 <STATE_initialize+0x60>)
            DATA_setbuffer(&prof, pProf, prof_pressure, prof_temp, DATA_PROFILE_SAMPLES_MAX);
   1acc6:	f645 14d8 	movw	r4, #23000	@ 0x59d8
            DATA_setbuffer(&park, pPark, park_pressure, park_temp, DATA_PARK_SAMPLES_MAX);
   1acca:	f7f9 fd87 	bl	147dc <DATA_setbuffer>
            DATA_setbuffer(&prof, pProf, prof_pressure, prof_temp, DATA_PROFILE_SAMPLES_MAX);
   1acce:	4b0a      	ldr	r3, [pc, #40]	@ (1acf8 <STATE_initialize+0x64>)
   1acd0:	4a0a      	ldr	r2, [pc, #40]	@ (1acfc <STATE_initialize+0x68>)
   1acd2:	490b      	ldr	r1, [pc, #44]	@ (1ad00 <STATE_initialize+0x6c>)
   1acd4:	480b      	ldr	r0, [pc, #44]	@ (1ad04 <STATE_initialize+0x70>)
   1acd6:	9400      	str	r4, [sp, #0]
   1acd8:	f7f9 fd80 	bl	147dc <DATA_setbuffer>
}
   1acdc:	b002      	add	sp, #8
   1acde:	bd10      	pop	{r4, pc}
   1ace0:	1000b9e4 	.word	0x1000b9e4
   1ace4:	1000bc9c 	.word	0x1000bc9c
   1ace8:	10041084 	.word	0x10041084
   1acec:	10039384 	.word	0x10039384
   1acf0:	10048d84 	.word	0x10048d84
   1acf4:	1000bcd4 	.word	0x1000bcd4
   1acf8:	10022454 	.word	0x10022454
   1acfc:	1000bcf4 	.word	0x1000bcf4
   1ad00:	10038bb4 	.word	0x10038bb4
   1ad04:	1000bcb4 	.word	0x1000bcb4

0001ad08 <STATE_Popup>:
{
   1ad08:	b580      	push	{r7, lr}
   1ad0a:	4e47      	ldr	r6, [pc, #284]	@ (1ae28 <STATE_Popup+0x120>)
   1ad0c:	4f47      	ldr	r7, [pc, #284]	@ (1ae2c <STATE_Popup+0x124>)
        ARTEMIS_DEBUG_PRINTF("PUS :: Popup global event wait\n");
   1ad0e:	4d48      	ldr	r5, [pc, #288]	@ (1ae30 <STATE_Popup+0x128>)
        ARTEMIS_DEBUG_PRINTF("PUS :: Popup global event received\n");
   1ad10:	4c48      	ldr	r4, [pc, #288]	@ (1ae34 <STATE_Popup+0x12c>)
{
   1ad12:	b084      	sub	sp, #16
        ARTEMIS_DEBUG_PRINTF("PUS :: Popup global event wait\n");
   1ad14:	4628      	mov	r0, r5
   1ad16:	f7f6 f9a7 	bl	11068 <am_util_stdio_printf>
   1ad1a:	4628      	mov	r0, r5
   1ad1c:	f003 f92c 	bl	1df78 <datalogger_log_debug>
}

static void ReceiveEvent(QueueHandle_t eventQueue, Event_e *event)
{
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1ad20:	f04f 32ff 	mov.w	r2, #4294967295
   1ad24:	4631      	mov	r1, r6
   1ad26:	6838      	ldr	r0, [r7, #0]
   1ad28:	f7f3 f9ea 	bl	e100 <xQueueReceive>
        ARTEMIS_DEBUG_PRINTF("PUS :: Popup global event received\n");
   1ad2c:	4620      	mov	r0, r4
   1ad2e:	f7f6 f99b 	bl	11068 <am_util_stdio_printf>
   1ad32:	4620      	mov	r0, r4
   1ad34:	f003 f920 	bl	1df78 <datalogger_log_debug>
        if (gEvent == MODE_POPUP)
   1ad38:	7833      	ldrb	r3, [r6, #0]
   1ad3a:	2b02      	cmp	r3, #2
   1ad3c:	d1ea      	bne.n	1ad14 <STATE_Popup+0xc>
    pusEventQueue = xQueueCreate(1, sizeof(Event_e));
   1ad3e:	2101      	movs	r1, #1
   1ad40:	2200      	movs	r2, #0
   1ad42:	4608      	mov	r0, r1
   1ad44:	f7f2 ff44 	bl	dbd0 <xQueueGenericCreate>
   1ad48:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 1ae54 <STATE_Popup+0x14c>
   1ad4c:	4e3a      	ldr	r6, [pc, #232]	@ (1ae38 <STATE_Popup+0x130>)
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_idle,
   1ad4e:	f8df a108 	ldr.w	sl, [pc, #264]	@ 1ae58 <STATE_Popup+0x150>
   1ad52:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 1ae5c <STATE_Popup+0x154>
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_surface_float,
   1ad56:	4f39      	ldr	r7, [pc, #228]	@ (1ae3c <STATE_Popup+0x134>)
    pusEventQueue = xQueueCreate(1, sizeof(Event_e));
   1ad58:	f8c8 0000 	str.w	r0, [r8]
        switch(system.popup.state)
   1ad5c:	79b4      	ldrb	r4, [r6, #6]
   1ad5e:	b344      	cbz	r4, 1adb2 <STATE_Popup+0xaa>
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_surface_float,
   1ad60:	2500      	movs	r5, #0
        switch(system.popup.state)
   1ad62:	2c01      	cmp	r4, #1
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_surface_float,
   1ad64:	4836      	ldr	r0, [pc, #216]	@ (1ae40 <STATE_Popup+0x138>)
   1ad66:	f04f 0c02 	mov.w	ip, #2
   1ad6a:	462b      	mov	r3, r5
   1ad6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
   1ad70:	4639      	mov	r1, r7
        switch(system.popup.state)
   1ad72:	d10d      	bne.n	1ad90 <STATE_Popup+0x88>
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_surface_float,
   1ad74:	e9cd c500 	strd	ip, r5, [sp]
   1ad78:	f7f3 fe2a 	bl	e9d0 <xTaskCreate>
   1ad7c:	2801      	cmp	r0, #1
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1ad7e:	f04f 32ff 	mov.w	r2, #4294967295
   1ad82:	f10d 010f 	add.w	r1, sp, #15
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_surface_float,
   1ad86:	d13f      	bne.n	1ae08 <STATE_Popup+0x100>
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1ad88:	f8d8 0000 	ldr.w	r0, [r8]
   1ad8c:	f7f3 f9b8 	bl	e100 <xQueueReceive>
        if(pusEvent == MODE_DONE)
   1ad90:	f89d 300f 	ldrb.w	r3, [sp, #15]
            ARTEMIS_DEBUG_PRINTF("PUS :: Popup mode, ERROR: something went wrong\n");
   1ad94:	482b      	ldr	r0, [pc, #172]	@ (1ae44 <STATE_Popup+0x13c>)
        if(pusEvent == MODE_DONE)
   1ad96:	2b04      	cmp	r3, #4
   1ad98:	d029      	beq.n	1adee <STATE_Popup+0xe6>
            ARTEMIS_DEBUG_PRINTF("PUS :: Popup mode, ERROR: something went wrong\n");
   1ad9a:	f7f6 f965 	bl	11068 <am_util_stdio_printf>
   1ad9e:	4829      	ldr	r0, [pc, #164]	@ (1ae44 <STATE_Popup+0x13c>)
   1ada0:	f003 f8ea 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(portMAX_DELAY);
   1ada4:	f04f 30ff 	mov.w	r0, #4294967295
   1ada8:	f7f4 fb1c 	bl	f3e4 <vTaskDelay>
        switch(system.popup.state)
   1adac:	79b4      	ldrb	r4, [r6, #6]
   1adae:	2c00      	cmp	r4, #0
   1adb0:	d1d6      	bne.n	1ad60 <STATE_Popup+0x58>
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_idle,
   1adb2:	2302      	movs	r3, #2
   1adb4:	e9cd 3400 	strd	r3, r4, [sp]
   1adb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
   1adbc:	4651      	mov	r1, sl
   1adbe:	4623      	mov	r3, r4
   1adc0:	4648      	mov	r0, r9
   1adc2:	f7f3 fe05 	bl	e9d0 <xTaskCreate>
   1adc6:	2801      	cmp	r0, #1
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1adc8:	f04f 32ff 	mov.w	r2, #4294967295
   1adcc:	f10d 010f 	add.w	r1, sp, #15
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_idle,
   1add0:	d0da      	beq.n	1ad88 <STATE_Popup+0x80>
   1add2:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1add6:	f383 8811 	msr	BASEPRI, r3
   1adda:	f3bf 8f6f 	isb	sy
   1adde:	f3bf 8f4f 	dsb	sy
   1ade2:	4919      	ldr	r1, [pc, #100]	@ (1ae48 <STATE_Popup+0x140>)
   1ade4:	4819      	ldr	r0, [pc, #100]	@ (1ae4c <STATE_Popup+0x144>)
   1ade6:	22fa      	movs	r2, #250	@ 0xfa
   1ade8:	f7f6 f93e 	bl	11068 <am_util_stdio_printf>
   1adec:	e7fe      	b.n	1adec <STATE_Popup+0xe4>
            ARTEMIS_DEBUG_PRINTF("PUS :: Popup Surface done, going to Idle\n");
   1adee:	4818      	ldr	r0, [pc, #96]	@ (1ae50 <STATE_Popup+0x148>)
   1adf0:	f7f6 f93a 	bl	11068 <am_util_stdio_printf>
   1adf4:	4816      	ldr	r0, [pc, #88]	@ (1ae50 <STATE_Popup+0x148>)
   1adf6:	f003 f8bf 	bl	1df78 <datalogger_log_debug>
            system.popup.state = PUS_Idle;
   1adfa:	2300      	movs	r3, #0
            vTaskDelay(xDelay2000ms);
   1adfc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
            system.popup.state = PUS_Idle;
   1ae00:	71b3      	strb	r3, [r6, #6]
            vTaskDelay(xDelay2000ms);
   1ae02:	f7f4 faef 	bl	f3e4 <vTaskDelay>
   1ae06:	e7a9      	b.n	1ad5c <STATE_Popup+0x54>
   1ae08:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1ae0c:	f383 8811 	msr	BASEPRI, r3
   1ae10:	f3bf 8f6f 	isb	sy
   1ae14:	f3bf 8f4f 	dsb	sy
                configASSERT(xTaskCreate((TaskFunction_t) module_pus_surface_float,
   1ae18:	490b      	ldr	r1, [pc, #44]	@ (1ae48 <STATE_Popup+0x140>)
   1ae1a:	480c      	ldr	r0, [pc, #48]	@ (1ae4c <STATE_Popup+0x144>)
   1ae1c:	f240 1201 	movw	r2, #257	@ 0x101
   1ae20:	f7f6 f922 	bl	11068 <am_util_stdio_printf>
   1ae24:	e7fe      	b.n	1ae24 <STATE_Popup+0x11c>
   1ae26:	bf00      	nop
   1ae28:	1000bca0 	.word	0x1000bca0
   1ae2c:	1000bc9c 	.word	0x1000bc9c
   1ae30:	0002f2c8 	.word	0x0002f2c8
   1ae34:	0002f2e8 	.word	0x0002f2e8
   1ae38:	1000238c 	.word	0x1000238c
   1ae3c:	0002f334 	.word	0x0002f334
   1ae40:	00015d09 	.word	0x00015d09
   1ae44:	0002f374 	.word	0x0002f374
   1ae48:	0002f318 	.word	0x0002f318
   1ae4c:	0002a268 	.word	0x0002a268
   1ae50:	0002f348 	.word	0x0002f348
   1ae54:	1000bc90 	.word	0x1000bc90
   1ae58:	0002f30c 	.word	0x0002f30c
   1ae5c:	00015c85 	.word	0x00015c85

0001ae60 <STATE_Predeploy>:
{
   1ae60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    pdsEventQueue = xQueueCreate(1, sizeof(Event_e));
   1ae64:	2101      	movs	r1, #1
{
   1ae66:	b085      	sub	sp, #20
    pdsEventQueue = xQueueCreate(1, sizeof(Event_e));
   1ae68:	2200      	movs	r2, #0
   1ae6a:	4608      	mov	r0, r1
   1ae6c:	f7f2 feb0 	bl	dbd0 <xQueueGenericCreate>
   1ae70:	4d3f      	ldr	r5, [pc, #252]	@ (1af70 <STATE_Predeploy+0x110>)
   1ae72:	4c40      	ldr	r4, [pc, #256]	@ (1af74 <STATE_Predeploy+0x114>)
   1ae74:	f8df a110 	ldr.w	sl, [pc, #272]	@ 1af88 <STATE_Predeploy+0x128>
   1ae78:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 1af98 <STATE_Predeploy+0x138>
                configASSERT(xTaskCreate((TaskFunction_t) module_pds_idle,
   1ae7c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 1af9c <STATE_Predeploy+0x13c>
   1ae80:	4f3d      	ldr	r7, [pc, #244]	@ (1af78 <STATE_Predeploy+0x118>)
                configASSERT(xTaskCreate((TaskFunction_t) module_pds_systemcheck,
   1ae82:	4e3e      	ldr	r6, [pc, #248]	@ (1af7c <STATE_Predeploy+0x11c>)
    pdsEventQueue = xQueueCreate(1, sizeof(Event_e));
   1ae84:	6028      	str	r0, [r5, #0]
        switch(system.predeploy.state)
   1ae86:	7863      	ldrb	r3, [r4, #1]
   1ae88:	2b00      	cmp	r3, #0
   1ae8a:	d03b      	beq.n	1af04 <STATE_Predeploy+0xa4>
   1ae8c:	2b01      	cmp	r3, #1
   1ae8e:	d112      	bne.n	1aeb6 <STATE_Predeploy+0x56>
                configASSERT(xTaskCreate((TaskFunction_t) module_pds_systemcheck,
   1ae90:	2300      	movs	r3, #0
   1ae92:	2202      	movs	r2, #2
   1ae94:	e9cd 2300 	strd	r2, r3, [sp]
   1ae98:	4839      	ldr	r0, [pc, #228]	@ (1af80 <STATE_Predeploy+0x120>)
   1ae9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
   1ae9e:	4631      	mov	r1, r6
   1aea0:	f7f3 fd96 	bl	e9d0 <xTaskCreate>
   1aea4:	2801      	cmp	r0, #1
   1aea6:	d154      	bne.n	1af52 <STATE_Predeploy+0xf2>
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1aea8:	6828      	ldr	r0, [r5, #0]
   1aeaa:	f04f 32ff 	mov.w	r2, #4294967295
   1aeae:	f10d 010f 	add.w	r1, sp, #15
   1aeb2:	f7f3 f925 	bl	e100 <xQueueReceive>
        if (pdsEvent == MODE_PRE_DEPLOY)
   1aeb6:	f89d b00f 	ldrb.w	fp, [sp, #15]
   1aeba:	f1bb 0f00 	cmp.w	fp, #0
   1aebe:	d03b      	beq.n	1af38 <STATE_Predeploy+0xd8>
        else if (pdsEvent == MODE_PROFILE)
   1aec0:	f1bb 0f01 	cmp.w	fp, #1
   1aec4:	d1df      	bne.n	1ae86 <STATE_Predeploy+0x26>
            ARTEMIS_DEBUG_PRINTF("PDS :: Switching to Profile Mode (SPS)\n");
   1aec6:	482f      	ldr	r0, [pc, #188]	@ (1af84 <STATE_Predeploy+0x124>)
   1aec8:	f7f6 f8ce 	bl	11068 <am_util_stdio_printf>
   1aecc:	482d      	ldr	r0, [pc, #180]	@ (1af84 <STATE_Predeploy+0x124>)
   1aece:	f003 f853 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(xDelay1000ms);
   1aed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1aed6:	f7f4 fa85 	bl	f3e4 <vTaskDelay>
            gEvent = pdsEvent;
   1aeda:	f89d 200f 	ldrb.w	r2, [sp, #15]
    xQueueSend(eventQueue, event, portMAX_DELAY);
   1aede:	492a      	ldr	r1, [pc, #168]	@ (1af88 <STATE_Predeploy+0x128>)
            gEvent = pdsEvent;
   1aee0:	f88a 2000 	strb.w	r2, [sl]
    xQueueSend(eventQueue, event, portMAX_DELAY);
   1aee4:	2300      	movs	r3, #0
   1aee6:	f04f 32ff 	mov.w	r2, #4294967295
   1aeea:	f8d9 0000 	ldr.w	r0, [r9]
   1aeee:	f7f2 feb9 	bl	dc64 <xQueueGenericSend>
            vQueueDelete(pdsEventQueue);
   1aef2:	6828      	ldr	r0, [r5, #0]
   1aef4:	f7f3 fc58 	bl	e7a8 <vQueueDelete>
            vTaskDelete(NULL);
   1aef8:	2000      	movs	r0, #0
   1aefa:	f7f3 fe5f 	bl	ebbc <vTaskDelete>
        switch(system.predeploy.state)
   1aefe:	7863      	ldrb	r3, [r4, #1]
   1af00:	2b00      	cmp	r3, #0
   1af02:	d1c3      	bne.n	1ae8c <STATE_Predeploy+0x2c>
                configASSERT(xTaskCreate((TaskFunction_t) module_pds_idle,
   1af04:	2202      	movs	r2, #2
   1af06:	e9cd 2300 	strd	r2, r3, [sp]
   1af0a:	4641      	mov	r1, r8
   1af0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
   1af10:	4638      	mov	r0, r7
   1af12:	f7f3 fd5d 	bl	e9d0 <xTaskCreate>
   1af16:	2801      	cmp	r0, #1
   1af18:	d0c6      	beq.n	1aea8 <STATE_Predeploy+0x48>
   1af1a:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1af1e:	f383 8811 	msr	BASEPRI, r3
   1af22:	f3bf 8f6f 	isb	sy
   1af26:	f3bf 8f4f 	dsb	sy
   1af2a:	4918      	ldr	r1, [pc, #96]	@ (1af8c <STATE_Predeploy+0x12c>)
   1af2c:	4818      	ldr	r0, [pc, #96]	@ (1af90 <STATE_Predeploy+0x130>)
   1af2e:	f240 2226 	movw	r2, #550	@ 0x226
   1af32:	f7f6 f899 	bl	11068 <am_util_stdio_printf>
   1af36:	e7fe      	b.n	1af36 <STATE_Predeploy+0xd6>
            ARTEMIS_DEBUG_PRINTF("PDS :: Transitionng to Idle State\n");
   1af38:	4816      	ldr	r0, [pc, #88]	@ (1af94 <STATE_Predeploy+0x134>)
   1af3a:	f7f6 f895 	bl	11068 <am_util_stdio_printf>
   1af3e:	4815      	ldr	r0, [pc, #84]	@ (1af94 <STATE_Predeploy+0x134>)
   1af40:	f003 f81a 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(xDelay1000ms);
   1af44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
            system.predeploy.state = PDS_Idle;
   1af48:	f884 b001 	strb.w	fp, [r4, #1]
            vTaskDelay(xDelay1000ms);
   1af4c:	f7f4 fa4a 	bl	f3e4 <vTaskDelay>
   1af50:	e799      	b.n	1ae86 <STATE_Predeploy+0x26>
   1af52:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1af56:	f383 8811 	msr	BASEPRI, r3
   1af5a:	f3bf 8f6f 	isb	sy
   1af5e:	f3bf 8f4f 	dsb	sy
                configASSERT(xTaskCreate((TaskFunction_t) module_pds_systemcheck,
   1af62:	490a      	ldr	r1, [pc, #40]	@ (1af8c <STATE_Predeploy+0x12c>)
   1af64:	480a      	ldr	r0, [pc, #40]	@ (1af90 <STATE_Predeploy+0x130>)
   1af66:	f240 222d 	movw	r2, #557	@ 0x22d
   1af6a:	f7f6 f87d 	bl	11068 <am_util_stdio_printf>
   1af6e:	e7fe      	b.n	1af6e <STATE_Predeploy+0x10e>
   1af70:	1000bc94 	.word	0x1000bc94
   1af74:	1000238c 	.word	0x1000238c
   1af78:	00016409 	.word	0x00016409
   1af7c:	0002f3b4 	.word	0x0002f3b4
   1af80:	0001676d 	.word	0x0001676d
   1af84:	0002f3f0 	.word	0x0002f3f0
   1af88:	1000bca0 	.word	0x1000bca0
   1af8c:	0002f318 	.word	0x0002f318
   1af90:	0002a268 	.word	0x0002a268
   1af94:	0002f3cc 	.word	0x0002f3cc
   1af98:	1000bc9c 	.word	0x1000bc9c
   1af9c:	0002f3a4 	.word	0x0002f3a4

0001afa0 <STATE_Profiler>:
{
   1afa0:	b580      	push	{r7, lr}
   1afa2:	4ea6      	ldr	r6, [pc, #664]	@ (1b23c <STATE_Profiler+0x29c>)
   1afa4:	4fa6      	ldr	r7, [pc, #664]	@ (1b240 <STATE_Profiler+0x2a0>)
        ARTEMIS_DEBUG_PRINTF("SPS :: Profile global event wait\n");
   1afa6:	4da7      	ldr	r5, [pc, #668]	@ (1b244 <STATE_Profiler+0x2a4>)
        ARTEMIS_DEBUG_PRINTF("SPS :: Profile global event received\n");
   1afa8:	4ca7      	ldr	r4, [pc, #668]	@ (1b248 <STATE_Profiler+0x2a8>)
{
   1afaa:	b084      	sub	sp, #16
        ARTEMIS_DEBUG_PRINTF("SPS :: Profile global event wait\n");
   1afac:	4628      	mov	r0, r5
   1afae:	f7f6 f85b 	bl	11068 <am_util_stdio_printf>
   1afb2:	4628      	mov	r0, r5
   1afb4:	f002 ffe0 	bl	1df78 <datalogger_log_debug>
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1afb8:	4631      	mov	r1, r6
   1afba:	f04f 32ff 	mov.w	r2, #4294967295
   1afbe:	6838      	ldr	r0, [r7, #0]
   1afc0:	f7f3 f89e 	bl	e100 <xQueueReceive>
        ARTEMIS_DEBUG_PRINTF("SPS :: Profile global event received\n");
   1afc4:	4620      	mov	r0, r4
   1afc6:	f7f6 f84f 	bl	11068 <am_util_stdio_printf>
   1afca:	4620      	mov	r0, r4
   1afcc:	f002 ffd4 	bl	1df78 <datalogger_log_debug>
        if (gEvent == MODE_PROFILE)
   1afd0:	7831      	ldrb	r1, [r6, #0]
   1afd2:	2901      	cmp	r1, #1
   1afd4:	d1ea      	bne.n	1afac <STATE_Profiler+0xc>
    spsEventQueue = xQueueCreate(2, sizeof(Event_e));
   1afd6:	2200      	movs	r2, #0
   1afd8:	2002      	movs	r0, #2
   1afda:	f7f2 fdf9 	bl	dbd0 <xQueueGenericCreate>
   1afde:	4d9b      	ldr	r5, [pc, #620]	@ (1b24c <STATE_Profiler+0x2ac>)
   1afe0:	4c9b      	ldr	r4, [pc, #620]	@ (1b250 <STATE_Profiler+0x2b0>)
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_tx,
   1afe2:	f8df a2b4 	ldr.w	sl, [pc, #692]	@ 1b298 <STATE_Profiler+0x2f8>
   1afe6:	f8df 92b4 	ldr.w	r9, [pc, #692]	@ 1b29c <STATE_Profiler+0x2fc>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_move_to_surface,
   1afea:	f8df 82b4 	ldr.w	r8, [pc, #692]	@ 1b2a0 <STATE_Profiler+0x300>
    spsEventQueue = xQueueCreate(2, sizeof(Event_e));
   1afee:	6028      	str	r0, [r5, #0]
        switch(system.profiler.state)
   1aff0:	78e3      	ldrb	r3, [r4, #3]
   1aff2:	2b06      	cmp	r3, #6
   1aff4:	d81c      	bhi.n	1b030 <STATE_Profiler+0x90>
   1aff6:	e8df f013 	tbh	[pc, r3, lsl #1]
   1affa:	00da      	.short	0x00da
   1affc:	00be00f6 	.word	0x00be00f6
   1b000:	008700a2 	.word	0x008700a2
   1b004:	0007006c 	.word	0x0007006c
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_tx,
   1b008:	2202      	movs	r2, #2
   1b00a:	2300      	movs	r3, #0
   1b00c:	e9cd 2300 	strd	r2, r3, [sp]
   1b010:	4651      	mov	r1, sl
   1b012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   1b016:	4648      	mov	r0, r9
   1b018:	f7f3 fcda 	bl	e9d0 <xTaskCreate>
   1b01c:	2801      	cmp	r0, #1
   1b01e:	f040 80fe 	bne.w	1b21e <STATE_Profiler+0x27e>
    xQueueReceive(eventQueue, event, portMAX_DELAY);
   1b022:	6828      	ldr	r0, [r5, #0]
   1b024:	f04f 32ff 	mov.w	r2, #4294967295
   1b028:	f10d 010f 	add.w	r1, sp, #15
   1b02c:	f7f3 f868 	bl	e100 <xQueueReceive>
        if(spsEvent == MODE_DONE)
   1b030:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b034:	3b02      	subs	r3, #2
   1b036:	2b03      	cmp	r3, #3
   1b038:	d8da      	bhi.n	1aff0 <STATE_Profiler+0x50>
   1b03a:	e8df f003 	tbb	[pc, r3]
   1b03e:	1d2a      	.short	0x1d2a
   1b040:	020f      	.short	0x020f
            ARTEMIS_DEBUG_PRINTF("\nSPS :: Switching to move_to_park State !! <<< Critical Depth Piston Position >>>\n\n");
   1b042:	4884      	ldr	r0, [pc, #528]	@ (1b254 <STATE_Profiler+0x2b4>)
   1b044:	f7f6 f810 	bl	11068 <am_util_stdio_printf>
   1b048:	4882      	ldr	r0, [pc, #520]	@ (1b254 <STATE_Profiler+0x2b4>)
   1b04a:	f002 ff95 	bl	1df78 <datalogger_log_debug>
            system.profiler.state = SPS_MoveToParkDepth_mode;
   1b04e:	2301      	movs	r3, #1
            vTaskDelay(xDelay2000ms);
   1b050:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
            system.profiler.state = SPS_MoveToParkDepth_mode;
   1b054:	70e3      	strb	r3, [r4, #3]
            vTaskDelay(xDelay2000ms);
   1b056:	f7f4 f9c5 	bl	f3e4 <vTaskDelay>
   1b05a:	e7c9      	b.n	1aff0 <STATE_Profiler+0x50>
            ARTEMIS_DEBUG_PRINTF("SPS :: Transitionng to next state\n");
   1b05c:	487e      	ldr	r0, [pc, #504]	@ (1b258 <STATE_Profiler+0x2b8>)
   1b05e:	f7f6 f803 	bl	11068 <am_util_stdio_printf>
   1b062:	487d      	ldr	r0, [pc, #500]	@ (1b258 <STATE_Profiler+0x2b8>)
   1b064:	f002 ff88 	bl	1df78 <datalogger_log_debug>
            system.profiler.state++;
   1b068:	78e3      	ldrb	r3, [r4, #3]
            vTaskDelay(xDelay2000ms);
   1b06a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
            system.profiler.state++;
   1b06e:	3301      	adds	r3, #1
   1b070:	70e3      	strb	r3, [r4, #3]
            vTaskDelay(xDelay2000ms);
   1b072:	f7f4 f9b7 	bl	f3e4 <vTaskDelay>
   1b076:	e7bb      	b.n	1aff0 <STATE_Profiler+0x50>
            ARTEMIS_DEBUG_PRINTF("SPS :: Profiling done, going to Idle\n");
   1b078:	4878      	ldr	r0, [pc, #480]	@ (1b25c <STATE_Profiler+0x2bc>)
   1b07a:	f7f5 fff5 	bl	11068 <am_util_stdio_printf>
   1b07e:	4877      	ldr	r0, [pc, #476]	@ (1b25c <STATE_Profiler+0x2bc>)
   1b080:	f002 ff7a 	bl	1df78 <datalogger_log_debug>
            system.profiler.state = SPS_Idle;
   1b084:	2300      	movs	r3, #0
            vTaskDelay(xDelay2000ms);
   1b086:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
            system.profiler.state = SPS_Idle;
   1b08a:	70e3      	strb	r3, [r4, #3]
            vTaskDelay(xDelay2000ms);
   1b08c:	f7f4 f9aa 	bl	f3e4 <vTaskDelay>
   1b090:	e7ae      	b.n	1aff0 <STATE_Profiler+0x50>
            ARTEMIS_DEBUG_PRINTF("SPS :: Switching to Popup Mode\n");
   1b092:	4873      	ldr	r0, [pc, #460]	@ (1b260 <STATE_Profiler+0x2c0>)
   1b094:	f7f5 ffe8 	bl	11068 <am_util_stdio_printf>
   1b098:	4871      	ldr	r0, [pc, #452]	@ (1b260 <STATE_Profiler+0x2c0>)
   1b09a:	f002 ff6d 	bl	1df78 <datalogger_log_debug>
            vTaskDelay(xDelay2000ms);
   1b09e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
   1b0a2:	f7f4 f99f 	bl	f3e4 <vTaskDelay>
            gEvent = spsEvent;
   1b0a6:	f89d c00f 	ldrb.w	ip, [sp, #15]
    xQueueSend(eventQueue, event, portMAX_DELAY);
   1b0aa:	4964      	ldr	r1, [pc, #400]	@ (1b23c <STATE_Profiler+0x29c>)
   1b0ac:	6838      	ldr	r0, [r7, #0]
            gEvent = spsEvent;
   1b0ae:	f886 c000 	strb.w	ip, [r6]
    xQueueSend(eventQueue, event, portMAX_DELAY);
   1b0b2:	2300      	movs	r3, #0
   1b0b4:	f04f 32ff 	mov.w	r2, #4294967295
   1b0b8:	f7f2 fdd4 	bl	dc64 <xQueueGenericSend>
            vQueueDelete(spsEventQueue);
   1b0bc:	6828      	ldr	r0, [r5, #0]
   1b0be:	f7f3 fb73 	bl	e7a8 <vQueueDelete>
            vTaskDelay(xDelay500ms);
   1b0c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1b0c6:	f7f4 f98d 	bl	f3e4 <vTaskDelay>
            vTaskDelete(NULL);
   1b0ca:	2000      	movs	r0, #0
   1b0cc:	f7f3 fd76 	bl	ebbc <vTaskDelete>
   1b0d0:	e78e      	b.n	1aff0 <STATE_Profiler+0x50>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_move_to_surface,
   1b0d2:	2202      	movs	r2, #2
   1b0d4:	2300      	movs	r3, #0
   1b0d6:	e9cd 2300 	strd	r2, r3, [sp]
   1b0da:	4862      	ldr	r0, [pc, #392]	@ (1b264 <STATE_Profiler+0x2c4>)
   1b0dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   1b0e0:	4641      	mov	r1, r8
   1b0e2:	f7f3 fc75 	bl	e9d0 <xTaskCreate>
   1b0e6:	2801      	cmp	r0, #1
   1b0e8:	d09b      	beq.n	1b022 <STATE_Profiler+0x82>
   1b0ea:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b0ee:	f383 8811 	msr	BASEPRI, r3
   1b0f2:	f3bf 8f6f 	isb	sy
   1b0f6:	f3bf 8f4f 	dsb	sy
   1b0fa:	495b      	ldr	r1, [pc, #364]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b0fc:	485b      	ldr	r0, [pc, #364]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b0fe:	f44f 725a 	mov.w	r2, #872	@ 0x368
   1b102:	f7f5 ffb1 	bl	11068 <am_util_stdio_printf>
   1b106:	e7fe      	b.n	1b106 <STATE_Profiler+0x166>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_profile,
   1b108:	2300      	movs	r3, #0
   1b10a:	2202      	movs	r2, #2
   1b10c:	e9cd 2300 	strd	r2, r3, [sp]
   1b110:	4957      	ldr	r1, [pc, #348]	@ (1b270 <STATE_Profiler+0x2d0>)
   1b112:	4858      	ldr	r0, [pc, #352]	@ (1b274 <STATE_Profiler+0x2d4>)
   1b114:	f44f 6283 	mov.w	r2, #1048	@ 0x418
   1b118:	f7f3 fc5a 	bl	e9d0 <xTaskCreate>
   1b11c:	2801      	cmp	r0, #1
   1b11e:	d080      	beq.n	1b022 <STATE_Profiler+0x82>
   1b120:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b124:	f383 8811 	msr	BASEPRI, r3
   1b128:	f3bf 8f6f 	isb	sy
   1b12c:	f3bf 8f4f 	dsb	sy
   1b130:	494d      	ldr	r1, [pc, #308]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b132:	484e      	ldr	r0, [pc, #312]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b134:	f240 3261 	movw	r2, #865	@ 0x361
   1b138:	f7f5 ff96 	bl	11068 <am_util_stdio_printf>
   1b13c:	e7fe      	b.n	1b13c <STATE_Profiler+0x19c>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_move_to_profile,
   1b13e:	2300      	movs	r3, #0
   1b140:	2202      	movs	r2, #2
   1b142:	e9cd 2300 	strd	r2, r3, [sp]
   1b146:	494c      	ldr	r1, [pc, #304]	@ (1b278 <STATE_Profiler+0x2d8>)
   1b148:	484c      	ldr	r0, [pc, #304]	@ (1b27c <STATE_Profiler+0x2dc>)
   1b14a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   1b14e:	f7f3 fc3f 	bl	e9d0 <xTaskCreate>
   1b152:	2801      	cmp	r0, #1
   1b154:	f43f af65 	beq.w	1b022 <STATE_Profiler+0x82>
   1b158:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b15c:	f383 8811 	msr	BASEPRI, r3
   1b160:	f3bf 8f6f 	isb	sy
   1b164:	f3bf 8f4f 	dsb	sy
   1b168:	493f      	ldr	r1, [pc, #252]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b16a:	4840      	ldr	r0, [pc, #256]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b16c:	f240 325a 	movw	r2, #858	@ 0x35a
   1b170:	f7f5 ff7a 	bl	11068 <am_util_stdio_printf>
   1b174:	e7fe      	b.n	1b174 <STATE_Profiler+0x1d4>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_park,
   1b176:	2300      	movs	r3, #0
   1b178:	2202      	movs	r2, #2
   1b17a:	e9cd 2300 	strd	r2, r3, [sp]
   1b17e:	4940      	ldr	r1, [pc, #256]	@ (1b280 <STATE_Profiler+0x2e0>)
   1b180:	4840      	ldr	r0, [pc, #256]	@ (1b284 <STATE_Profiler+0x2e4>)
   1b182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   1b186:	f7f3 fc23 	bl	e9d0 <xTaskCreate>
   1b18a:	2801      	cmp	r0, #1
   1b18c:	f43f af49 	beq.w	1b022 <STATE_Profiler+0x82>
   1b190:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b194:	f383 8811 	msr	BASEPRI, r3
   1b198:	f3bf 8f6f 	isb	sy
   1b19c:	f3bf 8f4f 	dsb	sy
   1b1a0:	4931      	ldr	r1, [pc, #196]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b1a2:	4832      	ldr	r0, [pc, #200]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b1a4:	f240 3253 	movw	r2, #851	@ 0x353
   1b1a8:	f7f5 ff5e 	bl	11068 <am_util_stdio_printf>
   1b1ac:	e7fe      	b.n	1b1ac <STATE_Profiler+0x20c>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_idle,
   1b1ae:	2300      	movs	r3, #0
   1b1b0:	2202      	movs	r2, #2
   1b1b2:	e9cd 2300 	strd	r2, r3, [sp]
   1b1b6:	4934      	ldr	r1, [pc, #208]	@ (1b288 <STATE_Profiler+0x2e8>)
   1b1b8:	4834      	ldr	r0, [pc, #208]	@ (1b28c <STATE_Profiler+0x2ec>)
   1b1ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
   1b1be:	f7f3 fc07 	bl	e9d0 <xTaskCreate>
   1b1c2:	2801      	cmp	r0, #1
   1b1c4:	f43f af2d 	beq.w	1b022 <STATE_Profiler+0x82>
   1b1c8:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b1cc:	f383 8811 	msr	BASEPRI, r3
   1b1d0:	f3bf 8f6f 	isb	sy
   1b1d4:	f3bf 8f4f 	dsb	sy
   1b1d8:	4923      	ldr	r1, [pc, #140]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b1da:	4824      	ldr	r0, [pc, #144]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b1dc:	f240 3245 	movw	r2, #837	@ 0x345
   1b1e0:	f7f5 ff42 	bl	11068 <am_util_stdio_printf>
   1b1e4:	e7fe      	b.n	1b1e4 <STATE_Profiler+0x244>
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_move_to_park,
   1b1e6:	2300      	movs	r3, #0
   1b1e8:	2202      	movs	r2, #2
   1b1ea:	e9cd 2300 	strd	r2, r3, [sp]
   1b1ee:	4928      	ldr	r1, [pc, #160]	@ (1b290 <STATE_Profiler+0x2f0>)
   1b1f0:	4828      	ldr	r0, [pc, #160]	@ (1b294 <STATE_Profiler+0x2f4>)
   1b1f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   1b1f6:	f7f3 fbeb 	bl	e9d0 <xTaskCreate>
   1b1fa:	2801      	cmp	r0, #1
   1b1fc:	f43f af11 	beq.w	1b022 <STATE_Profiler+0x82>
   1b200:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b204:	f383 8811 	msr	BASEPRI, r3
   1b208:	f3bf 8f6f 	isb	sy
   1b20c:	f3bf 8f4f 	dsb	sy
   1b210:	4915      	ldr	r1, [pc, #84]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b212:	4816      	ldr	r0, [pc, #88]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b214:	f44f 7253 	mov.w	r2, #844	@ 0x34c
   1b218:	f7f5 ff26 	bl	11068 <am_util_stdio_printf>
   1b21c:	e7fe      	b.n	1b21c <STATE_Profiler+0x27c>
   1b21e:	f04f 0380 	mov.w	r3, #128	@ 0x80
   1b222:	f383 8811 	msr	BASEPRI, r3
   1b226:	f3bf 8f6f 	isb	sy
   1b22a:	f3bf 8f4f 	dsb	sy
                configASSERT(xTaskCreate((TaskFunction_t) module_sps_tx,
   1b22e:	490e      	ldr	r1, [pc, #56]	@ (1b268 <STATE_Profiler+0x2c8>)
   1b230:	480e      	ldr	r0, [pc, #56]	@ (1b26c <STATE_Profiler+0x2cc>)
   1b232:	f240 326f 	movw	r2, #879	@ 0x36f
   1b236:	f7f5 ff17 	bl	11068 <am_util_stdio_printf>
   1b23a:	e7fe      	b.n	1b23a <STATE_Profiler+0x29a>
   1b23c:	1000bca0 	.word	0x1000bca0
   1b240:	1000bc9c 	.word	0x1000bc9c
   1b244:	0002f418 	.word	0x0002f418
   1b248:	0002f43c 	.word	0x0002f43c
   1b24c:	1000bc98 	.word	0x1000bc98
   1b250:	1000238c 	.word	0x1000238c
   1b254:	0002f538 	.word	0x0002f538
   1b258:	0002f4cc 	.word	0x0002f4cc
   1b25c:	0002f4f0 	.word	0x0002f4f0
   1b260:	0002f518 	.word	0x0002f518
   1b264:	00019b1d 	.word	0x00019b1d
   1b268:	0002f318 	.word	0x0002f318
   1b26c:	0002a268 	.word	0x0002a268
   1b270:	0002f4a4 	.word	0x0002f4a4
   1b274:	00018da1 	.word	0x00018da1
   1b278:	0002f490 	.word	0x0002f490
   1b27c:	00017591 	.word	0x00017591
   1b280:	0002f484 	.word	0x0002f484
   1b284:	00018081 	.word	0x00018081
   1b288:	0002f464 	.word	0x0002f464
   1b28c:	00016361 	.word	0x00016361
   1b290:	0002f470 	.word	0x0002f470
   1b294:	000169d9 	.word	0x000169d9
   1b298:	0002f4c4 	.word	0x0002f4c4
   1b29c:	00019f39 	.word	0x00019f39
   1b2a0:	0002f4b0 	.word	0x0002f4b0

0001b2a4 <artemis_debug_initialize>:
#include "artemis_debug.h"
#include "am_bsp.h"
#include "datalogger.h"

void artemis_debug_initialize(void)
{
   1b2a4:	b508      	push	{r3, lr}

#ifdef ARTEMIS_DEBUG
    // am_bsp_itm_printf_enable();
    am_bsp_uart_printf_enable();
   1b2a6:	f003 fd9b 	bl	1ede0 <am_bsp_uart_printf_enable>
    am_util_stdio_printf("UART ENABLED\n");
   1b2aa:	4812      	ldr	r0, [pc, #72]	@ (1b2f4 <artemis_debug_initialize+0x50>)
   1b2ac:	f7f5 fedc 	bl	11068 <am_util_stdio_printf>
#else
    //am_bsp_debug_printf_disable();
#endif

#if defined (DATALOG_DEBUG) && DATALOG_DEBUG
    am_util_stdio_printf("DATALOG_DEBUG is enabled\n");
   1b2b0:	4811      	ldr	r0, [pc, #68]	@ (1b2f8 <artemis_debug_initialize+0x54>)
   1b2b2:	f7f5 fed9 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("\n<<< !!! DATALOG_DEBUG is disbled !!! >>>\n");
    am_util_stdio_printf("<<< Please Note : it's not going to log to LCP_LOG_XXXX.txt files >>>\n");
#endif

    bool success = false;
    success = datalogger_init(4);
   1b2b6:	2004      	movs	r0, #4
   1b2b8:	f003 fc48 	bl	1eb4c <datalogger_init>
    if (success)
   1b2bc:	b190      	cbz	r0, 1b2e4 <artemis_debug_initialize+0x40>
    {
        datalogger_power_on();
   1b2be:	f003 fd21 	bl	1ed04 <datalogger_power_on>
        am_util_delay_ms(500);
   1b2c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1b2c6:	f7f5 f819 	bl	102fc <am_util_delay_ms>
#if defined (DATALOG_DEBUG) && DATALOG_DEBUG
        datalogger_log_debug_init();
   1b2ca:	f002 fd49 	bl	1dd60 <datalogger_log_debug_init>
        /* reading from the file first time and fill up the buffer */
        ARTEMIS_DEBUG_PRINTF("\n<<< TEST_PROFILE_1 Profile selected >>>\n\n");
        datalogger_read_test_profile(false);
#elif defined(__TEST_PROFILE_2__)
        /* reading from the file first time and fill up the buffer */
        ARTEMIS_DEBUG_PRINTF("\n<<< TEST_PROFILE_2 Profile selected >>>\n\n");
   1b2ce:	480b      	ldr	r0, [pc, #44]	@ (1b2fc <artemis_debug_initialize+0x58>)
   1b2d0:	f7f5 feca 	bl	11068 <am_util_stdio_printf>
   1b2d4:	4809      	ldr	r0, [pc, #36]	@ (1b2fc <artemis_debug_initialize+0x58>)
   1b2d6:	f002 fe4f 	bl	1df78 <datalogger_log_debug>
    else
    {
        am_util_stdio_printf("\nDATALOGGER :: ERROR : << SD Card is missing >>");
        am_util_stdio_printf("\nDATALOGGER :: ERROR : << LCP Log File was not created >>\n\n");
    }
}
   1b2da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        datalogger_read_test_profile(false);
   1b2de:	2000      	movs	r0, #0
   1b2e0:	f003 bb2e 	b.w	1e940 <datalogger_read_test_profile>
        am_util_stdio_printf("\nDATALOGGER :: ERROR : << SD Card is missing >>");
   1b2e4:	4806      	ldr	r0, [pc, #24]	@ (1b300 <artemis_debug_initialize+0x5c>)
   1b2e6:	f7f5 febf 	bl	11068 <am_util_stdio_printf>
}
   1b2ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        am_util_stdio_printf("\nDATALOGGER :: ERROR : << LCP Log File was not created >>\n\n");
   1b2ee:	4805      	ldr	r0, [pc, #20]	@ (1b304 <artemis_debug_initialize+0x60>)
   1b2f0:	f7f5 beba 	b.w	11068 <am_util_stdio_printf>
   1b2f4:	0002f58c 	.word	0x0002f58c
   1b2f8:	0002f59c 	.word	0x0002f59c
   1b2fc:	0002f5b8 	.word	0x0002f5b8
   1b300:	0002f5e4 	.word	0x0002f5e4
   1b304:	0002f614 	.word	0x0002f614

0001b308 <artemis_debug_halerror>:

	while(1);
}

void artemis_debug_halerror(const char *hfunc, uint32_t error, const char *func, const char *file, uint32_t line)
{
   1b308:	b580      	push	{r7, lr}
   1b30a:	4607      	mov	r7, r0
	ARTEMIS_DEBUG_PRINTF("AM HAL ERROR: {\n");
   1b30c:	481c      	ldr	r0, [pc, #112]	@ (1b380 <artemis_debug_halerror+0x78>)
{
   1b30e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1b312:	4615      	mov	r5, r2
   1b314:	461c      	mov	r4, r3
   1b316:	460e      	mov	r6, r1
	ARTEMIS_DEBUG_PRINTF("AM HAL ERROR: {\n");
   1b318:	f7f5 fea6 	bl	11068 <am_util_stdio_printf>
   1b31c:	4818      	ldr	r0, [pc, #96]	@ (1b380 <artemis_debug_halerror+0x78>)
   1b31e:	f002 fe2b 	bl	1df78 <datalogger_log_debug>
	ARTEMIS_DEBUG_PRINTF("\thfunc:\t%s\n", hfunc);
   1b322:	4639      	mov	r1, r7
   1b324:	4817      	ldr	r0, [pc, #92]	@ (1b384 <artemis_debug_halerror+0x7c>)
   1b326:	f7f5 fe9f 	bl	11068 <am_util_stdio_printf>
   1b32a:	4816      	ldr	r0, [pc, #88]	@ (1b384 <artemis_debug_halerror+0x7c>)
   1b32c:	4639      	mov	r1, r7
   1b32e:	f002 fe23 	bl	1df78 <datalogger_log_debug>
	ARTEMIS_DEBUG_PRINTF("\terror:\t%u\n", error);
   1b332:	4631      	mov	r1, r6
   1b334:	4814      	ldr	r0, [pc, #80]	@ (1b388 <artemis_debug_halerror+0x80>)
   1b336:	f7f5 fe97 	bl	11068 <am_util_stdio_printf>
   1b33a:	4813      	ldr	r0, [pc, #76]	@ (1b388 <artemis_debug_halerror+0x80>)
   1b33c:	4631      	mov	r1, r6
   1b33e:	f002 fe1b 	bl	1df78 <datalogger_log_debug>
	ARTEMIS_DEBUG_PRINTF("\tfunc:\t%s\n", func);
   1b342:	4629      	mov	r1, r5
   1b344:	4811      	ldr	r0, [pc, #68]	@ (1b38c <artemis_debug_halerror+0x84>)
   1b346:	f7f5 fe8f 	bl	11068 <am_util_stdio_printf>
   1b34a:	4810      	ldr	r0, [pc, #64]	@ (1b38c <artemis_debug_halerror+0x84>)
   1b34c:	4629      	mov	r1, r5
   1b34e:	f002 fe13 	bl	1df78 <datalogger_log_debug>
	ARTEMIS_DEBUG_PRINTF("\tfile:\t%s\n", file);
   1b352:	4621      	mov	r1, r4
   1b354:	480e      	ldr	r0, [pc, #56]	@ (1b390 <artemis_debug_halerror+0x88>)
   1b356:	f7f5 fe87 	bl	11068 <am_util_stdio_printf>
   1b35a:	480d      	ldr	r0, [pc, #52]	@ (1b390 <artemis_debug_halerror+0x88>)
   1b35c:	4621      	mov	r1, r4
   1b35e:	f002 fe0b 	bl	1df78 <datalogger_log_debug>
	ARTEMIS_DEBUG_PRINTF("\tline:\t%u\n", line);
   1b362:	4641      	mov	r1, r8
   1b364:	480b      	ldr	r0, [pc, #44]	@ (1b394 <artemis_debug_halerror+0x8c>)
   1b366:	f7f5 fe7f 	bl	11068 <am_util_stdio_printf>
   1b36a:	480a      	ldr	r0, [pc, #40]	@ (1b394 <artemis_debug_halerror+0x8c>)
   1b36c:	4641      	mov	r1, r8
   1b36e:	f002 fe03 	bl	1df78 <datalogger_log_debug>
	ARTEMIS_DEBUG_PRINTF("}\n");
   1b372:	4809      	ldr	r0, [pc, #36]	@ (1b398 <artemis_debug_halerror+0x90>)
   1b374:	f7f5 fe78 	bl	11068 <am_util_stdio_printf>
   1b378:	4807      	ldr	r0, [pc, #28]	@ (1b398 <artemis_debug_halerror+0x90>)
   1b37a:	f002 fdfd 	bl	1df78 <datalogger_log_debug>

	while(1);
   1b37e:	e7fe      	b.n	1b37e <artemis_debug_halerror+0x76>
   1b380:	0002f698 	.word	0x0002f698
   1b384:	0002f6ac 	.word	0x0002f6ac
   1b388:	0002f6b8 	.word	0x0002f6b8
   1b38c:	0002f670 	.word	0x0002f670
   1b390:	0002f67c 	.word	0x0002f67c
   1b394:	0002f688 	.word	0x0002f688
   1b398:	0002f694 	.word	0x0002f694

0001b39c <artemis_i2c_send>:

#include "artemis_debug.h"
#include "artemis_i2c.h"

void artemis_i2c_send(artemis_i2c_t *i2c, bool stop, artemis_stream_t *txstream)
{
   1b39c:	b570      	push	{r4, r5, r6, lr}
   1b39e:	4606      	mov	r6, r0
   1b3a0:	b08a      	sub	sp, #40	@ 0x28
   1b3a2:	4614      	mov	r4, r2
   1b3a4:	460d      	mov	r5, r1
	am_hal_iom_transfer_t transfer = {0};
   1b3a6:	2224      	movs	r2, #36	@ 0x24
   1b3a8:	2100      	movs	r1, #0
   1b3aa:	a801      	add	r0, sp, #4
   1b3ac:	f008 fff0 	bl	24390 <memset>
	uint32_t status = AM_HAL_STATUS_SUCCESS;

	transfer.uPeerInfo.ui32I2CDevAddr = i2c->address;
   1b3b0:	7832      	ldrb	r2, [r6, #0]
   1b3b2:	9200      	str	r2, [sp, #0]
	transfer.bContinue = !stop;
	transfer.pui32TxBuffer = (uint32_t *)txstream->buffer;
	transfer.ui32NumBytes = txstream->written;
	transfer.eDirection = AM_HAL_IOM_TX;
	transfer.ui8Priority = 1;
   1b3b4:	2301      	movs	r3, #1
	transfer.pui32TxBuffer = (uint32_t *)txstream->buffer;
   1b3b6:	6822      	ldr	r2, [r4, #0]
   1b3b8:	9205      	str	r2, [sp, #20]
	transfer.bContinue = !stop;
   1b3ba:	405d      	eors	r5, r3
	transfer.ui32NumBytes = txstream->written;
   1b3bc:	68a2      	ldr	r2, [r4, #8]

	//ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer));
	status = am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer);
   1b3be:	6870      	ldr	r0, [r6, #4]
	transfer.bContinue = !stop;
   1b3c0:	f88d 501c 	strb.w	r5, [sp, #28]
	status = am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer);
   1b3c4:	4669      	mov	r1, sp
	transfer.ui32NumBytes = txstream->written;
   1b3c6:	9203      	str	r2, [sp, #12]
	transfer.ui8Priority = 1;
   1b3c8:	f88d 301e 	strb.w	r3, [sp, #30]
	status = am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer);
   1b3cc:	f004 ff3a 	bl	20244 <am_hal_iom_blocking_transfer>
	if (status != AM_HAL_STATUS_SUCCESS){
   1b3d0:	b918      	cbnz	r0, 1b3da <artemis_i2c_send+0x3e>
		ARTEMIS_DEBUG_PRINTF("I2C :: SEND ERROR\n");
	}

	/** update the number of bytes read from the txstream */
	txstream->read = txstream->written;
   1b3d2:	68a3      	ldr	r3, [r4, #8]
   1b3d4:	60e3      	str	r3, [r4, #12]
}
   1b3d6:	b00a      	add	sp, #40	@ 0x28
   1b3d8:	bd70      	pop	{r4, r5, r6, pc}
		ARTEMIS_DEBUG_PRINTF("I2C :: SEND ERROR\n");
   1b3da:	4805      	ldr	r0, [pc, #20]	@ (1b3f0 <artemis_i2c_send+0x54>)
   1b3dc:	f7f5 fe44 	bl	11068 <am_util_stdio_printf>
   1b3e0:	4803      	ldr	r0, [pc, #12]	@ (1b3f0 <artemis_i2c_send+0x54>)
   1b3e2:	f002 fdc9 	bl	1df78 <datalogger_log_debug>
	txstream->read = txstream->written;
   1b3e6:	68a3      	ldr	r3, [r4, #8]
   1b3e8:	60e3      	str	r3, [r4, #12]
}
   1b3ea:	b00a      	add	sp, #40	@ 0x28
   1b3ec:	bd70      	pop	{r4, r5, r6, pc}
   1b3ee:	bf00      	nop
   1b3f0:	0002f6c4 	.word	0x0002f6c4

0001b3f4 <artemis_i2c_receive>:

void artemis_i2c_receive(artemis_i2c_t *i2c, bool stop, artemis_stream_t *rxstream, uint32_t rxnumber)
{
   1b3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3f6:	4607      	mov	r7, r0
   1b3f8:	b08b      	sub	sp, #44	@ 0x2c
   1b3fa:	4615      	mov	r5, r2
   1b3fc:	460c      	mov	r4, r1
	am_hal_iom_transfer_t transfer = {0};
   1b3fe:	2224      	movs	r2, #36	@ 0x24
   1b400:	2100      	movs	r1, #0
   1b402:	a801      	add	r0, sp, #4
{
   1b404:	461e      	mov	r6, r3
	am_hal_iom_transfer_t transfer = {0};
   1b406:	f008 ffc3 	bl	24390 <memset>
	uint32_t status = AM_HAL_STATUS_SUCCESS;

	transfer.uPeerInfo.ui32I2CDevAddr = i2c->address;
   1b40a:	783b      	ldrb	r3, [r7, #0]
	transfer.bContinue = !stop;
	transfer.pui32RxBuffer = (uint32_t *)rxstream->buffer;
   1b40c:	682a      	ldr	r2, [r5, #0]
	transfer.uPeerInfo.ui32I2CDevAddr = i2c->address;
   1b40e:	9300      	str	r3, [sp, #0]
	transfer.bContinue = !stop;
   1b410:	f084 0401 	eor.w	r4, r4, #1
	transfer.ui32NumBytes = rxnumber;
	transfer.eDirection = AM_HAL_IOM_RX;
   1b414:	2301      	movs	r3, #1
	transfer.ui8Priority = 1;

	//ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer));
	status = am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer);
   1b416:	6878      	ldr	r0, [r7, #4]
	transfer.pui32RxBuffer = (uint32_t *)rxstream->buffer;
   1b418:	9206      	str	r2, [sp, #24]
	status = am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer);
   1b41a:	4669      	mov	r1, sp
	transfer.bContinue = !stop;
   1b41c:	f88d 401c 	strb.w	r4, [sp, #28]
	transfer.ui32NumBytes = rxnumber;
   1b420:	9603      	str	r6, [sp, #12]
	transfer.eDirection = AM_HAL_IOM_RX;
   1b422:	f88d 3010 	strb.w	r3, [sp, #16]
	transfer.ui8Priority = 1;
   1b426:	f88d 301e 	strb.w	r3, [sp, #30]
	status = am_hal_iom_blocking_transfer(i2c->iom.handle, &transfer);
   1b42a:	f004 ff0b 	bl	20244 <am_hal_iom_blocking_transfer>
	if (status != AM_HAL_STATUS_SUCCESS){
   1b42e:	b910      	cbnz	r0, 1b436 <artemis_i2c_receive+0x42>
		ARTEMIS_DEBUG_PRINTF("I2C :: RECEIVE ERROR\n");
	}

	/** update the number of bytes written to the rxstream */
	rxstream->written = rxnumber;
   1b430:	60ae      	str	r6, [r5, #8]
}
   1b432:	b00b      	add	sp, #44	@ 0x2c
   1b434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ARTEMIS_DEBUG_PRINTF("I2C :: RECEIVE ERROR\n");
   1b436:	4804      	ldr	r0, [pc, #16]	@ (1b448 <artemis_i2c_receive+0x54>)
   1b438:	f7f5 fe16 	bl	11068 <am_util_stdio_printf>
   1b43c:	4802      	ldr	r0, [pc, #8]	@ (1b448 <artemis_i2c_receive+0x54>)
   1b43e:	f002 fd9b 	bl	1df78 <datalogger_log_debug>
	rxstream->written = rxnumber;
   1b442:	60ae      	str	r6, [r5, #8]
}
   1b444:	b00b      	add	sp, #44	@ 0x2c
   1b446:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b448:	0002f6d8 	.word	0x0002f6d8

0001b44c <artemis_i9603n_initialize>:
 * Initializes Power Pin, EXTINT Pin & IOM Module for I2C.
 *
 * @param i2c_addr I2C Address of Module
 */
void artemis_i9603n_initialize(void)
{
   1b44c:	b570      	push	{r4, r5, r6, lr}
	artemis_uart_t *uart = &module.uart;

	/**  Select UART module */
	uart->module = ARTEMIS_UART_MODULE_1;
   1b44e:	4b38      	ldr	r3, [pc, #224]	@ (1b530 <artemis_i9603n_initialize+0xe4>)
	uint32_t baudrate = 19200;

	/** Prep Pins */
	module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_ON;
	module.power.pin = AM_BSP_GPIO_IRIDIUM_ON;
	module.rx.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_UART_RX;
   1b450:	4e38      	ldr	r6, [pc, #224]	@ (1b534 <artemis_i9603n_initialize+0xe8>)
	module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_ON;
   1b452:	4939      	ldr	r1, [pc, #228]	@ (1b538 <artemis_i9603n_initialize+0xec>)
	module.rx.pin = AM_BSP_GPIO_IRIDIUM_UART_RX;
	module.tx.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_UART_RX;
	module.tx.pin = AM_BSP_GPIO_IRIDIUM_UART_RX;
	module.ring_ind.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_RING_IND;
   1b454:	4d39      	ldr	r5, [pc, #228]	@ (1b53c <artemis_i9603n_initialize+0xf0>)
	module.rx.pin = AM_BSP_GPIO_IRIDIUM_UART_RX;
   1b456:	220f      	movs	r2, #15
{
   1b458:	b082      	sub	sp, #8
	uart->module = ARTEMIS_UART_MODULE_1;
   1b45a:	2401      	movs	r4, #1
	module.rx.pin = AM_BSP_GPIO_IRIDIUM_UART_RX;
   1b45c:	e9c3 26d8 	strd	r2, r6, [r3, #864]	@ 0x360
	module.tx.pin = AM_BSP_GPIO_IRIDIUM_UART_RX;
   1b460:	e9c3 26d6 	strd	r2, r6, [r3, #856]	@ 0x358
	module.ring_ind.pin = AM_BSP_GPIO_IRIDIUM_RING_IND;
   1b464:	2216      	movs	r2, #22
	module.power.pin = AM_BSP_GPIO_IRIDIUM_ON;
   1b466:	2004      	movs	r0, #4
	uart->module = ARTEMIS_UART_MODULE_1;
   1b468:	711c      	strb	r4, [r3, #4]
	module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_ON;
   1b46a:	f8c3 1354 	str.w	r1, [r3, #852]	@ 0x354
	module.net_avail.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_NET_AVAIL;
   1b46e:	4c34      	ldr	r4, [pc, #208]	@ (1b540 <artemis_i9603n_initialize+0xf4>)
	module.ring_ind.pin = AM_BSP_GPIO_IRIDIUM_RING_IND;
   1b470:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
	module.net_avail.pin = AM_BSP_GPIO_IRIDIUM_NET_AVAIL;

	/** Configure Pins */
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_ON, g_AM_BSP_GPIO_IRIDIUM_ON));
   1b474:	6809      	ldr	r1, [r1, #0]
	module.power.pin = AM_BSP_GPIO_IRIDIUM_ON;
   1b476:	f8c3 0350 	str.w	r0, [r3, #848]	@ 0x350
	module.net_avail.pin = AM_BSP_GPIO_IRIDIUM_NET_AVAIL;
   1b47a:	2218      	movs	r2, #24
	module.ring_ind.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_RING_IND;
   1b47c:	f8c3 536c 	str.w	r5, [r3, #876]	@ 0x36c
	module.net_avail.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_IRIDIUM_NET_AVAIL;
   1b480:	f8c3 4374 	str.w	r4, [r3, #884]	@ 0x374
	module.net_avail.pin = AM_BSP_GPIO_IRIDIUM_NET_AVAIL;
   1b484:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_ON, g_AM_BSP_GPIO_IRIDIUM_ON));
   1b488:	f004 f8ca 	bl	1f620 <am_hal_gpio_pinconfig>
   1b48c:	b9f8      	cbnz	r0, 1b4ce <artemis_i9603n_initialize+0x82>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_UART_RX, g_AM_BSP_GPIO_IRIDIUM_UART_RX));
   1b48e:	6831      	ldr	r1, [r6, #0]
   1b490:	200f      	movs	r0, #15
   1b492:	f004 f8c5 	bl	1f620 <am_hal_gpio_pinconfig>
   1b496:	bb40      	cbnz	r0, 1b4ea <artemis_i9603n_initialize+0x9e>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_UART_TX, g_AM_BSP_GPIO_IRIDIUM_UART_TX));
   1b498:	4b2a      	ldr	r3, [pc, #168]	@ (1b544 <artemis_i9603n_initialize+0xf8>)
   1b49a:	200e      	movs	r0, #14
   1b49c:	6819      	ldr	r1, [r3, #0]
   1b49e:	f004 f8bf 	bl	1f620 <am_hal_gpio_pinconfig>
   1b4a2:	2800      	cmp	r0, #0
   1b4a4:	d13a      	bne.n	1b51c <artemis_i9603n_initialize+0xd0>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_RING_IND, g_AM_BSP_GPIO_IRIDIUM_RING_IND));
   1b4a6:	6829      	ldr	r1, [r5, #0]
   1b4a8:	2016      	movs	r0, #22
   1b4aa:	f004 f8b9 	bl	1f620 <am_hal_gpio_pinconfig>
   1b4ae:	4601      	mov	r1, r0
   1b4b0:	bb60      	cbnz	r0, 1b50c <artemis_i9603n_initialize+0xc0>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_NET_AVAIL, g_AM_BSP_GPIO_IRIDIUM_NET_AVAIL));
   1b4b2:	6821      	ldr	r1, [r4, #0]
   1b4b4:	2018      	movs	r0, #24
   1b4b6:	f004 f8b3 	bl	1f620 <am_hal_gpio_pinconfig>
   1b4ba:	4601      	mov	r1, r0
   1b4bc:	b9f0      	cbnz	r0, 1b4fc <artemis_i9603n_initialize+0xb0>

	/** Initialize UART Port */
	artemis_uart_initialize(uart, baudrate);
   1b4be:	481c      	ldr	r0, [pc, #112]	@ (1b530 <artemis_i9603n_initialize+0xe4>)
   1b4c0:	f44f 4196 	mov.w	r1, #19200	@ 0x4b00
    //artemis_uart_flush(uart);
}
   1b4c4:	b002      	add	sp, #8
   1b4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	artemis_uart_initialize(uart, baudrate);
   1b4ca:	f000 bc13 	b.w	1bcf4 <artemis_uart_initialize>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_ON, g_AM_BSP_GPIO_IRIDIUM_ON));
   1b4ce:	2399      	movs	r3, #153	@ 0x99
   1b4d0:	4601      	mov	r1, r0
   1b4d2:	9300      	str	r3, [sp, #0]
   1b4d4:	481c      	ldr	r0, [pc, #112]	@ (1b548 <artemis_i9603n_initialize+0xfc>)
   1b4d6:	4b1d      	ldr	r3, [pc, #116]	@ (1b54c <artemis_i9603n_initialize+0x100>)
   1b4d8:	4a1d      	ldr	r2, [pc, #116]	@ (1b550 <artemis_i9603n_initialize+0x104>)
   1b4da:	f7ff ff15 	bl	1b308 <artemis_debug_halerror>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_UART_RX, g_AM_BSP_GPIO_IRIDIUM_UART_RX));
   1b4de:	6831      	ldr	r1, [r6, #0]
   1b4e0:	200f      	movs	r0, #15
   1b4e2:	f004 f89d 	bl	1f620 <am_hal_gpio_pinconfig>
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d0d6      	beq.n	1b498 <artemis_i9603n_initialize+0x4c>
   1b4ea:	229a      	movs	r2, #154	@ 0x9a
   1b4ec:	9200      	str	r2, [sp, #0]
   1b4ee:	4601      	mov	r1, r0
   1b4f0:	4b16      	ldr	r3, [pc, #88]	@ (1b54c <artemis_i9603n_initialize+0x100>)
   1b4f2:	4a17      	ldr	r2, [pc, #92]	@ (1b550 <artemis_i9603n_initialize+0x104>)
   1b4f4:	4817      	ldr	r0, [pc, #92]	@ (1b554 <artemis_i9603n_initialize+0x108>)
   1b4f6:	f7ff ff07 	bl	1b308 <artemis_debug_halerror>
   1b4fa:	e7cd      	b.n	1b498 <artemis_i9603n_initialize+0x4c>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_NET_AVAIL, g_AM_BSP_GPIO_IRIDIUM_NET_AVAIL));
   1b4fc:	249d      	movs	r4, #157	@ 0x9d
   1b4fe:	4b13      	ldr	r3, [pc, #76]	@ (1b54c <artemis_i9603n_initialize+0x100>)
   1b500:	4a13      	ldr	r2, [pc, #76]	@ (1b550 <artemis_i9603n_initialize+0x104>)
   1b502:	4815      	ldr	r0, [pc, #84]	@ (1b558 <artemis_i9603n_initialize+0x10c>)
   1b504:	9400      	str	r4, [sp, #0]
   1b506:	f7ff feff 	bl	1b308 <artemis_debug_halerror>
   1b50a:	e7d8      	b.n	1b4be <artemis_i9603n_initialize+0x72>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_RING_IND, g_AM_BSP_GPIO_IRIDIUM_RING_IND));
   1b50c:	209c      	movs	r0, #156	@ 0x9c
   1b50e:	9000      	str	r0, [sp, #0]
   1b510:	4b0e      	ldr	r3, [pc, #56]	@ (1b54c <artemis_i9603n_initialize+0x100>)
   1b512:	4a0f      	ldr	r2, [pc, #60]	@ (1b550 <artemis_i9603n_initialize+0x104>)
   1b514:	4811      	ldr	r0, [pc, #68]	@ (1b55c <artemis_i9603n_initialize+0x110>)
   1b516:	f7ff fef7 	bl	1b308 <artemis_debug_halerror>
   1b51a:	e7ca      	b.n	1b4b2 <artemis_i9603n_initialize+0x66>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IRIDIUM_UART_TX, g_AM_BSP_GPIO_IRIDIUM_UART_TX));
   1b51c:	229b      	movs	r2, #155	@ 0x9b
   1b51e:	9200      	str	r2, [sp, #0]
   1b520:	4601      	mov	r1, r0
   1b522:	4b0a      	ldr	r3, [pc, #40]	@ (1b54c <artemis_i9603n_initialize+0x100>)
   1b524:	4a0a      	ldr	r2, [pc, #40]	@ (1b550 <artemis_i9603n_initialize+0x104>)
   1b526:	480e      	ldr	r0, [pc, #56]	@ (1b560 <artemis_i9603n_initialize+0x114>)
   1b528:	f7ff feee 	bl	1b308 <artemis_debug_halerror>
   1b52c:	e7bb      	b.n	1b4a6 <artemis_i9603n_initialize+0x5a>
   1b52e:	bf00      	nop
   1b530:	10049554 	.word	0x10049554
   1b534:	00030f84 	.word	0x00030f84
   1b538:	00030f94 	.word	0x00030f94
   1b53c:	00030f90 	.word	0x00030f90
   1b540:	00030f8c 	.word	0x00030f8c
   1b544:	00030f88 	.word	0x00030f88
   1b548:	0002f710 	.word	0x0002f710
   1b54c:	0002f6f0 	.word	0x0002f6f0
   1b550:	00030dfc 	.word	0x00030dfc
   1b554:	0002f758 	.word	0x0002f758
   1b558:	0002f854 	.word	0x0002f854
   1b55c:	0002f800 	.word	0x0002f800
   1b560:	0002f7ac 	.word	0x0002f7ac

0001b564 <artemis_i9603n_power_on>:
	artemis_uart_uninitialize(uart);
}

void artemis_i9603n_power_on(void)
{
	am_hal_gpio_output_set(module.power.pin);
   1b564:	4b06      	ldr	r3, [pc, #24]	@ (1b580 <artemis_i9603n_power_on+0x1c>)
   1b566:	4807      	ldr	r0, [pc, #28]	@ (1b584 <artemis_i9603n_power_on+0x20>)
   1b568:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
   1b56c:	08da      	lsrs	r2, r3, #3
   1b56e:	2101      	movs	r1, #1
   1b570:	f002 0204 	and.w	r2, r2, #4
   1b574:	f003 031f 	and.w	r3, r3, #31
   1b578:	fa01 f303 	lsl.w	r3, r1, r3
   1b57c:	5013      	str	r3, [r2, r0]
}
   1b57e:	4770      	bx	lr
   1b580:	10049554 	.word	0x10049554
   1b584:	40010090 	.word	0x40010090

0001b588 <artemis_i9603n_power_off>:

void artemis_i9603n_power_off(void)
{
	am_hal_gpio_output_clear(module.power.pin);
   1b588:	4b06      	ldr	r3, [pc, #24]	@ (1b5a4 <artemis_i9603n_power_off+0x1c>)
   1b58a:	4807      	ldr	r0, [pc, #28]	@ (1b5a8 <artemis_i9603n_power_off+0x20>)
   1b58c:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
   1b590:	08da      	lsrs	r2, r3, #3
   1b592:	2101      	movs	r1, #1
   1b594:	f002 0204 	and.w	r2, r2, #4
   1b598:	f003 031f 	and.w	r3, r3, #31
   1b59c:	fa01 f303 	lsl.w	r3, r1, r3
   1b5a0:	5013      	str	r3, [r2, r0]
}
   1b5a2:	4770      	bx	lr
   1b5a4:	10049554 	.word	0x10049554
   1b5a8:	40010098 	.word	0x40010098

0001b5ac <artemis_i9603n_is_network_available>:

bool artemis_i9603n_is_network_available(void)
{
	return am_hal_gpio_input_read(module.net_avail.pin);
   1b5ac:	4b06      	ldr	r3, [pc, #24]	@ (1b5c8 <artemis_i9603n_is_network_available+0x1c>)
   1b5ae:	4907      	ldr	r1, [pc, #28]	@ (1b5cc <artemis_i9603n_is_network_available+0x20>)
   1b5b0:	f8d3 3370 	ldr.w	r3, [r3, #880]	@ 0x370
   1b5b4:	08da      	lsrs	r2, r3, #3
   1b5b6:	f002 0204 	and.w	r2, r2, #4
   1b5ba:	f003 031f 	and.w	r3, r3, #31
   1b5be:	5850      	ldr	r0, [r2, r1]
   1b5c0:	40d8      	lsrs	r0, r3
}
   1b5c2:	f000 0001 	and.w	r0, r0, #1
   1b5c6:	4770      	bx	lr
   1b5c8:	10049554 	.word	0x10049554
   1b5cc:	40010080 	.word	0x40010080

0001b5d0 <artemis_i9603n_send>:
{
	return am_hal_gpio_input_read(module.ring_ind.pin);
}

void artemis_i9603n_send(char *msg, uint16_t len)
{
   1b5d0:	b570      	push	{r4, r5, r6, lr}
	artemis_uart_flush(&module.uart);
   1b5d2:	4c10      	ldr	r4, [pc, #64]	@ (1b614 <artemis_i9603n_send+0x44>)
{
   1b5d4:	b084      	sub	sp, #16
   1b5d6:	4605      	mov	r5, r0
	artemis_uart_flush(&module.uart);
   1b5d8:	4620      	mov	r0, r4
{
   1b5da:	460e      	mov	r6, r1
	artemis_uart_flush(&module.uart);
   1b5dc:	f000 fc12 	bl	1be04 <artemis_uart_flush>

	artemis_stream_t txstream = {0};
   1b5e0:	2300      	movs	r3, #0
	artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1b5e2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
   1b5e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
   1b5ea:	4668      	mov	r0, sp
	artemis_stream_t txstream = {0};
   1b5ec:	e9cd 3300 	strd	r3, r3, [sp]
   1b5f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1b5f4:	f000 fa46 	bl	1ba84 <artemis_stream_setbuffer>
	artemis_stream_reset(&txstream);
   1b5f8:	4668      	mov	r0, sp
   1b5fa:	f000 fa91 	bl	1bb20 <artemis_stream_reset>
	artemis_stream_write(&txstream, (uint8_t*)msg, len);
   1b5fe:	4632      	mov	r2, r6
   1b600:	4629      	mov	r1, r5
   1b602:	4668      	mov	r0, sp
   1b604:	f000 fa54 	bl	1bab0 <artemis_stream_write>
	artemis_uart_send(&module.uart, &txstream);
   1b608:	4669      	mov	r1, sp
   1b60a:	4620      	mov	r0, r4
   1b60c:	f000 fc12 	bl	1be34 <artemis_uart_send>
}
   1b610:	b004      	add	sp, #16
   1b612:	bd70      	pop	{r4, r5, r6, pc}
   1b614:	10049554 	.word	0x10049554

0001b618 <artemis_i9603n_receive>:

uint16_t artemis_i9603n_receive(char *msg)
{
   1b618:	b510      	push	{r4, lr}
   1b61a:	b084      	sub	sp, #16
	artemis_stream_t rxstream = {0};
   1b61c:	2300      	movs	r3, #0
	artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1b61e:	490d      	ldr	r1, [pc, #52]	@ (1b654 <artemis_i9603n_receive+0x3c>)
   1b620:	f44f 72c8 	mov.w	r2, #400	@ 0x190
{
   1b624:	4604      	mov	r4, r0
	artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1b626:	4668      	mov	r0, sp
	artemis_stream_t rxstream = {0};
   1b628:	e9cd 3300 	strd	r3, r3, [sp]
   1b62c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1b630:	f000 fa28 	bl	1ba84 <artemis_stream_setbuffer>
	artemis_stream_reset(&rxstream);
   1b634:	4668      	mov	r0, sp
   1b636:	f000 fa73 	bl	1bb20 <artemis_stream_reset>
	artemis_uart_receive(&rxstream);
   1b63a:	4668      	mov	r0, sp
   1b63c:	f000 fca0 	bl	1bf80 <artemis_uart_receive>
	artemis_stream_read(&rxstream, (uint8_t*)msg, rxstream.written);
   1b640:	9a02      	ldr	r2, [sp, #8]
   1b642:	4621      	mov	r1, r4
   1b644:	4668      	mov	r0, sp
   1b646:	f000 fa4f 	bl	1bae8 <artemis_stream_read>

	return rxstream.written;
}
   1b64a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   1b64e:	b004      	add	sp, #16
   1b650:	bd10      	pop	{r4, pc}
   1b652:	bf00      	nop
   1b654:	10049714 	.word	0x10049714

0001b658 <artemis_iom_initialize>:

#include "artemis_debug.h"
#include "artemis_iom.h"

void artemis_iom_initialize(artemis_iom_t *iom)
{
   1b658:	b510      	push	{r4, lr}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(iom->module, &iom->handle));
   1b65a:	4601      	mov	r1, r0
{
   1b65c:	b082      	sub	sp, #8
   1b65e:	4604      	mov	r4, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(iom->module, &iom->handle));
   1b660:	7900      	ldrb	r0, [r0, #4]
   1b662:	f004 fa9d 	bl	1fba0 <am_hal_iom_initialize>
   1b666:	b9a0      	cbnz	r0, 1b692 <artemis_iom_initialize+0x3a>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(iom->handle, AM_HAL_SYSCTRL_WAKE, false));
   1b668:	2200      	movs	r2, #0
   1b66a:	4611      	mov	r1, r2
   1b66c:	6820      	ldr	r0, [r4, #0]
   1b66e:	f004 fb65 	bl	1fd3c <am_hal_iom_power_ctrl>
   1b672:	4601      	mov	r1, r0
   1b674:	bb38      	cbnz	r0, 1b6c6 <artemis_iom_initialize+0x6e>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_configure(iom->handle, &iom->config));
   1b676:	4621      	mov	r1, r4
   1b678:	f851 0b08 	ldr.w	r0, [r1], #8
   1b67c:	f004 fc36 	bl	1feec <am_hal_iom_configure>
   1b680:	4601      	mov	r1, r0
   1b682:	b9c0      	cbnz	r0, 1b6b6 <artemis_iom_initialize+0x5e>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_enable(iom->handle));
   1b684:	6820      	ldr	r0, [r4, #0]
   1b686:	f004 fab1 	bl	1fbec <am_hal_iom_enable>
   1b68a:	4601      	mov	r1, r0
   1b68c:	b950      	cbnz	r0, 1b6a4 <artemis_iom_initialize+0x4c>
}
   1b68e:	b002      	add	sp, #8
   1b690:	bd10      	pop	{r4, pc}
   1b692:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_initialize(iom->module, &iom->handle));
   1b694:	200b      	movs	r0, #11
   1b696:	9000      	str	r0, [sp, #0]
   1b698:	4b0f      	ldr	r3, [pc, #60]	@ (1b6d8 <artemis_iom_initialize+0x80>)
   1b69a:	4a10      	ldr	r2, [pc, #64]	@ (1b6dc <artemis_iom_initialize+0x84>)
   1b69c:	4810      	ldr	r0, [pc, #64]	@ (1b6e0 <artemis_iom_initialize+0x88>)
   1b69e:	f7ff fe33 	bl	1b308 <artemis_debug_halerror>
   1b6a2:	e7e1      	b.n	1b668 <artemis_iom_initialize+0x10>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_enable(iom->handle));
   1b6a4:	240e      	movs	r4, #14
   1b6a6:	4b0c      	ldr	r3, [pc, #48]	@ (1b6d8 <artemis_iom_initialize+0x80>)
   1b6a8:	4a0c      	ldr	r2, [pc, #48]	@ (1b6dc <artemis_iom_initialize+0x84>)
   1b6aa:	480e      	ldr	r0, [pc, #56]	@ (1b6e4 <artemis_iom_initialize+0x8c>)
   1b6ac:	9400      	str	r4, [sp, #0]
   1b6ae:	f7ff fe2b 	bl	1b308 <artemis_debug_halerror>
}
   1b6b2:	b002      	add	sp, #8
   1b6b4:	bd10      	pop	{r4, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_configure(iom->handle, &iom->config));
   1b6b6:	200d      	movs	r0, #13
   1b6b8:	9000      	str	r0, [sp, #0]
   1b6ba:	4b07      	ldr	r3, [pc, #28]	@ (1b6d8 <artemis_iom_initialize+0x80>)
   1b6bc:	4a07      	ldr	r2, [pc, #28]	@ (1b6dc <artemis_iom_initialize+0x84>)
   1b6be:	480a      	ldr	r0, [pc, #40]	@ (1b6e8 <artemis_iom_initialize+0x90>)
   1b6c0:	f7ff fe22 	bl	1b308 <artemis_debug_halerror>
   1b6c4:	e7de      	b.n	1b684 <artemis_iom_initialize+0x2c>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(iom->handle, AM_HAL_SYSCTRL_WAKE, false));
   1b6c6:	200c      	movs	r0, #12
   1b6c8:	9000      	str	r0, [sp, #0]
   1b6ca:	4b03      	ldr	r3, [pc, #12]	@ (1b6d8 <artemis_iom_initialize+0x80>)
   1b6cc:	4a03      	ldr	r2, [pc, #12]	@ (1b6dc <artemis_iom_initialize+0x84>)
   1b6ce:	4807      	ldr	r0, [pc, #28]	@ (1b6ec <artemis_iom_initialize+0x94>)
   1b6d0:	f7ff fe1a 	bl	1b308 <artemis_debug_halerror>
   1b6d4:	e7cf      	b.n	1b676 <artemis_iom_initialize+0x1e>
   1b6d6:	bf00      	nop
   1b6d8:	0002f8ac 	.word	0x0002f8ac
   1b6dc:	00030e34 	.word	0x00030e34
   1b6e0:	0002f8c8 	.word	0x0002f8c8
   1b6e4:	0002f96c 	.word	0x0002f96c
   1b6e8:	0002f93c 	.word	0x0002f93c
   1b6ec:	0002f8fc 	.word	0x0002f8fc

0001b6f0 <artemis_iom_uninitialize>:

void artemis_iom_uninitialize(artemis_iom_t *iom)
{
   1b6f0:	b510      	push	{r4, lr}
   1b6f2:	4604      	mov	r4, r0
   1b6f4:	b082      	sub	sp, #8
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_disable(iom->handle));
   1b6f6:	6800      	ldr	r0, [r0, #0]
   1b6f8:	f004 faea 	bl	1fcd0 <am_hal_iom_disable>
   1b6fc:	b978      	cbnz	r0, 1b71e <artemis_iom_uninitialize+0x2e>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(iom->handle, AM_HAL_SYSCTRL_DEEPSLEEP, false));
   1b6fe:	2102      	movs	r1, #2
   1b700:	6820      	ldr	r0, [r4, #0]
   1b702:	2200      	movs	r2, #0
   1b704:	f004 fb1a 	bl	1fd3c <am_hal_iom_power_ctrl>
   1b708:	4601      	mov	r1, r0
   1b70a:	b9e0      	cbnz	r0, 1b746 <artemis_iom_uninitialize+0x56>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_uninitialize(iom->handle));
   1b70c:	6820      	ldr	r0, [r4, #0]
   1b70e:	f004 fa0d 	bl	1fb2c <am_hal_iom_uninitialize>
   1b712:	4601      	mov	r1, r0
   1b714:	b960      	cbnz	r0, 1b730 <artemis_iom_uninitialize+0x40>
    iom->handle = 0;
   1b716:	2300      	movs	r3, #0
   1b718:	6023      	str	r3, [r4, #0]
}
   1b71a:	b002      	add	sp, #8
   1b71c:	bd10      	pop	{r4, pc}
   1b71e:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_disable(iom->handle));
   1b720:	2013      	movs	r0, #19
   1b722:	9000      	str	r0, [sp, #0]
   1b724:	4b0c      	ldr	r3, [pc, #48]	@ (1b758 <artemis_iom_uninitialize+0x68>)
   1b726:	4a0d      	ldr	r2, [pc, #52]	@ (1b75c <artemis_iom_uninitialize+0x6c>)
   1b728:	480d      	ldr	r0, [pc, #52]	@ (1b760 <artemis_iom_uninitialize+0x70>)
   1b72a:	f7ff fded 	bl	1b308 <artemis_debug_halerror>
   1b72e:	e7e6      	b.n	1b6fe <artemis_iom_uninitialize+0xe>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_uninitialize(iom->handle));
   1b730:	2015      	movs	r0, #21
   1b732:	9000      	str	r0, [sp, #0]
   1b734:	4b08      	ldr	r3, [pc, #32]	@ (1b758 <artemis_iom_uninitialize+0x68>)
   1b736:	4a09      	ldr	r2, [pc, #36]	@ (1b75c <artemis_iom_uninitialize+0x6c>)
   1b738:	480a      	ldr	r0, [pc, #40]	@ (1b764 <artemis_iom_uninitialize+0x74>)
   1b73a:	f7ff fde5 	bl	1b308 <artemis_debug_halerror>
    iom->handle = 0;
   1b73e:	2300      	movs	r3, #0
   1b740:	6023      	str	r3, [r4, #0]
}
   1b742:	b002      	add	sp, #8
   1b744:	bd10      	pop	{r4, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_power_ctrl(iom->handle, AM_HAL_SYSCTRL_DEEPSLEEP, false));
   1b746:	2014      	movs	r0, #20
   1b748:	9000      	str	r0, [sp, #0]
   1b74a:	4b03      	ldr	r3, [pc, #12]	@ (1b758 <artemis_iom_uninitialize+0x68>)
   1b74c:	4a03      	ldr	r2, [pc, #12]	@ (1b75c <artemis_iom_uninitialize+0x6c>)
   1b74e:	4806      	ldr	r0, [pc, #24]	@ (1b768 <artemis_iom_uninitialize+0x78>)
   1b750:	f7ff fdda 	bl	1b308 <artemis_debug_halerror>
   1b754:	e7da      	b.n	1b70c <artemis_iom_uninitialize+0x1c>
   1b756:	bf00      	nop
   1b758:	0002f8ac 	.word	0x0002f8ac
   1b75c:	00030e18 	.word	0x00030e18
   1b760:	0002f98c 	.word	0x0002f98c
   1b764:	0002f9f0 	.word	0x0002f9f0
   1b768:	0002f9ac 	.word	0x0002f9ac

0001b76c <artemis_mcu_initialize>:
#include "artemis_debug.h"
#include "artemis_mcu.h"
#include "am_bsp.h"

void artemis_mcu_initialize(void)
{
   1b76c:	b510      	push	{r4, lr}
	am_hal_burst_avail_e burst_avail;

	// set the clock frequency
	ARTEMIS_DEBUG_HALSTATUS(am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0));
   1b76e:	2100      	movs	r1, #0
{
   1b770:	b084      	sub	sp, #16
	ARTEMIS_DEBUG_HALSTATUS(am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0));
   1b772:	4608      	mov	r0, r1
   1b774:	f003 fd4c 	bl	1f210 <am_hal_clkgen_control>
   1b778:	b9a8      	cbnz	r0, 1b7a6 <artemis_mcu_initialize+0x3a>

	// set the default cache configuration
	ARTEMIS_DEBUG_HALSTATUS(am_hal_cachectrl_config(&am_hal_cachectrl_defaults));
   1b77a:	4825      	ldr	r0, [pc, #148]	@ (1b810 <artemis_mcu_initialize+0xa4>)
   1b77c:	f003 fba0 	bl	1eec0 <am_hal_cachectrl_config>
   1b780:	4601      	mov	r1, r0
   1b782:	b9f0      	cbnz	r0, 1b7c2 <artemis_mcu_initialize+0x56>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_cachectrl_enable());
   1b784:	f003 fbc0 	bl	1ef08 <am_hal_cachectrl_enable>
   1b788:	4601      	mov	r1, r0
   1b78a:	bb30      	cbnz	r0, 1b7da <artemis_mcu_initialize+0x6e>

	// enable the floating point module
	am_hal_sysctrl_fpu_enable();
   1b78c:	f005 fb0a 	bl	20da4 <am_hal_sysctrl_fpu_enable>

	// initialize mcu for burst mode operations
	ARTEMIS_DEBUG_HALSTATUS(am_hal_burst_mode_initialize(&burst_avail));
   1b790:	f10d 000f 	add.w	r0, sp, #15
   1b794:	f003 fb52 	bl	1ee3c <am_hal_burst_mode_initialize>
   1b798:	4601      	mov	r1, r0
   1b79a:	2800      	cmp	r0, #0
   1b79c:	d12d      	bne.n	1b7fa <artemis_mcu_initialize+0x8e>

	// configure the board for low power operation
	am_bsp_low_power_init();
   1b79e:	f003 faf7 	bl	1ed90 <am_bsp_low_power_init>

	// enable interrupts
	//ARTEMIS_DEBUG_HALSTATUS(am_hal_interrupt_master_enable());
}
   1b7a2:	b004      	add	sp, #16
   1b7a4:	bd10      	pop	{r4, pc}
	ARTEMIS_DEBUG_HALSTATUS(am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0));
   1b7a6:	240e      	movs	r4, #14
   1b7a8:	4601      	mov	r1, r0
   1b7aa:	4b1a      	ldr	r3, [pc, #104]	@ (1b814 <artemis_mcu_initialize+0xa8>)
   1b7ac:	4a1a      	ldr	r2, [pc, #104]	@ (1b818 <artemis_mcu_initialize+0xac>)
   1b7ae:	481b      	ldr	r0, [pc, #108]	@ (1b81c <artemis_mcu_initialize+0xb0>)
   1b7b0:	9400      	str	r4, [sp, #0]
   1b7b2:	f7ff fda9 	bl	1b308 <artemis_debug_halerror>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_cachectrl_config(&am_hal_cachectrl_defaults));
   1b7b6:	4816      	ldr	r0, [pc, #88]	@ (1b810 <artemis_mcu_initialize+0xa4>)
   1b7b8:	f003 fb82 	bl	1eec0 <am_hal_cachectrl_config>
   1b7bc:	4601      	mov	r1, r0
   1b7be:	2800      	cmp	r0, #0
   1b7c0:	d0e0      	beq.n	1b784 <artemis_mcu_initialize+0x18>
   1b7c2:	2411      	movs	r4, #17
   1b7c4:	4b13      	ldr	r3, [pc, #76]	@ (1b814 <artemis_mcu_initialize+0xa8>)
   1b7c6:	4a14      	ldr	r2, [pc, #80]	@ (1b818 <artemis_mcu_initialize+0xac>)
   1b7c8:	4815      	ldr	r0, [pc, #84]	@ (1b820 <artemis_mcu_initialize+0xb4>)
   1b7ca:	9400      	str	r4, [sp, #0]
   1b7cc:	f7ff fd9c 	bl	1b308 <artemis_debug_halerror>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_cachectrl_enable());
   1b7d0:	f003 fb9a 	bl	1ef08 <am_hal_cachectrl_enable>
   1b7d4:	4601      	mov	r1, r0
   1b7d6:	2800      	cmp	r0, #0
   1b7d8:	d0d8      	beq.n	1b78c <artemis_mcu_initialize+0x20>
   1b7da:	2412      	movs	r4, #18
   1b7dc:	4b0d      	ldr	r3, [pc, #52]	@ (1b814 <artemis_mcu_initialize+0xa8>)
   1b7de:	4a0e      	ldr	r2, [pc, #56]	@ (1b818 <artemis_mcu_initialize+0xac>)
   1b7e0:	4810      	ldr	r0, [pc, #64]	@ (1b824 <artemis_mcu_initialize+0xb8>)
   1b7e2:	9400      	str	r4, [sp, #0]
   1b7e4:	f7ff fd90 	bl	1b308 <artemis_debug_halerror>
	am_hal_sysctrl_fpu_enable();
   1b7e8:	f005 fadc 	bl	20da4 <am_hal_sysctrl_fpu_enable>
	ARTEMIS_DEBUG_HALSTATUS(am_hal_burst_mode_initialize(&burst_avail));
   1b7ec:	f10d 000f 	add.w	r0, sp, #15
   1b7f0:	f003 fb24 	bl	1ee3c <am_hal_burst_mode_initialize>
   1b7f4:	4601      	mov	r1, r0
   1b7f6:	2800      	cmp	r0, #0
   1b7f8:	d0d1      	beq.n	1b79e <artemis_mcu_initialize+0x32>
   1b7fa:	2418      	movs	r4, #24
   1b7fc:	4b05      	ldr	r3, [pc, #20]	@ (1b814 <artemis_mcu_initialize+0xa8>)
   1b7fe:	4a06      	ldr	r2, [pc, #24]	@ (1b818 <artemis_mcu_initialize+0xac>)
   1b800:	4809      	ldr	r0, [pc, #36]	@ (1b828 <artemis_mcu_initialize+0xbc>)
   1b802:	9400      	str	r4, [sp, #0]
   1b804:	f7ff fd80 	bl	1b308 <artemis_debug_halerror>
	am_bsp_low_power_init();
   1b808:	f003 fac2 	bl	1ed90 <am_bsp_low_power_init>
}
   1b80c:	b004      	add	sp, #16
   1b80e:	bd10      	pop	{r4, pc}
   1b810:	00030fb8 	.word	0x00030fb8
   1b814:	0002fa18 	.word	0x0002fa18
   1b818:	00030e4c 	.word	0x00030e4c
   1b81c:	0002fa34 	.word	0x0002fa34
   1b820:	0002fa70 	.word	0x0002fa70
   1b824:	0002faa4 	.word	0x0002faa4
   1b828:	0002fac0 	.word	0x0002fac0

0001b82c <artemis_piston_i2c_initialize>:
//
// Global Functions
//
//*****************************************************************************
void artemis_piston_i2c_initialize(uint8_t i2c_addr)
{
   1b82c:	b530      	push	{r4, r5, lr}
    artemis_i2c_t *i2c = &module.i2c;
    //module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_GPS_ON;
    module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_PWR_CTRL_EN;
   1b82e:	4c2c      	ldr	r4, [pc, #176]	@ (1b8e0 <artemis_piston_i2c_initialize+0xb4>)
   1b830:	492c      	ldr	r1, [pc, #176]	@ (1b8e4 <artemis_piston_i2c_initialize+0xb8>)
    module.power.pin = AM_BSP_GPIO_PWR_CTRL_EN;

    i2c->address = i2c_addr;
    i2c->iom.module = 2;
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
    i2c->iom.config.ui32ClockFreq = AM_HAL_IOM_400KHZ;
   1b832:	4a2d      	ldr	r2, [pc, #180]	@ (1b8e8 <artemis_piston_i2c_initialize+0xbc>)
{
   1b834:	b083      	sub	sp, #12
    module.power.pin = AM_BSP_GPIO_PWR_CTRL_EN;
   1b836:	2302      	movs	r3, #2
    i2c->address = i2c_addr;
   1b838:	7020      	strb	r0, [r4, #0]
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
   1b83a:	2501      	movs	r5, #1
    artemis_iom_initialize(&i2c->iom);
   1b83c:	1d20      	adds	r0, r4, #4
    module.power.pin = AM_BSP_GPIO_PWR_CTRL_EN;
   1b83e:	e9c4 3148 	strd	r3, r1, [r4, #288]	@ 0x120
    i2c->iom.module = 2;
   1b842:	7223      	strb	r3, [r4, #8]
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
   1b844:	7325      	strb	r5, [r4, #12]
    i2c->iom.config.ui32ClockFreq = AM_HAL_IOM_400KHZ;
   1b846:	6122      	str	r2, [r4, #16]
    artemis_iom_initialize(&i2c->iom);
   1b848:	f7ff ff06 	bl	1b658 <artemis_iom_initialize>

    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM2_SCL, g_AM_BSP_GPIO_IOM2_SCL));
   1b84c:	4b27      	ldr	r3, [pc, #156]	@ (1b8ec <artemis_piston_i2c_initialize+0xc0>)
   1b84e:	201b      	movs	r0, #27
   1b850:	6819      	ldr	r1, [r3, #0]
   1b852:	f003 fee5 	bl	1f620 <am_hal_gpio_pinconfig>
   1b856:	bb50      	cbnz	r0, 1b8ae <artemis_piston_i2c_initialize+0x82>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM2_SDA, g_AM_BSP_GPIO_IOM2_SDA));
   1b858:	4b25      	ldr	r3, [pc, #148]	@ (1b8f0 <artemis_piston_i2c_initialize+0xc4>)
   1b85a:	2019      	movs	r0, #25
   1b85c:	6819      	ldr	r1, [r3, #0]
   1b85e:	f003 fedf 	bl	1f620 <am_hal_gpio_pinconfig>
   1b862:	4601      	mov	r1, r0
   1b864:	2800      	cmp	r0, #0
   1b866:	d133      	bne.n	1b8d0 <artemis_piston_i2c_initialize+0xa4>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1b868:	e9d4 0348 	ldrd	r0, r3, [r4, #288]	@ 0x120
   1b86c:	6819      	ldr	r1, [r3, #0]
   1b86e:	f003 fed7 	bl	1f620 <am_hal_gpio_pinconfig>
   1b872:	4601      	mov	r1, r0
   1b874:	bb20      	cbnz	r0, 1b8c0 <artemis_piston_i2c_initialize+0x94>
    am_hal_gpio_output_set(module.power.pin);
}

void artemis_piston_i2c_power_off(void)
{
    am_hal_gpio_output_clear(module.power.pin);
   1b876:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   1b87a:	491e      	ldr	r1, [pc, #120]	@ (1b8f4 <artemis_piston_i2c_initialize+0xc8>)
   1b87c:	08da      	lsrs	r2, r3, #3
   1b87e:	f002 0204 	and.w	r2, r2, #4
   1b882:	2501      	movs	r5, #1
   1b884:	f003 031f 	and.w	r3, r3, #31
   1b888:	fa05 f303 	lsl.w	r3, r5, r3
   1b88c:	5053      	str	r3, [r2, r1]
    am_hal_systick_delay_us(1000);
   1b88e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1b892:	f005 fa8f 	bl	20db4 <am_hal_systick_delay_us>
    am_hal_gpio_output_set(module.power.pin);
   1b896:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   1b89a:	4917      	ldr	r1, [pc, #92]	@ (1b8f8 <artemis_piston_i2c_initialize+0xcc>)
   1b89c:	08da      	lsrs	r2, r3, #3
   1b89e:	f002 0204 	and.w	r2, r2, #4
   1b8a2:	f003 031f 	and.w	r3, r3, #31
   1b8a6:	409d      	lsls	r5, r3
   1b8a8:	5055      	str	r5, [r2, r1]
}
   1b8aa:	b003      	add	sp, #12
   1b8ac:	bd30      	pop	{r4, r5, pc}
   1b8ae:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM2_SCL, g_AM_BSP_GPIO_IOM2_SCL));
   1b8b0:	2071      	movs	r0, #113	@ 0x71
   1b8b2:	9000      	str	r0, [sp, #0]
   1b8b4:	4b11      	ldr	r3, [pc, #68]	@ (1b8fc <artemis_piston_i2c_initialize+0xd0>)
   1b8b6:	4a12      	ldr	r2, [pc, #72]	@ (1b900 <artemis_piston_i2c_initialize+0xd4>)
   1b8b8:	4812      	ldr	r0, [pc, #72]	@ (1b904 <artemis_piston_i2c_initialize+0xd8>)
   1b8ba:	f7ff fd25 	bl	1b308 <artemis_debug_halerror>
   1b8be:	e7cb      	b.n	1b858 <artemis_piston_i2c_initialize+0x2c>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1b8c0:	2073      	movs	r0, #115	@ 0x73
   1b8c2:	9000      	str	r0, [sp, #0]
   1b8c4:	4b0d      	ldr	r3, [pc, #52]	@ (1b8fc <artemis_piston_i2c_initialize+0xd0>)
   1b8c6:	4a0e      	ldr	r2, [pc, #56]	@ (1b900 <artemis_piston_i2c_initialize+0xd4>)
   1b8c8:	480f      	ldr	r0, [pc, #60]	@ (1b908 <artemis_piston_i2c_initialize+0xdc>)
   1b8ca:	f7ff fd1d 	bl	1b308 <artemis_debug_halerror>
   1b8ce:	e7d2      	b.n	1b876 <artemis_piston_i2c_initialize+0x4a>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM2_SDA, g_AM_BSP_GPIO_IOM2_SDA));
   1b8d0:	2072      	movs	r0, #114	@ 0x72
   1b8d2:	9000      	str	r0, [sp, #0]
   1b8d4:	4b09      	ldr	r3, [pc, #36]	@ (1b8fc <artemis_piston_i2c_initialize+0xd0>)
   1b8d6:	4a0a      	ldr	r2, [pc, #40]	@ (1b900 <artemis_piston_i2c_initialize+0xd4>)
   1b8d8:	480c      	ldr	r0, [pc, #48]	@ (1b90c <artemis_piston_i2c_initialize+0xe0>)
   1b8da:	f7ff fd15 	bl	1b308 <artemis_debug_halerror>
   1b8de:	e7c3      	b.n	1b868 <artemis_piston_i2c_initialize+0x3c>
   1b8e0:	100498cc 	.word	0x100498cc
   1b8e4:	00030f5c 	.word	0x00030f5c
   1b8e8:	00061a80 	.word	0x00061a80
   1b8ec:	00030f50 	.word	0x00030f50
   1b8f0:	00030f4c 	.word	0x00030f4c
   1b8f4:	40010098 	.word	0x40010098
   1b8f8:	40010090 	.word	0x40010090
   1b8fc:	0002faec 	.word	0x0002faec
   1b900:	00030e64 	.word	0x00030e64
   1b904:	0002fb0c 	.word	0x0002fb0c
   1b908:	0002fb94 	.word	0x0002fb94
   1b90c:	0002fb50 	.word	0x0002fb50

0001b910 <artemis_piston_i2c_uninitialize>:
    i2c->iom.module = 2;
   1b910:	4b02      	ldr	r3, [pc, #8]	@ (1b91c <artemis_piston_i2c_uninitialize+0xc>)
   1b912:	2202      	movs	r2, #2
    artemis_iom_uninitialize(&i2c->iom);
   1b914:	1d18      	adds	r0, r3, #4
    i2c->iom.module = 2;
   1b916:	721a      	strb	r2, [r3, #8]
    artemis_iom_uninitialize(&i2c->iom);
   1b918:	f7ff beea 	b.w	1b6f0 <artemis_iom_uninitialize>
   1b91c:	100498cc 	.word	0x100498cc

0001b920 <artemis_piston_i2c_send_msg>:
}

void artemis_piston_i2c_send_msg(uint8_t *msg, uint16_t len, bool stop)
{
   1b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b924:	b084      	sub	sp, #16

    artemis_i2c_t *i2c = &module.i2c;
    artemis_stream_t txstream = {0};
   1b926:	2300      	movs	r3, #0
{
   1b928:	460e      	mov	r6, r1
   1b92a:	4605      	mov	r5, r0
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b92c:	491c      	ldr	r1, [pc, #112]	@ (1b9a0 <artemis_piston_i2c_send_msg+0x80>)
   1b92e:	4668      	mov	r0, sp
{
   1b930:	4690      	mov	r8, r2
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b932:	2280      	movs	r2, #128	@ 0x80
    artemis_stream_t txstream = {0};
   1b934:	e9cd 3300 	strd	r3, r3, [sp]
   1b938:	e9cd 3302 	strd	r3, r3, [sp, #8]
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b93c:	f000 f8a2 	bl	1ba84 <artemis_stream_setbuffer>
    artemis_stream_reset(&txstream);
   1b940:	4668      	mov	r0, sp
   1b942:	f000 f8ed 	bl	1bb20 <artemis_stream_reset>

    while(len > 0)
   1b946:	b346      	cbz	r6, 1b99a <artemis_piston_i2c_send_msg+0x7a>
    {
        if(len > ARTEMIS_PISTON_BUFFER_LENGTH)
   1b948:	2e80      	cmp	r6, #128	@ 0x80
   1b94a:	d91c      	bls.n	1b986 <artemis_piston_i2c_send_msg+0x66>
        {
            artemis_stream_write(&txstream, msg, ARTEMIS_PISTON_BUFFER_LENGTH);
            artemis_i2c_send(i2c, true, &txstream);
   1b94c:	4f15      	ldr	r7, [pc, #84]	@ (1b9a4 <artemis_piston_i2c_send_msg+0x84>)
        if(len > ARTEMIS_PISTON_BUFFER_LENGTH)
   1b94e:	4634      	mov	r4, r6
            artemis_stream_write(&txstream, msg, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b950:	2280      	movs	r2, #128	@ 0x80
   1b952:	4629      	mov	r1, r5
   1b954:	4668      	mov	r0, sp
   1b956:	f000 f8ab 	bl	1bab0 <artemis_stream_write>
            artemis_stream_reset(&txstream);
            len -= ARTEMIS_PISTON_BUFFER_LENGTH;
   1b95a:	3c80      	subs	r4, #128	@ 0x80
            artemis_i2c_send(i2c, true, &txstream);
   1b95c:	466a      	mov	r2, sp
   1b95e:	2101      	movs	r1, #1
   1b960:	4638      	mov	r0, r7
   1b962:	f7ff fd1b 	bl	1b39c <artemis_i2c_send>
            len -= ARTEMIS_PISTON_BUFFER_LENGTH;
   1b966:	b2a4      	uxth	r4, r4
            artemis_stream_reset(&txstream);
   1b968:	4668      	mov	r0, sp
   1b96a:	f000 f8d9 	bl	1bb20 <artemis_stream_reset>
        if(len > ARTEMIS_PISTON_BUFFER_LENGTH)
   1b96e:	2c80      	cmp	r4, #128	@ 0x80
   1b970:	d8ee      	bhi.n	1b950 <artemis_piston_i2c_send_msg+0x30>
   1b972:	f1a6 0381 	sub.w	r3, r6, #129	@ 0x81
   1b976:	f3c3 13c8 	ubfx	r3, r3, #7, #9
   1b97a:	3e80      	subs	r6, #128	@ 0x80
   1b97c:	ebc3 2343 	rsb	r3, r3, r3, lsl #9
   1b980:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
   1b984:	b2b6      	uxth	r6, r6
        }
        else
        {
            artemis_stream_write(&txstream, msg, len);
   1b986:	4632      	mov	r2, r6
   1b988:	4629      	mov	r1, r5
   1b98a:	4668      	mov	r0, sp
   1b98c:	f000 f890 	bl	1bab0 <artemis_stream_write>
            artemis_i2c_send(i2c, stop, &txstream);
   1b990:	4804      	ldr	r0, [pc, #16]	@ (1b9a4 <artemis_piston_i2c_send_msg+0x84>)
   1b992:	466a      	mov	r2, sp
   1b994:	4641      	mov	r1, r8
   1b996:	f7ff fd01 	bl	1b39c <artemis_i2c_send>
//        artemis_i2c_send(i2c, false, &txstream);
//    } else {
//      artemis_i2c_send(i2c, stop, &txstream);
//    }
//  }
}
   1b99a:	b004      	add	sp, #16
   1b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b9a0:	100498ec 	.word	0x100498ec
   1b9a4:	100498cc 	.word	0x100498cc

0001b9a8 <artemis_piston_i2c_read>:
    return (uint16_t)(pBuf - pBufStart);

}

void artemis_piston_i2c_read(uint8_t addr, uint8_t *data, uint16_t len)
{
   1b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    artemis_i2c_t *i2c = &module.i2c;

    artemis_stream_t rxstream = {0};
   1b9aa:	2400      	movs	r4, #0
{
   1b9ac:	b089      	sub	sp, #36	@ 0x24
    artemis_stream_t rxstream = {0};
   1b9ae:	e9cd 4400 	strd	r4, r4, [sp]
   1b9b2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    artemis_stream_t txstream = {0};
   1b9b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1b9ba:	e9cd 4406 	strd	r4, r4, [sp, #24]
    artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b9be:	4c18      	ldr	r4, [pc, #96]	@ (1ba20 <artemis_piston_i2c_read+0x78>)
{
   1b9c0:	4615      	mov	r5, r2
   1b9c2:	4607      	mov	r7, r0
   1b9c4:	460e      	mov	r6, r1
    artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b9c6:	4668      	mov	r0, sp
   1b9c8:	4621      	mov	r1, r4
   1b9ca:	2280      	movs	r2, #128	@ 0x80
   1b9cc:	f000 f85a 	bl	1ba84 <artemis_stream_setbuffer>
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1b9d0:	2280      	movs	r2, #128	@ 0x80
   1b9d2:	f1a4 0180 	sub.w	r1, r4, #128	@ 0x80
   1b9d6:	a804      	add	r0, sp, #16
   1b9d8:	f000 f854 	bl	1ba84 <artemis_stream_setbuffer>
    //artemis_stream_put(&txstream, ARTEMIS_PISTON_BUFFER_LENGTH);

    //i2c->address = 0x6C | 0x01;

    /** Send the command to retreive data @addr 0xFF */
    artemis_stream_reset(&txstream);
   1b9dc:	a804      	add	r0, sp, #16
   1b9de:	f000 f89f 	bl	1bb20 <artemis_stream_reset>
    artemis_stream_reset(&rxstream);
   1b9e2:	4668      	mov	r0, sp
   1b9e4:	f000 f89c 	bl	1bb20 <artemis_stream_reset>
    //artemis_stream_put(&txstream, ARTEMIS_PISTON_I2C_DATA_LEN_REG);


    artemis_stream_put(&txstream, addr);
    //artemis_stream_put(&txstream, 0x00);
    artemis_i2c_send(i2c, true, &txstream);
   1b9e8:	3ca0      	subs	r4, #160	@ 0xa0
    artemis_stream_put(&txstream, addr);
   1b9ea:	4639      	mov	r1, r7
   1b9ec:	a804      	add	r0, sp, #16
   1b9ee:	f000 f84f 	bl	1ba90 <artemis_stream_put>
    artemis_i2c_send(i2c, true, &txstream);
   1b9f2:	aa04      	add	r2, sp, #16
   1b9f4:	2101      	movs	r1, #1
   1b9f6:	4620      	mov	r0, r4
   1b9f8:	f7ff fcd0 	bl	1b39c <artemis_i2c_send>

    am_hal_systick_delay_us(50000);
   1b9fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
   1ba00:	f005 f9d8 	bl	20db4 <am_hal_systick_delay_us>

    artemis_i2c_receive(i2c, true, &rxstream, len);
   1ba04:	462b      	mov	r3, r5
   1ba06:	466a      	mov	r2, sp
   1ba08:	4620      	mov	r0, r4
   1ba0a:	2101      	movs	r1, #1
   1ba0c:	f7ff fcf2 	bl	1b3f4 <artemis_i2c_receive>
    artemis_stream_read(&rxstream, data, len);
   1ba10:	462a      	mov	r2, r5
   1ba12:	4631      	mov	r1, r6
   1ba14:	4668      	mov	r0, sp
   1ba16:	f000 f867 	bl	1bae8 <artemis_stream_read>
}
   1ba1a:	b009      	add	sp, #36	@ 0x24
   1ba1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba1e:	bf00      	nop
   1ba20:	1004996c 	.word	0x1004996c

0001ba24 <artemis_piston_set_write_mode>:


void artemis_piston_set_write_mode(bool state)
{
   1ba24:	b500      	push	{lr}
    artemis_stream_t txstream = {0};
   1ba26:	2300      	movs	r3, #0
{
   1ba28:	b087      	sub	sp, #28
    uint8_t key = 0x00;
   1ba2a:	2800      	cmp	r0, #0
   1ba2c:	bf14      	ite	ne
   1ba2e:	20a5      	movne	r0, #165	@ 0xa5
   1ba30:	4618      	moveq	r0, r3
    uint8_t msg[2] = {0x07, 0x00};
   1ba32:	f04f 0c07 	mov.w	ip, #7
   1ba36:	f8ad c004 	strh.w	ip, [sp, #4]
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1ba3a:	490f      	ldr	r1, [pc, #60]	@ (1ba78 <artemis_piston_set_write_mode+0x54>)
    if(state)
    {
        key = 0xA5;
    }
    msg[1] = key;
   1ba3c:	f88d 0005 	strb.w	r0, [sp, #5]
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1ba40:	2280      	movs	r2, #128	@ 0x80
   1ba42:	a802      	add	r0, sp, #8
    artemis_stream_t txstream = {0};
   1ba44:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1ba48:	9302      	str	r3, [sp, #8]
   1ba4a:	9305      	str	r3, [sp, #20]
    artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_PISTON_BUFFER_LENGTH);
   1ba4c:	f000 f81a 	bl	1ba84 <artemis_stream_setbuffer>
    artemis_stream_reset(&txstream);
   1ba50:	a802      	add	r0, sp, #8
   1ba52:	f000 f865 	bl	1bb20 <artemis_stream_reset>
            artemis_stream_write(&txstream, msg, len);
   1ba56:	a901      	add	r1, sp, #4
   1ba58:	2202      	movs	r2, #2
   1ba5a:	a802      	add	r0, sp, #8
   1ba5c:	f000 f828 	bl	1bab0 <artemis_stream_write>
            artemis_i2c_send(i2c, stop, &txstream);
   1ba60:	aa02      	add	r2, sp, #8
   1ba62:	2101      	movs	r1, #1
   1ba64:	4805      	ldr	r0, [pc, #20]	@ (1ba7c <artemis_piston_set_write_mode+0x58>)
   1ba66:	f7ff fc99 	bl	1b39c <artemis_i2c_send>

    artemis_piston_i2c_send_msg(msg, 2, true);
    am_hal_systick_delay_us(200000);
   1ba6a:	4805      	ldr	r0, [pc, #20]	@ (1ba80 <artemis_piston_set_write_mode+0x5c>)
   1ba6c:	f005 f9a2 	bl	20db4 <am_hal_systick_delay_us>
}
   1ba70:	b007      	add	sp, #28
   1ba72:	f85d fb04 	ldr.w	pc, [sp], #4
   1ba76:	bf00      	nop
   1ba78:	100498ec 	.word	0x100498ec
   1ba7c:	100498cc 	.word	0x100498cc
   1ba80:	00030d40 	.word	0x00030d40

0001ba84 <artemis_stream_setbuffer>:
///
void artemis_stream_setbuffer(artemis_stream_t *stream, uint8_t *buffer, size_t length)
{
    stream->buffer = buffer;
    stream->length = length;
    stream->written  = 0;
   1ba84:	2300      	movs	r3, #0
    stream->length = length;
   1ba86:	e9c0 1200 	strd	r1, r2, [r0]
    stream->read   = 0;
   1ba8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1ba8e:	4770      	bx	lr

0001ba90 <artemis_stream_put>:
///
///
///
size_t artemis_stream_put(artemis_stream_t *stream, uint8_t data)
{
    if (stream->written < stream->length) {
   1ba90:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1ba94:	4293      	cmp	r3, r2
   1ba96:	d301      	bcc.n	1ba9c <artemis_stream_put+0xc>
        stream->buffer[stream->written++] = data;
        return(1);
    }

    return(0);
   1ba98:	2000      	movs	r0, #0
}
   1ba9a:	4770      	bx	lr
        stream->buffer[stream->written++] = data;
   1ba9c:	6802      	ldr	r2, [r0, #0]
{
   1ba9e:	b410      	push	{r4}
        stream->buffer[stream->written++] = data;
   1baa0:	1c5c      	adds	r4, r3, #1
   1baa2:	6084      	str	r4, [r0, #8]
   1baa4:	54d1      	strb	r1, [r2, r3]
        return(1);
   1baa6:	2001      	movs	r0, #1
}
   1baa8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1baac:	4770      	bx	lr
   1baae:	bf00      	nop

0001bab0 <artemis_stream_write>:
///
///
///
size_t artemis_stream_write(artemis_stream_t *stream, uint8_t *data, size_t length)
{
    for (size_t i = 0; i < length; i++) {
   1bab0:	b1c2      	cbz	r2, 1bae4 <artemis_stream_write+0x34>
{
   1bab2:	b530      	push	{r4, r5, lr}
   1bab4:	188b      	adds	r3, r1, r2
   1bab6:	f101 3cff 	add.w	ip, r1, #4294967295
   1baba:	3b01      	subs	r3, #1
    if (stream->written < stream->length) {
   1babc:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   1bac0:	42ac      	cmp	r4, r5
   1bac2:	d304      	bcc.n	1bace <artemis_stream_write+0x1e>
   1bac4:	f1c1 0101 	rsb	r1, r1, #1
   1bac8:	eb01 000c 	add.w	r0, r1, ip
            return(i);
        }
    }

    return(length);
}
   1bacc:	bd30      	pop	{r4, r5, pc}
        if (!artemis_stream_put(stream, data[i])) {
   1bace:	f81c ef01 	ldrb.w	lr, [ip, #1]!
        stream->buffer[stream->written++] = data;
   1bad2:	1c65      	adds	r5, r4, #1
   1bad4:	6085      	str	r5, [r0, #8]
   1bad6:	6805      	ldr	r5, [r0, #0]
    for (size_t i = 0; i < length; i++) {
   1bad8:	459c      	cmp	ip, r3
        stream->buffer[stream->written++] = data;
   1bada:	f805 e004 	strb.w	lr, [r5, r4]
    for (size_t i = 0; i < length; i++) {
   1bade:	d1ed      	bne.n	1babc <artemis_stream_write+0xc>
    return(length);
   1bae0:	4610      	mov	r0, r2
}
   1bae2:	bd30      	pop	{r4, r5, pc}
    return(length);
   1bae4:	4610      	mov	r0, r2
}
   1bae6:	4770      	bx	lr

0001bae8 <artemis_stream_read>:
///
///
///
size_t artemis_stream_read(artemis_stream_t *stream, uint8_t *data, size_t length)
{
    for (size_t i = 0; i < length; i++) {
   1bae8:	b1c2      	cbz	r2, 1bb1c <artemis_stream_read+0x34>
{
   1baea:	b430      	push	{r4, r5}
   1baec:	188b      	adds	r3, r1, r2
   1baee:	f101 3cff 	add.w	ip, r1, #4294967295
   1baf2:	3b01      	subs	r3, #1
    if (stream->read < stream->written) {
   1baf4:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
   1baf8:	42ac      	cmp	r4, r5
   1bafa:	d305      	bcc.n	1bb08 <artemis_stream_read+0x20>
   1bafc:	f1c1 0101 	rsb	r1, r1, #1
   1bb00:	eb01 000c 	add.w	r0, r1, ip
            return(i);
        }
    }

    return(length);
}
   1bb04:	bc30      	pop	{r4, r5}
   1bb06:	4770      	bx	lr
        *data = stream->buffer[stream->read++];
   1bb08:	1c65      	adds	r5, r4, #1
   1bb0a:	60c5      	str	r5, [r0, #12]
   1bb0c:	6805      	ldr	r5, [r0, #0]
   1bb0e:	5d2c      	ldrb	r4, [r5, r4]
   1bb10:	f80c 4f01 	strb.w	r4, [ip, #1]!
    for (size_t i = 0; i < length; i++) {
   1bb14:	459c      	cmp	ip, r3
   1bb16:	d1ed      	bne.n	1baf4 <artemis_stream_read+0xc>
    return(length);
   1bb18:	4610      	mov	r0, r2
   1bb1a:	e7f3      	b.n	1bb04 <artemis_stream_read+0x1c>
   1bb1c:	4610      	mov	r0, r2
}
   1bb1e:	4770      	bx	lr

0001bb20 <artemis_stream_reset>:
///
///
///
void artemis_stream_reset(artemis_stream_t *stream)
{
    stream->written = 0;
   1bb20:	2300      	movs	r3, #0
   1bb22:	e9c0 3302 	strd	r3, r3, [r0, #8]
    stream->read = 0;
}
   1bb26:	4770      	bx	lr

0001bb28 <artemis_sc_initialize>:
//
// Global Functions
//
//*****************************************************************************
void artemis_sc_initialize(void)
{
   1bb28:	b530      	push	{r4, r5, lr}
    module.power.pin = AM_BSP_GPIO_SC_ON;
    module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_ON;
   1bb2a:	4b25      	ldr	r3, [pc, #148]	@ (1bbc0 <artemis_sc_initialize+0x98>)
    module.power.pin = AM_BSP_GPIO_SC_ON;
   1bb2c:	4c25      	ldr	r4, [pc, #148]	@ (1bbc4 <artemis_sc_initialize+0x9c>)
    module.shutdown.pin = AM_BSP_GPIO_SC_NSHDN;
    module.shutdown.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_NSHDN;
    module.good.pin = AM_BSP_GPIO_SC_PGOOD;
    module.good.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_PGOOD;
   1bb2e:	4a26      	ldr	r2, [pc, #152]	@ (1bbc8 <artemis_sc_initialize+0xa0>)
    module.shutdown.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_NSHDN;
   1bb30:	4d26      	ldr	r5, [pc, #152]	@ (1bbcc <artemis_sc_initialize+0xa4>)
    module.shutdown.pin = AM_BSP_GPIO_SC_NSHDN;
   1bb32:	2100      	movs	r1, #0
    module.power.pin = AM_BSP_GPIO_SC_ON;
   1bb34:	2001      	movs	r0, #1
{
   1bb36:	b083      	sub	sp, #12
    module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_ON;
   1bb38:	e9c4 0300 	strd	r0, r3, [r4]
    module.shutdown.pin = AM_BSP_GPIO_SC_NSHDN;
   1bb3c:	60a1      	str	r1, [r4, #8]

    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1bb3e:	6819      	ldr	r1, [r3, #0]
    module.shutdown.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_NSHDN;
   1bb40:	60e5      	str	r5, [r4, #12]
    module.good.pin = AM_BSP_GPIO_SC_PGOOD;
   1bb42:	231c      	movs	r3, #28
    module.good.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_SC_PGOOD;
   1bb44:	e9c4 3204 	strd	r3, r2, [r4, #16]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1bb48:	f003 fd6a 	bl	1f620 <am_hal_gpio_pinconfig>
   1bb4c:	b978      	cbnz	r0, 1bb6e <artemis_sc_initialize+0x46>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.shutdown.pin, *module.shutdown.pinConfig));
   1bb4e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1bb52:	6819      	ldr	r1, [r3, #0]
   1bb54:	f003 fd64 	bl	1f620 <am_hal_gpio_pinconfig>
   1bb58:	4601      	mov	r1, r0
   1bb5a:	b9c0      	cbnz	r0, 1bb8e <artemis_sc_initialize+0x66>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.good.pin, *module.good.pinConfig));
   1bb5c:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
   1bb60:	6819      	ldr	r1, [r3, #0]
   1bb62:	f003 fd5d 	bl	1f620 <am_hal_gpio_pinconfig>
   1bb66:	4601      	mov	r1, r0
   1bb68:	bb00      	cbnz	r0, 1bbac <artemis_sc_initialize+0x84>
}
   1bb6a:	b003      	add	sp, #12
   1bb6c:	bd30      	pop	{r4, r5, pc}
   1bb6e:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1bb70:	2062      	movs	r0, #98	@ 0x62
   1bb72:	4b17      	ldr	r3, [pc, #92]	@ (1bbd0 <artemis_sc_initialize+0xa8>)
   1bb74:	4a17      	ldr	r2, [pc, #92]	@ (1bbd4 <artemis_sc_initialize+0xac>)
   1bb76:	9000      	str	r0, [sp, #0]
   1bb78:	4817      	ldr	r0, [pc, #92]	@ (1bbd8 <artemis_sc_initialize+0xb0>)
   1bb7a:	f7ff fbc5 	bl	1b308 <artemis_debug_halerror>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.shutdown.pin, *module.shutdown.pinConfig));
   1bb7e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1bb82:	6819      	ldr	r1, [r3, #0]
   1bb84:	f003 fd4c 	bl	1f620 <am_hal_gpio_pinconfig>
   1bb88:	4601      	mov	r1, r0
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	d0e6      	beq.n	1bb5c <artemis_sc_initialize+0x34>
   1bb8e:	2063      	movs	r0, #99	@ 0x63
   1bb90:	4b0f      	ldr	r3, [pc, #60]	@ (1bbd0 <artemis_sc_initialize+0xa8>)
   1bb92:	4a10      	ldr	r2, [pc, #64]	@ (1bbd4 <artemis_sc_initialize+0xac>)
   1bb94:	9000      	str	r0, [sp, #0]
   1bb96:	4811      	ldr	r0, [pc, #68]	@ (1bbdc <artemis_sc_initialize+0xb4>)
   1bb98:	f7ff fbb6 	bl	1b308 <artemis_debug_halerror>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.good.pin, *module.good.pinConfig));
   1bb9c:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
   1bba0:	6819      	ldr	r1, [r3, #0]
   1bba2:	f003 fd3d 	bl	1f620 <am_hal_gpio_pinconfig>
   1bba6:	4601      	mov	r1, r0
   1bba8:	2800      	cmp	r0, #0
   1bbaa:	d0de      	beq.n	1bb6a <artemis_sc_initialize+0x42>
   1bbac:	2464      	movs	r4, #100	@ 0x64
   1bbae:	4b08      	ldr	r3, [pc, #32]	@ (1bbd0 <artemis_sc_initialize+0xa8>)
   1bbb0:	4a08      	ldr	r2, [pc, #32]	@ (1bbd4 <artemis_sc_initialize+0xac>)
   1bbb2:	480b      	ldr	r0, [pc, #44]	@ (1bbe0 <artemis_sc_initialize+0xb8>)
   1bbb4:	9400      	str	r4, [sp, #0]
   1bbb6:	f7ff fba7 	bl	1b308 <artemis_debug_halerror>
}
   1bbba:	b003      	add	sp, #12
   1bbbc:	bd30      	pop	{r4, r5, pc}
   1bbbe:	bf00      	nop
   1bbc0:	00030fa0 	.word	0x00030fa0
   1bbc4:	100499f4 	.word	0x100499f4
   1bbc8:	00030fa4 	.word	0x00030fa4
   1bbcc:	00030fa8 	.word	0x00030fa8
   1bbd0:	0002fbd8 	.word	0x0002fbd8
   1bbd4:	00030e84 	.word	0x00030e84
   1bbd8:	0002fb94 	.word	0x0002fb94
   1bbdc:	0002fbfc 	.word	0x0002fbfc
   1bbe0:	0002fc44 	.word	0x0002fc44

0001bbe4 <artemis_sc_power_startup>:

bool artemis_sc_power_startup(void)
{
   1bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return false;
}

void artemis_sc_power_on(void)
{
	am_hal_gpio_output_set(module.power.pin);
   1bbe8:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 1bc74 <artemis_sc_power_startup+0x90>
   1bbec:	4c1d      	ldr	r4, [pc, #116]	@ (1bc64 <artemis_sc_power_startup+0x80>)
   1bbee:	f8d8 3000 	ldr.w	r3, [r8]
	am_hal_gpio_output_set(module.shutdown.pin);
   1bbf2:	f8d8 1008 	ldr.w	r1, [r8, #8]
	am_hal_gpio_output_clear(module.power.pin);
}

bool artemis_sc_power_good(void)
{
	return am_hal_gpio_input_read(module.good.pin);
   1bbf6:	4f1c      	ldr	r7, [pc, #112]	@ (1bc68 <artemis_sc_power_startup+0x84>)
		ARTEMIS_DEBUG_PRINTF("Capacitor charging...\n");
   1bbf8:	4e1c      	ldr	r6, [pc, #112]	@ (1bc6c <artemis_sc_power_startup+0x88>)
	am_hal_gpio_output_set(module.power.pin);
   1bbfa:	08d8      	lsrs	r0, r3, #3
   1bbfc:	2201      	movs	r2, #1
   1bbfe:	f000 0004 	and.w	r0, r0, #4
   1bc02:	f003 031f 	and.w	r3, r3, #31
   1bc06:	fa02 f303 	lsl.w	r3, r2, r3
   1bc0a:	5103      	str	r3, [r0, r4]
	am_hal_gpio_output_set(module.shutdown.pin);
   1bc0c:	08cb      	lsrs	r3, r1, #3
   1bc0e:	f003 0304 	and.w	r3, r3, #4
   1bc12:	f001 011f 	and.w	r1, r1, #31
   1bc16:	408a      	lsls	r2, r1
   1bc18:	511a      	str	r2, [r3, r4]
   1bc1a:	253c      	movs	r5, #60	@ 0x3c
   1bc1c:	e00b      	b.n	1bc36 <artemis_sc_power_startup+0x52>
		ARTEMIS_DEBUG_PRINTF("Capacitor charging...\n");
   1bc1e:	f7f5 fa23 	bl	11068 <am_util_stdio_printf>
	for(uint16_t i=0; i<ARTEMIS_SC_POWER_TIMEOUT_SEC; i++)
   1bc22:	3d01      	subs	r5, #1
		ARTEMIS_DEBUG_PRINTF("Capacitor charging...\n");
   1bc24:	4630      	mov	r0, r6
   1bc26:	f002 f9a7 	bl	1df78 <datalogger_log_debug>
	for(uint16_t i=0; i<ARTEMIS_SC_POWER_TIMEOUT_SEC; i++)
   1bc2a:	b2ad      	uxth	r5, r5
        vTaskDelay(pdMS_TO_TICKS(1000UL));
   1bc2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1bc30:	f7f3 fbd8 	bl	f3e4 <vTaskDelay>
	for(uint16_t i=0; i<ARTEMIS_SC_POWER_TIMEOUT_SEC; i++)
   1bc34:	b195      	cbz	r5, 1bc5c <artemis_sc_power_startup+0x78>
	return am_hal_gpio_input_read(module.good.pin);
   1bc36:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1bc3a:	08d1      	lsrs	r1, r2, #3
   1bc3c:	f001 0104 	and.w	r1, r1, #4
   1bc40:	f002 021f 	and.w	r2, r2, #31
   1bc44:	59cb      	ldr	r3, [r1, r7]
   1bc46:	40d3      	lsrs	r3, r2
		if(artemis_sc_power_good())
   1bc48:	f013 0401 	ands.w	r4, r3, #1
		ARTEMIS_DEBUG_PRINTF("Capacitor charging...\n");
   1bc4c:	4630      	mov	r0, r6
		if(artemis_sc_power_good())
   1bc4e:	d0e6      	beq.n	1bc1e <artemis_sc_power_startup+0x3a>
			ARTEMIS_DEBUG_PRINTF("Capacitors charged\n");
   1bc50:	4807      	ldr	r0, [pc, #28]	@ (1bc70 <artemis_sc_power_startup+0x8c>)
   1bc52:	f7f5 fa09 	bl	11068 <am_util_stdio_printf>
   1bc56:	4806      	ldr	r0, [pc, #24]	@ (1bc70 <artemis_sc_power_startup+0x8c>)
   1bc58:	f002 f98e 	bl	1df78 <datalogger_log_debug>
}
   1bc5c:	4620      	mov	r0, r4
   1bc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc62:	bf00      	nop
   1bc64:	40010090 	.word	0x40010090
   1bc68:	40010080 	.word	0x40010080
   1bc6c:	0002fc98 	.word	0x0002fc98
   1bc70:	0002fc84 	.word	0x0002fc84
   1bc74:	100499f4 	.word	0x100499f4

0001bc78 <artemis_sc_power_off>:
	am_hal_gpio_output_clear(module.shutdown.pin);
   1bc78:	4a0c      	ldr	r2, [pc, #48]	@ (1bcac <artemis_sc_power_off+0x34>)
   1bc7a:	6893      	ldr	r3, [r2, #8]
	am_hal_gpio_output_clear(module.power.pin);
   1bc7c:	6811      	ldr	r1, [r2, #0]
	am_hal_gpio_output_clear(module.shutdown.pin);
   1bc7e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
	am_hal_gpio_output_clear(module.power.pin);
   1bc82:	08c8      	lsrs	r0, r1, #3
{
   1bc84:	b410      	push	{r4}
	am_hal_gpio_output_clear(module.shutdown.pin);
   1bc86:	2201      	movs	r2, #1
   1bc88:	4c09      	ldr	r4, [pc, #36]	@ (1bcb0 <artemis_sc_power_off+0x38>)
   1bc8a:	f00c 0c04 	and.w	ip, ip, #4
   1bc8e:	f003 031f 	and.w	r3, r3, #31
	am_hal_gpio_output_clear(module.power.pin);
   1bc92:	f000 0004 	and.w	r0, r0, #4
   1bc96:	f001 011f 	and.w	r1, r1, #31
	am_hal_gpio_output_clear(module.shutdown.pin);
   1bc9a:	fa02 f303 	lsl.w	r3, r2, r3
	am_hal_gpio_output_clear(module.power.pin);
   1bc9e:	408a      	lsls	r2, r1
	am_hal_gpio_output_clear(module.shutdown.pin);
   1bca0:	f84c 3004 	str.w	r3, [ip, r4]
	am_hal_gpio_output_clear(module.power.pin);
   1bca4:	5102      	str	r2, [r0, r4]
}
   1bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bcaa:	4770      	bx	lr
   1bcac:	100499f4 	.word	0x100499f4
   1bcb0:	40010098 	.word	0x40010098

0001bcb4 <artemis_time_initialize>:

///
///
///
void artemis_time_initialize(void)
{
   1bcb4:	b508      	push	{r3, lr}
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
   1bcb6:	f44f 7080 	mov.w	r0, #256	@ 0x100
   1bcba:	f005 f81f 	bl	20cfc <am_hal_stimer_int_enable>
   1bcbe:	4b06      	ldr	r3, [pc, #24]	@ (1bcd8 <artemis_time_initialize+0x24>)
   1bcc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
   1bcc4:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(STIMER_IRQn);

    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
   1bcc6:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
   1bcca:	f004 ffb1 	bl	20c30 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_HFRC_3MHZ);
}
   1bcce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_stimer_config(AM_HAL_STIMER_HFRC_3MHZ);
   1bcd2:	2001      	movs	r0, #1
   1bcd4:	f004 bfac 	b.w	20c30 <am_hal_stimer_config>
   1bcd8:	e000e100 	.word	0xe000e100

0001bcdc <am_stimer_isr>:

///
/// define stimer overflow interrupt; see artemis_startup.c
///
void am_stimer_isr(void)
{
   1bcdc:	b508      	push	{r3, lr}
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_OVERFLOW);
   1bcde:	f44f 7080 	mov.w	r0, #256	@ 0x100
   1bce2:	f005 f815 	bl	20d10 <am_hal_stimer_int_clear>
    module.overflow++;
   1bce6:	4a02      	ldr	r2, [pc, #8]	@ (1bcf0 <am_stimer_isr+0x14>)
   1bce8:	6893      	ldr	r3, [r2, #8]
   1bcea:	3301      	adds	r3, #1
   1bcec:	6093      	str	r3, [r2, #8]
}
   1bcee:	bd08      	pop	{r3, pc}
   1bcf0:	10049a10 	.word	0x10049a10

0001bcf4 <artemis_uart_initialize>:
#ifdef FREERTOS
EventGroupHandle_t xUartEventHandle;
#endif

void artemis_uart_initialize(artemis_uart_t *uart, uint32_t baudrate)
{
   1bcf4:	b530      	push	{r4, r5, lr}
   1bcf6:	4604      	mov	r4, r0
    uart->config.ui32BaudRate = baudrate;
    uart->config.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
    uart->config.ui32Parity = AM_HAL_UART_PARITY_NONE;
    uart->config.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
    uart->config.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
    uart->config.pui8TxBuffer = module.txbuffer;
   1bcf8:	4d36      	ldr	r5, [pc, #216]	@ (1bdd4 <artemis_uart_initialize+0xe0>)
    uart->config.ui32Parity = AM_HAL_UART_PARITY_NONE;
   1bcfa:	2300      	movs	r3, #0
    uart->config.ui32TxBufferSize = ARTEMIS_UART_BUFFER_LENGTH;
   1bcfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    uart->config.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   1bd00:	2060      	movs	r0, #96	@ 0x60
{
   1bd02:	b083      	sub	sp, #12
    uart->config.ui32BaudRate = baudrate;
   1bd04:	e9c4 1002 	strd	r1, r0, [r4, #8]
    uart->config.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   1bd08:	e9c4 3304 	strd	r3, r3, [r4, #16]
    uart->config.pui8RxBuffer = module.rxbuffer;
   1bd0c:	18a9      	adds	r1, r5, r2
    uart->config.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   1bd0e:	61a3      	str	r3, [r4, #24]
    uart->config.ui32RxBufferSize = ARTEMIS_UART_BUFFER_LENGTH;
    uart->config.ui32FifoLevels = AM_HAL_UART_TX_FIFO_7_8 | AM_HAL_UART_RX_FIFO_7_8 ;
   1bd10:	2324      	movs	r3, #36	@ 0x24
    uart->config.pui8RxBuffer = module.rxbuffer;
   1bd12:	62a1      	str	r1, [r4, #40]	@ 0x28
    uart->config.ui32TxBufferSize = ARTEMIS_UART_BUFFER_LENGTH;
   1bd14:	e9c4 5208 	strd	r5, r2, [r4, #32]

    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_initialize(uart->module, &uart->handle));
   1bd18:	7920      	ldrb	r0, [r4, #4]
    uart->config.ui32RxBufferSize = ARTEMIS_UART_BUFFER_LENGTH;
   1bd1a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    uart->config.ui32FifoLevels = AM_HAL_UART_TX_FIFO_7_8 | AM_HAL_UART_RX_FIFO_7_8 ;
   1bd1c:	61e3      	str	r3, [r4, #28]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_initialize(uart->module, &uart->handle));
   1bd1e:	4621      	mov	r1, r4
   1bd20:	f005 f894 	bl	20e4c <am_hal_uart_initialize>
   1bd24:	2800      	cmp	r0, #0
   1bd26:	d135      	bne.n	1bd94 <artemis_uart_initialize+0xa0>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_power_control(uart->handle, AM_HAL_SYSCTRL_WAKE, false));
   1bd28:	2200      	movs	r2, #0
   1bd2a:	4611      	mov	r1, r2
   1bd2c:	6820      	ldr	r0, [r4, #0]
   1bd2e:	f005 f8b5 	bl	20e9c <am_hal_uart_power_control>
   1bd32:	4601      	mov	r1, r0
   1bd34:	2800      	cmp	r0, #0
   1bd36:	d13e      	bne.n	1bdb6 <artemis_uart_initialize+0xc2>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_configure(uart->handle, &uart->config));
   1bd38:	4621      	mov	r1, r4
   1bd3a:	f851 0b08 	ldr.w	r0, [r1], #8
   1bd3e:	f005 f925 	bl	20f8c <am_hal_uart_configure>
   1bd42:	4601      	mov	r1, r0
   1bd44:	2800      	cmp	r0, #0
   1bd46:	d12e      	bne.n	1bda6 <artemis_uart_initialize+0xb2>

    am_hal_uart_interrupt_enable(uart->handle, (AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT));
   1bd48:	2150      	movs	r1, #80	@ 0x50
   1bd4a:	6820      	ldr	r0, [r4, #0]
   1bd4c:	f005 fce4 	bl	21718 <am_hal_uart_interrupt_enable>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bd50:	4b21      	ldr	r3, [pc, #132]	@ (1bdd8 <artemis_uart_initialize+0xe4>)
   1bd52:	2280      	movs	r2, #128	@ 0x80
   1bd54:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310

#ifdef FREERTOS
    NVIC_SetPriority(UART1_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
    xUartEventHandle = xEventGroupCreate();
   1bd58:	f7f1 fd86 	bl	d868 <xEventGroupCreate>
   1bd5c:	4b1f      	ldr	r3, [pc, #124]	@ (1bddc <artemis_uart_initialize+0xe8>)
   1bd5e:	6018      	str	r0, [r3, #0]
    if( xUartEventHandle == NULL )
   1bd60:	2800      	cmp	r0, #0
   1bd62:	d030      	beq.n	1bdc6 <artemis_uart_initialize+0xd2>
    {
        ARTEMIS_DEBUG_PRINTF("UART xUartEventHandle:: ERROR\n");
    }
    else
    {
        ARTEMIS_DEBUG_PRINTF("UART xUartEventHandle:: Created\n");
   1bd64:	481e      	ldr	r0, [pc, #120]	@ (1bde0 <artemis_uart_initialize+0xec>)
   1bd66:	f7f5 f97f 	bl	11068 <am_util_stdio_printf>
   1bd6a:	481d      	ldr	r0, [pc, #116]	@ (1bde0 <artemis_uart_initialize+0xec>)
   1bd6c:	f002 f904 	bl	1df78 <datalogger_log_debug>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bd70:	4b19      	ldr	r3, [pc, #100]	@ (1bdd8 <artemis_uart_initialize+0xe4>)
   1bd72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
   1bd76:	601a      	str	r2, [r3, #0]
    }
#endif

    NVIC_EnableIRQ((IRQn_Type)(UART1_IRQn));
    am_hal_interrupt_master_enable();
   1bd78:	f003 fe4e 	bl	1fa18 <am_hal_interrupt_master_enable>
    uHandle = uart->handle;
   1bd7c:	4b19      	ldr	r3, [pc, #100]	@ (1bde4 <artemis_uart_initialize+0xf0>)
   1bd7e:	6822      	ldr	r2, [r4, #0]
    ARTEMIS_DEBUG_PRINTF("Iridium :: initialized\n");
   1bd80:	4819      	ldr	r0, [pc, #100]	@ (1bde8 <artemis_uart_initialize+0xf4>)
    uHandle = uart->handle;
   1bd82:	601a      	str	r2, [r3, #0]
    ARTEMIS_DEBUG_PRINTF("Iridium :: initialized\n");
   1bd84:	f7f5 f970 	bl	11068 <am_util_stdio_printf>
   1bd88:	4817      	ldr	r0, [pc, #92]	@ (1bde8 <artemis_uart_initialize+0xf4>)
}
   1bd8a:	b003      	add	sp, #12
   1bd8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ARTEMIS_DEBUG_PRINTF("Iridium :: initialized\n");
   1bd90:	f002 b8f2 	b.w	1df78 <datalogger_log_debug>
   1bd94:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_initialize(uart->module, &uart->handle));
   1bd96:	202f      	movs	r0, #47	@ 0x2f
   1bd98:	9000      	str	r0, [sp, #0]
   1bd9a:	4b14      	ldr	r3, [pc, #80]	@ (1bdec <artemis_uart_initialize+0xf8>)
   1bd9c:	4a14      	ldr	r2, [pc, #80]	@ (1bdf0 <artemis_uart_initialize+0xfc>)
   1bd9e:	4815      	ldr	r0, [pc, #84]	@ (1bdf4 <artemis_uart_initialize+0x100>)
   1bda0:	f7ff fab2 	bl	1b308 <artemis_debug_halerror>
   1bda4:	e7c0      	b.n	1bd28 <artemis_uart_initialize+0x34>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_configure(uart->handle, &uart->config));
   1bda6:	2031      	movs	r0, #49	@ 0x31
   1bda8:	9000      	str	r0, [sp, #0]
   1bdaa:	4b10      	ldr	r3, [pc, #64]	@ (1bdec <artemis_uart_initialize+0xf8>)
   1bdac:	4a10      	ldr	r2, [pc, #64]	@ (1bdf0 <artemis_uart_initialize+0xfc>)
   1bdae:	4812      	ldr	r0, [pc, #72]	@ (1bdf8 <artemis_uart_initialize+0x104>)
   1bdb0:	f7ff faaa 	bl	1b308 <artemis_debug_halerror>
   1bdb4:	e7c8      	b.n	1bd48 <artemis_uart_initialize+0x54>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_power_control(uart->handle, AM_HAL_SYSCTRL_WAKE, false));
   1bdb6:	2030      	movs	r0, #48	@ 0x30
   1bdb8:	9000      	str	r0, [sp, #0]
   1bdba:	4b0c      	ldr	r3, [pc, #48]	@ (1bdec <artemis_uart_initialize+0xf8>)
   1bdbc:	4a0c      	ldr	r2, [pc, #48]	@ (1bdf0 <artemis_uart_initialize+0xfc>)
   1bdbe:	480f      	ldr	r0, [pc, #60]	@ (1bdfc <artemis_uart_initialize+0x108>)
   1bdc0:	f7ff faa2 	bl	1b308 <artemis_debug_halerror>
   1bdc4:	e7b8      	b.n	1bd38 <artemis_uart_initialize+0x44>
        ARTEMIS_DEBUG_PRINTF("UART xUartEventHandle:: ERROR\n");
   1bdc6:	480e      	ldr	r0, [pc, #56]	@ (1be00 <artemis_uart_initialize+0x10c>)
   1bdc8:	f7f5 f94e 	bl	11068 <am_util_stdio_printf>
   1bdcc:	480c      	ldr	r0, [pc, #48]	@ (1be00 <artemis_uart_initialize+0x10c>)
   1bdce:	f002 f8d3 	bl	1df78 <datalogger_log_debug>
   1bdd2:	e7cd      	b.n	1bd70 <artemis_uart_initialize+0x7c>
   1bdd4:	10049c2c 	.word	0x10049c2c
   1bdd8:	e000e100 	.word	0xe000e100
   1bddc:	10049a20 	.word	0x10049a20
   1bde0:	0002fd9c 	.word	0x0002fd9c
   1bde4:	10049c28 	.word	0x10049c28
   1bde8:	0002fdc0 	.word	0x0002fdc0
   1bdec:	0002fcb0 	.word	0x0002fcb0
   1bdf0:	00030ec4 	.word	0x00030ec4
   1bdf4:	0002fcd0 	.word	0x0002fcd0
   1bdf8:	0002fd48 	.word	0x0002fd48
   1bdfc:	0002fd04 	.word	0x0002fd04
   1be00:	0002fd7c 	.word	0x0002fd7c

0001be04 <artemis_uart_flush>:
    uart->handle = NULL;
    uHandle = NULL;
}

void artemis_uart_flush(artemis_uart_t *uart)
{
   1be04:	b510      	push	{r4, lr}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_tx_flush(uart->handle));
   1be06:	6800      	ldr	r0, [r0, #0]
{
   1be08:	b082      	sub	sp, #8
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_tx_flush(uart->handle));
   1be0a:	f005 fbc7 	bl	2159c <am_hal_uart_tx_flush>
   1be0e:	b908      	cbnz	r0, 1be14 <artemis_uart_flush+0x10>
}
   1be10:	b002      	add	sp, #8
   1be12:	bd10      	pop	{r4, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_tx_flush(uart->handle));
   1be14:	2452      	movs	r4, #82	@ 0x52
   1be16:	4601      	mov	r1, r0
   1be18:	4b03      	ldr	r3, [pc, #12]	@ (1be28 <artemis_uart_flush+0x24>)
   1be1a:	4a04      	ldr	r2, [pc, #16]	@ (1be2c <artemis_uart_flush+0x28>)
   1be1c:	4804      	ldr	r0, [pc, #16]	@ (1be30 <artemis_uart_flush+0x2c>)
   1be1e:	9400      	str	r4, [sp, #0]
   1be20:	f7ff fa72 	bl	1b308 <artemis_debug_halerror>
}
   1be24:	b002      	add	sp, #8
   1be26:	bd10      	pop	{r4, pc}
   1be28:	0002fcb0 	.word	0x0002fcb0
   1be2c:	00030eb0 	.word	0x00030eb0
   1be30:	0002fdd8 	.word	0x0002fdd8

0001be34 <artemis_uart_send>:

void artemis_uart_send(artemis_uart_t *uart, artemis_stream_t *txstream)
{
   1be34:	b530      	push	{r4, r5, lr}
   1be36:	460c      	mov	r4, r1
   1be38:	b089      	sub	sp, #36	@ 0x24
    uint32_t read = 0;
    am_hal_uart_transfer_t transfer = {0};

    transfer.ui32Direction = AM_HAL_UART_WRITE;
    transfer.pui8Data = txstream->buffer;
   1be3a:	680a      	ldr	r2, [r1, #0]
   1be3c:	9204      	str	r2, [sp, #16]
    uint32_t read = 0;
   1be3e:	2300      	movs	r3, #0
    am_hal_uart_transfer_t transfer = {0};
   1be40:	e9cd 3302 	strd	r3, r3, [sp, #8]
    transfer.ui32NumBytes = txstream->written;
   1be44:	68a2      	ldr	r2, [r4, #8]
    am_hal_uart_transfer_t transfer = {0};
   1be46:	9306      	str	r3, [sp, #24]
{
   1be48:	4605      	mov	r5, r0
    transfer.ui32TimeoutMs = 0;
    transfer.pui32BytesTransferred = &read;
   1be4a:	ab02      	add	r3, sp, #8

    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_transfer(uart->handle, &transfer));
   1be4c:	6800      	ldr	r0, [r0, #0]
    transfer.ui32NumBytes = txstream->written;
   1be4e:	9205      	str	r2, [sp, #20]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_transfer(uart->handle, &transfer));
   1be50:	a903      	add	r1, sp, #12
    transfer.pui32BytesTransferred = &read;
   1be52:	9307      	str	r3, [sp, #28]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_transfer(uart->handle, &transfer));
   1be54:	f005 f998 	bl	21188 <am_hal_uart_transfer>
   1be58:	b940      	cbnz	r0, 1be6c <artemis_uart_send+0x38>

    /* update the number of bytes read from the txstream */
    txstream->read = read;
   1be5a:	9b02      	ldr	r3, [sp, #8]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_tx_flush(uart->handle));
   1be5c:	6828      	ldr	r0, [r5, #0]
    txstream->read = read;
   1be5e:	60e3      	str	r3, [r4, #12]
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_tx_flush(uart->handle));
   1be60:	f005 fb9c 	bl	2159c <am_hal_uart_tx_flush>
   1be64:	4601      	mov	r1, r0
   1be66:	b950      	cbnz	r0, 1be7e <artemis_uart_send+0x4a>
    artemis_uart_flush(uart);
}
   1be68:	b009      	add	sp, #36	@ 0x24
   1be6a:	bd30      	pop	{r4, r5, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_transfer(uart->handle, &transfer));
   1be6c:	2260      	movs	r2, #96	@ 0x60
   1be6e:	9200      	str	r2, [sp, #0]
   1be70:	4601      	mov	r1, r0
   1be72:	4b07      	ldr	r3, [pc, #28]	@ (1be90 <artemis_uart_send+0x5c>)
   1be74:	4a07      	ldr	r2, [pc, #28]	@ (1be94 <artemis_uart_send+0x60>)
   1be76:	4808      	ldr	r0, [pc, #32]	@ (1be98 <artemis_uart_send+0x64>)
   1be78:	f7ff fa46 	bl	1b308 <artemis_debug_halerror>
   1be7c:	e7ed      	b.n	1be5a <artemis_uart_send+0x26>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_uart_tx_flush(uart->handle));
   1be7e:	2452      	movs	r4, #82	@ 0x52
   1be80:	4b03      	ldr	r3, [pc, #12]	@ (1be90 <artemis_uart_send+0x5c>)
   1be82:	4a06      	ldr	r2, [pc, #24]	@ (1be9c <artemis_uart_send+0x68>)
   1be84:	4806      	ldr	r0, [pc, #24]	@ (1bea0 <artemis_uart_send+0x6c>)
   1be86:	9400      	str	r4, [sp, #0]
   1be88:	f7ff fa3e 	bl	1b308 <artemis_debug_halerror>
}
   1be8c:	b009      	add	sp, #36	@ 0x24
   1be8e:	bd30      	pop	{r4, r5, pc}
   1be90:	0002fcb0 	.word	0x0002fcb0
   1be94:	00030e9c 	.word	0x00030e9c
   1be98:	0002fdfc 	.word	0x0002fdfc
   1be9c:	00030eb0 	.word	0x00030eb0
   1bea0:	0002fdd8 	.word	0x0002fdd8
   1bea4:	00000000 	.word	0x00000000

0001bea8 <am_uart1_isr>:

/* UART RX Interrupt, */
void am_uart1_isr(void)
{
   1bea8:	b530      	push	{r4, r5, lr}
    uint32_t status, idle;
    am_hal_uart_interrupt_status_get(uHandle, &status, true);
   1beaa:	4c2f      	ldr	r4, [pc, #188]	@ (1bf68 <am_uart1_isr+0xc0>)
{
   1beac:	b08b      	sub	sp, #44	@ 0x2c
    am_hal_uart_interrupt_status_get(uHandle, &status, true);
   1beae:	2201      	movs	r2, #1
   1beb0:	4669      	mov	r1, sp
   1beb2:	6820      	ldr	r0, [r4, #0]
   1beb4:	f005 fc56 	bl	21764 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(uHandle, status);
   1beb8:	9900      	ldr	r1, [sp, #0]
   1beba:	6820      	ldr	r0, [r4, #0]
   1bebc:	f005 fc40 	bl	21740 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(uHandle, status, &idle);
   1bec0:	9900      	ldr	r1, [sp, #0]
   1bec2:	6820      	ldr	r0, [r4, #0]
   1bec4:	aa01      	add	r2, sp, #4
   1bec6:	f005 fb91 	bl	215ec <am_hal_uart_interrupt_service>

    if (status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_RX))
   1beca:	9b00      	ldr	r3, [sp, #0]
   1becc:	f013 0f50 	tst.w	r3, #80	@ 0x50
   1bed0:	d101      	bne.n	1bed6 <am_uart1_isr+0x2e>
            Flag = true;
            NVIC_DisableIRQ((IRQn_Type)(UART1_IRQn));
#endif
        }
    }
}
   1bed2:	b00b      	add	sp, #44	@ 0x2c
   1bed4:	bd30      	pop	{r4, r5, pc}
            .pui8Data = (uint8_t *) &(rxbuffer[rxindex]),
   1bed6:	4d25      	ldr	r5, [pc, #148]	@ (1bf6c <am_uart1_isr+0xc4>)
   1bed8:	4925      	ldr	r1, [pc, #148]	@ (1bf70 <am_uart1_isr+0xc8>)
   1beda:	882b      	ldrh	r3, [r5, #0]
        uint32_t Status = am_hal_uart_transfer(uHandle, &sRead);
   1bedc:	6820      	ldr	r0, [r4, #0]
        am_hal_uart_transfer_t sRead =
   1bede:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 1bf60 <am_uart1_isr+0xb8>
            .pui8Data = (uint8_t *) &(rxbuffer[rxindex]),
   1bee2:	fa11 f383 	uxtah	r3, r1, r3
        am_hal_uart_transfer_t sRead =
   1bee6:	2201      	movs	r2, #1
   1bee8:	e9cd 2304 	strd	r2, r3, [sp, #16]
        uint32_t Status = am_hal_uart_transfer(uHandle, &sRead);
   1beec:	a904      	add	r1, sp, #16
        am_hal_uart_transfer_t sRead =
   1beee:	ab02      	add	r3, sp, #8
   1bef0:	ed8d 7b06 	vstr	d7, [sp, #24]
   1bef4:	9308      	str	r3, [sp, #32]
        uint32_t Status = am_hal_uart_transfer(uHandle, &sRead);
   1bef6:	f005 f947 	bl	21188 <am_hal_uart_transfer>
        if (Status != AM_HAL_STATUS_SUCCESS)
   1befa:	bb40      	cbnz	r0, 1bf4e <am_uart1_isr+0xa6>
        rxindex += bytesread;
   1befc:	882b      	ldrh	r3, [r5, #0]
   1befe:	9902      	ldr	r1, [sp, #8]
        if (status & (AM_HAL_UART_INT_RX_TMOUT))
   1bf00:	9a00      	ldr	r2, [sp, #0]
        rxindex += bytesread;
   1bf02:	fa11 f383 	uxtah	r3, r1, r3
   1bf06:	b29b      	uxth	r3, r3
   1bf08:	802b      	strh	r3, [r5, #0]
        if (status & (AM_HAL_UART_INT_RX_TMOUT))
   1bf0a:	0653      	lsls	r3, r2, #25
   1bf0c:	d5e1      	bpl.n	1bed2 <am_uart1_isr+0x2a>
            xResult = xEventGroupSetBitsFromISR(xUartEventHandle, 0x01, &xHigherPriorityTaskWoken);
   1bf0e:	4a19      	ldr	r2, [pc, #100]	@ (1bf74 <am_uart1_isr+0xcc>)
            xHigherPriorityTaskWoken = pdFALSE;
   1bf10:	2300      	movs	r3, #0
            xResult = xEventGroupSetBitsFromISR(xUartEventHandle, 0x01, &xHigherPriorityTaskWoken);
   1bf12:	6810      	ldr	r0, [r2, #0]
            xHigherPriorityTaskWoken = pdFALSE;
   1bf14:	9303      	str	r3, [sp, #12]
            xResult = xEventGroupSetBitsFromISR(xUartEventHandle, 0x01, &xHigherPriorityTaskWoken);
   1bf16:	aa03      	add	r2, sp, #12
   1bf18:	2101      	movs	r1, #1
   1bf1a:	f7f1 fdc9 	bl	dab0 <xEventGroupSetBitsFromISR>
            if (xResult != pdFAIL)
   1bf1e:	2800      	cmp	r0, #0
   1bf20:	d0d7      	beq.n	1bed2 <am_uart1_isr+0x2a>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1bf22:	9b03      	ldr	r3, [sp, #12]
   1bf24:	b14b      	cbz	r3, 1bf3a <am_uart1_isr+0x92>
   1bf26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   1bf2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   1bf2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
   1bf32:	f3bf 8f4f 	dsb	sy
   1bf36:	f3bf 8f6f 	isb	sy
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bf3a:	4b0f      	ldr	r3, [pc, #60]	@ (1bf78 <am_uart1_isr+0xd0>)
   1bf3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
   1bf40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1bf44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bf48:	f3bf 8f6f 	isb	sy
}
   1bf4c:	e7c1      	b.n	1bed2 <am_uart1_isr+0x2a>
            ARTEMIS_DEBUG_PRINTF("UART :: Receive error\n");
   1bf4e:	480b      	ldr	r0, [pc, #44]	@ (1bf7c <am_uart1_isr+0xd4>)
   1bf50:	f7f5 f88a 	bl	11068 <am_util_stdio_printf>
   1bf54:	4809      	ldr	r0, [pc, #36]	@ (1bf7c <am_uart1_isr+0xd4>)
   1bf56:	f002 f80f 	bl	1df78 <datalogger_log_debug>
   1bf5a:	e7cf      	b.n	1befc <am_uart1_isr+0x54>
   1bf5c:	f3af 8000 	nop.w
   1bf60:	00000200 	.word	0x00000200
   1bf64:	00000000 	.word	0x00000000
   1bf68:	10049c28 	.word	0x10049c28
   1bf6c:	10049a24 	.word	0x10049a24
   1bf70:	10049a28 	.word	0x10049a28
   1bf74:	10049a20 	.word	0x10049a20
   1bf78:	e000e100 	.word	0xe000e100
   1bf7c:	0002fe2c 	.word	0x0002fe2c

0001bf80 <artemis_uart_receive>:

void artemis_uart_receive(artemis_stream_t *rxstream)
{
   1bf80:	b530      	push	{r4, r5, lr}
   1bf82:	b083      	sub	sp, #12
#ifdef FREERTOS
    uint8_t ret;
    bool run = true;
    while (run)
    {
        ret = xEventGroupWaitBits(xUartEventHandle, 0x07, pdTRUE, pdFALSE, xDelay30000ms);
   1bf84:	4b14      	ldr	r3, [pc, #80]	@ (1bfd8 <artemis_uart_receive+0x58>)
   1bf86:	f247 5230 	movw	r2, #30000	@ 0x7530
   1bf8a:	9200      	str	r2, [sp, #0]
{
   1bf8c:	4604      	mov	r4, r0
        ret = xEventGroupWaitBits(xUartEventHandle, 0x07, pdTRUE, pdFALSE, xDelay30000ms);
   1bf8e:	2201      	movs	r2, #1
   1bf90:	6818      	ldr	r0, [r3, #0]
   1bf92:	2107      	movs	r1, #7
   1bf94:	2300      	movs	r3, #0
   1bf96:	f7f1 fc75 	bl	d884 <xEventGroupWaitBits>
        if (ret == 0x01)
   1bf9a:	b2c0      	uxtb	r0, r0
   1bf9c:	2801      	cmp	r0, #1
   1bf9e:	d007      	beq.n	1bfb0 <artemis_uart_receive+0x30>
            NVIC_EnableIRQ((IRQn_Type)(UART1_IRQn));
        }
        else
        {
            run = false;
            rxstream->written = 0;
   1bfa0:	2300      	movs	r3, #0
   1bfa2:	60a3      	str	r3, [r4, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bfa4:	4b0d      	ldr	r3, [pc, #52]	@ (1bfdc <artemis_uart_receive+0x5c>)
   1bfa6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
   1bfaa:	601a      	str	r2, [r3, #0]
        //memset(rxstream->buffer, 0, 0);
        rxstream->written = 0;
        // do nothing
    }
#endif
}
   1bfac:	b003      	add	sp, #12
   1bfae:	bd30      	pop	{r4, r5, pc}
            memcpy(rxstream->buffer, rxbuffer, rxindex);
   1bfb0:	4d0b      	ldr	r5, [pc, #44]	@ (1bfe0 <artemis_uart_receive+0x60>)
   1bfb2:	490c      	ldr	r1, [pc, #48]	@ (1bfe4 <artemis_uart_receive+0x64>)
   1bfb4:	882a      	ldrh	r2, [r5, #0]
   1bfb6:	6820      	ldr	r0, [r4, #0]
   1bfb8:	b292      	uxth	r2, r2
   1bfba:	f7f0 fdb9 	bl	cb30 <memcpy>
            rxstream->written = rxindex;
   1bfbe:	882b      	ldrh	r3, [r5, #0]
            memset(rxbuffer, 0, rxindex);
   1bfc0:	882a      	ldrh	r2, [r5, #0]
   1bfc2:	4808      	ldr	r0, [pc, #32]	@ (1bfe4 <artemis_uart_receive+0x64>)
            rxstream->written = rxindex;
   1bfc4:	b29b      	uxth	r3, r3
   1bfc6:	60a3      	str	r3, [r4, #8]
            memset(rxbuffer, 0, rxindex);
   1bfc8:	2100      	movs	r1, #0
   1bfca:	b292      	uxth	r2, r2
   1bfcc:	f008 f9e0 	bl	24390 <memset>
            rxindex = 0;
   1bfd0:	2300      	movs	r3, #0
   1bfd2:	802b      	strh	r3, [r5, #0]
    __COMPILER_BARRIER();
   1bfd4:	e7e6      	b.n	1bfa4 <artemis_uart_receive+0x24>
   1bfd6:	bf00      	nop
   1bfd8:	10049a20 	.word	0x10049a20
   1bfdc:	e000e100 	.word	0xe000e100
   1bfe0:	10049a24 	.word	0x10049a24
   1bfe4:	10049a28 	.word	0x10049a28

0001bfe8 <artemis_ublox_i2c_initialize>:
 * Initializes Power Pin, EXTINT Pin & IOM Module for I2C.
 *
 * @param i2c_addr I2C Address of Module
 */
void artemis_ublox_i2c_initialize(uint8_t i2c_addr)
{
   1bfe8:	b530      	push	{r4, r5, lr}
   1bfea:	4601      	mov	r1, r0
    module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_PRES_ON;
    module.power.pin = AM_BSP_GPIO_PRES_ON;
    module.extint.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_GPS_EXTINT;
    module.extint.pin = AM_BSP_GPIO_GPS_EXTINT;
    #else
    module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_GPS_ON;
   1bfec:	4c34      	ldr	r4, [pc, #208]	@ (1c0c0 <artemis_ublox_i2c_initialize+0xd8>)
   1bfee:	4835      	ldr	r0, [pc, #212]	@ (1c0c4 <artemis_ublox_i2c_initialize+0xdc>)
    module.power.pin = AM_BSP_GPIO_GPS_ON;
    module.extint.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_GPS_EXTINT;
   1bff0:	4a35      	ldr	r2, [pc, #212]	@ (1c0c8 <artemis_ublox_i2c_initialize+0xe0>)
    module.power.pin = AM_BSP_GPIO_GPS_ON;
   1bff2:	251a      	movs	r5, #26
{
   1bff4:	b083      	sub	sp, #12
    module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_GPS_ON;
   1bff6:	e9c4 5048 	strd	r5, r0, [r4, #288]	@ 0x120
    module.extint.pin = AM_BSP_GPIO_GPS_EXTINT;
   1bffa:	200a      	movs	r0, #10
    i2c->address = i2c_addr;

    #ifdef TEST_ON_IOM4
    i2c->iom.module = 4;
    #else
    i2c->iom.module = 1;
   1bffc:	2301      	movs	r3, #1
    module.extint.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_GPS_EXTINT;
   1bffe:	f8c4 212c 	str.w	r2, [r4, #300]	@ 0x12c
    module.extint.pin = AM_BSP_GPIO_GPS_EXTINT;
   1c002:	f8c4 0128 	str.w	r0, [r4, #296]	@ 0x128
    #endif
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
    i2c->iom.config.ui32ClockFreq = AM_HAL_IOM_100KHZ;
   1c006:	4a31      	ldr	r2, [pc, #196]	@ (1c0cc <artemis_ublox_i2c_initialize+0xe4>)
    i2c->address = i2c_addr;
   1c008:	7021      	strb	r1, [r4, #0]
    artemis_iom_initialize(&i2c->iom);
   1c00a:	1d20      	adds	r0, r4, #4
    i2c->iom.module = 1;
   1c00c:	7223      	strb	r3, [r4, #8]
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
   1c00e:	7323      	strb	r3, [r4, #12]
    i2c->iom.config.ui32ClockFreq = AM_HAL_IOM_100KHZ;
   1c010:	6122      	str	r2, [r4, #16]
    artemis_iom_initialize(&i2c->iom);
   1c012:	f7ff fb21 	bl	1b658 <artemis_iom_initialize>

    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1c016:	e9d4 0348 	ldrd	r0, r3, [r4, #288]	@ 0x120
   1c01a:	6819      	ldr	r1, [r3, #0]
   1c01c:	f003 fb00 	bl	1f620 <am_hal_gpio_pinconfig>
   1c020:	bb28      	cbnz	r0, 1c06e <artemis_ublox_i2c_initialize+0x86>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.extint.pin, *module.extint.pinConfig));
   1c022:	e9d4 034a 	ldrd	r0, r3, [r4, #296]	@ 0x128
   1c026:	6819      	ldr	r1, [r3, #0]
   1c028:	f003 fafa 	bl	1f620 <am_hal_gpio_pinconfig>
   1c02c:	4601      	mov	r1, r0
   1c02e:	bb70      	cbnz	r0, 1c08e <artemis_ublox_i2c_initialize+0xa6>
 * @brief Power Up the UBLOX Module
 *
 */
void artemis_ublox_i2c_power_on(void)
{
	am_hal_gpio_output_clear(module.power.pin);
   1c030:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   1c034:	4826      	ldr	r0, [pc, #152]	@ (1c0d0 <artemis_ublox_i2c_initialize+0xe8>)
   1c036:	08da      	lsrs	r2, r3, #3
   1c038:	f002 0204 	and.w	r2, r2, #4
   1c03c:	2101      	movs	r1, #1
   1c03e:	f003 031f 	and.w	r3, r3, #31
   1c042:	fa01 f303 	lsl.w	r3, r1, r3
   1c046:	5013      	str	r3, [r2, r0]
    am_hal_systick_delay_us(300000);
   1c048:	4822      	ldr	r0, [pc, #136]	@ (1c0d4 <artemis_ublox_i2c_initialize+0xec>)
   1c04a:	f004 feb3 	bl	20db4 <am_hal_systick_delay_us>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1c04e:	4b22      	ldr	r3, [pc, #136]	@ (1c0d8 <artemis_ublox_i2c_initialize+0xf0>)
   1c050:	2008      	movs	r0, #8
   1c052:	6819      	ldr	r1, [r3, #0]
   1c054:	f003 fae4 	bl	1f620 <am_hal_gpio_pinconfig>
   1c058:	4601      	mov	r1, r0
   1c05a:	bb48      	cbnz	r0, 1c0b0 <artemis_ublox_i2c_initialize+0xc8>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SDA, g_AM_BSP_GPIO_IOM1_SDA));
   1c05c:	4b1f      	ldr	r3, [pc, #124]	@ (1c0dc <artemis_ublox_i2c_initialize+0xf4>)
   1c05e:	2009      	movs	r0, #9
   1c060:	6819      	ldr	r1, [r3, #0]
   1c062:	f003 fadd 	bl	1f620 <am_hal_gpio_pinconfig>
   1c066:	4601      	mov	r1, r0
   1c068:	b9c8      	cbnz	r0, 1c09e <artemis_ublox_i2c_initialize+0xb6>
}
   1c06a:	b003      	add	sp, #12
   1c06c:	bd30      	pop	{r4, r5, pc}
   1c06e:	4601      	mov	r1, r0
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1c070:	2097      	movs	r0, #151	@ 0x97
   1c072:	4b1b      	ldr	r3, [pc, #108]	@ (1c0e0 <artemis_ublox_i2c_initialize+0xf8>)
   1c074:	4a1b      	ldr	r2, [pc, #108]	@ (1c0e4 <artemis_ublox_i2c_initialize+0xfc>)
   1c076:	9000      	str	r0, [sp, #0]
   1c078:	481b      	ldr	r0, [pc, #108]	@ (1c0e8 <artemis_ublox_i2c_initialize+0x100>)
   1c07a:	f7ff f945 	bl	1b308 <artemis_debug_halerror>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.extint.pin, *module.extint.pinConfig));
   1c07e:	e9d4 034a 	ldrd	r0, r3, [r4, #296]	@ 0x128
   1c082:	6819      	ldr	r1, [r3, #0]
   1c084:	f003 facc 	bl	1f620 <am_hal_gpio_pinconfig>
   1c088:	4601      	mov	r1, r0
   1c08a:	2800      	cmp	r0, #0
   1c08c:	d0d0      	beq.n	1c030 <artemis_ublox_i2c_initialize+0x48>
   1c08e:	2098      	movs	r0, #152	@ 0x98
   1c090:	9000      	str	r0, [sp, #0]
   1c092:	4b13      	ldr	r3, [pc, #76]	@ (1c0e0 <artemis_ublox_i2c_initialize+0xf8>)
   1c094:	4a13      	ldr	r2, [pc, #76]	@ (1c0e4 <artemis_ublox_i2c_initialize+0xfc>)
   1c096:	4815      	ldr	r0, [pc, #84]	@ (1c0ec <artemis_ublox_i2c_initialize+0x104>)
   1c098:	f7ff f936 	bl	1b308 <artemis_debug_halerror>
   1c09c:	e7c8      	b.n	1c030 <artemis_ublox_i2c_initialize+0x48>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SDA, g_AM_BSP_GPIO_IOM1_SDA));
   1c09e:	24a0      	movs	r4, #160	@ 0xa0
   1c0a0:	4b0f      	ldr	r3, [pc, #60]	@ (1c0e0 <artemis_ublox_i2c_initialize+0xf8>)
   1c0a2:	4a10      	ldr	r2, [pc, #64]	@ (1c0e4 <artemis_ublox_i2c_initialize+0xfc>)
   1c0a4:	4812      	ldr	r0, [pc, #72]	@ (1c0f0 <artemis_ublox_i2c_initialize+0x108>)
   1c0a6:	9400      	str	r4, [sp, #0]
   1c0a8:	f7ff f92e 	bl	1b308 <artemis_debug_halerror>
}
   1c0ac:	b003      	add	sp, #12
   1c0ae:	bd30      	pop	{r4, r5, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1c0b0:	249f      	movs	r4, #159	@ 0x9f
   1c0b2:	4b0b      	ldr	r3, [pc, #44]	@ (1c0e0 <artemis_ublox_i2c_initialize+0xf8>)
   1c0b4:	4a0b      	ldr	r2, [pc, #44]	@ (1c0e4 <artemis_ublox_i2c_initialize+0xfc>)
   1c0b6:	480f      	ldr	r0, [pc, #60]	@ (1c0f4 <artemis_ublox_i2c_initialize+0x10c>)
   1c0b8:	9400      	str	r4, [sp, #0]
   1c0ba:	f7ff f925 	bl	1b308 <artemis_debug_halerror>
   1c0be:	e7cd      	b.n	1c05c <artemis_ublox_i2c_initialize+0x74>
   1c0c0:	1004a02c 	.word	0x1004a02c
   1c0c4:	00030f80 	.word	0x00030f80
   1c0c8:	00030f7c 	.word	0x00030f7c
   1c0cc:	000186a0 	.word	0x000186a0
   1c0d0:	40010098 	.word	0x40010098
   1c0d4:	000493e0 	.word	0x000493e0
   1c0d8:	00030f58 	.word	0x00030f58
   1c0dc:	00030f54 	.word	0x00030f54
   1c0e0:	0002fe44 	.word	0x0002fe44
   1c0e4:	00030edc 	.word	0x00030edc
   1c0e8:	0002fb94 	.word	0x0002fb94
   1c0ec:	0002fe68 	.word	0x0002fe68
   1c0f0:	0002fef0 	.word	0x0002fef0
   1c0f4:	0002feac 	.word	0x0002feac

0001c0f8 <artemis_ublox_i2c_uninitialize>:
    i2c->iom.module = 1;
   1c0f8:	4b02      	ldr	r3, [pc, #8]	@ (1c104 <artemis_ublox_i2c_uninitialize+0xc>)
   1c0fa:	2201      	movs	r2, #1
    artemis_iom_uninitialize(&i2c->iom);
   1c0fc:	1d18      	adds	r0, r3, #4
    i2c->iom.module = 1;
   1c0fe:	721a      	strb	r2, [r3, #8]
    artemis_iom_uninitialize(&i2c->iom);
   1c100:	f7ff baf6 	b.w	1b6f0 <artemis_iom_uninitialize>
   1c104:	1004a02c 	.word	0x1004a02c

0001c108 <artemis_ublox_i2c_power_on>:
	am_hal_gpio_output_clear(module.power.pin);
   1c108:	4b07      	ldr	r3, [pc, #28]	@ (1c128 <artemis_ublox_i2c_power_on+0x20>)
   1c10a:	4808      	ldr	r0, [pc, #32]	@ (1c12c <artemis_ublox_i2c_power_on+0x24>)
   1c10c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
   1c110:	08da      	lsrs	r2, r3, #3
   1c112:	2101      	movs	r1, #1
   1c114:	f002 0204 	and.w	r2, r2, #4
   1c118:	f003 031f 	and.w	r3, r3, #31
   1c11c:	fa01 f303 	lsl.w	r3, r1, r3
   1c120:	5013      	str	r3, [r2, r0]
    am_hal_systick_delay_us(300000);
   1c122:	4803      	ldr	r0, [pc, #12]	@ (1c130 <artemis_ublox_i2c_power_on+0x28>)
   1c124:	f004 be46 	b.w	20db4 <am_hal_systick_delay_us>
   1c128:	1004a02c 	.word	0x1004a02c
   1c12c:	40010098 	.word	0x40010098
   1c130:	000493e0 	.word	0x000493e0

0001c134 <artemis_ublox_i2c_power_off>:
 * @brief Power Down the UBLOX Module
 *
 */
void artemis_ublox_i2c_power_off(void)
{
	am_hal_gpio_output_set(module.power.pin);
   1c134:	4b06      	ldr	r3, [pc, #24]	@ (1c150 <artemis_ublox_i2c_power_off+0x1c>)
   1c136:	4807      	ldr	r0, [pc, #28]	@ (1c154 <artemis_ublox_i2c_power_off+0x20>)
   1c138:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
   1c13c:	08da      	lsrs	r2, r3, #3
   1c13e:	2101      	movs	r1, #1
   1c140:	f002 0204 	and.w	r2, r2, #4
   1c144:	f003 031f 	and.w	r3, r3, #31
   1c148:	fa01 f303 	lsl.w	r3, r1, r3
   1c14c:	5013      	str	r3, [r2, r0]
}
   1c14e:	4770      	bx	lr
   1c150:	1004a02c 	.word	0x1004a02c
   1c154:	40010090 	.word	0x40010090

0001c158 <artemis_ublox_i2c_send_msg>:
 * @param msg Pointer to message buffer
 * @param len Length of message to send
 * @param stop Send stop after transfer
 */
void artemis_ublox_i2c_send_msg(uint8_t *msg, uint16_t len, bool stop)
{
   1c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c15c:	b084      	sub	sp, #16
	artemis_i2c_t *i2c = &module.i2c;
	artemis_stream_t txstream = {0};
   1c15e:	2300      	movs	r3, #0
{
   1c160:	460e      	mov	r6, r1
   1c162:	4605      	mov	r5, r0
	artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c164:	491c      	ldr	r1, [pc, #112]	@ (1c1d8 <artemis_ublox_i2c_send_msg+0x80>)
   1c166:	4668      	mov	r0, sp
{
   1c168:	4690      	mov	r8, r2
	artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c16a:	2280      	movs	r2, #128	@ 0x80
	artemis_stream_t txstream = {0};
   1c16c:	e9cd 3300 	strd	r3, r3, [sp]
   1c170:	e9cd 3302 	strd	r3, r3, [sp, #8]
	artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c174:	f7ff fc86 	bl	1ba84 <artemis_stream_setbuffer>
	artemis_stream_reset(&txstream);
   1c178:	4668      	mov	r0, sp
   1c17a:	f7ff fcd1 	bl	1bb20 <artemis_stream_reset>

	while(len > 0)
   1c17e:	b346      	cbz	r6, 1c1d2 <artemis_ublox_i2c_send_msg+0x7a>
	{
		if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c180:	2e80      	cmp	r6, #128	@ 0x80
   1c182:	d91c      	bls.n	1c1be <artemis_ublox_i2c_send_msg+0x66>
		{
			artemis_stream_write(&txstream, msg, ARTEMIS_UBLOX_BUFFER_LENGTH);
			artemis_i2c_send(i2c, false, &txstream);
   1c184:	4f15      	ldr	r7, [pc, #84]	@ (1c1dc <artemis_ublox_i2c_send_msg+0x84>)
		if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c186:	4634      	mov	r4, r6
			artemis_stream_write(&txstream, msg, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c188:	2280      	movs	r2, #128	@ 0x80
   1c18a:	4629      	mov	r1, r5
   1c18c:	4668      	mov	r0, sp
   1c18e:	f7ff fc8f 	bl	1bab0 <artemis_stream_write>
			artemis_stream_reset(&txstream);
			len -= ARTEMIS_UBLOX_BUFFER_LENGTH;
   1c192:	3c80      	subs	r4, #128	@ 0x80
			artemis_i2c_send(i2c, false, &txstream);
   1c194:	466a      	mov	r2, sp
   1c196:	2100      	movs	r1, #0
   1c198:	4638      	mov	r0, r7
   1c19a:	f7ff f8ff 	bl	1b39c <artemis_i2c_send>
			len -= ARTEMIS_UBLOX_BUFFER_LENGTH;
   1c19e:	b2a4      	uxth	r4, r4
			artemis_stream_reset(&txstream);
   1c1a0:	4668      	mov	r0, sp
   1c1a2:	f7ff fcbd 	bl	1bb20 <artemis_stream_reset>
		if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c1a6:	2c80      	cmp	r4, #128	@ 0x80
   1c1a8:	d8ee      	bhi.n	1c188 <artemis_ublox_i2c_send_msg+0x30>
   1c1aa:	f1a6 0381 	sub.w	r3, r6, #129	@ 0x81
   1c1ae:	f3c3 13c8 	ubfx	r3, r3, #7, #9
   1c1b2:	3e80      	subs	r6, #128	@ 0x80
   1c1b4:	ebc3 2343 	rsb	r3, r3, r3, lsl #9
   1c1b8:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
   1c1bc:	b2b6      	uxth	r6, r6
		}
		else {
			artemis_stream_write(&txstream, msg, len);
   1c1be:	4632      	mov	r2, r6
   1c1c0:	4629      	mov	r1, r5
   1c1c2:	4668      	mov	r0, sp
   1c1c4:	f7ff fc74 	bl	1bab0 <artemis_stream_write>
			artemis_i2c_send(i2c, stop, &txstream);
   1c1c8:	4804      	ldr	r0, [pc, #16]	@ (1c1dc <artemis_ublox_i2c_send_msg+0x84>)
   1c1ca:	466a      	mov	r2, sp
   1c1cc:	4641      	mov	r1, r8
   1c1ce:	f7ff f8e5 	bl	1b39c <artemis_i2c_send>
			len =0;
		}
	}
}
   1c1d2:	b004      	add	sp, #16
   1c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c1d8:	1004a04c 	.word	0x1004a04c
   1c1dc:	1004a02c 	.word	0x1004a02c

0001c1e0 <artemis_ublox_i2c_read_data>:
 *
 * @param pBuf pointer to transfer data buffer (size >= 2048 Bytes)
 * @return uint16_t length of message
 */
uint16_t artemis_ublox_i2c_read_data(uint8_t *pBuf)
{
   1c1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c1e4:	b08b      	sub	sp, #44	@ 0x2c
	artemis_i2c_t *i2c = &module.i2c;

	artemis_stream_t rxstream = {0};
   1c1e6:	2400      	movs	r4, #0
	artemis_stream_t txstream = {0};
	artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c1e8:	493e      	ldr	r1, [pc, #248]	@ (1c2e4 <artemis_ublox_i2c_read_data+0x104>)
   1c1ea:	2280      	movs	r2, #128	@ 0x80
{
   1c1ec:	4607      	mov	r7, r0
	artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c1ee:	a802      	add	r0, sp, #8
	artemis_stream_t rxstream = {0};
   1c1f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1c1f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
	artemis_stream_t txstream = {0};
   1c1f8:	e9cd 4406 	strd	r4, r4, [sp, #24]
   1c1fc:	e9cd 4408 	strd	r4, r4, [sp, #32]
	artemis_stream_setbuffer(&rxstream, module.rxbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c200:	f7ff fc40 	bl	1ba84 <artemis_stream_setbuffer>
	artemis_stream_setbuffer(&txstream, module.txbuffer, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c204:	2280      	movs	r2, #128	@ 0x80
   1c206:	4938      	ldr	r1, [pc, #224]	@ (1c2e8 <artemis_ublox_i2c_read_data+0x108>)
   1c208:	a806      	add	r0, sp, #24
   1c20a:	f7ff fc3b 	bl	1ba84 <artemis_stream_setbuffer>

	/** Send the command to retreive data length @addr 0xFD */
	artemis_stream_put(&txstream, ARTEMIS_UBLOX_I2C_DATA_LEN_REG);
   1c20e:	21fd      	movs	r1, #253	@ 0xfd
   1c210:	a806      	add	r0, sp, #24
   1c212:	f7ff fc3d 	bl	1ba90 <artemis_stream_put>
	artemis_i2c_send(i2c, false, &txstream);
   1c216:	4835      	ldr	r0, [pc, #212]	@ (1c2ec <artemis_ublox_i2c_read_data+0x10c>)
   1c218:	aa06      	add	r2, sp, #24
   1c21a:	4621      	mov	r1, r4
   1c21c:	f7ff f8be 	bl	1b39c <artemis_i2c_send>

	artemis_i2c_receive(i2c, true, &rxstream, 2);
   1c220:	2302      	movs	r3, #2
   1c222:	4832      	ldr	r0, [pc, #200]	@ (1c2ec <artemis_ublox_i2c_read_data+0x10c>)
   1c224:	aa02      	add	r2, sp, #8
   1c226:	2101      	movs	r1, #1
   1c228:	f7ff f8e4 	bl	1b3f4 <artemis_i2c_receive>

	uint8_t u8Len[2];
	artemis_stream_read(&rxstream, u8Len, 2);
   1c22c:	2202      	movs	r2, #2
   1c22e:	a901      	add	r1, sp, #4
   1c230:	a802      	add	r0, sp, #8
   1c232:	f7ff fc59 	bl	1bae8 <artemis_stream_read>


	if(u8Len[1] == 0xFF)
   1c236:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1c23a:	2bff      	cmp	r3, #255	@ 0xff
   1c23c:	d006      	beq.n	1c24c <artemis_ublox_i2c_read_data+0x6c>
	{
		/** Error, shouldn't be 0xFF */
		return 0;
	}

	int16_t len = (u8Len[0] << 8) | u8Len[1];
   1c23e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1c242:	ba52      	rev16	r2, r2
   1c244:	b215      	sxth	r5, r2

	uint8_t *pBufStart = pBuf;

	if(len > 0)
   1c246:	42a5      	cmp	r5, r4
   1c248:	b296      	uxth	r6, r2
   1c24a:	dc03      	bgt.n	1c254 <artemis_ublox_i2c_read_data+0x74>
		return 0;
   1c24c:	4620      	mov	r0, r4
		}
	}

	int16_t retsize = (pBuf - pBufStart);
	return (uint16_t) retsize;
}
   1c24e:	b00b      	add	sp, #44	@ 0x2c
   1c250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		artemis_stream_reset(&txstream);
   1c254:	a806      	add	r0, sp, #24
   1c256:	f7ff fc63 	bl	1bb20 <artemis_stream_reset>
		artemis_stream_reset(&rxstream);
   1c25a:	a802      	add	r0, sp, #8
   1c25c:	f7ff fc60 	bl	1bb20 <artemis_stream_reset>
		artemis_stream_put(&txstream, ARTEMIS_UBLOX_I2C_DATA_REG);
   1c260:	21ff      	movs	r1, #255	@ 0xff
   1c262:	a806      	add	r0, sp, #24
   1c264:	f7ff fc14 	bl	1ba90 <artemis_stream_put>
		artemis_i2c_send(i2c, false, &txstream);
   1c268:	4820      	ldr	r0, [pc, #128]	@ (1c2ec <artemis_ublox_i2c_read_data+0x10c>)
   1c26a:	aa06      	add	r2, sp, #24
   1c26c:	4621      	mov	r1, r4
   1c26e:	f7ff f895 	bl	1b39c <artemis_i2c_send>
			if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c272:	2d80      	cmp	r5, #128	@ 0x80
   1c274:	dd33      	ble.n	1c2de <artemis_ublox_i2c_read_data+0xfe>
   1c276:	f1a6 0981 	sub.w	r9, r6, #129	@ 0x81
   1c27a:	f3c9 19c8 	ubfx	r9, r9, #7, #9
   1c27e:	f109 0401 	add.w	r4, r9, #1
				artemis_i2c_receive(i2c, false, &rxstream, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c282:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 1c2ec <artemis_ublox_i2c_read_data+0x10c>
   1c286:	eb07 14c4 	add.w	r4, r7, r4, lsl #7
			if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c28a:	463d      	mov	r5, r7
				artemis_i2c_receive(i2c, false, &rxstream, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c28c:	2380      	movs	r3, #128	@ 0x80
   1c28e:	aa02      	add	r2, sp, #8
   1c290:	2100      	movs	r1, #0
   1c292:	4640      	mov	r0, r8
   1c294:	f7ff f8ae 	bl	1b3f4 <artemis_i2c_receive>
				artemis_stream_read(&rxstream, pBuf, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c298:	4629      	mov	r1, r5
   1c29a:	2280      	movs	r2, #128	@ 0x80
   1c29c:	a802      	add	r0, sp, #8
   1c29e:	f7ff fc23 	bl	1bae8 <artemis_stream_read>
				pBuf += ARTEMIS_UBLOX_BUFFER_LENGTH;
   1c2a2:	3580      	adds	r5, #128	@ 0x80
				artemis_stream_reset(&rxstream);
   1c2a4:	a802      	add	r0, sp, #8
   1c2a6:	f7ff fc3b 	bl	1bb20 <artemis_stream_reset>
			if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c2aa:	42a5      	cmp	r5, r4
   1c2ac:	d1ee      	bne.n	1c28c <artemis_ublox_i2c_read_data+0xac>
   1c2ae:	f1a6 0280 	sub.w	r2, r6, #128	@ 0x80
   1c2b2:	ebc9 2949 	rsb	r9, r9, r9, lsl #9
   1c2b6:	eb02 12c9 	add.w	r2, r2, r9, lsl #7
   1c2ba:	b215      	sxth	r5, r2
				artemis_i2c_receive(i2c, true, &rxstream, len);
   1c2bc:	462b      	mov	r3, r5
   1c2be:	aa02      	add	r2, sp, #8
   1c2c0:	480a      	ldr	r0, [pc, #40]	@ (1c2ec <artemis_ublox_i2c_read_data+0x10c>)
   1c2c2:	2101      	movs	r1, #1
   1c2c4:	f7ff f896 	bl	1b3f4 <artemis_i2c_receive>
				artemis_stream_read(&rxstream, pBuf, ARTEMIS_UBLOX_BUFFER_LENGTH);
   1c2c8:	4621      	mov	r1, r4
   1c2ca:	2280      	movs	r2, #128	@ 0x80
   1c2cc:	a802      	add	r0, sp, #8
   1c2ce:	f7ff fc0b 	bl	1bae8 <artemis_stream_read>
				pBuf += len;
   1c2d2:	442c      	add	r4, r5
	int16_t retsize = (pBuf - pBufStart);
   1c2d4:	1be0      	subs	r0, r4, r7
	return (uint16_t) retsize;
   1c2d6:	b280      	uxth	r0, r0
}
   1c2d8:	b00b      	add	sp, #44	@ 0x2c
   1c2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if(len > ARTEMIS_UBLOX_BUFFER_LENGTH)
   1c2de:	463c      	mov	r4, r7
   1c2e0:	e7ec      	b.n	1c2bc <artemis_ublox_i2c_read_data+0xdc>
   1c2e2:	bf00      	nop
   1c2e4:	1004a0cc 	.word	0x1004a0cc
   1c2e8:	1004a04c 	.word	0x1004a04c
   1c2ec:	1004a02c 	.word	0x1004a02c

0001c2f0 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   1c2f0:	b508      	push	{r3, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   1c2f2:	2001      	movs	r0, #1
   1c2f4:	f004 fd1e 	bl	20d34 <am_hal_sysctrl_sleep>
    return 0;
}
   1c2f8:	2000      	movs	r0, #0
   1c2fa:	bd08      	pop	{r3, pc}

0001c2fc <am_freertos_wakeup>:
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
    return;
}
   1c2fc:	4770      	bx	lr
   1c2fe:	bf00      	nop

0001c300 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   1c300:	b508      	push	{r3, lr}
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    ARTEMIS_DEBUG_PRINTF ("\nStack insufficient free memory\n");
   1c302:	4805      	ldr	r0, [pc, #20]	@ (1c318 <vApplicationMallocFailedHook+0x18>)
   1c304:	f7f4 feb0 	bl	11068 <am_util_stdio_printf>
   1c308:	4803      	ldr	r0, [pc, #12]	@ (1c318 <vApplicationMallocFailedHook+0x18>)
   1c30a:	f001 fe35 	bl	1df78 <datalogger_log_debug>
	am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
   1c30e:	4b03      	ldr	r3, [pc, #12]	@ (1c31c <vApplicationMallocFailedHook+0x1c>)
   1c310:	2201      	movs	r2, #1
   1c312:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    while (1);
   1c316:	e7fe      	b.n	1c316 <vApplicationMallocFailedHook+0x16>
   1c318:	0002ff34 	.word	0x0002ff34
   1c31c:	40010000 	.word	0x40010000

0001c320 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   1c320:	b508      	push	{r3, lr}
    (void) pcTaskName;
    (void) pxTask;

    ARTEMIS_DEBUG_PRINTF ("\nStack overflow\n");
   1c322:	4806      	ldr	r0, [pc, #24]	@ (1c33c <vApplicationStackOverflowHook+0x1c>)
   1c324:	f7f4 fea0 	bl	11068 <am_util_stdio_printf>
   1c328:	4804      	ldr	r0, [pc, #16]	@ (1c33c <vApplicationStackOverflowHook+0x1c>)
   1c32a:	f001 fe25 	bl	1df78 <datalogger_log_debug>
	am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
   1c32e:	4b04      	ldr	r3, [pc, #16]	@ (1c340 <vApplicationStackOverflowHook+0x20>)
   1c330:	2201      	movs	r2, #1
   1c332:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   1c336:	be00      	bkpt	0x0000
    while (1)
   1c338:	e7fd      	b.n	1c336 <vApplicationStackOverflowHook+0x16>
   1c33a:	bf00      	nop
   1c33c:	0002ff58 	.word	0x0002ff58
   1c340:	40010000 	.word	0x40010000

0001c344 <SYS_get_serial_num>:
    .lcp_variant = LCP_VARIANT,
};

uint32_t SYS_get_serial_num(void)
{
    return System.serial_number;
   1c344:	4b01      	ldr	r3, [pc, #4]	@ (1c34c <SYS_get_serial_num+0x8>)
   1c346:	6818      	ldr	r0, [r3, #0]
}
   1c348:	0a00      	lsrs	r0, r0, #8
   1c34a:	4770      	bx	lr
   1c34c:	10002394 	.word	0x10002394

0001c350 <SYS_get_firmware>:

uint16_t SYS_get_firmware(void)
{
    uint16_t ver = 0x00;
    ver |= System.firmware.major << 12;
   1c350:	4b05      	ldr	r3, [pc, #20]	@ (1c368 <SYS_get_firmware+0x18>)
   1c352:	791a      	ldrb	r2, [r3, #4]
    ver |= System.firmware.minor << 8;
    ver |= System.firmware.patch ;
   1c354:	7958      	ldrb	r0, [r3, #5]
    ver |= System.firmware.minor << 8;
   1c356:	0913      	lsrs	r3, r2, #4
   1c358:	021b      	lsls	r3, r3, #8
    ver |= System.firmware.major << 12;
   1c35a:	f002 020f 	and.w	r2, r2, #15
    ver |= System.firmware.minor << 8;
   1c35e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12

    return ver;
}
   1c362:	4318      	orrs	r0, r3
   1c364:	4770      	bx	lr
   1c366:	bf00      	nop
   1c368:	10002394 	.word	0x10002394

0001c36c <SYS_get_build_year_date>:

uint16_t SYS_get_build_year_date(void)
{
   1c36c:	b538      	push	{r3, r4, r5, lr}
    uint16_t date = 0x0000;

    System.build_date.day = toVal(&build_date[4]);
   1c36e:	4d12      	ldr	r5, [pc, #72]	@ (1c3b8 <SYS_get_build_year_date+0x4c>)
   1c370:	4c12      	ldr	r4, [pc, #72]	@ (1c3bc <SYS_get_build_year_date+0x50>)
   1c372:	4628      	mov	r0, r5
   1c374:	f001 fb48 	bl	1da08 <toVal>
   1c378:	7a63      	ldrb	r3, [r4, #9]
   1c37a:	4602      	mov	r2, r0
   1c37c:	f362 0304 	bfi	r3, r2, #0, #5
   1c380:	7263      	strb	r3, [r4, #9]
    System.build_date.month = mthToIndex(&build_date[0]);
   1c382:	1f28      	subs	r0, r5, #4
   1c384:	f001 fb4e 	bl	1da24 <mthToIndex>
   1c388:	7a23      	ldrb	r3, [r4, #8]
   1c38a:	4602      	mov	r2, r0
   1c38c:	f362 0303 	bfi	r3, r2, #0, #4
   1c390:	7223      	strb	r3, [r4, #8]
    System.build_date.year = toVal(&build_date[9]);
   1c392:	1d68      	adds	r0, r5, #5
   1c394:	f001 fb38 	bl	1da08 <toVal>

    date |= (System.build_date.year << 9);
    date |= (System.build_date.month << 5);
   1c398:	7a21      	ldrb	r1, [r4, #8]
    System.build_date.year = toVal(&build_date[9]);
   1c39a:	79e5      	ldrb	r5, [r4, #7]
    date |= (System.build_date.day);
   1c39c:	7a62      	ldrb	r2, [r4, #9]
    date |= (System.build_date.month << 5);
   1c39e:	f001 010f 	and.w	r1, r1, #15
   1c3a2:	0243      	lsls	r3, r0, #9
   1c3a4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    System.build_date.year = toVal(&build_date[9]);
   1c3a8:	f360 0506 	bfi	r5, r0, #0, #7
    date |= (System.build_date.month << 5);
   1c3ac:	b29b      	uxth	r3, r3
    date |= (System.build_date.day);
   1c3ae:	f002 001f 	and.w	r0, r2, #31
    System.build_date.year = toVal(&build_date[9]);
   1c3b2:	71e5      	strb	r5, [r4, #7]

    return date;
}
   1c3b4:	4318      	orrs	r0, r3
   1c3b6:	bd38      	pop	{r3, r4, r5, pc}
   1c3b8:	0002ff70 	.word	0x0002ff70
   1c3bc:	10002394 	.word	0x10002394

0001c3c0 <SYS_get_system_id>:

uint8_t SYS_get_system_id(void)
{
    return System.system_id;
   1c3c0:	4b01      	ldr	r3, [pc, #4]	@ (1c3c8 <SYS_get_system_id+0x8>)
}
   1c3c2:	7818      	ldrb	r0, [r3, #0]
   1c3c4:	4770      	bx	lr
   1c3c6:	bf00      	nop
   1c3c8:	10002394 	.word	0x10002394

0001c3cc <SYS_get_lcp_variant>:

uint8_t SYS_get_lcp_variant(void)
{
    return System.lcp_variant;
   1c3cc:	4b01      	ldr	r3, [pc, #4]	@ (1c3d4 <SYS_get_lcp_variant+0x8>)
}
   1c3ce:	7998      	ldrb	r0, [r3, #6]
   1c3d0:	4770      	bx	lr
   1c3d2:	bf00      	nop
   1c3d4:	10002394 	.word	0x10002394

0001c3d8 <SYS_lcp_info>:

bool SYS_lcp_info(void)
{
   1c3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ARTEMIS_DEBUG_PRINTF("\n\nLCP Profiler Information\n");
   1c3dc:	4c86      	ldr	r4, [pc, #536]	@ (1c5f8 <SYS_lcp_info+0x220>)
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1c3de:	4e87      	ldr	r6, [pc, #540]	@ (1c5fc <SYS_lcp_info+0x224>)

    uint8_t lcp_id = SYS_get_system_id();
    ARTEMIS_DEBUG_PRINTF("\tSystem ID\t: %u\n", lcp_id);
   1c3e0:	4d87      	ldr	r5, [pc, #540]	@ (1c600 <SYS_lcp_info+0x228>)
{
   1c3e2:	b083      	sub	sp, #12
    ARTEMIS_DEBUG_PRINTF("\n\nLCP Profiler Information\n");
   1c3e4:	4620      	mov	r0, r4
   1c3e6:	f7f4 fe3f 	bl	11068 <am_util_stdio_printf>
   1c3ea:	4620      	mov	r0, r4
   1c3ec:	f001 fdc4 	bl	1df78 <datalogger_log_debug>
    return System.system_id;
   1c3f0:	4c84      	ldr	r4, [pc, #528]	@ (1c604 <SYS_lcp_info+0x22c>)
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1c3f2:	4630      	mov	r0, r6
   1c3f4:	f7f4 fe38 	bl	11068 <am_util_stdio_printf>
   1c3f8:	4630      	mov	r0, r6
   1c3fa:	f001 fdbd 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\tSystem ID\t: %u\n", lcp_id);
   1c3fe:	7827      	ldrb	r7, [r4, #0]
   1c400:	4628      	mov	r0, r5
   1c402:	4639      	mov	r1, r7
   1c404:	f7f4 fe30 	bl	11068 <am_util_stdio_printf>
   1c408:	4639      	mov	r1, r7
   1c40a:	4628      	mov	r0, r5
   1c40c:	f001 fdb4 	bl	1df78 <datalogger_log_debug>
    ver |= System.firmware.major << 12;
   1c410:	7923      	ldrb	r3, [r4, #4]

    uint16_t lcp_fw = SYS_get_firmware();
    ARTEMIS_DEBUG_PRINTF("\tLCP Firmware\t: %u.%u.%u-dev\n", lcp_fw>>12&0xF, lcp_fw>>8&0xF, lcp_fw&0xFF);
   1c412:	f894 9005 	ldrb.w	r9, [r4, #5]
   1c416:	4f7c      	ldr	r7, [pc, #496]	@ (1c608 <SYS_lcp_info+0x230>)
    ver |= System.firmware.minor << 8;
   1c418:	091d      	lsrs	r5, r3, #4
   1c41a:	022d      	lsls	r5, r5, #8
    ver |= System.firmware.major << 12;
   1c41c:	f003 030f 	and.w	r3, r3, #15
    ver |= System.firmware.minor << 8;
   1c420:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
    ARTEMIS_DEBUG_PRINTF("\tLCP Firmware\t: %u.%u.%u-dev\n", lcp_fw>>12&0xF, lcp_fw>>8&0xF, lcp_fw&0xFF);
   1c424:	ea4f 3815 	mov.w	r8, r5, lsr #12
   1c428:	f3c5 2503 	ubfx	r5, r5, #8, #4
   1c42c:	464b      	mov	r3, r9
   1c42e:	462a      	mov	r2, r5
   1c430:	4641      	mov	r1, r8
   1c432:	4638      	mov	r0, r7
   1c434:	f7f4 fe18 	bl	11068 <am_util_stdio_printf>
   1c438:	462a      	mov	r2, r5
    System.build_date.day = toVal(&build_date[4]);
   1c43a:	4d74      	ldr	r5, [pc, #464]	@ (1c60c <SYS_lcp_info+0x234>)
    ARTEMIS_DEBUG_PRINTF("\tLCP Firmware\t: %u.%u.%u-dev\n", lcp_fw>>12&0xF, lcp_fw>>8&0xF, lcp_fw&0xFF);
   1c43c:	4641      	mov	r1, r8
   1c43e:	464b      	mov	r3, r9
   1c440:	4638      	mov	r0, r7
   1c442:	f001 fd99 	bl	1df78 <datalogger_log_debug>
    System.build_date.day = toVal(&build_date[4]);
   1c446:	4628      	mov	r0, r5
   1c448:	f001 fade 	bl	1da08 <toVal>
   1c44c:	7a63      	ldrb	r3, [r4, #9]

    uint16_t fw_date = SYS_get_build_year_date();
    ARTEMIS_DEBUG_PRINTF("\tFirmware Date\t: %u.%u.%u\n", fw_date>>5&0xF, fw_date&0x1F,  fw_date>>9&0x7F);
   1c44e:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 1c638 <SYS_lcp_info+0x260>
    System.build_date.day = toVal(&build_date[4]);
   1c452:	f360 0304 	bfi	r3, r0, #0, #5
   1c456:	7263      	strb	r3, [r4, #9]
    System.build_date.month = mthToIndex(&build_date[0]);
   1c458:	1f28      	subs	r0, r5, #4
   1c45a:	f001 fae3 	bl	1da24 <mthToIndex>
   1c45e:	7a23      	ldrb	r3, [r4, #8]
   1c460:	4602      	mov	r2, r0
   1c462:	f362 0303 	bfi	r3, r2, #0, #4
   1c466:	7223      	strb	r3, [r4, #8]
    System.build_date.year = toVal(&build_date[9]);
   1c468:	1d68      	adds	r0, r5, #5
   1c46a:	f001 facd 	bl	1da08 <toVal>
   1c46e:	79e3      	ldrb	r3, [r4, #7]
    date |= (System.build_date.month << 5);
   1c470:	7a27      	ldrb	r7, [r4, #8]
    date |= (System.build_date.day);
   1c472:	f894 8009 	ldrb.w	r8, [r4, #9]
    ARTEMIS_DEBUG_PRINTF("\tFirmware Date\t: %u.%u.%u\n", fw_date>>5&0xF, fw_date&0x1F,  fw_date>>9&0x7F);
   1c476:	f000 057f 	and.w	r5, r0, #127	@ 0x7f
   1c47a:	f007 070f 	and.w	r7, r7, #15
   1c47e:	f008 081f 	and.w	r8, r8, #31
    System.build_date.year = toVal(&build_date[9]);
   1c482:	f360 0306 	bfi	r3, r0, #0, #7
   1c486:	71e3      	strb	r3, [r4, #7]
    ARTEMIS_DEBUG_PRINTF("\tFirmware Date\t: %u.%u.%u\n", fw_date>>5&0xF, fw_date&0x1F,  fw_date>>9&0x7F);
   1c488:	4642      	mov	r2, r8
   1c48a:	462b      	mov	r3, r5
   1c48c:	4639      	mov	r1, r7
   1c48e:	4648      	mov	r0, r9
   1c490:	f7f4 fdea 	bl	11068 <am_util_stdio_printf>
   1c494:	462b      	mov	r3, r5
   1c496:	4639      	mov	r1, r7
    ARTEMIS_DEBUG_PRINTF("\tFirmware Time\t: %s\n", build_time);
   1c498:	4d5d      	ldr	r5, [pc, #372]	@ (1c610 <SYS_lcp_info+0x238>)
   1c49a:	4f5e      	ldr	r7, [pc, #376]	@ (1c614 <SYS_lcp_info+0x23c>)
    ARTEMIS_DEBUG_PRINTF("\tFirmware Date\t: %u.%u.%u\n", fw_date>>5&0xF, fw_date&0x1F,  fw_date>>9&0x7F);
   1c49c:	4642      	mov	r2, r8
   1c49e:	4648      	mov	r0, r9
   1c4a0:	f001 fd6a 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\tFirmware Time\t: %s\n", build_time);
   1c4a4:	4639      	mov	r1, r7
   1c4a6:	4628      	mov	r0, r5
   1c4a8:	f7f4 fdde 	bl	11068 <am_util_stdio_printf>
   1c4ac:	4639      	mov	r1, r7
   1c4ae:	4628      	mov	r0, r5
   1c4b0:	f001 fd62 	bl	1df78 <datalogger_log_debug>

    uint8_t lcp_variant = SYS_get_lcp_variant();
    ARTEMIS_DEBUG_PRINTF("\tLCP Variant\t: %u\n", lcp_variant);
   1c4b4:	4d58      	ldr	r5, [pc, #352]	@ (1c618 <SYS_lcp_info+0x240>)
   1c4b6:	79a7      	ldrb	r7, [r4, #6]
   1c4b8:	4628      	mov	r0, r5
   1c4ba:	4639      	mov	r1, r7
   1c4bc:	f7f4 fdd4 	bl	11068 <am_util_stdio_printf>
   1c4c0:	4639      	mov	r1, r7
   1c4c2:	4628      	mov	r0, r5
   1c4c4:	f001 fd58 	bl	1df78 <datalogger_log_debug>
    return System.serial_number;
   1c4c8:	6824      	ldr	r4, [r4, #0]

    uint32_t lcp_ser = SYS_get_serial_num();
    ARTEMIS_DEBUG_PRINTF("\tLCP Serial\t: %c%u%u\n", lcp_ser>>16&0xFF, lcp_ser>>8&0xFF, lcp_ser&0xFF);
   1c4ca:	4d54      	ldr	r5, [pc, #336]	@ (1c61c <SYS_lcp_info+0x244>)
   1c4cc:	0e27      	lsrs	r7, r4, #24
   1c4ce:	f3c4 4807 	ubfx	r8, r4, #16, #8
   1c4d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
   1c4d6:	4623      	mov	r3, r4
   1c4d8:	4642      	mov	r2, r8
   1c4da:	4639      	mov	r1, r7
   1c4dc:	4628      	mov	r0, r5
   1c4de:	f7f4 fdc3 	bl	11068 <am_util_stdio_printf>
   1c4e2:	4623      	mov	r3, r4
    ARTEMIS_DEBUG_PRINTF("\n");
   1c4e4:	4c4e      	ldr	r4, [pc, #312]	@ (1c620 <SYS_lcp_info+0x248>)
    ARTEMIS_DEBUG_PRINTF("\tLCP Serial\t: %c%u%u\n", lcp_ser>>16&0xFF, lcp_ser>>8&0xFF, lcp_ser&0xFF);
   1c4e6:	4639      	mov	r1, r7
   1c4e8:	4642      	mov	r2, r8
   1c4ea:	4628      	mov	r0, r5
   1c4ec:	f001 fd44 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\n");
   1c4f0:	4620      	mov	r0, r4
   1c4f2:	f7f4 fdb9 	bl	11068 <am_util_stdio_printf>
   1c4f6:	4620      	mov	r0, r4
   1c4f8:	f001 fd3e 	bl	1df78 <datalogger_log_debug>

    ARTEMIS_DEBUG_PRINTF("**************************************\n");
    ARTEMIS_DEBUG_PRINTF("\tLCP Physical parameters\n");
   1c4fc:	4d49      	ldr	r5, [pc, #292]	@ (1c624 <SYS_lcp_info+0x24c>)
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1c4fe:	4630      	mov	r0, r6
   1c500:	f7f4 fdb2 	bl	11068 <am_util_stdio_printf>
   1c504:	4630      	mov	r0, r6
   1c506:	f001 fd37 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\tLCP Physical parameters\n");
   1c50a:	4628      	mov	r0, r5
   1c50c:	f7f4 fdac 	bl	11068 <am_util_stdio_printf>
   1c510:	4628      	mov	r0, r5
   1c512:	f001 fd31 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1c516:	4630      	mov	r0, r6
   1c518:	f7f4 fda6 	bl	11068 <am_util_stdio_printf>
    ARTEMIS_DEBUG_PRINTF("Estimated Mass\t: %.3f kg, %.3f lbs\n", SYSTEM_MASS_EST * 0.453592, SYSTEM_MASS_EST);
   1c51c:	f20f 09b0 	addw	r9, pc, #176	@ 0xb0
   1c520:	e9d9 8900 	ldrd	r8, r9, [r9]
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1c524:	4630      	mov	r0, r6
    ARTEMIS_DEBUG_PRINTF("Estimated Mass\t: %.3f kg, %.3f lbs\n", SYSTEM_MASS_EST * 0.453592, SYSTEM_MASS_EST);
   1c526:	a72c      	add	r7, pc, #176	@ (adr r7, 1c5d8 <SYS_lcp_info+0x200>)
   1c528:	e9d7 6700 	ldrd	r6, r7, [r7]
   1c52c:	4d3e      	ldr	r5, [pc, #248]	@ (1c628 <SYS_lcp_info+0x250>)
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1c52e:	f001 fd23 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("Estimated Mass\t: %.3f kg, %.3f lbs\n", SYSTEM_MASS_EST * 0.453592, SYSTEM_MASS_EST);
   1c532:	e9cd 8900 	strd	r8, r9, [sp]
   1c536:	4632      	mov	r2, r6
   1c538:	463b      	mov	r3, r7
   1c53a:	4628      	mov	r0, r5
   1c53c:	f7f4 fd94 	bl	11068 <am_util_stdio_printf>
   1c540:	e9cd 8900 	strd	r8, r9, [sp]
   1c544:	4632      	mov	r2, r6
    ARTEMIS_DEBUG_PRINTF("Minimum Volume\t: %.3f m³, %.3f in³\n", SYSTEM_VOLUME_MIN*0.000016387, SYSTEM_VOLUME_MIN);
   1c546:	f20f 0998 	addw	r9, pc, #152	@ 0x98
   1c54a:	e9d9 8900 	ldrd	r8, r9, [r9]
    ARTEMIS_DEBUG_PRINTF("Estimated Mass\t: %.3f kg, %.3f lbs\n", SYSTEM_MASS_EST * 0.453592, SYSTEM_MASS_EST);
   1c54e:	463b      	mov	r3, r7
    ARTEMIS_DEBUG_PRINTF("Minimum Volume\t: %.3f m³, %.3f in³\n", SYSTEM_VOLUME_MIN*0.000016387, SYSTEM_VOLUME_MIN);
   1c550:	a725      	add	r7, pc, #148	@ (adr r7, 1c5e8 <SYS_lcp_info+0x210>)
   1c552:	e9d7 6700 	ldrd	r6, r7, [r7]
    ARTEMIS_DEBUG_PRINTF("Estimated Mass\t: %.3f kg, %.3f lbs\n", SYSTEM_MASS_EST * 0.453592, SYSTEM_MASS_EST);
   1c556:	4628      	mov	r0, r5
    ARTEMIS_DEBUG_PRINTF("Minimum Volume\t: %.3f m³, %.3f in³\n", SYSTEM_VOLUME_MIN*0.000016387, SYSTEM_VOLUME_MIN);
   1c558:	4d34      	ldr	r5, [pc, #208]	@ (1c62c <SYS_lcp_info+0x254>)
    ARTEMIS_DEBUG_PRINTF("Estimated Mass\t: %.3f kg, %.3f lbs\n", SYSTEM_MASS_EST * 0.453592, SYSTEM_MASS_EST);
   1c55a:	f001 fd0d 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("Minimum Volume\t: %.3f m³, %.3f in³\n", SYSTEM_VOLUME_MIN*0.000016387, SYSTEM_VOLUME_MIN);
   1c55e:	e9cd 8900 	strd	r8, r9, [sp]
   1c562:	4632      	mov	r2, r6
   1c564:	463b      	mov	r3, r7
   1c566:	4628      	mov	r0, r5
   1c568:	f7f4 fd7e 	bl	11068 <am_util_stdio_printf>
   1c56c:	4632      	mov	r2, r6
   1c56e:	463b      	mov	r3, r7
   1c570:	e9cd 8900 	strd	r8, r9, [sp]
   1c574:	4628      	mov	r0, r5
   1c576:	f001 fcff 	bl	1df78 <datalogger_log_debug>
    float density = CTRL_calculate_lcp_density(SYSTEM_VOLUME_MIN);
   1c57a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 1c630 <SYS_lcp_info+0x258>
    ARTEMIS_DEBUG_PRINTF("Maximum Density\t: %.3f kg/m³, %.3f lbs/in³\n", density, density*0.000036127);
   1c57e:	4d2d      	ldr	r5, [pc, #180]	@ (1c634 <SYS_lcp_info+0x25c>)
    float density = CTRL_calculate_lcp_density(SYSTEM_VOLUME_MIN);
   1c580:	f7f7 fe32 	bl	141e8 <CTRL_calculate_lcp_density>
   1c584:	ee10 0a10 	vmov	r0, s0
    ARTEMIS_DEBUG_PRINTF("Maximum Density\t: %.3f kg/m³, %.3f lbs/in³\n", density, density*0.000036127);
   1c588:	f7ef ff1e 	bl	c3c8 <__aeabi_f2d>
   1c58c:	a318      	add	r3, pc, #96	@ (adr r3, 1c5f0 <SYS_lcp_info+0x218>)
   1c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c592:	4606      	mov	r6, r0
   1c594:	460f      	mov	r7, r1
   1c596:	f7ef ff6f 	bl	c478 <__aeabi_dmul>
   1c59a:	4689      	mov	r9, r1
   1c59c:	4680      	mov	r8, r0
   1c59e:	4632      	mov	r2, r6
   1c5a0:	463b      	mov	r3, r7
   1c5a2:	e9cd 8900 	strd	r8, r9, [sp]
   1c5a6:	4628      	mov	r0, r5
   1c5a8:	f7f4 fd5e 	bl	11068 <am_util_stdio_printf>
   1c5ac:	4632      	mov	r2, r6
   1c5ae:	463b      	mov	r3, r7
   1c5b0:	4628      	mov	r0, r5
   1c5b2:	e9cd 8900 	strd	r8, r9, [sp]
   1c5b6:	f001 fcdf 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("\n");
   1c5ba:	4620      	mov	r0, r4
   1c5bc:	f7f4 fd54 	bl	11068 <am_util_stdio_printf>
   1c5c0:	4620      	mov	r0, r4
   1c5c2:	f001 fcd9 	bl	1df78 <datalogger_log_debug>

    return true;
}
   1c5c6:	2001      	movs	r0, #1
   1c5c8:	b003      	add	sp, #12
   1c5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c5ce:	bf00      	nop
   1c5d0:	80000000 	.word	0x80000000
   1c5d4:	40388e97 	.word	0x40388e97
   1c5d8:	7234eb9a 	.word	0x7234eb9a
   1c5dc:	40264718 	.word	0x40264718
   1c5e0:	7941b939 	.word	0x7941b939
   1c5e4:	4084750f 	.word	0x4084750f
   1c5e8:	cda2ad5f 	.word	0xcda2ad5f
   1c5ec:	3f85f847 	.word	0x3f85f847
   1c5f0:	449d01c8 	.word	0x449d01c8
   1c5f4:	3f02f0e2 	.word	0x3f02f0e2
   1c5f8:	0002ff78 	.word	0x0002ff78
   1c5fc:	0002b34c 	.word	0x0002b34c
   1c600:	0002ff94 	.word	0x0002ff94
   1c604:	10002394 	.word	0x10002394
   1c608:	0002ffa8 	.word	0x0002ffa8
   1c60c:	0002ff70 	.word	0x0002ff70
   1c610:	0002fff0 	.word	0x0002fff0
   1c614:	0002ffe4 	.word	0x0002ffe4
   1c618:	00030008 	.word	0x00030008
   1c61c:	0003001c 	.word	0x0003001c
   1c620:	000305a0 	.word	0x000305a0
   1c624:	00030034 	.word	0x00030034
   1c628:	00030050 	.word	0x00030050
   1c62c:	00030074 	.word	0x00030074
   1c630:	4423a87c 	.word	0x4423a87c
   1c634:	0003009c 	.word	0x0003009c
   1c638:	0002ffc8 	.word	0x0002ffc8

0001c63c <TEMP_initialize>:

bool TEMP_initialize(TemperatureSensor_t sensor){

    module.sensor = sensor;

    switch (sensor)
   1c63c:	2801      	cmp	r0, #1
   1c63e:	d001      	beq.n	1c644 <TEMP_initialize+0x8>
        default:
            break;
    }

    return true;
}
   1c640:	2001      	movs	r0, #1
   1c642:	4770      	bx	lr
bool TEMP_initialize(TemperatureSensor_t sensor){
   1c644:	b508      	push	{r3, lr}
            S9T_init(pS);
   1c646:	4802      	ldr	r0, [pc, #8]	@ (1c650 <TEMP_initialize+0x14>)
   1c648:	f000 fe56 	bl	1d2f8 <S9T_init>
}
   1c64c:	2001      	movs	r0, #1
   1c64e:	bd08      	pop	{r3, pc}
   1c650:	100023a0 	.word	0x100023a0

0001c654 <TEMP_initialize_RTOS>:

void TEMP_initialize_RTOS(void)
{
   1c654:	b510      	push	{r4, lr}
    TEMP_Power_ON();
    MAX14830_port_enable((eMAX18430_ComPort_t) sParam.port);
   1c656:	4c07      	ldr	r4, [pc, #28]	@ (1c674 <TEMP_initialize_RTOS+0x20>)
    TEMP_Power_OFF();
}

void TEMP_Power_ON(void)
{
    S9T_enable();
   1c658:	f000 feae 	bl	1d3b8 <S9T_enable>
    MAX14830_port_enable((eMAX18430_ComPort_t) sParam.port);
   1c65c:	7820      	ldrb	r0, [r4, #0]
   1c65e:	f7f6 fa93 	bl	12b88 <MAX14830_port_enable>
    MAX14830_Set_baudrate((eMAX18430_ComPort_t) sParam.port, sParam.baudrate);
   1c662:	6861      	ldr	r1, [r4, #4]
   1c664:	7820      	ldrb	r0, [r4, #0]
   1c666:	f7f6 fcfd 	bl	13064 <MAX14830_Set_baudrate>
}
   1c66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _module_s9_stop_sampling_RTOS();
   1c66e:	f000 bc59 	b.w	1cf24 <_module_s9_stop_sampling_RTOS>
   1c672:	bf00      	nop
   1c674:	100023a0 	.word	0x100023a0

0001c678 <TEMP_uninitialize_RTOS>:
{
   1c678:	b508      	push	{r3, lr}
    MAX14830_port_disable((eMAX18430_ComPort_t) sParam.port);
   1c67a:	4b04      	ldr	r3, [pc, #16]	@ (1c68c <TEMP_uninitialize_RTOS+0x14>)
   1c67c:	7818      	ldrb	r0, [r3, #0]
   1c67e:	f7f6 fae9 	bl	12c54 <MAX14830_port_disable>
}
   1c682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void TEMP_Power_OFF(void)
{
    S9T_disable();
   1c686:	f000 bea9 	b.w	1d3dc <S9T_disable>
   1c68a:	bf00      	nop
   1c68c:	100023a0 	.word	0x100023a0

0001c690 <TEMP_Read>:
}

void TEMP_Read(Temperature_Measurement_t *data)
{
   1c690:	b510      	push	{r4, lr}
   1c692:	b082      	sub	sp, #8
   1c694:	4604      	mov	r4, r0
    float temperature, resistance = 0;
   1c696:	2300      	movs	r3, #0

    S9T_Read(&temperature, &resistance);
   1c698:	a901      	add	r1, sp, #4
   1c69a:	4668      	mov	r0, sp
    float temperature, resistance = 0;
   1c69c:	9301      	str	r3, [sp, #4]
    S9T_Read(&temperature, &resistance);
   1c69e:	f000 feaf 	bl	1d400 <S9T_Read>

    data->temperature = temperature;
   1c6a2:	9a00      	ldr	r2, [sp, #0]
    data->resistance = resistance;
   1c6a4:	9b01      	ldr	r3, [sp, #4]
    data->temperature = temperature;
   1c6a6:	6022      	str	r2, [r4, #0]
    data->resistance = resistance;
   1c6a8:	6063      	str	r3, [r4, #4]
}
   1c6aa:	b002      	add	sp, #8
   1c6ac:	bd10      	pop	{r4, pc}
   1c6ae:	bf00      	nop

0001c6b0 <UBLOX_uninitialize>:
 * @brief UBLOX Module unInitialize
 *
 */
void UBLOX_uninitialize(void)
{
    artemis_ublox_i2c_uninitialize();
   1c6b0:	f7ff bd22 	b.w	1c0f8 <artemis_ublox_i2c_uninitialize>

0001c6b4 <module_ublox_read_ubx>:
                    uint8_t *payload,
                    uint16_t length,
                    uint16_t delay,
                    ubx_packet_t *packet
                    )
{
   1c6b4:	b570      	push	{r4, r5, r6, lr}
   1c6b6:	b086      	sub	sp, #24
    bool retVal = false;
    ubx_packet_t txPacket = {0};
   1c6b8:	ac03      	add	r4, sp, #12
   1c6ba:	2500      	movs	r5, #0
    int16_t offset;

    /** Create Packet */
    UBX_create_ubx_packet((uint8_t) cls, id, payload, length, &txPacket);
   1c6bc:	9400      	str	r4, [sp, #0]
{
   1c6be:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
    ubx_packet_t txPacket = {0};
   1c6c2:	9505      	str	r5, [sp, #20]
   1c6c4:	e9cd 5503 	strd	r5, r5, [sp, #12]
    UBX_create_ubx_packet((uint8_t) cls, id, payload, length, &txPacket);
   1c6c8:	f000 f97c 	bl	1c9c4 <UBX_create_ubx_packet>
    UBX_create_msg_from_packet(&txPacket, ubx_msg);
   1c6cc:	4919      	ldr	r1, [pc, #100]	@ (1c734 <module_ublox_read_ubx+0x80>)
   1c6ce:	4620      	mov	r0, r4
   1c6d0:	f000 fa56 	bl	1cb80 <UBX_create_msg_from_packet>
    UBX_create_msg_from_packet(packet, ubx_msg);
   1c6d4:	4917      	ldr	r1, [pc, #92]	@ (1c734 <module_ublox_read_ubx+0x80>)
   1c6d6:	4620      	mov	r0, r4
   1c6d8:	f000 fa52 	bl	1cb80 <UBX_create_msg_from_packet>
    artemis_ublox_i2c_send_msg(ubx_msg, packet->length + UBX_HEADER_SIZE, false);
   1c6dc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c6e0:	4814      	ldr	r0, [pc, #80]	@ (1c734 <module_ublox_read_ubx+0x80>)
   1c6e2:	3108      	adds	r1, #8
   1c6e4:	462a      	mov	r2, r5
   1c6e6:	b289      	uxth	r1, r1
   1c6e8:	f7ff fd36 	bl	1c158 <artemis_ublox_i2c_send_msg>
    /** Send Packet */
//    artemis_ublox_send_packet(ubx_msg, txPacket.length, false);
    module_ublox_send_packet(&txPacket);

    /** Sleep if there is a delay */
    while(delay-- > 0)
   1c6ec:	b15e      	cbz	r6, 1c706 <module_ublox_read_ubx+0x52>
   1c6ee:	1e74      	subs	r4, r6, #1
   1c6f0:	b2a4      	uxth	r4, r4
   1c6f2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
   1c6f6:	3c01      	subs	r4, #1
    {
        am_hal_systick_delay_us(1000);
   1c6f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    while(delay-- > 0)
   1c6fc:	b2a4      	uxth	r4, r4
        am_hal_systick_delay_us(1000);
   1c6fe:	f004 fb59 	bl	20db4 <am_hal_systick_delay_us>
    while(delay-- > 0)
   1c702:	42ac      	cmp	r4, r5
   1c704:	d1f7      	bne.n	1c6f6 <module_ublox_read_ubx+0x42>
    }

    /** Read Buffer */
    uint16_t len = artemis_ublox_i2c_read_data(ubx_msg);
   1c706:	4d0b      	ldr	r5, [pc, #44]	@ (1c734 <module_ublox_read_ubx+0x80>)
   1c708:	4628      	mov	r0, r5
   1c70a:	f7ff fd69 	bl	1c1e0 <artemis_ublox_i2c_read_data>
	//for (uint16_t i=0; i<len; i++){
	//	am_util_stdio_printf("%c", ubx_msg[i]);
	//}
	//am_util_stdio_printf("\n");

    if(len > 0)
   1c70e:	4604      	mov	r4, r0
   1c710:	b910      	cbnz	r0, 1c718 <module_ublox_read_ubx+0x64>
{
   1c712:	2000      	movs	r0, #0
        /** Create return Packet */
        retVal = UBX_create_packet_from_msg(pStart , len, packet);
    }

    return retVal;
}
   1c714:	b006      	add	sp, #24
   1c716:	bd70      	pop	{r4, r5, r6, pc}
        offset = UBX_find_start_of_msg(ubx_msg, len);
   1c718:	4601      	mov	r1, r0
   1c71a:	4628      	mov	r0, r5
   1c71c:	f000 fa70 	bl	1cc00 <UBX_find_start_of_msg>
        if(offset >= 0)
   1c720:	2800      	cmp	r0, #0
   1c722:	dbf6      	blt.n	1c712 <module_ublox_read_ubx+0x5e>
            len -= offset;
   1c724:	1a21      	subs	r1, r4, r0
        retVal = UBX_create_packet_from_msg(pStart , len, packet);
   1c726:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   1c728:	b289      	uxth	r1, r1
   1c72a:	4428      	add	r0, r5
   1c72c:	f000 fa44 	bl	1cbb8 <UBX_create_packet_from_msg>
}
   1c730:	b006      	add	sp, #24
   1c732:	bd70      	pop	{r4, r5, r6, pc}
   1c734:	1004a15c 	.word	0x1004a15c

0001c738 <UBLOX_read_nav>:
{
   1c738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c73a:	b09d      	sub	sp, #116	@ 0x74
    ubx_nav_pvt_t nav = {0};
   1c73c:	225c      	movs	r2, #92	@ 0x5c
   1c73e:	2100      	movs	r1, #0
{
   1c740:	4605      	mov	r5, r0
    ubx_nav_pvt_t nav = {0};
   1c742:	a805      	add	r0, sp, #20
   1c744:	f007 fe24 	bl	24390 <memset>
    ubx_packet_t packet = {0};
   1c748:	2400      	movs	r4, #0
    retVal = module_ublox_read_ubx((uint8_t)cls, id, NULL, 0, delay, &packet);
   1c74a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
    ubx_packet_t packet = {0};
   1c74e:	af02      	add	r7, sp, #8
    retVal = module_ublox_read_ubx((uint8_t)cls, id, NULL, 0, delay, &packet);
   1c750:	e9cd 3700 	strd	r3, r7, [sp]
   1c754:	4622      	mov	r2, r4
   1c756:	4623      	mov	r3, r4
   1c758:	2107      	movs	r1, #7
   1c75a:	2001      	movs	r0, #1
    ubx_packet_t packet = {0};
   1c75c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1c760:	9404      	str	r4, [sp, #16]
    retVal = module_ublox_read_ubx((uint8_t)cls, id, NULL, 0, delay, &packet);
   1c762:	f7ff ffa7 	bl	1c6b4 <module_ublox_read_ubx>
    if(retVal)
   1c766:	b918      	cbnz	r0, 1c770 <UBLOX_read_nav+0x38>
    retVal = module_ublox_read(UBX_NAV_CLASS, UBX_NAV_PVT, &nav);
   1c768:	2600      	movs	r6, #0
}
   1c76a:	4630      	mov	r0, r6
   1c76c:	b01d      	add	sp, #116	@ 0x74
   1c76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c770:	4606      	mov	r6, r0
                UBX_parse_nav((UBX_NAV_ID_t) id, &packet, parsed);
   1c772:	aa05      	add	r2, sp, #20
   1c774:	4639      	mov	r1, r7
   1c776:	2007      	movs	r0, #7
   1c778:	f000 f95e 	bl	1ca38 <UBX_parse_nav>
        if(nav.fixType > 2)
   1c77c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
   1c780:	2b02      	cmp	r3, #2
   1c782:	d94b      	bls.n	1c81c <UBLOX_read_nav+0xe4>
            data->fix = true;
   1c784:	2301      	movs	r3, #1
   1c786:	702b      	strb	r3, [r5, #0]
            data->position.lat = nav.lat * 1e-7;
   1c788:	980c      	ldr	r0, [sp, #48]	@ 0x30
   1c78a:	f7ef fe0b 	bl	c3a4 <__aeabi_i2d>
   1c78e:	a324      	add	r3, pc, #144	@ (adr r3, 1c820 <UBLOX_read_nav+0xe8>)
   1c790:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c794:	f7ef fe70 	bl	c478 <__aeabi_dmul>
   1c798:	f7f0 f928 	bl	c9ec <__aeabi_d2f>
   1c79c:	4603      	mov	r3, r0
   1c79e:	606b      	str	r3, [r5, #4]
            data->position.lon = nav.lon * 1e-7;
   1c7a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1c7a2:	f7ef fdff 	bl	c3a4 <__aeabi_i2d>
   1c7a6:	a31e      	add	r3, pc, #120	@ (adr r3, 1c820 <UBLOX_read_nav+0xe8>)
   1c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7ac:	f7ef fe64 	bl	c478 <__aeabi_dmul>
   1c7b0:	f7f0 f91c 	bl	c9ec <__aeabi_d2f>
   1c7b4:	4603      	mov	r3, r0
   1c7b6:	60ab      	str	r3, [r5, #8]
            data->position.alt = nav.hMSL* 1e-3;
   1c7b8:	980e      	ldr	r0, [sp, #56]	@ 0x38
   1c7ba:	f7ef fdf3 	bl	c3a4 <__aeabi_i2d>
   1c7be:	a31a      	add	r3, pc, #104	@ (adr r3, 1c828 <UBLOX_read_nav+0xf0>)
   1c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7c4:	f7ef fe58 	bl	c478 <__aeabi_dmul>
   1c7c8:	f7f0 f910 	bl	c9ec <__aeabi_d2f>
            data->accuracy.hAcc = nav.hAcc;
   1c7cc:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
   1c7d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
            data->accuracy.vAcc = nav.vAcc;
   1c7d4:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
            data->accuracy.hAcc = nav.hAcc;
   1c7d8:	ed85 7a04 	vstr	s14, [r5, #16]
            data->accuracy.vAcc = nav.vAcc;
   1c7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
            data->position.alt = nav.hMSL* 1e-3;
   1c7e0:	4603      	mov	r3, r0
            data->accuracy.vAcc = nav.vAcc;
   1c7e2:	edc5 7a05 	vstr	s15, [r5, #20]
            data->position.alt = nav.hMSL* 1e-3;
   1c7e6:	60eb      	str	r3, [r5, #12]
            data->accuracy.pDOP = nav.pDOP * 0.01;
   1c7e8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	@ 0x60
   1c7ec:	f7ef fdda 	bl	c3a4 <__aeabi_i2d>
   1c7f0:	a30f      	add	r3, pc, #60	@ (adr r3, 1c830 <UBLOX_read_nav+0xf8>)
   1c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7f6:	f7ef fe3f 	bl	c478 <__aeabi_dmul>
   1c7fa:	f7f0 f8d7 	bl	c9ac <__aeabi_d2uiz>
            data->time.year = nav.year;
   1c7fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
            data->time.month = nav.month;
   1c802:	f8dd 201a 	ldr.w	r2, [sp, #26]
            data->time.year = nav.year;
   1c806:	83ab      	strh	r3, [r5, #28]
            data->time.sec = nav.sec;
   1c808:	f89d 301e 	ldrb.w	r3, [sp, #30]
            data->accuracy.pDOP = nav.pDOP * 0.01;
   1c80c:	8328      	strh	r0, [r5, #24]
}
   1c80e:	4630      	mov	r0, r6
            data->time.month = nav.month;
   1c810:	f8c5 201e 	str.w	r2, [r5, #30]
            data->time.sec = nav.sec;
   1c814:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
}
   1c818:	b01d      	add	sp, #116	@ 0x74
   1c81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            data->fix = false;
   1c81c:	702c      	strb	r4, [r5, #0]
            retVal = false;
   1c81e:	e7a3      	b.n	1c768 <UBLOX_read_nav+0x30>
   1c820:	9abcaf48 	.word	0x9abcaf48
   1c824:	3e7ad7f2 	.word	0x3e7ad7f2
   1c828:	d2f1a9fc 	.word	0xd2f1a9fc
   1c82c:	3f50624d 	.word	0x3f50624d
   1c830:	47ae147b 	.word	0x47ae147b
   1c834:	3f847ae1 	.word	0x3f847ae1

0001c838 <module_ublox_wait_for_ack_or_nak>:

bool module_ublox_wait_for_ack_or_nak(  uint8_t expectedClass,
                                        uint8_t expectedId,
                                        uint16_t initial_delay_ms,
                                        uint8_t attempts  )
{
   1c838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c83c:	4680      	mov	r8, r0
   1c83e:	b085      	sub	sp, #20
    bool retVal = false;

    ubx_packet_t rxPacket = {0};

    /** Delay */
    am_hal_systick_delay_us(initial_delay_ms*1000);
   1c840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
    ubx_packet_t rxPacket = {0};
   1c844:	2500      	movs	r5, #0
    am_hal_systick_delay_us(initial_delay_ms*1000);
   1c846:	fb02 f000 	mul.w	r0, r2, r0
    ubx_packet_t rxPacket = {0};
   1c84a:	e9cd 5501 	strd	r5, r5, [sp, #4]
{
   1c84e:	4689      	mov	r9, r1
   1c850:	461f      	mov	r7, r3
    ubx_packet_t rxPacket = {0};
   1c852:	9503      	str	r5, [sp, #12]
    am_hal_systick_delay_us(initial_delay_ms*1000);
   1c854:	f004 faae 	bl	20db4 <am_hal_systick_delay_us>

    /** Read buffer & parse for UBX packet */
    uint8_t cnt = 0;
    bool endFlag = false;
    while(endFlag == false)
   1c858:	4e1d      	ldr	r6, [pc, #116]	@ (1c8d0 <module_ublox_wait_for_ack_or_nak+0x98>)
    msgLen = artemis_ublox_i2c_read_data(ubx_msg);
   1c85a:	4630      	mov	r0, r6
   1c85c:	f7ff fcc0 	bl	1c1e0 <artemis_ublox_i2c_read_data>
   1c860:	4604      	mov	r4, r0
    int16_t offset = UBX_find_start_of_msg(ubx_msg, msgLen);
   1c862:	4601      	mov	r1, r0
   1c864:	4630      	mov	r0, r6
   1c866:	f000 f9cb 	bl	1cc00 <UBX_find_start_of_msg>
    if(offset >= 0)
   1c86a:	2800      	cmp	r0, #0
        uint16_t len = msgLen - offset;
   1c86c:	eba4 0400 	sub.w	r4, r4, r0
   1c870:	b2a4      	uxth	r4, r4
    if(offset >= 0)
   1c872:	db1d      	blt.n	1c8b0 <module_ublox_wait_for_ack_or_nak+0x78>
        if(len > 0)
   1c874:	b9ac      	cbnz	r4, 1c8a2 <module_ublox_wait_for_ack_or_nak+0x6a>
    {

        retVal = module_ublox_read_packet(&rxPacket);
        if( ((retVal == true) && (rxPacket.length > 0) )|| (++cnt > attempts))
   1c876:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c87a:	2401      	movs	r4, #1
   1c87c:	b1cb      	cbz	r3, 1c8b2 <module_ublox_wait_for_ack_or_nak+0x7a>
        {
            endFlag = true;
        }
        am_hal_systick_delay_us(10000);
   1c87e:	f242 7010 	movw	r0, #10000	@ 0x2710
   1c882:	f004 fa97 	bl	20db4 <am_hal_systick_delay_us>

    /** Check for ACK-ACK or ACK-NAK */
    if(retVal)
    {
        ubx_ack_t valid = UBX_ACK_INVALID_RESPONSE;
        valid = UBX_check_for_ack(&rxPacket, expectedClass, expectedId);
   1c886:	464a      	mov	r2, r9
   1c888:	4641      	mov	r1, r8
   1c88a:	a801      	add	r0, sp, #4
   1c88c:	f000 f9cc 	bl	1cc28 <UBX_check_for_ack>
        switch(valid)
   1c890:	f1a0 0402 	sub.w	r4, r0, #2
   1c894:	fab4 f484 	clz	r4, r4
   1c898:	0964      	lsrs	r4, r4, #5
              break;
        }
    }

    return retVal;
}
   1c89a:	4620      	mov	r0, r4
   1c89c:	b005      	add	sp, #20
   1c89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            retVal = UBX_parse_ubx_packet(pStart, len, packet);
   1c8a2:	aa01      	add	r2, sp, #4
   1c8a4:	b2e1      	uxtb	r1, r4
   1c8a6:	4430      	add	r0, r6
   1c8a8:	f000 f8ae 	bl	1ca08 <UBX_parse_ubx_packet>
        if( ((retVal == true) && (rxPacket.length > 0) )|| (++cnt > attempts))
   1c8ac:	2800      	cmp	r0, #0
   1c8ae:	d1e2      	bne.n	1c876 <module_ublox_wait_for_ack_or_nak+0x3e>
    bool retVal = false;
   1c8b0:	2400      	movs	r4, #0
        am_hal_systick_delay_us(10000);
   1c8b2:	f242 7010 	movw	r0, #10000	@ 0x2710
    while(endFlag == false)
   1c8b6:	3501      	adds	r5, #1
        am_hal_systick_delay_us(10000);
   1c8b8:	f004 fa7c 	bl	20db4 <am_hal_systick_delay_us>
    while(endFlag == false)
   1c8bc:	b2eb      	uxtb	r3, r5
   1c8be:	429f      	cmp	r7, r3
   1c8c0:	d2cb      	bcs.n	1c85a <module_ublox_wait_for_ack_or_nak+0x22>
    if(retVal)
   1c8c2:	2c00      	cmp	r4, #0
   1c8c4:	d1df      	bne.n	1c886 <module_ublox_wait_for_ack_or_nak+0x4e>
}
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	b005      	add	sp, #20
   1c8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c8ce:	bf00      	nop
   1c8d0:	1004a15c 	.word	0x1004a15c

0001c8d4 <module_ublox_cfg_port_for_i2c>:
{
   1c8d4:	b570      	push	{r4, r5, r6, lr}
   1c8d6:	b08a      	sub	sp, #40	@ 0x28
    ubx_packet_t txPacket = {0};
   1c8d8:	2400      	movs	r4, #0
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_PRT, payload, 20, &txPacket);
   1c8da:	2314      	movs	r3, #20
    uint8_t payload[20] = {0};
   1c8dc:	9408      	str	r4, [sp, #32]
    UBX_create_msg_from_packet(packet, ubx_msg);
   1c8de:	4e16      	ldr	r6, [pc, #88]	@ (1c938 <module_ublox_cfg_port_for_i2c+0x64>)
    payload[14] = outConfig;
   1c8e0:	f88d 1022 	strb.w	r1, [sp, #34]	@ 0x22
    ubx_packet_t txPacket = {0};
   1c8e4:	ad02      	add	r5, sp, #8
    payload[4] = UBLOX_I2C_ADDR << 1;
   1c8e6:	2184      	movs	r1, #132	@ 0x84
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_PRT, payload, 20, &txPacket);
   1c8e8:	eb0d 0203 	add.w	r2, sp, r3
    payload[12] = inConfig;
   1c8ec:	f88d 0020 	strb.w	r0, [sp, #32]
    uint8_t payload[20] = {0};
   1c8f0:	9406      	str	r4, [sp, #24]
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_PRT, payload, 20, &txPacket);
   1c8f2:	9500      	str	r5, [sp, #0]
    payload[4] = UBLOX_I2C_ADDR << 1;
   1c8f4:	f88d 1018 	strb.w	r1, [sp, #24]
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_PRT, payload, 20, &txPacket);
   1c8f8:	2006      	movs	r0, #6
   1c8fa:	4621      	mov	r1, r4
    ubx_packet_t txPacket = {0};
   1c8fc:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1c900:	9402      	str	r4, [sp, #8]
    uint8_t payload[20] = {0};
   1c902:	9405      	str	r4, [sp, #20]
   1c904:	9407      	str	r4, [sp, #28]
   1c906:	9409      	str	r4, [sp, #36]	@ 0x24
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_PRT, payload, 20, &txPacket);
   1c908:	f000 f85c 	bl	1c9c4 <UBX_create_ubx_packet>
    UBX_create_msg_from_packet(packet, ubx_msg);
   1c90c:	4628      	mov	r0, r5
   1c90e:	4631      	mov	r1, r6
   1c910:	f000 f936 	bl	1cb80 <UBX_create_msg_from_packet>
    artemis_ublox_i2c_send_msg(ubx_msg, packet->length + UBX_HEADER_SIZE, false);
   1c914:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1c918:	3108      	adds	r1, #8
   1c91a:	4622      	mov	r2, r4
   1c91c:	4630      	mov	r0, r6
   1c91e:	b289      	uxth	r1, r1
   1c920:	f7ff fc1a 	bl	1c158 <artemis_ublox_i2c_send_msg>
        retVal = module_ublox_wait_for_ack_or_nak( UBX_CFG_CLASS, UBX_CFG_PRT, 500, 50);
   1c924:	2332      	movs	r3, #50	@ 0x32
   1c926:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
   1c92a:	4621      	mov	r1, r4
   1c92c:	2006      	movs	r0, #6
   1c92e:	f7ff ff83 	bl	1c838 <module_ublox_wait_for_ack_or_nak>
}
   1c932:	b00a      	add	sp, #40	@ 0x28
   1c934:	bd70      	pop	{r4, r5, r6, pc}
   1c936:	bf00      	nop
   1c938:	1004a15c 	.word	0x1004a15c

0001c93c <UBLOX_initialize>:
    if(port == UBLOX_COM_I2C)
   1c93c:	b108      	cbz	r0, 1c942 <UBLOX_initialize+0x6>
    bool retVal = false;
   1c93e:	2000      	movs	r0, #0
}
   1c940:	4770      	bx	lr
{
   1c942:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c944:	4617      	mov	r7, r2
   1c946:	b087      	sub	sp, #28
   1c948:	4604      	mov	r4, r0
   1c94a:	460e      	mov	r6, r1
    artemis_ublox_i2c_initialize(UBLOX_I2C_ADDR);
   1c94c:	2042      	movs	r0, #66	@ 0x42
   1c94e:	461d      	mov	r5, r3
   1c950:	f7ff fb4a 	bl	1bfe8 <artemis_ublox_i2c_initialize>
    artemis_ublox_i2c_power_on();
   1c954:	f7ff fbd8 	bl	1c108 <artemis_ublox_i2c_power_on>
        module_ublox_cfg_port_for_i2c((uint8_t) inMsg, (uint8_t) outMsg);
   1c958:	4639      	mov	r1, r7
   1c95a:	4630      	mov	r0, r6
   1c95c:	f7ff ffba 	bl	1c8d4 <module_ublox_cfg_port_for_i2c>
    ubx_packet_t txPacket = {0};
   1c960:	ae03      	add	r6, sp, #12
    uint16_t rate = 1000 / (rateHz * 4);
   1c962:	2d28      	cmp	r5, #40	@ 0x28
    uint8_t payload[3] = {cls, id, rate};
   1c964:	f240 7201 	movw	r2, #1793	@ 0x701
    uint16_t rate = 1000 / (rateHz * 4);
   1c968:	bf28      	it	cs
   1c96a:	2528      	movcs	r5, #40	@ 0x28
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_MSG, payload, 3, &txPacket);
   1c96c:	2303      	movs	r3, #3
    uint8_t payload[3] = {cls, id, rate};
   1c96e:	f8ad 2008 	strh.w	r2, [sp, #8]
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_MSG, payload, 3, &txPacket);
   1c972:	9600      	str	r6, [sp, #0]
   1c974:	aa02      	add	r2, sp, #8
   1c976:	2101      	movs	r1, #1
   1c978:	2006      	movs	r0, #6
    ubx_packet_t txPacket = {0};
   1c97a:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1c97e:	9403      	str	r4, [sp, #12]
    uint16_t rate = 1000 / (rateHz * 4);
   1c980:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
   1c984:	00ad      	lsls	r5, r5, #2
   1c986:	fbb7 f5f5 	udiv	r5, r7, r5
        module_cfg_port_msg(UBX_NAV_CLASS, UBX_NAV_PVT, rate);
   1c98a:	f88d 500a 	strb.w	r5, [sp, #10]
    UBX_create_ubx_packet(UBX_CFG_CLASS, UBX_CFG_MSG, payload, 3, &txPacket);
   1c98e:	f000 f819 	bl	1c9c4 <UBX_create_ubx_packet>
    UBX_create_msg_from_packet(packet, ubx_msg);
   1c992:	4630      	mov	r0, r6
   1c994:	490a      	ldr	r1, [pc, #40]	@ (1c9c0 <UBLOX_initialize+0x84>)
   1c996:	f000 f8f3 	bl	1cb80 <UBX_create_msg_from_packet>
    artemis_ublox_i2c_send_msg(ubx_msg, packet->length + UBX_HEADER_SIZE, false);
   1c99a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c99e:	4808      	ldr	r0, [pc, #32]	@ (1c9c0 <UBLOX_initialize+0x84>)
   1c9a0:	3108      	adds	r1, #8
   1c9a2:	4622      	mov	r2, r4
   1c9a4:	b289      	uxth	r1, r1
   1c9a6:	f7ff fbd7 	bl	1c158 <artemis_ublox_i2c_send_msg>
        retVal = module_ublox_wait_for_ack_or_nak(UBX_CFG_CLASS, UBX_CFG_PRT, 500, 50);
   1c9aa:	2332      	movs	r3, #50	@ 0x32
   1c9ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
   1c9b0:	4621      	mov	r1, r4
   1c9b2:	2006      	movs	r0, #6
   1c9b4:	f7ff ff40 	bl	1c838 <module_ublox_wait_for_ack_or_nak>
        retVal = true;
   1c9b8:	2001      	movs	r0, #1
}
   1c9ba:	b007      	add	sp, #28
   1c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c9be:	bf00      	nop
   1c9c0:	1004a15c 	.word	0x1004a15c

0001c9c4 <UBX_create_ubx_packet>:
                                uint8_t ubx_id,
                                uint8_t *payload,
                                uint16_t len,
                                ubx_packet_t *packet
                                )
{
   1c9c4:	b410      	push	{r4}
   1c9c6:	9c01      	ldr	r4, [sp, #4]
    packet->cls = ubx_class;
    packet->id = ubx_id;
   1c9c8:	7061      	strb	r1, [r4, #1]
 * @param packet Pointer to UBX Packet
 * @param value Value to add to checksum
 */
static void UBX_checksum_increment(ubx_packet_t *packet, uint8_t value)
{
    packet->chksumA += value;
   1c9ca:	4401      	add	r1, r0
   1c9cc:	b2c9      	uxtb	r1, r1
    packet->cls = ubx_class;
   1c9ce:	7020      	strb	r0, [r4, #0]
    packet->chksumB += packet->chksumA;
   1c9d0:	4408      	add	r0, r1
    packet->chksumA += value;
   1c9d2:	4419      	add	r1, r3
   1c9d4:	b2c9      	uxtb	r1, r1
    packet->chksumB += packet->chksumA;
   1c9d6:	4408      	add	r0, r1
    packet->chksumA += value;
   1c9d8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
   1c9dc:	b2c9      	uxtb	r1, r1
    packet->chksumB += packet->chksumA;
   1c9de:	4408      	add	r0, r1
   1c9e0:	b2c0      	uxtb	r0, r0
    packet->length = len;
   1c9e2:	8063      	strh	r3, [r4, #2]
    packet->payload = payload;
   1c9e4:	6062      	str	r2, [r4, #4]
    packet->chksumA += value;
   1c9e6:	7221      	strb	r1, [r4, #8]
    packet->chksumB += packet->chksumA;
   1c9e8:	7260      	strb	r0, [r4, #9]
    UBX_checksum_increment(packet, packet->cls);
    UBX_checksum_increment(packet, packet->id);
    UBX_checksum_increment(packet, (uint8_t)(packet->length & 0xFF));
    UBX_checksum_increment(packet, (uint8_t)(packet->length >> 8));

    for(uint16_t i=0; i<packet->length; i++)
   1c9ea:	b153      	cbz	r3, 1ca02 <UBX_create_ubx_packet+0x3e>
   1c9ec:	4413      	add	r3, r2
    {
        UBX_checksum_increment(packet, packet->payload[i]);
   1c9ee:	f812 cb01 	ldrb.w	ip, [r2], #1
    packet->chksumA += value;
   1c9f2:	4461      	add	r1, ip
   1c9f4:	b2c9      	uxtb	r1, r1
    packet->chksumB += packet->chksumA;
   1c9f6:	4408      	add	r0, r1
   1c9f8:	b2c0      	uxtb	r0, r0
    for(uint16_t i=0; i<packet->length; i++)
   1c9fa:	4293      	cmp	r3, r2
    packet->chksumA += value;
   1c9fc:	7221      	strb	r1, [r4, #8]
    packet->chksumB += packet->chksumA;
   1c9fe:	7260      	strb	r0, [r4, #9]
    for(uint16_t i=0; i<packet->length; i++)
   1ca00:	d1f5      	bne.n	1c9ee <UBX_create_ubx_packet+0x2a>
}
   1ca02:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ca06:	4770      	bx	lr

0001ca08 <UBX_parse_ubx_packet>:
    if( (msg[0] == UBX_HEADER_1 ) &&  (msg[1] == UBX_HEADER_2) )
   1ca08:	7803      	ldrb	r3, [r0, #0]
   1ca0a:	2bb5      	cmp	r3, #181	@ 0xb5
   1ca0c:	d001      	beq.n	1ca12 <UBX_parse_ubx_packet+0xa>
    bool retVal = false;
   1ca0e:	2000      	movs	r0, #0
}
   1ca10:	4770      	bx	lr
    if( (msg[0] == UBX_HEADER_1 ) &&  (msg[1] == UBX_HEADER_2) )
   1ca12:	7843      	ldrb	r3, [r0, #1]
   1ca14:	2b62      	cmp	r3, #98	@ 0x62
   1ca16:	d1fa      	bne.n	1ca0e <UBX_parse_ubx_packet+0x6>
        packet->cls = msg[2];
   1ca18:	7883      	ldrb	r3, [r0, #2]
   1ca1a:	7013      	strb	r3, [r2, #0]
        packet->id = msg[3];
   1ca1c:	78c3      	ldrb	r3, [r0, #3]
   1ca1e:	7053      	strb	r3, [r2, #1]
        packet->length = (msg[5] << 8) | msg[4];
   1ca20:	8883      	ldrh	r3, [r0, #4]
   1ca22:	8053      	strh	r3, [r2, #2]
        packet->payload = &msg[6];
   1ca24:	1d81      	adds	r1, r0, #6
        packet->chksumA = msg[6 + packet->length];
   1ca26:	4418      	add	r0, r3
        packet->payload = &msg[6];
   1ca28:	6051      	str	r1, [r2, #4]
        packet->chksumA = msg[6 + packet->length];
   1ca2a:	7983      	ldrb	r3, [r0, #6]
   1ca2c:	7213      	strb	r3, [r2, #8]
        packet->chksumB = msg[7 + packet->length];
   1ca2e:	79c3      	ldrb	r3, [r0, #7]
   1ca30:	7253      	strb	r3, [r2, #9]
        retVal = true;
   1ca32:	2001      	movs	r0, #1
   1ca34:	4770      	bx	lr
   1ca36:	bf00      	nop

0001ca38 <UBX_parse_nav>:
    switch(id)
   1ca38:	2807      	cmp	r0, #7
   1ca3a:	d000      	beq.n	1ca3e <UBX_parse_nav+0x6>
}
   1ca3c:	4770      	bx	lr
            module_ubx_parse_nav_pvt_packet(packet, parsed);
   1ca3e:	684b      	ldr	r3, [r1, #4]
static uint32_t bytes_to_u32(uint8_t *data)
{
    uint32_t value = 0;
    for(uint8_t i=0;i<4;i++)
    {
        value |= data[4-i-1] << (i*8);
   1ca40:	f893 c000 	ldrb.w	ip, [r3]
   1ca44:	78d9      	ldrb	r1, [r3, #3]
   1ca46:	7898      	ldrb	r0, [r3, #2]
   1ca48:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   1ca4c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1ca50:	7858      	ldrb	r0, [r3, #1]
   1ca52:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    nav->iTOW = bytes_to_u32(&payload[0]);
   1ca56:	6011      	str	r1, [r2, #0]
    nav->year = bytes_to_u16(&payload[4]);
   1ca58:	8899      	ldrh	r1, [r3, #4]
   1ca5a:	8091      	strh	r1, [r2, #4]
    nav->month = payload[6];
   1ca5c:	7999      	ldrb	r1, [r3, #6]
   1ca5e:	7191      	strb	r1, [r2, #6]
    nav->day = payload[7];
   1ca60:	79d9      	ldrb	r1, [r3, #7]
   1ca62:	71d1      	strb	r1, [r2, #7]
    nav->hour = payload[8];
   1ca64:	7a19      	ldrb	r1, [r3, #8]
   1ca66:	7211      	strb	r1, [r2, #8]
    nav->min = payload[9];
   1ca68:	7a59      	ldrb	r1, [r3, #9]
   1ca6a:	7251      	strb	r1, [r2, #9]
    nav->sec = payload[10];
   1ca6c:	7a99      	ldrb	r1, [r3, #10]
   1ca6e:	7291      	strb	r1, [r2, #10]
    nav->valid = payload[11];
   1ca70:	7ad9      	ldrb	r1, [r3, #11]
   1ca72:	72d1      	strb	r1, [r2, #11]
        value |= data[4-i-1] << (i*8);
   1ca74:	7b99      	ldrb	r1, [r3, #14]
   1ca76:	f893 c00d 	ldrb.w	ip, [r3, #13]
   1ca7a:	7bd8      	ldrb	r0, [r3, #15]
   1ca7c:	0209      	lsls	r1, r1, #8
   1ca7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   1ca82:	4301      	orrs	r1, r0
   1ca84:	7b18      	ldrb	r0, [r3, #12]
   1ca86:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    nav->tAcc = bytes_to_u32(&payload[12]);
   1ca8a:	60d1      	str	r1, [r2, #12]
static int32_t bytes_to_i32(uint8_t *data)
{
	int32_t value = 0;
	for(uint8_t i=0;i<4;i++)
	{
		value |= data[3-i] << (8*(3-i));
   1ca8c:	6919      	ldr	r1, [r3, #16]
    nav->nano = bytes_to_i32(&payload[16]);
   1ca8e:	6111      	str	r1, [r2, #16]
    nav->fixType = payload[20];
   1ca90:	7d19      	ldrb	r1, [r3, #20]
   1ca92:	7511      	strb	r1, [r2, #20]
    nav->flags = payload[21];
   1ca94:	7d59      	ldrb	r1, [r3, #21]
   1ca96:	7551      	strb	r1, [r2, #21]
    nav->flags2 = payload[22];
   1ca98:	7d99      	ldrb	r1, [r3, #22]
   1ca9a:	7591      	strb	r1, [r2, #22]
    nav->numSV = payload[23];
   1ca9c:	7dd9      	ldrb	r1, [r3, #23]
   1ca9e:	75d1      	strb	r1, [r2, #23]
		value |= data[3-i] << (8*(3-i));
   1caa0:	6999      	ldr	r1, [r3, #24]
    nav->lon = bytes_to_i32(&payload[24]);
   1caa2:	6191      	str	r1, [r2, #24]
		value |= data[3-i] << (8*(3-i));
   1caa4:	69d9      	ldr	r1, [r3, #28]
    nav->lat = bytes_to_i32(&payload[28]);
   1caa6:	61d1      	str	r1, [r2, #28]
		value |= data[3-i] << (8*(3-i));
   1caa8:	6a19      	ldr	r1, [r3, #32]
    nav->height = bytes_to_i32(&payload[32]);
   1caaa:	6211      	str	r1, [r2, #32]
		value |= data[3-i] << (8*(3-i));
   1caac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    nav->hMSL = bytes_to_i32(&payload[36]);
   1caae:	6251      	str	r1, [r2, #36]	@ 0x24
        value |= data[4-i-1] << (i*8);
   1cab0:	f893 102a 	ldrb.w	r1, [r3, #42]	@ 0x2a
   1cab4:	f893 c029 	ldrb.w	ip, [r3, #41]	@ 0x29
   1cab8:	f893 002b 	ldrb.w	r0, [r3, #43]	@ 0x2b
   1cabc:	0209      	lsls	r1, r1, #8
   1cabe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   1cac2:	4301      	orrs	r1, r0
   1cac4:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
   1cac8:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    nav->hAcc = bytes_to_u32(&payload[40]);
   1cacc:	6291      	str	r1, [r2, #40]	@ 0x28
        value |= data[4-i-1] << (i*8);
   1cace:	f893 102e 	ldrb.w	r1, [r3, #46]	@ 0x2e
   1cad2:	f893 c02d 	ldrb.w	ip, [r3, #45]	@ 0x2d
   1cad6:	f893 002f 	ldrb.w	r0, [r3, #47]	@ 0x2f
   1cada:	0209      	lsls	r1, r1, #8
   1cadc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   1cae0:	4301      	orrs	r1, r0
   1cae2:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
   1cae6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    nav->vAcc = bytes_to_u32(&payload[44]);
   1caea:	62d1      	str	r1, [r2, #44]	@ 0x2c
		value |= data[3-i] << (8*(3-i));
   1caec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
    nav->velN = bytes_to_i32(&payload[48]);
   1caee:	6311      	str	r1, [r2, #48]	@ 0x30
		value |= data[3-i] << (8*(3-i));
   1caf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    nav->velE = bytes_to_i32(&payload[52]);
   1caf2:	6351      	str	r1, [r2, #52]	@ 0x34
		value |= data[3-i] << (8*(3-i));
   1caf4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    nav->velD = bytes_to_i32(&payload[56]);
   1caf6:	6391      	str	r1, [r2, #56]	@ 0x38
		value |= data[3-i] << (8*(3-i));
   1caf8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    nav->gSpeed = bytes_to_i32(&payload[60]);
   1cafa:	63d1      	str	r1, [r2, #60]	@ 0x3c
		value |= data[3-i] << (8*(3-i));
   1cafc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
    nav->headMot = bytes_to_i32(&payload[64]);
   1cafe:	6411      	str	r1, [r2, #64]	@ 0x40
        value |= data[4-i-1] << (i*8);
   1cb00:	f893 1046 	ldrb.w	r1, [r3, #70]	@ 0x46
   1cb04:	f893 c045 	ldrb.w	ip, [r3, #69]	@ 0x45
   1cb08:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
   1cb0c:	0209      	lsls	r1, r1, #8
   1cb0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   1cb12:	4301      	orrs	r1, r0
   1cb14:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
   1cb18:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    nav->sAcc = bytes_to_u32(&payload[68]);
   1cb1c:	6451      	str	r1, [r2, #68]	@ 0x44
        value |= data[4-i-1] << (i*8);
   1cb1e:	f893 1049 	ldrb.w	r1, [r3, #73]	@ 0x49
   1cb22:	f893 c04a 	ldrb.w	ip, [r3, #74]	@ 0x4a
   1cb26:	f893 004b 	ldrb.w	r0, [r3, #75]	@ 0x4b
   1cb2a:	0409      	lsls	r1, r1, #16
   1cb2c:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
   1cb30:	4301      	orrs	r1, r0
   1cb32:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
   1cb36:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    nav->headAcc = bytes_to_u32(&payload[72]);
   1cb3a:	6491      	str	r1, [r2, #72]	@ 0x48
    nav->pDOP = bytes_to_u16(&payload[76]);
   1cb3c:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
   1cb40:	f8a2 104c 	strh.w	r1, [r2, #76]	@ 0x4c
    nav->flags3 = bytes_to_u16(&payload[78]);
   1cb44:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
   1cb48:	f8a2 104e 	strh.w	r1, [r2, #78]	@ 0x4e
        value |= data[4-i-1] << (i*8);
   1cb4c:	f893 1052 	ldrb.w	r1, [r3, #82]	@ 0x52
   1cb50:	f893 c051 	ldrb.w	ip, [r3, #81]	@ 0x51
   1cb54:	f893 0053 	ldrb.w	r0, [r3, #83]	@ 0x53
   1cb58:	0209      	lsls	r1, r1, #8
   1cb5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   1cb5e:	4301      	orrs	r1, r0
   1cb60:	f893 0050 	ldrb.w	r0, [r3, #80]	@ 0x50
   1cb64:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    nav->reserved1 = bytes_to_u32(&payload[80]);
   1cb68:	6511      	str	r1, [r2, #80]	@ 0x50
		value |= data[3-i] << (8*(3-i));
   1cb6a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
    nav->headVeh = bytes_to_i32(&payload[84]);
   1cb6c:	6551      	str	r1, [r2, #84]	@ 0x54
 * @return uint16_t 16-bit unsigned int value
 */
static uint16_t bytes_to_u16(uint8_t *data)
{
    //uint16_t value;
    return (data[1]<<8 | data[0]);
   1cb6e:	f8b3 1058 	ldrh.w	r1, [r3, #88]	@ 0x58
    nav->magDec = bytes_to_i16(&payload[88]);
   1cb72:	f8a2 1058 	strh.w	r1, [r2, #88]	@ 0x58
    nav->magAcc = bytes_to_u16(&payload[90]);
   1cb76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
   1cb7a:	f8a2 305a 	strh.w	r3, [r2, #90]	@ 0x5a
}
   1cb7e:	4770      	bx	lr

0001cb80 <UBX_create_msg_from_packet>:
{
   1cb80:	b510      	push	{r4, lr}
    *msg++ = UBX_HEADER_1;
   1cb82:	f246 23b5 	movw	r3, #25269	@ 0x62b5
   1cb86:	800b      	strh	r3, [r1, #0]
    *msg++ = packet->cls;
   1cb88:	7803      	ldrb	r3, [r0, #0]
   1cb8a:	708b      	strb	r3, [r1, #2]
    *msg++ = packet->id;
   1cb8c:	7843      	ldrb	r3, [r0, #1]
   1cb8e:	70cb      	strb	r3, [r1, #3]
    *msg++ = (uint8_t) (packet->length & 0xFF);
   1cb90:	8843      	ldrh	r3, [r0, #2]
   1cb92:	710b      	strb	r3, [r1, #4]
    *msg++ = (uint8_t) (packet->length >> 8) & 0xFF;
   1cb94:	8842      	ldrh	r2, [r0, #2]
   1cb96:	0a12      	lsrs	r2, r2, #8
   1cb98:	1d8b      	adds	r3, r1, #6
   1cb9a:	714a      	strb	r2, [r1, #5]
{
   1cb9c:	4604      	mov	r4, r0
    memcpy(msg, packet->payload, packet->length);
   1cb9e:	8842      	ldrh	r2, [r0, #2]
   1cba0:	6841      	ldr	r1, [r0, #4]
   1cba2:	4618      	mov	r0, r3
   1cba4:	f7ef ffc4 	bl	cb30 <memcpy>
    msg += packet->length;
   1cba8:	8862      	ldrh	r2, [r4, #2]
    *msg++ = packet->chksumA;
   1cbaa:	7a21      	ldrb	r1, [r4, #8]
   1cbac:	5481      	strb	r1, [r0, r2]
    memcpy(msg, packet->payload, packet->length);
   1cbae:	4603      	mov	r3, r0
    msg += packet->length;
   1cbb0:	4413      	add	r3, r2
    *msg = packet->chksumB;
   1cbb2:	7a62      	ldrb	r2, [r4, #9]
   1cbb4:	705a      	strb	r2, [r3, #1]
}
   1cbb6:	bd10      	pop	{r4, pc}

0001cbb8 <UBX_create_packet_from_msg>:
    retVal = ( (msg[0] == UBX_HEADER_1) && (msg[1] == UBX_HEADER_2));
   1cbb8:	7803      	ldrb	r3, [r0, #0]
   1cbba:	2bb5      	cmp	r3, #181	@ 0xb5
   1cbbc:	d001      	beq.n	1cbc2 <UBX_create_packet_from_msg+0xa>
            retVal = false;
   1cbbe:	2000      	movs	r0, #0
   1cbc0:	4770      	bx	lr
    retVal = ( (msg[0] == UBX_HEADER_1) && (msg[1] == UBX_HEADER_2));
   1cbc2:	7843      	ldrb	r3, [r0, #1]
   1cbc4:	2b62      	cmp	r3, #98	@ 0x62
   1cbc6:	d1fa      	bne.n	1cbbe <UBX_create_packet_from_msg+0x6>
    if(len < UBX_HEADER_SIZE)
   1cbc8:	2907      	cmp	r1, #7
   1cbca:	d9f8      	bls.n	1cbbe <UBX_create_packet_from_msg+0x6>
        packet->cls = msg[2];
   1cbcc:	7883      	ldrb	r3, [r0, #2]
   1cbce:	7013      	strb	r3, [r2, #0]
        packet->id = msg[3];
   1cbd0:	78c3      	ldrb	r3, [r0, #3]
   1cbd2:	7053      	strb	r3, [r2, #1]
        packet->length = (uint16_t) (msg[5]<<8) | (msg[4]);
   1cbd4:	8883      	ldrh	r3, [r0, #4]
   1cbd6:	8053      	strh	r3, [r2, #2]
        if( (packet->length + UBX_HEADER_SIZE) > len )
   1cbd8:	f103 0c07 	add.w	ip, r3, #7
   1cbdc:	458c      	cmp	ip, r1
   1cbde:	daee      	bge.n	1cbbe <UBX_create_packet_from_msg+0x6>
        else if(packet->length > 0)
   1cbe0:	b143      	cbz	r3, 1cbf4 <UBX_create_packet_from_msg+0x3c>
            packet->chksumA = *(&msg[6] + packet->length);
   1cbe2:	4403      	add	r3, r0
            packet->payload = &msg[6];
   1cbe4:	3006      	adds	r0, #6
   1cbe6:	6050      	str	r0, [r2, #4]
            packet->chksumA = *(&msg[6] + packet->length);
   1cbe8:	7999      	ldrb	r1, [r3, #6]
   1cbea:	7211      	strb	r1, [r2, #8]
            packet->chksumB = *(&msg[6] + packet->length + 1);
   1cbec:	79db      	ldrb	r3, [r3, #7]
   1cbee:	7253      	strb	r3, [r2, #9]
    retVal = ( (msg[0] == UBX_HEADER_1) && (msg[1] == UBX_HEADER_2));
   1cbf0:	2001      	movs	r0, #1
}
   1cbf2:	4770      	bx	lr
            packet->chksumA = msg[6];
   1cbf4:	7983      	ldrb	r3, [r0, #6]
   1cbf6:	7213      	strb	r3, [r2, #8]
            packet->chksumB = msg[7];
   1cbf8:	79c3      	ldrb	r3, [r0, #7]
   1cbfa:	7253      	strb	r3, [r2, #9]
   1cbfc:	e7f8      	b.n	1cbf0 <UBX_create_packet_from_msg+0x38>
   1cbfe:	bf00      	nop

0001cc00 <UBX_find_start_of_msg>:
    for(uint16_t i=0; i< (len-1); i++)
   1cc00:	2901      	cmp	r1, #1
   1cc02:	d90e      	bls.n	1cc22 <UBX_find_start_of_msg+0x22>
   1cc04:	3901      	subs	r1, #1
   1cc06:	2300      	movs	r3, #0
   1cc08:	e002      	b.n	1cc10 <UBX_find_start_of_msg+0x10>
   1cc0a:	3301      	adds	r3, #1
   1cc0c:	428b      	cmp	r3, r1
   1cc0e:	d008      	beq.n	1cc22 <UBX_find_start_of_msg+0x22>
        if( (buf[i] == UBX_HEADER_1) && (buf[i+1] == UBX_HEADER_2) )
   1cc10:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cc14:	2ab5      	cmp	r2, #181	@ 0xb5
   1cc16:	d1f8      	bne.n	1cc0a <UBX_find_start_of_msg+0xa>
   1cc18:	7802      	ldrb	r2, [r0, #0]
   1cc1a:	2a62      	cmp	r2, #98	@ 0x62
   1cc1c:	d1f5      	bne.n	1cc0a <UBX_find_start_of_msg+0xa>
            offset = i;
   1cc1e:	b218      	sxth	r0, r3
            break;
   1cc20:	4770      	bx	lr
    int16_t offset = -1;
   1cc22:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cc26:	4770      	bx	lr

0001cc28 <UBX_check_for_ack>:
    if(packet->cls == 0x05)
   1cc28:	7803      	ldrb	r3, [r0, #0]
   1cc2a:	2b05      	cmp	r3, #5
   1cc2c:	d001      	beq.n	1cc32 <UBX_check_for_ack+0xa>
  ubx_ack_t retVal = UBX_ACK_INVALID_RESPONSE;
   1cc2e:	2000      	movs	r0, #0
   1cc30:	4770      	bx	lr
        if( (packet->payload[0] == expectedClass) && (packet->payload[1] == expectedId))
   1cc32:	6843      	ldr	r3, [r0, #4]
   1cc34:	f893 c000 	ldrb.w	ip, [r3]
   1cc38:	458c      	cmp	ip, r1
   1cc3a:	d1f8      	bne.n	1cc2e <UBX_check_for_ack+0x6>
   1cc3c:	785b      	ldrb	r3, [r3, #1]
   1cc3e:	4293      	cmp	r3, r2
   1cc40:	d1f5      	bne.n	1cc2e <UBX_check_for_ack+0x6>
            if( packet->id == 0x01)
   1cc42:	7840      	ldrb	r0, [r0, #1]
   1cc44:	2801      	cmp	r0, #1
   1cc46:	d003      	beq.n	1cc50 <UBX_check_for_ack+0x28>
            } else if(packet->id == 0x00)
   1cc48:	fab0 f080 	clz	r0, r0
   1cc4c:	0940      	lsrs	r0, r0, #5
   1cc4e:	4770      	bx	lr
                retVal = UBX_ACK_ACK_RESPONSE;
   1cc50:	2002      	movs	r0, #2
}
   1cc52:	4770      	bx	lr

0001cc54 <receive_response.constprop.0>:
    /** Find Status */
    tok = strtok(NULL, "\r\n");
    strcpy(p->info.status, tok);
}

STATIC S9_result_t receive_response(uint8_t *rData, uint8_t *len)
   1cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc58:	b0c3      	sub	sp, #268	@ 0x10c
   1cc5a:	468b      	mov	fp, r1
{
    S9_result_t result = S9_RESULT_FAIL;
    uint8_t msg_len = 0;
    uint8_t rem_len = 0;
    uint8_t lBuf[256] = {0};
   1cc5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
   1cc60:	2100      	movs	r1, #0
STATIC S9_result_t receive_response(uint8_t *rData, uint8_t *len)
   1cc62:	4604      	mov	r4, r0
    uint8_t lBuf[256] = {0};
   1cc64:	a802      	add	r0, sp, #8
   1cc66:	f007 fb93 	bl	24390 <memset>
    bool contFlag = true;
    uint32_t wait = 0;
   1cc6a:	2500      	movs	r5, #0
    bool contFlag = true;
   1cc6c:	2701      	movs	r7, #1
    S9_result_t result = S9_RESULT_FAIL;
   1cc6e:	462e      	mov	r6, r5

    // maximum wait cycles
    while(contFlag && wait < 100000)
   1cc70:	2f00      	cmp	r7, #0
   1cc72:	d03e      	beq.n	1ccf2 <receive_response.constprop.0+0x9e>
    {
        //artemis_max14830_UART_Read (pS9->device.uart.port, lBuf, &msg_len);
        msg_len = MAX14830_UART_Read_direct (pS9->device.uart.port, lBuf);
   1cc74:	4b55      	ldr	r3, [pc, #340]	@ (1cdcc <receive_response.constprop.0+0x178>)
   1cc76:	a902      	add	r1, sp, #8
   1cc78:	f893 005c 	ldrb.w	r0, [r3, #92]	@ 0x5c
   1cc7c:	f7f6 fb34 	bl	132e8 <MAX14830_UART_Read_direct>
   1cc80:	b2c0      	uxtb	r0, r0
   1cc82:	4681      	mov	r9, r0
        //ARTEMIS_DEBUG_PRINTF("\nS9: rxlen = %u\n", msg_len);

        if(msg_len > 0)
   1cc84:	2800      	cmp	r0, #0
   1cc86:	d0f5      	beq.n	1cc74 <receive_response.constprop.0+0x20>
        {
            for (uint16_t i=0; i<msg_len; i++)
   1cc88:	4603      	mov	r3, r0
   1cc8a:	b282      	uxth	r2, r0
   1cc8c:	b128      	cbz	r0, 1cc9a <receive_response.constprop.0+0x46>
   1cc8e:	9001      	str	r0, [sp, #4]
            {
                rData[i] = lBuf[i];
   1cc90:	a902      	add	r1, sp, #8
   1cc92:	4620      	mov	r0, r4
   1cc94:	f7ef ff4c 	bl	cb30 <memcpy>
   1cc98:	9b01      	ldr	r3, [sp, #4]
                /* Debug */
                //ARTEMIS_DEBUG_PRINTF("%c", lBuf[i]);
            }
            *len = msg_len;
   1cc9a:	f88b 3000 	strb.w	r3, [fp]
    if (pattLen > rxLen)
   1cc9e:	2b03      	cmp	r3, #3
   1cca0:	fa1f fe83 	uxth.w	lr, r3
   1cca4:	d92c      	bls.n	1cd00 <receive_response.constprop.0+0xac>
    for (i=0; i<=(rxLen-pattLen); i++)
   1cca6:	f104 38ff 	add.w	r8, r4, #4294967295
   1ccaa:	f1a9 0a04 	sub.w	sl, r9, #4
   1ccae:	4640      	mov	r0, r8
   1ccb0:	2300      	movs	r3, #0
   1ccb2:	f8cd 8004 	str.w	r8, [sp, #4]
            if (pattern[j] == rData[k])
   1ccb6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
                k++;
   1ccba:	f103 0c01 	add.w	ip, r3, #1
   1ccbe:	1c9a      	adds	r2, r3, #2
            if (pattern[j] == rData[k])
   1ccc0:	294f      	cmp	r1, #79	@ 0x4f
                k++;
   1ccc2:	f103 0303 	add.w	r3, r3, #3
            if (pattern[j] == rData[k])
   1ccc6:	fa1f f883 	uxth.w	r8, r3
   1ccca:	b292      	uxth	r2, r2
                k++;
   1cccc:	fa1f f38c 	uxth.w	r3, ip
            if (pattern[j] == rData[k])
   1ccd0:	d12d      	bne.n	1cd2e <receive_response.constprop.0+0xda>
   1ccd2:	5ce1      	ldrb	r1, [r4, r3]
   1ccd4:	294b      	cmp	r1, #75	@ 0x4b
   1ccd6:	d12a      	bne.n	1cd2e <receive_response.constprop.0+0xda>
   1ccd8:	5ca2      	ldrb	r2, [r4, r2]
   1ccda:	2a0d      	cmp	r2, #13
   1ccdc:	d127      	bne.n	1cd2e <receive_response.constprop.0+0xda>
   1ccde:	f814 2008 	ldrb.w	r2, [r4, r8]
   1cce2:	2a0a      	cmp	r2, #10
   1cce4:	d123      	bne.n	1cd2e <receive_response.constprop.0+0xda>
                else
                {
                    contFlag = false;
                    wait = 0;
                }
                wait++;
   1cce6:	2501      	movs	r5, #1
            if (pattern[j] == rData[k])
   1cce8:	2700      	movs	r7, #0
   1ccea:	462e      	mov	r6, r5
   1ccec:	4b38      	ldr	r3, [pc, #224]	@ (1cdd0 <receive_response.constprop.0+0x17c>)
   1ccee:	429d      	cmp	r5, r3
   1ccf0:	d9be      	bls.n	1cc70 <receive_response.constprop.0+0x1c>
        }
        //am_hal_systick_delay_us(50);
        //ARTEMIS_DEBUG_PRINTF("\nPrinting in S9 outer loop\n");
    }
    return result;
}
   1ccf2:	4630      	mov	r0, r6
   1ccf4:	b043      	add	sp, #268	@ 0x10c
   1ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0; i<=(rxLen-pattLen); i++)
   1ccfa:	4599      	cmp	r9, r3
   1ccfc:	da22      	bge.n	1cd44 <receive_response.constprop.0+0xf0>
   1ccfe:	9f01      	ldr	r7, [sp, #4]
                if(result == S9_RESULT_FAIL)
   1cd00:	2e00      	cmp	r6, #0
   1cd02:	d1f6      	bne.n	1ccf2 <receive_response.constprop.0+0x9e>
            } while(result == S9_RESULT_FAIL && wait < 5000);
   1cd04:	f241 3887 	movw	r8, #4999	@ 0x1387
                    rem_len = MAX14830_UART_Read_direct (pS9->device.uart.port, lBuf);
   1cd08:	4b30      	ldr	r3, [pc, #192]	@ (1cdcc <receive_response.constprop.0+0x178>)
   1cd0a:	a902      	add	r1, sp, #8
   1cd0c:	f893 005c 	ldrb.w	r0, [r3, #92]	@ 0x5c
   1cd10:	f7f6 faea 	bl	132e8 <MAX14830_UART_Read_direct>
                    if (rem_len > 0)
   1cd14:	f010 03ff 	ands.w	r3, r0, #255	@ 0xff
   1cd18:	d142      	bne.n	1cda0 <receive_response.constprop.0+0x14c>
                wait++;
   1cd1a:	3502      	adds	r5, #2
            } while(result == S9_RESULT_FAIL && wait < 5000);
   1cd1c:	4545      	cmp	r5, r8
   1cd1e:	d8e5      	bhi.n	1ccec <receive_response.constprop.0+0x98>
                if(_parse_response(rData, "OK\r\n", *len) != -1)
   1cd20:	f89b 9000 	ldrb.w	r9, [fp]
    if (pattLen > rxLen)
   1cd24:	f1b9 0f03 	cmp.w	r9, #3
                if(_parse_response(rData, "OK\r\n", *len) != -1)
   1cd28:	46ce      	mov	lr, r9
    if (pattLen > rxLen)
   1cd2a:	d8bc      	bhi.n	1cca6 <receive_response.constprop.0+0x52>
   1cd2c:	e7ec      	b.n	1cd08 <receive_response.constprop.0+0xb4>
    for (i=0; i<=(rxLen-pattLen); i++)
   1cd2e:	459a      	cmp	sl, r3
   1cd30:	dac1      	bge.n	1ccb6 <receive_response.constprop.0+0x62>
    if (pattLen > rxLen)
   1cd32:	f1be 0f06 	cmp.w	lr, #6
   1cd36:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1cd3a:	d9e1      	bls.n	1cd00 <receive_response.constprop.0+0xac>
    for (i=0; i<=(rxLen-pattLen); i++)
   1cd3c:	f1a9 0907 	sub.w	r9, r9, #7
   1cd40:	2300      	movs	r3, #0
   1cd42:	9701      	str	r7, [sp, #4]
            if (pattern[j] == rData[k])
   1cd44:	f818 cf01 	ldrb.w	ip, [r8, #1]!
                k++;
   1cd48:	f103 0e01 	add.w	lr, r3, #1
   1cd4c:	1c9a      	adds	r2, r3, #2
   1cd4e:	1cd9      	adds	r1, r3, #3
   1cd50:	1d18      	adds	r0, r3, #4
   1cd52:	1d5f      	adds	r7, r3, #5
            if (pattern[j] == rData[k])
   1cd54:	f1bc 0f45 	cmp.w	ip, #69	@ 0x45
                k++;
   1cd58:	f103 0306 	add.w	r3, r3, #6
            if (pattern[j] == rData[k])
   1cd5c:	fa1f fa83 	uxth.w	sl, r3
   1cd60:	b292      	uxth	r2, r2
   1cd62:	b289      	uxth	r1, r1
   1cd64:	b280      	uxth	r0, r0
   1cd66:	b2bf      	uxth	r7, r7
                k++;
   1cd68:	fa1f f38e 	uxth.w	r3, lr
            if (pattern[j] == rData[k])
   1cd6c:	d1c5      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
   1cd6e:	f814 c003 	ldrb.w	ip, [r4, r3]
   1cd72:	f1bc 0f52 	cmp.w	ip, #82	@ 0x52
   1cd76:	d1c0      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
   1cd78:	5ca2      	ldrb	r2, [r4, r2]
   1cd7a:	2a52      	cmp	r2, #82	@ 0x52
   1cd7c:	d1bd      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
   1cd7e:	5c62      	ldrb	r2, [r4, r1]
   1cd80:	2a4f      	cmp	r2, #79	@ 0x4f
   1cd82:	d1ba      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
   1cd84:	5c22      	ldrb	r2, [r4, r0]
   1cd86:	2a52      	cmp	r2, #82	@ 0x52
   1cd88:	d1b7      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
   1cd8a:	5de2      	ldrb	r2, [r4, r7]
   1cd8c:	2a0d      	cmp	r2, #13
   1cd8e:	d1b4      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
   1cd90:	f814 200a 	ldrb.w	r2, [r4, sl]
   1cd94:	2a0a      	cmp	r2, #10
   1cd96:	d1b0      	bne.n	1ccfa <receive_response.constprop.0+0xa6>
                wait++;
   1cd98:	2501      	movs	r5, #1
                    contFlag = false;
   1cd9a:	2700      	movs	r7, #0
                    result = S9_RESULT_ERROR;
   1cd9c:	2602      	movs	r6, #2
   1cd9e:	e7a5      	b.n	1ccec <receive_response.constprop.0+0x98>
                        for (uint16_t i=0; i<rem_len; i++)
   1cda0:	fa1f f983 	uxth.w	r9, r3
   1cda4:	b163      	cbz	r3, 1cdc0 <receive_response.constprop.0+0x16c>
   1cda6:	a902      	add	r1, sp, #8
   1cda8:	2200      	movs	r2, #0
                            rData[*len+i] = lBuf[i];
   1cdaa:	eb04 0c02 	add.w	ip, r4, r2
   1cdae:	f89b 0000 	ldrb.w	r0, [fp]
   1cdb2:	f811 eb01 	ldrb.w	lr, [r1], #1
   1cdb6:	f80c e000 	strb.w	lr, [ip, r0]
                        for (uint16_t i=0; i<rem_len; i++)
   1cdba:	3201      	adds	r2, #1
   1cdbc:	4591      	cmp	r9, r2
   1cdbe:	d1f4      	bne.n	1cdaa <receive_response.constprop.0+0x156>
                        *len += rem_len;
   1cdc0:	f89b 2000 	ldrb.w	r2, [fp]
   1cdc4:	4413      	add	r3, r2
   1cdc6:	f88b 3000 	strb.w	r3, [fp]
   1cdca:	e7a6      	b.n	1cd1a <receive_response.constprop.0+0xc6>
   1cdcc:	1004aac4 	.word	0x1004aac4
   1cdd0:	0001869f 	.word	0x0001869f

0001cdd4 <receive_response_RTOS.constprop.0>:

STATIC S9_result_t receive_response_RTOS(uint8_t *rData, uint16_t *len)
   1cdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdd8:	b0c1      	sub	sp, #260	@ 0x104
   1cdda:	4604      	mov	r4, r0
   1cddc:	460f      	mov	r7, r1
{
    S9_result_t result = S9_RESULT_FAIL;
    uint8_t msg_len = 0;
    uint8_t rem_len = 0;
    uint8_t lBuf[256] = {0};
   1cdde:	f44f 7280 	mov.w	r2, #256	@ 0x100
   1cde2:	2100      	movs	r1, #0
   1cde4:	4668      	mov	r0, sp
   1cde6:	f007 fad3 	bl	24390 <memset>
    bool contFlag = true;
    uint32_t wait = 0;
   1cdea:	2500      	movs	r5, #0
   1cdec:	1e66      	subs	r6, r4, #1

    while (contFlag)
    {
        msg_len = MAX14830_UART_Read (pS9->device.uart.port, lBuf);
   1cdee:	4b4c      	ldr	r3, [pc, #304]	@ (1cf20 <receive_response_RTOS.constprop.0+0x14c>)
   1cdf0:	4669      	mov	r1, sp
   1cdf2:	f893 005c 	ldrb.w	r0, [r3, #92]	@ 0x5c
   1cdf6:	f7f6 fa43 	bl	13280 <MAX14830_UART_Read>
        //ARTEMIS_DEBUG_PRINTF("\nS9: rxlen = %u\n", msg_len);

        if(msg_len > 0)
   1cdfa:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
   1cdfe:	d0f6      	beq.n	1cdee <receive_response_RTOS.constprop.0+0x1a>
        {
            for (uint16_t i=0; i<msg_len; i++)
   1ce00:	4680      	mov	r8, r0
            {
                rData[i] = lBuf[i];
   1ce02:	4602      	mov	r2, r0
   1ce04:	4669      	mov	r1, sp
   1ce06:	4620      	mov	r0, r4
   1ce08:	f7ef fe92 	bl	cb30 <memcpy>
                /* Debug */
                //ARTEMIS_DEBUG_PRINTF("%c", lBuf[i]);
            }
            *len = msg_len;
   1ce0c:	f8a7 8000 	strh.w	r8, [r7]
    if (pattLen > rxLen)
   1ce10:	f1b8 0f03 	cmp.w	r8, #3
   1ce14:	d961      	bls.n	1ceda <receive_response_RTOS.constprop.0+0x106>
    for (i=0; i<=(rxLen-pattLen); i++)
   1ce16:	f1a8 0904 	sub.w	r9, r8, #4
   1ce1a:	4630      	mov	r0, r6
   1ce1c:	4631      	mov	r1, r6
   1ce1e:	2300      	movs	r3, #0
            if (pattern[j] == rData[k])
   1ce20:	f811 cf01 	ldrb.w	ip, [r1, #1]!
                k++;
   1ce24:	f103 0e01 	add.w	lr, r3, #1
   1ce28:	1c9a      	adds	r2, r3, #2
            if (pattern[j] == rData[k])
   1ce2a:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
                k++;
   1ce2e:	f103 0303 	add.w	r3, r3, #3
            if (pattern[j] == rData[k])
   1ce32:	fa1f fa83 	uxth.w	sl, r3
   1ce36:	b292      	uxth	r2, r2
                k++;
   1ce38:	fa1f f38e 	uxth.w	r3, lr
            if (pattern[j] == rData[k])
   1ce3c:	d10f      	bne.n	1ce5e <receive_response_RTOS.constprop.0+0x8a>
   1ce3e:	f814 c003 	ldrb.w	ip, [r4, r3]
   1ce42:	f1bc 0f4b 	cmp.w	ip, #75	@ 0x4b
   1ce46:	d10a      	bne.n	1ce5e <receive_response_RTOS.constprop.0+0x8a>
   1ce48:	5ca2      	ldrb	r2, [r4, r2]
   1ce4a:	2a0d      	cmp	r2, #13
   1ce4c:	d107      	bne.n	1ce5e <receive_response_RTOS.constprop.0+0x8a>
   1ce4e:	f814 200a 	ldrb.w	r2, [r4, sl]
   1ce52:	2a0a      	cmp	r2, #10
   1ce54:	d103      	bne.n	1ce5e <receive_response_RTOS.constprop.0+0x8a>

            do{
                if(_parse_response(rData, "OK\r\n", *len) != -1)
                {
                    //ARTEMIS_DEBUG_PRINTF("\nTemp OK\n");
                    result = S9_RESULT_OK;
   1ce56:	2001      	movs	r0, #1
            break;
        }
        //ARTEMIS_DEBUG_PRINTF("\nS9: stuck here ? \n");
    }
    return result;
}
   1ce58:	b041      	add	sp, #260	@ 0x104
   1ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0; i<=(rxLen-pattLen); i++)
   1ce5e:	454b      	cmp	r3, r9
   1ce60:	ddde      	ble.n	1ce20 <receive_response_RTOS.constprop.0+0x4c>
    if (pattLen > rxLen)
   1ce62:	f1b8 0f06 	cmp.w	r8, #6
   1ce66:	d938      	bls.n	1ceda <receive_response_RTOS.constprop.0+0x106>
    for (i=0; i<=(rxLen-pattLen); i++)
   1ce68:	f1a8 0807 	sub.w	r8, r8, #7
   1ce6c:	2300      	movs	r3, #0
            if (pattern[j] == rData[k])
   1ce6e:	f810 ef01 	ldrb.w	lr, [r0, #1]!
                k++;
   1ce72:	f103 0901 	add.w	r9, r3, #1
   1ce76:	1c9a      	adds	r2, r3, #2
   1ce78:	1cd9      	adds	r1, r3, #3
   1ce7a:	f103 0c04 	add.w	ip, r3, #4
   1ce7e:	f103 0a05 	add.w	sl, r3, #5
            if (pattern[j] == rData[k])
   1ce82:	f1be 0f45 	cmp.w	lr, #69	@ 0x45
                k++;
   1ce86:	f103 0306 	add.w	r3, r3, #6
            if (pattern[j] == rData[k])
   1ce8a:	fa1f fb83 	uxth.w	fp, r3
   1ce8e:	b292      	uxth	r2, r2
   1ce90:	b289      	uxth	r1, r1
   1ce92:	fa1f fc8c 	uxth.w	ip, ip
   1ce96:	fa1f fa8a 	uxth.w	sl, sl
                k++;
   1ce9a:	fa1f f389 	uxth.w	r3, r9
            if (pattern[j] == rData[k])
   1ce9e:	d11a      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
   1cea0:	f814 e003 	ldrb.w	lr, [r4, r3]
   1cea4:	f1be 0f52 	cmp.w	lr, #82	@ 0x52
   1cea8:	d115      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
   1ceaa:	5ca2      	ldrb	r2, [r4, r2]
   1ceac:	2a52      	cmp	r2, #82	@ 0x52
   1ceae:	d112      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
   1ceb0:	5c62      	ldrb	r2, [r4, r1]
   1ceb2:	2a4f      	cmp	r2, #79	@ 0x4f
   1ceb4:	d10f      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
   1ceb6:	f814 200c 	ldrb.w	r2, [r4, ip]
   1ceba:	2a52      	cmp	r2, #82	@ 0x52
   1cebc:	d10b      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
   1cebe:	f814 200a 	ldrb.w	r2, [r4, sl]
   1cec2:	2a0d      	cmp	r2, #13
   1cec4:	d107      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
   1cec6:	f814 200b 	ldrb.w	r2, [r4, fp]
   1ceca:	2a0a      	cmp	r2, #10
   1cecc:	d103      	bne.n	1ced6 <receive_response_RTOS.constprop.0+0x102>
                    result = S9_RESULT_ERROR;
   1cece:	2002      	movs	r0, #2
}
   1ced0:	b041      	add	sp, #260	@ 0x104
   1ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0; i<=(rxLen-pattLen); i++)
   1ced6:	4598      	cmp	r8, r3
   1ced8:	dac9      	bge.n	1ce6e <receive_response_RTOS.constprop.0+0x9a>
                    rem_len = MAX14830_UART_Read (pS9->device.uart.port, lBuf);
   1ceda:	4b11      	ldr	r3, [pc, #68]	@ (1cf20 <receive_response_RTOS.constprop.0+0x14c>)
   1cedc:	4669      	mov	r1, sp
   1cede:	f893 005c 	ldrb.w	r0, [r3, #92]	@ 0x5c
   1cee2:	f7f6 f9cd 	bl	13280 <MAX14830_UART_Read>
                    if (rem_len > 0)
   1cee6:	f010 02ff 	ands.w	r2, r0, #255	@ 0xff
   1ceea:	d108      	bne.n	1cefe <receive_response_RTOS.constprop.0+0x12a>
                wait++;
   1ceec:	3502      	adds	r5, #2
            } while(result == S9_RESULT_FAIL && wait < 5000);
   1ceee:	f241 3387 	movw	r3, #4999	@ 0x1387
   1cef2:	429d      	cmp	r5, r3
   1cef4:	f63f af7b 	bhi.w	1cdee <receive_response_RTOS.constprop.0+0x1a>
                if(_parse_response(rData, "OK\r\n", *len) != -1)
   1cef8:	f8b7 8000 	ldrh.w	r8, [r7]
   1cefc:	e788      	b.n	1ce10 <receive_response_RTOS.constprop.0+0x3c>
                        for (uint16_t i=0; i<rem_len; i++)
   1cefe:	4669      	mov	r1, sp
   1cf00:	2300      	movs	r3, #0
                            rData[*len+i] = lBuf[i];
   1cf02:	8838      	ldrh	r0, [r7, #0]
   1cf04:	f811 eb01 	ldrb.w	lr, [r1], #1
   1cf08:	eb04 0c03 	add.w	ip, r4, r3
                        for (uint16_t i=0; i<rem_len; i++)
   1cf0c:	3301      	adds	r3, #1
                            rData[*len+i] = lBuf[i];
   1cf0e:	f80c e000 	strb.w	lr, [ip, r0]
                        for (uint16_t i=0; i<rem_len; i++)
   1cf12:	b298      	uxth	r0, r3
   1cf14:	4290      	cmp	r0, r2
   1cf16:	d3f4      	bcc.n	1cf02 <receive_response_RTOS.constprop.0+0x12e>
                        *len += rem_len;
   1cf18:	883b      	ldrh	r3, [r7, #0]
   1cf1a:	441a      	add	r2, r3
   1cf1c:	803a      	strh	r2, [r7, #0]
   1cf1e:	e7e5      	b.n	1ceec <receive_response_RTOS.constprop.0+0x118>
   1cf20:	1004aac4 	.word	0x1004aac4

0001cf24 <_module_s9_stop_sampling_RTOS>:
{
   1cf24:	b500      	push	{lr}
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t*)"stop\r", 5);
   1cf26:	4a12      	ldr	r2, [pc, #72]	@ (1cf70 <_module_s9_stop_sampling_RTOS+0x4c>)
   1cf28:	4912      	ldr	r1, [pc, #72]	@ (1cf74 <_module_s9_stop_sampling_RTOS+0x50>)
   1cf2a:	f892 005c 	ldrb.w	r0, [r2, #92]	@ 0x5c
{
   1cf2e:	b085      	sub	sp, #20
    uint16_t rxLen = 0;
   1cf30:	2300      	movs	r3, #0
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t*)"stop\r", 5);
   1cf32:	2205      	movs	r2, #5
    uint16_t rxLen = 0;
   1cf34:	f8ad 3002 	strh.w	r3, [sp, #2]
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t*)"stop\r", 5);
   1cf38:	f7f6 f924 	bl	13184 <MAX14830_UART_Write>
    result = receive_response_RTOS(sampleStr, &rxLen);
   1cf3c:	f10d 0102 	add.w	r1, sp, #2
   1cf40:	a801      	add	r0, sp, #4
   1cf42:	f7ff ff47 	bl	1cdd4 <receive_response_RTOS.constprop.0>
    if (result == S9_RESULT_OK)
   1cf46:	2801      	cmp	r0, #1
   1cf48:	d008      	beq.n	1cf5c <_module_s9_stop_sampling_RTOS+0x38>
        ARTEMIS_DEBUG_PRINTF("S9 : Sampling did not stop, RTOS\n");
   1cf4a:	480b      	ldr	r0, [pc, #44]	@ (1cf78 <_module_s9_stop_sampling_RTOS+0x54>)
   1cf4c:	f7f4 f88c 	bl	11068 <am_util_stdio_printf>
   1cf50:	4809      	ldr	r0, [pc, #36]	@ (1cf78 <_module_s9_stop_sampling_RTOS+0x54>)
}
   1cf52:	b005      	add	sp, #20
   1cf54:	f85d eb04 	ldr.w	lr, [sp], #4
        ARTEMIS_DEBUG_PRINTF("S9 : Sampling did not stop, RTOS\n");
   1cf58:	f001 b80e 	b.w	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("S9 : Sampling Stopped, RTOS\n");
   1cf5c:	4807      	ldr	r0, [pc, #28]	@ (1cf7c <_module_s9_stop_sampling_RTOS+0x58>)
   1cf5e:	f7f4 f883 	bl	11068 <am_util_stdio_printf>
   1cf62:	4806      	ldr	r0, [pc, #24]	@ (1cf7c <_module_s9_stop_sampling_RTOS+0x58>)
}
   1cf64:	b005      	add	sp, #20
   1cf66:	f85d eb04 	ldr.w	lr, [sp], #4
        ARTEMIS_DEBUG_PRINTF("S9 : Sampling did not stop, RTOS\n");
   1cf6a:	f001 b805 	b.w	1df78 <datalogger_log_debug>
   1cf6e:	bf00      	nop
   1cf70:	1004aac4 	.word	0x1004aac4
   1cf74:	000300cc 	.word	0x000300cc
   1cf78:	000300f4 	.word	0x000300f4
   1cf7c:	000300d4 	.word	0x000300d4

0001cf80 <S9T_dev_info>:
{
   1cf80:	b5f0      	push	{r4, r5, r6, r7, lr}
    MAX14830_UART_Write_direct(pS9->device.uart.port, (uint8_t*)"ver\r", 4);
   1cf82:	4ec7      	ldr	r6, [pc, #796]	@ (1d2a0 <S9T_dev_info+0x320>)
{
   1cf84:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
    uint8_t verStr[256] = {0};
   1cf88:	f44f 7280 	mov.w	r2, #256	@ 0x100
   1cf8c:	2100      	movs	r1, #0
   1cf8e:	a802      	add	r0, sp, #8
   1cf90:	f007 f9fe 	bl	24390 <memset>
    uint8_t rxLen = 0;
   1cf94:	2400      	movs	r4, #0
    MAX14830_UART_Write_direct(pS9->device.uart.port, (uint8_t*)"ver\r", 4);
   1cf96:	49c3      	ldr	r1, [pc, #780]	@ (1d2a4 <S9T_dev_info+0x324>)
   1cf98:	f896 005c 	ldrb.w	r0, [r6, #92]	@ 0x5c
    uint8_t rxLen = 0;
   1cf9c:	f88d 4007 	strb.w	r4, [sp, #7]
    MAX14830_UART_Write_direct(pS9->device.uart.port, (uint8_t*)"ver\r", 4);
   1cfa0:	2204      	movs	r2, #4
   1cfa2:	f7f6 f91d 	bl	131e0 <MAX14830_UART_Write_direct>
    result = receive_response(verStr, &rxLen);
   1cfa6:	f10d 0107 	add.w	r1, sp, #7
   1cfaa:	a802      	add	r0, sp, #8
   1cfac:	f7ff fe52 	bl	1cc54 <receive_response.constprop.0>
    if (result == S9_RESULT_OK)
   1cfb0:	2801      	cmp	r0, #1
   1cfb2:	d009      	beq.n	1cfc8 <S9T_dev_info+0x48>
        ARTEMIS_DEBUG_PRINTF("S9 : Something went wrong\n");
   1cfb4:	48bc      	ldr	r0, [pc, #752]	@ (1d2a8 <S9T_dev_info+0x328>)
   1cfb6:	f7f4 f857 	bl	11068 <am_util_stdio_printf>
   1cfba:	48bb      	ldr	r0, [pc, #748]	@ (1d2a8 <S9T_dev_info+0x328>)
}
   1cfbc:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
   1cfc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ARTEMIS_DEBUG_PRINTF("S9 : Something went wrong\n");
   1cfc4:	f000 bfd8 	b.w	1df78 <datalogger_log_debug>
    strcpy(temp, (char*)data);
   1cfc8:	a902      	add	r1, sp, #8
   1cfca:	a842      	add	r0, sp, #264	@ 0x108
   1cfcc:	f007 fb76 	bl	246bc <strcpy>
    tok = strtok(temp,"=");
   1cfd0:	49b6      	ldr	r1, [pc, #728]	@ (1d2ac <S9T_dev_info+0x32c>)
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.MID[i]);
   1cfd2:	4db7      	ldr	r5, [pc, #732]	@ (1d2b0 <S9T_dev_info+0x330>)
    tok = strtok(temp,"=");
   1cfd4:	a842      	add	r0, sp, #264	@ 0x108
   1cfd6:	f007 fac7 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1cfda:	49b6      	ldr	r1, [pc, #728]	@ (1d2b4 <S9T_dev_info+0x334>)
   1cfdc:	4620      	mov	r0, r4
   1cfde:	f007 fac3 	bl	24568 <strtok>
   1cfe2:	4601      	mov	r1, r0
    strcpy(p->info.MID, tok);
   1cfe4:	f106 0008 	add.w	r0, r6, #8
   1cfe8:	f007 fb68 	bl	246bc <strcpy>
    tok = strtok(NULL, "=");
   1cfec:	49af      	ldr	r1, [pc, #700]	@ (1d2ac <S9T_dev_info+0x32c>)
   1cfee:	4620      	mov	r0, r4
   1cff0:	f007 faba 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1cff4:	49af      	ldr	r1, [pc, #700]	@ (1d2b4 <S9T_dev_info+0x334>)
   1cff6:	4620      	mov	r0, r4
   1cff8:	f007 fab6 	bl	24568 <strtok>
    temp_f = atof(tok);
   1cffc:	f004 fd36 	bl	21a6c <atof>
   1d000:	ec51 0b10 	vmov	r0, r1, d0
   1d004:	f7ef fcf2 	bl	c9ec <__aeabi_d2f>
    tok = strtok(NULL, "=");
   1d008:	49a8      	ldr	r1, [pc, #672]	@ (1d2ac <S9T_dev_info+0x32c>)
    temp_f = atof(tok);
   1d00a:	4603      	mov	r3, r0
    tok = strtok(NULL, "=");
   1d00c:	4620      	mov	r0, r4
    temp_f = atof(tok);
   1d00e:	6133      	str	r3, [r6, #16]
    tok = strtok(NULL, "=");
   1d010:	f007 faaa 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1d014:	49a7      	ldr	r1, [pc, #668]	@ (1d2b4 <S9T_dev_info+0x334>)
   1d016:	4620      	mov	r0, r4
   1d018:	f007 faa6 	bl	24568 <strtok>
    p->info.C1 = atof(tok);
   1d01c:	f004 fd26 	bl	21a6c <atof>
   1d020:	ec51 0b10 	vmov	r0, r1, d0
   1d024:	f7ef fce2 	bl	c9ec <__aeabi_d2f>
    tok = strtok(NULL, "=");
   1d028:	49a0      	ldr	r1, [pc, #640]	@ (1d2ac <S9T_dev_info+0x32c>)
    p->info.C1 = atof(tok);
   1d02a:	4603      	mov	r3, r0
    tok = strtok(NULL, "=");
   1d02c:	4620      	mov	r0, r4
    p->info.C1 = atof(tok);
   1d02e:	6173      	str	r3, [r6, #20]
    tok = strtok(NULL, "=");
   1d030:	f007 fa9a 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1d034:	499f      	ldr	r1, [pc, #636]	@ (1d2b4 <S9T_dev_info+0x334>)
   1d036:	4620      	mov	r0, r4
   1d038:	f007 fa96 	bl	24568 <strtok>
    p->info.C2 = atof(tok);
   1d03c:	f004 fd16 	bl	21a6c <atof>
   1d040:	ec51 0b10 	vmov	r0, r1, d0
   1d044:	f7ef fcd2 	bl	c9ec <__aeabi_d2f>
    tok = strtok(NULL, "=");
   1d048:	4998      	ldr	r1, [pc, #608]	@ (1d2ac <S9T_dev_info+0x32c>)
    p->info.C2 = atof(tok);
   1d04a:	4603      	mov	r3, r0
    tok = strtok(NULL, "=");
   1d04c:	4620      	mov	r0, r4
    p->info.C2 = atof(tok);
   1d04e:	61b3      	str	r3, [r6, #24]
    tok = strtok(NULL, "=");
   1d050:	f007 fa8a 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1d054:	4997      	ldr	r1, [pc, #604]	@ (1d2b4 <S9T_dev_info+0x334>)
   1d056:	4620      	mov	r0, r4
   1d058:	f007 fa86 	bl	24568 <strtok>
    p->info.C3 = atof(tok);
   1d05c:	f004 fd06 	bl	21a6c <atof>
   1d060:	ec51 0b10 	vmov	r0, r1, d0
   1d064:	f7ef fcc2 	bl	c9ec <__aeabi_d2f>
    tok = strtok(NULL, "=");
   1d068:	4990      	ldr	r1, [pc, #576]	@ (1d2ac <S9T_dev_info+0x32c>)
    p->info.C3 = atof(tok);
   1d06a:	4603      	mov	r3, r0
    tok = strtok(NULL, "=");
   1d06c:	4620      	mov	r0, r4
    p->info.C3 = atof(tok);
   1d06e:	61f3      	str	r3, [r6, #28]
    tok = strtok(NULL, "=");
   1d070:	f007 fa7a 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1d074:	498f      	ldr	r1, [pc, #572]	@ (1d2b4 <S9T_dev_info+0x334>)
   1d076:	4620      	mov	r0, r4
   1d078:	f007 fa76 	bl	24568 <strtok>
    p->info.R0 = atof(tok);
   1d07c:	f004 fcf6 	bl	21a6c <atof>
   1d080:	ec51 0b10 	vmov	r0, r1, d0
   1d084:	f7ef fcb2 	bl	c9ec <__aeabi_d2f>
    tok = strtok(NULL, "=");
   1d088:	4988      	ldr	r1, [pc, #544]	@ (1d2ac <S9T_dev_info+0x32c>)
    p->info.R0 = atof(tok);
   1d08a:	4603      	mov	r3, r0
    tok = strtok(NULL, "=");
   1d08c:	4620      	mov	r0, r4
    p->info.R0 = atof(tok);
   1d08e:	6233      	str	r3, [r6, #32]
    tok = strtok(NULL, "=");
   1d090:	f007 fa6a 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1d094:	4987      	ldr	r1, [pc, #540]	@ (1d2b4 <S9T_dev_info+0x334>)
   1d096:	4620      	mov	r0, r4
   1d098:	f007 fa66 	bl	24568 <strtok>
    p->info.average = atof(tok);
   1d09c:	f004 fce6 	bl	21a6c <atof>
   1d0a0:	ec51 0b10 	vmov	r0, r1, d0
   1d0a4:	f7ef fc82 	bl	c9ac <__aeabi_d2uiz>
    tok = strtok(NULL, "=");
   1d0a8:	4980      	ldr	r1, [pc, #512]	@ (1d2ac <S9T_dev_info+0x32c>)
    p->info.average = atof(tok);
   1d0aa:	4603      	mov	r3, r0
    tok = strtok(NULL, "=");
   1d0ac:	4620      	mov	r0, r4
    p->info.average = atof(tok);
   1d0ae:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
    tok = strtok(NULL, "=");
   1d0b2:	f007 fa59 	bl	24568 <strtok>
    tok = strtok(NULL, "\r");
   1d0b6:	497f      	ldr	r1, [pc, #508]	@ (1d2b4 <S9T_dev_info+0x334>)
   1d0b8:	4620      	mov	r0, r4
   1d0ba:	f007 fa55 	bl	24568 <strtok>
   1d0be:	4601      	mov	r1, r0
    strcpy(p->info.UID, tok);
   1d0c0:	f106 0025 	add.w	r0, r6, #37	@ 0x25
   1d0c4:	f007 fafa 	bl	246bc <strcpy>
    tok = strtok(NULL, "\r\n");
   1d0c8:	497b      	ldr	r1, [pc, #492]	@ (1d2b8 <S9T_dev_info+0x338>)
   1d0ca:	4620      	mov	r0, r4
   1d0cc:	f007 fa4c 	bl	24568 <strtok>
   1d0d0:	4601      	mov	r1, r0
    strcpy(p->info.sensor, tok);
   1d0d2:	f106 0045 	add.w	r0, r6, #69	@ 0x45
   1d0d6:	f007 faf1 	bl	246bc <strcpy>
    tok = strtok(NULL, "\r\n");
   1d0da:	4977      	ldr	r1, [pc, #476]	@ (1d2b8 <S9T_dev_info+0x338>)
   1d0dc:	4620      	mov	r0, r4
   1d0de:	f007 fa43 	bl	24568 <strtok>
   1d0e2:	4601      	mov	r1, r0
    strcpy(p->info.status, tok);
   1d0e4:	f106 0051 	add.w	r0, r6, #81	@ 0x51
   1d0e8:	f007 fae8 	bl	246bc <strcpy>
        ARTEMIS_DEBUG_PRINTF("S9 Temperature Sensor\n");
   1d0ec:	4873      	ldr	r0, [pc, #460]	@ (1d2bc <S9T_dev_info+0x33c>)
   1d0ee:	f7f3 ffbb 	bl	11068 <am_util_stdio_printf>
   1d0f2:	4872      	ldr	r0, [pc, #456]	@ (1d2bc <S9T_dev_info+0x33c>)
   1d0f4:	f000 ff40 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1d0f8:	4871      	ldr	r0, [pc, #452]	@ (1d2c0 <S9T_dev_info+0x340>)
   1d0fa:	f7f3 ffb5 	bl	11068 <am_util_stdio_printf>
   1d0fe:	4870      	ldr	r0, [pc, #448]	@ (1d2c0 <S9T_dev_info+0x340>)
   1d100:	f000 ff3a 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tMID\t: ");
   1d104:	486f      	ldr	r0, [pc, #444]	@ (1d2c4 <S9T_dev_info+0x344>)
   1d106:	f7f3 ffaf 	bl	11068 <am_util_stdio_printf>
   1d10a:	486e      	ldr	r0, [pc, #440]	@ (1d2c4 <S9T_dev_info+0x344>)
   1d10c:	f000 ff34 	bl	1df78 <datalogger_log_debug>
        for (i=0; i<8; i++){
   1d110:	1df4      	adds	r4, r6, #7
   1d112:	f106 070f 	add.w	r7, r6, #15
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.MID[i]);
   1d116:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1d11a:	4628      	mov	r0, r5
   1d11c:	f7f3 ffa4 	bl	11068 <am_util_stdio_printf>
   1d120:	7821      	ldrb	r1, [r4, #0]
   1d122:	4628      	mov	r0, r5
   1d124:	f000 ff28 	bl	1df78 <datalogger_log_debug>
        for (i=0; i<8; i++){
   1d128:	42bc      	cmp	r4, r7
   1d12a:	d1f4      	bne.n	1d116 <S9T_dev_info+0x196>
        ARTEMIS_DEBUG_PRINTF("\n");
   1d12c:	4866      	ldr	r0, [pc, #408]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d12e:	4c67      	ldr	r4, [pc, #412]	@ (1d2cc <S9T_dev_info+0x34c>)
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.UID[i]);
   1d130:	4d5f      	ldr	r5, [pc, #380]	@ (1d2b0 <S9T_dev_info+0x330>)
        ARTEMIS_DEBUG_PRINTF("\n");
   1d132:	f7f3 ff99 	bl	11068 <am_util_stdio_printf>
   1d136:	4864      	ldr	r0, [pc, #400]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d138:	f000 ff1e 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tC0\t: %.7f\n", pS9->info.C0);
   1d13c:	6930      	ldr	r0, [r6, #16]
   1d13e:	f7ef f943 	bl	c3c8 <__aeabi_f2d>
   1d142:	4602      	mov	r2, r0
   1d144:	460b      	mov	r3, r1
   1d146:	4862      	ldr	r0, [pc, #392]	@ (1d2d0 <S9T_dev_info+0x350>)
   1d148:	f7f3 ff8e 	bl	11068 <am_util_stdio_printf>
   1d14c:	6930      	ldr	r0, [r6, #16]
   1d14e:	f7ef f93b 	bl	c3c8 <__aeabi_f2d>
   1d152:	4602      	mov	r2, r0
   1d154:	460b      	mov	r3, r1
   1d156:	485e      	ldr	r0, [pc, #376]	@ (1d2d0 <S9T_dev_info+0x350>)
   1d158:	f000 ff0e 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tC1\t: %.7f\n", pS9->info.C1);
   1d15c:	6970      	ldr	r0, [r6, #20]
   1d15e:	f7ef f933 	bl	c3c8 <__aeabi_f2d>
   1d162:	4602      	mov	r2, r0
   1d164:	460b      	mov	r3, r1
   1d166:	485b      	ldr	r0, [pc, #364]	@ (1d2d4 <S9T_dev_info+0x354>)
   1d168:	f7f3 ff7e 	bl	11068 <am_util_stdio_printf>
   1d16c:	6970      	ldr	r0, [r6, #20]
   1d16e:	f7ef f92b 	bl	c3c8 <__aeabi_f2d>
   1d172:	4602      	mov	r2, r0
   1d174:	460b      	mov	r3, r1
   1d176:	4857      	ldr	r0, [pc, #348]	@ (1d2d4 <S9T_dev_info+0x354>)
   1d178:	f000 fefe 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tC2\t: %.7f\n", pS9->info.C2);
   1d17c:	69b0      	ldr	r0, [r6, #24]
   1d17e:	f7ef f923 	bl	c3c8 <__aeabi_f2d>
   1d182:	4602      	mov	r2, r0
   1d184:	460b      	mov	r3, r1
   1d186:	4854      	ldr	r0, [pc, #336]	@ (1d2d8 <S9T_dev_info+0x358>)
   1d188:	f7f3 ff6e 	bl	11068 <am_util_stdio_printf>
   1d18c:	69b0      	ldr	r0, [r6, #24]
   1d18e:	f7ef f91b 	bl	c3c8 <__aeabi_f2d>
   1d192:	4602      	mov	r2, r0
   1d194:	460b      	mov	r3, r1
   1d196:	4850      	ldr	r0, [pc, #320]	@ (1d2d8 <S9T_dev_info+0x358>)
   1d198:	f000 feee 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tC3\t: %.7f\n", pS9->info.C3);
   1d19c:	69f0      	ldr	r0, [r6, #28]
   1d19e:	f7ef f913 	bl	c3c8 <__aeabi_f2d>
   1d1a2:	4602      	mov	r2, r0
   1d1a4:	460b      	mov	r3, r1
   1d1a6:	484d      	ldr	r0, [pc, #308]	@ (1d2dc <S9T_dev_info+0x35c>)
   1d1a8:	f7f3 ff5e 	bl	11068 <am_util_stdio_printf>
   1d1ac:	69f0      	ldr	r0, [r6, #28]
   1d1ae:	f7ef f90b 	bl	c3c8 <__aeabi_f2d>
   1d1b2:	4602      	mov	r2, r0
   1d1b4:	460b      	mov	r3, r1
   1d1b6:	4849      	ldr	r0, [pc, #292]	@ (1d2dc <S9T_dev_info+0x35c>)
   1d1b8:	f000 fede 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tR0\t: %.7f\n", pS9->info.R0);
   1d1bc:	6a30      	ldr	r0, [r6, #32]
   1d1be:	f7ef f903 	bl	c3c8 <__aeabi_f2d>
   1d1c2:	4602      	mov	r2, r0
   1d1c4:	460b      	mov	r3, r1
   1d1c6:	4846      	ldr	r0, [pc, #280]	@ (1d2e0 <S9T_dev_info+0x360>)
   1d1c8:	f7f3 ff4e 	bl	11068 <am_util_stdio_printf>
   1d1cc:	6a30      	ldr	r0, [r6, #32]
   1d1ce:	f7ef f8fb 	bl	c3c8 <__aeabi_f2d>
   1d1d2:	4602      	mov	r2, r0
   1d1d4:	460b      	mov	r3, r1
   1d1d6:	4842      	ldr	r0, [pc, #264]	@ (1d2e0 <S9T_dev_info+0x360>)
   1d1d8:	f000 fece 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tAverage\t: %u\n", pS9->info.average);
   1d1dc:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
   1d1e0:	4840      	ldr	r0, [pc, #256]	@ (1d2e4 <S9T_dev_info+0x364>)
   1d1e2:	f7f3 ff41 	bl	11068 <am_util_stdio_printf>
   1d1e6:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
   1d1ea:	483e      	ldr	r0, [pc, #248]	@ (1d2e4 <S9T_dev_info+0x364>)
   1d1ec:	f000 fec4 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tUID\t: ");
   1d1f0:	483d      	ldr	r0, [pc, #244]	@ (1d2e8 <S9T_dev_info+0x368>)
   1d1f2:	f7f3 ff39 	bl	11068 <am_util_stdio_printf>
   1d1f6:	483c      	ldr	r0, [pc, #240]	@ (1d2e8 <S9T_dev_info+0x368>)
   1d1f8:	f000 febe 	bl	1df78 <datalogger_log_debug>
        for (i=0; i<32; i++){
   1d1fc:	f104 0720 	add.w	r7, r4, #32
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.UID[i]);
   1d200:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1d204:	4628      	mov	r0, r5
   1d206:	f7f3 ff2f 	bl	11068 <am_util_stdio_printf>
   1d20a:	7821      	ldrb	r1, [r4, #0]
   1d20c:	4628      	mov	r0, r5
   1d20e:	f000 feb3 	bl	1df78 <datalogger_log_debug>
        for (i=0; i<32; i++){
   1d212:	42a7      	cmp	r7, r4
   1d214:	d1f4      	bne.n	1d200 <S9T_dev_info+0x280>
        ARTEMIS_DEBUG_PRINTF("\n");
   1d216:	482c      	ldr	r0, [pc, #176]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d218:	4c34      	ldr	r4, [pc, #208]	@ (1d2ec <S9T_dev_info+0x36c>)
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.sensor[i]);
   1d21a:	4d25      	ldr	r5, [pc, #148]	@ (1d2b0 <S9T_dev_info+0x330>)
        ARTEMIS_DEBUG_PRINTF("\n");
   1d21c:	f7f3 ff24 	bl	11068 <am_util_stdio_printf>
   1d220:	4829      	ldr	r0, [pc, #164]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d222:	f000 fea9 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tFW Ver\t: ");
   1d226:	4832      	ldr	r0, [pc, #200]	@ (1d2f0 <S9T_dev_info+0x370>)
   1d228:	f7f3 ff1e 	bl	11068 <am_util_stdio_printf>
   1d22c:	4830      	ldr	r0, [pc, #192]	@ (1d2f0 <S9T_dev_info+0x370>)
   1d22e:	f000 fea3 	bl	1df78 <datalogger_log_debug>
        for (i=0; i<10; i++){
   1d232:	f104 070a 	add.w	r7, r4, #10
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.sensor[i]);
   1d236:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1d23a:	4628      	mov	r0, r5
   1d23c:	f7f3 ff14 	bl	11068 <am_util_stdio_printf>
   1d240:	7821      	ldrb	r1, [r4, #0]
   1d242:	4628      	mov	r0, r5
   1d244:	f000 fe98 	bl	1df78 <datalogger_log_debug>
        for (i=0; i<10; i++){
   1d248:	42bc      	cmp	r4, r7
   1d24a:	d1f4      	bne.n	1d236 <S9T_dev_info+0x2b6>
        ARTEMIS_DEBUG_PRINTF("\n");
   1d24c:	481e      	ldr	r0, [pc, #120]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d24e:	f7f3 ff0b 	bl	11068 <am_util_stdio_printf>
   1d252:	481d      	ldr	r0, [pc, #116]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d254:	f000 fe90 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\tStatus\t: ");
   1d258:	4826      	ldr	r0, [pc, #152]	@ (1d2f4 <S9T_dev_info+0x374>)
   1d25a:	f7f3 ff05 	bl	11068 <am_util_stdio_printf>
   1d25e:	4825      	ldr	r0, [pc, #148]	@ (1d2f4 <S9T_dev_info+0x374>)
   1d260:	f000 fe8a 	bl	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("%c", pS9->info.status[i]);
   1d264:	f896 1051 	ldrb.w	r1, [r6, #81]	@ 0x51
   1d268:	4811      	ldr	r0, [pc, #68]	@ (1d2b0 <S9T_dev_info+0x330>)
   1d26a:	f7f3 fefd 	bl	11068 <am_util_stdio_printf>
   1d26e:	f896 1051 	ldrb.w	r1, [r6, #81]	@ 0x51
   1d272:	480f      	ldr	r0, [pc, #60]	@ (1d2b0 <S9T_dev_info+0x330>)
   1d274:	f000 fe80 	bl	1df78 <datalogger_log_debug>
   1d278:	f896 1052 	ldrb.w	r1, [r6, #82]	@ 0x52
   1d27c:	480c      	ldr	r0, [pc, #48]	@ (1d2b0 <S9T_dev_info+0x330>)
   1d27e:	f7f3 fef3 	bl	11068 <am_util_stdio_printf>
   1d282:	f896 1052 	ldrb.w	r1, [r6, #82]	@ 0x52
   1d286:	480a      	ldr	r0, [pc, #40]	@ (1d2b0 <S9T_dev_info+0x330>)
   1d288:	f000 fe76 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\n");
   1d28c:	480e      	ldr	r0, [pc, #56]	@ (1d2c8 <S9T_dev_info+0x348>)
   1d28e:	f7f3 feeb 	bl	11068 <am_util_stdio_printf>
   1d292:	480d      	ldr	r0, [pc, #52]	@ (1d2c8 <S9T_dev_info+0x348>)
}
   1d294:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
   1d298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ARTEMIS_DEBUG_PRINTF("S9 : Something went wrong\n");
   1d29c:	f000 be6c 	b.w	1df78 <datalogger_log_debug>
   1d2a0:	1004aac4 	.word	0x1004aac4
   1d2a4:	00030118 	.word	0x00030118
   1d2a8:	000301b0 	.word	0x000301b0
   1d2ac:	00030120 	.word	0x00030120
   1d2b0:	0002a9ac 	.word	0x0002a9ac
   1d2b4:	0002aa68 	.word	0x0002aa68
   1d2b8:	0002a8fc 	.word	0x0002a8fc
   1d2bc:	00030124 	.word	0x00030124
   1d2c0:	0002b34c 	.word	0x0002b34c
   1d2c4:	0003013c 	.word	0x0003013c
   1d2c8:	000305a0 	.word	0x000305a0
   1d2cc:	1004aae8 	.word	0x1004aae8
   1d2d0:	00030144 	.word	0x00030144
   1d2d4:	00030150 	.word	0x00030150
   1d2d8:	0003015c 	.word	0x0003015c
   1d2dc:	00030168 	.word	0x00030168
   1d2e0:	00030174 	.word	0x00030174
   1d2e4:	00030180 	.word	0x00030180
   1d2e8:	00030190 	.word	0x00030190
   1d2ec:	1004ab08 	.word	0x1004ab08
   1d2f0:	00030198 	.word	0x00030198
   1d2f4:	000301a4 	.word	0x000301a4

0001d2f8 <S9T_init>:
{
   1d2f8:	b510      	push	{r4, lr}
    pS9->device.uart.port = p->port;
   1d2fa:	4c28      	ldr	r4, [pc, #160]	@ (1d39c <S9T_init+0xa4>)
   1d2fc:	7802      	ldrb	r2, [r0, #0]
{
   1d2fe:	b084      	sub	sp, #16
    pS9->device.uart.port = p->port;
   1d300:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
{
   1d304:	4603      	mov	r3, r0
    pS9->device.power.pin_number = p->pin_number;
   1d306:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    pS9->device.uart.baudrate = p->baudrate;
   1d30a:	685b      	ldr	r3, [r3, #4]
    am_hal_gpio_pinconfig(pS9->device.power.pin_number, *pS9->device.power.pin);
   1d30c:	6811      	ldr	r1, [r2, #0]
    pS9->device.uart.baudrate = p->baudrate;
   1d30e:	6623      	str	r3, [r4, #96]	@ 0x60
    pS9->device.power.pin_number = p->pin_number;
   1d310:	e9c4 2015 	strd	r2, r0, [r4, #84]	@ 0x54
    am_hal_gpio_pinconfig(pS9->device.power.pin_number, *pS9->device.power.pin);
   1d314:	f002 f984 	bl	1f620 <am_hal_gpio_pinconfig>
    MAX14830_Set_baudrate(pS9->device.uart.port, pS9->device.uart.baudrate);
   1d318:	6e21      	ldr	r1, [r4, #96]	@ 0x60
   1d31a:	f894 005c 	ldrb.w	r0, [r4, #92]	@ 0x5c
   1d31e:	f7f5 fea1 	bl	13064 <MAX14830_Set_baudrate>
    am_hal_gpio_output_clear(pS9->device.power.pin_number);
   1d322:	6da3      	ldr	r3, [r4, #88]	@ 0x58
   1d324:	481e      	ldr	r0, [pc, #120]	@ (1d3a0 <S9T_init+0xa8>)
   1d326:	08da      	lsrs	r2, r3, #3
   1d328:	2101      	movs	r1, #1
   1d32a:	f002 0204 	and.w	r2, r2, #4
   1d32e:	f003 031f 	and.w	r3, r3, #31
   1d332:	fa01 f303 	lsl.w	r3, r1, r3
   1d336:	5013      	str	r3, [r2, r0]
    MAX14830_UART_Write_direct(pS9->device.uart.port, (uint8_t*)"stop\r", 5);
   1d338:	491a      	ldr	r1, [pc, #104]	@ (1d3a4 <S9T_init+0xac>)
   1d33a:	f894 005c 	ldrb.w	r0, [r4, #92]	@ 0x5c
    uint8_t rxLen = 0;
   1d33e:	2300      	movs	r3, #0
    MAX14830_UART_Write_direct(pS9->device.uart.port, (uint8_t*)"stop\r", 5);
   1d340:	2205      	movs	r2, #5
    uint8_t rxLen = 0;
   1d342:	f88d 3003 	strb.w	r3, [sp, #3]
    MAX14830_UART_Write_direct(pS9->device.uart.port, (uint8_t*)"stop\r", 5);
   1d346:	f7f5 ff4b 	bl	131e0 <MAX14830_UART_Write_direct>
    result = receive_response(sampleStr, &rxLen);
   1d34a:	f10d 0103 	add.w	r1, sp, #3
   1d34e:	a801      	add	r0, sp, #4
   1d350:	f7ff fc80 	bl	1cc54 <receive_response.constprop.0>
    if (result == S9_RESULT_OK)
   1d354:	2801      	cmp	r0, #1
   1d356:	d01a      	beq.n	1d38e <S9T_init+0x96>
        ARTEMIS_DEBUG_PRINTF("S9 : Sampling did not stop\n");
   1d358:	4813      	ldr	r0, [pc, #76]	@ (1d3a8 <S9T_init+0xb0>)
   1d35a:	f7f3 fe85 	bl	11068 <am_util_stdio_printf>
   1d35e:	4812      	ldr	r0, [pc, #72]	@ (1d3a8 <S9T_init+0xb0>)
   1d360:	f000 fe0a 	bl	1df78 <datalogger_log_debug>
    S9T_dev_info();
   1d364:	f7ff fe0c 	bl	1cf80 <S9T_dev_info>
    ARTEMIS_DEBUG_PRINTF("S9 Temperature Sensor is initialized\n\n");
   1d368:	4810      	ldr	r0, [pc, #64]	@ (1d3ac <S9T_init+0xb4>)
   1d36a:	f7f3 fe7d 	bl	11068 <am_util_stdio_printf>
   1d36e:	480f      	ldr	r0, [pc, #60]	@ (1d3ac <S9T_init+0xb4>)
   1d370:	f000 fe02 	bl	1df78 <datalogger_log_debug>
    am_hal_gpio_output_set(pS9->device.power.pin_number);
   1d374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
   1d376:	480e      	ldr	r0, [pc, #56]	@ (1d3b0 <S9T_init+0xb8>)
   1d378:	08da      	lsrs	r2, r3, #3
   1d37a:	2101      	movs	r1, #1
   1d37c:	f002 0204 	and.w	r2, r2, #4
   1d380:	f003 031f 	and.w	r3, r3, #31
   1d384:	fa01 f303 	lsl.w	r3, r1, r3
   1d388:	5013      	str	r3, [r2, r0]
}
   1d38a:	b004      	add	sp, #16
   1d38c:	bd10      	pop	{r4, pc}
        ARTEMIS_DEBUG_PRINTF("S9 : Sampling Stopped\n");
   1d38e:	4809      	ldr	r0, [pc, #36]	@ (1d3b4 <S9T_init+0xbc>)
   1d390:	f7f3 fe6a 	bl	11068 <am_util_stdio_printf>
   1d394:	4807      	ldr	r0, [pc, #28]	@ (1d3b4 <S9T_init+0xbc>)
   1d396:	f000 fdef 	bl	1df78 <datalogger_log_debug>
   1d39a:	e7e3      	b.n	1d364 <S9T_init+0x6c>
   1d39c:	1004aac4 	.word	0x1004aac4
   1d3a0:	40010098 	.word	0x40010098
   1d3a4:	000300cc 	.word	0x000300cc
   1d3a8:	000301e4 	.word	0x000301e4
   1d3ac:	00030200 	.word	0x00030200
   1d3b0:	40010090 	.word	0x40010090
   1d3b4:	000301cc 	.word	0x000301cc

0001d3b8 <S9T_enable>:
    am_hal_gpio_output_clear(pS9->device.power.pin_number);
   1d3b8:	4b06      	ldr	r3, [pc, #24]	@ (1d3d4 <S9T_enable+0x1c>)
   1d3ba:	4807      	ldr	r0, [pc, #28]	@ (1d3d8 <S9T_enable+0x20>)
   1d3bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
   1d3be:	08da      	lsrs	r2, r3, #3
   1d3c0:	2101      	movs	r1, #1
   1d3c2:	f002 0204 	and.w	r2, r2, #4
   1d3c6:	f003 031f 	and.w	r3, r3, #31
   1d3ca:	fa01 f303 	lsl.w	r3, r1, r3
   1d3ce:	5013      	str	r3, [r2, r0]
}
   1d3d0:	4770      	bx	lr
   1d3d2:	bf00      	nop
   1d3d4:	1004aac4 	.word	0x1004aac4
   1d3d8:	40010098 	.word	0x40010098

0001d3dc <S9T_disable>:
    am_hal_gpio_output_set(pS9->device.power.pin_number);
   1d3dc:	4b06      	ldr	r3, [pc, #24]	@ (1d3f8 <S9T_disable+0x1c>)
   1d3de:	4807      	ldr	r0, [pc, #28]	@ (1d3fc <S9T_disable+0x20>)
   1d3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
   1d3e2:	08da      	lsrs	r2, r3, #3
   1d3e4:	2101      	movs	r1, #1
   1d3e6:	f002 0204 	and.w	r2, r2, #4
   1d3ea:	f003 031f 	and.w	r3, r3, #31
   1d3ee:	fa01 f303 	lsl.w	r3, r1, r3
   1d3f2:	5013      	str	r3, [r2, r0]
}
   1d3f4:	4770      	bx	lr
   1d3f6:	bf00      	nop
   1d3f8:	1004aac4 	.word	0x1004aac4
   1d3fc:	40010090 	.word	0x40010090

0001d400 <S9T_Read>:
{
   1d400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t *)"sample\r", 7);
   1d404:	4f47      	ldr	r7, [pc, #284]	@ (1d524 <S9T_Read+0x124>)
{
   1d406:	b0aa      	sub	sp, #168	@ 0xa8
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t *)"sample\r", 7);
   1d408:	2207      	movs	r2, #7
    uint16_t rxLen = 0;
   1d40a:	f04f 0800 	mov.w	r8, #0
{
   1d40e:	4606      	mov	r6, r0
   1d410:	460d      	mov	r5, r1
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t *)"sample\r", 7);
   1d412:	f897 005c 	ldrb.w	r0, [r7, #92]	@ 0x5c
   1d416:	4944      	ldr	r1, [pc, #272]	@ (1d528 <S9T_Read+0x128>)
    uint16_t rxLen = 0;
   1d418:	f8ad 8002 	strh.w	r8, [sp, #2]
    MAX14830_UART_Write(pS9->device.uart.port, (uint8_t *)"sample\r", 7);
   1d41c:	f7f5 feb2 	bl	13184 <MAX14830_UART_Write>
    result = receive_response_RTOS(sampleStr, &rxLen);
   1d420:	f10d 0102 	add.w	r1, sp, #2
   1d424:	a80a      	add	r0, sp, #40	@ 0x28
   1d426:	f7ff fcd5 	bl	1cdd4 <receive_response_RTOS.constprop.0>
    if (result == S9_RESULT_OK)
   1d42a:	2801      	cmp	r0, #1
   1d42c:	d004      	beq.n	1d438 <S9T_Read+0x38>
}
   1d42e:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 1d52c <S9T_Read+0x12c>
   1d432:	b02a      	add	sp, #168	@ 0xa8
   1d434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        char *ptok = (char *)sampleStr;
   1d438:	ab0a      	add	r3, sp, #40	@ 0x28
        char *tok = strtok_r (ptok, "\r\n", &ptok);
   1d43a:	493d      	ldr	r1, [pc, #244]	@ (1d530 <S9T_Read+0x130>)
        char *ptok = (char *)sampleStr;
   1d43c:	9301      	str	r3, [sp, #4]
        char *tok = strtok_r (ptok, "\r\n", &ptok);
   1d43e:	aa01      	add	r2, sp, #4
   1d440:	4618      	mov	r0, r3
   1d442:	f007 f8cb 	bl	245dc <strtok_r>
        char sample[64] = {0};
   1d446:	2240      	movs	r2, #64	@ 0x40
        char *tok = strtok_r (ptok, "\r\n", &ptok);
   1d448:	4604      	mov	r4, r0
        char sample[64] = {0};
   1d44a:	4641      	mov	r1, r8
   1d44c:	a81a      	add	r0, sp, #104	@ 0x68
   1d44e:	f006 ff9f 	bl	24390 <memset>
        while (tok != NULL)
   1d452:	2c00      	cmp	r4, #0
   1d454:	d0eb      	beq.n	1d42e <S9T_Read+0x2e>
            tok = strtok_r(NULL, "\r\n", &ptok);
   1d456:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 1d530 <S9T_Read+0x130>
            if (strcmp(tok,"OK")==0)
   1d45a:	7823      	ldrb	r3, [r4, #0]
   1d45c:	2b4f      	cmp	r3, #79	@ 0x4f
            tok = strtok_r(NULL, "\r\n", &ptok);
   1d45e:	aa01      	add	r2, sp, #4
   1d460:	4649      	mov	r1, r9
   1d462:	f04f 0000 	mov.w	r0, #0
            if (strcmp(tok,"OK")==0)
   1d466:	d12d      	bne.n	1d4c4 <S9T_Read+0xc4>
   1d468:	7863      	ldrb	r3, [r4, #1]
   1d46a:	2b4b      	cmp	r3, #75	@ 0x4b
   1d46c:	d12a      	bne.n	1d4c4 <S9T_Read+0xc4>
   1d46e:	f894 a002 	ldrb.w	sl, [r4, #2]
   1d472:	f1ba 0f00 	cmp.w	sl, #0
   1d476:	d125      	bne.n	1d4c4 <S9T_Read+0xc4>
                uint8_t len = strlen(last_token)+1;
   1d478:	4640      	mov	r0, r8
   1d47a:	f7ef fc01 	bl	cc80 <strlen>
   1d47e:	b2c4      	uxtb	r4, r0
   1d480:	1c62      	adds	r2, r4, #1
   1d482:	b2d3      	uxtb	r3, r2
                sample[len] = '\r';
   1d484:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
   1d488:	4469      	add	r1, sp
   1d48a:	200d      	movs	r0, #13
   1d48c:	f801 0c40 	strb.w	r0, [r1, #-64]
                for (uint8_t i=0; i<len; i++)
   1d490:	b30b      	cbz	r3, 1d4d6 <S9T_Read+0xd6>
                    sample[i]=  last_token[i];
   1d492:	4641      	mov	r1, r8
   1d494:	a81a      	add	r0, sp, #104	@ 0x68
   1d496:	f7ef fb4b 	bl	cb30 <memcpy>
                module_s9_parse_msg(sample, len+1, pS9);
   1d49a:	1ca1      	adds	r1, r4, #2
   1d49c:	b2c9      	uxtb	r1, r1
    if(len <= 4)
   1d49e:	2904      	cmp	r1, #4
   1d4a0:	d919      	bls.n	1d4d6 <S9T_Read+0xd6>
   1d4a2:	a81a      	add	r0, sp, #104	@ 0x68
    uint8_t comma=0;
   1d4a4:	4654      	mov	r4, sl
    for(i=0;i<len;i++)
   1d4a6:	4653      	mov	r3, sl
   1d4a8:	e006      	b.n	1d4b8 <S9T_Read+0xb8>
            end = i;
   1d4aa:	2a0d      	cmp	r2, #13
   1d4ac:	bf08      	it	eq
   1d4ae:	469a      	moveq	sl, r3
    for(i=0;i<len;i++)
   1d4b0:	3301      	adds	r3, #1
   1d4b2:	b2db      	uxtb	r3, r3
   1d4b4:	4299      	cmp	r1, r3
   1d4b6:	d00c      	beq.n	1d4d2 <S9T_Read+0xd2>
        if(data[i] == ',')
   1d4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d4bc:	2a2c      	cmp	r2, #44	@ 0x2c
   1d4be:	d1f4      	bne.n	1d4aa <S9T_Read+0xaa>
            comma = i;
   1d4c0:	461c      	mov	r4, r3
   1d4c2:	e7f5      	b.n	1d4b0 <S9T_Read+0xb0>
            tok = strtok_r(NULL, "\r\n", &ptok);
   1d4c4:	f007 f88a 	bl	245dc <strtok_r>
        while (tok != NULL)
   1d4c8:	46a0      	mov	r8, r4
   1d4ca:	2800      	cmp	r0, #0
   1d4cc:	d0af      	beq.n	1d42e <S9T_Read+0x2e>
   1d4ce:	4604      	mov	r4, r0
   1d4d0:	e7c3      	b.n	1d45a <S9T_Read+0x5a>
    if(end <= comma)
   1d4d2:	45a2      	cmp	sl, r4
   1d4d4:	d807      	bhi.n	1d4e6 <S9T_Read+0xe6>
        p->temperature = NAN;
   1d4d6:	4b17      	ldr	r3, [pc, #92]	@ (1d534 <S9T_Read+0x134>)
   1d4d8:	603b      	str	r3, [r7, #0]
        p->resistance = NAN;
   1d4da:	4618      	mov	r0, r3
   1d4dc:	607b      	str	r3, [r7, #4]
                *t = pS9->temperature; // Tempearture in °C
   1d4de:	6030      	str	r0, [r6, #0]
                *r = pS9->resistance;
   1d4e0:	687b      	ldr	r3, [r7, #4]
   1d4e2:	602b      	str	r3, [r5, #0]
                break;
   1d4e4:	e7a3      	b.n	1d42e <S9T_Read+0x2e>
    strncpy(temp, &data[0],comma);
   1d4e6:	4622      	mov	r2, r4
   1d4e8:	a91a      	add	r1, sp, #104	@ 0x68
   1d4ea:	a802      	add	r0, sp, #8
   1d4ec:	f007 f808 	bl	24500 <strncpy>
    p->resistance = atof(temp);
   1d4f0:	a802      	add	r0, sp, #8
   1d4f2:	f004 fabb 	bl	21a6c <atof>
   1d4f6:	ec51 0b10 	vmov	r0, r1, d0
   1d4fa:	f7ef fa77 	bl	c9ec <__aeabi_d2f>
    strncpy(temp, &data[comma+1], end-comma);
   1d4fe:	ab1a      	add	r3, sp, #104	@ 0x68
   1d500:	1c61      	adds	r1, r4, #1
   1d502:	4419      	add	r1, r3
   1d504:	ebaa 0204 	sub.w	r2, sl, r4
    p->resistance = atof(temp);
   1d508:	6078      	str	r0, [r7, #4]
    strncpy(temp, &data[comma+1], end-comma);
   1d50a:	a802      	add	r0, sp, #8
   1d50c:	f006 fff8 	bl	24500 <strncpy>
    p->temperature = atof(temp);
   1d510:	a802      	add	r0, sp, #8
   1d512:	f004 faab 	bl	21a6c <atof>
   1d516:	ec51 0b10 	vmov	r0, r1, d0
   1d51a:	f7ef fa67 	bl	c9ec <__aeabi_d2f>
   1d51e:	6038      	str	r0, [r7, #0]
   1d520:	e7dd      	b.n	1d4de <S9T_Read+0xde>
   1d522:	bf00      	nop
   1d524:	1004aac4 	.word	0x1004aac4
   1d528:	00030228 	.word	0x00030228
   1d52c:	00000000 	.word	0x00000000
   1d530:	0002a8fc 	.word	0x0002a8fc
   1d534:	7fc00000 	.word	0x7fc00000

0001d538 <module_k9lx_data_integrity>:
    float temperature_f = temperature_c * (9/5) + 32 ;
    return temperature_f;
}

static int8_t module_k9lx_data_integrity (uint8_t *Data, uint8_t len)
{
   1d538:	b510      	push	{r4, lr}
   1d53a:	b084      	sub	sp, #16
     *	check the CRC on the received bytes
     *
     */

    /** copy the Data into the local buffer */
    uint8_t lBuf[K9LX_BUFFER_LENGTH] = {0};
   1d53c:	2300      	movs	r3, #0
   1d53e:	e9cd 3300 	strd	r3, r3, [sp]
   1d542:	9302      	str	r3, [sp, #8]
   1d544:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t crc_h, crc_l = 0;

    for (uint8_t i=0; i<len; i++){
   1d548:	460c      	mov	r4, r1
   1d54a:	2900      	cmp	r1, #0
   1d54c:	d060      	beq.n	1d610 <module_k9lx_data_integrity+0xd8>
        lBuf[i] = Data[i];
   1d54e:	460a      	mov	r2, r1
   1d550:	4601      	mov	r1, r0
   1d552:	4668      	mov	r0, sp
   1d554:	f7ef faec 	bl	cb30 <memcpy>
    }

    /** check the function code error bit (7th bit) */
    if (K9LX_RECV_ERROR & lBuf[1])
   1d558:	f99d 3001 	ldrsb.w	r3, [sp, #1]
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	db5e      	blt.n	1d61e <module_k9lx_data_integrity+0xe6>
        return -1;
    }
    else
    {
        /** check the CRC16, send only the useful bytes, last two bytes are CRC-bytes */
        module_k9lx_crc16 (&crc_h, &crc_l, lBuf, len-2);
   1d560:	f1a4 0c02 	sub.w	ip, r4, #2
    while(m>0){
   1d564:	f01c 0cff 	ands.w	ip, ip, #255	@ 0xff
   1d568:	d056      	beq.n	1d618 <module_k9lx_data_integrity+0xe0>
        crc16 ^= pData[x];
   1d56a:	f89d 0000 	ldrb.w	r0, [sp]
            if(crc16 & 1)
   1d56e:	4a2d      	ldr	r2, [pc, #180]	@ (1d624 <module_k9lx_data_integrity+0xec>)
    uint16_t crc16 = 0xFFFF;
   1d570:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    x = 0;
   1d574:	2100      	movs	r1, #0
   1d576:	e001      	b.n	1d57c <module_k9lx_data_integrity+0x44>
        crc16 ^= pData[x];
   1d578:	f810 0c10 	ldrb.w	r0, [r0, #-16]
   1d57c:	4058      	eors	r0, r3
            if(crc16 & 1)
   1d57e:	f340 0300 	sbfx	r3, r0, #0, #1
   1d582:	4013      	ands	r3, r2
   1d584:	ea83 0350 	eor.w	r3, r3, r0, lsr #1
   1d588:	f343 0000 	sbfx	r0, r3, #0, #1
   1d58c:	4010      	ands	r0, r2
                crc16 >>= 1;
   1d58e:	f3c3 034e 	ubfx	r3, r3, #1, #15
            if(crc16 & 1)
   1d592:	4058      	eors	r0, r3
   1d594:	f340 0300 	sbfx	r3, r0, #0, #1
   1d598:	4013      	ands	r3, r2
                crc16 >>= 1;
   1d59a:	f3c0 004e 	ubfx	r0, r0, #1, #15
            if(crc16 & 1)
   1d59e:	4043      	eors	r3, r0
   1d5a0:	f343 0000 	sbfx	r0, r3, #0, #1
   1d5a4:	4010      	ands	r0, r2
                crc16 >>= 1;
   1d5a6:	f3c3 034e 	ubfx	r3, r3, #1, #15
            if(crc16 & 1)
   1d5aa:	4058      	eors	r0, r3
   1d5ac:	f340 0300 	sbfx	r3, r0, #0, #1
   1d5b0:	4013      	ands	r3, r2
                crc16 >>= 1;
   1d5b2:	f3c0 004e 	ubfx	r0, r0, #1, #15
            if(crc16 & 1)
   1d5b6:	4043      	eors	r3, r0
   1d5b8:	f343 0000 	sbfx	r0, r3, #0, #1
   1d5bc:	4010      	ands	r0, r2
                crc16 >>= 1;
   1d5be:	f3c3 034e 	ubfx	r3, r3, #1, #15
            if(crc16 & 1)
   1d5c2:	4058      	eors	r0, r3
   1d5c4:	f340 0300 	sbfx	r3, r0, #0, #1
   1d5c8:	4013      	ands	r3, r2
                crc16 >>= 1;
   1d5ca:	f3c0 004e 	ubfx	r0, r0, #1, #15
            if(crc16 & 1)
   1d5ce:	4043      	eors	r3, r0
   1d5d0:	f343 0000 	sbfx	r0, r3, #0, #1
        x++;
   1d5d4:	3101      	adds	r1, #1
            if(crc16 & 1)
   1d5d6:	4010      	ands	r0, r2
        x++;
   1d5d8:	b2c9      	uxtb	r1, r1
                crc16 >>= 1;
   1d5da:	f3c3 034e 	ubfx	r3, r3, #1, #15
            if(crc16 & 1)
   1d5de:	4043      	eors	r3, r0
    while(m>0){
   1d5e0:	458c      	cmp	ip, r1
        crc16 ^= pData[x];
   1d5e2:	f101 0010 	add.w	r0, r1, #16
   1d5e6:	4468      	add	r0, sp
            if(crc16 & 1)
   1d5e8:	b29b      	uxth	r3, r3
    while(m>0){
   1d5ea:	d1c5      	bne.n	1d578 <module_k9lx_data_integrity+0x40>
    *crc_h = (crc16 >>8 ) & 0xFF;
   1d5ec:	0a1a      	lsrs	r2, r3, #8
    *crc_l = crc16 & 0xFF;
   1d5ee:	b2db      	uxtb	r3, r3
        if (crc_l == lBuf[len-2] && crc_h == lBuf[len-1])
   1d5f0:	f104 0110 	add.w	r1, r4, #16
   1d5f4:	eb0d 0401 	add.w	r4, sp, r1
   1d5f8:	f814 1c12 	ldrb.w	r1, [r4, #-18]
   1d5fc:	4299      	cmp	r1, r3
   1d5fe:	d10e      	bne.n	1d61e <module_k9lx_data_integrity+0xe6>
   1d600:	f814 0c11 	ldrb.w	r0, [r4, #-17]
   1d604:	1a80      	subs	r0, r0, r2
   1d606:	bf18      	it	ne
   1d608:	f04f 30ff 	movne.w	r0, #4294967295
            return -1;
        }
    }
    /** unknown error */
    return -2;
}
   1d60c:	b004      	add	sp, #16
   1d60e:	bd10      	pop	{r4, pc}
    for (uint8_t i=0; i<len; i++){
   1d610:	4608      	mov	r0, r1
        module_k9lx_crc16 (&crc_h, &crc_l, lBuf, len-2);
   1d612:	f04f 0cfe 	mov.w	ip, #254	@ 0xfe
   1d616:	e7aa      	b.n	1d56e <module_k9lx_data_integrity+0x36>
    while(m>0){
   1d618:	23ff      	movs	r3, #255	@ 0xff
   1d61a:	461a      	mov	r2, r3
   1d61c:	e7e8      	b.n	1d5f0 <module_k9lx_data_integrity+0xb8>
        return -1;
   1d61e:	f04f 30ff 	mov.w	r0, #4294967295
   1d622:	e7f3      	b.n	1d60c <module_k9lx_data_integrity+0xd4>
   1d624:	ffffa001 	.word	0xffffa001

0001d628 <module_k9lx_read_reg>:

    return ret;
}

static int8_t module_k9lx_read_reg(uint8_t port, uint16_t reg_add, uint8_t reg_num, uint8_t *pData)
{
   1d628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d62a:	b08b      	sub	sp, #44	@ 0x2c
   1d62c:	461e      	mov	r6, r3
    /** Prep for MAX SPI messages */
    uint8_t cmd[CMD_LENGTH] = {0};
   1d62e:	2300      	movs	r3, #0
    uint8_t rxData[K9LX_BUFFER_LENGTH] = {0};
   1d630:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   1d634:	4615      	mov	r5, r2
    uint8_t rxLen = 0;
    uint8_t crc_h, crc_l = 0;

    cmd[0] = K9LX_ADDR;
    cmd[1] = K9LX_READ_REG_CMD;
    cmd[2] = (reg_add >> 8) & 0xFF;
   1d636:	ba49      	rev16	r1, r1
    uint8_t rxData[K9LX_BUFFER_LENGTH] = {0};
   1d638:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1d63c:	f88d 3014 	strb.w	r3, [sp, #20]
    cmd[0] = K9LX_ADDR;
   1d640:	f240 3301 	movw	r3, #769	@ 0x301
    cmd[2] = (reg_add >> 8) & 0xFF;
   1d644:	f8ad 1002 	strh.w	r1, [sp, #2]
{
   1d648:	4604      	mov	r4, r0
    cmd[0] = K9LX_ADDR;
   1d64a:	f8ad 3000 	strh.w	r3, [sp]
    while(m>0){
   1d64e:	466a      	mov	r2, sp
    cmd[3] = reg_add & 0xFF;
    cmd[4] = 0x00;
    cmd[5] = reg_num ; // read number of registers
   1d650:	f88d 5005 	strb.w	r5, [sp, #5]
            if(crc16 & 1)
   1d654:	f5a3 43c6 	sub.w	r3, r3, #25344	@ 0x6300
   1d658:	f10d 0006 	add.w	r0, sp, #6
    uint16_t crc16 = 0xFFFF;
   1d65c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
        crc16 ^= pData[x];
   1d660:	f812 cb01 	ldrb.w	ip, [r2], #1
   1d664:	ea8c 0c01 	eor.w	ip, ip, r1
            if(crc16 & 1)
   1d668:	f34c 0100 	sbfx	r1, ip, #0, #1
   1d66c:	4019      	ands	r1, r3
   1d66e:	ea81 015c 	eor.w	r1, r1, ip, lsr #1
   1d672:	f341 0c00 	sbfx	ip, r1, #0, #1
   1d676:	ea0c 0c03 	and.w	ip, ip, r3
                crc16 >>= 1;
   1d67a:	f3c1 014e 	ubfx	r1, r1, #1, #15
            if(crc16 & 1)
   1d67e:	ea8c 0c01 	eor.w	ip, ip, r1
   1d682:	f34c 0100 	sbfx	r1, ip, #0, #1
   1d686:	4019      	ands	r1, r3
                crc16 >>= 1;
   1d688:	f3cc 0c4e 	ubfx	ip, ip, #1, #15
            if(crc16 & 1)
   1d68c:	ea81 010c 	eor.w	r1, r1, ip
   1d690:	f341 0c00 	sbfx	ip, r1, #0, #1
   1d694:	ea0c 0c03 	and.w	ip, ip, r3
                crc16 >>= 1;
   1d698:	f3c1 014e 	ubfx	r1, r1, #1, #15
            if(crc16 & 1)
   1d69c:	ea8c 0c01 	eor.w	ip, ip, r1
   1d6a0:	f34c 0100 	sbfx	r1, ip, #0, #1
   1d6a4:	4019      	ands	r1, r3
                crc16 >>= 1;
   1d6a6:	f3cc 0c4e 	ubfx	ip, ip, #1, #15
            if(crc16 & 1)
   1d6aa:	ea81 010c 	eor.w	r1, r1, ip
   1d6ae:	f341 0c00 	sbfx	ip, r1, #0, #1
   1d6b2:	ea0c 0c03 	and.w	ip, ip, r3
                crc16 >>= 1;
   1d6b6:	f3c1 014e 	ubfx	r1, r1, #1, #15
            if(crc16 & 1)
   1d6ba:	ea8c 0c01 	eor.w	ip, ip, r1
   1d6be:	f34c 0100 	sbfx	r1, ip, #0, #1
   1d6c2:	4019      	ands	r1, r3
                crc16 >>= 1;
   1d6c4:	f3cc 0c4e 	ubfx	ip, ip, #1, #15
            if(crc16 & 1)
   1d6c8:	ea81 010c 	eor.w	r1, r1, ip
   1d6cc:	f341 0c00 	sbfx	ip, r1, #0, #1
   1d6d0:	ea0c 0c03 	and.w	ip, ip, r3
                crc16 >>= 1;
   1d6d4:	f3c1 014e 	ubfx	r1, r1, #1, #15
            if(crc16 & 1)
   1d6d8:	ea8c 0101 	eor.w	r1, ip, r1
    while(m>0){
   1d6dc:	4282      	cmp	r2, r0
            if(crc16 & 1)
   1d6de:	b289      	uxth	r1, r1
    while(m>0){
   1d6e0:	d1be      	bne.n	1d660 <module_k9lx_read_reg+0x38>

    /** calculate CRC16 */
    module_k9lx_crc16 (&crc_h, &crc_l, cmd, 6);

    /** MODBUS */
    cmd[6] = crc_l;
   1d6e2:	f8ad 1006 	strh.w	r1, [sp, #6]
    cmd[7] = crc_h;

    /** NON-RTOS*/
    MAX14830_UART_Write_direct(port, cmd, CMD_LENGTH);
   1d6e6:	2208      	movs	r2, #8
   1d6e8:	4669      	mov	r1, sp
   1d6ea:	4620      	mov	r0, r4
   1d6ec:	f7f5 fd78 	bl	131e0 <MAX14830_UART_Write_direct>

    uint8_t len = 0;
    uint8_t rData[16] = {0};
   1d6f0:	2100      	movs	r1, #0

    if (reg_num == 2)
   1d6f2:	2d02      	cmp	r5, #2
    uint8_t rData[16] = {0};
   1d6f4:	e9cd 1106 	strd	r1, r1, [sp, #24]
   1d6f8:	e9cd 1108 	strd	r1, r1, [sp, #32]
    if (reg_num == 2)
   1d6fc:	d026      	beq.n	1d74c <module_k9lx_read_reg+0x124>
                rxData[i+rxLen] = rData[i];
            }
            rxLen += len;
        }
    }
    else if (reg_num == 4)
   1d6fe:	2d04      	cmp	r5, #4
   1d700:	d00e      	beq.n	1d720 <module_k9lx_read_reg+0xf8>
    /* Reading from artemis_max14830 functions */
    //artemis_max14830_UART_Write(port, cmd, CMD_LENGTH);
    //artemis_max14830_UART_Read(port, rxData, &rxLen);

    // check data integrity
    int8_t ret = module_k9lx_data_integrity (rxData,rxLen);
   1d702:	a802      	add	r0, sp, #8
   1d704:	f7ff ff18 	bl	1d538 <module_k9lx_data_integrity>
   1d708:	4604      	mov	r4, r0
            //ARTEMIS_DEBUG_PRINTF("%d ", pData[i]);
        }
    }
    else
    {
        ARTEMIS_DEBUG_PRINTF("K9lX:: Received: ERROR (%d) at keller\n", ret);
   1d70a:	4621      	mov	r1, r4
   1d70c:	4822      	ldr	r0, [pc, #136]	@ (1d798 <module_k9lx_read_reg+0x170>)
   1d70e:	f7f3 fcab 	bl	11068 <am_util_stdio_printf>
   1d712:	4821      	ldr	r0, [pc, #132]	@ (1d798 <module_k9lx_read_reg+0x170>)
   1d714:	4621      	mov	r1, r4
   1d716:	f000 fc2f 	bl	1df78 <datalogger_log_debug>
    }
    return ret;
}
   1d71a:	4620      	mov	r0, r4
   1d71c:	b00b      	add	sp, #44	@ 0x2c
   1d71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t rxLen = 0;
   1d720:	460d      	mov	r5, r1
            len = MAX14830_UART_Read_direct (port, rData);
   1d722:	a906      	add	r1, sp, #24
   1d724:	4620      	mov	r0, r4
   1d726:	f7f5 fddf 	bl	132e8 <MAX14830_UART_Read_direct>
            for (uint8_t i=0; i<len; i++)
   1d72a:	f010 07ff 	ands.w	r7, r0, #255	@ 0xff
   1d72e:	d0f8      	beq.n	1d722 <module_k9lx_read_reg+0xfa>
                rxData[i+rxLen] = rData[i];
   1d730:	463a      	mov	r2, r7
   1d732:	ab02      	add	r3, sp, #8
            rxLen += len;
   1d734:	442f      	add	r7, r5
                rxData[i+rxLen] = rData[i];
   1d736:	a906      	add	r1, sp, #24
   1d738:	1958      	adds	r0, r3, r5
            rxLen += len;
   1d73a:	b2fd      	uxtb	r5, r7
                rxData[i+rxLen] = rData[i];
   1d73c:	f7ef f9f8 	bl	cb30 <memcpy>
        while (rxLen != 13)
   1d740:	2d0d      	cmp	r5, #13
            len = MAX14830_UART_Read_direct (port, rData);
   1d742:	a906      	add	r1, sp, #24
   1d744:	4620      	mov	r0, r4
        while (rxLen != 13)
   1d746:	d1ee      	bne.n	1d726 <module_k9lx_read_reg+0xfe>
   1d748:	2708      	movs	r7, #8
   1d74a:	e014      	b.n	1d776 <module_k9lx_read_reg+0x14e>
    uint8_t rxLen = 0;
   1d74c:	460d      	mov	r5, r1
            len = MAX14830_UART_Read_direct (port, rData);
   1d74e:	a906      	add	r1, sp, #24
   1d750:	4620      	mov	r0, r4
   1d752:	f7f5 fdc9 	bl	132e8 <MAX14830_UART_Read_direct>
            for (uint8_t i=0; i<len; i++)
   1d756:	f010 07ff 	ands.w	r7, r0, #255	@ 0xff
   1d75a:	d0f8      	beq.n	1d74e <module_k9lx_read_reg+0x126>
                rxData[i+rxLen] = rData[i];
   1d75c:	463a      	mov	r2, r7
   1d75e:	ab02      	add	r3, sp, #8
            rxLen += len;
   1d760:	442f      	add	r7, r5
                rxData[i+rxLen] = rData[i];
   1d762:	a906      	add	r1, sp, #24
   1d764:	1958      	adds	r0, r3, r5
            rxLen += len;
   1d766:	b2fd      	uxtb	r5, r7
                rxData[i+rxLen] = rData[i];
   1d768:	f7ef f9e2 	bl	cb30 <memcpy>
        while (rxLen != 9)
   1d76c:	2d09      	cmp	r5, #9
            len = MAX14830_UART_Read_direct (port, rData);
   1d76e:	a906      	add	r1, sp, #24
   1d770:	4620      	mov	r0, r4
        while (rxLen != 9)
   1d772:	d1ee      	bne.n	1d752 <module_k9lx_read_reg+0x12a>
   1d774:	2704      	movs	r7, #4
    int8_t ret = module_k9lx_data_integrity (rxData,rxLen);
   1d776:	4629      	mov	r1, r5
   1d778:	a802      	add	r0, sp, #8
   1d77a:	f7ff fedd 	bl	1d538 <module_k9lx_data_integrity>
    if (ret == 0 && rxLen > 0)
   1d77e:	4604      	mov	r4, r0
   1d780:	2800      	cmp	r0, #0
   1d782:	d1c2      	bne.n	1d70a <module_k9lx_read_reg+0xe2>
            pData[i] = rxData[i+3];
   1d784:	463a      	mov	r2, r7
   1d786:	f10d 010b 	add.w	r1, sp, #11
   1d78a:	4630      	mov	r0, r6
   1d78c:	f7ef f9d0 	bl	cb30 <memcpy>
}
   1d790:	4620      	mov	r0, r4
   1d792:	b00b      	add	sp, #44	@ 0x2c
   1d794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d796:	bf00      	nop
   1d798:	00030230 	.word	0x00030230
   1d79c:	00000000 	.word	0x00000000

0001d7a0 <K9lx_init>:
{
   1d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pK9lx->device.uart.port = p->port;
   1d7a4:	4c74      	ldr	r4, [pc, #464]	@ (1d978 <K9lx_init+0x1d8>)
   1d7a6:	7802      	ldrb	r2, [r0, #0]
{
   1d7a8:	b089      	sub	sp, #36	@ 0x24
    pK9lx->device.uart.port = p->port;
   1d7aa:	7222      	strb	r2, [r4, #8]
{
   1d7ac:	4603      	mov	r3, r0
    pK9lx->device.power.pin_number = p->pin_number;
   1d7ae:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    pK9lx->device.uart.baudrate = p->baudrate;
   1d7b2:	685b      	ldr	r3, [r3, #4]
    am_hal_gpio_pinconfig(pK9lx->device.power.pin_number, *pK9lx->device.power.pin);
   1d7b4:	6811      	ldr	r1, [r2, #0]
    pK9lx->device.uart.baudrate = p->baudrate;
   1d7b6:	60e3      	str	r3, [r4, #12]
    pK9lx->device.power.pin_number = p->pin_number;
   1d7b8:	e9c4 2000 	strd	r2, r0, [r4]
    am_hal_gpio_pinconfig(pK9lx->device.power.pin_number, *pK9lx->device.power.pin);
   1d7bc:	f001 ff30 	bl	1f620 <am_hal_gpio_pinconfig>
    MAX14830_Set_baudrate(pK9lx->device.uart.port, pK9lx->device.uart.baudrate);
   1d7c0:	68e1      	ldr	r1, [r4, #12]
   1d7c2:	7a20      	ldrb	r0, [r4, #8]
   1d7c4:	f7f5 fc4e 	bl	13064 <MAX14830_Set_baudrate>
    am_hal_gpio_output_clear(pK9lx->device.power.pin);
   1d7c8:	6823      	ldr	r3, [r4, #0]
   1d7ca:	486c      	ldr	r0, [pc, #432]	@ (1d97c <K9lx_init+0x1dc>)
   1d7cc:	08da      	lsrs	r2, r3, #3
   1d7ce:	2101      	movs	r1, #1
   1d7d0:	f002 0204 	and.w	r2, r2, #4
   1d7d4:	f003 031f 	and.w	r3, r3, #31
   1d7d8:	fa01 f303 	lsl.w	r3, r1, r3
   1d7dc:	5013      	str	r3, [r2, r0]
    am_util_delay_ms(500);
   1d7de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
   1d7e2:	f7f2 fd8b 	bl	102fc <am_util_delay_ms>

static void module_k9lx_device_info(uint8_t port)
{
    uint8_t firmware[4] = {0};
   1d7e6:	2300      	movs	r3, #0

    int32_t pressure_p = 0;

    int8_t ret = 0;

    ARTEMIS_DEBUG_PRINTF("\nK9LX Pressure Sensor\n");
   1d7e8:	4865      	ldr	r0, [pc, #404]	@ (1d980 <K9lx_init+0x1e0>)
    uint8_t pt[8] = {0};
   1d7ea:	9307      	str	r3, [sp, #28]
    uint8_t serial[4] = {0};
   1d7ec:	e9cd 3303 	strd	r3, r3, [sp, #12]
    uint8_t pt[8] = {0};
   1d7f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    module_k9lx_device_info(pK9lx->device.uart.port);
   1d7f4:	7a27      	ldrb	r7, [r4, #8]
    ARTEMIS_DEBUG_PRINTF("\nK9LX Pressure Sensor\n");
   1d7f6:	f7f3 fc37 	bl	11068 <am_util_stdio_printf>
   1d7fa:	4861      	ldr	r0, [pc, #388]	@ (1d980 <K9lx_init+0x1e0>)
   1d7fc:	f000 fbbc 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("**************************************\n");
   1d800:	4860      	ldr	r0, [pc, #384]	@ (1d984 <K9lx_init+0x1e4>)
   1d802:	f7f3 fc31 	bl	11068 <am_util_stdio_printf>
   1d806:	485f      	ldr	r0, [pc, #380]	@ (1d984 <K9lx_init+0x1e4>)
   1d808:	f000 fbb6 	bl	1df78 <datalogger_log_debug>

    /* Get the Firmware version : 5.20.12.28 */
    ARTEMIS_DEBUG_PRINTF("\tFirmware Ver\t: ");
   1d80c:	485e      	ldr	r0, [pc, #376]	@ (1d988 <K9lx_init+0x1e8>)
   1d80e:	f7f3 fc2b 	bl	11068 <am_util_stdio_printf>
   1d812:	485d      	ldr	r0, [pc, #372]	@ (1d988 <K9lx_init+0x1e8>)
   1d814:	f000 fbb0 	bl	1df78 <datalogger_log_debug>
    ret = module_k9lx_read_reg(port, K9LX_FIRM_VER0, 2, firmware);
   1d818:	ab03      	add	r3, sp, #12
   1d81a:	2202      	movs	r2, #2
   1d81c:	f240 210e 	movw	r1, #526	@ 0x20e
   1d820:	4638      	mov	r0, r7
   1d822:	f7ff ff01 	bl	1d628 <module_k9lx_read_reg>
    if (ret == 0)
   1d826:	2800      	cmp	r0, #0
   1d828:	f000 808f 	beq.w	1d94a <K9lx_init+0x1aa>
   1d82c:	f10d 0910 	add.w	r9, sp, #16
            ARTEMIS_DEBUG_PRINTF("%u.", firmware[i]);
        }
    }

    /* Get the Serial number : ? */
    ARTEMIS_DEBUG_PRINTF("\n\tSerial Number\t: ");
   1d830:	4856      	ldr	r0, [pc, #344]	@ (1d98c <K9lx_init+0x1ec>)
   1d832:	f7f3 fc19 	bl	11068 <am_util_stdio_printf>
   1d836:	4855      	ldr	r0, [pc, #340]	@ (1d98c <K9lx_init+0x1ec>)
   1d838:	f000 fb9e 	bl	1df78 <datalogger_log_debug>
    ret = module_k9lx_read_reg(port, K9LX_SER_NUM_H, 2, serial);
   1d83c:	464b      	mov	r3, r9
   1d83e:	2202      	movs	r2, #2
   1d840:	f240 2102 	movw	r1, #514	@ 0x202
   1d844:	4638      	mov	r0, r7
   1d846:	f7ff feef 	bl	1d628 <module_k9lx_read_reg>
    if (ret == 0)
   1d84a:	b948      	cbnz	r0, 1d860 <K9lx_init+0xc0>
    {
        for (uint8_t i=0; i<4; i++)
        {
            serial_nr |= (serial[i] << (8*(3-i)) );
   1d84c:	9d04      	ldr	r5, [sp, #16]
        }
        ARTEMIS_DEBUG_PRINTF("%u\n", serial_nr);
   1d84e:	4850      	ldr	r0, [pc, #320]	@ (1d990 <K9lx_init+0x1f0>)
   1d850:	ba2d      	rev	r5, r5
   1d852:	4629      	mov	r1, r5
   1d854:	f7f3 fc08 	bl	11068 <am_util_stdio_printf>
   1d858:	484d      	ldr	r0, [pc, #308]	@ (1d990 <K9lx_init+0x1f0>)
   1d85a:	4629      	mov	r1, r5
   1d85c:	f000 fb8c 	bl	1df78 <datalogger_log_debug>
    //    }
    //    ARTEMIS_DEBUG_PRINTF("%0.5f\n", temperature_c.f);
    //}

    /* 32-bit floating point , access P and T in one cycle 8 bytes */
    ARTEMIS_DEBUG_PRINTF("\tPressure\t: ");
   1d860:	484c      	ldr	r0, [pc, #304]	@ (1d994 <K9lx_init+0x1f4>)
   1d862:	f7f3 fc01 	bl	11068 <am_util_stdio_printf>
   1d866:	484b      	ldr	r0, [pc, #300]	@ (1d994 <K9lx_init+0x1f4>)
   1d868:	f000 fb86 	bl	1df78 <datalogger_log_debug>
    ret = module_k9lx_read_reg(port, K9LX_FL1_P1, 4, pt);
   1d86c:	ab06      	add	r3, sp, #24
   1d86e:	2204      	movs	r2, #4
   1d870:	f44f 7180 	mov.w	r1, #256	@ 0x100
   1d874:	4638      	mov	r0, r7
   1d876:	f7ff fed7 	bl	1d628 <module_k9lx_read_reg>
    if (ret == 0)
   1d87a:	2800      	cmp	r0, #0
   1d87c:	d134      	bne.n	1d8e8 <K9lx_init+0x148>
    {
        for (uint8_t i=0; i<4; i++)
        {
            pressure_bar.u[3-i] = pt[i];
        }
        ARTEMIS_DEBUG_PRINTF("%0.5f bar", pressure_bar.f);
   1d87e:	9806      	ldr	r0, [sp, #24]
   1d880:	ba00      	rev	r0, r0
   1d882:	f7ee fda1 	bl	c3c8 <__aeabi_f2d>
   1d886:	4680      	mov	r8, r0
   1d888:	4689      	mov	r9, r1
   1d88a:	460b      	mov	r3, r1
   1d88c:	4642      	mov	r2, r8
   1d88e:	4842      	ldr	r0, [pc, #264]	@ (1d998 <K9lx_init+0x1f8>)
   1d890:	f7f3 fbea 	bl	11068 <am_util_stdio_printf>
   1d894:	4642      	mov	r2, r8
   1d896:	464b      	mov	r3, r9
   1d898:	483f      	ldr	r0, [pc, #252]	@ (1d998 <K9lx_init+0x1f8>)
   1d89a:	f000 fb6d 	bl	1df78 <datalogger_log_debug>
        ARTEMIS_DEBUG_PRINTF("\n\tTemperature\t: ");
   1d89e:	483f      	ldr	r0, [pc, #252]	@ (1d99c <K9lx_init+0x1fc>)
   1d8a0:	f7f3 fbe2 	bl	11068 <am_util_stdio_printf>
   1d8a4:	483d      	ldr	r0, [pc, #244]	@ (1d99c <K9lx_init+0x1fc>)
   1d8a6:	f000 fb67 	bl	1df78 <datalogger_log_debug>
        for (uint8_t i=4; i<8; i++)
        {
            temperature_c.u[7-i] = pt[i];
        }
        ARTEMIS_DEBUG_PRINTF("%0.3f °C, %0.3f °F", temperature_c.f, ((9.0/5.0) * temperature_c.f) + 32.0);
   1d8aa:	9807      	ldr	r0, [sp, #28]
   1d8ac:	ba00      	rev	r0, r0
   1d8ae:	f7ee fd8b 	bl	c3c8 <__aeabi_f2d>
   1d8b2:	a32f      	add	r3, pc, #188	@ (adr r3, 1d970 <K9lx_init+0x1d0>)
   1d8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d8b8:	4680      	mov	r8, r0
   1d8ba:	4689      	mov	r9, r1
   1d8bc:	f7ee fddc 	bl	c478 <__aeabi_dmul>
   1d8c0:	4b37      	ldr	r3, [pc, #220]	@ (1d9a0 <K9lx_init+0x200>)
   1d8c2:	2200      	movs	r2, #0
   1d8c4:	f7ee fc22 	bl	c10c <__adddf3>
   1d8c8:	4682      	mov	sl, r0
   1d8ca:	468b      	mov	fp, r1
   1d8cc:	4642      	mov	r2, r8
   1d8ce:	464b      	mov	r3, r9
   1d8d0:	e9cd ab00 	strd	sl, fp, [sp]
   1d8d4:	4833      	ldr	r0, [pc, #204]	@ (1d9a4 <K9lx_init+0x204>)
   1d8d6:	f7f3 fbc7 	bl	11068 <am_util_stdio_printf>
   1d8da:	e9cd ab00 	strd	sl, fp, [sp]
   1d8de:	4831      	ldr	r0, [pc, #196]	@ (1d9a4 <K9lx_init+0x204>)
   1d8e0:	4642      	mov	r2, r8
   1d8e2:	464b      	mov	r3, r9
   1d8e4:	f000 fb48 	bl	1df78 <datalogger_log_debug>
    }

    ARTEMIS_DEBUG_PRINTF("\n\tPressure\t: ");
   1d8e8:	482f      	ldr	r0, [pc, #188]	@ (1d9a8 <K9lx_init+0x208>)
   1d8ea:	f7f3 fbbd 	bl	11068 <am_util_stdio_printf>
   1d8ee:	482e      	ldr	r0, [pc, #184]	@ (1d9a8 <K9lx_init+0x208>)
   1d8f0:	f000 fb42 	bl	1df78 <datalogger_log_debug>
    ret = module_k9lx_read_reg(port, K9LX_INT32_P1, 2, pr);
   1d8f4:	2202      	movs	r2, #2
   1d8f6:	2122      	movs	r1, #34	@ 0x22
   1d8f8:	ab05      	add	r3, sp, #20
   1d8fa:	4638      	mov	r0, r7
   1d8fc:	f7ff fe94 	bl	1d628 <module_k9lx_read_reg>
    if (ret == 0)
   1d900:	b948      	cbnz	r0, 1d916 <K9lx_init+0x176>
    {
        for (uint8_t i=0; i<4; i++)
        {
            //pressure_pascal.u[3-i] = pr[i];
            pressure_p |= pr[i] << (8*(3-i));
   1d902:	9d05      	ldr	r5, [sp, #20]
        }
        ARTEMIS_DEBUG_PRINTF("%d pascal", pressure_p);
   1d904:	4829      	ldr	r0, [pc, #164]	@ (1d9ac <K9lx_init+0x20c>)
   1d906:	ba2d      	rev	r5, r5
   1d908:	4629      	mov	r1, r5
   1d90a:	f7f3 fbad 	bl	11068 <am_util_stdio_printf>
   1d90e:	4827      	ldr	r0, [pc, #156]	@ (1d9ac <K9lx_init+0x20c>)
   1d910:	4629      	mov	r1, r5
   1d912:	f000 fb31 	bl	1df78 <datalogger_log_debug>
    }

    ARTEMIS_DEBUG_PRINTF("\n");
   1d916:	4826      	ldr	r0, [pc, #152]	@ (1d9b0 <K9lx_init+0x210>)
   1d918:	f7f3 fba6 	bl	11068 <am_util_stdio_printf>
   1d91c:	4824      	ldr	r0, [pc, #144]	@ (1d9b0 <K9lx_init+0x210>)
   1d91e:	f000 fb2b 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("K9lx Pressure Sensor is initialized\n\n");
   1d922:	4824      	ldr	r0, [pc, #144]	@ (1d9b4 <K9lx_init+0x214>)
   1d924:	f7f3 fba0 	bl	11068 <am_util_stdio_printf>
   1d928:	4822      	ldr	r0, [pc, #136]	@ (1d9b4 <K9lx_init+0x214>)
   1d92a:	f000 fb25 	bl	1df78 <datalogger_log_debug>
    am_hal_gpio_output_set(pK9lx->device.power.pin);
   1d92e:	6823      	ldr	r3, [r4, #0]
   1d930:	4821      	ldr	r0, [pc, #132]	@ (1d9b8 <K9lx_init+0x218>)
   1d932:	08da      	lsrs	r2, r3, #3
   1d934:	2101      	movs	r1, #1
   1d936:	f002 0204 	and.w	r2, r2, #4
   1d93a:	f003 031f 	and.w	r3, r3, #31
   1d93e:	fa01 f303 	lsl.w	r3, r1, r3
   1d942:	5013      	str	r3, [r2, r0]
}
   1d944:	b009      	add	sp, #36	@ 0x24
   1d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ARTEMIS_DEBUG_PRINTF("%u.", firmware[i]);
   1d94a:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 1d9bc <K9lx_init+0x21c>
   1d94e:	ad03      	add	r5, sp, #12
   1d950:	f10d 0910 	add.w	r9, sp, #16
   1d954:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d958:	4640      	mov	r0, r8
   1d95a:	4631      	mov	r1, r6
   1d95c:	f7f3 fb84 	bl	11068 <am_util_stdio_printf>
   1d960:	4631      	mov	r1, r6
   1d962:	4640      	mov	r0, r8
   1d964:	f000 fb08 	bl	1df78 <datalogger_log_debug>
        for (uint8_t i=0; i<4; i++)
   1d968:	454d      	cmp	r5, r9
   1d96a:	d1f3      	bne.n	1d954 <K9lx_init+0x1b4>
   1d96c:	e760      	b.n	1d830 <K9lx_init+0x90>
   1d96e:	bf00      	nop
   1d970:	cccccccd 	.word	0xcccccccd
   1d974:	3ffccccc 	.word	0x3ffccccc
   1d978:	1004ab28 	.word	0x1004ab28
   1d97c:	40010098 	.word	0x40010098
   1d980:	00030258 	.word	0x00030258
   1d984:	0002b34c 	.word	0x0002b34c
   1d988:	00030270 	.word	0x00030270
   1d98c:	00030284 	.word	0x00030284
   1d990:	0002f6c0 	.word	0x0002f6c0
   1d994:	0003029c 	.word	0x0003029c
   1d998:	000302ac 	.word	0x000302ac
   1d99c:	000302b8 	.word	0x000302b8
   1d9a0:	40400000 	.word	0x40400000
   1d9a4:	000302cc 	.word	0x000302cc
   1d9a8:	000302e4 	.word	0x000302e4
   1d9ac:	000302f4 	.word	0x000302f4
   1d9b0:	000305a0 	.word	0x000305a0
   1d9b4:	00030300 	.word	0x00030300
   1d9b8:	40010090 	.word	0x40010090
   1d9bc:	00030298 	.word	0x00030298

0001d9c0 <K9lx_power_on>:
    am_hal_gpio_output_clear(pK9lx->device.power.pin);
   1d9c0:	4b06      	ldr	r3, [pc, #24]	@ (1d9dc <K9lx_power_on+0x1c>)
   1d9c2:	4807      	ldr	r0, [pc, #28]	@ (1d9e0 <K9lx_power_on+0x20>)
   1d9c4:	681b      	ldr	r3, [r3, #0]
   1d9c6:	08da      	lsrs	r2, r3, #3
   1d9c8:	2101      	movs	r1, #1
   1d9ca:	f002 0204 	and.w	r2, r2, #4
   1d9ce:	f003 031f 	and.w	r3, r3, #31
   1d9d2:	fa01 f303 	lsl.w	r3, r1, r3
   1d9d6:	5013      	str	r3, [r2, r0]
}
   1d9d8:	4770      	bx	lr
   1d9da:	bf00      	nop
   1d9dc:	1004ab28 	.word	0x1004ab28
   1d9e0:	40010098 	.word	0x40010098

0001d9e4 <K9lx_power_off>:
    am_hal_gpio_output_set(pK9lx->device.power.pin);
   1d9e4:	4b06      	ldr	r3, [pc, #24]	@ (1da00 <K9lx_power_off+0x1c>)
   1d9e6:	4807      	ldr	r0, [pc, #28]	@ (1da04 <K9lx_power_off+0x20>)
   1d9e8:	681b      	ldr	r3, [r3, #0]
   1d9ea:	08da      	lsrs	r2, r3, #3
   1d9ec:	2101      	movs	r1, #1
   1d9ee:	f002 0204 	and.w	r2, r2, #4
   1d9f2:	f003 031f 	and.w	r3, r3, #31
   1d9f6:	fa01 f303 	lsl.w	r3, r1, r3
   1d9fa:	5013      	str	r3, [r2, r0]
}
   1d9fc:	4770      	bx	lr
   1d9fe:	bf00      	nop
   1da00:	1004ab28 	.word	0x1004ab28
   1da04:	40010090 	.word	0x40010090

0001da08 <toVal>:

uint16_t toVal(const char *pcAsciiStr)
{
    uint16_t iRetVal = 0;
    iRetVal += pcAsciiStr[1] - '0';
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
   1da08:	7802      	ldrb	r2, [r0, #0]
    iRetVal += pcAsciiStr[1] - '0';
   1da0a:	7843      	ldrb	r3, [r0, #1]
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
   1da0c:	2a20      	cmp	r2, #32
    iRetVal += pcAsciiStr[1] - '0';
   1da0e:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
   1da12:	b280      	uxth	r0, r0
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
   1da14:	d005      	beq.n	1da22 <toVal+0x1a>
   1da16:	3a30      	subs	r2, #48	@ 0x30
   1da18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1da1c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
   1da20:	b280      	uxth	r0, r0
    return iRetVal;
}
   1da22:	4770      	bx	lr

0001da24 <mthToIndex>:

uint8_t mthToIndex(const char *pcMon)
{
   1da24:	b570      	push	{r4, r5, r6, lr}
   1da26:	4d08      	ldr	r5, [pc, #32]	@ (1da48 <mthToIndex+0x24>)
   1da28:	4606      	mov	r6, r0
   1da2a:	2401      	movs	r4, #1
    uint8_t idx;
    for (idx = 0; idx < 12; idx++)
    {
        if ( am_util_string_strnicmp(Months[idx], pcMon, 3) == 0 )
   1da2c:	f855 0b04 	ldr.w	r0, [r5], #4
   1da30:	2203      	movs	r2, #3
   1da32:	4631      	mov	r1, r6
   1da34:	f7f3 fb48 	bl	110c8 <am_util_string_strnicmp>
   1da38:	b120      	cbz	r0, 1da44 <mthToIndex+0x20>
    for (idx = 0; idx < 12; idx++)
   1da3a:	3401      	adds	r4, #1
   1da3c:	2c0d      	cmp	r4, #13
   1da3e:	d1f5      	bne.n	1da2c <mthToIndex+0x8>
   1da40:	200c      	movs	r0, #12
        {
            return idx+1;
        }
    }
    return 12;
}
   1da42:	bd70      	pop	{r4, r5, r6, pc}
   1da44:	b2e0      	uxtb	r0, r4
   1da46:	bd70      	pop	{r4, r5, r6, pc}
   1da48:	100023bc 	.word	0x100023bc

0001da4c <am_ctimer_isr>:

void am_ctimer_isr(void)
{
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
   1da4c:	2001      	movs	r0, #1
   1da4e:	f001 bd81 	b.w	1f554 <am_hal_ctimer_int_clear>
   1da52:	bf00      	nop

0001da54 <artemis_rtc_initialize>:
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
}

void artemis_rtc_initialize(void)
{
   1da54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    /* Enable the XT for the RTC */
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
   1da58:	2100      	movs	r1, #0
{
   1da5a:	b084      	sub	sp, #16
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
   1da5c:	2001      	movs	r0, #1
   1da5e:	f001 fbd7 	bl	1f210 <am_hal_clkgen_control>

    /* Select XT for RTC clock source */
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
   1da62:	2000      	movs	r0, #0
   1da64:	f002 ffce 	bl	20a04 <am_hal_rtc_osc_select>

    /* Enable the RTC Oscillator */
    am_hal_rtc_osc_enable();

#if defined(__GNUC__)  ||  defined(__ARMCC_VERSION)  ||  defined(__IAR_SYSTEMS_ICC__)
    hal_time.ui32Hour = toVal(&__TIME__[0]);
   1da68:	4e52      	ldr	r6, [pc, #328]	@ (1dbb4 <artemis_rtc_initialize+0x160>)
   1da6a:	4d53      	ldr	r5, [pc, #332]	@ (1dbb8 <artemis_rtc_initialize+0x164>)
        if ( am_util_string_strnicmp(Months[idx], pcMon, 3) == 0 )
   1da6c:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 1dbbc <artemis_rtc_initialize+0x168>
    am_hal_rtc_time_12hour(false);
   1da70:	2000      	movs	r0, #0
   1da72:	f002 ffe3 	bl	20a3c <am_hal_rtc_time_12hour>
    am_hal_rtc_osc_enable();
   1da76:	f002 ffcd 	bl	20a14 <am_hal_rtc_osc_enable>
    hal_time.ui32Minute = toVal(&__TIME__[3]);
   1da7a:	2305      	movs	r3, #5
   1da7c:	220e      	movs	r2, #14
   1da7e:	e9c6 2307 	strd	r2, r3, [r6, #28]
    hal_time.ui32Second = toVal(&__TIME__[6]);
    hal_time.ui32Hundredths = 00;
   1da82:	2400      	movs	r4, #0
    hal_time.ui32Second = toVal(&__TIME__[6]);
   1da84:	2304      	movs	r3, #4
    hal_time.ui32Hundredths = 00;
   1da86:	e9c6 3409 	strd	r3, r4, [r6, #36]	@ 0x24
   1da8a:	462f      	mov	r7, r5
        if ( am_util_string_strnicmp(Months[idx], pcMon, 3) == 0 )
   1da8c:	f857 0b04 	ldr.w	r0, [r7], #4
   1da90:	2203      	movs	r2, #3
   1da92:	4641      	mov	r1, r8
   1da94:	f7f3 fb18 	bl	110c8 <am_util_string_strnicmp>
   1da98:	2800      	cmp	r0, #0
   1da9a:	d07b      	beq.n	1db94 <artemis_rtc_initialize+0x140>
    for (idx = 0; idx < 12; idx++)
   1da9c:	3401      	adds	r4, #1
   1da9e:	2c0c      	cmp	r4, #12
   1daa0:	d1f4      	bne.n	1da8c <artemis_rtc_initialize+0x38>
   1daa2:	210d      	movs	r1, #13
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
   1daa4:	2216      	movs	r2, #22
   1daa6:	f240 70e9 	movw	r0, #2025	@ 0x7e9
   1daaa:	f7f3 fb35 	bl	11118 <am_util_time_computeDayofWeek>
        if ( am_util_string_strnicmp(Months[idx], pcMon, 3) == 0 )
   1daae:	4f43      	ldr	r7, [pc, #268]	@ (1dbbc <artemis_rtc_initialize+0x168>)
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
   1dab0:	60b0      	str	r0, [r6, #8]
    hal_time.ui32DayOfMonth = toVal(&__DATE__[4]);
   1dab2:	2316      	movs	r3, #22
   1dab4:	61b3      	str	r3, [r6, #24]
    for (idx = 0; idx < 12; idx++)
   1dab6:	2400      	movs	r4, #0
        if ( am_util_string_strnicmp(Months[idx], pcMon, 3) == 0 )
   1dab8:	f855 0b04 	ldr.w	r0, [r5], #4
   1dabc:	2203      	movs	r2, #3
   1dabe:	4639      	mov	r1, r7
   1dac0:	f7f3 fb02 	bl	110c8 <am_util_string_strnicmp>
            return idx+1;
   1dac4:	3401      	adds	r4, #1
   1dac6:	b2e4      	uxtb	r4, r4
        if ( am_util_string_strnicmp(Months[idx], pcMon, 3) == 0 )
   1dac8:	b108      	cbz	r0, 1dace <artemis_rtc_initialize+0x7a>
    for (idx = 0; idx < 12; idx++)
   1daca:	2c0c      	cmp	r4, #12
   1dacc:	d1f4      	bne.n	1dab8 <artemis_rtc_initialize+0x64>
    hal_time.ui32Month = mthToIndex(&__DATE__[0]);
    hal_time.ui32Year = toVal(&__DATE__[9]);
    hal_time.ui32Century = 0;
   1dace:	2500      	movs	r5, #0
   1dad0:	2319      	movs	r3, #25
    hal_time.ui32Month = 11;
    hal_time.ui32Year = 23;
    hal_time.ui32Century = 0;
#endif

    am_hal_rtc_time_set(&hal_time);
   1dad2:	4838      	ldr	r0, [pc, #224]	@ (1dbb4 <artemis_rtc_initialize+0x160>)
    hal_time.ui32Month = mthToIndex(&__DATE__[0]);
   1dad4:	6174      	str	r4, [r6, #20]
    hal_time.ui32Century = 0;
   1dad6:	e9c6 5303 	strd	r5, r3, [r6, #12]
    am_hal_rtc_time_set(&hal_time);
   1dada:	f002 ffb9 	bl	20a50 <am_hal_rtc_time_set>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
   1dade:	4629      	mov	r1, r5
   1dae0:	2002      	movs	r0, #2
   1dae2:	f001 fb95 	bl	1f210 <am_hal_clkgen_control>
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
   1dae6:	4628      	mov	r0, r5
   1dae8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
   1daec:	f001 fcb2 	bl	1f454 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
   1daf0:	4628      	mov	r0, r5
   1daf2:	4933      	ldr	r1, [pc, #204]	@ (1dbc0 <artemis_rtc_initialize+0x16c>)
   1daf4:	f001 fc46 	bl	1f384 <am_hal_ctimer_config>
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 31, 0);
   1daf8:	462b      	mov	r3, r5
   1dafa:	221f      	movs	r2, #31
   1dafc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
   1db00:	4628      	mov	r0, r5
   1db02:	f001 fcbd 	bl	1f480 <am_hal_ctimer_period_set>
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
   1db06:	2001      	movs	r0, #1
   1db08:	f001 fd24 	bl	1f554 <am_hal_ctimer_int_clear>
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
   1db0c:	f44f 7080 	mov.w	r0, #256	@ 0x100
   1db10:	f003 f8f4 	bl	20cfc <am_hal_stimer_int_enable>
    artemis_rtc_timer();

    /* Enable the timer Interrupt */
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
   1db14:	2001      	movs	r0, #1
   1db16:	f001 fd09 	bl	1f52c <am_hal_ctimer_int_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1db1a:	4b2a      	ldr	r3, [pc, #168]	@ (1dbc4 <artemis_rtc_initialize+0x170>)
   1db1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
   1db20:	601a      	str	r2, [r3, #0]

    /* Enable the timer interrupt in the NVIC */
    NVIC_EnableIRQ(CTIMER_IRQn);
    am_hal_interrupt_master_enable();
   1db22:	f001 ff79 	bl	1fa18 <am_hal_interrupt_master_enable>

    /* Enable the timer */
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
   1db26:	f64f 71ff 	movw	r1, #65535	@ 0xffff
   1db2a:	4628      	mov	r0, r5
   1db2c:	f001 fc68 	bl	1f400 <am_hal_ctimer_start>
                            time.month, time.day, time.year, time.hour, time.min, time.sec);
}

bool artemis_rtc_get_time(rtc_time *time)
{
    am_hal_rtc_time_get(&hal_time);
   1db30:	4820      	ldr	r0, [pc, #128]	@ (1dbb4 <artemis_rtc_initialize+0x160>)
   1db32:	f003 f827 	bl	20b84 <am_hal_rtc_time_get>

    if (hal_time.ui32ReadError){
   1db36:	6833      	ldr	r3, [r6, #0]
   1db38:	bb7b      	cbnz	r3, 1db9a <artemis_rtc_initialize+0x146>
    ARTEMIS_DEBUG_PRINTF("Clock started on %02d.%02d.20%02d at %02d:%02d:%02d (local)\n\n",
   1db3a:	7d34      	ldrb	r4, [r6, #20]
   1db3c:	7e37      	ldrb	r7, [r6, #24]
   1db3e:	f8b6 8010 	ldrh.w	r8, [r6, #16]
   1db42:	f896 901c 	ldrb.w	r9, [r6, #28]
   1db46:	f896 a020 	ldrb.w	sl, [r6, #32]
   1db4a:	f896 5024 	ldrb.w	r5, [r6, #36]	@ 0x24
    ARTEMIS_DEBUG_PRINTF("\nRTC Timer\n");
   1db4e:	481e      	ldr	r0, [pc, #120]	@ (1dbc8 <artemis_rtc_initialize+0x174>)
   1db50:	f7f3 fa8a 	bl	11068 <am_util_stdio_printf>
   1db54:	481c      	ldr	r0, [pc, #112]	@ (1dbc8 <artemis_rtc_initialize+0x174>)
   1db56:	f000 fa0f 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("***************************************\n");
   1db5a:	481c      	ldr	r0, [pc, #112]	@ (1dbcc <artemis_rtc_initialize+0x178>)
   1db5c:	f7f3 fa84 	bl	11068 <am_util_stdio_printf>
   1db60:	481a      	ldr	r0, [pc, #104]	@ (1dbcc <artemis_rtc_initialize+0x178>)
   1db62:	f000 fa09 	bl	1df78 <datalogger_log_debug>
    ARTEMIS_DEBUG_PRINTF("Clock started on %02d.%02d.20%02d at %02d:%02d:%02d (local)\n\n",
   1db66:	4643      	mov	r3, r8
   1db68:	463a      	mov	r2, r7
   1db6a:	4621      	mov	r1, r4
   1db6c:	e9cd a501 	strd	sl, r5, [sp, #4]
   1db70:	f8cd 9000 	str.w	r9, [sp]
   1db74:	4816      	ldr	r0, [pc, #88]	@ (1dbd0 <artemis_rtc_initialize+0x17c>)
   1db76:	f7f3 fa77 	bl	11068 <am_util_stdio_printf>
   1db7a:	e9cd a501 	strd	sl, r5, [sp, #4]
   1db7e:	4814      	ldr	r0, [pc, #80]	@ (1dbd0 <artemis_rtc_initialize+0x17c>)
   1db80:	f8cd 9000 	str.w	r9, [sp]
   1db84:	4643      	mov	r3, r8
   1db86:	463a      	mov	r2, r7
   1db88:	4621      	mov	r1, r4
   1db8a:	f000 f9f5 	bl	1df78 <datalogger_log_debug>
}
   1db8e:	b004      	add	sp, #16
   1db90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
   1db94:	1ca1      	adds	r1, r4, #2
   1db96:	b2c9      	uxtb	r1, r1
            return idx+1;
   1db98:	e784      	b.n	1daa4 <artemis_rtc_initialize+0x50>
        ARTEMIS_DEBUG_PRINTF("RTC :: ERROR, hal_time\n");
   1db9a:	480e      	ldr	r0, [pc, #56]	@ (1dbd4 <artemis_rtc_initialize+0x180>)
   1db9c:	f7f3 fa64 	bl	11068 <am_util_stdio_printf>
   1dba0:	480c      	ldr	r0, [pc, #48]	@ (1dbd4 <artemis_rtc_initialize+0x180>)
   1dba2:	f000 f9e9 	bl	1df78 <datalogger_log_debug>
        return false;
   1dba6:	46aa      	mov	sl, r5
   1dba8:	46a9      	mov	r9, r5
   1dbaa:	46a8      	mov	r8, r5
   1dbac:	462f      	mov	r7, r5
   1dbae:	462c      	mov	r4, r5
   1dbb0:	e7cd      	b.n	1db4e <artemis_rtc_initialize+0xfa>
   1dbb2:	bf00      	nop
   1dbb4:	1004ab50 	.word	0x1004ab50
   1dbb8:	100023bc 	.word	0x100023bc
   1dbbc:	0002ff6c 	.word	0x0002ff6c
   1dbc0:	100023b0 	.word	0x100023b0
   1dbc4:	e000e100 	.word	0xe000e100
   1dbc8:	00030340 	.word	0x00030340
   1dbcc:	0003034c 	.word	0x0003034c
   1dbd0:	00030378 	.word	0x00030378
   1dbd4:	00030328 	.word	0x00030328

0001dbd8 <artemis_rtc_get_time>:
{
   1dbd8:	b538      	push	{r3, r4, r5, lr}
    am_hal_rtc_time_get(&hal_time);
   1dbda:	4c15      	ldr	r4, [pc, #84]	@ (1dc30 <artemis_rtc_get_time+0x58>)
{
   1dbdc:	4605      	mov	r5, r0
    am_hal_rtc_time_get(&hal_time);
   1dbde:	4620      	mov	r0, r4
   1dbe0:	f002 ffd0 	bl	20b84 <am_hal_rtc_time_get>
    if (hal_time.ui32ReadError){
   1dbe4:	6823      	ldr	r3, [r4, #0]
   1dbe6:	b9d3      	cbnz	r3, 1dc1e <artemis_rtc_get_time+0x46>
    }

    time->year = (uint16_t) hal_time.ui32Year;
    time->month = (uint8_t) hal_time.ui32Month;
    time->day = (uint8_t) hal_time.ui32DayOfMonth;
   1dbe8:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    time->month = (uint8_t) hal_time.ui32Month;
   1dbec:	f361 0307 	bfi	r3, r1, #0, #8
   1dbf0:	f362 230f 	bfi	r3, r2, #8, #8
    time->hour = (uint8_t) hal_time.ui32Hour;
    time->min = (uint8_t) hal_time.ui32Minute;
   1dbf4:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    time->month = (uint8_t) hal_time.ui32Month;
   1dbf8:	f361 4317 	bfi	r3, r1, #16, #8
   1dbfc:	f362 631f 	bfi	r3, r2, #24, #8
    time->year = (uint16_t) hal_time.ui32Year;
   1dc00:	6921      	ldr	r1, [r4, #16]
    time->month = (uint8_t) hal_time.ui32Month;
   1dc02:	f8c5 3002 	str.w	r3, [r5, #2]
    time->sec = (uint8_t) hal_time.ui32Second;
   1dc06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   1dc08:	71ab      	strb	r3, [r5, #6]
    time->msec = (uint16_t) hal_time.ui32Hundredths / 10 ;
   1dc0a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
   1dc0c:	4a09      	ldr	r2, [pc, #36]	@ (1dc34 <artemis_rtc_get_time+0x5c>)
    //ARTEMIS_DEBUG_PRINTF(" ");
    //ARTEMIS_DEBUG_PRINTF("%d, ", hal_time.ui32DayOfMonth);
    //ARTEMIS_DEBUG_PRINTF("20%02d", hal_time.ui32Year);
    //ARTEMIS_DEBUG_PRINTF("\n");

    if (utc)
   1dc0e:	480a      	ldr	r0, [pc, #40]	@ (1dc38 <artemis_rtc_get_time+0x60>)
    time->year = (uint16_t) hal_time.ui32Year;
   1dc10:	8029      	strh	r1, [r5, #0]
    time->msec = (uint16_t) hal_time.ui32Hundredths / 10 ;
   1dc12:	fba2 2303 	umull	r2, r3, r2, r3
   1dc16:	08db      	lsrs	r3, r3, #3
    if (utc)
   1dc18:	7800      	ldrb	r0, [r0, #0]
    time->msec = (uint16_t) hal_time.ui32Hundredths / 10 ;
   1dc1a:	812b      	strh	r3, [r5, #8]
    }
    else
    {
        return false;
    }
}
   1dc1c:	bd38      	pop	{r3, r4, r5, pc}
        ARTEMIS_DEBUG_PRINTF("RTC :: ERROR, hal_time\n");
   1dc1e:	4807      	ldr	r0, [pc, #28]	@ (1dc3c <artemis_rtc_get_time+0x64>)
   1dc20:	f7f3 fa22 	bl	11068 <am_util_stdio_printf>
   1dc24:	4805      	ldr	r0, [pc, #20]	@ (1dc3c <artemis_rtc_get_time+0x64>)
   1dc26:	f000 f9a7 	bl	1df78 <datalogger_log_debug>
        return false;
   1dc2a:	2000      	movs	r0, #0
}
   1dc2c:	bd38      	pop	{r3, r4, r5, pc}
   1dc2e:	bf00      	nop
   1dc30:	1004ab50 	.word	0x1004ab50
   1dc34:	cccccccd 	.word	0xcccccccd
   1dc38:	1004ab7c 	.word	0x1004ab7c
   1dc3c:	00030328 	.word	0x00030328

0001dc40 <artemis_rtc_gps_calibration>:
    am_hal_rtc_time_set(&hal_time);
    am_hal_rtc_osc_enable();
}

void artemis_rtc_gps_calibration(SensorGps_t *gps_time)
{
   1dc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    rtc_time time = {0};

    time.year = (uint16_t) gps_time->year;
   1dc44:	8a04      	ldrh	r4, [r0, #16]
    time.month = (uint8_t) gps_time->month;
    time.day = (uint8_t) gps_time->day;
   1dc46:	7cc5      	ldrb	r5, [r0, #19]
    time.month = (uint8_t) gps_time->month;
   1dc48:	7c86      	ldrb	r6, [r0, #18]
    time.hour = (uint8_t) gps_time->hour;
   1dc4a:	f890 9014 	ldrb.w	r9, [r0, #20]
    time.min = (uint8_t) gps_time->min;
   1dc4e:	f890 8015 	ldrb.w	r8, [r0, #21]
    time.sec = (uint8_t) gps_time->sec;
   1dc52:	7d87      	ldrb	r7, [r0, #22]
void artemis_rtc_enable(void){
    am_hal_rtc_osc_enable();
}

void artemis_rtc_disable(void){
    am_hal_rtc_osc_disable();
   1dc54:	f002 fee8 	bl	20a28 <am_hal_rtc_osc_disable>
    hal_time.ui32Hour = pTime->hour;
   1dc58:	480a      	ldr	r0, [pc, #40]	@ (1dc84 <artemis_rtc_gps_calibration+0x44>)
    hal_time.ui32Hundredths = 00;
   1dc5a:	2300      	movs	r3, #0
    hal_time.ui32Year = (pTime->year - 2000);
   1dc5c:	f5a4 64fa 	sub.w	r4, r4, #2000	@ 0x7d0
    hal_time.ui32Century = 0;
   1dc60:	e9c0 3403 	strd	r3, r4, [r0, #12]
    hal_time.ui32Hundredths = 00;
   1dc64:	6283      	str	r3, [r0, #40]	@ 0x28
    hal_time.ui32Minute = pTime->min;
   1dc66:	e9c0 9807 	strd	r9, r8, [r0, #28]
    hal_time.ui32Month = pTime->month;
   1dc6a:	e9c0 6505 	strd	r6, r5, [r0, #20]
    hal_time.ui32Second = pTime->sec;
   1dc6e:	6247      	str	r7, [r0, #36]	@ 0x24
    hal_time.ui32Weekday = pTime->day;
   1dc70:	6085      	str	r5, [r0, #8]
    am_hal_rtc_time_set(&hal_time);
   1dc72:	f002 feed 	bl	20a50 <am_hal_rtc_time_set>
    am_hal_rtc_osc_enable();
   1dc76:	f002 fecd 	bl	20a14 <am_hal_rtc_osc_enable>
    utc = true;
   1dc7a:	4b03      	ldr	r3, [pc, #12]	@ (1dc88 <artemis_rtc_gps_calibration+0x48>)
   1dc7c:	2201      	movs	r2, #1
   1dc7e:	701a      	strb	r2, [r3, #0]
}
   1dc80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dc84:	1004ab50 	.word	0x1004ab50
   1dc88:	1004ab7c 	.word	0x1004ab7c

0001dc8c <datalogger_deinit>:
}

void datalogger_deinit(uint8_t iomNo)
{
    artemis_i2c_t *i2c = &module.i2c;
    i2c->iom.module = iomNo;
   1dc8c:	4b02      	ldr	r3, [pc, #8]	@ (1dc98 <datalogger_deinit+0xc>)
{
   1dc8e:	4602      	mov	r2, r0
    artemis_iom_uninitialize(&i2c->iom);
   1dc90:	1d18      	adds	r0, r3, #4
    i2c->iom.module = iomNo;
   1dc92:	721a      	strb	r2, [r3, #8]
    artemis_iom_uninitialize(&i2c->iom);
   1dc94:	f7fd bd2c 	b.w	1b6f0 <artemis_iom_uninitialize>
   1dc98:	10054958 	.word	0x10054958

0001dc9c <datalogger_pressure>:
}

/* for Reading test pressure profile */
void datalogger_pressure(float *pressure)
{
   1dc9c:	b530      	push	{r4, r5, lr}
    char p[9] = {0};
   1dc9e:	2300      	movs	r3, #0
{
   1dca0:	b085      	sub	sp, #20
    uint8_t i=0;

    while (*test_buffer != '\n')
   1dca2:	4d10      	ldr	r5, [pc, #64]	@ (1dce4 <datalogger_pressure+0x48>)
    char p[9] = {0};
   1dca4:	f88d 300c 	strb.w	r3, [sp, #12]
   1dca8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    while (*test_buffer != '\n')
   1dcac:	6829      	ldr	r1, [r5, #0]
   1dcae:	780a      	ldrb	r2, [r1, #0]
   1dcb0:	2a0a      	cmp	r2, #10
{
   1dcb2:	4604      	mov	r4, r0
    while (*test_buffer != '\n')
   1dcb4:	d00b      	beq.n	1dcce <datalogger_pressure+0x32>
    {
        p[i] = *test_buffer++;
   1dcb6:	f103 0010 	add.w	r0, r3, #16
   1dcba:	eb0d 0c00 	add.w	ip, sp, r0
        i++;
   1dcbe:	3301      	adds	r3, #1
        p[i] = *test_buffer++;
   1dcc0:	f80c 2c0c 	strb.w	r2, [ip, #-12]
    while (*test_buffer != '\n')
   1dcc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1dcc8:	2a0a      	cmp	r2, #10
        i++;
   1dcca:	b2db      	uxtb	r3, r3
    while (*test_buffer != '\n')
   1dccc:	d1f3      	bne.n	1dcb6 <datalogger_pressure+0x1a>
    }
    test_buffer++;
   1dcce:	1c4b      	adds	r3, r1, #1

    *pressure = strtof (p, NULL);
   1dcd0:	a801      	add	r0, sp, #4
   1dcd2:	2100      	movs	r1, #0
    test_buffer++;
   1dcd4:	602b      	str	r3, [r5, #0]
    *pressure = strtof (p, NULL);
   1dcd6:	f004 fed9 	bl	22a8c <strtof>
   1dcda:	ed84 0a00 	vstr	s0, [r4]
}
   1dcde:	b005      	add	sp, #20
   1dce0:	bd30      	pop	{r4, r5, pc}
   1dce2:	bf00      	nop
   1dce4:	100023ec 	.word	0x100023ec

0001dce8 <datalogger_filesize>:
    uint8_t len = strlen (filename);
    datalogger_i2c_write(cmd, 1, (uint8_t *)filename, len);
}

int32_t datalogger_filesize(char *filename)
{
   1dce8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1dcec:	b08c      	sub	sp, #48	@ 0x30
    int32_t size = 0;
    uint8_t bytes[4] = {0};
   1dcee:	2400      	movs	r4, #0
{
   1dcf0:	4605      	mov	r5, r0
    uint8_t bytes[4] = {0};
   1dcf2:	9401      	str	r4, [sp, #4]

    uint8_t cmd = LOGGER_FILE_SIZE;
    uint8_t len = strlen (filename);
   1dcf4:	f7ee ffc4 	bl	cc80 <strlen>
    transfer.ui8RepeatCount  = 0;
    transfer.ui32PauseCondition = 0;
    transfer.ui32StatusSetClr = 0;

    //ARTEMIS_DEBUG_HALSTATUS(am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer));
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dcf8:	4e18      	ldr	r6, [pc, #96]	@ (1dd5c <datalogger_filesize+0x74>)
    transfer.eDirection      = AM_HAL_IOM_TX;
   1dcfa:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dcfe:	222a      	movs	r2, #42	@ 0x2a
   1dd00:	2301      	movs	r3, #1
    transfer.ui32NumBytes    = size;
   1dd02:	b2c0      	uxtb	r0, r0
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dd04:	e9cd 2302 	strd	r2, r3, [sp, #8]
    transfer.ui32NumBytes    = size;
   1dd08:	9005      	str	r0, [sp, #20]
    transfer.ui32Instr       = offset;
   1dd0a:	230d      	movs	r3, #13
    transfer.ui32PauseCondition = 0;
   1dd0c:	f04f 0800 	mov.w	r8, #0
   1dd10:	f04f 0900 	mov.w	r9, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd14:	a902      	add	r1, sp, #8
   1dd16:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1dd18:	9304      	str	r3, [sp, #16]
    transfer.bContinue       = false;
   1dd1a:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    transfer.ui32PauseCondition = 0;
   1dd1e:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1dd22:	9507      	str	r5, [sp, #28]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd24:	f002 fa8e 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32NumBytes    = size;
   1dd28:	2204      	movs	r2, #4
    transfer.eDirection      = AM_HAL_IOM_RX;
   1dd2a:	2301      	movs	r3, #1
    transfer.ui32Instr       = offset;
   1dd2c:	e9cd 4403 	strd	r4, r4, [sp, #12]
    transfer.bContinue       = false;
   1dd30:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    transfer.eDirection      = AM_HAL_IOM_RX;
   1dd34:	f88d 3018 	strb.w	r3, [sp, #24]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd38:	6870      	ldr	r0, [r6, #4]
    transfer.ui32NumBytes    = size;
   1dd3a:	9205      	str	r2, [sp, #20]
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1dd3c:	eb0d 0302 	add.w	r3, sp, r2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd40:	a902      	add	r1, sp, #8
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dd42:	242a      	movs	r4, #42	@ 0x2a
    transfer.ui32PauseCondition = 0;
   1dd44:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dd48:	9402      	str	r4, [sp, #8]
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1dd4a:	9308      	str	r3, [sp, #32]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd4c:	f002 fa7a 	bl	20244 <am_hal_iom_blocking_transfer>
    return size;
   1dd50:	9801      	ldr	r0, [sp, #4]
}
   1dd52:	ba00      	rev	r0, r0
   1dd54:	b00c      	add	sp, #48	@ 0x30
   1dd56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1dd5a:	bf00      	nop
   1dd5c:	10054958 	.word	0x10054958

0001dd60 <datalogger_log_debug_init>:
{
   1dd60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    transfer.ui32InstrLen    = offsetlen;
   1dd64:	212a      	movs	r1, #42	@ 0x2a
{
   1dd66:	b093      	sub	sp, #76	@ 0x4c
    transfer.ui32InstrLen    = offsetlen;
   1dd68:	2201      	movs	r2, #1
   1dd6a:	e9cd 1208 	strd	r1, r2, [sp, #32]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd6e:	4f36      	ldr	r7, [pc, #216]	@ (1de48 <datalogger_log_debug_init+0xe8>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1dd70:	4b36      	ldr	r3, [pc, #216]	@ (1de4c <datalogger_log_debug_init+0xec>)
   1dd72:	930d      	str	r3, [sp, #52]	@ 0x34
    transfer.ui32Instr       = offset;
   1dd74:	2208      	movs	r2, #8
   1dd76:	920a      	str	r2, [sp, #40]	@ 0x28
    transfer.ui32NumBytes    = size;
   1dd78:	2202      	movs	r2, #2
    transfer.eDirection      = AM_HAL_IOM_TX;
   1dd7a:	2400      	movs	r4, #0
    transfer.ui32PauseCondition = 0;
   1dd7c:	2300      	movs	r3, #0
    transfer.ui32NumBytes    = size;
   1dd7e:	920b      	str	r2, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd80:	6878      	ldr	r0, [r7, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1dd82:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.ui32PauseCondition = 0;
   1dd86:	2200      	movs	r2, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd88:	a908      	add	r1, sp, #32
    transfer.ui32PauseCondition = 0;
   1dd8a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
    transfer.bContinue       = false;
   1dd8e:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
        am_util_stdio_sprintf(lFile,"%s%04d", "LCP_LOG_", fileNr);
   1dd92:	4e2f      	ldr	r6, [pc, #188]	@ (1de50 <datalogger_log_debug_init+0xf0>)
   1dd94:	4d2f      	ldr	r5, [pc, #188]	@ (1de54 <datalogger_log_debug_init+0xf4>)
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dd96:	f002 fa55 	bl	20244 <am_hal_iom_blocking_transfer>
    char ext[5] = ".txt";
   1dd9a:	4b2f      	ldr	r3, [pc, #188]	@ (1de58 <datalogger_log_debug_init+0xf8>)
   1dd9c:	9301      	str	r3, [sp, #4]
   1dd9e:	f88d 4008 	strb.w	r4, [sp, #8]
        am_util_stdio_sprintf(lFile,"%s%04d", "LCP_LOG_", fileNr);
   1dda2:	b2a3      	uxth	r3, r4
   1dda4:	4632      	mov	r2, r6
   1dda6:	4629      	mov	r1, r5
   1dda8:	a803      	add	r0, sp, #12
   1ddaa:	f7f3 f94f 	bl	1104c <am_util_stdio_sprintf>
        strcat(lFile, ext);
   1ddae:	a901      	add	r1, sp, #4
   1ddb0:	a803      	add	r0, sp, #12
   1ddb2:	f006 fb3f 	bl	24434 <strcat>
        size = datalogger_filesize(lFile);
   1ddb6:	a803      	add	r0, sp, #12
   1ddb8:	f7ff ff96 	bl	1dce8 <datalogger_filesize>
        if (size < 0)
   1ddbc:	2800      	cmp	r0, #0
   1ddbe:	f104 0401 	add.w	r4, r4, #1
   1ddc2:	daee      	bge.n	1dda2 <datalogger_log_debug_init+0x42>
                lcp_file[i] = lFile[i];
   1ddc4:	f10d 0c0c 	add.w	ip, sp, #12
   1ddc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1ddcc:	4d23      	ldr	r5, [pc, #140]	@ (1de5c <datalogger_log_debug_init+0xfc>)
   1ddce:	462c      	mov	r4, r5
   1ddd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            am_util_stdio_printf("\n<< LCP Log file %s being created >>\n", lcp_file);
   1ddd2:	4629      	mov	r1, r5
                lcp_file[i] = lFile[i];
   1ddd4:	f8dc 3000 	ldr.w	r3, [ip]
            am_util_stdio_printf("\n<< LCP Log file %s being created >>\n", lcp_file);
   1ddd8:	4821      	ldr	r0, [pc, #132]	@ (1de60 <datalogger_log_debug_init+0x100>)
                lcp_file[i] = lFile[i];
   1ddda:	7023      	strb	r3, [r4, #0]
            am_util_stdio_printf("\n<< LCP Log file %s being created >>\n", lcp_file);
   1dddc:	f7f3 f944 	bl	11068 <am_util_stdio_printf>
    uint8_t len = strlen(filename);
   1dde0:	4628      	mov	r0, r5
   1dde2:	f7ee ff4d 	bl	cc80 <strlen>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dde6:	222a      	movs	r2, #42	@ 0x2a
   1dde8:	2301      	movs	r3, #1
    transfer.eDirection      = AM_HAL_IOM_TX;
   1ddea:	2400      	movs	r4, #0
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1ddec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    transfer.ui32NumBytes    = size;
   1ddf0:	900b      	str	r0, [sp, #44]	@ 0x2c
    transfer.ui32PauseCondition = 0;
   1ddf2:	f04f 0800 	mov.w	r8, #0
   1ddf6:	f04f 0900 	mov.w	r9, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ddfa:	a908      	add	r1, sp, #32
    transfer.ui32Instr       = offset;
   1ddfc:	2306      	movs	r3, #6
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ddfe:	6878      	ldr	r0, [r7, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1de00:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1de04:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    transfer.ui32Instr       = offset;
   1de08:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1de0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1de0e:	950d      	str	r5, [sp, #52]	@ 0x34
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1de10:	f002 fa18 	bl	20244 <am_hal_iom_blocking_transfer>
    uint8_t data = 0x00;
   1de14:	f88d 4003 	strb.w	r4, [sp, #3]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1de18:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1de1c:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    transfer.ui32InstrLen    = offsetlen;
   1de20:	2301      	movs	r3, #1
    transfer.ui32Instr       = offset;
   1de22:	2411      	movs	r4, #17
   1de24:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1de28:	f10d 0203 	add.w	r2, sp, #3
    transfer.ui32NumBytes    = size;
   1de2c:	930b      	str	r3, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1de2e:	6878      	ldr	r0, [r7, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1de30:	920d      	str	r2, [sp, #52]	@ 0x34
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1de32:	232a      	movs	r3, #42	@ 0x2a
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1de34:	a908      	add	r1, sp, #32
    transfer.ui32PauseCondition = 0;
   1de36:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1de3a:	9308      	str	r3, [sp, #32]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1de3c:	f002 fa02 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1de40:	b013      	add	sp, #76	@ 0x4c
   1de42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1de46:	bf00      	nop
   1de48:	10054958 	.word	0x10054958
   1de4c:	00030468 	.word	0x00030468
   1de50:	0003046c 	.word	0x0003046c
   1de54:	00030478 	.word	0x00030478
   1de58:	7478742e 	.word	0x7478742e
   1de5c:	10054840 	.word	0x10054840
   1de60:	00030480 	.word	0x00030480
   1de64:	00000000 	.word	0x00000000

0001de68 <datalogger_writefile>:
{
   1de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de6c:	ed2d 8b02 	vpush	{d8}
   1de70:	b08b      	sub	sp, #44	@ 0x2c
   1de72:	4680      	mov	r8, r0
    uint32_t len = strlen (contents)+1;
   1de74:	f7ee ff04 	bl	cc80 <strlen>
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1de78:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 1df74 <datalogger_writefile+0x10c>
    uint32_t len = strlen (contents)+1;
   1de7c:	f100 0c01 	add.w	ip, r0, #1
    if (len > 31)
   1de80:	f1bc 0f1f 	cmp.w	ip, #31
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1de84:	f8d9 0004 	ldr.w	r0, [r9, #4]
    if (len > 31)
   1de88:	d951      	bls.n	1df2e <datalogger_writefile+0xc6>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1de8a:	ed9f 8b37 	vldr	d8, [pc, #220]	@ 1df68 <datalogger_writefile+0x100>
    uint32_t j = 0;
   1de8e:	2500      	movs	r5, #0
   1de90:	f109 0620 	add.w	r6, r9, #32
    transfer.ui32Instr       = offset;
   1de94:	270c      	movs	r7, #12
    transfer.ui32PauseCondition = 0;
   1de96:	f04f 0a00 	mov.w	sl, #0
   1de9a:	f04f 0b00 	mov.w	fp, #0
                module.txbuffer[i] = contents[i+j];
   1de9e:	f818 3005 	ldrb.w	r3, [r8, r5]
   1dea2:	f889 3020 	strb.w	r3, [r9, #32]
                if (len == 0)
   1dea6:	f1bc 0301 	subs.w	r3, ip, #1
                module.txbuffer[i] = contents[i+j];
   1deaa:	eb08 0205 	add.w	r2, r8, r5
                if (len == 0)
   1deae:	d00e      	beq.n	1dece <datalogger_writefile+0x66>
   1deb0:	492f      	ldr	r1, [pc, #188]	@ (1df70 <datalogger_writefile+0x108>)
   1deb2:	f1ac 041f 	sub.w	r4, ip, #31
   1deb6:	e000      	b.n	1deba <datalogger_writefile+0x52>
   1deb8:	4603      	mov	r3, r0
            for (i=0; i<LOGGER_BUFFER_SIZE-1; i++)
   1deba:	429c      	cmp	r4, r3
   1debc:	d022      	beq.n	1df04 <datalogger_writefile+0x9c>
                module.txbuffer[i] = contents[i+j];
   1debe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   1dec2:	f801 0f01 	strb.w	r0, [r1, #1]!
                if (len == 0)
   1dec6:	1e58      	subs	r0, r3, #1
   1dec8:	d1f6      	bne.n	1deb8 <datalogger_writefile+0x50>
   1deca:	ebac 0303 	sub.w	r3, ip, r3
    transfer.ui32NumBytes    = size;
   1dece:	9303      	str	r3, [sp, #12]
    transfer.ui32PauseCondition = 0;
   1ded0:	2200      	movs	r2, #0
   1ded2:	2300      	movs	r3, #0
   1ded4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1ded8:	2300      	movs	r3, #0
   1deda:	f88d 3010 	strb.w	r3, [sp, #16]
    transfer.bContinue       = false;
   1dede:	f8ad 301c 	strh.w	r3, [sp, #28]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dee2:	f8d9 0004 	ldr.w	r0, [r9, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1dee6:	9605      	str	r6, [sp, #20]
    transfer.ui32Instr       = offset;
   1dee8:	230c      	movs	r3, #12
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1deea:	4669      	mov	r1, sp
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1deec:	242a      	movs	r4, #42	@ 0x2a
   1deee:	2501      	movs	r5, #1
   1def0:	e9cd 4500 	strd	r4, r5, [sp]
    transfer.ui32Instr       = offset;
   1def4:	9302      	str	r3, [sp, #8]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1def6:	f002 f9a5 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1defa:	b00b      	add	sp, #44	@ 0x2c
   1defc:	ecbd 8b02 	vpop	{d8}
   1df00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    transfer.eDirection      = AM_HAL_IOM_TX;
   1df04:	2300      	movs	r3, #0
   1df06:	f88d 3010 	strb.w	r3, [sp, #16]
    transfer.bContinue       = false;
   1df0a:	f8ad 301c 	strh.w	r3, [sp, #28]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df0e:	f8d9 0004 	ldr.w	r0, [r9, #4]
    transfer.ui32Instr       = offset;
   1df12:	9702      	str	r7, [sp, #8]
    transfer.ui32NumBytes    = size;
   1df14:	231f      	movs	r3, #31
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df16:	4669      	mov	r1, sp
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1df18:	ed8d 8b00 	vstr	d8, [sp]
    transfer.ui32PauseCondition = 0;
   1df1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1df20:	9605      	str	r6, [sp, #20]
    transfer.ui32NumBytes    = size;
   1df22:	9303      	str	r3, [sp, #12]
            j += i;
   1df24:	351f      	adds	r5, #31
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df26:	f002 f98d 	bl	20244 <am_hal_iom_blocking_transfer>
        while (len >0)
   1df2a:	46a4      	mov	ip, r4
   1df2c:	e7b7      	b.n	1de9e <datalogger_writefile+0x36>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1df2e:	222a      	movs	r2, #42	@ 0x2a
   1df30:	2301      	movs	r3, #1
   1df32:	e9cd 2300 	strd	r2, r3, [sp]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df36:	4669      	mov	r1, sp
    transfer.eDirection      = AM_HAL_IOM_TX;
   1df38:	2300      	movs	r3, #0
    transfer.ui32Instr       = offset;
   1df3a:	220c      	movs	r2, #12
    transfer.ui32PauseCondition = 0;
   1df3c:	2400      	movs	r4, #0
   1df3e:	2500      	movs	r5, #0
   1df40:	e9cd 4508 	strd	r4, r5, [sp, #32]
    transfer.ui32Instr       = offset;
   1df44:	9202      	str	r2, [sp, #8]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1df46:	f88d 3010 	strb.w	r3, [sp, #16]
    transfer.ui32NumBytes    = size;
   1df4a:	f8cd c00c 	str.w	ip, [sp, #12]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1df4e:	f8cd 8014 	str.w	r8, [sp, #20]
    transfer.bContinue       = false;
   1df52:	f8ad 301c 	strh.w	r3, [sp, #28]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df56:	f002 f975 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1df5a:	b00b      	add	sp, #44	@ 0x2c
   1df5c:	ecbd 8b02 	vpop	{d8}
   1df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df64:	f3af 8000 	nop.w
   1df68:	0000002a 	.word	0x0000002a
   1df6c:	00000001 	.word	0x00000001
   1df70:	10054978 	.word	0x10054978
   1df74:	10054958 	.word	0x10054958

0001df78 <datalogger_log_debug>:
{
   1df78:	b40f      	push	{r0, r1, r2, r3}
   1df7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df7e:	b08d      	sub	sp, #52	@ 0x34
   1df80:	ab16      	add	r3, sp, #88	@ 0x58
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df82:	4e2c      	ldr	r6, [pc, #176]	@ (1e034 <datalogger_log_debug+0xbc>)
{
   1df84:	f853 ab04 	ldr.w	sl, [r3], #4
    uint8_t len = strlen (filename);
   1df88:	f8df b0b0 	ldr.w	fp, [pc, #176]	@ 1e03c <datalogger_log_debug+0xc4>
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1df8c:	6870      	ldr	r0, [r6, #4]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1df8e:	272a      	movs	r7, #42	@ 0x2a
   1df90:	e9cd 3701 	strd	r3, r7, [sp, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1df94:	4b28      	ldr	r3, [pc, #160]	@ (1e038 <datalogger_log_debug+0xc0>)
   1df96:	9307      	str	r3, [sp, #28]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1df98:	2400      	movs	r4, #0
    transfer.ui32InstrLen    = offsetlen;
   1df9a:	2501      	movs	r5, #1
    transfer.ui32NumBytes    = size;
   1df9c:	2208      	movs	r2, #8
   1df9e:	2302      	movs	r3, #2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dfa0:	a902      	add	r1, sp, #8
    transfer.ui32PauseCondition = 0;
   1dfa2:	f04f 0800 	mov.w	r8, #0
   1dfa6:	f04f 0900 	mov.w	r9, #0
    transfer.ui32NumBytes    = size;
   1dfaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    transfer.ui32PauseCondition = 0;
   1dfae:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
    transfer.ui32InstrLen    = offsetlen;
   1dfb2:	9503      	str	r5, [sp, #12]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1dfb4:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.bContinue       = false;
   1dfb8:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dfbc:	f002 f942 	bl	20244 <am_hal_iom_blocking_transfer>
    uint8_t len = strlen (filename);
   1dfc0:	4658      	mov	r0, fp
   1dfc2:	f7ee fe5d 	bl	cc80 <strlen>
    transfer.ui32Instr       = offset;
   1dfc6:	230b      	movs	r3, #11
    transfer.ui32NumBytes    = size;
   1dfc8:	9005      	str	r0, [sp, #20]
    transfer.ui32Instr       = offset;
   1dfca:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dfcc:	a902      	add	r1, sp, #8
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dfce:	2301      	movs	r3, #1
   1dfd0:	222a      	movs	r2, #42	@ 0x2a
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dfd2:	6870      	ldr	r0, [r6, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1dfd4:	f8cd b01c 	str.w	fp, [sp, #28]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1dfd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    transfer.ui32PauseCondition = 0;
   1dfdc:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
    transfer.eDirection      = AM_HAL_IOM_TX;
   1dfe0:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.bContinue       = false;
   1dfe4:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1dfe8:	f002 f92c 	bl	20244 <am_hal_iom_blocking_transfer>
    am_util_stdio_vsprintf(lcp_log, fmt, args);
   1dfec:	4651      	mov	r1, sl
   1dfee:	f8df a050 	ldr.w	sl, [pc, #80]	@ 1e040 <datalogger_log_debug+0xc8>
   1dff2:	9a01      	ldr	r2, [sp, #4]
   1dff4:	4650      	mov	r0, sl
   1dff6:	f7f2 fbb9 	bl	1076c <am_util_stdio_vsprintf>
    datalogger_writefile(lcp_log);
   1dffa:	4650      	mov	r0, sl
   1dffc:	f7ff ff34 	bl	1de68 <datalogger_writefile>
    transfer.ui32Instr       = offset;
   1e000:	2311      	movs	r3, #17
   1e002:	e9cd 5303 	strd	r5, r3, [sp, #12]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e006:	6870      	ldr	r0, [r6, #4]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e008:	9702      	str	r7, [sp, #8]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e00a:	f10d 0303 	add.w	r3, sp, #3
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e00e:	a902      	add	r1, sp, #8
    transfer.ui32PauseCondition = 0;
   1e010:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
    uint8_t data = 0x00;
   1e014:	f88d 4003 	strb.w	r4, [sp, #3]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e018:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.ui32NumBytes    = size;
   1e01c:	9505      	str	r5, [sp, #20]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e01e:	9307      	str	r3, [sp, #28]
    transfer.bContinue       = false;
   1e020:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e024:	f002 f90e 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1e028:	b00d      	add	sp, #52	@ 0x34
   1e02a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e02e:	b004      	add	sp, #16
   1e030:	4770      	bx	lr
   1e032:	bf00      	nop
   1e034:	10054958 	.word	0x10054958
   1e038:	00030468 	.word	0x00030468
   1e03c:	10054840 	.word	0x10054840
   1e040:	10054854 	.word	0x10054854
   1e044:	00000000 	.word	0x00000000

0001e048 <datalogger_predeploy_mode>:
{
   1e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e04c:	ed2d 8b04 	vpush	{d8-d9}
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e050:	4e95      	ldr	r6, [pc, #596]	@ (1e2a8 <datalogger_predeploy_mode+0x260>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e052:	4b96      	ldr	r3, [pc, #600]	@ (1e2ac <datalogger_predeploy_mode+0x264>)
   1e054:	f8df b284 	ldr.w	fp, [pc, #644]	@ 1e2dc <datalogger_predeploy_mode+0x294>
{
   1e058:	b0cf      	sub	sp, #316	@ 0x13c
    transfer.ui32PauseCondition = 0;
   1e05a:	ed9f 8b8f 	vldr	d8, [pc, #572]	@ 1e298 <datalogger_predeploy_mode+0x250>
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e05e:	ac2e      	add	r4, sp, #184	@ 0xb8
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e060:	2500      	movs	r5, #0
    transfer.ui32InstrLen    = offsetlen;
   1e062:	2701      	movs	r7, #1
{
   1e064:	4680      	mov	r8, r0
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e066:	f04f 092a 	mov.w	r9, #42	@ 0x2a
    transfer.ui32Instr       = offset;
   1e06a:	2208      	movs	r2, #8
{
   1e06c:	468a      	mov	sl, r1
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e06e:	9333      	str	r3, [sp, #204]	@ 0xcc
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e070:	4621      	mov	r1, r4
    transfer.ui32NumBytes    = size;
   1e072:	2302      	movs	r3, #2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e074:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e076:	9230      	str	r2, [sp, #192]	@ 0xc0
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e078:	f88d 50c8 	strb.w	r5, [sp, #200]	@ 0xc8
    transfer.bContinue       = false;
   1e07c:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
    transfer.ui32NumBytes    = size;
   1e080:	9331      	str	r3, [sp, #196]	@ 0xc4
    transfer.ui32InstrLen    = offsetlen;
   1e082:	e9cd 972e 	strd	r9, r7, [sp, #184]	@ 0xb8
    transfer.ui32PauseCondition = 0;
   1e086:	ed8d 8b36 	vstr	d8, [sp, #216]	@ 0xd8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e08a:	f002 f8db 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32NumBytes    = size;
   1e08e:	2207      	movs	r2, #7
   1e090:	230f      	movs	r3, #15
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e092:	4621      	mov	r1, r4
   1e094:	6870      	ldr	r0, [r6, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e096:	f88d 50c8 	strb.w	r5, [sp, #200]	@ 0xc8
    transfer.ui32NumBytes    = size;
   1e09a:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
    transfer.bContinue       = false;
   1e09e:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e0a2:	f8cd b0cc 	str.w	fp, [sp, #204]	@ 0xcc
    transfer.ui32PauseCondition = 0;
   1e0a6:	ed8d 8b36 	vstr	d8, [sp, #216]	@ 0xd8
    transfer.ui32InstrLen    = offsetlen;
   1e0aa:	e9cd 972e 	strd	r9, r7, [sp, #184]	@ 0xb8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e0ae:	f002 f8c9 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32NumBytes    = size;
   1e0b2:	230f      	movs	r3, #15
   1e0b4:	2208      	movs	r2, #8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e0b6:	4621      	mov	r1, r4
   1e0b8:	6870      	ldr	r0, [r6, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e0ba:	f8cd b0cc 	str.w	fp, [sp, #204]	@ 0xcc
    transfer.ui32NumBytes    = size;
   1e0be:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e0c2:	f88d 50c8 	strb.w	r5, [sp, #200]	@ 0xc8
    transfer.bContinue       = false;
   1e0c6:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
    transfer.ui32PauseCondition = 0;
   1e0ca:	ed8d 8b36 	vstr	d8, [sp, #216]	@ 0xd8
    transfer.ui32InstrLen    = offsetlen;
   1e0ce:	e9cd 972e 	strd	r9, r7, [sp, #184]	@ 0xb8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e0d2:	f002 f8b7 	bl	20244 <am_hal_iom_blocking_transfer>
    bool utc = artemis_rtc_get_time(&time);
   1e0d6:	a811      	add	r0, sp, #68	@ 0x44
   1e0d8:	f7ff fd7e 	bl	1dbd8 <artemis_rtc_get_time>
    char filename[64] = {0};
   1e0dc:	4629      	mov	r1, r5
    bool utc = artemis_rtc_get_time(&time);
   1e0de:	4683      	mov	fp, r0
    char filename[64] = {0};
   1e0e0:	2240      	movs	r2, #64	@ 0x40
   1e0e2:	a81e      	add	r0, sp, #120	@ 0x78
   1e0e4:	f006 f954 	bl	24390 <memset>
    sprintf (filename, "pds_%02d.%02d.20%02d.txt", time.month, time.day, time.year);
   1e0e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
   1e0ec:	f89d 2046 	ldrb.w	r2, [sp, #70]	@ 0x46
   1e0f0:	496f      	ldr	r1, [pc, #444]	@ (1e2b0 <datalogger_predeploy_mode+0x268>)
   1e0f2:	9300      	str	r3, [sp, #0]
   1e0f4:	a81e      	add	r0, sp, #120	@ 0x78
   1e0f6:	f89d 3047 	ldrb.w	r3, [sp, #71]	@ 0x47
   1e0fa:	f005 fffd 	bl	240f8 <sprintf>
    uint8_t len = strlen(filename);
   1e0fe:	a81e      	add	r0, sp, #120	@ 0x78
   1e100:	f7ee fdbe 	bl	cc80 <strlen>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e104:	ed9f 9b66 	vldr	d9, [pc, #408]	@ 1e2a0 <datalogger_predeploy_mode+0x258>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e108:	ab1e      	add	r3, sp, #120	@ 0x78
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e10a:	4621      	mov	r1, r4
    transfer.ui32NumBytes    = size;
   1e10c:	9031      	str	r0, [sp, #196]	@ 0xc4
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e10e:	9333      	str	r3, [sp, #204]	@ 0xcc
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e110:	6870      	ldr	r0, [r6, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e112:	f88d 50c8 	strb.w	r5, [sp, #200]	@ 0xc8
    transfer.ui32Instr       = offset;
   1e116:	2306      	movs	r3, #6
   1e118:	9330      	str	r3, [sp, #192]	@ 0xc0
    transfer.bContinue       = false;
   1e11a:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
    transfer.ui32PauseCondition = 0;
   1e11e:	ed8d 8b36 	vstr	d8, [sp, #216]	@ 0xd8
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e122:	ed8d 9b2e 	vstr	d9, [sp, #184]	@ 0xb8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e126:	f002 f88d 	bl	20244 <am_hal_iom_blocking_transfer>
    uint8_t len = strlen (filename);
   1e12a:	a81e      	add	r0, sp, #120	@ 0x78
   1e12c:	f7ee fda8 	bl	cc80 <strlen>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e130:	ab1e      	add	r3, sp, #120	@ 0x78
    transfer.ui32NumBytes    = size;
   1e132:	9031      	str	r0, [sp, #196]	@ 0xc4
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e134:	9333      	str	r3, [sp, #204]	@ 0xcc
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e136:	4621      	mov	r1, r4
    transfer.ui32Instr       = offset;
   1e138:	230b      	movs	r3, #11
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e13a:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e13c:	9330      	str	r3, [sp, #192]	@ 0xc0
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e13e:	f88d 50c8 	strb.w	r5, [sp, #200]	@ 0xc8
    transfer.bContinue       = false;
   1e142:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e146:	ed8d 9b2e 	vstr	d9, [sp, #184]	@ 0xb8
    transfer.ui32PauseCondition = 0;
   1e14a:	ed8d 8b36 	vstr	d8, [sp, #216]	@ 0xd8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e14e:	f002 f879 	bl	20244 <am_hal_iom_blocking_transfer>
    char data[128] = {0};
   1e152:	4629      	mov	r1, r5
   1e154:	2280      	movs	r2, #128	@ 0x80
   1e156:	4620      	mov	r0, r4
   1e158:	f006 f91a 	bl	24390 <memset>
    datalogger_writefile("\n******************************\n");
   1e15c:	4855      	ldr	r0, [pc, #340]	@ (1e2b4 <datalogger_predeploy_mode+0x26c>)
   1e15e:	f7ff fe83 	bl	1de68 <datalogger_writefile>
    datalogger_writefile("LCP System Check information\n");
   1e162:	4855      	ldr	r0, [pc, #340]	@ (1e2b8 <datalogger_predeploy_mode+0x270>)
   1e164:	f7ff fe80 	bl	1de68 <datalogger_writefile>
    datalogger_writefile("******************************\n");
   1e168:	4854      	ldr	r0, [pc, #336]	@ (1e2bc <datalogger_predeploy_mode+0x274>)
   1e16a:	f7ff fe7d 	bl	1de68 <datalogger_writefile>
    am_util_stdio_sprintf(data, "Check : %s\nTime : %02d:%02d:%02d (%s)\nDate : %02d.%02d.20%02d\nLatitude : %.7f\nLongitude : %.7f\nAltitude : %.7f\n\n\n",
   1e16e:	4b54      	ldr	r3, [pc, #336]	@ (1e2c0 <datalogger_predeploy_mode+0x278>)
   1e170:	4a54      	ldr	r2, [pc, #336]	@ (1e2c4 <datalogger_predeploy_mode+0x27c>)
   1e172:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1e176:	45aa      	cmp	sl, r5
   1e178:	bf18      	it	ne
   1e17a:	461a      	movne	r2, r3
   1e17c:	920d      	str	r2, [sp, #52]	@ 0x34
   1e17e:	4b52      	ldr	r3, [pc, #328]	@ (1e2c8 <datalogger_predeploy_mode+0x280>)
   1e180:	4a52      	ldr	r2, [pc, #328]	@ (1e2cc <datalogger_predeploy_mode+0x284>)
   1e182:	45ab      	cmp	fp, r5
   1e184:	bf0c      	ite	eq
   1e186:	4692      	moveq	sl, r2
   1e188:	469a      	movne	sl, r3
   1e18a:	f89d 3049 	ldrb.w	r3, [sp, #73]	@ 0x49
   1e18e:	f89d 204a 	ldrb.w	r2, [sp, #74]	@ 0x4a
   1e192:	930f      	str	r3, [sp, #60]	@ 0x3c
   1e194:	920e      	str	r2, [sp, #56]	@ 0x38
   1e196:	f7ee f917 	bl	c3c8 <__aeabi_f2d>
   1e19a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
   1e19e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1e1a2:	f89d b048 	ldrb.w	fp, [sp, #72]	@ 0x48
   1e1a6:	f7ee f90f 	bl	c3c8 <__aeabi_f2d>
   1e1aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1e1ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e1b2:	f7ee f909 	bl	c3c8 <__aeabi_f2d>
   1e1b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1e1ba:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
   1e1be:	9105      	str	r1, [sp, #20]
   1e1c0:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
   1e1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1e1c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1e1c8:	9104      	str	r1, [sp, #16]
   1e1ca:	f89d 1046 	ldrb.w	r1, [sp, #70]	@ 0x46
   1e1ce:	9201      	str	r2, [sp, #4]
   1e1d0:	9300      	str	r3, [sp, #0]
   1e1d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1e1d4:	9103      	str	r1, [sp, #12]
   1e1d6:	465b      	mov	r3, fp
   1e1d8:	493d      	ldr	r1, [pc, #244]	@ (1e2d0 <datalogger_predeploy_mode+0x288>)
   1e1da:	f8cd a008 	str.w	sl, [sp, #8]
   1e1de:	4620      	mov	r0, r4
   1e1e0:	f7f2 ff34 	bl	1104c <am_util_stdio_sprintf>
    datalogger_writefile(data);
   1e1e4:	4620      	mov	r0, r4
   1e1e6:	f7ff fe3f 	bl	1de68 <datalogger_writefile>
    transfer.ui32Instr       = offset;
   1e1ea:	f04f 0811 	mov.w	r8, #17
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e1ee:	f10d 0343 	add.w	r3, sp, #67	@ 0x43
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e1f2:	a914      	add	r1, sp, #80	@ 0x50
   1e1f4:	6870      	ldr	r0, [r6, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e1f6:	9319      	str	r3, [sp, #100]	@ 0x64
    uint8_t data = 0x00;
   1e1f8:	f88d 5043 	strb.w	r5, [sp, #67]	@ 0x43
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e1fc:	f88d 5060 	strb.w	r5, [sp, #96]	@ 0x60
    transfer.bContinue       = false;
   1e200:	f8ad 506c 	strh.w	r5, [sp, #108]	@ 0x6c
    transfer.ui32PauseCondition = 0;
   1e204:	ed8d 8b1c 	vstr	d8, [sp, #112]	@ 0x70
    transfer.ui32InstrLen    = offsetlen;
   1e208:	e9cd 9714 	strd	r9, r7, [sp, #80]	@ 0x50
    transfer.ui32NumBytes    = size;
   1e20c:	9717      	str	r7, [sp, #92]	@ 0x5c
    transfer.ui32Instr       = offset;
   1e20e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e212:	f002 f817 	bl	20244 <am_hal_iom_blocking_transfer>
    uint32_t size = datalogger_filesize(filename);
   1e216:	a81e      	add	r0, sp, #120	@ 0x78
   1e218:	f7ff fd66 	bl	1dce8 <datalogger_filesize>
   1e21c:	4605      	mov	r5, r0
    ARTEMIS_DEBUG_PRINTF("file size = %u\n", size);
   1e21e:	4629      	mov	r1, r5
   1e220:	482c      	ldr	r0, [pc, #176]	@ (1e2d4 <datalogger_predeploy_mode+0x28c>)
   1e222:	f7f2 ff21 	bl	11068 <am_util_stdio_printf>
   1e226:	482b      	ldr	r0, [pc, #172]	@ (1e2d4 <datalogger_predeploy_mode+0x28c>)
   1e228:	4629      	mov	r1, r5
   1e22a:	f7ff fea5 	bl	1df78 <datalogger_log_debug>
    if (size == 0)
   1e22e:	b1d5      	cbz	r5, 1e266 <datalogger_predeploy_mode+0x21e>
        ARTEMIS_DEBUG_PRINTF("%c", data[i]);
   1e230:	4e29      	ldr	r6, [pc, #164]	@ (1e2d8 <datalogger_predeploy_mode+0x290>)
   1e232:	f10d 05b7 	add.w	r5, sp, #183	@ 0xb7
    for (uint16_t i=0; i< strlen(data); i++)
   1e236:	f1c4 0701 	rsb	r7, r4, #1
   1e23a:	e007      	b.n	1e24c <datalogger_predeploy_mode+0x204>
        ARTEMIS_DEBUG_PRINTF("%c", data[i]);
   1e23c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   1e240:	f7f2 ff12 	bl	11068 <am_util_stdio_printf>
   1e244:	7829      	ldrb	r1, [r5, #0]
   1e246:	4630      	mov	r0, r6
   1e248:	f7ff fe96 	bl	1df78 <datalogger_log_debug>
    for (uint16_t i=0; i< strlen(data); i++)
   1e24c:	4620      	mov	r0, r4
   1e24e:	f7ee fd17 	bl	cc80 <strlen>
   1e252:	197b      	adds	r3, r7, r5
   1e254:	4602      	mov	r2, r0
   1e256:	429a      	cmp	r2, r3
        ARTEMIS_DEBUG_PRINTF("%c", data[i]);
   1e258:	4630      	mov	r0, r6
    for (uint16_t i=0; i< strlen(data); i++)
   1e25a:	d8ef      	bhi.n	1e23c <datalogger_predeploy_mode+0x1f4>
}
   1e25c:	b04f      	add	sp, #316	@ 0x13c
   1e25e:	ecbd 8b04 	vpop	{d8-d9}
   1e262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e266:	f10d 0343 	add.w	r3, sp, #67	@ 0x43
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e26a:	6870      	ldr	r0, [r6, #4]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e26c:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e270:	a914      	add	r1, sp, #80	@ 0x50
    transfer.ui32PauseCondition = 0;
   1e272:	ed8d 8b1c 	vstr	d8, [sp, #112]	@ 0x70
    transfer.ui32Instr       = offset;
   1e276:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e27a:	9319      	str	r3, [sp, #100]	@ 0x64
    uint8_t data = 0x00;
   1e27c:	f88d 5043 	strb.w	r5, [sp, #67]	@ 0x43
    transfer.ui32InstrLen    = offsetlen;
   1e280:	9715      	str	r7, [sp, #84]	@ 0x54
    transfer.ui32NumBytes    = size;
   1e282:	9717      	str	r7, [sp, #92]	@ 0x5c
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e284:	f88d 5060 	strb.w	r5, [sp, #96]	@ 0x60
    transfer.bContinue       = false;
   1e288:	f8ad 506c 	strh.w	r5, [sp, #108]	@ 0x6c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e28c:	f001 ffda 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1e290:	e7ce      	b.n	1e230 <datalogger_predeploy_mode+0x1e8>
   1e292:	bf00      	nop
   1e294:	f3af 8000 	nop.w
	...
   1e2a0:	0000002a 	.word	0x0000002a
   1e2a4:	00000001 	.word	0x00000001
   1e2a8:	10054958 	.word	0x10054958
   1e2ac:	00030468 	.word	0x00030468
   1e2b0:	000304d0 	.word	0x000304d0
   1e2b4:	000304ec 	.word	0x000304ec
   1e2b8:	00030510 	.word	0x00030510
   1e2bc:	0002b354 	.word	0x0002b354
   1e2c0:	000304a8 	.word	0x000304a8
   1e2c4:	000304ac 	.word	0x000304ac
   1e2c8:	000304b4 	.word	0x000304b4
   1e2cc:	000304b8 	.word	0x000304b8
   1e2d0:	00030530 	.word	0x00030530
   1e2d4:	000305a4 	.word	0x000305a4
   1e2d8:	0002a9ac 	.word	0x0002a9ac
   1e2dc:	000304c0 	.word	0x000304c0

0001e2e0 <datalogger_profile_create_file>:
{
   1e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2e4:	ed2d 8b02 	vpush	{d8}
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e2e8:	4e55      	ldr	r6, [pc, #340]	@ (1e440 <datalogger_profile_create_file+0x160>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e2ea:	4b56      	ldr	r3, [pc, #344]	@ (1e444 <datalogger_profile_create_file+0x164>)
   1e2ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 1e460 <datalogger_profile_create_file+0x180>
{
   1e2f0:	b093      	sub	sp, #76	@ 0x4c
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e2f2:	2400      	movs	r4, #0
    transfer.ui32PauseCondition = 0;
   1e2f4:	f04f 0800 	mov.w	r8, #0
   1e2f8:	f04f 0900 	mov.w	r9, #0
    transfer.ui32Instr       = offset;
   1e2fc:	2701      	movs	r7, #1
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e2fe:	f04f 0a2a 	mov.w	sl, #42	@ 0x2a
    transfer.ui32Instr       = offset;
   1e302:	2208      	movs	r2, #8
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e304:	930d      	str	r3, [sp, #52]	@ 0x34
{
   1e306:	9003      	str	r0, [sp, #12]
    transfer.ui32NumBytes    = size;
   1e308:	2302      	movs	r3, #2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e30a:	a908      	add	r1, sp, #32
   1e30c:	6870      	ldr	r0, [r6, #4]
    transfer.ui32NumBytes    = size;
   1e30e:	930b      	str	r3, [sp, #44]	@ 0x2c
    transfer.ui32Instr       = offset;
   1e310:	e9cd 7209 	strd	r7, r2, [sp, #36]	@ 0x24
    transfer.ui32NumBytes    = size;
   1e314:	250c      	movs	r5, #12
    transfer.ui32PauseCondition = 0;
   1e316:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e31a:	f8cd a020 	str.w	sl, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e31e:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1e322:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e326:	f001 ff8d 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32NumBytes    = size;
   1e32a:	2307      	movs	r3, #7
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e32c:	a908      	add	r1, sp, #32
   1e32e:	6870      	ldr	r0, [r6, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e330:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.ui32NumBytes    = size;
   1e334:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e338:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.ui32InstrLen    = offsetlen;
   1e33c:	e9cd a708 	strd	sl, r7, [sp, #32]
    transfer.bContinue       = false;
   1e340:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e344:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e348:	f001 ff7c 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32Instr       = offset;
   1e34c:	2208      	movs	r2, #8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e34e:	a908      	add	r1, sp, #32
   1e350:	6870      	ldr	r0, [r6, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e352:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
    transfer.ui32NumBytes    = size;
   1e356:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e35a:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.ui32InstrLen    = offsetlen;
   1e35e:	e9cd a708 	strd	sl, r7, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e362:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1e366:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e36a:	f001 ff6b 	bl	20244 <am_hal_iom_blocking_transfer>
    artemis_rtc_get_time(&time);
   1e36e:	a805      	add	r0, sp, #20
   1e370:	f7ff fc32 	bl	1dbd8 <artemis_rtc_get_time>
    sprintf (filename, "%d_sps_%02d.%02d.20%02d.txt", sps_nr, time.month, time.day, time.year);
   1e374:	4d34      	ldr	r5, [pc, #208]	@ (1e448 <datalogger_profile_create_file+0x168>)
   1e376:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e37a:	9301      	str	r3, [sp, #4]
   1e37c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1e380:	9a03      	ldr	r2, [sp, #12]
   1e382:	4932      	ldr	r1, [pc, #200]	@ (1e44c <datalogger_profile_create_file+0x16c>)
   1e384:	9300      	str	r3, [sp, #0]
   1e386:	4628      	mov	r0, r5
   1e388:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1e38c:	f005 feb4 	bl	240f8 <sprintf>
    uint8_t len = strlen(filename);
   1e390:	4628      	mov	r0, r5
   1e392:	f7ee fc75 	bl	cc80 <strlen>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e396:	ed9f 8b28 	vldr	d8, [pc, #160]	@ 1e438 <datalogger_profile_create_file+0x158>
    transfer.ui32Instr       = offset;
   1e39a:	2306      	movs	r3, #6
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e39c:	a908      	add	r1, sp, #32
    transfer.ui32NumBytes    = size;
   1e39e:	900b      	str	r0, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3a0:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e3a2:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e3a4:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e3a8:	ed8d 8b08 	vstr	d8, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e3ac:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e3b0:	950d      	str	r5, [sp, #52]	@ 0x34
    transfer.bContinue       = false;
   1e3b2:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3b6:	f001 ff45 	bl	20244 <am_hal_iom_blocking_transfer>
    uint8_t len = strlen (filename);
   1e3ba:	4628      	mov	r0, r5
   1e3bc:	f7ee fc60 	bl	cc80 <strlen>
    transfer.ui32Instr       = offset;
   1e3c0:	230b      	movs	r3, #11
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3c2:	a908      	add	r1, sp, #32
    transfer.ui32NumBytes    = size;
   1e3c4:	900b      	str	r0, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3c6:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e3c8:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e3ca:	ed8d 8b08 	vstr	d8, [sp, #32]
    transfer.ui32PauseCondition = 0;
   1e3ce:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e3d2:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e3d6:	950d      	str	r5, [sp, #52]	@ 0x34
    transfer.bContinue       = false;
   1e3d8:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3dc:	f001 ff32 	bl	20244 <am_hal_iom_blocking_transfer>
    datalogger_writefile("\nS.No.\t| Pressure(bar) | Temperature(°C) | Time-stamp\t\n");
   1e3e0:	481b      	ldr	r0, [pc, #108]	@ (1e450 <datalogger_profile_create_file+0x170>)
   1e3e2:	f7ff fd41 	bl	1de68 <datalogger_writefile>
    datalogger_writefile("=============================================================\n\n");
   1e3e6:	481b      	ldr	r0, [pc, #108]	@ (1e454 <datalogger_profile_create_file+0x174>)
   1e3e8:	f7ff fd3e 	bl	1de68 <datalogger_writefile>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e3ec:	f10d 0313 	add.w	r3, sp, #19
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3f0:	6870      	ldr	r0, [r6, #4]
    ARTEMIS_DEBUG_PRINTF("%s file created\n", filename);
   1e3f2:	4e19      	ldr	r6, [pc, #100]	@ (1e458 <datalogger_profile_create_file+0x178>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e3f4:	930d      	str	r3, [sp, #52]	@ 0x34
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e3f6:	a908      	add	r1, sp, #32
    transfer.ui32Instr       = offset;
   1e3f8:	2311      	movs	r3, #17
   1e3fa:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e3fc:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e400:	f8cd a020 	str.w	sl, [sp, #32]
    uint8_t data = 0x00;
   1e404:	f88d 4013 	strb.w	r4, [sp, #19]
    transfer.ui32InstrLen    = offsetlen;
   1e408:	9709      	str	r7, [sp, #36]	@ 0x24
    transfer.ui32NumBytes    = size;
   1e40a:	970b      	str	r7, [sp, #44]	@ 0x2c
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e40c:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1e410:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e414:	f001 ff16 	bl	20244 <am_hal_iom_blocking_transfer>
    ARTEMIS_DEBUG_PRINTF("%s file created\n", filename);
   1e418:	4629      	mov	r1, r5
   1e41a:	4630      	mov	r0, r6
   1e41c:	f7f2 fe24 	bl	11068 <am_util_stdio_printf>
   1e420:	4630      	mov	r0, r6
   1e422:	4629      	mov	r1, r5
   1e424:	f7ff fda8 	bl	1df78 <datalogger_log_debug>
    sps_count = 0;
   1e428:	4b0c      	ldr	r3, [pc, #48]	@ (1e45c <datalogger_profile_create_file+0x17c>)
}
   1e42a:	4628      	mov	r0, r5
    sps_count = 0;
   1e42c:	801c      	strh	r4, [r3, #0]
}
   1e42e:	b013      	add	sp, #76	@ 0x4c
   1e430:	ecbd 8b02 	vpop	{d8}
   1e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e438:	0000002a 	.word	0x0000002a
   1e43c:	00000001 	.word	0x00000001
   1e440:	10054958 	.word	0x10054958
   1e444:	00030468 	.word	0x00030468
   1e448:	1004abc0 	.word	0x1004abc0
   1e44c:	000305c4 	.word	0x000305c4
   1e450:	000305e0 	.word	0x000305e0
   1e454:	0003061c 	.word	0x0003061c
   1e458:	0003065c 	.word	0x0003065c
   1e45c:	10054956 	.word	0x10054956
   1e460:	000305b4 	.word	0x000305b4
   1e464:	00000000 	.word	0x00000000

0001e468 <datalogger_profile_mode>:
{
   1e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e46c:	ed2d 8b02 	vpush	{d8}
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e470:	4f49      	ldr	r7, [pc, #292]	@ (1e598 <datalogger_profile_mode+0x130>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e472:	4a4a      	ldr	r2, [pc, #296]	@ (1e59c <datalogger_profile_mode+0x134>)
{
   1e474:	b0b7      	sub	sp, #220	@ 0xdc
    transfer.ui32PauseCondition = 0;
   1e476:	ed9f 8b44 	vldr	d8, [pc, #272]	@ 1e588 <datalogger_profile_mode+0x120>
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e47a:	2400      	movs	r4, #0
    transfer.ui32InstrLen    = offsetlen;
   1e47c:	2601      	movs	r6, #1
{
   1e47e:	460d      	mov	r5, r1
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e480:	f04f 092a 	mov.w	r9, #42	@ 0x2a
{
   1e484:	4680      	mov	r8, r0
    transfer.ui32Instr       = offset;
   1e486:	f04f 0a08 	mov.w	sl, #8
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e48a:	921b      	str	r2, [sp, #108]	@ 0x6c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e48c:	a916      	add	r1, sp, #88	@ 0x58
    transfer.ui32NumBytes    = size;
   1e48e:	2202      	movs	r2, #2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e490:	6878      	ldr	r0, [r7, #4]
{
   1e492:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
   1e496:	ee10 ba90 	vmov	fp, s1
    transfer.ui32NumBytes    = size;
   1e49a:	9219      	str	r2, [sp, #100]	@ 0x64
    transfer.ui32Instr       = offset;
   1e49c:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
    transfer.ui32InstrLen    = offsetlen;
   1e4a0:	e9cd 9616 	strd	r9, r6, [sp, #88]	@ 0x58
    transfer.ui32PauseCondition = 0;
   1e4a4:	ed8d 8b1e 	vstr	d8, [sp, #120]	@ 0x78
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e4a8:	f88d 4068 	strb.w	r4, [sp, #104]	@ 0x68
    transfer.bContinue       = false;
   1e4ac:	f8ad 4074 	strh.w	r4, [sp, #116]	@ 0x74
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e4b0:	f001 fec8 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32Instr       = offset;
   1e4b4:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e4b8:	4b39      	ldr	r3, [pc, #228]	@ (1e5a0 <datalogger_profile_mode+0x138>)
    sps_count++;
   1e4ba:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 1e5a8 <datalogger_profile_mode+0x140>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e4be:	931b      	str	r3, [sp, #108]	@ 0x6c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e4c0:	a916      	add	r1, sp, #88	@ 0x58
    transfer.ui32NumBytes    = size;
   1e4c2:	230c      	movs	r3, #12
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e4c4:	6878      	ldr	r0, [r7, #4]
    transfer.ui32NumBytes    = size;
   1e4c6:	9319      	str	r3, [sp, #100]	@ 0x64
    transfer.ui32PauseCondition = 0;
   1e4c8:	ed8d 8b1e 	vstr	d8, [sp, #120]	@ 0x78
    transfer.ui32InstrLen    = offsetlen;
   1e4cc:	e9cd 9616 	strd	r9, r6, [sp, #88]	@ 0x58
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e4d0:	f88d 4068 	strb.w	r4, [sp, #104]	@ 0x68
    transfer.bContinue       = false;
   1e4d4:	f8ad 4074 	strh.w	r4, [sp, #116]	@ 0x74
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e4d8:	f001 feb4 	bl	20244 <am_hal_iom_blocking_transfer>
    sps_count++;
   1e4dc:	f8ba 2000 	ldrh.w	r2, [sl]
    uint8_t len = strlen (filename);
   1e4e0:	4640      	mov	r0, r8
    sps_count++;
   1e4e2:	4432      	add	r2, r6
   1e4e4:	f8aa 2000 	strh.w	r2, [sl]
    uint8_t len = strlen (filename);
   1e4e8:	f7ee fbca 	bl	cc80 <strlen>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e4ec:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 1e590 <datalogger_profile_mode+0x128>
    transfer.ui32NumBytes    = size;
   1e4f0:	b2c0      	uxtb	r0, r0
   1e4f2:	9019      	str	r0, [sp, #100]	@ 0x64
    transfer.ui32Instr       = offset;
   1e4f4:	220b      	movs	r2, #11
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e4f6:	a916      	add	r1, sp, #88	@ 0x58
   1e4f8:	6878      	ldr	r0, [r7, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e4fa:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e4fe:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
    transfer.ui32Instr       = offset;
   1e502:	9218      	str	r2, [sp, #96]	@ 0x60
    transfer.ui32PauseCondition = 0;
   1e504:	ed8d 8b1e 	vstr	d8, [sp, #120]	@ 0x78
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e508:	f88d 4068 	strb.w	r4, [sp, #104]	@ 0x68
    transfer.bContinue       = false;
   1e50c:	f8ad 4074 	strh.w	r4, [sp, #116]	@ 0x74
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e510:	f001 fe98 	bl	20244 <am_hal_iom_blocking_transfer>
    char data[128] = {0};
   1e514:	ab16      	add	r3, sp, #88	@ 0x58
   1e516:	2280      	movs	r2, #128	@ 0x80
   1e518:	4621      	mov	r1, r4
   1e51a:	4618      	mov	r0, r3
   1e51c:	f005 ff38 	bl	24390 <memset>
    am_util_stdio_sprintf(  data, "%u\t  %.4f\t  %.4f\t\t %02d:%02d:%02d\n",
   1e520:	79ab      	ldrb	r3, [r5, #6]
   1e522:	f8ba 8000 	ldrh.w	r8, [sl]
   1e526:	9306      	str	r3, [sp, #24]
   1e528:	796b      	ldrb	r3, [r5, #5]
   1e52a:	9305      	str	r3, [sp, #20]
   1e52c:	792b      	ldrb	r3, [r5, #4]
   1e52e:	9304      	str	r3, [sp, #16]
   1e530:	4658      	mov	r0, fp
   1e532:	f7ed ff49 	bl	c3c8 <__aeabi_f2d>
   1e536:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e53a:	9809      	ldr	r0, [sp, #36]	@ 0x24
   1e53c:	f7ed ff44 	bl	c3c8 <__aeabi_f2d>
   1e540:	4642      	mov	r2, r8
   1e542:	e9cd 0100 	strd	r0, r1, [sp]
   1e546:	4917      	ldr	r1, [pc, #92]	@ (1e5a4 <datalogger_profile_mode+0x13c>)
   1e548:	a816      	add	r0, sp, #88	@ 0x58
   1e54a:	f7f2 fd7f 	bl	1104c <am_util_stdio_sprintf>
    datalogger_writefile(data);
   1e54e:	a816      	add	r0, sp, #88	@ 0x58
   1e550:	f7ff fc8a 	bl	1de68 <datalogger_writefile>
    transfer.ui32Instr       = offset;
   1e554:	2211      	movs	r2, #17
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e556:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e55a:	6878      	ldr	r0, [r7, #4]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e55c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e560:	a90c      	add	r1, sp, #48	@ 0x30
    transfer.ui32PauseCondition = 0;
   1e562:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
    transfer.ui32Instr       = offset;
   1e566:	e9cd 620d 	strd	r6, r2, [sp, #52]	@ 0x34
    uint8_t data = 0x00;
   1e56a:	f88d 402f 	strb.w	r4, [sp, #47]	@ 0x2f
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e56e:	f88d 4040 	strb.w	r4, [sp, #64]	@ 0x40
    transfer.ui32NumBytes    = size;
   1e572:	960f      	str	r6, [sp, #60]	@ 0x3c
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e574:	9311      	str	r3, [sp, #68]	@ 0x44
    transfer.bContinue       = false;
   1e576:	f8ad 404c 	strh.w	r4, [sp, #76]	@ 0x4c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e57a:	f001 fe63 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1e57e:	b037      	add	sp, #220	@ 0xdc
   1e580:	ecbd 8b02 	vpop	{d8}
   1e584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1e590:	0000002a 	.word	0x0000002a
   1e594:	00000001 	.word	0x00000001
   1e598:	10054958 	.word	0x10054958
   1e59c:	00030468 	.word	0x00030468
   1e5a0:	000305b4 	.word	0x000305b4
   1e5a4:	00030670 	.word	0x00030670
   1e5a8:	10054956 	.word	0x10054956
   1e5ac:	00000000 	.word	0x00000000

0001e5b0 <datalogger_park_create_file>:
{
   1e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5b4:	ed2d 8b02 	vpush	{d8}
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e5b8:	4e55      	ldr	r6, [pc, #340]	@ (1e710 <datalogger_park_create_file+0x160>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e5ba:	4b56      	ldr	r3, [pc, #344]	@ (1e714 <datalogger_park_create_file+0x164>)
   1e5bc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 1e730 <datalogger_park_create_file+0x180>
{
   1e5c0:	b093      	sub	sp, #76	@ 0x4c
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e5c2:	2400      	movs	r4, #0
    transfer.ui32PauseCondition = 0;
   1e5c4:	f04f 0800 	mov.w	r8, #0
   1e5c8:	f04f 0900 	mov.w	r9, #0
    transfer.ui32Instr       = offset;
   1e5cc:	2701      	movs	r7, #1
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e5ce:	f04f 0a2a 	mov.w	sl, #42	@ 0x2a
    transfer.ui32Instr       = offset;
   1e5d2:	2208      	movs	r2, #8
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e5d4:	930d      	str	r3, [sp, #52]	@ 0x34
{
   1e5d6:	9003      	str	r0, [sp, #12]
    transfer.ui32NumBytes    = size;
   1e5d8:	2302      	movs	r3, #2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e5da:	a908      	add	r1, sp, #32
   1e5dc:	6870      	ldr	r0, [r6, #4]
    transfer.ui32NumBytes    = size;
   1e5de:	930b      	str	r3, [sp, #44]	@ 0x2c
    transfer.ui32Instr       = offset;
   1e5e0:	e9cd 7209 	strd	r7, r2, [sp, #36]	@ 0x24
    transfer.ui32NumBytes    = size;
   1e5e4:	2509      	movs	r5, #9
    transfer.ui32PauseCondition = 0;
   1e5e6:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e5ea:	f8cd a020 	str.w	sl, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e5ee:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1e5f2:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e5f6:	f001 fe25 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32NumBytes    = size;
   1e5fa:	2307      	movs	r3, #7
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e5fc:	a908      	add	r1, sp, #32
   1e5fe:	6870      	ldr	r0, [r6, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e600:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.ui32NumBytes    = size;
   1e604:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e608:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.ui32InstrLen    = offsetlen;
   1e60c:	e9cd a708 	strd	sl, r7, [sp, #32]
    transfer.bContinue       = false;
   1e610:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e614:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e618:	f001 fe14 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32Instr       = offset;
   1e61c:	2208      	movs	r2, #8
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e61e:	a908      	add	r1, sp, #32
   1e620:	6870      	ldr	r0, [r6, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e622:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
    transfer.ui32NumBytes    = size;
   1e626:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e62a:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.ui32InstrLen    = offsetlen;
   1e62e:	e9cd a708 	strd	sl, r7, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e632:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1e636:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e63a:	f001 fe03 	bl	20244 <am_hal_iom_blocking_transfer>
    artemis_rtc_get_time(&time);
   1e63e:	a805      	add	r0, sp, #20
   1e640:	f7ff faca 	bl	1dbd8 <artemis_rtc_get_time>
    sprintf (filename, "%d_park_%02d.%02d.20%02d.txt", park_nr, time.month, time.day, time.year);
   1e644:	4d34      	ldr	r5, [pc, #208]	@ (1e718 <datalogger_park_create_file+0x168>)
   1e646:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e64a:	9301      	str	r3, [sp, #4]
   1e64c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1e650:	9a03      	ldr	r2, [sp, #12]
   1e652:	4932      	ldr	r1, [pc, #200]	@ (1e71c <datalogger_park_create_file+0x16c>)
   1e654:	9300      	str	r3, [sp, #0]
   1e656:	4628      	mov	r0, r5
   1e658:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1e65c:	f005 fd4c 	bl	240f8 <sprintf>
    uint8_t len = strlen(filename);
   1e660:	4628      	mov	r0, r5
   1e662:	f7ee fb0d 	bl	cc80 <strlen>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e666:	ed9f 8b28 	vldr	d8, [pc, #160]	@ 1e708 <datalogger_park_create_file+0x158>
    transfer.ui32Instr       = offset;
   1e66a:	2306      	movs	r3, #6
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e66c:	a908      	add	r1, sp, #32
    transfer.ui32NumBytes    = size;
   1e66e:	900b      	str	r0, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e670:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e672:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e674:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e678:	ed8d 8b08 	vstr	d8, [sp, #32]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e67c:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e680:	950d      	str	r5, [sp, #52]	@ 0x34
    transfer.bContinue       = false;
   1e682:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e686:	f001 fddd 	bl	20244 <am_hal_iom_blocking_transfer>
    uint8_t len = strlen (filename);
   1e68a:	4628      	mov	r0, r5
   1e68c:	f7ee faf8 	bl	cc80 <strlen>
    transfer.ui32Instr       = offset;
   1e690:	230b      	movs	r3, #11
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e692:	a908      	add	r1, sp, #32
    transfer.ui32NumBytes    = size;
   1e694:	900b      	str	r0, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e696:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e698:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e69a:	ed8d 8b08 	vstr	d8, [sp, #32]
    transfer.ui32PauseCondition = 0;
   1e69e:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e6a2:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e6a6:	950d      	str	r5, [sp, #52]	@ 0x34
    transfer.bContinue       = false;
   1e6a8:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e6ac:	f001 fdca 	bl	20244 <am_hal_iom_blocking_transfer>
    datalogger_writefile("\nS.No.\t| Pressure(bar) | Temperature(°C) | Time-stamp\t\n");
   1e6b0:	481b      	ldr	r0, [pc, #108]	@ (1e720 <datalogger_park_create_file+0x170>)
   1e6b2:	f7ff fbd9 	bl	1de68 <datalogger_writefile>
    datalogger_writefile("=========================================================\n\n");
   1e6b6:	481b      	ldr	r0, [pc, #108]	@ (1e724 <datalogger_park_create_file+0x174>)
   1e6b8:	f7ff fbd6 	bl	1de68 <datalogger_writefile>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e6bc:	f10d 0313 	add.w	r3, sp, #19
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e6c0:	6870      	ldr	r0, [r6, #4]
    ARTEMIS_DEBUG_PRINTF("%s file created\n", filename);
   1e6c2:	4e19      	ldr	r6, [pc, #100]	@ (1e728 <datalogger_park_create_file+0x178>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e6c4:	930d      	str	r3, [sp, #52]	@ 0x34
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e6c6:	a908      	add	r1, sp, #32
    transfer.ui32Instr       = offset;
   1e6c8:	2311      	movs	r3, #17
   1e6ca:	930a      	str	r3, [sp, #40]	@ 0x28
    transfer.ui32PauseCondition = 0;
   1e6cc:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e6d0:	f8cd a020 	str.w	sl, [sp, #32]
    uint8_t data = 0x00;
   1e6d4:	f88d 4013 	strb.w	r4, [sp, #19]
    transfer.ui32InstrLen    = offsetlen;
   1e6d8:	9709      	str	r7, [sp, #36]	@ 0x24
    transfer.ui32NumBytes    = size;
   1e6da:	970b      	str	r7, [sp, #44]	@ 0x2c
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e6dc:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    transfer.bContinue       = false;
   1e6e0:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e6e4:	f001 fdae 	bl	20244 <am_hal_iom_blocking_transfer>
    ARTEMIS_DEBUG_PRINTF("%s file created\n", filename);
   1e6e8:	4629      	mov	r1, r5
   1e6ea:	4630      	mov	r0, r6
   1e6ec:	f7f2 fcbc 	bl	11068 <am_util_stdio_printf>
   1e6f0:	4630      	mov	r0, r6
   1e6f2:	4629      	mov	r1, r5
   1e6f4:	f7ff fc40 	bl	1df78 <datalogger_log_debug>
    park_count = 0;
   1e6f8:	4b0c      	ldr	r3, [pc, #48]	@ (1e72c <datalogger_park_create_file+0x17c>)
}
   1e6fa:	4628      	mov	r0, r5
    park_count = 0;
   1e6fc:	801c      	strh	r4, [r3, #0]
}
   1e6fe:	b013      	add	sp, #76	@ 0x4c
   1e700:	ecbd 8b02 	vpop	{d8}
   1e704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e708:	0000002a 	.word	0x0000002a
   1e70c:	00000001 	.word	0x00000001
   1e710:	10054958 	.word	0x10054958
   1e714:	00030468 	.word	0x00030468
   1e718:	1004ab80 	.word	0x1004ab80
   1e71c:	000306a0 	.word	0x000306a0
   1e720:	000305e0 	.word	0x000305e0
   1e724:	00030620 	.word	0x00030620
   1e728:	0003065c 	.word	0x0003065c
   1e72c:	10054954 	.word	0x10054954
   1e730:	00030694 	.word	0x00030694
   1e734:	00000000 	.word	0x00000000

0001e738 <datalogger_park_mode>:
{
   1e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e73c:	ed2d 8b02 	vpush	{d8}
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e740:	4f49      	ldr	r7, [pc, #292]	@ (1e868 <datalogger_park_mode+0x130>)
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e742:	4a4a      	ldr	r2, [pc, #296]	@ (1e86c <datalogger_park_mode+0x134>)
{
   1e744:	b0a7      	sub	sp, #156	@ 0x9c
    transfer.ui32PauseCondition = 0;
   1e746:	ed9f 8b44 	vldr	d8, [pc, #272]	@ 1e858 <datalogger_park_mode+0x120>
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e74a:	2400      	movs	r4, #0
    transfer.ui32InstrLen    = offsetlen;
   1e74c:	2601      	movs	r6, #1
{
   1e74e:	460d      	mov	r5, r1
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e750:	f04f 092a 	mov.w	r9, #42	@ 0x2a
{
   1e754:	4680      	mov	r8, r0
    transfer.ui32Instr       = offset;
   1e756:	f04f 0a08 	mov.w	sl, #8
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e75a:	921b      	str	r2, [sp, #108]	@ 0x6c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e75c:	a916      	add	r1, sp, #88	@ 0x58
    transfer.ui32NumBytes    = size;
   1e75e:	2202      	movs	r2, #2
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e760:	6878      	ldr	r0, [r7, #4]
{
   1e762:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
   1e766:	ee10 ba90 	vmov	fp, s1
    transfer.ui32NumBytes    = size;
   1e76a:	9219      	str	r2, [sp, #100]	@ 0x64
    transfer.ui32Instr       = offset;
   1e76c:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
    transfer.ui32InstrLen    = offsetlen;
   1e770:	e9cd 9616 	strd	r9, r6, [sp, #88]	@ 0x58
    transfer.ui32PauseCondition = 0;
   1e774:	ed8d 8b1e 	vstr	d8, [sp, #120]	@ 0x78
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e778:	f88d 4068 	strb.w	r4, [sp, #104]	@ 0x68
    transfer.bContinue       = false;
   1e77c:	f8ad 4074 	strh.w	r4, [sp, #116]	@ 0x74
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e780:	f001 fd60 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32Instr       = offset;
   1e784:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e788:	4b39      	ldr	r3, [pc, #228]	@ (1e870 <datalogger_park_mode+0x138>)
    park_count++;
   1e78a:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 1e878 <datalogger_park_mode+0x140>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e78e:	931b      	str	r3, [sp, #108]	@ 0x6c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e790:	a916      	add	r1, sp, #88	@ 0x58
    transfer.ui32NumBytes    = size;
   1e792:	2309      	movs	r3, #9
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e794:	6878      	ldr	r0, [r7, #4]
    transfer.ui32NumBytes    = size;
   1e796:	9319      	str	r3, [sp, #100]	@ 0x64
    transfer.ui32PauseCondition = 0;
   1e798:	ed8d 8b1e 	vstr	d8, [sp, #120]	@ 0x78
    transfer.ui32InstrLen    = offsetlen;
   1e79c:	e9cd 9616 	strd	r9, r6, [sp, #88]	@ 0x58
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e7a0:	f88d 4068 	strb.w	r4, [sp, #104]	@ 0x68
    transfer.bContinue       = false;
   1e7a4:	f8ad 4074 	strh.w	r4, [sp, #116]	@ 0x74
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e7a8:	f001 fd4c 	bl	20244 <am_hal_iom_blocking_transfer>
    park_count++;
   1e7ac:	f8ba 2000 	ldrh.w	r2, [sl]
    uint8_t len = strlen (filename);
   1e7b0:	4640      	mov	r0, r8
    park_count++;
   1e7b2:	4432      	add	r2, r6
   1e7b4:	f8aa 2000 	strh.w	r2, [sl]
    uint8_t len = strlen (filename);
   1e7b8:	f7ee fa62 	bl	cc80 <strlen>
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e7bc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 1e860 <datalogger_park_mode+0x128>
    transfer.ui32NumBytes    = size;
   1e7c0:	b2c0      	uxtb	r0, r0
   1e7c2:	9019      	str	r0, [sp, #100]	@ 0x64
    transfer.ui32Instr       = offset;
   1e7c4:	220b      	movs	r2, #11
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e7c6:	a916      	add	r1, sp, #88	@ 0x58
   1e7c8:	6878      	ldr	r0, [r7, #4]
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e7ca:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e7ce:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
    transfer.ui32Instr       = offset;
   1e7d2:	9218      	str	r2, [sp, #96]	@ 0x60
    transfer.ui32PauseCondition = 0;
   1e7d4:	ed8d 8b1e 	vstr	d8, [sp, #120]	@ 0x78
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e7d8:	f88d 4068 	strb.w	r4, [sp, #104]	@ 0x68
    transfer.bContinue       = false;
   1e7dc:	f8ad 4074 	strh.w	r4, [sp, #116]	@ 0x74
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e7e0:	f001 fd30 	bl	20244 <am_hal_iom_blocking_transfer>
    char data[64] = {0};
   1e7e4:	ab16      	add	r3, sp, #88	@ 0x58
   1e7e6:	2240      	movs	r2, #64	@ 0x40
   1e7e8:	4621      	mov	r1, r4
   1e7ea:	4618      	mov	r0, r3
   1e7ec:	f005 fdd0 	bl	24390 <memset>
    am_util_stdio_sprintf(  data, "%u\t  %.4f\t  %.4f\t\t %02d:%02d:%02d\n",
   1e7f0:	79ab      	ldrb	r3, [r5, #6]
   1e7f2:	f8ba 8000 	ldrh.w	r8, [sl]
   1e7f6:	9306      	str	r3, [sp, #24]
   1e7f8:	796b      	ldrb	r3, [r5, #5]
   1e7fa:	9305      	str	r3, [sp, #20]
   1e7fc:	792b      	ldrb	r3, [r5, #4]
   1e7fe:	9304      	str	r3, [sp, #16]
   1e800:	4658      	mov	r0, fp
   1e802:	f7ed fde1 	bl	c3c8 <__aeabi_f2d>
   1e806:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
   1e80c:	f7ed fddc 	bl	c3c8 <__aeabi_f2d>
   1e810:	4642      	mov	r2, r8
   1e812:	e9cd 0100 	strd	r0, r1, [sp]
   1e816:	4917      	ldr	r1, [pc, #92]	@ (1e874 <datalogger_park_mode+0x13c>)
   1e818:	a816      	add	r0, sp, #88	@ 0x58
   1e81a:	f7f2 fc17 	bl	1104c <am_util_stdio_sprintf>
    datalogger_writefile(data);
   1e81e:	a816      	add	r0, sp, #88	@ 0x58
   1e820:	f7ff fb22 	bl	1de68 <datalogger_writefile>
    transfer.ui32Instr       = offset;
   1e824:	2211      	movs	r2, #17
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e826:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e82a:	6878      	ldr	r0, [r7, #4]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e82c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e830:	a90c      	add	r1, sp, #48	@ 0x30
    transfer.ui32PauseCondition = 0;
   1e832:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
    transfer.ui32Instr       = offset;
   1e836:	e9cd 620d 	strd	r6, r2, [sp, #52]	@ 0x34
    uint8_t data = 0x00;
   1e83a:	f88d 402f 	strb.w	r4, [sp, #47]	@ 0x2f
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e83e:	f88d 4040 	strb.w	r4, [sp, #64]	@ 0x40
    transfer.ui32NumBytes    = size;
   1e842:	960f      	str	r6, [sp, #60]	@ 0x3c
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e844:	9311      	str	r3, [sp, #68]	@ 0x44
    transfer.bContinue       = false;
   1e846:	f8ad 404c 	strh.w	r4, [sp, #76]	@ 0x4c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e84a:	f001 fcfb 	bl	20244 <am_hal_iom_blocking_transfer>
}
   1e84e:	b027      	add	sp, #156	@ 0x9c
   1e850:	ecbd 8b02 	vpop	{d8}
   1e854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1e860:	0000002a 	.word	0x0000002a
   1e864:	00000001 	.word	0x00000001
   1e868:	10054958 	.word	0x10054958
   1e86c:	00030468 	.word	0x00030468
   1e870:	00030694 	.word	0x00030694
   1e874:	00030670 	.word	0x00030670
   1e878:	10054954 	.word	0x10054954
   1e87c:	00000000 	.word	0x00000000

0001e880 <datalogger_readfile>:
{
   1e880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e884:	ed2d 8b02 	vpush	{d8}
   1e888:	b08a      	sub	sp, #40	@ 0x28
   1e88a:	4605      	mov	r5, r0
   1e88c:	4614      	mov	r4, r2
   1e88e:	460e      	mov	r6, r1
    uint8_t len = strlen (filename);
   1e890:	f7ee f9f6 	bl	cc80 <strlen>
    transfer.ui32PauseCondition = 0;
   1e894:	ed9f 8b26 	vldr	d8, [pc, #152]	@ 1e930 <datalogger_readfile+0xb0>
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e898:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 1e93c <datalogger_readfile+0xbc>
    transfer.pui32TxBuffer   = (uint32_t*)pBuf;
   1e89c:	9505      	str	r5, [sp, #20]
    transfer.ui32NumBytes    = size;
   1e89e:	b2c0      	uxtb	r0, r0
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e8a0:	2301      	movs	r3, #1
   1e8a2:	222a      	movs	r2, #42	@ 0x2a
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e8a4:	2500      	movs	r5, #0
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e8a6:	e9cd 2300 	strd	r2, r3, [sp]
    transfer.ui32NumBytes    = size;
   1e8aa:	9003      	str	r0, [sp, #12]
    transfer.ui32Instr       = offset;
   1e8ac:	2309      	movs	r3, #9
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e8ae:	f8da 0004 	ldr.w	r0, [sl, #4]
    transfer.eDirection      = AM_HAL_IOM_TX;
   1e8b2:	f88d 5010 	strb.w	r5, [sp, #16]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e8b6:	4669      	mov	r1, sp
    transfer.ui32PauseCondition = 0;
   1e8b8:	ed8d 8b08 	vstr	d8, [sp, #32]
    transfer.bContinue       = false;
   1e8bc:	f8ad 501c 	strh.w	r5, [sp, #28]
    transfer.ui32Instr       = offset;
   1e8c0:	9302      	str	r3, [sp, #8]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e8c2:	f001 fcbf 	bl	20244 <am_hal_iom_blocking_transfer>
    while (bytes > 0)
   1e8c6:	b354      	cbz	r4, 1e91e <datalogger_readfile+0x9e>
   1e8c8:	f10a 0840 	add.w	r8, sl, #64	@ 0x40
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e8cc:	272a      	movs	r7, #42	@ 0x2a
    transfer.ui32InstrLen    = offsetlen;
   1e8ce:	46a9      	mov	r9, r5
    transfer.ui32NumBytes    = size;
   1e8d0:	2320      	movs	r3, #32
    transfer.eDirection      = AM_HAL_IOM_RX;
   1e8d2:	2201      	movs	r2, #1
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e8d4:	f8da 0004 	ldr.w	r0, [sl, #4]
    transfer.ui32NumBytes    = size;
   1e8d8:	9303      	str	r3, [sp, #12]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e8da:	4669      	mov	r1, sp
    transfer.ui32PauseCondition = 0;
   1e8dc:	ed8d 8b08 	vstr	d8, [sp, #32]
    transfer.ui32InstrLen    = offsetlen;
   1e8e0:	e9cd 7900 	strd	r7, r9, [sp]
    transfer.ui32Instr       = offset;
   1e8e4:	f8cd 9008 	str.w	r9, [sp, #8]
    transfer.eDirection      = AM_HAL_IOM_RX;
   1e8e8:	f88d 2010 	strb.w	r2, [sp, #16]
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1e8ec:	f8cd 8018 	str.w	r8, [sp, #24]
    transfer.bContinue       = false;
   1e8f0:	f8ad 901c 	strh.w	r9, [sp, #28]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e8f4:	f001 fca6 	bl	20244 <am_hal_iom_blocking_transfer>
            contents[i+j] = (char) module.rxbuffer[i];
   1e8f8:	f89a 3040 	ldrb.w	r3, [sl, #64]	@ 0x40
   1e8fc:	5573      	strb	r3, [r6, r5]
            if (bytes == 0)
   1e8fe:	1e63      	subs	r3, r4, #1
   1e900:	d00d      	beq.n	1e91e <datalogger_readfile+0x9e>
   1e902:	480d      	ldr	r0, [pc, #52]	@ (1e938 <datalogger_readfile+0xb8>)
   1e904:	f1a4 0c21 	sub.w	ip, r4, #33	@ 0x21
   1e908:	1972      	adds	r2, r6, r5
        for (i=0; i<LOGGER_BUFFER_SIZE; i++)
   1e90a:	461c      	mov	r4, r3
            bytes--;
   1e90c:	3b01      	subs	r3, #1
        for (i=0; i<LOGGER_BUFFER_SIZE; i++)
   1e90e:	4563      	cmp	r3, ip
   1e910:	d00a      	beq.n	1e928 <datalogger_readfile+0xa8>
            contents[i+j] = (char) module.rxbuffer[i];
   1e912:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   1e916:	f802 1f01 	strb.w	r1, [r2, #1]!
            if (bytes == 0)
   1e91a:	2b00      	cmp	r3, #0
   1e91c:	d1f5      	bne.n	1e90a <datalogger_readfile+0x8a>
}
   1e91e:	b00a      	add	sp, #40	@ 0x28
   1e920:	ecbd 8b02 	vpop	{d8}
   1e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        j += i;
   1e928:	3520      	adds	r5, #32
    while (bytes > 0)
   1e92a:	e7d1      	b.n	1e8d0 <datalogger_readfile+0x50>
   1e92c:	f3af 8000 	nop.w
	...
   1e938:	10054998 	.word	0x10054998
   1e93c:	10054958 	.word	0x10054958

0001e940 <datalogger_read_test_profile>:
{
   1e940:	b510      	push	{r4, lr}
    if (reset)
   1e942:	b148      	cbz	r0, 1e958 <datalogger_read_test_profile+0x18>
        ARTEMIS_DEBUG_PRINTF("DATALOGGER :: Resetting test profile pressure\n");
   1e944:	481a      	ldr	r0, [pc, #104]	@ (1e9b0 <datalogger_read_test_profile+0x70>)
   1e946:	f7f2 fb8f 	bl	11068 <am_util_stdio_printf>
   1e94a:	4819      	ldr	r0, [pc, #100]	@ (1e9b0 <datalogger_read_test_profile+0x70>)
   1e94c:	f7ff fb14 	bl	1df78 <datalogger_log_debug>
        test_buffer = &test_buf[0];
   1e950:	4b18      	ldr	r3, [pc, #96]	@ (1e9b4 <datalogger_read_test_profile+0x74>)
   1e952:	4a19      	ldr	r2, [pc, #100]	@ (1e9b8 <datalogger_read_test_profile+0x78>)
   1e954:	601a      	str	r2, [r3, #0]
}
   1e956:	bd10      	pop	{r4, pc}
        ARTEMIS_DEBUG_PRINTF("DATALOGGER :: Reading test profile pressure wait please\n");
   1e958:	4818      	ldr	r0, [pc, #96]	@ (1e9bc <datalogger_read_test_profile+0x7c>)
   1e95a:	f7f2 fb85 	bl	11068 <am_util_stdio_printf>
   1e95e:	4817      	ldr	r0, [pc, #92]	@ (1e9bc <datalogger_read_test_profile+0x7c>)
   1e960:	f7ff fb0a 	bl	1df78 <datalogger_log_debug>
        size = datalogger_filesize(filename);
   1e964:	4816      	ldr	r0, [pc, #88]	@ (1e9c0 <datalogger_read_test_profile+0x80>)
   1e966:	f7ff f9bf 	bl	1dce8 <datalogger_filesize>
        if (size <= 0)
   1e96a:	b283      	uxth	r3, r0
   1e96c:	b1ab      	cbz	r3, 1e99a <datalogger_read_test_profile+0x5a>
        ARTEMIS_DEBUG_PRINTF("DATALOGGER :: file size = %u\n", size);
   1e96e:	b284      	uxth	r4, r0
   1e970:	4621      	mov	r1, r4
   1e972:	4814      	ldr	r0, [pc, #80]	@ (1e9c4 <datalogger_read_test_profile+0x84>)
   1e974:	f7f2 fb78 	bl	11068 <am_util_stdio_printf>
   1e978:	4621      	mov	r1, r4
   1e97a:	4812      	ldr	r0, [pc, #72]	@ (1e9c4 <datalogger_read_test_profile+0x84>)
   1e97c:	f7ff fafc 	bl	1df78 <datalogger_log_debug>
        datalogger_readfile(filename, test_buf , size);
   1e980:	4622      	mov	r2, r4
   1e982:	490d      	ldr	r1, [pc, #52]	@ (1e9b8 <datalogger_read_test_profile+0x78>)
   1e984:	480e      	ldr	r0, [pc, #56]	@ (1e9c0 <datalogger_read_test_profile+0x80>)
   1e986:	f7ff ff7b 	bl	1e880 <datalogger_readfile>
        ARTEMIS_DEBUG_PRINTF("DATALOGGER :: Reading test profile pressure DONE\n");
   1e98a:	480f      	ldr	r0, [pc, #60]	@ (1e9c8 <datalogger_read_test_profile+0x88>)
   1e98c:	f7f2 fb6c 	bl	11068 <am_util_stdio_printf>
}
   1e990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ARTEMIS_DEBUG_PRINTF("DATALOGGER :: Reading test profile pressure DONE\n");
   1e994:	480c      	ldr	r0, [pc, #48]	@ (1e9c8 <datalogger_read_test_profile+0x88>)
   1e996:	f7ff baef 	b.w	1df78 <datalogger_log_debug>
            ARTEMIS_DEBUG_PRINTF("DATALOGGER :: ERROR : file size = %u\n", size);
   1e99a:	461c      	mov	r4, r3
   1e99c:	4619      	mov	r1, r3
   1e99e:	480b      	ldr	r0, [pc, #44]	@ (1e9cc <datalogger_read_test_profile+0x8c>)
   1e9a0:	f7f2 fb62 	bl	11068 <am_util_stdio_printf>
   1e9a4:	4621      	mov	r1, r4
   1e9a6:	4809      	ldr	r0, [pc, #36]	@ (1e9cc <datalogger_read_test_profile+0x8c>)
}
   1e9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ARTEMIS_DEBUG_PRINTF("DATALOGGER :: ERROR : file size = %u\n", size);
   1e9ac:	f7ff bae4 	b.w	1df78 <datalogger_log_debug>
   1e9b0:	000306c0 	.word	0x000306c0
   1e9b4:	100023ec 	.word	0x100023ec
   1e9b8:	1004ac00 	.word	0x1004ac00
   1e9bc:	000306f0 	.word	0x000306f0
   1e9c0:	0003072c 	.word	0x0003072c
   1e9c4:	00030768 	.word	0x00030768
   1e9c8:	00030788 	.word	0x00030788
   1e9cc:	00030740 	.word	0x00030740

0001e9d0 <datalogger_fw_version>:
{
   1e9d0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e9d4:	4e1a      	ldr	r6, [pc, #104]	@ (1ea40 <datalogger_fw_version+0x70>)
{
   1e9d6:	b08c      	sub	sp, #48	@ 0x30
    transfer.ui32InstrLen    = offsetlen;
   1e9d8:	2401      	movs	r4, #1
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1e9da:	f04f 082a 	mov.w	r8, #42	@ 0x2a
    transfer.ui32Instr       = offset;
   1e9de:	2302      	movs	r3, #2
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1e9e0:	f10d 0707 	add.w	r7, sp, #7
    transfer.bContinue       = false;
   1e9e4:	2500      	movs	r5, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e9e6:	a902      	add	r1, sp, #8
    transfer.ui32PauseCondition = 0;
   1e9e8:	f04f 0a00 	mov.w	sl, #0
   1e9ec:	f04f 0b00 	mov.w	fp, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1e9f0:	6870      	ldr	r0, [r6, #4]
    transfer.ui32Instr       = offset;
   1e9f2:	9304      	str	r3, [sp, #16]
    transfer.ui32InstrLen    = offsetlen;
   1e9f4:	e9cd 8402 	strd	r8, r4, [sp, #8]
    transfer.eDirection      = AM_HAL_IOM_RX;
   1e9f8:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.ui32NumBytes    = size;
   1e9fc:	9405      	str	r4, [sp, #20]
    transfer.ui32PauseCondition = 0;
   1e9fe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1ea02:	9708      	str	r7, [sp, #32]
    transfer.bContinue       = false;
   1ea04:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea08:	f001 fc1c 	bl	20244 <am_hal_iom_blocking_transfer>
    transfer.ui32InstrLen    = offsetlen;
   1ea0c:	9403      	str	r4, [sp, #12]
    transfer.eDirection      = AM_HAL_IOM_RX;
   1ea0e:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.ui32NumBytes    = size;
   1ea12:	9405      	str	r4, [sp, #20]
    transfer.ui32Instr       = offset;
   1ea14:	2303      	movs	r3, #3
    fw |= (data&0xFF) << 8 ;
   1ea16:	f89d 4007 	ldrb.w	r4, [sp, #7]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea1a:	6870      	ldr	r0, [r6, #4]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1ea1c:	f8cd 8008 	str.w	r8, [sp, #8]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea20:	a902      	add	r1, sp, #8
    transfer.ui32PauseCondition = 0;
   1ea22:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1ea26:	9708      	str	r7, [sp, #32]
    transfer.bContinue       = false;
   1ea28:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
    transfer.ui32Instr       = offset;
   1ea2c:	9304      	str	r3, [sp, #16]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea2e:	f001 fc09 	bl	20244 <am_hal_iom_blocking_transfer>
    fw |= (data&0xFF) ;
   1ea32:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fw |= (data&0xFF) << 8 ;
   1ea36:	0224      	lsls	r4, r4, #8
}
   1ea38:	4320      	orrs	r0, r4
   1ea3a:	b00c      	add	sp, #48	@ 0x30
   1ea3c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   1ea40:	10054958 	.word	0x10054958

0001ea44 <datalogger_device_info>:
{
   1ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_util_stdio_printf("\nDatalogger Qwiic Device Info\n");
   1ea48:	4835      	ldr	r0, [pc, #212]	@ (1eb20 <datalogger_device_info+0xdc>)
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea4a:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 1eb48 <datalogger_device_info+0x104>
{
   1ea4e:	b08d      	sub	sp, #52	@ 0x34
    am_util_stdio_printf("\nDatalogger Qwiic Device Info\n");
   1ea50:	f7f2 fb0a 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("*******************************\n");
   1ea54:	4833      	ldr	r0, [pc, #204]	@ (1eb24 <datalogger_device_info+0xe0>)
   1ea56:	f7f2 fb07 	bl	11068 <am_util_stdio_printf>
    transfer.ui32InstrLen    = offsetlen;
   1ea5a:	2401      	movs	r4, #1
    transfer.ui32Instr       = offset;
   1ea5c:	2500      	movs	r5, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea5e:	a902      	add	r1, sp, #8
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1ea60:	f04f 092a 	mov.w	r9, #42	@ 0x2a
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1ea64:	f10d 0707 	add.w	r7, sp, #7
    transfer.ui32PauseCondition = 0;
   1ea68:	f04f 0a00 	mov.w	sl, #0
   1ea6c:	f04f 0b00 	mov.w	fp, #0
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea70:	f8d8 0004 	ldr.w	r0, [r8, #4]
    transfer.ui32Instr       = offset;
   1ea74:	9504      	str	r5, [sp, #16]
    transfer.bContinue       = false;
   1ea76:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
    transfer.ui32InstrLen    = offsetlen;
   1ea7a:	e9cd 9402 	strd	r9, r4, [sp, #8]
    transfer.ui32PauseCondition = 0;
   1ea7e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
    transfer.eDirection      = AM_HAL_IOM_RX;
   1ea82:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.ui32NumBytes    = size;
   1ea86:	9405      	str	r4, [sp, #20]
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1ea88:	9708      	str	r7, [sp, #32]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ea8a:	f001 fbdb 	bl	20244 <am_hal_iom_blocking_transfer>
    return unique_id;
   1ea8e:	f89d 6007 	ldrb.w	r6, [sp, #7]
    am_util_stdio_printf("Device Unique ID\t: ");
   1ea92:	4825      	ldr	r0, [pc, #148]	@ (1eb28 <datalogger_device_info+0xe4>)
   1ea94:	f7f2 fae8 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("0x%02X", id);
   1ea98:	4631      	mov	r1, r6
   1ea9a:	4824      	ldr	r0, [pc, #144]	@ (1eb2c <datalogger_device_info+0xe8>)
   1ea9c:	f7f2 fae4 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("\n");
   1eaa0:	4823      	ldr	r0, [pc, #140]	@ (1eb30 <datalogger_device_info+0xec>)
   1eaa2:	f7f2 fae1 	bl	11068 <am_util_stdio_printf>
    uint16_t fw = datalogger_fw_version();
   1eaa6:	f7ff ff93 	bl	1e9d0 <datalogger_fw_version>
   1eaaa:	4606      	mov	r6, r0
    am_util_stdio_printf("Device FW Version\t: ");
   1eaac:	4821      	ldr	r0, [pc, #132]	@ (1eb34 <datalogger_device_info+0xf0>)
   1eaae:	f7f2 fadb 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("%u.%u", fw>>8&0xff, fw&0xff);
   1eab2:	b2f2      	uxtb	r2, r6
   1eab4:	f3c6 210f 	ubfx	r1, r6, #8, #16
   1eab8:	481f      	ldr	r0, [pc, #124]	@ (1eb38 <datalogger_device_info+0xf4>)
   1eaba:	f7f2 fad5 	bl	11068 <am_util_stdio_printf>
    am_util_stdio_printf("\n");
   1eabe:	481c      	ldr	r0, [pc, #112]	@ (1eb30 <datalogger_device_info+0xec>)
   1eac0:	f7f2 fad2 	bl	11068 <am_util_stdio_printf>
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1eac4:	a902      	add	r1, sp, #8
   1eac6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    uint8_t ret = 0x00;
   1eaca:	f88d 5007 	strb.w	r5, [sp, #7]
    transfer.bContinue       = false;
   1eace:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
    transfer.ui32PauseCondition = 0;
   1ead2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
    transfer.ui32Instr       = offset;
   1ead6:	e9cd 4403 	strd	r4, r4, [sp, #12]
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1eada:	f8cd 9008 	str.w	r9, [sp, #8]
    transfer.eDirection      = AM_HAL_IOM_RX;
   1eade:	f88d 4018 	strb.w	r4, [sp, #24]
    transfer.ui32NumBytes    = size;
   1eae2:	9405      	str	r4, [sp, #20]
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1eae4:	9708      	str	r7, [sp, #32]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1eae6:	f001 fbad 	bl	20244 <am_hal_iom_blocking_transfer>
    return ret;
   1eaea:	f89d 5007 	ldrb.w	r5, [sp, #7]
    am_util_stdio_printf("Device Status Info\t: ");
   1eaee:	4813      	ldr	r0, [pc, #76]	@ (1eb3c <datalogger_device_info+0xf8>)
   1eaf0:	f7f2 faba 	bl	11068 <am_util_stdio_printf>
    if (status & 0x01)
   1eaf4:	4025      	ands	r5, r4
   1eaf6:	d009      	beq.n	1eb0c <datalogger_device_info+0xc8>
        am_util_stdio_printf("SD init Good");
   1eaf8:	4811      	ldr	r0, [pc, #68]	@ (1eb40 <datalogger_device_info+0xfc>)
   1eafa:	f7f2 fab5 	bl	11068 <am_util_stdio_printf>
        am_util_stdio_printf("\n");
   1eafe:	480c      	ldr	r0, [pc, #48]	@ (1eb30 <datalogger_device_info+0xec>)
   1eb00:	f7f2 fab2 	bl	11068 <am_util_stdio_printf>
        success = true;
   1eb04:	4620      	mov	r0, r4
}
   1eb06:	b00d      	add	sp, #52	@ 0x34
   1eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_util_stdio_printf("SD init Not Good");
   1eb0c:	480d      	ldr	r0, [pc, #52]	@ (1eb44 <datalogger_device_info+0x100>)
   1eb0e:	f7f2 faab 	bl	11068 <am_util_stdio_printf>
        am_util_stdio_printf("\n");
   1eb12:	4807      	ldr	r0, [pc, #28]	@ (1eb30 <datalogger_device_info+0xec>)
   1eb14:	f7f2 faa8 	bl	11068 <am_util_stdio_printf>
        success = false;
   1eb18:	4628      	mov	r0, r5
}
   1eb1a:	b00d      	add	sp, #52	@ 0x34
   1eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb20:	000307bc 	.word	0x000307bc
   1eb24:	00030354 	.word	0x00030354
   1eb28:	000307dc 	.word	0x000307dc
   1eb2c:	000307f0 	.word	0x000307f0
   1eb30:	000305a0 	.word	0x000305a0
   1eb34:	000307f8 	.word	0x000307f8
   1eb38:	00030810 	.word	0x00030810
   1eb3c:	00030818 	.word	0x00030818
   1eb40:	00030830 	.word	0x00030830
   1eb44:	00030840 	.word	0x00030840
   1eb48:	10054958 	.word	0x10054958

0001eb4c <datalogger_init>:
{
   1eb4c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    i2c->address = LOGGER_I2C_ADDRESS;
   1eb50:	4d59      	ldr	r5, [pc, #356]	@ (1ecb8 <datalogger_init+0x16c>)
    i2c->iom.config.ui32ClockFreq = AM_HAL_IOM_400KHZ;
   1eb52:	4a5a      	ldr	r2, [pc, #360]	@ (1ecbc <datalogger_init+0x170>)
    i2c->address = LOGGER_I2C_ADDRESS;
   1eb54:	212a      	movs	r1, #42	@ 0x2a
{
   1eb56:	b08e      	sub	sp, #56	@ 0x38
   1eb58:	4604      	mov	r4, r0
    i2c->iom.config.pNBTxnBuf = NULL;
   1eb5a:	2300      	movs	r3, #0
    i2c->address = LOGGER_I2C_ADDRESS;
   1eb5c:	7029      	strb	r1, [r5, #0]
    artemis_iom_initialize(&i2c->iom);
   1eb5e:	1d28      	adds	r0, r5, #4
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
   1eb60:	2101      	movs	r1, #1
    i2c->iom.config.ui32NBTxnBufLength = 0;
   1eb62:	e9c5 3306 	strd	r3, r3, [r5, #24]
    i2c->iom.config.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
   1eb66:	7329      	strb	r1, [r5, #12]
    i2c->iom.config.ui32ClockFreq = AM_HAL_IOM_400KHZ;
   1eb68:	612a      	str	r2, [r5, #16]
    i2c->iom.module = iomNo;
   1eb6a:	722c      	strb	r4, [r5, #8]
    artemis_iom_initialize(&i2c->iom);
   1eb6c:	f7fc fd74 	bl	1b658 <artemis_iom_initialize>
    if (iomNo == 1)
   1eb70:	2c01      	cmp	r4, #1
   1eb72:	d074      	beq.n	1ec5e <datalogger_init+0x112>
    else if (iomNo == 4)
   1eb74:	2c04      	cmp	r4, #4
   1eb76:	d057      	beq.n	1ec28 <datalogger_init+0xdc>
        am_util_stdio_printf("DATALOGGER :: ERROR : init -> Select the iom number (1, 4)\n");
   1eb78:	4851      	ldr	r0, [pc, #324]	@ (1ecc0 <datalogger_init+0x174>)
   1eb7a:	f7f2 fa75 	bl	11068 <am_util_stdio_printf>
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1eb7e:	e9d5 0318 	ldrd	r0, r3, [r5, #96]	@ 0x60
   1eb82:	6819      	ldr	r1, [r3, #0]
   1eb84:	f000 fd4c 	bl	1f620 <am_hal_gpio_pinconfig>
   1eb88:	4601      	mov	r1, r0
   1eb8a:	2800      	cmp	r0, #0
   1eb8c:	d144      	bne.n	1ec18 <datalogger_init+0xcc>
	am_hal_gpio_output_clear(module.power.pin);
   1eb8e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
   1eb90:	484c      	ldr	r0, [pc, #304]	@ (1ecc4 <datalogger_init+0x178>)
        am_hal_systick_delay_us(100000);
   1eb92:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 1ed00 <datalogger_init+0x1b4>
	am_hal_gpio_output_clear(module.power.pin);
   1eb96:	08da      	lsrs	r2, r3, #3
   1eb98:	f002 0204 	and.w	r2, r2, #4
   1eb9c:	f003 031f 	and.w	r3, r3, #31
   1eba0:	2101      	movs	r1, #1
   1eba2:	fa01 f303 	lsl.w	r3, r1, r3
   1eba6:	5013      	str	r3, [r2, r0]
   1eba8:	2414      	movs	r4, #20
   1ebaa:	f10d 070f 	add.w	r7, sp, #15
    uint8_t ret = 0x00;
   1ebae:	2600      	movs	r6, #0
    transfer.ui32PauseCondition = 0;
   1ebb0:	f04f 0a00 	mov.w	sl, #0
   1ebb4:	f04f 0b00 	mov.w	fp, #0
   1ebb8:	e002      	b.n	1ebc0 <datalogger_init+0x74>
    } while ( ! (ret&0x01) && delay < 20);
   1ebba:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
   1ebbe:	d01b      	beq.n	1ebf8 <datalogger_init+0xac>
        am_hal_systick_delay_us(100000);
   1ebc0:	4640      	mov	r0, r8
   1ebc2:	f002 f8f7 	bl	20db4 <am_hal_systick_delay_us>
    transfer.ui32InstrLen    = offsetlen;
   1ebc6:	2301      	movs	r3, #1
    transfer.uPeerInfo.ui32I2CDevAddr = LOGGER_I2C_ADDRESS;
   1ebc8:	222a      	movs	r2, #42	@ 0x2a
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ebca:	6868      	ldr	r0, [r5, #4]
    transfer.ui32Instr       = offset;
   1ebcc:	9306      	str	r3, [sp, #24]
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ebce:	a904      	add	r1, sp, #16
    transfer.ui32InstrLen    = offsetlen;
   1ebd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    transfer.eDirection      = AM_HAL_IOM_RX;
   1ebd4:	f88d 3020 	strb.w	r3, [sp, #32]
    transfer.ui32NumBytes    = size;
   1ebd8:	9307      	str	r3, [sp, #28]
    transfer.ui32PauseCondition = 0;
   1ebda:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
    uint8_t ret = 0x00;
   1ebde:	f88d 600f 	strb.w	r6, [sp, #15]
    transfer.pui32RxBuffer   = (uint32_t*)pBuf;
   1ebe2:	970a      	str	r7, [sp, #40]	@ 0x28
    transfer.bContinue       = false;
   1ebe4:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
    am_hal_iom_blocking_transfer(module.i2c.iom.handle, &transfer);
   1ebe8:	f001 fb2c 	bl	20244 <am_hal_iom_blocking_transfer>
    return ret;
   1ebec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    } while ( ! (ret&0x01) && delay < 20);
   1ebf0:	07d2      	lsls	r2, r2, #31
   1ebf2:	f104 33ff 	add.w	r3, r4, #4294967295
   1ebf6:	d5e0      	bpl.n	1ebba <datalogger_init+0x6e>
    success = datalogger_device_info();
   1ebf8:	f7ff ff24 	bl	1ea44 <datalogger_device_info>
	am_hal_gpio_output_set(module.power.pin);
   1ebfc:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
   1ebfe:	4c32      	ldr	r4, [pc, #200]	@ (1ecc8 <datalogger_init+0x17c>)
   1ec00:	08da      	lsrs	r2, r3, #3
   1ec02:	2101      	movs	r1, #1
   1ec04:	f002 0204 	and.w	r2, r2, #4
   1ec08:	f003 031f 	and.w	r3, r3, #31
   1ec0c:	fa01 f303 	lsl.w	r3, r1, r3
   1ec10:	5113      	str	r3, [r2, r4]
}
   1ec12:	b00e      	add	sp, #56	@ 0x38
   1ec14:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(module.power.pin, *module.power.pinConfig));
   1ec18:	205f      	movs	r0, #95	@ 0x5f
   1ec1a:	9000      	str	r0, [sp, #0]
   1ec1c:	4b2b      	ldr	r3, [pc, #172]	@ (1eccc <datalogger_init+0x180>)
   1ec1e:	4a2c      	ldr	r2, [pc, #176]	@ (1ecd0 <datalogger_init+0x184>)
   1ec20:	482c      	ldr	r0, [pc, #176]	@ (1ecd4 <datalogger_init+0x188>)
   1ec22:	f7fc fb71 	bl	1b308 <artemis_debug_halerror>
   1ec26:	e7b2      	b.n	1eb8e <datalogger_init+0x42>
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM4_SCL, g_AM_BSP_GPIO_IOM4_SCL));
   1ec28:	492b      	ldr	r1, [pc, #172]	@ (1ecd8 <datalogger_init+0x18c>)
        module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_PRES_ON;
   1ec2a:	4a2c      	ldr	r2, [pc, #176]	@ (1ecdc <datalogger_init+0x190>)
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM4_SCL, g_AM_BSP_GPIO_IOM4_SCL));
   1ec2c:	6809      	ldr	r1, [r1, #0]
        module.power.pin = AM_BSP_GPIO_PRES_ON;
   1ec2e:	232c      	movs	r3, #44	@ 0x2c
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM4_SCL, g_AM_BSP_GPIO_IOM4_SCL));
   1ec30:	2027      	movs	r0, #39	@ 0x27
        module.power.pin = AM_BSP_GPIO_PRES_ON;
   1ec32:	e9c5 3218 	strd	r3, r2, [r5, #96]	@ 0x60
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM4_SCL, g_AM_BSP_GPIO_IOM4_SCL));
   1ec36:	f000 fcf3 	bl	1f620 <am_hal_gpio_pinconfig>
   1ec3a:	4601      	mov	r1, r0
   1ec3c:	bb58      	cbnz	r0, 1ec96 <datalogger_init+0x14a>
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM4_SDA, g_AM_BSP_GPIO_IOM4_SDA));
   1ec3e:	4b28      	ldr	r3, [pc, #160]	@ (1ece0 <datalogger_init+0x194>)
   1ec40:	2028      	movs	r0, #40	@ 0x28
   1ec42:	6819      	ldr	r1, [r3, #0]
   1ec44:	f000 fcec 	bl	1f620 <am_hal_gpio_pinconfig>
   1ec48:	4601      	mov	r1, r0
   1ec4a:	2800      	cmp	r0, #0
   1ec4c:	d097      	beq.n	1eb7e <datalogger_init+0x32>
   1ec4e:	2057      	movs	r0, #87	@ 0x57
   1ec50:	9000      	str	r0, [sp, #0]
   1ec52:	4b1e      	ldr	r3, [pc, #120]	@ (1eccc <datalogger_init+0x180>)
   1ec54:	4a1e      	ldr	r2, [pc, #120]	@ (1ecd0 <datalogger_init+0x184>)
   1ec56:	4823      	ldr	r0, [pc, #140]	@ (1ece4 <datalogger_init+0x198>)
   1ec58:	f7fc fb56 	bl	1b308 <artemis_debug_halerror>
   1ec5c:	e78f      	b.n	1eb7e <datalogger_init+0x32>
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1ec5e:	4922      	ldr	r1, [pc, #136]	@ (1ece8 <datalogger_init+0x19c>)
        module.power.pinConfig = (am_hal_gpio_pincfg_t *)&g_AM_BSP_GPIO_I2C_1_PWR;
   1ec60:	4a22      	ldr	r2, [pc, #136]	@ (1ecec <datalogger_init+0x1a0>)
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1ec62:	6809      	ldr	r1, [r1, #0]
        module.power.pin = AM_BSP_GPIO_I2C_1_PWR;
   1ec64:	2310      	movs	r3, #16
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1ec66:	2008      	movs	r0, #8
        module.power.pin = AM_BSP_GPIO_I2C_1_PWR;
   1ec68:	e9c5 3218 	strd	r3, r2, [r5, #96]	@ 0x60
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1ec6c:	f000 fcd8 	bl	1f620 <am_hal_gpio_pinconfig>
   1ec70:	4601      	mov	r1, r0
   1ec72:	b9c0      	cbnz	r0, 1eca6 <datalogger_init+0x15a>
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SDA, g_AM_BSP_GPIO_IOM1_SDA));
   1ec74:	4b1e      	ldr	r3, [pc, #120]	@ (1ecf0 <datalogger_init+0x1a4>)
   1ec76:	2009      	movs	r0, #9
   1ec78:	6819      	ldr	r1, [r3, #0]
   1ec7a:	f000 fcd1 	bl	1f620 <am_hal_gpio_pinconfig>
   1ec7e:	4601      	mov	r1, r0
   1ec80:	2800      	cmp	r0, #0
   1ec82:	f43f af7c 	beq.w	1eb7e <datalogger_init+0x32>
   1ec86:	2050      	movs	r0, #80	@ 0x50
   1ec88:	9000      	str	r0, [sp, #0]
   1ec8a:	4b10      	ldr	r3, [pc, #64]	@ (1eccc <datalogger_init+0x180>)
   1ec8c:	4a10      	ldr	r2, [pc, #64]	@ (1ecd0 <datalogger_init+0x184>)
   1ec8e:	4819      	ldr	r0, [pc, #100]	@ (1ecf4 <datalogger_init+0x1a8>)
   1ec90:	f7fc fb3a 	bl	1b308 <artemis_debug_halerror>
   1ec94:	e773      	b.n	1eb7e <datalogger_init+0x32>
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM4_SCL, g_AM_BSP_GPIO_IOM4_SCL));
   1ec96:	2056      	movs	r0, #86	@ 0x56
   1ec98:	9000      	str	r0, [sp, #0]
   1ec9a:	4b0c      	ldr	r3, [pc, #48]	@ (1eccc <datalogger_init+0x180>)
   1ec9c:	4a0c      	ldr	r2, [pc, #48]	@ (1ecd0 <datalogger_init+0x184>)
   1ec9e:	4816      	ldr	r0, [pc, #88]	@ (1ecf8 <datalogger_init+0x1ac>)
   1eca0:	f7fc fb32 	bl	1b308 <artemis_debug_halerror>
   1eca4:	e7cb      	b.n	1ec3e <datalogger_init+0xf2>
        ARTEMIS_DEBUG_HALSTATUS(am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCL, g_AM_BSP_GPIO_IOM1_SCL));
   1eca6:	204f      	movs	r0, #79	@ 0x4f
   1eca8:	9000      	str	r0, [sp, #0]
   1ecaa:	4b08      	ldr	r3, [pc, #32]	@ (1eccc <datalogger_init+0x180>)
   1ecac:	4a08      	ldr	r2, [pc, #32]	@ (1ecd0 <datalogger_init+0x184>)
   1ecae:	4813      	ldr	r0, [pc, #76]	@ (1ecfc <datalogger_init+0x1b0>)
   1ecb0:	f7fc fb2a 	bl	1b308 <artemis_debug_halerror>
   1ecb4:	e7de      	b.n	1ec74 <datalogger_init+0x128>
   1ecb6:	bf00      	nop
   1ecb8:	10054958 	.word	0x10054958
   1ecbc:	00061a80 	.word	0x00061a80
   1ecc0:	000308f0 	.word	0x000308f0
   1ecc4:	40010098 	.word	0x40010098
   1ecc8:	40010090 	.word	0x40010090
   1eccc:	00030854 	.word	0x00030854
   1ecd0:	00030efc 	.word	0x00030efc
   1ecd4:	0002fb94 	.word	0x0002fb94
   1ecd8:	00030f38 	.word	0x00030f38
   1ecdc:	00030f78 	.word	0x00030f78
   1ece0:	00030f34 	.word	0x00030f34
   1ece4:	000308ac 	.word	0x000308ac
   1ece8:	00030f58 	.word	0x00030f58
   1ecec:	00030f60 	.word	0x00030f60
   1ecf0:	00030f54 	.word	0x00030f54
   1ecf4:	0002fef0 	.word	0x0002fef0
   1ecf8:	00030868 	.word	0x00030868
   1ecfc:	0002feac 	.word	0x0002feac
   1ed00:	000186a0 	.word	0x000186a0

0001ed04 <datalogger_power_on>:
	am_hal_gpio_output_clear(module.power.pin);
   1ed04:	4b06      	ldr	r3, [pc, #24]	@ (1ed20 <datalogger_power_on+0x1c>)
   1ed06:	4807      	ldr	r0, [pc, #28]	@ (1ed24 <datalogger_power_on+0x20>)
   1ed08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
   1ed0a:	08da      	lsrs	r2, r3, #3
   1ed0c:	2101      	movs	r1, #1
   1ed0e:	f002 0204 	and.w	r2, r2, #4
   1ed12:	f003 031f 	and.w	r3, r3, #31
   1ed16:	fa01 f303 	lsl.w	r3, r1, r3
   1ed1a:	5013      	str	r3, [r2, r0]
}
   1ed1c:	4770      	bx	lr
   1ed1e:	bf00      	nop
   1ed20:	10054958 	.word	0x10054958
   1ed24:	40010098 	.word	0x40010098

0001ed28 <datalogger_power_off>:
	am_hal_gpio_output_set(module.power.pin);
   1ed28:	4b06      	ldr	r3, [pc, #24]	@ (1ed44 <datalogger_power_off+0x1c>)
   1ed2a:	4807      	ldr	r0, [pc, #28]	@ (1ed48 <datalogger_power_off+0x20>)
   1ed2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
   1ed2e:	08da      	lsrs	r2, r3, #3
   1ed30:	2101      	movs	r1, #1
   1ed32:	f002 0204 	and.w	r2, r2, #4
   1ed36:	f003 031f 	and.w	r3, r3, #31
   1ed3a:	fa01 f303 	lsl.w	r3, r1, r3
   1ed3e:	5013      	str	r3, [r2, r0]
}
   1ed40:	4770      	bx	lr
   1ed42:	bf00      	nop
   1ed44:	10054958 	.word	0x10054958
   1ed48:	40010090 	.word	0x40010090

0001ed4c <am_bsp_uart_string_print>:
   1ed4c:	b530      	push	{r4, r5, lr}
   1ed4e:	b087      	sub	sp, #28
   1ed50:	7804      	ldrb	r4, [r0, #0]
   1ed52:	2300      	movs	r3, #0
   1ed54:	4605      	mov	r5, r0
   1ed56:	9300      	str	r3, [sp, #0]
   1ed58:	b11c      	cbz	r4, 1ed62 <am_bsp_uart_string_print+0x16>
   1ed5a:	3001      	adds	r0, #1
   1ed5c:	f7ed ff90 	bl	cc80 <strlen>
   1ed60:	1c44      	adds	r4, r0, #1
   1ed62:	490a      	ldr	r1, [pc, #40]	@ (1ed8c <am_bsp_uart_string_print+0x40>)
   1ed64:	f8cd d014 	str.w	sp, [sp, #20]
   1ed68:	f04f 33ff 	mov.w	r3, #4294967295
   1ed6c:	6808      	ldr	r0, [r1, #0]
   1ed6e:	2200      	movs	r2, #0
   1ed70:	a901      	add	r1, sp, #4
   1ed72:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1ed76:	e9cd 2501 	strd	r2, r5, [sp, #4]
   1ed7a:	f002 fa05 	bl	21188 <am_hal_uart_transfer>
   1ed7e:	9b00      	ldr	r3, [sp, #0]
   1ed80:	42a3      	cmp	r3, r4
   1ed82:	d000      	beq.n	1ed86 <am_bsp_uart_string_print+0x3a>
   1ed84:	e7fe      	b.n	1ed84 <am_bsp_uart_string_print+0x38>
   1ed86:	b007      	add	sp, #28
   1ed88:	bd30      	pop	{r4, r5, pc}
   1ed8a:	bf00      	nop
   1ed8c:	100549c0 	.word	0x100549c0

0001ed90 <am_bsp_low_power_init>:
   1ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed92:	f001 fd59 	bl	20848 <am_hal_pwrctrl_low_power_init>
   1ed96:	f001 fe47 	bl	20a28 <am_hal_rtc_osc_disable>
   1ed9a:	2100      	movs	r1, #0
   1ed9c:	2003      	movs	r0, #3
   1ed9e:	f000 fa37 	bl	1f210 <am_hal_clkgen_control>
   1eda2:	f001 fc0d 	bl	205c0 <am_hal_itm_disable>
   1eda6:	2000      	movs	r0, #0
   1eda8:	f7f1 fcda 	bl	10760 <am_util_stdio_printf_init>
   1edac:	4b0a      	ldr	r3, [pc, #40]	@ (1edd8 <am_bsp_low_power_init+0x48>)
   1edae:	4f0b      	ldr	r7, [pc, #44]	@ (1eddc <am_bsp_low_power_init+0x4c>)
   1edb0:	681e      	ldr	r6, [r3, #0]
   1edb2:	2400      	movs	r4, #0
   1edb4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   1edb8:	4631      	mov	r1, r6
   1edba:	4628      	mov	r0, r5
   1edbc:	f000 fc30 	bl	1f620 <am_hal_gpio_pinconfig>
   1edc0:	2103      	movs	r1, #3
   1edc2:	4628      	mov	r0, r5
   1edc4:	f000 fda2 	bl	1f90c <am_hal_gpio_state_write>
   1edc8:	3401      	adds	r4, #1
   1edca:	2100      	movs	r1, #0
   1edcc:	4628      	mov	r0, r5
   1edce:	f000 fd9d 	bl	1f90c <am_hal_gpio_state_write>
   1edd2:	2c03      	cmp	r4, #3
   1edd4:	d1ee      	bne.n	1edb4 <am_bsp_low_power_init+0x24>
   1edd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1edd8:	00030fc0 	.word	0x00030fc0
   1eddc:	100023f4 	.word	0x100023f4

0001ede0 <am_bsp_uart_printf_enable>:
   1ede0:	b510      	push	{r4, lr}
   1ede2:	4c10      	ldr	r4, [pc, #64]	@ (1ee24 <am_bsp_uart_printf_enable+0x44>)
   1ede4:	4b10      	ldr	r3, [pc, #64]	@ (1ee28 <am_bsp_uart_printf_enable+0x48>)
   1ede6:	2202      	movs	r2, #2
   1ede8:	4621      	mov	r1, r4
   1edea:	2000      	movs	r0, #0
   1edec:	601a      	str	r2, [r3, #0]
   1edee:	f002 f82d 	bl	20e4c <am_hal_uart_initialize>
   1edf2:	2200      	movs	r2, #0
   1edf4:	4611      	mov	r1, r2
   1edf6:	6820      	ldr	r0, [r4, #0]
   1edf8:	f002 f850 	bl	20e9c <am_hal_uart_power_control>
   1edfc:	490b      	ldr	r1, [pc, #44]	@ (1ee2c <am_bsp_uart_printf_enable+0x4c>)
   1edfe:	6820      	ldr	r0, [r4, #0]
   1ee00:	f002 f8c4 	bl	20f8c <am_hal_uart_configure>
   1ee04:	4b0a      	ldr	r3, [pc, #40]	@ (1ee30 <am_bsp_uart_printf_enable+0x50>)
   1ee06:	2030      	movs	r0, #48	@ 0x30
   1ee08:	6819      	ldr	r1, [r3, #0]
   1ee0a:	f000 fc09 	bl	1f620 <am_hal_gpio_pinconfig>
   1ee0e:	4b09      	ldr	r3, [pc, #36]	@ (1ee34 <am_bsp_uart_printf_enable+0x54>)
   1ee10:	2031      	movs	r0, #49	@ 0x31
   1ee12:	6819      	ldr	r1, [r3, #0]
   1ee14:	f000 fc04 	bl	1f620 <am_hal_gpio_pinconfig>
   1ee18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ee1c:	4806      	ldr	r0, [pc, #24]	@ (1ee38 <am_bsp_uart_printf_enable+0x58>)
   1ee1e:	f7f1 bc9f 	b.w	10760 <am_util_stdio_printf_init>
   1ee22:	bf00      	nop
   1ee24:	100549c0 	.word	0x100549c0
   1ee28:	100023f0 	.word	0x100023f0
   1ee2c:	00030f0c 	.word	0x00030f0c
   1ee30:	00030f9c 	.word	0x00030f9c
   1ee34:	00030f98 	.word	0x00030f98
   1ee38:	0001ed4d 	.word	0x0001ed4d

0001ee3c <am_hal_burst_mode_initialize>:
   1ee3c:	b570      	push	{r4, r5, r6, lr}
   1ee3e:	4b1c      	ldr	r3, [pc, #112]	@ (1eeb0 <am_hal_burst_mode_initialize+0x74>)
   1ee40:	695b      	ldr	r3, [r3, #20]
   1ee42:	4604      	mov	r4, r0
   1ee44:	07d8      	lsls	r0, r3, #31
   1ee46:	b082      	sub	sp, #8
   1ee48:	d521      	bpl.n	1ee8e <am_hal_burst_mode_initialize+0x52>
   1ee4a:	4b1a      	ldr	r3, [pc, #104]	@ (1eeb4 <am_hal_burst_mode_initialize+0x78>)
   1ee4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
   1ee4e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   1ee52:	629a      	str	r2, [r3, #40]	@ 0x28
   1ee54:	681b      	ldr	r3, [r3, #0]
   1ee56:	07d9      	lsls	r1, r3, #31
   1ee58:	d427      	bmi.n	1eeaa <am_hal_burst_mode_initialize+0x6e>
   1ee5a:	4d15      	ldr	r5, [pc, #84]	@ (1eeb0 <am_hal_burst_mode_initialize+0x74>)
   1ee5c:	4916      	ldr	r1, [pc, #88]	@ (1eeb8 <am_hal_burst_mode_initialize+0x7c>)
   1ee5e:	7e2a      	ldrb	r2, [r5, #24]
   1ee60:	2601      	movs	r6, #1
   1ee62:	f042 0210 	orr.w	r2, r2, #16
   1ee66:	2320      	movs	r3, #32
   1ee68:	762a      	strb	r2, [r5, #24]
   1ee6a:	f242 7010 	movw	r0, #10000	@ 0x2710
   1ee6e:	461a      	mov	r2, r3
   1ee70:	9600      	str	r6, [sp, #0]
   1ee72:	f000 fb91 	bl	1f598 <am_hal_flash_delay_status_check>
   1ee76:	b990      	cbnz	r0, 1ee9e <am_hal_burst_mode_initialize+0x62>
   1ee78:	69ab      	ldr	r3, [r5, #24]
   1ee7a:	065a      	lsls	r2, r3, #25
   1ee7c:	d507      	bpl.n	1ee8e <am_hal_burst_mode_initialize+0x52>
   1ee7e:	69ab      	ldr	r3, [r5, #24]
   1ee80:	069b      	lsls	r3, r3, #26
   1ee82:	d504      	bpl.n	1ee8e <am_hal_burst_mode_initialize+0x52>
   1ee84:	4b0d      	ldr	r3, [pc, #52]	@ (1eebc <am_hal_burst_mode_initialize+0x80>)
   1ee86:	701e      	strb	r6, [r3, #0]
   1ee88:	7020      	strb	r0, [r4, #0]
   1ee8a:	b002      	add	sp, #8
   1ee8c:	bd70      	pop	{r4, r5, r6, pc}
   1ee8e:	4a0b      	ldr	r2, [pc, #44]	@ (1eebc <am_hal_burst_mode_initialize+0x80>)
   1ee90:	2100      	movs	r1, #0
   1ee92:	2301      	movs	r3, #1
   1ee94:	2007      	movs	r0, #7
   1ee96:	7011      	strb	r1, [r2, #0]
   1ee98:	7023      	strb	r3, [r4, #0]
   1ee9a:	b002      	add	sp, #8
   1ee9c:	bd70      	pop	{r4, r5, r6, pc}
   1ee9e:	4b07      	ldr	r3, [pc, #28]	@ (1eebc <am_hal_burst_mode_initialize+0x80>)
   1eea0:	2200      	movs	r2, #0
   1eea2:	701a      	strb	r2, [r3, #0]
   1eea4:	7026      	strb	r6, [r4, #0]
   1eea6:	b002      	add	sp, #8
   1eea8:	bd70      	pop	{r4, r5, r6, pc}
   1eeaa:	f001 fd83 	bl	209b4 <am_hal_pwrctrl_blebuck_trim>
   1eeae:	e7d4      	b.n	1ee5a <am_hal_burst_mode_initialize+0x1e>
   1eeb0:	40020000 	.word	0x40020000
   1eeb4:	40021000 	.word	0x40021000
   1eeb8:	40020018 	.word	0x40020018
   1eebc:	100549c4 	.word	0x100549c4

0001eec0 <am_hal_cachectrl_config>:
   1eec0:	b530      	push	{r4, r5, lr}
   1eec2:	b083      	sub	sp, #12
   1eec4:	4604      	mov	r4, r0
   1eec6:	f000 fdab 	bl	1fa20 <am_hal_interrupt_master_disable>
   1eeca:	4d0e      	ldr	r5, [pc, #56]	@ (1ef04 <am_hal_cachectrl_config+0x44>)
   1eecc:	9001      	str	r0, [sp, #4]
   1eece:	682b      	ldr	r3, [r5, #0]
   1eed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
   1eed4:	602b      	str	r3, [r5, #0]
   1eed6:	9801      	ldr	r0, [sp, #4]
   1eed8:	f000 fda6 	bl	1fa28 <am_hal_interrupt_master_set>
   1eedc:	7863      	ldrb	r3, [r4, #1]
   1eede:	7822      	ldrb	r2, [r4, #0]
   1eee0:	78a1      	ldrb	r1, [r4, #2]
   1eee2:	021b      	lsls	r3, r3, #8
   1eee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
   1eee8:	0112      	lsls	r2, r2, #4
   1eeea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1eeee:	b2d2      	uxtb	r2, r2
   1eef0:	4313      	orrs	r3, r2
   1eef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   1eef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
   1eefa:	2000      	movs	r0, #0
   1eefc:	602b      	str	r3, [r5, #0]
   1eefe:	b003      	add	sp, #12
   1ef00:	bd30      	pop	{r4, r5, pc}
   1ef02:	bf00      	nop
   1ef04:	40018000 	.word	0x40018000

0001ef08 <am_hal_cachectrl_enable>:
   1ef08:	4a03      	ldr	r2, [pc, #12]	@ (1ef18 <am_hal_cachectrl_enable+0x10>)
   1ef0a:	6813      	ldr	r3, [r2, #0]
   1ef0c:	f043 0301 	orr.w	r3, r3, #1
   1ef10:	6013      	str	r3, [r2, #0]
   1ef12:	2000      	movs	r0, #0
   1ef14:	4770      	bx	lr
   1ef16:	bf00      	nop
   1ef18:	40018000 	.word	0x40018000

0001ef1c <am_hal_cachectrl_control>:
   1ef1c:	b510      	push	{r4, lr}
   1ef1e:	3801      	subs	r0, #1
   1ef20:	b08e      	sub	sp, #56	@ 0x38
   1ef22:	2810      	cmp	r0, #16
   1ef24:	f200 815e 	bhi.w	1f1e4 <am_hal_cachectrl_control+0x2c8>
   1ef28:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ef2c:	00360018 	.word	0x00360018
   1ef30:	0040003d 	.word	0x0040003d
   1ef34:	00450043 	.word	0x00450043
   1ef38:	0011001a 	.word	0x0011001a
   1ef3c:	00540047 	.word	0x00540047
   1ef40:	009a0061 	.word	0x009a0061
   1ef44:	010c00d3 	.word	0x010c00d3
   1ef48:	013f0126 	.word	0x013f0126
   1ef4c:	001d      	.short	0x001d
   1ef4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
   1ef52:	4aac      	ldr	r2, [pc, #688]	@ (1f204 <am_hal_cachectrl_control+0x2e8>)
   1ef54:	2000      	movs	r0, #0
   1ef56:	6093      	str	r3, [r2, #8]
   1ef58:	b00e      	add	sp, #56	@ 0x38
   1ef5a:	bd10      	pop	{r4, pc}
   1ef5c:	2301      	movs	r3, #1
   1ef5e:	e7f8      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1ef60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   1ef64:	e7f5      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1ef66:	2900      	cmp	r1, #0
   1ef68:	f000 813c 	beq.w	1f1e4 <am_hal_cachectrl_control+0x2c8>
   1ef6c:	684a      	ldr	r2, [r1, #4]
   1ef6e:	48a6      	ldr	r0, [pc, #664]	@ (1f208 <am_hal_cachectrl_control+0x2ec>)
   1ef70:	4202      	tst	r2, r0
   1ef72:	f040 8137 	bne.w	1f1e4 <am_hal_cachectrl_control+0x2c8>
   1ef76:	688b      	ldr	r3, [r1, #8]
   1ef78:	4018      	ands	r0, r3
   1ef7a:	f040 8133 	bne.w	1f1e4 <am_hal_cachectrl_control+0x2c8>
   1ef7e:	780c      	ldrb	r4, [r1, #0]
   1ef80:	2c00      	cmp	r4, #0
   1ef82:	f040 8133 	bne.w	1f1ec <am_hal_cachectrl_control+0x2d0>
   1ef86:	4c9f      	ldr	r4, [pc, #636]	@ (1f204 <am_hal_cachectrl_control+0x2e8>)
   1ef88:	7849      	ldrb	r1, [r1, #1]
   1ef8a:	6122      	str	r2, [r4, #16]
   1ef8c:	6163      	str	r3, [r4, #20]
   1ef8e:	6823      	ldr	r3, [r4, #0]
   1ef90:	f361 0382 	bfi	r3, r1, #2, #1
   1ef94:	6023      	str	r3, [r4, #0]
   1ef96:	e7df      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1ef98:	4b9a      	ldr	r3, [pc, #616]	@ (1f204 <am_hal_cachectrl_control+0x2e8>)
   1ef9a:	681b      	ldr	r3, [r3, #0]
   1ef9c:	01db      	lsls	r3, r3, #7
   1ef9e:	f140 811f 	bpl.w	1f1e0 <am_hal_cachectrl_control+0x2c4>
   1efa2:	2302      	movs	r3, #2
   1efa4:	e7d5      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1efa6:	f44f 6388 	mov.w	r3, #1088	@ 0x440
   1efaa:	e7d2      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1efac:	f44f 7308 	mov.w	r3, #544	@ 0x220
   1efb0:	e7cf      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1efb2:	2340      	movs	r3, #64	@ 0x40
   1efb4:	e7cd      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1efb6:	2320      	movs	r3, #32
   1efb8:	e7cb      	b.n	1ef52 <am_hal_cachectrl_control+0x36>
   1efba:	f000 fd31 	bl	1fa20 <am_hal_interrupt_master_disable>
   1efbe:	4a91      	ldr	r2, [pc, #580]	@ (1f204 <am_hal_cachectrl_control+0x2e8>)
   1efc0:	9000      	str	r0, [sp, #0]
   1efc2:	6813      	ldr	r3, [r2, #0]
   1efc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
   1efc8:	6013      	str	r3, [r2, #0]
   1efca:	9800      	ldr	r0, [sp, #0]
   1efcc:	f000 fd2c 	bl	1fa28 <am_hal_interrupt_master_set>
   1efd0:	2000      	movs	r0, #0
   1efd2:	e7c1      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1efd4:	f000 fd24 	bl	1fa20 <am_hal_interrupt_master_disable>
   1efd8:	4a8a      	ldr	r2, [pc, #552]	@ (1f204 <am_hal_cachectrl_control+0x2e8>)
   1efda:	9001      	str	r0, [sp, #4]
   1efdc:	6813      	ldr	r3, [r2, #0]
   1efde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
   1efe2:	6013      	str	r3, [r2, #0]
   1efe4:	9801      	ldr	r0, [sp, #4]
   1efe6:	f000 fd1f 	bl	1fa28 <am_hal_interrupt_master_set>
   1efea:	2000      	movs	r0, #0
   1efec:	e7b4      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1efee:	f000 fd17 	bl	1fa20 <am_hal_interrupt_master_disable>
   1eff2:	4603      	mov	r3, r0
   1eff4:	4885      	ldr	r0, [pc, #532]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1eff6:	9302      	str	r3, [sp, #8]
   1eff8:	f000 fb08 	bl	1f60c <am_hal_flash_load_ui32>
   1effc:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
   1f000:	f440 61e0 	orr.w	r1, r0, #1792	@ 0x700
   1f004:	4881      	ldr	r0, [pc, #516]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f006:	f000 fb05 	bl	1f614 <am_hal_flash_store_ui32>
   1f00a:	9802      	ldr	r0, [sp, #8]
   1f00c:	f000 fd0c 	bl	1fa28 <am_hal_interrupt_master_set>
   1f010:	f000 fd06 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f014:	4603      	mov	r3, r0
   1f016:	487d      	ldr	r0, [pc, #500]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f018:	9303      	str	r3, [sp, #12]
   1f01a:	f000 faf7 	bl	1f60c <am_hal_flash_load_ui32>
   1f01e:	f420 6077 	bic.w	r0, r0, #3952	@ 0xf70
   1f022:	f440 61ee 	orr.w	r1, r0, #1904	@ 0x770
   1f026:	4879      	ldr	r0, [pc, #484]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f028:	f000 faf4 	bl	1f614 <am_hal_flash_store_ui32>
   1f02c:	9803      	ldr	r0, [sp, #12]
   1f02e:	f000 fcfb 	bl	1fa28 <am_hal_interrupt_master_set>
   1f032:	f000 fcf5 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f036:	4603      	mov	r3, r0
   1f038:	4874      	ldr	r0, [pc, #464]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f03a:	9304      	str	r3, [sp, #16]
   1f03c:	f000 fae6 	bl	1f60c <am_hal_flash_load_ui32>
   1f040:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
   1f044:	f020 000f 	bic.w	r0, r0, #15
   1f048:	f440 61e0 	orr.w	r1, r0, #1792	@ 0x700
   1f04c:	f041 0103 	orr.w	r1, r1, #3
   1f050:	486e      	ldr	r0, [pc, #440]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f052:	f000 fadf 	bl	1f614 <am_hal_flash_store_ui32>
   1f056:	9804      	ldr	r0, [sp, #16]
   1f058:	f000 fce6 	bl	1fa28 <am_hal_interrupt_master_set>
   1f05c:	2000      	movs	r0, #0
   1f05e:	e77b      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f060:	f000 fcde 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f064:	4603      	mov	r3, r0
   1f066:	4869      	ldr	r0, [pc, #420]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f068:	9305      	str	r3, [sp, #20]
   1f06a:	f000 facf 	bl	1f60c <am_hal_flash_load_ui32>
   1f06e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
   1f072:	f440 51b8 	orr.w	r1, r0, #5888	@ 0x1700
   1f076:	4865      	ldr	r0, [pc, #404]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f078:	f000 facc 	bl	1f614 <am_hal_flash_store_ui32>
   1f07c:	9805      	ldr	r0, [sp, #20]
   1f07e:	f000 fcd3 	bl	1fa28 <am_hal_interrupt_master_set>
   1f082:	f000 fccd 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f086:	4603      	mov	r3, r0
   1f088:	4860      	ldr	r0, [pc, #384]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f08a:	9306      	str	r3, [sp, #24]
   1f08c:	f000 fabe 	bl	1f60c <am_hal_flash_load_ui32>
   1f090:	f420 6077 	bic.w	r0, r0, #3952	@ 0xf70
   1f094:	f440 61ea 	orr.w	r1, r0, #1872	@ 0x750
   1f098:	485c      	ldr	r0, [pc, #368]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f09a:	f000 fabb 	bl	1f614 <am_hal_flash_store_ui32>
   1f09e:	9806      	ldr	r0, [sp, #24]
   1f0a0:	f000 fcc2 	bl	1fa28 <am_hal_interrupt_master_set>
   1f0a4:	f000 fcbc 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f0a8:	4603      	mov	r3, r0
   1f0aa:	4858      	ldr	r0, [pc, #352]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f0ac:	9307      	str	r3, [sp, #28]
   1f0ae:	f000 faad 	bl	1f60c <am_hal_flash_load_ui32>
   1f0b2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
   1f0b6:	f020 000f 	bic.w	r0, r0, #15
   1f0ba:	f440 61e0 	orr.w	r1, r0, #1792	@ 0x700
   1f0be:	f041 0101 	orr.w	r1, r1, #1
   1f0c2:	4852      	ldr	r0, [pc, #328]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f0c4:	f000 faa6 	bl	1f614 <am_hal_flash_store_ui32>
   1f0c8:	9807      	ldr	r0, [sp, #28]
   1f0ca:	f000 fcad 	bl	1fa28 <am_hal_interrupt_master_set>
   1f0ce:	2000      	movs	r0, #0
   1f0d0:	e742      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f0d2:	f000 fca5 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f0d6:	4603      	mov	r3, r0
   1f0d8:	484c      	ldr	r0, [pc, #304]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f0da:	9308      	str	r3, [sp, #32]
   1f0dc:	f000 fa96 	bl	1f60c <am_hal_flash_load_ui32>
   1f0e0:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
   1f0e4:	f440 51b8 	orr.w	r1, r0, #5888	@ 0x1700
   1f0e8:	4848      	ldr	r0, [pc, #288]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f0ea:	f000 fa93 	bl	1f614 <am_hal_flash_store_ui32>
   1f0ee:	9808      	ldr	r0, [sp, #32]
   1f0f0:	f000 fc9a 	bl	1fa28 <am_hal_interrupt_master_set>
   1f0f4:	f000 fc94 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f0f8:	4603      	mov	r3, r0
   1f0fa:	4844      	ldr	r0, [pc, #272]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f0fc:	9309      	str	r3, [sp, #36]	@ 0x24
   1f0fe:	f000 fa85 	bl	1f60c <am_hal_flash_load_ui32>
   1f102:	f420 6077 	bic.w	r0, r0, #3952	@ 0xf70
   1f106:	f440 61ec 	orr.w	r1, r0, #1888	@ 0x760
   1f10a:	4840      	ldr	r0, [pc, #256]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f10c:	f000 fa82 	bl	1f614 <am_hal_flash_store_ui32>
   1f110:	9809      	ldr	r0, [sp, #36]	@ 0x24
   1f112:	f000 fc89 	bl	1fa28 <am_hal_interrupt_master_set>
   1f116:	f000 fc83 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f11a:	4603      	mov	r3, r0
   1f11c:	483b      	ldr	r0, [pc, #236]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f11e:	930a      	str	r3, [sp, #40]	@ 0x28
   1f120:	f000 fa74 	bl	1f60c <am_hal_flash_load_ui32>
   1f124:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
   1f128:	f020 000f 	bic.w	r0, r0, #15
   1f12c:	f440 61e0 	orr.w	r1, r0, #1792	@ 0x700
   1f130:	f041 0101 	orr.w	r1, r1, #1
   1f134:	4835      	ldr	r0, [pc, #212]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f136:	f000 fa6d 	bl	1f614 <am_hal_flash_store_ui32>
   1f13a:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1f13c:	f000 fc74 	bl	1fa28 <am_hal_interrupt_master_set>
   1f140:	2000      	movs	r0, #0
   1f142:	e709      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f144:	2900      	cmp	r1, #0
   1f146:	d04d      	beq.n	1f1e4 <am_hal_cachectrl_control+0x2c8>
   1f148:	680c      	ldr	r4, [r1, #0]
   1f14a:	2c03      	cmp	r4, #3
   1f14c:	d84c      	bhi.n	1f1e8 <am_hal_cachectrl_control+0x2cc>
   1f14e:	f000 fc67 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f152:	4603      	mov	r3, r0
   1f154:	482d      	ldr	r0, [pc, #180]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f156:	930b      	str	r3, [sp, #44]	@ 0x2c
   1f158:	f000 fa58 	bl	1f60c <am_hal_flash_load_ui32>
   1f15c:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
   1f160:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   1f164:	f441 61e0 	orr.w	r1, r1, #1792	@ 0x700
   1f168:	4828      	ldr	r0, [pc, #160]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f16a:	f000 fa53 	bl	1f614 <am_hal_flash_store_ui32>
   1f16e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1f170:	f000 fc5a 	bl	1fa28 <am_hal_interrupt_master_set>
   1f174:	2000      	movs	r0, #0
   1f176:	e6ef      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f178:	b3a1      	cbz	r1, 1f1e4 <am_hal_cachectrl_control+0x2c8>
   1f17a:	680c      	ldr	r4, [r1, #0]
   1f17c:	2c07      	cmp	r4, #7
   1f17e:	d833      	bhi.n	1f1e8 <am_hal_cachectrl_control+0x2cc>
   1f180:	f000 fc4e 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f184:	4603      	mov	r3, r0
   1f186:	4821      	ldr	r0, [pc, #132]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f188:	930c      	str	r3, [sp, #48]	@ 0x30
   1f18a:	f000 fa3f 	bl	1f60c <am_hal_flash_load_ui32>
   1f18e:	f420 6077 	bic.w	r0, r0, #3952	@ 0xf70
   1f192:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   1f196:	f441 61e0 	orr.w	r1, r1, #1792	@ 0x700
   1f19a:	481c      	ldr	r0, [pc, #112]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f19c:	f000 fa3a 	bl	1f614 <am_hal_flash_store_ui32>
   1f1a0:	980c      	ldr	r0, [sp, #48]	@ 0x30
   1f1a2:	f000 fc41 	bl	1fa28 <am_hal_interrupt_master_set>
   1f1a6:	2000      	movs	r0, #0
   1f1a8:	e6d6      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f1aa:	b1d9      	cbz	r1, 1f1e4 <am_hal_cachectrl_control+0x2c8>
   1f1ac:	680c      	ldr	r4, [r1, #0]
   1f1ae:	2c0f      	cmp	r4, #15
   1f1b0:	d81a      	bhi.n	1f1e8 <am_hal_cachectrl_control+0x2cc>
   1f1b2:	f000 fc35 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f1b6:	4603      	mov	r3, r0
   1f1b8:	4814      	ldr	r0, [pc, #80]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f1ba:	930d      	str	r3, [sp, #52]	@ 0x34
   1f1bc:	f000 fa26 	bl	1f60c <am_hal_flash_load_ui32>
   1f1c0:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
   1f1c4:	f020 000f 	bic.w	r0, r0, #15
   1f1c8:	ea40 0104 	orr.w	r1, r0, r4
   1f1cc:	f441 61e0 	orr.w	r1, r1, #1792	@ 0x700
   1f1d0:	480e      	ldr	r0, [pc, #56]	@ (1f20c <am_hal_cachectrl_control+0x2f0>)
   1f1d2:	f000 fa1f 	bl	1f614 <am_hal_flash_store_ui32>
   1f1d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
   1f1d8:	f000 fc26 	bl	1fa28 <am_hal_interrupt_master_set>
   1f1dc:	2000      	movs	r0, #0
   1f1de:	e6bb      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f1e0:	2007      	movs	r0, #7
   1f1e2:	e6b9      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f1e4:	2006      	movs	r0, #6
   1f1e6:	e6b7      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f1e8:	2001      	movs	r0, #1
   1f1ea:	e6b5      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f1ec:	2c01      	cmp	r4, #1
   1f1ee:	d1f9      	bne.n	1f1e4 <am_hal_cachectrl_control+0x2c8>
   1f1f0:	4c04      	ldr	r4, [pc, #16]	@ (1f204 <am_hal_cachectrl_control+0x2e8>)
   1f1f2:	7849      	ldrb	r1, [r1, #1]
   1f1f4:	61a2      	str	r2, [r4, #24]
   1f1f6:	61e3      	str	r3, [r4, #28]
   1f1f8:	6823      	ldr	r3, [r4, #0]
   1f1fa:	f361 03c3 	bfi	r3, r1, #3, #1
   1f1fe:	6023      	str	r3, [r4, #0]
   1f200:	e6aa      	b.n	1ef58 <am_hal_cachectrl_control+0x3c>
   1f202:	bf00      	nop
   1f204:	40018000 	.word	0x40018000
   1f208:	f800000f 	.word	0xf800000f
   1f20c:	40018004 	.word	0x40018004

0001f210 <am_hal_clkgen_control>:
   1f210:	4b49      	ldr	r3, [pc, #292]	@ (1f338 <am_hal_clkgen_control+0x128>)
   1f212:	681a      	ldr	r2, [r3, #0]
   1f214:	b912      	cbnz	r2, 1f21c <am_hal_clkgen_control+0xc>
   1f216:	4a49      	ldr	r2, [pc, #292]	@ (1f33c <am_hal_clkgen_control+0x12c>)
   1f218:	6812      	ldr	r2, [r2, #0]
   1f21a:	601a      	str	r2, [r3, #0]
   1f21c:	2809      	cmp	r0, #9
   1f21e:	f200 8089 	bhi.w	1f334 <am_hal_clkgen_control+0x124>
   1f222:	e8df f000 	tbb	[pc, r0]
   1f226:	160d      	.short	0x160d
   1f228:	423a261e 	.word	0x423a261e
   1f22c:	055c544c 	.word	0x055c544c
   1f230:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f234:	2000      	movs	r0, #0
   1f236:	6a1a      	ldr	r2, [r3, #32]
   1f238:	f36f 0200 	bfc	r2, #0, #1
   1f23c:	621a      	str	r2, [r3, #32]
   1f23e:	4770      	bx	lr
   1f240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f244:	2200      	movs	r2, #0
   1f246:	2147      	movs	r1, #71	@ 0x47
   1f248:	6159      	str	r1, [r3, #20]
   1f24a:	4610      	mov	r0, r2
   1f24c:	619a      	str	r2, [r3, #24]
   1f24e:	615a      	str	r2, [r3, #20]
   1f250:	4770      	bx	lr
   1f252:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f256:	2000      	movs	r0, #0
   1f258:	899a      	ldrh	r2, [r3, #12]
   1f25a:	f36f 0200 	bfc	r2, #0, #1
   1f25e:	819a      	strh	r2, [r3, #12]
   1f260:	4770      	bx	lr
   1f262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f266:	2000      	movs	r0, #0
   1f268:	899a      	ldrh	r2, [r3, #12]
   1f26a:	f36f 0241 	bfc	r2, #1, #1
   1f26e:	819a      	strh	r2, [r3, #12]
   1f270:	4770      	bx	lr
   1f272:	4a33      	ldr	r2, [pc, #204]	@ (1f340 <am_hal_clkgen_control+0x130>)
   1f274:	68d3      	ldr	r3, [r2, #12]
   1f276:	b2db      	uxtb	r3, r3
   1f278:	2b21      	cmp	r3, #33	@ 0x21
   1f27a:	d106      	bne.n	1f28a <am_hal_clkgen_control+0x7a>
   1f27c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
   1f280:	2101      	movs	r1, #1
   1f282:	f361 2309 	bfi	r3, r1, #8, #2
   1f286:	f8a2 3120 	strh.w	r3, [r2, #288]	@ 0x120
   1f28a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   1f28e:	2000      	movs	r0, #0
   1f290:	8993      	ldrh	r3, [r2, #12]
   1f292:	f043 0301 	orr.w	r3, r3, #1
   1f296:	8193      	strh	r3, [r2, #12]
   1f298:	4770      	bx	lr
   1f29a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   1f29e:	2000      	movs	r0, #0
   1f2a0:	8993      	ldrh	r3, [r2, #12]
   1f2a2:	f043 0302 	orr.w	r3, r3, #2
   1f2a6:	8193      	strh	r3, [r2, #12]
   1f2a8:	4770      	bx	lr
   1f2aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f2ae:	2200      	movs	r2, #0
   1f2b0:	2047      	movs	r0, #71	@ 0x47
   1f2b2:	2101      	movs	r1, #1
   1f2b4:	6158      	str	r0, [r3, #20]
   1f2b6:	6199      	str	r1, [r3, #24]
   1f2b8:	4610      	mov	r0, r2
   1f2ba:	615a      	str	r2, [r3, #20]
   1f2bc:	4770      	bx	lr
   1f2be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f2c2:	2000      	movs	r0, #0
   1f2c4:	899a      	ldrh	r2, [r3, #12]
   1f2c6:	f36f 12c7 	bfc	r2, #7, #1
   1f2ca:	819a      	strh	r2, [r3, #12]
   1f2cc:	4770      	bx	lr
   1f2ce:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   1f2d2:	2000      	movs	r0, #0
   1f2d4:	8993      	ldrh	r3, [r2, #12]
   1f2d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   1f2da:	8193      	strh	r3, [r2, #12]
   1f2dc:	4770      	bx	lr
   1f2de:	4a18      	ldr	r2, [pc, #96]	@ (1f340 <am_hal_clkgen_control+0x130>)
   1f2e0:	68d3      	ldr	r3, [r2, #12]
   1f2e2:	b2db      	uxtb	r3, r3
   1f2e4:	2b21      	cmp	r3, #33	@ 0x21
   1f2e6:	d00a      	beq.n	1f2fe <am_hal_clkgen_control+0xee>
   1f2e8:	b139      	cbz	r1, 1f2fa <am_hal_clkgen_control+0xea>
   1f2ea:	680b      	ldr	r3, [r1, #0]
   1f2ec:	f043 0301 	orr.w	r3, r3, #1
   1f2f0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   1f2f4:	2000      	movs	r0, #0
   1f2f6:	6213      	str	r3, [r2, #32]
   1f2f8:	4770      	bx	lr
   1f2fa:	4b12      	ldr	r3, [pc, #72]	@ (1f344 <am_hal_clkgen_control+0x134>)
   1f2fc:	e7f8      	b.n	1f2f0 <am_hal_clkgen_control+0xe0>
   1f2fe:	b500      	push	{lr}
   1f300:	b083      	sub	sp, #12
   1f302:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
   1f306:	9101      	str	r1, [sp, #4]
   1f308:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
   1f30c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
   1f310:	f8a2 3120 	strh.w	r3, [r2, #288]	@ 0x120
   1f314:	f000 f930 	bl	1f578 <am_hal_flash_delay>
   1f318:	9901      	ldr	r1, [sp, #4]
   1f31a:	b149      	cbz	r1, 1f330 <am_hal_clkgen_control+0x120>
   1f31c:	680b      	ldr	r3, [r1, #0]
   1f31e:	f043 0301 	orr.w	r3, r3, #1
   1f322:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   1f326:	2000      	movs	r0, #0
   1f328:	6213      	str	r3, [r2, #32]
   1f32a:	b003      	add	sp, #12
   1f32c:	f85d fb04 	ldr.w	pc, [sp], #4
   1f330:	4b04      	ldr	r3, [pc, #16]	@ (1f344 <am_hal_clkgen_control+0x134>)
   1f332:	e7f6      	b.n	1f322 <am_hal_clkgen_control+0x112>
   1f334:	2006      	movs	r0, #6
   1f336:	4770      	bx	lr
   1f338:	100549c8 	.word	0x100549c8
   1f33c:	4ffff000 	.word	0x4ffff000
   1f340:	40020000 	.word	0x40020000
   1f344:	0025b801 	.word	0x0025b801

0001f348 <am_hal_clkgen_status_get>:
   1f348:	b1a8      	cbz	r0, 1f376 <am_hal_clkgen_status_get+0x2e>
   1f34a:	b410      	push	{r4}
   1f34c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   1f350:	490a      	ldr	r1, [pc, #40]	@ (1f37c <am_hal_clkgen_status_get+0x34>)
   1f352:	6994      	ldr	r4, [r2, #24]
   1f354:	4b0a      	ldr	r3, [pc, #40]	@ (1f380 <am_hal_clkgen_status_get+0x38>)
   1f356:	f014 0f01 	tst.w	r4, #1
   1f35a:	bf08      	it	eq
   1f35c:	460b      	moveq	r3, r1
   1f35e:	6003      	str	r3, [r0, #0]
   1f360:	69d3      	ldr	r3, [r2, #28]
   1f362:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f366:	f003 0201 	and.w	r2, r3, #1
   1f36a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1f36e:	6042      	str	r2, [r0, #4]
   1f370:	7203      	strb	r3, [r0, #8]
   1f372:	2000      	movs	r0, #0
   1f374:	4770      	bx	lr
   1f376:	2006      	movs	r0, #6
   1f378:	4770      	bx	lr
   1f37a:	bf00      	nop
   1f37c:	02dc6c00 	.word	0x02dc6c00
   1f380:	016e3600 	.word	0x016e3600

0001f384 <am_hal_ctimer_config>:
   1f384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f388:	b082      	sub	sp, #8
   1f38a:	460c      	mov	r4, r1
   1f38c:	4606      	mov	r6, r0
   1f38e:	f000 fb47 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f392:	4f19      	ldr	r7, [pc, #100]	@ (1f3f8 <am_hal_ctimer_config+0x74>)
   1f394:	9001      	str	r0, [sp, #4]
   1f396:	ea4f 1846 	mov.w	r8, r6, lsl #5
   1f39a:	f858 3007 	ldr.w	r3, [r8, r7]
   1f39e:	f043 2308 	orr.w	r3, r3, #134219776	@ 0x8000800
   1f3a2:	f848 3007 	str.w	r3, [r8, r7]
   1f3a6:	9801      	ldr	r0, [sp, #4]
   1f3a8:	f000 fb3e 	bl	1fa28 <am_hal_interrupt_master_set>
   1f3ac:	e9d4 5201 	ldrd	r5, r2, [r4, #4]
   1f3b0:	6823      	ldr	r3, [r4, #0]
   1f3b2:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
   1f3b6:	b10b      	cbz	r3, 1f3bc <am_hal_ctimer_config+0x38>
   1f3b8:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
   1f3bc:	f000 fb30 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f3c0:	9000      	str	r0, [sp, #0]
   1f3c2:	f848 5007 	str.w	r5, [r8, r7]
   1f3c6:	9800      	ldr	r0, [sp, #0]
   1f3c8:	f000 fb2e 	bl	1fa28 <am_hal_interrupt_master_set>
   1f3cc:	6863      	ldr	r3, [r4, #4]
   1f3ce:	b90b      	cbnz	r3, 1f3d4 <am_hal_ctimer_config+0x50>
   1f3d0:	6822      	ldr	r2, [r4, #0]
   1f3d2:	b14a      	cbz	r2, 1f3e8 <am_hal_ctimer_config+0x64>
   1f3d4:	f3c3 0344 	ubfx	r3, r3, #1, #5
   1f3d8:	2200      	movs	r2, #0
   1f3da:	4808      	ldr	r0, [pc, #32]	@ (1f3fc <am_hal_ctimer_config+0x78>)
   1f3dc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   1f3e0:	54b3      	strb	r3, [r6, r2]
   1f3e2:	b002      	add	sp, #8
   1f3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3e8:	68a3      	ldr	r3, [r4, #8]
   1f3ea:	2b00      	cmp	r3, #0
   1f3ec:	d0f9      	beq.n	1f3e2 <am_hal_ctimer_config+0x5e>
   1f3ee:	f3c3 0344 	ubfx	r3, r3, #1, #5
   1f3f2:	2201      	movs	r2, #1
   1f3f4:	e7f1      	b.n	1f3da <am_hal_ctimer_config+0x56>
   1f3f6:	bf00      	nop
   1f3f8:	4000800c 	.word	0x4000800c
   1f3fc:	1000240c 	.word	0x1000240c

0001f400 <am_hal_ctimer_start>:
   1f400:	b570      	push	{r4, r5, r6, lr}
   1f402:	b082      	sub	sp, #8
   1f404:	460c      	mov	r4, r1
   1f406:	4605      	mov	r5, r0
   1f408:	f000 fb0a 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f40c:	016e      	lsls	r6, r5, #5
   1f40e:	490f      	ldr	r1, [pc, #60]	@ (1f44c <am_hal_ctimer_start+0x4c>)
   1f410:	9001      	str	r0, [sp, #4]
   1f412:	5873      	ldr	r3, [r6, r1]
   1f414:	f004 2208 	and.w	r2, r4, #134219776	@ 0x8000800
   1f418:	ea23 0202 	bic.w	r2, r3, r2
   1f41c:	f004 1301 	and.w	r3, r4, #65537	@ 0x10001
   1f420:	4313      	orrs	r3, r2
   1f422:	f514 3f80 	cmn.w	r4, #65536	@ 0x10000
   1f426:	5073      	str	r3, [r6, r1]
   1f428:	bf0c      	ite	eq
   1f42a:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
   1f42e:	f3c3 0444 	ubfxne	r4, r3, #1, #5
   1f432:	4b07      	ldr	r3, [pc, #28]	@ (1f450 <am_hal_ctimer_start+0x50>)
   1f434:	9801      	ldr	r0, [sp, #4]
   1f436:	bf0c      	ite	eq
   1f438:	2201      	moveq	r2, #1
   1f43a:	2200      	movne	r2, #0
   1f43c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   1f440:	54ac      	strb	r4, [r5, r2]
   1f442:	b002      	add	sp, #8
   1f444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f448:	f000 baee 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f44c:	4000800c 	.word	0x4000800c
   1f450:	1000240c 	.word	0x1000240c

0001f454 <am_hal_ctimer_clear>:
   1f454:	b530      	push	{r4, r5, lr}
   1f456:	b083      	sub	sp, #12
   1f458:	0145      	lsls	r5, r0, #5
   1f45a:	460c      	mov	r4, r1
   1f45c:	f000 fae0 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f460:	4b06      	ldr	r3, [pc, #24]	@ (1f47c <am_hal_ctimer_clear+0x28>)
   1f462:	9001      	str	r0, [sp, #4]
   1f464:	58e9      	ldr	r1, [r5, r3]
   1f466:	f004 2408 	and.w	r4, r4, #134219776	@ 0x8000800
   1f46a:	430c      	orrs	r4, r1
   1f46c:	50ec      	str	r4, [r5, r3]
   1f46e:	9801      	ldr	r0, [sp, #4]
   1f470:	b003      	add	sp, #12
   1f472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f476:	f000 bad7 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f47a:	bf00      	nop
   1f47c:	4000800c 	.word	0x4000800c

0001f480 <am_hal_ctimer_period_set>:
   1f480:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f482:	b083      	sub	sp, #12
   1f484:	460e      	mov	r6, r1
   1f486:	0145      	lsls	r5, r0, #5
   1f488:	4614      	mov	r4, r2
   1f48a:	461f      	mov	r7, r3
   1f48c:	f000 fac8 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f490:	4b23      	ldr	r3, [pc, #140]	@ (1f520 <am_hal_ctimer_period_set+0xa0>)
   1f492:	9001      	str	r0, [sp, #4]
   1f494:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
   1f498:	58ea      	ldr	r2, [r5, r3]
   1f49a:	4922      	ldr	r1, [pc, #136]	@ (1f524 <am_hal_ctimer_period_set+0xa4>)
   1f49c:	d02f      	beq.n	1f4fe <am_hal_ctimer_period_set+0x7e>
   1f49e:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
   1f4a2:	2a80      	cmp	r2, #128	@ 0x80
   1f4a4:	d019      	beq.n	1f4da <am_hal_ctimer_period_set+0x5a>
   1f4a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
   1f4aa:	2300      	movs	r3, #0
   1f4ac:	4286      	cmp	r6, r0
   1f4ae:	461a      	mov	r2, r3
   1f4b0:	d01c      	beq.n	1f4ec <am_hal_ctimer_period_set+0x6c>
   1f4b2:	4f1d      	ldr	r7, [pc, #116]	@ (1f528 <am_hal_ctimer_period_set+0xa8>)
   1f4b4:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
   1f4b8:	eb05 0007 	add.w	r0, r5, r7
   1f4bc:	d027      	beq.n	1f50e <am_hal_ctimer_period_set+0x8e>
   1f4be:	0c12      	lsrs	r2, r2, #16
   1f4c0:	b2a0      	uxth	r0, r4
   1f4c2:	0412      	lsls	r2, r2, #16
   1f4c4:	4303      	orrs	r3, r0
   1f4c6:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
   1f4ca:	506b      	str	r3, [r5, r1]
   1f4cc:	51ea      	str	r2, [r5, r7]
   1f4ce:	9801      	ldr	r0, [sp, #4]
   1f4d0:	b003      	add	sp, #12
   1f4d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f4d6:	f000 baa7 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f4da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
   1f4de:	4286      	cmp	r6, r0
   1f4e0:	ea4f 4304 	mov.w	r3, r4, lsl #16
   1f4e4:	4622      	mov	r2, r4
   1f4e6:	eba4 0407 	sub.w	r4, r4, r7
   1f4ea:	d1e2      	bne.n	1f4b2 <am_hal_ctimer_period_set+0x32>
   1f4ec:	b2a4      	uxth	r4, r4
   1f4ee:	4323      	orrs	r3, r4
   1f4f0:	506b      	str	r3, [r5, r1]
   1f4f2:	9801      	ldr	r0, [sp, #4]
   1f4f4:	b003      	add	sp, #12
   1f4f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f4fa:	f000 ba95 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f4fe:	0c12      	lsrs	r2, r2, #16
   1f500:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
   1f504:	2a80      	cmp	r2, #128	@ 0x80
   1f506:	d0e8      	beq.n	1f4da <am_hal_ctimer_period_set+0x5a>
   1f508:	4807      	ldr	r0, [pc, #28]	@ (1f528 <am_hal_ctimer_period_set+0xa8>)
   1f50a:	2300      	movs	r3, #0
   1f50c:	4428      	add	r0, r5
   1f50e:	b2a4      	uxth	r4, r4
   1f510:	4323      	orrs	r3, r4
   1f512:	6003      	str	r3, [r0, #0]
   1f514:	9801      	ldr	r0, [sp, #4]
   1f516:	b003      	add	sp, #12
   1f518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f51c:	f000 ba84 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f520:	4000800c 	.word	0x4000800c
   1f524:	40008004 	.word	0x40008004
   1f528:	40008008 	.word	0x40008008

0001f52c <am_hal_ctimer_int_enable>:
   1f52c:	b510      	push	{r4, lr}
   1f52e:	b082      	sub	sp, #8
   1f530:	4604      	mov	r4, r0
   1f532:	f000 fa75 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f536:	4a06      	ldr	r2, [pc, #24]	@ (1f550 <am_hal_ctimer_int_enable+0x24>)
   1f538:	9001      	str	r0, [sp, #4]
   1f53a:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
   1f53e:	4323      	orrs	r3, r4
   1f540:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
   1f544:	9801      	ldr	r0, [sp, #4]
   1f546:	b002      	add	sp, #8
   1f548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f54c:	f000 ba6c 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f550:	40008000 	.word	0x40008000

0001f554 <am_hal_ctimer_int_clear>:
   1f554:	b510      	push	{r4, lr}
   1f556:	b082      	sub	sp, #8
   1f558:	4604      	mov	r4, r0
   1f55a:	f000 fa61 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f55e:	4b05      	ldr	r3, [pc, #20]	@ (1f574 <am_hal_ctimer_int_clear+0x20>)
   1f560:	9001      	str	r0, [sp, #4]
   1f562:	f8c3 4208 	str.w	r4, [r3, #520]	@ 0x208
   1f566:	9801      	ldr	r0, [sp, #4]
   1f568:	b002      	add	sp, #8
   1f56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f56e:	f000 ba5b 	b.w	1fa28 <am_hal_interrupt_master_set>
   1f572:	bf00      	nop
   1f574:	40008000 	.word	0x40008000

0001f578 <am_hal_flash_delay>:
   1f578:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   1f57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
   1f57e:	075b      	lsls	r3, r3, #29
   1f580:	bf46      	itte	mi
   1f582:	0040      	lslmi	r0, r0, #1
   1f584:	230e      	movmi	r3, #14
   1f586:	230b      	movpl	r3, #11
   1f588:	4298      	cmp	r0, r3
   1f58a:	d902      	bls.n	1f592 <am_hal_flash_delay+0x1a>
   1f58c:	1ac0      	subs	r0, r0, r3
   1f58e:	4b01      	ldr	r3, [pc, #4]	@ (1f594 <am_hal_flash_delay+0x1c>)
   1f590:	4718      	bx	r3
   1f592:	4770      	bx	lr
   1f594:	0800009d 	.word	0x0800009d

0001f598 <am_hal_flash_delay_status_check>:
   1f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f59c:	f89d c020 	ldrb.w	ip, [sp, #32]
   1f5a0:	4604      	mov	r4, r0
   1f5a2:	460d      	mov	r5, r1
   1f5a4:	4616      	mov	r6, r2
   1f5a6:	461f      	mov	r7, r3
   1f5a8:	f1bc 0f00 	cmp.w	ip, #0
   1f5ac:	d015      	beq.n	1f5da <am_hal_flash_delay_status_check+0x42>
   1f5ae:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 1f608 <am_hal_flash_delay_status_check+0x70>
   1f5b2:	f04f 2940 	mov.w	r9, #1073758208	@ 0x40004000
   1f5b6:	e009      	b.n	1f5cc <am_hal_flash_delay_status_check+0x34>
   1f5b8:	b31c      	cbz	r4, 1f602 <am_hal_flash_delay_status_check+0x6a>
   1f5ba:	f8d9 3034 	ldr.w	r3, [r9, #52]	@ 0x34
   1f5be:	f013 0f04 	tst.w	r3, #4
   1f5c2:	bf0c      	ite	eq
   1f5c4:	2005      	moveq	r0, #5
   1f5c6:	2012      	movne	r0, #18
   1f5c8:	3c01      	subs	r4, #1
   1f5ca:	47c0      	blx	r8
   1f5cc:	6828      	ldr	r0, [r5, #0]
   1f5ce:	4030      	ands	r0, r6
   1f5d0:	42b8      	cmp	r0, r7
   1f5d2:	d1f1      	bne.n	1f5b8 <am_hal_flash_delay_status_check+0x20>
   1f5d4:	2000      	movs	r0, #0
   1f5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f5da:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 1f608 <am_hal_flash_delay_status_check+0x70>
   1f5de:	f04f 2840 	mov.w	r8, #1073758208	@ 0x40004000
   1f5e2:	e009      	b.n	1f5f8 <am_hal_flash_delay_status_check+0x60>
   1f5e4:	b16c      	cbz	r4, 1f602 <am_hal_flash_delay_status_check+0x6a>
   1f5e6:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
   1f5ea:	f013 0f04 	tst.w	r3, #4
   1f5ee:	bf0c      	ite	eq
   1f5f0:	2005      	moveq	r0, #5
   1f5f2:	2012      	movne	r0, #18
   1f5f4:	3c01      	subs	r4, #1
   1f5f6:	47c8      	blx	r9
   1f5f8:	6828      	ldr	r0, [r5, #0]
   1f5fa:	4030      	ands	r0, r6
   1f5fc:	42b8      	cmp	r0, r7
   1f5fe:	d0f1      	beq.n	1f5e4 <am_hal_flash_delay_status_check+0x4c>
   1f600:	e7e8      	b.n	1f5d4 <am_hal_flash_delay_status_check+0x3c>
   1f602:	2004      	movs	r0, #4
   1f604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f608:	0800009d 	.word	0x0800009d

0001f60c <am_hal_flash_load_ui32>:
   1f60c:	4b00      	ldr	r3, [pc, #0]	@ (1f610 <am_hal_flash_load_ui32+0x4>)
   1f60e:	4718      	bx	r3
   1f610:	08000075 	.word	0x08000075

0001f614 <am_hal_flash_store_ui32>:
   1f614:	4b01      	ldr	r3, [pc, #4]	@ (1f61c <am_hal_flash_store_ui32+0x8>)
   1f616:	f043 0301 	orr.w	r3, r3, #1
   1f61a:	4718      	bx	r3
   1f61c:	1000241c 	.word	0x1000241c

0001f620 <am_hal_gpio_pinconfig>:
   1f620:	2831      	cmp	r0, #49	@ 0x31
   1f622:	f200 80bc 	bhi.w	1f79e <am_hal_gpio_pinconfig+0x17e>
   1f626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f62a:	4604      	mov	r4, r0
   1f62c:	f011 07e0 	ands.w	r7, r1, #224	@ 0xe0
   1f630:	f001 0007 	and.w	r0, r1, #7
   1f634:	b085      	sub	sp, #20
   1f636:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1f63a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   1f63e:	d00f      	beq.n	1f660 <am_hal_gpio_pinconfig+0x40>
   1f640:	f3c1 1642 	ubfx	r6, r1, #5, #3
   1f644:	1db5      	adds	r5, r6, #6
   1f646:	f005 0507 	and.w	r5, r5, #7
   1f64a:	2d03      	cmp	r5, #3
   1f64c:	f042 0201 	orr.w	r2, r2, #1
   1f650:	f240 80a7 	bls.w	1f7a2 <am_hal_gpio_pinconfig+0x182>
   1f654:	2fc0      	cmp	r7, #192	@ 0xc0
   1f656:	f000 80eb 	beq.w	1f830 <am_hal_gpio_pinconfig+0x210>
   1f65a:	2f20      	cmp	r7, #32
   1f65c:	f000 80ed 	beq.w	1f83a <am_hal_gpio_pinconfig+0x21a>
   1f660:	b163      	cbz	r3, 1f67c <am_hal_gpio_pinconfig+0x5c>
   1f662:	2b01      	cmp	r3, #1
   1f664:	f000 80dd 	beq.w	1f822 <am_hal_gpio_pinconfig+0x202>
   1f668:	2b02      	cmp	r3, #2
   1f66a:	f040 80c3 	bne.w	1f7f4 <am_hal_gpio_pinconfig+0x1d4>
   1f66e:	4b7e      	ldr	r3, [pc, #504]	@ (1f868 <am_hal_gpio_pinconfig+0x248>)
   1f670:	5d1b      	ldrb	r3, [r3, r4]
   1f672:	075b      	lsls	r3, r3, #29
   1f674:	f140 80be 	bpl.w	1f7f4 <am_hal_gpio_pinconfig+0x1d4>
   1f678:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
   1f67c:	4b7b      	ldr	r3, [pc, #492]	@ (1f86c <am_hal_gpio_pinconfig+0x24c>)
   1f67e:	4d7c      	ldr	r5, [pc, #496]	@ (1f870 <am_hal_gpio_pinconfig+0x250>)
   1f680:	5d1b      	ldrb	r3, [r3, r4]
   1f682:	5d2d      	ldrb	r5, [r5, r4]
   1f684:	4103      	asrs	r3, r0
   1f686:	005b      	lsls	r3, r3, #1
   1f688:	f003 0302 	and.w	r3, r3, #2
   1f68c:	4285      	cmp	r5, r0
   1f68e:	ea43 0302 	orr.w	r3, r3, r2
   1f692:	f000 8091 	beq.w	1f7b8 <am_hal_gpio_pinconfig+0x198>
   1f696:	f3c1 2607 	ubfx	r6, r1, #8, #8
   1f69a:	f3c1 2581 	ubfx	r5, r1, #10, #2
   1f69e:	f3c1 3080 	ubfx	r0, r1, #14, #1
   1f6a2:	0a8a      	lsrs	r2, r1, #10
   1f6a4:	f006 070c 	and.w	r7, r6, #12
   1f6a8:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
   1f6ac:	f002 0208 	and.w	r2, r2, #8
   1f6b0:	f3c1 3500 	ubfx	r5, r1, #12, #1
   1f6b4:	2f04      	cmp	r7, #4
   1f6b6:	ea42 0200 	orr.w	r2, r2, r0
   1f6ba:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
   1f6be:	4628      	mov	r0, r5
   1f6c0:	f000 80ac 	beq.w	1f81c <am_hal_gpio_pinconfig+0x1fc>
   1f6c4:	486b      	ldr	r0, [pc, #428]	@ (1f874 <am_hal_gpio_pinconfig+0x254>)
   1f6c6:	6800      	ldr	r0, [r0, #0]
   1f6c8:	eba1 0800 	sub.w	r8, r1, r0
   1f6cc:	fab8 f888 	clz	r8, r8
   1f6d0:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1f6d4:	f016 0f60 	tst.w	r6, #96	@ 0x60
   1f6d8:	bf04      	itt	eq
   1f6da:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   1f6de:	f360 0200 	bfieq	r2, r0, #0, #1
   1f6e2:	00a6      	lsls	r6, r4, #2
   1f6e4:	f3c1 2101 	ubfx	r1, r1, #8, #2
   1f6e8:	2902      	cmp	r1, #2
   1f6ea:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   1f6ee:	f000 808e 	beq.w	1f80e <am_hal_gpio_pinconfig+0x1ee>
   1f6f2:	2903      	cmp	r1, #3
   1f6f4:	f000 8082 	beq.w	1f7fc <am_hal_gpio_pinconfig+0x1dc>
   1f6f8:	2901      	cmp	r1, #1
   1f6fa:	bf08      	it	eq
   1f6fc:	f043 0304 	orreq.w	r3, r3, #4
   1f700:	f005 0518 	and.w	r5, r5, #24
   1f704:	f04f 0900 	mov.w	r9, #0
   1f708:	f006 061c 	and.w	r6, r6, #28
   1f70c:	210f      	movs	r1, #15
   1f70e:	40b1      	lsls	r1, r6
   1f710:	27ff      	movs	r7, #255	@ 0xff
   1f712:	fa02 f606 	lsl.w	r6, r2, r6
   1f716:	43ca      	mvns	r2, r1
   1f718:	40af      	lsls	r7, r5
   1f71a:	9201      	str	r2, [sp, #4]
   1f71c:	fa03 f505 	lsl.w	r5, r3, r5
   1f720:	f000 f97e 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f724:	f024 0b03 	bic.w	fp, r4, #3
   1f728:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   1f72c:	f10b 4c80 	add.w	ip, fp, #1073741824	@ 0x40000000
   1f730:	4b51      	ldr	r3, [pc, #324]	@ (1f878 <am_hal_gpio_pinconfig+0x258>)
   1f732:	4952      	ldr	r1, [pc, #328]	@ (1f87c <am_hal_gpio_pinconfig+0x25c>)
   1f734:	9a01      	ldr	r2, [sp, #4]
   1f736:	9003      	str	r0, [sp, #12]
   1f738:	43ff      	mvns	r7, r7
   1f73a:	f02a 0a03 	bic.w	sl, sl, #3
   1f73e:	f50c 3c80 	add.w	ip, ip, #65536	@ 0x10000
   1f742:	f1b8 0f00 	cmp.w	r8, #0
   1f746:	d00b      	beq.n	1f760 <am_hal_gpio_pinconfig+0x140>
   1f748:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   1f74c:	f004 081f 	and.w	r8, r4, #31
   1f750:	484b      	ldr	r0, [pc, #300]	@ (1f880 <am_hal_gpio_pinconfig+0x260>)
   1f752:	f00e 0e04 	and.w	lr, lr, #4
   1f756:	2401      	movs	r4, #1
   1f758:	fa04 f408 	lsl.w	r4, r4, r8
   1f75c:	f84e 4000 	str.w	r4, [lr, r0]
   1f760:	4848      	ldr	r0, [pc, #288]	@ (1f884 <am_hal_gpio_pinconfig+0x264>)
   1f762:	2473      	movs	r4, #115	@ 0x73
   1f764:	6604      	str	r4, [r0, #96]	@ 0x60
   1f766:	f8dc 4000 	ldr.w	r4, [ip]
   1f76a:	403c      	ands	r4, r7
   1f76c:	4325      	orrs	r5, r4
   1f76e:	f8cc 5000 	str.w	r5, [ip]
   1f772:	f85a 4003 	ldr.w	r4, [sl, r3]
   1f776:	4022      	ands	r2, r4
   1f778:	4332      	orrs	r2, r6
   1f77a:	f84a 2003 	str.w	r2, [sl, r3]
   1f77e:	f85b 3001 	ldr.w	r3, [fp, r1]
   1f782:	401f      	ands	r7, r3
   1f784:	2400      	movs	r4, #0
   1f786:	ea47 0709 	orr.w	r7, r7, r9
   1f78a:	f84b 7001 	str.w	r7, [fp, r1]
   1f78e:	6604      	str	r4, [r0, #96]	@ 0x60
   1f790:	9803      	ldr	r0, [sp, #12]
   1f792:	f000 f949 	bl	1fa28 <am_hal_interrupt_master_set>
   1f796:	4620      	mov	r0, r4
   1f798:	b005      	add	sp, #20
   1f79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f79e:	2006      	movs	r0, #6
   1f7a0:	4770      	bx	lr
   1f7a2:	4d31      	ldr	r5, [pc, #196]	@ (1f868 <am_hal_gpio_pinconfig+0x248>)
   1f7a4:	5d2d      	ldrb	r5, [r5, r4]
   1f7a6:	3e02      	subs	r6, #2
   1f7a8:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   1f7ac:	07ee      	lsls	r6, r5, #31
   1f7ae:	d547      	bpl.n	1f840 <am_hal_gpio_pinconfig+0x220>
   1f7b0:	2b00      	cmp	r3, #0
   1f7b2:	f43f af63 	beq.w	1f67c <am_hal_gpio_pinconfig+0x5c>
   1f7b6:	e754      	b.n	1f662 <am_hal_gpio_pinconfig+0x42>
   1f7b8:	f3c1 4202 	ubfx	r2, r1, #16, #3
   1f7bc:	2a07      	cmp	r2, #7
   1f7be:	d041      	beq.n	1f844 <am_hal_gpio_pinconfig+0x224>
   1f7c0:	4d31      	ldr	r5, [pc, #196]	@ (1f888 <am_hal_gpio_pinconfig+0x268>)
   1f7c2:	4610      	mov	r0, r2
   1f7c4:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
   1f7c8:	f3c1 42c1 	ubfx	r2, r1, #19, #2
   1f7cc:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
   1f7d0:	4286      	cmp	r6, r0
   1f7d2:	d039      	beq.n	1f848 <am_hal_gpio_pinconfig+0x228>
   1f7d4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   1f7d8:	00a6      	lsls	r6, r4, #2
   1f7da:	786a      	ldrb	r2, [r5, #1]
   1f7dc:	4282      	cmp	r2, r0
   1f7de:	d03d      	beq.n	1f85c <am_hal_gpio_pinconfig+0x23c>
   1f7e0:	78aa      	ldrb	r2, [r5, #2]
   1f7e2:	4282      	cmp	r2, r0
   1f7e4:	d03c      	beq.n	1f860 <am_hal_gpio_pinconfig+0x240>
   1f7e6:	78ea      	ldrb	r2, [r5, #3]
   1f7e8:	4282      	cmp	r2, r0
   1f7ea:	d03b      	beq.n	1f864 <am_hal_gpio_pinconfig+0x244>
   1f7ec:	4827      	ldr	r0, [pc, #156]	@ (1f88c <am_hal_gpio_pinconfig+0x26c>)
   1f7ee:	b005      	add	sp, #20
   1f7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7f4:	4826      	ldr	r0, [pc, #152]	@ (1f890 <am_hal_gpio_pinconfig+0x270>)
   1f7f6:	b005      	add	sp, #20
   1f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7fc:	f005 0518 	and.w	r5, r5, #24
   1f800:	f04f 0901 	mov.w	r9, #1
   1f804:	f043 0304 	orr.w	r3, r3, #4
   1f808:	fa09 f905 	lsl.w	r9, r9, r5
   1f80c:	e77c      	b.n	1f708 <am_hal_gpio_pinconfig+0xe8>
   1f80e:	f005 0518 	and.w	r5, r5, #24
   1f812:	f04f 0901 	mov.w	r9, #1
   1f816:	fa09 f905 	lsl.w	r9, r9, r5
   1f81a:	e775      	b.n	1f708 <am_hal_gpio_pinconfig+0xe8>
   1f81c:	f04f 0801 	mov.w	r8, #1
   1f820:	e758      	b.n	1f6d4 <am_hal_gpio_pinconfig+0xb4>
   1f822:	4b11      	ldr	r3, [pc, #68]	@ (1f868 <am_hal_gpio_pinconfig+0x248>)
   1f824:	5d1b      	ldrb	r3, [r3, r4]
   1f826:	079d      	lsls	r5, r3, #30
   1f828:	d5e4      	bpl.n	1f7f4 <am_hal_gpio_pinconfig+0x1d4>
   1f82a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   1f82e:	e725      	b.n	1f67c <am_hal_gpio_pinconfig+0x5c>
   1f830:	2c14      	cmp	r4, #20
   1f832:	f43f af15 	beq.w	1f660 <am_hal_gpio_pinconfig+0x40>
   1f836:	4817      	ldr	r0, [pc, #92]	@ (1f894 <am_hal_gpio_pinconfig+0x274>)
   1f838:	e7ae      	b.n	1f798 <am_hal_gpio_pinconfig+0x178>
   1f83a:	2c14      	cmp	r4, #20
   1f83c:	f47f af10 	bne.w	1f660 <am_hal_gpio_pinconfig+0x40>
   1f840:	4815      	ldr	r0, [pc, #84]	@ (1f898 <am_hal_gpio_pinconfig+0x278>)
   1f842:	e7a9      	b.n	1f798 <am_hal_gpio_pinconfig+0x178>
   1f844:	4815      	ldr	r0, [pc, #84]	@ (1f89c <am_hal_gpio_pinconfig+0x27c>)
   1f846:	e7a7      	b.n	1f798 <am_hal_gpio_pinconfig+0x178>
   1f848:	2200      	movs	r2, #0
   1f84a:	00a6      	lsls	r6, r4, #2
   1f84c:	0052      	lsls	r2, r2, #1
   1f84e:	f3c1 5040 	ubfx	r0, r1, #21, #1
   1f852:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
   1f856:	f04f 0800 	mov.w	r8, #0
   1f85a:	e743      	b.n	1f6e4 <am_hal_gpio_pinconfig+0xc4>
   1f85c:	2201      	movs	r2, #1
   1f85e:	e7f5      	b.n	1f84c <am_hal_gpio_pinconfig+0x22c>
   1f860:	2202      	movs	r2, #2
   1f862:	e7f3      	b.n	1f84c <am_hal_gpio_pinconfig+0x22c>
   1f864:	2203      	movs	r2, #3
   1f866:	e7f1      	b.n	1f84c <am_hal_gpio_pinconfig+0x22c>
   1f868:	00030fc4 	.word	0x00030fc4
   1f86c:	00030ff8 	.word	0x00030ff8
   1f870:	000310f4 	.word	0x000310f4
   1f874:	00030fbc 	.word	0x00030fbc
   1f878:	40010040 	.word	0x40010040
   1f87c:	400100e0 	.word	0x400100e0
   1f880:	400100b4 	.word	0x400100b4
   1f884:	40010000 	.word	0x40010000
   1f888:	0003102c 	.word	0x0003102c
   1f88c:	08000104 	.word	0x08000104
   1f890:	08000102 	.word	0x08000102
   1f894:	08000101 	.word	0x08000101
   1f898:	08000100 	.word	0x08000100
   1f89c:	08000103 	.word	0x08000103

0001f8a0 <am_hal_gpio_state_read>:
   1f8a0:	b15a      	cbz	r2, 1f8ba <am_hal_gpio_state_read+0x1a>
   1f8a2:	2831      	cmp	r0, #49	@ 0x31
   1f8a4:	d81d      	bhi.n	1f8e2 <am_hal_gpio_state_read+0x42>
   1f8a6:	08c3      	lsrs	r3, r0, #3
   1f8a8:	2901      	cmp	r1, #1
   1f8aa:	f003 0304 	and.w	r3, r3, #4
   1f8ae:	f000 001f 	and.w	r0, r0, #31
   1f8b2:	d01b      	beq.n	1f8ec <am_hal_gpio_state_read+0x4c>
   1f8b4:	2902      	cmp	r1, #2
   1f8b6:	d00b      	beq.n	1f8d0 <am_hal_gpio_state_read+0x30>
   1f8b8:	b109      	cbz	r1, 1f8be <am_hal_gpio_state_read+0x1e>
   1f8ba:	2006      	movs	r0, #6
   1f8bc:	4770      	bx	lr
   1f8be:	4910      	ldr	r1, [pc, #64]	@ (1f900 <am_hal_gpio_state_read+0x60>)
   1f8c0:	585b      	ldr	r3, [r3, r1]
   1f8c2:	fa23 f000 	lsr.w	r0, r3, r0
   1f8c6:	f000 0001 	and.w	r0, r0, #1
   1f8ca:	6010      	str	r0, [r2, #0]
   1f8cc:	2000      	movs	r0, #0
   1f8ce:	4770      	bx	lr
   1f8d0:	490c      	ldr	r1, [pc, #48]	@ (1f904 <am_hal_gpio_state_read+0x64>)
   1f8d2:	585b      	ldr	r3, [r3, r1]
   1f8d4:	fa23 f000 	lsr.w	r0, r3, r0
   1f8d8:	f000 0001 	and.w	r0, r0, #1
   1f8dc:	6010      	str	r0, [r2, #0]
   1f8de:	2000      	movs	r0, #0
   1f8e0:	4770      	bx	lr
   1f8e2:	f04f 33ff 	mov.w	r3, #4294967295
   1f8e6:	6013      	str	r3, [r2, #0]
   1f8e8:	2005      	movs	r0, #5
   1f8ea:	4770      	bx	lr
   1f8ec:	4906      	ldr	r1, [pc, #24]	@ (1f908 <am_hal_gpio_state_read+0x68>)
   1f8ee:	585b      	ldr	r3, [r3, r1]
   1f8f0:	fa23 f000 	lsr.w	r0, r3, r0
   1f8f4:	f000 0001 	and.w	r0, r0, #1
   1f8f8:	6010      	str	r0, [r2, #0]
   1f8fa:	2000      	movs	r0, #0
   1f8fc:	4770      	bx	lr
   1f8fe:	bf00      	nop
   1f900:	40010080 	.word	0x40010080
   1f904:	400100a0 	.word	0x400100a0
   1f908:	40010088 	.word	0x40010088

0001f90c <am_hal_gpio_state_write>:
   1f90c:	2831      	cmp	r0, #49	@ 0x31
   1f90e:	d81a      	bhi.n	1f946 <am_hal_gpio_state_write+0x3a>
   1f910:	b570      	push	{r4, r5, r6, lr}
   1f912:	2905      	cmp	r1, #5
   1f914:	b082      	sub	sp, #8
   1f916:	460d      	mov	r5, r1
   1f918:	d812      	bhi.n	1f940 <am_hal_gpio_state_write+0x34>
   1f91a:	f000 031f 	and.w	r3, r0, #31
   1f91e:	2201      	movs	r2, #1
   1f920:	08c0      	lsrs	r0, r0, #3
   1f922:	f000 0404 	and.w	r4, r0, #4
   1f926:	fa02 f603 	lsl.w	r6, r2, r3
   1f92a:	f000 f879 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f92e:	3d01      	subs	r5, #1
   1f930:	9001      	str	r0, [sp, #4]
   1f932:	2d04      	cmp	r5, #4
   1f934:	d821      	bhi.n	1f97a <am_hal_gpio_state_write+0x6e>
   1f936:	e8df f005 	tbb	[pc, r5]
   1f93a:	1512      	.short	0x1512
   1f93c:	1d1a      	.short	0x1d1a
   1f93e:	08          	.byte	0x08
   1f93f:	00          	.byte	0x00
   1f940:	2006      	movs	r0, #6
   1f942:	b002      	add	sp, #8
   1f944:	bd70      	pop	{r4, r5, r6, pc}
   1f946:	2005      	movs	r0, #5
   1f948:	4770      	bx	lr
   1f94a:	4a0d      	ldr	r2, [pc, #52]	@ (1f980 <am_hal_gpio_state_write+0x74>)
   1f94c:	58a3      	ldr	r3, [r4, r2]
   1f94e:	4073      	eors	r3, r6
   1f950:	50a3      	str	r3, [r4, r2]
   1f952:	9801      	ldr	r0, [sp, #4]
   1f954:	f000 f868 	bl	1fa28 <am_hal_interrupt_master_set>
   1f958:	2000      	movs	r0, #0
   1f95a:	b002      	add	sp, #8
   1f95c:	bd70      	pop	{r4, r5, r6, pc}
   1f95e:	4b09      	ldr	r3, [pc, #36]	@ (1f984 <am_hal_gpio_state_write+0x78>)
   1f960:	50e6      	str	r6, [r4, r3]
   1f962:	e7f6      	b.n	1f952 <am_hal_gpio_state_write+0x46>
   1f964:	4a08      	ldr	r2, [pc, #32]	@ (1f988 <am_hal_gpio_state_write+0x7c>)
   1f966:	58a3      	ldr	r3, [r4, r2]
   1f968:	4073      	eors	r3, r6
   1f96a:	50a3      	str	r3, [r4, r2]
   1f96c:	e7f1      	b.n	1f952 <am_hal_gpio_state_write+0x46>
   1f96e:	4b04      	ldr	r3, [pc, #16]	@ (1f980 <am_hal_gpio_state_write+0x74>)
   1f970:	50e6      	str	r6, [r4, r3]
   1f972:	e7ee      	b.n	1f952 <am_hal_gpio_state_write+0x46>
   1f974:	4b05      	ldr	r3, [pc, #20]	@ (1f98c <am_hal_gpio_state_write+0x80>)
   1f976:	50e6      	str	r6, [r4, r3]
   1f978:	e7eb      	b.n	1f952 <am_hal_gpio_state_write+0x46>
   1f97a:	4b05      	ldr	r3, [pc, #20]	@ (1f990 <am_hal_gpio_state_write+0x84>)
   1f97c:	50e6      	str	r6, [r4, r3]
   1f97e:	e7e8      	b.n	1f952 <am_hal_gpio_state_write+0x46>
   1f980:	400100b4 	.word	0x400100b4
   1f984:	40010090 	.word	0x40010090
   1f988:	40010088 	.word	0x40010088
   1f98c:	400100a8 	.word	0x400100a8
   1f990:	40010098 	.word	0x40010098

0001f994 <am_hal_gpio_interrupt_enable>:
   1f994:	b570      	push	{r4, r5, r6, lr}
   1f996:	0c8b      	lsrs	r3, r1, #18
   1f998:	2500      	movs	r5, #0
   1f99a:	462a      	mov	r2, r5
   1f99c:	049b      	lsls	r3, r3, #18
   1f99e:	4313      	orrs	r3, r2
   1f9a0:	b082      	sub	sp, #8
   1f9a2:	d115      	bne.n	1f9d0 <am_hal_gpio_interrupt_enable+0x3c>
   1f9a4:	460c      	mov	r4, r1
   1f9a6:	4606      	mov	r6, r0
   1f9a8:	f000 f83a 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f9ac:	4b0a      	ldr	r3, [pc, #40]	@ (1f9d8 <am_hal_gpio_interrupt_enable+0x44>)
   1f9ae:	9001      	str	r0, [sp, #4]
   1f9b0:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   1f9b4:	4330      	orrs	r0, r6
   1f9b6:	f8c3 0200 	str.w	r0, [r3, #512]	@ 0x200
   1f9ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
   1f9be:	430c      	orrs	r4, r1
   1f9c0:	f8c3 4210 	str.w	r4, [r3, #528]	@ 0x210
   1f9c4:	9801      	ldr	r0, [sp, #4]
   1f9c6:	f000 f82f 	bl	1fa28 <am_hal_interrupt_master_set>
   1f9ca:	4628      	mov	r0, r5
   1f9cc:	b002      	add	sp, #8
   1f9ce:	bd70      	pop	{r4, r5, r6, pc}
   1f9d0:	2005      	movs	r0, #5
   1f9d2:	b002      	add	sp, #8
   1f9d4:	bd70      	pop	{r4, r5, r6, pc}
   1f9d6:	bf00      	nop
   1f9d8:	40010000 	.word	0x40010000

0001f9dc <am_hal_gpio_interrupt_clear>:
   1f9dc:	b570      	push	{r4, r5, r6, lr}
   1f9de:	0c8b      	lsrs	r3, r1, #18
   1f9e0:	2500      	movs	r5, #0
   1f9e2:	462a      	mov	r2, r5
   1f9e4:	049b      	lsls	r3, r3, #18
   1f9e6:	4313      	orrs	r3, r2
   1f9e8:	b082      	sub	sp, #8
   1f9ea:	d10f      	bne.n	1fa0c <am_hal_gpio_interrupt_clear+0x30>
   1f9ec:	460c      	mov	r4, r1
   1f9ee:	4606      	mov	r6, r0
   1f9f0:	f000 f816 	bl	1fa20 <am_hal_interrupt_master_disable>
   1f9f4:	4b07      	ldr	r3, [pc, #28]	@ (1fa14 <am_hal_gpio_interrupt_clear+0x38>)
   1f9f6:	9001      	str	r0, [sp, #4]
   1f9f8:	f8c3 6208 	str.w	r6, [r3, #520]	@ 0x208
   1f9fc:	f8c3 4218 	str.w	r4, [r3, #536]	@ 0x218
   1fa00:	9801      	ldr	r0, [sp, #4]
   1fa02:	f000 f811 	bl	1fa28 <am_hal_interrupt_master_set>
   1fa06:	4628      	mov	r0, r5
   1fa08:	b002      	add	sp, #8
   1fa0a:	bd70      	pop	{r4, r5, r6, pc}
   1fa0c:	2005      	movs	r0, #5
   1fa0e:	b002      	add	sp, #8
   1fa10:	bd70      	pop	{r4, r5, r6, pc}
   1fa12:	bf00      	nop
   1fa14:	40010000 	.word	0x40010000

0001fa18 <am_hal_interrupt_master_enable>:
   1fa18:	f3ef 8010 	mrs	r0, PRIMASK
   1fa1c:	b662      	cpsie	i
   1fa1e:	4770      	bx	lr

0001fa20 <am_hal_interrupt_master_disable>:
   1fa20:	f3ef 8010 	mrs	r0, PRIMASK
   1fa24:	b672      	cpsid	i
   1fa26:	4770      	bx	lr

0001fa28 <am_hal_interrupt_master_set>:
   1fa28:	f380 8810 	msr	PRIMASK, r0
   1fa2c:	4770      	bx	lr
   1fa2e:	bf00      	nop

0001fa30 <internal_iom_reset_on_error>:
   1fa30:	b570      	push	{r4, r5, r6, lr}
   1fa32:	6844      	ldr	r4, [r0, #4]
   1fa34:	f8d0 0864 	ldr.w	r0, [r0, #2148]	@ 0x864
   1fa38:	f504 24a0 	add.w	r4, r4, #327680	@ 0x50000
   1fa3c:	3404      	adds	r4, #4
   1fa3e:	0324      	lsls	r4, r4, #12
   1fa40:	2300      	movs	r3, #0
   1fa42:	f8d4 5200 	ldr.w	r5, [r4, #512]	@ 0x200
   1fa46:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
   1fa4a:	050b      	lsls	r3, r1, #20
   1fa4c:	d52a      	bpl.n	1faa4 <internal_iom_reset_on_error+0x74>
   1fa4e:	f8d4 3280 	ldr.w	r3, [r4, #640]	@ 0x280
   1fa52:	079e      	lsls	r6, r3, #30
   1fa54:	d457      	bmi.n	1fb06 <internal_iom_reset_on_error+0xd6>
   1fa56:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
   1fa5a:	079a      	lsls	r2, r3, #30
   1fa5c:	d508      	bpl.n	1fa70 <internal_iom_reset_on_error+0x40>
   1fa5e:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   1fa62:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1fa66:	2b03      	cmp	r3, #3
   1fa68:	d9f5      	bls.n	1fa56 <internal_iom_reset_on_error+0x26>
   1fa6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   1fa6e:	e7f6      	b.n	1fa5e <internal_iom_reset_on_error+0x2e>
   1fa70:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
   1fa74:	f003 0306 	and.w	r3, r3, #6
   1fa78:	2b04      	cmp	r3, #4
   1fa7a:	d1f9      	bne.n	1fa70 <internal_iom_reset_on_error+0x40>
   1fa7c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   1fa80:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
   1fa84:	d00e      	beq.n	1faa4 <internal_iom_reset_on_error+0x74>
   1fa86:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   1fa8a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1fa8e:	2b03      	cmp	r3, #3
   1fa90:	d9f4      	bls.n	1fa7c <internal_iom_reset_on_error+0x4c>
   1fa92:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   1fa96:	e7f6      	b.n	1fa86 <internal_iom_reset_on_error+0x56>
   1fa98:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
   1fa9c:	f003 0306 	and.w	r3, r3, #6
   1faa0:	2b04      	cmp	r3, #4
   1faa2:	d1f9      	bne.n	1fa98 <internal_iom_reset_on_error+0x68>
   1faa4:	06cb      	lsls	r3, r1, #27
   1faa6:	d406      	bmi.n	1fab6 <internal_iom_reset_on_error+0x86>
   1faa8:	f04f 33ff 	mov.w	r3, #4294967295
   1faac:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
   1fab0:	f8c4 5200 	str.w	r5, [r4, #512]	@ 0x200
   1fab4:	bd70      	pop	{r4, r5, r6, pc}
   1fab6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
   1faba:	f003 0306 	and.w	r3, r3, #6
   1fabe:	2b04      	cmp	r3, #4
   1fac0:	d1f9      	bne.n	1fab6 <internal_iom_reset_on_error+0x86>
   1fac2:	f894 3214 	ldrb.w	r3, [r4, #532]	@ 0x214
   1fac6:	f36f 1304 	bfc	r3, #4, #1
   1faca:	f884 3214 	strb.w	r3, [r4, #532]	@ 0x214
   1face:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
   1fad2:	f36f 0341 	bfc	r3, #1, #1
   1fad6:	f884 3110 	strb.w	r3, [r4, #272]	@ 0x110
   1fada:	0040      	lsls	r0, r0, #1
   1fadc:	f7ff fd4c 	bl	1f578 <am_hal_flash_delay>
   1fae0:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
   1fae4:	f043 0302 	orr.w	r3, r3, #2
   1fae8:	f884 3110 	strb.w	r3, [r4, #272]	@ 0x110
   1faec:	f894 3214 	ldrb.w	r3, [r4, #532]	@ 0x214
   1faf0:	f043 0310 	orr.w	r3, r3, #16
   1faf4:	f884 3214 	strb.w	r3, [r4, #532]	@ 0x214
   1faf8:	f04f 33ff 	mov.w	r3, #4294967295
   1fafc:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
   1fb00:	f8c4 5200 	str.w	r5, [r4, #512]	@ 0x200
   1fb04:	bd70      	pop	{r4, r5, r6, pc}
   1fb06:	f8d4 2288 	ldr.w	r2, [r4, #648]	@ 0x288
   1fb0a:	4e07      	ldr	r6, [pc, #28]	@ (1fb28 <internal_iom_reset_on_error+0xf8>)
   1fb0c:	2a00      	cmp	r2, #0
   1fb0e:	d0c3      	beq.n	1fa98 <internal_iom_reset_on_error+0x68>
   1fb10:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   1fb14:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1fb18:	2b03      	cmp	r3, #3
   1fb1a:	d9f9      	bls.n	1fb10 <internal_iom_reset_on_error+0xe0>
   1fb1c:	2a04      	cmp	r2, #4
   1fb1e:	f8c4 610c 	str.w	r6, [r4, #268]	@ 0x10c
   1fb22:	d9b9      	bls.n	1fa98 <internal_iom_reset_on_error+0x68>
   1fb24:	3a04      	subs	r2, #4
   1fb26:	e7f1      	b.n	1fb0c <internal_iom_reset_on_error+0xdc>
   1fb28:	deadbeef 	.word	0xdeadbeef

0001fb2c <am_hal_iom_uninitialize>:
   1fb2c:	b398      	cbz	r0, 1fb96 <am_hal_iom_uninitialize+0x6a>
   1fb2e:	b538      	push	{r3, r4, r5, lr}
   1fb30:	6803      	ldr	r3, [r0, #0]
   1fb32:	4a1a      	ldr	r2, [pc, #104]	@ (1fb9c <am_hal_iom_uninitialize+0x70>)
   1fb34:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   1fb38:	4293      	cmp	r3, r2
   1fb3a:	4604      	mov	r4, r0
   1fb3c:	d108      	bne.n	1fb50 <am_hal_iom_uninitialize+0x24>
   1fb3e:	78c3      	ldrb	r3, [r0, #3]
   1fb40:	079b      	lsls	r3, r3, #30
   1fb42:	d407      	bmi.n	1fb54 <am_hal_iom_uninitialize+0x28>
   1fb44:	78e3      	ldrb	r3, [r4, #3]
   1fb46:	f36f 0300 	bfc	r3, #0, #1
   1fb4a:	70e3      	strb	r3, [r4, #3]
   1fb4c:	2000      	movs	r0, #0
   1fb4e:	bd38      	pop	{r3, r4, r5, pc}
   1fb50:	2002      	movs	r0, #2
   1fb52:	bd38      	pop	{r3, r4, r5, pc}
   1fb54:	6a45      	ldr	r5, [r0, #36]	@ 0x24
   1fb56:	2d00      	cmp	r5, #0
   1fb58:	d1f4      	bne.n	1fb44 <am_hal_iom_uninitialize+0x18>
   1fb5a:	6843      	ldr	r3, [r0, #4]
   1fb5c:	f8d0 0828 	ldr.w	r0, [r0, #2088]	@ 0x828
   1fb60:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
   1fb64:	3304      	adds	r3, #4
   1fb66:	031b      	lsls	r3, r3, #12
   1fb68:	f893 2214 	ldrb.w	r2, [r3, #532]	@ 0x214
   1fb6c:	f365 0200 	bfi	r2, r5, #0, #1
   1fb70:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
   1fb74:	f893 2214 	ldrb.w	r2, [r3, #532]	@ 0x214
   1fb78:	f365 1204 	bfi	r2, r5, #4, #1
   1fb7c:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
   1fb80:	b120      	cbz	r0, 1fb8c <am_hal_iom_uninitialize+0x60>
   1fb82:	2101      	movs	r1, #1
   1fb84:	f001 fe86 	bl	21894 <am_hal_cmdq_term>
   1fb88:	f8c4 5828 	str.w	r5, [r4, #2088]	@ 0x828
   1fb8c:	78e3      	ldrb	r3, [r4, #3]
   1fb8e:	f36f 0341 	bfc	r3, #1, #1
   1fb92:	70e3      	strb	r3, [r4, #3]
   1fb94:	e7d6      	b.n	1fb44 <am_hal_iom_uninitialize+0x18>
   1fb96:	2002      	movs	r0, #2
   1fb98:	4770      	bx	lr
   1fb9a:	bf00      	nop
   1fb9c:	01123456 	.word	0x01123456

0001fba0 <am_hal_iom_initialize>:
   1fba0:	2805      	cmp	r0, #5
   1fba2:	d817      	bhi.n	1fbd4 <am_hal_iom_initialize+0x34>
   1fba4:	b1d9      	cbz	r1, 1fbde <am_hal_iom_initialize+0x3e>
   1fba6:	b4f0      	push	{r4, r5, r6, r7}
   1fba8:	4e0e      	ldr	r6, [pc, #56]	@ (1fbe4 <am_hal_iom_initialize+0x44>)
   1fbaa:	f640 04a4 	movw	r4, #2212	@ 0x8a4
   1fbae:	fb04 f400 	mul.w	r4, r4, r0
   1fbb2:	1935      	adds	r5, r6, r4
   1fbb4:	4602      	mov	r2, r0
   1fbb6:	78eb      	ldrb	r3, [r5, #3]
   1fbb8:	f013 0301 	ands.w	r3, r3, #1
   1fbbc:	d10c      	bne.n	1fbd8 <am_hal_iom_initialize+0x38>
   1fbbe:	5930      	ldr	r0, [r6, r4]
   1fbc0:	4f09      	ldr	r7, [pc, #36]	@ (1fbe8 <am_hal_iom_initialize+0x48>)
   1fbc2:	f000 407c 	and.w	r0, r0, #4227858432	@ 0xfc000000
   1fbc6:	4307      	orrs	r7, r0
   1fbc8:	5137      	str	r7, [r6, r4]
   1fbca:	4618      	mov	r0, r3
   1fbcc:	606a      	str	r2, [r5, #4]
   1fbce:	600d      	str	r5, [r1, #0]
   1fbd0:	bcf0      	pop	{r4, r5, r6, r7}
   1fbd2:	4770      	bx	lr
   1fbd4:	2005      	movs	r0, #5
   1fbd6:	4770      	bx	lr
   1fbd8:	2007      	movs	r0, #7
   1fbda:	bcf0      	pop	{r4, r5, r6, r7}
   1fbdc:	4770      	bx	lr
   1fbde:	2006      	movs	r0, #6
   1fbe0:	4770      	bx	lr
   1fbe2:	bf00      	nop
   1fbe4:	10054d50 	.word	0x10054d50
   1fbe8:	01123456 	.word	0x01123456

0001fbec <am_hal_iom_enable>:
   1fbec:	2800      	cmp	r0, #0
   1fbee:	d068      	beq.n	1fcc2 <am_hal_iom_enable+0xd6>
   1fbf0:	b570      	push	{r4, r5, r6, lr}
   1fbf2:	6803      	ldr	r3, [r0, #0]
   1fbf4:	4a34      	ldr	r2, [pc, #208]	@ (1fcc8 <am_hal_iom_enable+0xdc>)
   1fbf6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   1fbfa:	4293      	cmp	r3, r2
   1fbfc:	b084      	sub	sp, #16
   1fbfe:	4604      	mov	r4, r0
   1fc00:	d150      	bne.n	1fca4 <am_hal_iom_enable+0xb8>
   1fc02:	78c3      	ldrb	r3, [r0, #3]
   1fc04:	079b      	lsls	r3, r3, #30
   1fc06:	d450      	bmi.n	1fcaa <am_hal_iom_enable+0xbe>
   1fc08:	6840      	ldr	r0, [r0, #4]
   1fc0a:	7a22      	ldrb	r2, [r4, #8]
   1fc0c:	f500 23a0 	add.w	r3, r0, #327680	@ 0x50000
   1fc10:	3304      	adds	r3, #4
   1fc12:	0319      	lsls	r1, r3, #12
   1fc14:	3a00      	subs	r2, #0
   1fc16:	f8d1 3214 	ldr.w	r3, [r1, #532]	@ 0x214
   1fc1a:	bf18      	it	ne
   1fc1c:	2201      	movne	r2, #1
   1fc1e:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1fc22:	429a      	cmp	r2, r3
   1fc24:	bf0c      	ite	eq
   1fc26:	2301      	moveq	r3, #1
   1fc28:	2310      	movne	r3, #16
   1fc2a:	f8c1 3214 	str.w	r3, [r1, #532]	@ 0x214
   1fc2e:	68e3      	ldr	r3, [r4, #12]
   1fc30:	b38b      	cbz	r3, 1fc96 <am_hal_iom_enable+0xaa>
   1fc32:	6922      	ldr	r2, [r4, #16]
   1fc34:	4e25      	ldr	r6, [pc, #148]	@ (1fccc <am_hal_iom_enable+0xe0>)
   1fc36:	9302      	str	r3, [sp, #8]
   1fc38:	2300      	movs	r3, #0
   1fc3a:	6263      	str	r3, [r4, #36]	@ 0x24
   1fc3c:	61e3      	str	r3, [r4, #28]
   1fc3e:	f8c1 62a4 	str.w	r6, [r1, #676]	@ 0x2a4
   1fc42:	f44f 7680 	mov.w	r6, #256	@ 0x100
   1fc46:	0855      	lsrs	r5, r2, #1
   1fc48:	f8c4 3854 	str.w	r3, [r4, #2132]	@ 0x854
   1fc4c:	f884 383c 	strb.w	r3, [r4, #2108]	@ 0x83c
   1fc50:	f8c4 3838 	str.w	r3, [r4, #2104]	@ 0x838
   1fc54:	f8c4 3844 	str.w	r3, [r4, #2116]	@ 0x844
   1fc58:	f8c4 3840 	str.w	r3, [r4, #2112]	@ 0x840
   1fc5c:	f8c4 3830 	str.w	r3, [r4, #2096]	@ 0x830
   1fc60:	f8c4 3828 	str.w	r3, [r4, #2088]	@ 0x828
   1fc64:	6223      	str	r3, [r4, #32]
   1fc66:	f8c4 385c 	str.w	r3, [r4, #2140]	@ 0x85c
   1fc6a:	b2c0      	uxtb	r0, r0
   1fc6c:	2301      	movs	r3, #1
   1fc6e:	f8a4 682c 	strh.w	r6, [r4, #2092]	@ 0x82c
   1fc72:	f604 0228 	addw	r2, r4, #2088	@ 0x828
   1fc76:	a901      	add	r1, sp, #4
   1fc78:	f88d 300c 	strb.w	r3, [sp, #12]
   1fc7c:	9501      	str	r5, [sp, #4]
   1fc7e:	f001 fd8d 	bl	2179c <am_hal_cmdq_init>
   1fc82:	6863      	ldr	r3, [r4, #4]
   1fc84:	b9a0      	cbnz	r0, 1fcb0 <am_hal_iom_enable+0xc4>
   1fc86:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
   1fc8a:	3304      	adds	r3, #4
   1fc8c:	031b      	lsls	r3, r3, #12
   1fc8e:	2202      	movs	r2, #2
   1fc90:	6226      	str	r6, [r4, #32]
   1fc92:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
   1fc96:	78e3      	ldrb	r3, [r4, #3]
   1fc98:	2000      	movs	r0, #0
   1fc9a:	f043 0302 	orr.w	r3, r3, #2
   1fc9e:	70e3      	strb	r3, [r4, #3]
   1fca0:	b004      	add	sp, #16
   1fca2:	bd70      	pop	{r4, r5, r6, pc}
   1fca4:	2002      	movs	r0, #2
   1fca6:	b004      	add	sp, #16
   1fca8:	bd70      	pop	{r4, r5, r6, pc}
   1fcaa:	2000      	movs	r0, #0
   1fcac:	b004      	add	sp, #16
   1fcae:	bd70      	pop	{r4, r5, r6, pc}
   1fcb0:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
   1fcb4:	3304      	adds	r3, #4
   1fcb6:	031b      	lsls	r3, r3, #12
   1fcb8:	2202      	movs	r2, #2
   1fcba:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
   1fcbe:	b004      	add	sp, #16
   1fcc0:	bd70      	pop	{r4, r5, r6, pc}
   1fcc2:	2002      	movs	r0, #2
   1fcc4:	4770      	bx	lr
   1fcc6:	bf00      	nop
   1fcc8:	01123456 	.word	0x01123456
   1fccc:	00800040 	.word	0x00800040

0001fcd0 <am_hal_iom_disable>:
   1fcd0:	b538      	push	{r3, r4, r5, lr}
   1fcd2:	b358      	cbz	r0, 1fd2c <am_hal_iom_disable+0x5c>
   1fcd4:	6803      	ldr	r3, [r0, #0]
   1fcd6:	4a18      	ldr	r2, [pc, #96]	@ (1fd38 <am_hal_iom_disable+0x68>)
   1fcd8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   1fcdc:	4293      	cmp	r3, r2
   1fcde:	4604      	mov	r4, r0
   1fce0:	d124      	bne.n	1fd2c <am_hal_iom_disable+0x5c>
   1fce2:	78c5      	ldrb	r5, [r0, #3]
   1fce4:	f015 0502 	ands.w	r5, r5, #2
   1fce8:	d01e      	beq.n	1fd28 <am_hal_iom_disable+0x58>
   1fcea:	6a45      	ldr	r5, [r0, #36]	@ 0x24
   1fcec:	bb0d      	cbnz	r5, 1fd32 <am_hal_iom_disable+0x62>
   1fcee:	6843      	ldr	r3, [r0, #4]
   1fcf0:	f8d0 0828 	ldr.w	r0, [r0, #2088]	@ 0x828
   1fcf4:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
   1fcf8:	3304      	adds	r3, #4
   1fcfa:	031b      	lsls	r3, r3, #12
   1fcfc:	f893 2214 	ldrb.w	r2, [r3, #532]	@ 0x214
   1fd00:	f365 0200 	bfi	r2, r5, #0, #1
   1fd04:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
   1fd08:	f893 2214 	ldrb.w	r2, [r3, #532]	@ 0x214
   1fd0c:	f365 1204 	bfi	r2, r5, #4, #1
   1fd10:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
   1fd14:	b120      	cbz	r0, 1fd20 <am_hal_iom_disable+0x50>
   1fd16:	2101      	movs	r1, #1
   1fd18:	f001 fdbc 	bl	21894 <am_hal_cmdq_term>
   1fd1c:	f8c4 5828 	str.w	r5, [r4, #2088]	@ 0x828
   1fd20:	78e3      	ldrb	r3, [r4, #3]
   1fd22:	f36f 0341 	bfc	r3, #1, #1
   1fd26:	70e3      	strb	r3, [r4, #3]
   1fd28:	4628      	mov	r0, r5
   1fd2a:	bd38      	pop	{r3, r4, r5, pc}
   1fd2c:	2502      	movs	r5, #2
   1fd2e:	4628      	mov	r0, r5
   1fd30:	bd38      	pop	{r3, r4, r5, pc}
   1fd32:	2503      	movs	r5, #3
   1fd34:	e7f8      	b.n	1fd28 <am_hal_iom_disable+0x58>
   1fd36:	bf00      	nop
   1fd38:	01123456 	.word	0x01123456

0001fd3c <am_hal_iom_power_ctrl>:
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	f000 80b6 	beq.w	1feae <am_hal_iom_power_ctrl+0x172>
   1fd42:	b570      	push	{r4, r5, r6, lr}
   1fd44:	6803      	ldr	r3, [r0, #0]
   1fd46:	4604      	mov	r4, r0
   1fd48:	4867      	ldr	r0, [pc, #412]	@ (1fee8 <am_hal_iom_power_ctrl+0x1ac>)
   1fd4a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   1fd4e:	4283      	cmp	r3, r0
   1fd50:	b082      	sub	sp, #8
   1fd52:	d15a      	bne.n	1fe0a <am_hal_iom_power_ctrl+0xce>
   1fd54:	2900      	cmp	r1, #0
   1fd56:	d05e      	beq.n	1fe16 <am_hal_iom_power_ctrl+0xda>
   1fd58:	3901      	subs	r1, #1
   1fd5a:	2901      	cmp	r1, #1
   1fd5c:	d858      	bhi.n	1fe10 <am_hal_iom_power_ctrl+0xd4>
   1fd5e:	78e3      	ldrb	r3, [r4, #3]
   1fd60:	6860      	ldr	r0, [r4, #4]
   1fd62:	0799      	lsls	r1, r3, #30
   1fd64:	d50e      	bpl.n	1fd84 <am_hal_iom_power_ctrl+0x48>
   1fd66:	f500 23a0 	add.w	r3, r0, #327680	@ 0x50000
   1fd6a:	3304      	adds	r3, #4
   1fd6c:	031b      	lsls	r3, r3, #12
   1fd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
   1fd72:	f003 0306 	and.w	r3, r3, #6
   1fd76:	2b04      	cmp	r3, #4
   1fd78:	f040 80a4 	bne.w	1fec4 <am_hal_iom_power_ctrl+0x188>
   1fd7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   1fd7e:	2b00      	cmp	r3, #0
   1fd80:	f040 80a0 	bne.w	1fec4 <am_hal_iom_power_ctrl+0x188>
   1fd84:	b3d2      	cbz	r2, 1fdfc <am_hal_iom_power_ctrl+0xc0>
   1fd86:	f500 23a0 	add.w	r3, r0, #327680	@ 0x50000
   1fd8a:	3304      	adds	r3, #4
   1fd8c:	031b      	lsls	r3, r3, #12
   1fd8e:	2201      	movs	r2, #1
   1fd90:	f8d3 5104 	ldr.w	r5, [r3, #260]	@ 0x104
   1fd94:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
   1fd98:	f8c4 586c 	str.w	r5, [r4, #2156]	@ 0x86c
   1fd9c:	f8d3 5214 	ldr.w	r5, [r3, #532]	@ 0x214
   1fda0:	f8c4 1874 	str.w	r1, [r4, #2164]	@ 0x874
   1fda4:	f8d3 1294 	ldr.w	r1, [r3, #660]	@ 0x294
   1fda8:	f8c4 5878 	str.w	r5, [r4, #2168]	@ 0x878
   1fdac:	f8d3 5298 	ldr.w	r5, [r3, #664]	@ 0x298
   1fdb0:	f8c4 187c 	str.w	r1, [r4, #2172]	@ 0x87c
   1fdb4:	f8d3 12a0 	ldr.w	r1, [r3, #672]	@ 0x2a0
   1fdb8:	f8c4 5880 	str.w	r5, [r4, #2176]	@ 0x880
   1fdbc:	f8d3 52a8 	ldr.w	r5, [r3, #680]	@ 0x2a8
   1fdc0:	f8c4 1884 	str.w	r1, [r4, #2180]	@ 0x884
   1fdc4:	f8d3 12ac 	ldr.w	r1, [r3, #684]	@ 0x2ac
   1fdc8:	f8c4 5888 	str.w	r5, [r4, #2184]	@ 0x888
   1fdcc:	f8d3 52b0 	ldr.w	r5, [r3, #688]	@ 0x2b0
   1fdd0:	f8c4 188c 	str.w	r1, [r4, #2188]	@ 0x88c
   1fdd4:	f8d3 1300 	ldr.w	r1, [r3, #768]	@ 0x300
   1fdd8:	f8c4 5890 	str.w	r5, [r4, #2192]	@ 0x890
   1fddc:	f8d3 5400 	ldr.w	r5, [r3, #1024]	@ 0x400
   1fde0:	f8c4 1894 	str.w	r1, [r4, #2196]	@ 0x894
   1fde4:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
   1fde8:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
   1fdec:	f8c4 3870 	str.w	r3, [r4, #2160]	@ 0x870
   1fdf0:	f8c4 5898 	str.w	r5, [r4, #2200]	@ 0x898
   1fdf4:	f8c4 189c 	str.w	r1, [r4, #2204]	@ 0x89c
   1fdf8:	f884 2868 	strb.w	r2, [r4, #2152]	@ 0x868
   1fdfc:	3002      	adds	r0, #2
   1fdfe:	b2c0      	uxtb	r0, r0
   1fe00:	f000 fcf6 	bl	207f0 <am_hal_pwrctrl_periph_disable>
   1fe04:	2000      	movs	r0, #0
   1fe06:	b002      	add	sp, #8
   1fe08:	bd70      	pop	{r4, r5, r6, pc}
   1fe0a:	2002      	movs	r0, #2
   1fe0c:	b002      	add	sp, #8
   1fe0e:	bd70      	pop	{r4, r5, r6, pc}
   1fe10:	2006      	movs	r0, #6
   1fe12:	b002      	add	sp, #8
   1fe14:	bd70      	pop	{r4, r5, r6, pc}
   1fe16:	2a00      	cmp	r2, #0
   1fe18:	d04b      	beq.n	1feb2 <am_hal_iom_power_ctrl+0x176>
   1fe1a:	f894 3868 	ldrb.w	r3, [r4, #2152]	@ 0x868
   1fe1e:	2b00      	cmp	r3, #0
   1fe20:	d052      	beq.n	1fec8 <am_hal_iom_power_ctrl+0x18c>
   1fe22:	6860      	ldr	r0, [r4, #4]
   1fe24:	3002      	adds	r0, #2
   1fe26:	b2c0      	uxtb	r0, r0
   1fe28:	f000 fcb8 	bl	2079c <am_hal_pwrctrl_periph_enable>
   1fe2c:	6863      	ldr	r3, [r4, #4]
   1fe2e:	f8d4 586c 	ldr.w	r5, [r4, #2156]	@ 0x86c
   1fe32:	f8d4 0878 	ldr.w	r0, [r4, #2168]	@ 0x878
   1fe36:	f8d4 1880 	ldr.w	r1, [r4, #2176]	@ 0x880
   1fe3a:	f8d4 6874 	ldr.w	r6, [r4, #2164]	@ 0x874
   1fe3e:	f8d4 287c 	ldr.w	r2, [r4, #2172]	@ 0x87c
   1fe42:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
   1fe46:	3304      	adds	r3, #4
   1fe48:	031b      	lsls	r3, r3, #12
   1fe4a:	f8c3 5104 	str.w	r5, [r3, #260]	@ 0x104
   1fe4e:	f8d4 5888 	ldr.w	r5, [r4, #2184]	@ 0x888
   1fe52:	f8c3 6210 	str.w	r6, [r3, #528]	@ 0x210
   1fe56:	f8c3 0214 	str.w	r0, [r3, #532]	@ 0x214
   1fe5a:	f8d4 088c 	ldr.w	r0, [r4, #2188]	@ 0x88c
   1fe5e:	f8c3 1298 	str.w	r1, [r3, #664]	@ 0x298
   1fe62:	f8d4 1890 	ldr.w	r1, [r4, #2192]	@ 0x890
   1fe66:	f8c3 52a8 	str.w	r5, [r3, #680]	@ 0x2a8
   1fe6a:	f8d4 5894 	ldr.w	r5, [r4, #2196]	@ 0x894
   1fe6e:	f8c3 02ac 	str.w	r0, [r3, #684]	@ 0x2ac
   1fe72:	f8d4 0898 	ldr.w	r0, [r4, #2200]	@ 0x898
   1fe76:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
   1fe7a:	f8d4 189c 	ldr.w	r1, [r4, #2204]	@ 0x89c
   1fe7e:	f8c3 5300 	str.w	r5, [r3, #768]	@ 0x300
   1fe82:	f8d4 5870 	ldr.w	r5, [r4, #2160]	@ 0x870
   1fe86:	f8c3 0400 	str.w	r0, [r3, #1024]	@ 0x400
   1fe8a:	f894 0884 	ldrb.w	r0, [r4, #2180]	@ 0x884
   1fe8e:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   1fe92:	f022 0101 	bic.w	r1, r2, #1
   1fe96:	07d2      	lsls	r2, r2, #31
   1fe98:	f8c3 5240 	str.w	r5, [r3, #576]	@ 0x240
   1fe9c:	f8c3 02a4 	str.w	r0, [r3, #676]	@ 0x2a4
   1fea0:	f8c3 1294 	str.w	r1, [r3, #660]	@ 0x294
   1fea4:	d412      	bmi.n	1fecc <am_hal_iom_power_ctrl+0x190>
   1fea6:	2000      	movs	r0, #0
   1fea8:	f884 0868 	strb.w	r0, [r4, #2152]	@ 0x868
   1feac:	e7ae      	b.n	1fe0c <am_hal_iom_power_ctrl+0xd0>
   1feae:	2002      	movs	r0, #2
   1feb0:	4770      	bx	lr
   1feb2:	6860      	ldr	r0, [r4, #4]
   1feb4:	9201      	str	r2, [sp, #4]
   1feb6:	3002      	adds	r0, #2
   1feb8:	b2c0      	uxtb	r0, r0
   1feba:	f000 fc6f 	bl	2079c <am_hal_pwrctrl_periph_enable>
   1febe:	9a01      	ldr	r2, [sp, #4]
   1fec0:	4610      	mov	r0, r2
   1fec2:	e7a3      	b.n	1fe0c <am_hal_iom_power_ctrl+0xd0>
   1fec4:	2003      	movs	r0, #3
   1fec6:	e7a1      	b.n	1fe0c <am_hal_iom_power_ctrl+0xd0>
   1fec8:	2007      	movs	r0, #7
   1feca:	e79f      	b.n	1fe0c <am_hal_iom_power_ctrl+0xd0>
   1fecc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   1fece:	b92a      	cbnz	r2, 1fedc <am_hal_iom_power_ctrl+0x1a0>
   1fed0:	f8d3 2298 	ldr.w	r2, [r3, #664]	@ 0x298
   1fed4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
   1fed8:	e9c2 3200 	strd	r3, r2, [r2]
   1fedc:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   1fee0:	f001 fcba 	bl	21858 <am_hal_cmdq_enable>
   1fee4:	e7df      	b.n	1fea6 <am_hal_iom_power_ctrl+0x16a>
   1fee6:	bf00      	nop
   1fee8:	01123456 	.word	0x01123456

0001feec <am_hal_iom_configure>:
   1feec:	2800      	cmp	r0, #0
   1feee:	d06b      	beq.n	1ffc8 <am_hal_iom_configure+0xdc>
   1fef0:	6803      	ldr	r3, [r0, #0]
   1fef2:	4abe      	ldr	r2, [pc, #760]	@ (201ec <am_hal_iom_configure+0x300>)
   1fef4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   1fef8:	4293      	cmp	r3, r2
   1fefa:	d165      	bne.n	1ffc8 <am_hal_iom_configure+0xdc>
   1fefc:	2900      	cmp	r1, #0
   1fefe:	f000 813b 	beq.w	20178 <am_hal_iom_configure+0x28c>
   1ff02:	6843      	ldr	r3, [r0, #4]
   1ff04:	2b05      	cmp	r3, #5
   1ff06:	f200 8137 	bhi.w	20178 <am_hal_iom_configure+0x28c>
   1ff0a:	78c2      	ldrb	r2, [r0, #3]
   1ff0c:	0792      	lsls	r2, r2, #30
   1ff0e:	f100 8138 	bmi.w	20182 <am_hal_iom_configure+0x296>
   1ff12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff16:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
   1ff1a:	3304      	adds	r3, #4
   1ff1c:	780a      	ldrb	r2, [r1, #0]
   1ff1e:	7202      	strb	r2, [r0, #8]
   1ff20:	031b      	lsls	r3, r3, #12
   1ff22:	f241 0410 	movw	r4, #4112	@ 0x1010
   1ff26:	f8c3 4104 	str.w	r4, [r3, #260]	@ 0x104
   1ff2a:	2a00      	cmp	r2, #0
   1ff2c:	d04e      	beq.n	1ffcc <am_hal_iom_configure+0xe0>
   1ff2e:	2a01      	cmp	r2, #1
   1ff30:	f040 8129 	bne.w	20186 <am_hal_iom_configure+0x29a>
   1ff34:	684c      	ldr	r4, [r1, #4]
   1ff36:	4aae      	ldr	r2, [pc, #696]	@ (201f0 <am_hal_iom_configure+0x304>)
   1ff38:	4294      	cmp	r4, r2
   1ff3a:	f000 8144 	beq.w	201c6 <am_hal_iom_configure+0x2da>
   1ff3e:	4aad      	ldr	r2, [pc, #692]	@ (201f4 <am_hal_iom_configure+0x308>)
   1ff40:	4294      	cmp	r4, r2
   1ff42:	f000 813a 	beq.w	201ba <am_hal_iom_configure+0x2ce>
   1ff46:	4aac      	ldr	r2, [pc, #688]	@ (201f8 <am_hal_iom_configure+0x30c>)
   1ff48:	4294      	cmp	r4, r2
   1ff4a:	f000 812f 	beq.w	201ac <am_hal_iom_configure+0x2c0>
   1ff4e:	4aab      	ldr	r2, [pc, #684]	@ (201fc <am_hal_iom_configure+0x310>)
   1ff50:	fbb2 f2f4 	udiv	r2, r2, r4
   1ff54:	3a01      	subs	r2, #1
   1ff56:	2aff      	cmp	r2, #255	@ 0xff
   1ff58:	f240 811c 	bls.w	20194 <am_hal_iom_configure+0x2a8>
   1ff5c:	4aa8      	ldr	r2, [pc, #672]	@ (20200 <am_hal_iom_configure+0x314>)
   1ff5e:	fbb2 f2f4 	udiv	r2, r2, r4
   1ff62:	3a01      	subs	r2, #1
   1ff64:	2aff      	cmp	r2, #255	@ 0xff
   1ff66:	f240 8137 	bls.w	201d8 <am_hal_iom_configure+0x2ec>
   1ff6a:	4aa6      	ldr	r2, [pc, #664]	@ (20204 <am_hal_iom_configure+0x318>)
   1ff6c:	fbb2 f2f4 	udiv	r2, r2, r4
   1ff70:	3a01      	subs	r2, #1
   1ff72:	2aff      	cmp	r2, #255	@ 0xff
   1ff74:	f240 812d 	bls.w	201d2 <am_hal_iom_configure+0x2e6>
   1ff78:	4aa3      	ldr	r2, [pc, #652]	@ (20208 <am_hal_iom_configure+0x31c>)
   1ff7a:	fbb2 f2f4 	udiv	r2, r2, r4
   1ff7e:	3a01      	subs	r2, #1
   1ff80:	2aff      	cmp	r2, #255	@ 0xff
   1ff82:	f240 812c 	bls.w	201de <am_hal_iom_configure+0x2f2>
   1ff86:	4aa1      	ldr	r2, [pc, #644]	@ (2020c <am_hal_iom_configure+0x320>)
   1ff88:	fbb2 f2f4 	udiv	r2, r2, r4
   1ff8c:	3a01      	subs	r2, #1
   1ff8e:	2aff      	cmp	r2, #255	@ 0xff
   1ff90:	f240 8128 	bls.w	201e4 <am_hal_iom_configure+0x2f8>
   1ff94:	4a9e      	ldr	r2, [pc, #632]	@ (20210 <am_hal_iom_configure+0x324>)
   1ff96:	fbb2 f2f4 	udiv	r2, r2, r4
   1ff9a:	3a01      	subs	r2, #1
   1ff9c:	2aff      	cmp	r2, #255	@ 0xff
   1ff9e:	bf98      	it	ls
   1ffa0:	f44f 65e0 	movls.w	r5, #1792	@ 0x700
   1ffa4:	f200 80ea 	bhi.w	2017c <am_hal_iom_configure+0x290>
   1ffa8:	0856      	lsrs	r6, r2, #1
   1ffaa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
   1ffae:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
   1ffb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
   1ffb6:	4d97      	ldr	r5, [pc, #604]	@ (20214 <am_hal_iom_configure+0x328>)
   1ffb8:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
   1ffbc:	f042 0201 	orr.w	r2, r2, #1
   1ffc0:	4d95      	ldr	r5, [pc, #596]	@ (20218 <am_hal_iom_configure+0x32c>)
   1ffc2:	fbb5 f4f4 	udiv	r4, r5, r4
   1ffc6:	e0b3      	b.n	20130 <am_hal_iom_configure+0x244>
   1ffc8:	2002      	movs	r0, #2
   1ffca:	4770      	bx	lr
   1ffcc:	7a0f      	ldrb	r7, [r1, #8]
   1ffce:	2f03      	cmp	r7, #3
   1ffd0:	f200 80d4 	bhi.w	2017c <am_hal_iom_configure+0x290>
   1ffd4:	684e      	ldr	r6, [r1, #4]
   1ffd6:	4a90      	ldr	r2, [pc, #576]	@ (20218 <am_hal_iom_configure+0x32c>)
   1ffd8:	4296      	cmp	r6, r2
   1ffda:	f200 80cf 	bhi.w	2017c <am_hal_iom_configure+0x290>
   1ffde:	fbb2 f4f6 	udiv	r4, r2, r6
   1ffe2:	2e00      	cmp	r6, #0
   1ffe4:	f000 80d9 	beq.w	2019a <am_hal_iom_configure+0x2ae>
   1ffe8:	fb06 2214 	mls	r2, r6, r4, r2
   1ffec:	2a00      	cmp	r2, #0
   1ffee:	bf0c      	ite	eq
   1fff0:	4625      	moveq	r5, r4
   1fff2:	1c65      	addne	r5, r4, #1
   1fff4:	f1c5 0c00 	rsb	ip, r5, #0
   1fff8:	ea0c 0c05 	and.w	ip, ip, r5
   1fffc:	fabc fc8c 	clz	ip, ip
   20000:	f1cc 0c1f 	rsb	ip, ip, #31
   20004:	f1bc 0f06 	cmp.w	ip, #6
   20008:	bfa8      	it	ge
   2000a:	f04f 0c06 	movge.w	ip, #6
   2000e:	f5b6 6f37 	cmp.w	r6, #2928	@ 0xb70
   20012:	f240 80ba 	bls.w	2018a <am_hal_iom_configure+0x29e>
   20016:	f8df e224 	ldr.w	lr, [pc, #548]	@ 2023c <am_hal_iom_configure+0x350>
   2001a:	f5a6 0274 	sub.w	r2, r6, #15990784	@ 0xf40000
   2001e:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
   20022:	4572      	cmp	r2, lr
   20024:	bf35      	itete	cc
   20026:	f44f 6200 	movcc.w	r2, #2048	@ 0x800
   2002a:	2200      	movcs	r2, #0
   2002c:	f04f 0803 	movcc.w	r8, #3
   20030:	f04f 0801 	movcs.w	r8, #1
   20034:	fa08 fe0c 	lsl.w	lr, r8, ip
   20038:	fbb5 fafe 	udiv	sl, r5, lr
   2003c:	fb0e 5e1a 	mls	lr, lr, sl, r5
   20040:	f1be 0f00 	cmp.w	lr, #0
   20044:	bf18      	it	ne
   20046:	f10a 0a01 	addne.w	sl, sl, #1
   2004a:	faba f98a 	clz	r9, sl
   2004e:	f1c9 091f 	rsb	r9, r9, #31
   20052:	f1b9 0f07 	cmp.w	r9, #7
   20056:	f240 80a2 	bls.w	2019e <am_hal_iom_configure+0x2b2>
   2005a:	f1ac 0c07 	sub.w	ip, ip, #7
   2005e:	44cc      	add	ip, r9
   20060:	f10c 0e01 	add.w	lr, ip, #1
   20064:	f1be 0f07 	cmp.w	lr, #7
   20068:	f200 8097 	bhi.w	2019a <am_hal_iom_configure+0x2ae>
   2006c:	f1a9 0907 	sub.w	r9, r9, #7
   20070:	f04f 0b01 	mov.w	fp, #1
   20074:	fa0b fb09 	lsl.w	fp, fp, r9
   20078:	f10b 3bff 	add.w	fp, fp, #4294967295
   2007c:	ea0b 0b0a 	and.w	fp, fp, sl
   20080:	fa2a f909 	lsr.w	r9, sl, r9
   20084:	f1bb 0f00 	cmp.w	fp, #0
   20088:	bf0c      	ite	eq
   2008a:	46ca      	moveq	sl, r9
   2008c:	f109 0a01 	addne.w	sl, r9, #1
   20090:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 201fc <am_hal_iom_configure+0x310>
   20094:	454e      	cmp	r6, r9
   20096:	f10a 39ff 	add.w	r9, sl, #4294967295
   2009a:	f080 8083 	bcs.w	201a4 <am_hal_iom_configure+0x2b8>
   2009e:	2601      	movs	r6, #1
   200a0:	fa06 f60c 	lsl.w	r6, r6, ip
   200a4:	42b5      	cmp	r5, r6
   200a6:	d07d      	beq.n	201a4 <am_hal_iom_configure+0x2b8>
   200a8:	4656      	mov	r6, sl
   200aa:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
   200ae:	107d      	asrs	r5, r7, #1
   200b0:	2d01      	cmp	r5, #1
   200b2:	bf08      	it	eq
   200b4:	f1aa 0502 	subeq.w	r5, sl, #2
   200b8:	fa08 fa0c 	lsl.w	sl, r8, ip
   200bc:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 20218 <am_hal_iom_configure+0x32c>
   200c0:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 20240 <am_hal_iom_configure+0x354>
   200c4:	fb06 f60a 	mul.w	r6, r6, sl
   200c8:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
   200cc:	ea4f 0a56 	mov.w	sl, r6, lsr #1
   200d0:	ea42 020b 	orr.w	r2, r2, fp
   200d4:	fbb8 fbf6 	udiv	fp, r8, r6
   200d8:	fb06 861b 	mls	r6, r6, fp, r8
   200dc:	bf0c      	ite	eq
   200de:	086d      	lsreq	r5, r5, #1
   200e0:	ea4f 0559 	movne.w	r5, r9, lsr #1
   200e4:	45b2      	cmp	sl, r6
   200e6:	bf2c      	ite	cs
   200e8:	46da      	movcs	sl, fp
   200ea:	f10b 0a01 	addcc.w	sl, fp, #1
   200ee:	ea4f 4805 	mov.w	r8, r5, lsl #16
   200f2:	fbac 5c0a 	umull	r5, ip, ip, sl
   200f6:	4d49      	ldr	r5, [pc, #292]	@ (2021c <am_hal_iom_configure+0x330>)
   200f8:	4e49      	ldr	r6, [pc, #292]	@ (20220 <am_hal_iom_configure+0x334>)
   200fa:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
   200fe:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
   20102:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   20106:	45aa      	cmp	sl, r5
   20108:	ea42 0208 	orr.w	r2, r2, r8
   2010c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
   20110:	fb06 a61c 	mls	r6, r6, ip, sl
   20114:	d908      	bls.n	20128 <am_hal_iom_configure+0x23c>
   20116:	f10c 35ff 	add.w	r5, ip, #4294967295
   2011a:	ea05 0c0c 	and.w	ip, r5, ip
   2011e:	ea5c 0506 	orrs.w	r5, ip, r6
   20122:	d101      	bne.n	20128 <am_hal_iom_configure+0x23c>
   20124:	f44e 6200 	orr.w	r2, lr, #2048	@ 0x800
   20128:	f042 0201 	orr.w	r2, r2, #1
   2012c:	f8c3 7300 	str.w	r7, [r3, #768]	@ 0x300
   20130:	e9d1 7503 	ldrd	r7, r5, [r1, #12]
   20134:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
   20138:	f246 015f 	movw	r1, #24671	@ 0x605f
   2013c:	f1a5 0208 	sub.w	r2, r5, #8
   20140:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
   20144:	ea4f 0382 	mov.w	r3, r2, lsl #2
   20148:	bf28      	it	cs
   2014a:	4a36      	ldrcs	r2, [pc, #216]	@ (20224 <am_hal_iom_configure+0x338>)
   2014c:	f8c0 4864 	str.w	r4, [r0, #2148]	@ 0x864
   20150:	bf26      	itte	cs
   20152:	fba2 2303 	umullcs	r2, r3, r2, r3
   20156:	099b      	lsrcs	r3, r3, #6
   20158:	f44f 7380 	movcc.w	r3, #256	@ 0x100
   2015c:	f8c0 3858 	str.w	r3, [r0, #2136]	@ 0x858
   20160:	2300      	movs	r3, #0
   20162:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
   20166:	f8c0 38a0 	str.w	r3, [r0, #2208]	@ 0x8a0
   2016a:	e9c0 7503 	strd	r7, r5, [r0, #12]
   2016e:	f8c0 6860 	str.w	r6, [r0, #2144]	@ 0x860
   20172:	4618      	mov	r0, r3
   20174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20178:	2006      	movs	r0, #6
   2017a:	4770      	bx	lr
   2017c:	2006      	movs	r0, #6
   2017e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20182:	2007      	movs	r0, #7
   20184:	4770      	bx	lr
   20186:	2005      	movs	r0, #5
   20188:	e7f9      	b.n	2017e <am_hal_iom_configure+0x292>
   2018a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
   2018e:	f04f 0803 	mov.w	r8, #3
   20192:	e74f      	b.n	20034 <am_hal_iom_configure+0x148>
   20194:	f44f 7500 	mov.w	r5, #512	@ 0x200
   20198:	e706      	b.n	1ffa8 <am_hal_iom_configure+0xbc>
   2019a:	2201      	movs	r2, #1
   2019c:	e7c6      	b.n	2012c <am_hal_iom_configure+0x240>
   2019e:	f10c 0e01 	add.w	lr, ip, #1
   201a2:	e775      	b.n	20090 <am_hal_iom_configure+0x1a4>
   201a4:	2601      	movs	r6, #1
   201a6:	f04f 0b00 	mov.w	fp, #0
   201aa:	e780      	b.n	200ae <am_hal_iom_configure+0x1c2>
   201ac:	4a1e      	ldr	r2, [pc, #120]	@ (20228 <am_hal_iom_configure+0x33c>)
   201ae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
   201b2:	f44f 74f0 	mov.w	r4, #480	@ 0x1e0
   201b6:	4a1d      	ldr	r2, [pc, #116]	@ (2022c <am_hal_iom_configure+0x340>)
   201b8:	e7ba      	b.n	20130 <am_hal_iom_configure+0x244>
   201ba:	4a16      	ldr	r2, [pc, #88]	@ (20214 <am_hal_iom_configure+0x328>)
   201bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
   201c0:	2430      	movs	r4, #48	@ 0x30
   201c2:	4a1b      	ldr	r2, [pc, #108]	@ (20230 <am_hal_iom_configure+0x344>)
   201c4:	e7b4      	b.n	20130 <am_hal_iom_configure+0x244>
   201c6:	4a1b      	ldr	r2, [pc, #108]	@ (20234 <am_hal_iom_configure+0x348>)
   201c8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
   201cc:	2478      	movs	r4, #120	@ 0x78
   201ce:	4a1a      	ldr	r2, [pc, #104]	@ (20238 <am_hal_iom_configure+0x34c>)
   201d0:	e7ae      	b.n	20130 <am_hal_iom_configure+0x244>
   201d2:	f44f 6580 	mov.w	r5, #1024	@ 0x400
   201d6:	e6e7      	b.n	1ffa8 <am_hal_iom_configure+0xbc>
   201d8:	f44f 7540 	mov.w	r5, #768	@ 0x300
   201dc:	e6e4      	b.n	1ffa8 <am_hal_iom_configure+0xbc>
   201de:	f44f 65a0 	mov.w	r5, #1280	@ 0x500
   201e2:	e6e1      	b.n	1ffa8 <am_hal_iom_configure+0xbc>
   201e4:	f44f 65c0 	mov.w	r5, #1536	@ 0x600
   201e8:	e6de      	b.n	1ffa8 <am_hal_iom_configure+0xbc>
   201ea:	bf00      	nop
   201ec:	01123456 	.word	0x01123456
   201f0:	00061a80 	.word	0x00061a80
   201f4:	000f4240 	.word	0x000f4240
   201f8:	000186a0 	.word	0x000186a0
   201fc:	00b71b00 	.word	0x00b71b00
   20200:	005b8d80 	.word	0x005b8d80
   20204:	002dc6c0 	.word	0x002dc6c0
   20208:	0016e360 	.word	0x0016e360
   2020c:	000b71b0 	.word	0x000b71b0
   20210:	0005b8d8 	.word	0x0005b8d8
   20214:	00213040 	.word	0x00213040
   20218:	02dc6c00 	.word	0x02dc6c00
   2021c:	0003d08f 	.word	0x0003d08f
   20220:	0003d090 	.word	0x0003d090
   20224:	aaaaaaab 	.word	0xaaaaaaab
   20228:	0003f070 	.word	0x0003f070
   2022c:	773b1201 	.word	0x773b1201
   20230:	06031301 	.word	0x06031301
   20234:	0003f270 	.word	0x0003f270
   20238:	1d0e1201 	.word	0x1d0e1201
   2023c:	007a1200 	.word	0x007a1200
   20240:	431bde83 	.word	0x431bde83

00020244 <am_hal_iom_blocking_transfer>:
   20244:	2800      	cmp	r0, #0
   20246:	f000 8130 	beq.w	204aa <am_hal_iom_blocking_transfer+0x266>
   2024a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2024e:	6803      	ldr	r3, [r0, #0]
   20250:	4ac5      	ldr	r2, [pc, #788]	@ (20568 <am_hal_iom_blocking_transfer+0x324>)
   20252:	ed2d 8b02 	vpush	{d8}
   20256:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   2025a:	4293      	cmp	r3, r2
   2025c:	b085      	sub	sp, #20
   2025e:	4606      	mov	r6, r0
   20260:	f040 8101 	bne.w	20466 <am_hal_iom_blocking_transfer+0x222>
   20264:	460c      	mov	r4, r1
   20266:	2900      	cmp	r1, #0
   20268:	f000 8108 	beq.w	2047c <am_hal_iom_blocking_transfer+0x238>
   2026c:	f891 8010 	ldrb.w	r8, [r1, #16]
   20270:	f1b8 0f01 	cmp.w	r8, #1
   20274:	f200 810d 	bhi.w	20492 <am_hal_iom_blocking_transfer+0x24e>
   20278:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   2027c:	f1bb 0f00 	cmp.w	fp, #0
   20280:	f000 8103 	beq.w	2048a <am_hal_iom_blocking_transfer+0x246>
   20284:	f8d4 9004 	ldr.w	r9, [r4, #4]
   20288:	f1b9 0f03 	cmp.w	r9, #3
   2028c:	f200 80f6 	bhi.w	2047c <am_hal_iom_blocking_transfer+0x238>
   20290:	f8d4 a008 	ldr.w	sl, [r4, #8]
   20294:	ea4f 02c9 	mov.w	r2, r9, lsl #3
   20298:	f04f 33ff 	mov.w	r3, #4294967295
   2029c:	4093      	lsls	r3, r2
   2029e:	ea13 0f0a 	tst.w	r3, sl
   202a2:	f040 80eb 	bne.w	2047c <am_hal_iom_blocking_transfer+0x238>
   202a6:	f1bb 0f00 	cmp.w	fp, #0
   202aa:	f000 80f9 	beq.w	204a0 <am_hal_iom_blocking_transfer+0x25c>
   202ae:	f1b8 0f00 	cmp.w	r8, #0
   202b2:	f000 80df 	beq.w	20474 <am_hal_iom_blocking_transfer+0x230>
   202b6:	69a3      	ldr	r3, [r4, #24]
   202b8:	2b00      	cmp	r3, #0
   202ba:	f000 80df 	beq.w	2047c <am_hal_iom_blocking_transfer+0x238>
   202be:	7a33      	ldrb	r3, [r6, #8]
   202c0:	2b01      	cmp	r3, #1
   202c2:	d004      	beq.n	202ce <am_hal_iom_blocking_transfer+0x8a>
   202c4:	b93b      	cbnz	r3, 202d6 <am_hal_iom_blocking_transfer+0x92>
   202c6:	6823      	ldr	r3, [r4, #0]
   202c8:	2b03      	cmp	r3, #3
   202ca:	f200 80d7 	bhi.w	2047c <am_hal_iom_blocking_transfer+0x238>
   202ce:	f5bb 5f80 	cmp.w	fp, #4096	@ 0x1000
   202d2:	f080 80d3 	bcs.w	2047c <am_hal_iom_blocking_transfer+0x238>
   202d6:	f896 382c 	ldrb.w	r3, [r6, #2092]	@ 0x82c
   202da:	2b02      	cmp	r3, #2
   202dc:	f000 80d9 	beq.w	20492 <am_hal_iom_blocking_transfer+0x24e>
   202e0:	7f23      	ldrb	r3, [r4, #28]
   202e2:	9302      	str	r3, [sp, #8]
   202e4:	e9d4 c705 	ldrd	ip, r7, [r4, #20]
   202e8:	2301      	movs	r3, #1
   202ea:	f8d6 0860 	ldr.w	r0, [r6, #2144]	@ 0x860
   202ee:	6875      	ldr	r5, [r6, #4]
   202f0:	9300      	str	r3, [sp, #0]
   202f2:	f04f 32ff 	mov.w	r2, #4294967295
   202f6:	2300      	movs	r3, #0
   202f8:	f106 0124 	add.w	r1, r6, #36	@ 0x24
   202fc:	4598      	cmp	r8, r3
   202fe:	bf08      	it	eq
   20300:	4667      	moveq	r7, ip
   20302:	f7ff f949 	bl	1f598 <am_hal_flash_delay_status_check>
   20306:	4603      	mov	r3, r0
   20308:	2800      	cmp	r0, #0
   2030a:	f040 80ad 	bne.w	20468 <am_hal_iom_blocking_transfer+0x224>
   2030e:	f505 25a0 	add.w	r5, r5, #327680	@ 0x50000
   20312:	2301      	movs	r3, #1
   20314:	3504      	adds	r5, #4
   20316:	9300      	str	r3, [sp, #0]
   20318:	032d      	lsls	r5, r5, #12
   2031a:	f505 712d 	add.w	r1, r5, #692	@ 0x2b4
   2031e:	2304      	movs	r3, #4
   20320:	f8d6 0860 	ldr.w	r0, [r6, #2144]	@ 0x860
   20324:	2206      	movs	r2, #6
   20326:	ee08 1a10 	vmov	s16, r1
   2032a:	f7ff f935 	bl	1f598 <am_hal_flash_delay_status_check>
   2032e:	4603      	mov	r3, r0
   20330:	2800      	cmp	r0, #0
   20332:	f040 8099 	bne.w	20468 <am_hal_iom_blocking_transfer+0x224>
   20336:	f8d5 2200 	ldr.w	r2, [r5, #512]	@ 0x200
   2033a:	9203      	str	r2, [sp, #12]
   2033c:	f8c5 0200 	str.w	r0, [r5, #512]	@ 0x200
   20340:	f8b5 2280 	ldrh.w	r2, [r5, #640]	@ 0x280
   20344:	f360 0200 	bfi	r2, r0, #0, #1
   20348:	f8a5 2280 	strh.w	r2, [r5, #640]	@ 0x280
   2034c:	6822      	ldr	r2, [r4, #0]
   2034e:	f04f 31ff 	mov.w	r1, #4294967295
   20352:	f8c5 1208 	str.w	r1, [r5, #520]	@ 0x208
   20356:	f8c5 2404 	str.w	r2, [r5, #1028]	@ 0x404
   2035a:	7a31      	ldrb	r1, [r6, #8]
   2035c:	2900      	cmp	r1, #0
   2035e:	f000 80a7 	beq.w	204b0 <am_hal_iom_blocking_transfer+0x26c>
   20362:	f8c5 021c 	str.w	r0, [r5, #540]	@ 0x21c
   20366:	4a81      	ldr	r2, [pc, #516]	@ (2056c <am_hal_iom_blocking_transfer+0x328>)
   20368:	f1b8 0f01 	cmp.w	r8, #1
   2036c:	ea02 2b0b 	and.w	fp, r2, fp, lsl #8
   20370:	ea4b 0303 	orr.w	r3, fp, r3
   20374:	f000 80da 	beq.w	2052c <am_hal_iom_blocking_transfer+0x2e8>
   20378:	f3ca 220f 	ubfx	r2, sl, #8, #16
   2037c:	f8c5 2220 	str.w	r2, [r5, #544]	@ 0x220
   20380:	f8d5 2100 	ldr.w	r2, [r5, #256]	@ 0x100
   20384:	68e4      	ldr	r4, [r4, #12]
   20386:	f3c2 2207 	ubfx	r2, r2, #8, #8
   2038a:	2a03      	cmp	r2, #3
   2038c:	46bb      	mov	fp, r7
   2038e:	d917      	bls.n	203c0 <am_hal_iom_blocking_transfer+0x17c>
   20390:	b1b4      	cbz	r4, 203c0 <am_hal_iom_blocking_transfer+0x17c>
   20392:	f85b 1b04 	ldr.w	r1, [fp], #4
   20396:	f8c5 110c 	str.w	r1, [r5, #268]	@ 0x10c
   2039a:	2c03      	cmp	r4, #3
   2039c:	d90f      	bls.n	203be <am_hal_iom_blocking_transfer+0x17a>
   2039e:	3a04      	subs	r2, #4
   203a0:	f022 0203 	bic.w	r2, r2, #3
   203a4:	3204      	adds	r2, #4
   203a6:	4417      	add	r7, r2
   203a8:	45bb      	cmp	fp, r7
   203aa:	f1a4 0404 	sub.w	r4, r4, #4
   203ae:	d007      	beq.n	203c0 <am_hal_iom_blocking_transfer+0x17c>
   203b0:	b134      	cbz	r4, 203c0 <am_hal_iom_blocking_transfer+0x17c>
   203b2:	f85b 2b04 	ldr.w	r2, [fp], #4
   203b6:	f8c5 210c 	str.w	r2, [r5, #268]	@ 0x10c
   203ba:	2c03      	cmp	r4, #3
   203bc:	d8f4      	bhi.n	203a8 <am_hal_iom_blocking_transfer+0x164>
   203be:	4644      	mov	r4, r8
   203c0:	ea4f 1249 	mov.w	r2, r9, lsl #5
   203c4:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
   203c8:	4313      	orrs	r3, r2
   203ca:	9a02      	ldr	r2, [sp, #8]
   203cc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   203d0:	f043 0301 	orr.w	r3, r3, #1
   203d4:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
   203d8:	2c00      	cmp	r4, #0
   203da:	f000 808f 	beq.w	204fc <am_hal_iom_blocking_transfer+0x2b8>
   203de:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   203e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   203e6:	2b03      	cmp	r3, #3
   203e8:	f200 808a 	bhi.w	20500 <am_hal_iom_blocking_transfer+0x2bc>
   203ec:	4f60      	ldr	r7, [pc, #384]	@ (20570 <am_hal_iom_blocking_transfer+0x32c>)
   203ee:	e009      	b.n	20404 <am_hal_iom_blocking_transfer+0x1c0>
   203f0:	3f01      	subs	r7, #1
   203f2:	d00d      	beq.n	20410 <am_hal_iom_blocking_transfer+0x1cc>
   203f4:	f7ff f8c0 	bl	1f578 <am_hal_flash_delay>
   203f8:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   203fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20400:	2b03      	cmp	r3, #3
   20402:	d87d      	bhi.n	20500 <am_hal_iom_blocking_transfer+0x2bc>
   20404:	f8d5 3204 	ldr.w	r3, [r5, #516]	@ 0x204
   20408:	07db      	lsls	r3, r3, #31
   2040a:	f04f 0010 	mov.w	r0, #16
   2040e:	d5ef      	bpl.n	203f0 <am_hal_iom_blocking_transfer+0x1ac>
   20410:	2701      	movs	r7, #1
   20412:	2304      	movs	r3, #4
   20414:	ee18 1a10 	vmov	r1, s16
   20418:	4856      	ldr	r0, [pc, #344]	@ (20574 <am_hal_iom_blocking_transfer+0x330>)
   2041a:	9700      	str	r7, [sp, #0]
   2041c:	2206      	movs	r2, #6
   2041e:	f7ff f8bb 	bl	1f598 <am_hal_flash_delay_status_check>
   20422:	4603      	mov	r3, r0
   20424:	b980      	cbnz	r0, 20448 <am_hal_iom_blocking_transfer+0x204>
   20426:	f8d5 3204 	ldr.w	r3, [r5, #516]	@ 0x204
   2042a:	f013 0f6c 	tst.w	r3, #108	@ 0x6c
   2042e:	f040 80bb 	bne.w	205a8 <am_hal_iom_blocking_transfer+0x364>
   20432:	0599      	lsls	r1, r3, #22
   20434:	f100 80bb 	bmi.w	205ae <am_hal_iom_blocking_transfer+0x36a>
   20438:	06da      	lsls	r2, r3, #27
   2043a:	f100 80ba 	bmi.w	205b2 <am_hal_iom_blocking_transfer+0x36e>
   2043e:	f403 4390 	and.w	r3, r3, #18432	@ 0x4800
   20442:	4323      	orrs	r3, r4
   20444:	d007      	beq.n	20456 <am_hal_iom_blocking_transfer+0x212>
   20446:	463b      	mov	r3, r7
   20448:	f8d5 1204 	ldr.w	r1, [r5, #516]	@ 0x204
   2044c:	9302      	str	r3, [sp, #8]
   2044e:	4630      	mov	r0, r6
   20450:	f7ff faee 	bl	1fa30 <internal_iom_reset_on_error>
   20454:	9b02      	ldr	r3, [sp, #8]
   20456:	f04f 32ff 	mov.w	r2, #4294967295
   2045a:	f8c5 2208 	str.w	r2, [r5, #520]	@ 0x208
   2045e:	9a03      	ldr	r2, [sp, #12]
   20460:	f8c5 2200 	str.w	r2, [r5, #512]	@ 0x200
   20464:	e000      	b.n	20468 <am_hal_iom_blocking_transfer+0x224>
   20466:	2302      	movs	r3, #2
   20468:	4618      	mov	r0, r3
   2046a:	b005      	add	sp, #20
   2046c:	ecbd 8b02 	vpop	{d8}
   20470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20474:	6963      	ldr	r3, [r4, #20]
   20476:	2b00      	cmp	r3, #0
   20478:	f47f af21 	bne.w	202be <am_hal_iom_blocking_transfer+0x7a>
   2047c:	2306      	movs	r3, #6
   2047e:	4618      	mov	r0, r3
   20480:	b005      	add	sp, #20
   20482:	ecbd 8b02 	vpop	{d8}
   20486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2048a:	f881 b010 	strb.w	fp, [r1, #16]
   2048e:	46d8      	mov	r8, fp
   20490:	e6f8      	b.n	20284 <am_hal_iom_blocking_transfer+0x40>
   20492:	2307      	movs	r3, #7
   20494:	4618      	mov	r0, r3
   20496:	b005      	add	sp, #20
   20498:	ecbd 8b02 	vpop	{d8}
   2049c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204a0:	7a33      	ldrb	r3, [r6, #8]
   204a2:	2b01      	cmp	r3, #1
   204a4:	f47f af0e 	bne.w	202c4 <am_hal_iom_blocking_transfer+0x80>
   204a8:	e715      	b.n	202d6 <am_hal_iom_blocking_transfer+0x92>
   204aa:	2302      	movs	r3, #2
   204ac:	4618      	mov	r0, r3
   204ae:	4770      	bx	lr
   204b0:	18b1      	adds	r1, r6, r2
   204b2:	0513      	lsls	r3, r2, #20
   204b4:	f891 28a0 	ldrb.w	r2, [r1, #2208]	@ 0x8a0
   204b8:	f8c5 221c 	str.w	r2, [r5, #540]	@ 0x21c
   204bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
   204c0:	e751      	b.n	20366 <am_hal_iom_blocking_transfer+0x122>
   204c2:	2b03      	cmp	r3, #3
   204c4:	f108 0804 	add.w	r8, r8, #4
   204c8:	6001      	str	r1, [r0, #0]
   204ca:	f1a4 0404 	sub.w	r4, r4, #4
   204ce:	d968      	bls.n	205a2 <am_hal_iom_blocking_transfer+0x35e>
   204d0:	b1a4      	cbz	r4, 204fc <am_hal_iom_blocking_transfer+0x2b8>
   204d2:	2c03      	cmp	r4, #3
   204d4:	f8d5 1108 	ldr.w	r1, [r5, #264]	@ 0x108
   204d8:	4640      	mov	r0, r8
   204da:	f1a3 0304 	sub.w	r3, r3, #4
   204de:	d8f0      	bhi.n	204c2 <am_hal_iom_blocking_transfer+0x27e>
   204e0:	3c01      	subs	r4, #1
   204e2:	f888 1000 	strb.w	r1, [r8]
   204e6:	ea4f 2311 	mov.w	r3, r1, lsr #8
   204ea:	d007      	beq.n	204fc <am_hal_iom_blocking_transfer+0x2b8>
   204ec:	2c01      	cmp	r4, #1
   204ee:	f888 3001 	strb.w	r3, [r8, #1]
   204f2:	ea4f 4111 	mov.w	r1, r1, lsr #16
   204f6:	d001      	beq.n	204fc <am_hal_iom_blocking_transfer+0x2b8>
   204f8:	f888 1002 	strb.w	r1, [r8, #2]
   204fc:	2400      	movs	r4, #0
   204fe:	e787      	b.n	20410 <am_hal_iom_blocking_transfer+0x1cc>
   20500:	f004 0003 	and.w	r0, r4, #3
   20504:	465a      	mov	r2, fp
   20506:	f852 1b04 	ldr.w	r1, [r2], #4
   2050a:	f8c5 110c 	str.w	r1, [r5, #268]	@ 0x10c
   2050e:	42a0      	cmp	r0, r4
   20510:	ebab 0102 	sub.w	r1, fp, r2
   20514:	4419      	add	r1, r3
   20516:	f1a4 0404 	sub.w	r4, r4, #4
   2051a:	d004      	beq.n	20526 <am_hal_iom_blocking_transfer+0x2e2>
   2051c:	2903      	cmp	r1, #3
   2051e:	d903      	bls.n	20528 <am_hal_iom_blocking_transfer+0x2e4>
   20520:	2c00      	cmp	r4, #0
   20522:	d1f0      	bne.n	20506 <am_hal_iom_blocking_transfer+0x2c2>
   20524:	e7ea      	b.n	204fc <am_hal_iom_blocking_transfer+0x2b8>
   20526:	4644      	mov	r4, r8
   20528:	4693      	mov	fp, r2
   2052a:	e755      	b.n	203d8 <am_hal_iom_blocking_transfer+0x194>
   2052c:	ea4f 1249 	mov.w	r2, r9, lsl #5
   20530:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
   20534:	4313      	orrs	r3, r2
   20536:	9a02      	ldr	r2, [sp, #8]
   20538:	68e4      	ldr	r4, [r4, #12]
   2053a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   2053e:	f043 0302 	orr.w	r3, r3, #2
   20542:	f3ca 220f 	ubfx	r2, sl, #8, #16
   20546:	f8c5 2220 	str.w	r2, [r5, #544]	@ 0x220
   2054a:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
   2054e:	2c00      	cmp	r4, #0
   20550:	d0d4      	beq.n	204fc <am_hal_iom_blocking_transfer+0x2b8>
   20552:	2200      	movs	r2, #0
   20554:	46b8      	mov	r8, r7
   20556:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   2055a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   2055e:	2b03      	cmp	r3, #3
   20560:	d8b7      	bhi.n	204d2 <am_hal_iom_blocking_transfer+0x28e>
   20562:	4f04      	ldr	r7, [pc, #16]	@ (20574 <am_hal_iom_blocking_transfer+0x330>)
   20564:	e00b      	b.n	2057e <am_hal_iom_blocking_transfer+0x33a>
   20566:	bf00      	nop
   20568:	01123456 	.word	0x01123456
   2056c:	000fff00 	.word	0x000fff00
   20570:	0007a121 	.word	0x0007a121
   20574:	0007a120 	.word	0x0007a120
   20578:	3f01      	subs	r7, #1
   2057a:	f43f af49 	beq.w	20410 <am_hal_iom_blocking_transfer+0x1cc>
   2057e:	2010      	movs	r0, #16
   20580:	b112      	cbz	r2, 20588 <am_hal_iom_blocking_transfer+0x344>
   20582:	429c      	cmp	r4, r3
   20584:	f63f af44 	bhi.w	20410 <am_hal_iom_blocking_transfer+0x1cc>
   20588:	f7fe fff6 	bl	1f578 <am_hal_flash_delay>
   2058c:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
   20590:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   20594:	f3c3 4307 	ubfx	r3, r3, #16, #8
   20598:	2b03      	cmp	r3, #3
   2059a:	f002 0201 	and.w	r2, r2, #1
   2059e:	d9eb      	bls.n	20578 <am_hal_iom_blocking_transfer+0x334>
   205a0:	e797      	b.n	204d2 <am_hal_iom_blocking_transfer+0x28e>
   205a2:	2c00      	cmp	r4, #0
   205a4:	d1d7      	bne.n	20556 <am_hal_iom_blocking_transfer+0x312>
   205a6:	e7a9      	b.n	204fc <am_hal_iom_blocking_transfer+0x2b8>
   205a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
   205ac:	e74c      	b.n	20448 <am_hal_iom_blocking_transfer+0x204>
   205ae:	4b02      	ldr	r3, [pc, #8]	@ (205b8 <am_hal_iom_blocking_transfer+0x374>)
   205b0:	e74a      	b.n	20448 <am_hal_iom_blocking_transfer+0x204>
   205b2:	4b02      	ldr	r3, [pc, #8]	@ (205bc <am_hal_iom_blocking_transfer+0x378>)
   205b4:	e748      	b.n	20448 <am_hal_iom_blocking_transfer+0x204>
   205b6:	bf00      	nop
   205b8:	08000001 	.word	0x08000001
   205bc:	08000002 	.word	0x08000002

000205c0 <am_hal_itm_disable>:
   205c0:	4b24      	ldr	r3, [pc, #144]	@ (20654 <am_hal_itm_disable+0x94>)
   205c2:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
   205c6:	b510      	push	{r4, lr}
   205c8:	b9b3      	cbnz	r3, 205f8 <am_hal_itm_disable+0x38>
   205ca:	4b23      	ldr	r3, [pc, #140]	@ (20658 <am_hal_itm_disable+0x98>)
   205cc:	68da      	ldr	r2, [r3, #12]
   205ce:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
   205d2:	60da      	str	r2, [r3, #12]
   205d4:	68da      	ldr	r2, [r3, #12]
   205d6:	01d2      	lsls	r2, r2, #7
   205d8:	d5fc      	bpl.n	205d4 <am_hal_itm_disable+0x14>
   205da:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
   205de:	491f      	ldr	r1, [pc, #124]	@ (2065c <am_hal_itm_disable+0x9c>)
   205e0:	f8c3 1fb0 	str.w	r1, [r3, #4016]	@ 0xfb0
   205e4:	4a1e      	ldr	r2, [pc, #120]	@ (20660 <am_hal_itm_disable+0xa0>)
   205e6:	200f      	movs	r0, #15
   205e8:	f04f 31ff 	mov.w	r1, #4294967295
   205ec:	f8c3 0e40 	str.w	r0, [r3, #3648]	@ 0xe40
   205f0:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
   205f4:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
   205f8:	f04f 4460 	mov.w	r4, #3758096384	@ 0xe0000000
   205fc:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	@ 0xe80
   20600:	021b      	lsls	r3, r3, #8
   20602:	d4fb      	bmi.n	205fc <am_hal_itm_disable+0x3c>
   20604:	f44f 7048 	mov.w	r0, #800	@ 0x320
   20608:	f7fe ffb6 	bl	1f578 <am_hal_flash_delay>
   2060c:	4b13      	ldr	r3, [pc, #76]	@ (2065c <am_hal_itm_disable+0x9c>)
   2060e:	4915      	ldr	r1, [pc, #84]	@ (20664 <am_hal_itm_disable+0xa4>)
   20610:	f8c4 3fb0 	str.w	r3, [r4, #4016]	@ 0xfb0
   20614:	2064      	movs	r0, #100	@ 0x64
   20616:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
   2061a:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	@ 0xe80
   2061e:	f023 0301 	bic.w	r3, r3, #1
   20622:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
   20626:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	@ 0xe80
   2062a:	420b      	tst	r3, r1
   2062c:	d1fb      	bne.n	20626 <am_hal_itm_disable+0x66>
   2062e:	3801      	subs	r0, #1
   20630:	d1f3      	bne.n	2061a <am_hal_itm_disable+0x5a>
   20632:	4a09      	ldr	r2, [pc, #36]	@ (20658 <am_hal_itm_disable+0x98>)
   20634:	68d3      	ldr	r3, [r2, #12]
   20636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
   2063a:	60d3      	str	r3, [r2, #12]
   2063c:	68d3      	ldr	r3, [r2, #12]
   2063e:	f013 7380 	ands.w	r3, r3, #16777216	@ 0x1000000
   20642:	d1fb      	bne.n	2063c <am_hal_itm_disable+0x7c>
   20644:	4a03      	ldr	r2, [pc, #12]	@ (20654 <am_hal_itm_disable+0x94>)
   20646:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
   2064a:	f8d2 3250 	ldr.w	r3, [r2, #592]	@ 0x250
   2064e:	2b00      	cmp	r3, #0
   20650:	d1fb      	bne.n	2064a <am_hal_itm_disable+0x8a>
   20652:	bd10      	pop	{r4, pc}
   20654:	40020000 	.word	0x40020000
   20658:	e000edf0 	.word	0xe000edf0
   2065c:	c5acce55 	.word	0xc5acce55
   20660:	00150511 	.word	0x00150511
   20664:	00800001 	.word	0x00800001

00020668 <am_hal_mcuctrl_info_get>:
   20668:	2900      	cmp	r1, #0
   2066a:	f000 808d 	beq.w	20788 <am_hal_mcuctrl_info_get+0x120>
   2066e:	2801      	cmp	r0, #1
   20670:	b4f0      	push	{r4, r5, r6, r7}
   20672:	d006      	beq.n	20682 <am_hal_mcuctrl_info_get+0x1a>
   20674:	2802      	cmp	r0, #2
   20676:	d06b      	beq.n	20750 <am_hal_mcuctrl_info_get+0xe8>
   20678:	2800      	cmp	r0, #0
   2067a:	d053      	beq.n	20724 <am_hal_mcuctrl_info_get+0xbc>
   2067c:	2006      	movs	r0, #6
   2067e:	bcf0      	pop	{r4, r5, r6, r7}
   20680:	4770      	bx	lr
   20682:	4a42      	ldr	r2, [pc, #264]	@ (2078c <am_hal_mcuctrl_info_get+0x124>)
   20684:	4c42      	ldr	r4, [pc, #264]	@ (20790 <am_hal_mcuctrl_info_get+0x128>)
   20686:	6813      	ldr	r3, [r2, #0]
   20688:	600b      	str	r3, [r1, #0]
   2068a:	6850      	ldr	r0, [r2, #4]
   2068c:	6048      	str	r0, [r1, #4]
   2068e:	6890      	ldr	r0, [r2, #8]
   20690:	6088      	str	r0, [r1, #8]
   20692:	68d0      	ldr	r0, [r2, #12]
   20694:	60c8      	str	r0, [r1, #12]
   20696:	f3c3 5703 	ubfx	r7, r3, #20, #4
   2069a:	6915      	ldr	r5, [r2, #16]
   2069c:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   206a0:	610d      	str	r5, [r1, #16]
   206a2:	f3c3 4603 	ubfx	r6, r3, #16, #4
   206a6:	483b      	ldr	r0, [pc, #236]	@ (20794 <am_hal_mcuctrl_info_get+0x12c>)
   206a8:	6955      	ldr	r5, [r2, #20]
   206aa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   206ae:	4a3a      	ldr	r2, [pc, #232]	@ (20798 <am_hal_mcuctrl_info_get+0x130>)
   206b0:	614d      	str	r5, [r1, #20]
   206b2:	f003 0301 	and.w	r3, r3, #1
   206b6:	e9c1 3406 	strd	r3, r4, [r1, #24]
   206ba:	6208      	str	r0, [r1, #32]
   206bc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
   206c0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	@ 0xe4
   206c4:	b2db      	uxtb	r3, r3
   206c6:	f000 000f 	and.w	r0, r0, #15
   206ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   206ce:	624b      	str	r3, [r1, #36]	@ 0x24
   206d0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
   206d4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	@ 0xe8
   206d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   206dc:	f000 000f 	and.w	r0, r0, #15
   206e0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   206e4:	628b      	str	r3, [r1, #40]	@ 0x28
   206e6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
   206ea:	f8d2 00ec 	ldr.w	r0, [r2, #236]	@ 0xec
   206ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
   206f2:	f3c0 1003 	ubfx	r0, r0, #4, #4
   206f6:	4303      	orrs	r3, r0
   206f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
   206fa:	f8d2 40fc 	ldr.w	r4, [r2, #252]	@ 0xfc
   206fe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
   20702:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
   20706:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
   2070a:	b2db      	uxtb	r3, r3
   2070c:	041b      	lsls	r3, r3, #16
   2070e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   20712:	b2d2      	uxtb	r2, r2
   20714:	4313      	orrs	r3, r2
   20716:	b2c2      	uxtb	r2, r0
   20718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2071c:	630b      	str	r3, [r1, #48]	@ 0x30
   2071e:	2000      	movs	r0, #0
   20720:	bcf0      	pop	{r4, r5, r6, r7}
   20722:	4770      	bx	lr
   20724:	4a19      	ldr	r2, [pc, #100]	@ (2078c <am_hal_mcuctrl_info_get+0x124>)
   20726:	6993      	ldr	r3, [r2, #24]
   20728:	f8d2 41a0 	ldr.w	r4, [r2, #416]	@ 0x1a0
   2072c:	f3c4 6481 	ubfx	r4, r4, #26, #2
   20730:	710c      	strb	r4, [r1, #4]
   20732:	6952      	ldr	r2, [r2, #20]
   20734:	f3c3 1480 	ubfx	r4, r3, #6, #1
   20738:	f3c2 0540 	ubfx	r5, r2, #1, #1
   2073c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20740:	f002 0201 	and.w	r2, r2, #1
   20744:	708d      	strb	r5, [r1, #2]
   20746:	700c      	strb	r4, [r1, #0]
   20748:	70ca      	strb	r2, [r1, #3]
   2074a:	bcf0      	pop	{r4, r5, r6, r7}
   2074c:	704b      	strb	r3, [r1, #1]
   2074e:	4770      	bx	lr
   20750:	4a0e      	ldr	r2, [pc, #56]	@ (2078c <am_hal_mcuctrl_info_get+0x124>)
   20752:	684c      	ldr	r4, [r1, #4]
   20754:	f8d2 31cc 	ldr.w	r3, [r2, #460]	@ 0x1cc
   20758:	f8d2 01c4 	ldr.w	r0, [r2, #452]	@ 0x1c4
   2075c:	60c8      	str	r0, [r1, #12]
   2075e:	f8d2 51c0 	ldr.w	r5, [r2, #448]	@ 0x1c0
   20762:	6948      	ldr	r0, [r1, #20]
   20764:	432c      	orrs	r4, r5
   20766:	604c      	str	r4, [r1, #4]
   20768:	f8d2 21c8 	ldr.w	r2, [r2, #456]	@ 0x1c8
   2076c:	f003 0401 	and.w	r4, r3, #1
   20770:	4310      	orrs	r0, r2
   20772:	f3c3 0240 	ubfx	r2, r3, #1, #1
   20776:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2077a:	6148      	str	r0, [r1, #20]
   2077c:	700c      	strb	r4, [r1, #0]
   2077e:	2000      	movs	r0, #0
   20780:	bcf0      	pop	{r4, r5, r6, r7}
   20782:	720a      	strb	r2, [r1, #8]
   20784:	740b      	strb	r3, [r1, #16]
   20786:	4770      	bx	lr
   20788:	2006      	movs	r0, #6
   2078a:	4770      	bx	lr
   2078c:	40020000 	.word	0x40020000
   20790:	00031128 	.word	0x00031128
   20794:	00031168 	.word	0x00031168
   20798:	f0000f00 	.word	0xf0000f00

0002079c <am_hal_pwrctrl_periph_enable>:
   2079c:	b570      	push	{r4, r5, r6, lr}
   2079e:	b082      	sub	sp, #8
   207a0:	4604      	mov	r4, r0
   207a2:	f7ff f93d 	bl	1fa20 <am_hal_interrupt_master_disable>
   207a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   207aa:	4e0f      	ldr	r6, [pc, #60]	@ (207e8 <am_hal_pwrctrl_periph_enable+0x4c>)
   207ac:	4d0f      	ldr	r5, [pc, #60]	@ (207ec <am_hal_pwrctrl_periph_enable+0x50>)
   207ae:	9001      	str	r0, [sp, #4]
   207b0:	00a4      	lsls	r4, r4, #2
   207b2:	68b3      	ldr	r3, [r6, #8]
   207b4:	592a      	ldr	r2, [r5, r4]
   207b6:	4313      	orrs	r3, r2
   207b8:	60b3      	str	r3, [r6, #8]
   207ba:	9801      	ldr	r0, [sp, #4]
   207bc:	442c      	add	r4, r5
   207be:	f7ff f933 	bl	1fa28 <am_hal_interrupt_master_set>
   207c2:	20a0      	movs	r0, #160	@ 0xa0
   207c4:	f7fe fed8 	bl	1f578 <am_hal_flash_delay>
   207c8:	69b3      	ldr	r3, [r6, #24]
   207ca:	6864      	ldr	r4, [r4, #4]
   207cc:	4223      	tst	r3, r4
   207ce:	d103      	bne.n	207d8 <am_hal_pwrctrl_periph_enable+0x3c>
   207d0:	20a0      	movs	r0, #160	@ 0xa0
   207d2:	f7fe fed1 	bl	1f578 <am_hal_flash_delay>
   207d6:	69b3      	ldr	r3, [r6, #24]
   207d8:	4b03      	ldr	r3, [pc, #12]	@ (207e8 <am_hal_pwrctrl_periph_enable+0x4c>)
   207da:	699b      	ldr	r3, [r3, #24]
   207dc:	4223      	tst	r3, r4
   207de:	bf0c      	ite	eq
   207e0:	2001      	moveq	r0, #1
   207e2:	2000      	movne	r0, #0
   207e4:	b002      	add	sp, #8
   207e6:	bd70      	pop	{r4, r5, r6, pc}
   207e8:	40021000 	.word	0x40021000
   207ec:	000311a8 	.word	0x000311a8

000207f0 <am_hal_pwrctrl_periph_disable>:
   207f0:	b570      	push	{r4, r5, r6, lr}
   207f2:	b082      	sub	sp, #8
   207f4:	4604      	mov	r4, r0
   207f6:	f7ff f913 	bl	1fa20 <am_hal_interrupt_master_disable>
   207fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   207fe:	4e10      	ldr	r6, [pc, #64]	@ (20840 <am_hal_pwrctrl_periph_disable+0x50>)
   20800:	4d10      	ldr	r5, [pc, #64]	@ (20844 <am_hal_pwrctrl_periph_disable+0x54>)
   20802:	9001      	str	r0, [sp, #4]
   20804:	00a4      	lsls	r4, r4, #2
   20806:	68b3      	ldr	r3, [r6, #8]
   20808:	592a      	ldr	r2, [r5, r4]
   2080a:	ea23 0302 	bic.w	r3, r3, r2
   2080e:	60b3      	str	r3, [r6, #8]
   20810:	9801      	ldr	r0, [sp, #4]
   20812:	442c      	add	r4, r5
   20814:	f7ff f908 	bl	1fa28 <am_hal_interrupt_master_set>
   20818:	20a0      	movs	r0, #160	@ 0xa0
   2081a:	f7fe fead 	bl	1f578 <am_hal_flash_delay>
   2081e:	69b3      	ldr	r3, [r6, #24]
   20820:	6864      	ldr	r4, [r4, #4]
   20822:	4223      	tst	r3, r4
   20824:	d003      	beq.n	2082e <am_hal_pwrctrl_periph_disable+0x3e>
   20826:	20a0      	movs	r0, #160	@ 0xa0
   20828:	f7fe fea6 	bl	1f578 <am_hal_flash_delay>
   2082c:	69b3      	ldr	r3, [r6, #24]
   2082e:	4b04      	ldr	r3, [pc, #16]	@ (20840 <am_hal_pwrctrl_periph_disable+0x50>)
   20830:	699b      	ldr	r3, [r3, #24]
   20832:	4223      	tst	r3, r4
   20834:	bf14      	ite	ne
   20836:	2001      	movne	r0, #1
   20838:	2000      	moveq	r0, #0
   2083a:	b002      	add	sp, #8
   2083c:	bd70      	pop	{r4, r5, r6, pc}
   2083e:	bf00      	nop
   20840:	40021000 	.word	0x40021000
   20844:	000311a8 	.word	0x000311a8

00020848 <am_hal_pwrctrl_low_power_init>:
   20848:	b530      	push	{r4, r5, lr}
   2084a:	4b55      	ldr	r3, [pc, #340]	@ (209a0 <am_hal_pwrctrl_low_power_init+0x158>)
   2084c:	681a      	ldr	r2, [r3, #0]
   2084e:	b085      	sub	sp, #20
   20850:	b912      	cbnz	r2, 20858 <am_hal_pwrctrl_low_power_init+0x10>
   20852:	4a54      	ldr	r2, [pc, #336]	@ (209a4 <am_hal_pwrctrl_low_power_init+0x15c>)
   20854:	6812      	ldr	r2, [r2, #0]
   20856:	601a      	str	r2, [r3, #0]
   20858:	4b53      	ldr	r3, [pc, #332]	@ (209a8 <am_hal_pwrctrl_low_power_init+0x160>)
   2085a:	68db      	ldr	r3, [r3, #12]
   2085c:	b2db      	uxtb	r3, r3
   2085e:	2b12      	cmp	r3, #18
   20860:	d050      	beq.n	20904 <am_hal_pwrctrl_low_power_init+0xbc>
   20862:	4b51      	ldr	r3, [pc, #324]	@ (209a8 <am_hal_pwrctrl_low_power_init+0x160>)
   20864:	68da      	ldr	r2, [r3, #12]
   20866:	b2d2      	uxtb	r2, r2
   20868:	2a20      	cmp	r2, #32
   2086a:	d934      	bls.n	208d6 <am_hal_pwrctrl_low_power_init+0x8e>
   2086c:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
   20870:	2002      	movs	r0, #2
   20872:	f360 4213 	bfi	r2, r0, #16, #4
   20876:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
   2087a:	f8d3 1354 	ldr.w	r1, [r3, #852]	@ 0x354
   2087e:	2203      	movs	r2, #3
   20880:	f362 5117 	bfi	r1, r2, #20, #4
   20884:	f8c3 1354 	str.w	r1, [r3, #852]	@ 0x354
   20888:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   2088c:	2405      	movs	r4, #5
   2088e:	f364 0103 	bfi	r1, r4, #0, #4
   20892:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   20896:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   2089a:	f360 1107 	bfi	r1, r0, #4, #4
   2089e:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   208a2:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   208a6:	2006      	movs	r0, #6
   208a8:	f360 210b 	bfi	r1, r0, #8, #4
   208ac:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   208b0:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   208b4:	2001      	movs	r0, #1
   208b6:	f360 310f 	bfi	r1, r0, #12, #4
   208ba:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   208be:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   208c2:	f362 61de 	bfi	r1, r2, #27, #4
   208c6:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   208ca:	f8d3 135c 	ldr.w	r1, [r3, #860]	@ 0x35c
   208ce:	f362 0103 	bfi	r1, r2, #0, #4
   208d2:	f8c3 135c 	str.w	r1, [r3, #860]	@ 0x35c
   208d6:	4a34      	ldr	r2, [pc, #208]	@ (209a8 <am_hal_pwrctrl_low_power_init+0x160>)
   208d8:	68d3      	ldr	r3, [r2, #12]
   208da:	b2db      	uxtb	r3, r3
   208dc:	2b11      	cmp	r3, #17
   208de:	d80a      	bhi.n	208f6 <am_hal_pwrctrl_low_power_init+0xae>
   208e0:	4c32      	ldr	r4, [pc, #200]	@ (209ac <am_hal_pwrctrl_low_power_init+0x164>)
   208e2:	2100      	movs	r1, #0
   208e4:	200c      	movs	r0, #12
   208e6:	f7fe fb19 	bl	1ef1c <am_hal_cachectrl_control>
   208ea:	69a3      	ldr	r3, [r4, #24]
   208ec:	05db      	lsls	r3, r3, #23
   208ee:	d527      	bpl.n	20940 <am_hal_pwrctrl_low_power_init+0xf8>
   208f0:	2000      	movs	r0, #0
   208f2:	b005      	add	sp, #20
   208f4:	bd30      	pop	{r4, r5, pc}
   208f6:	f8d2 335c 	ldr.w	r3, [r2, #860]	@ 0x35c
   208fa:	f36f 6318 	bfc	r3, #24, #1
   208fe:	f8c2 335c 	str.w	r3, [r2, #860]	@ 0x35c
   20902:	e7ed      	b.n	208e0 <am_hal_pwrctrl_low_power_init+0x98>
   20904:	4c29      	ldr	r4, [pc, #164]	@ (209ac <am_hal_pwrctrl_low_power_init+0x164>)
   20906:	6863      	ldr	r3, [r4, #4]
   20908:	07d8      	lsls	r0, r3, #31
   2090a:	d5aa      	bpl.n	20862 <am_hal_pwrctrl_low_power_init+0x1a>
   2090c:	f7ff f888 	bl	1fa20 <am_hal_interrupt_master_disable>
   20910:	9003      	str	r0, [sp, #12]
   20912:	68a3      	ldr	r3, [r4, #8]
   20914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
   20918:	60a3      	str	r3, [r4, #8]
   2091a:	9803      	ldr	r0, [sp, #12]
   2091c:	f7ff f884 	bl	1fa28 <am_hal_interrupt_master_set>
   20920:	20a0      	movs	r0, #160	@ 0xa0
   20922:	f7fe fe29 	bl	1f578 <am_hal_flash_delay>
   20926:	69a3      	ldr	r3, [r4, #24]
   20928:	0619      	lsls	r1, r3, #24
   2092a:	d403      	bmi.n	20934 <am_hal_pwrctrl_low_power_init+0xec>
   2092c:	20a0      	movs	r0, #160	@ 0xa0
   2092e:	f7fe fe23 	bl	1f578 <am_hal_flash_delay>
   20932:	69a3      	ldr	r3, [r4, #24]
   20934:	4b1d      	ldr	r3, [pc, #116]	@ (209ac <am_hal_pwrctrl_low_power_init+0x164>)
   20936:	699b      	ldr	r3, [r3, #24]
   20938:	061a      	lsls	r2, r3, #24
   2093a:	d492      	bmi.n	20862 <am_hal_pwrctrl_low_power_init+0x1a>
   2093c:	2001      	movs	r0, #1
   2093e:	e7d8      	b.n	208f2 <am_hal_pwrctrl_low_power_init+0xaa>
   20940:	4d19      	ldr	r5, [pc, #100]	@ (209a8 <am_hal_pwrctrl_low_power_init+0x160>)
   20942:	491b      	ldr	r1, [pc, #108]	@ (209b0 <am_hal_pwrctrl_low_power_init+0x168>)
   20944:	7e2a      	ldrb	r2, [r5, #24]
   20946:	2001      	movs	r0, #1
   20948:	4302      	orrs	r2, r0
   2094a:	2307      	movs	r3, #7
   2094c:	762a      	strb	r2, [r5, #24]
   2094e:	9000      	str	r0, [sp, #0]
   20950:	461a      	mov	r2, r3
   20952:	f242 7010 	movw	r0, #10000	@ 0x2710
   20956:	f7fe fe1f 	bl	1f598 <am_hal_flash_delay_status_check>
   2095a:	b9f8      	cbnz	r0, 2099c <am_hal_pwrctrl_low_power_init+0x154>
   2095c:	6823      	ldr	r3, [r4, #0]
   2095e:	f043 0301 	orr.w	r3, r3, #1
   20962:	6023      	str	r3, [r4, #0]
   20964:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   20966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2096a:	6263      	str	r3, [r4, #36]	@ 0x24
   2096c:	68eb      	ldr	r3, [r5, #12]
   2096e:	b2db      	uxtb	r3, r3
   20970:	2b11      	cmp	r3, #17
   20972:	d1bd      	bne.n	208f0 <am_hal_pwrctrl_low_power_init+0xa8>
   20974:	f8d5 335c 	ldr.w	r3, [r5, #860]	@ 0x35c
   20978:	f360 5356 	bfi	r3, r0, #21, #2
   2097c:	f8c5 335c 	str.w	r3, [r5, #860]	@ 0x35c
   20980:	f8d5 3368 	ldr.w	r3, [r5, #872]	@ 0x368
   20984:	220f      	movs	r2, #15
   20986:	f362 138b 	bfi	r3, r2, #6, #6
   2098a:	f8c5 3368 	str.w	r3, [r5, #872]	@ 0x368
   2098e:	f8d5 3368 	ldr.w	r3, [r5, #872]	@ 0x368
   20992:	f362 0305 	bfi	r3, r2, #0, #6
   20996:	f8c5 3368 	str.w	r3, [r5, #872]	@ 0x368
   2099a:	e7aa      	b.n	208f2 <am_hal_pwrctrl_low_power_init+0xaa>
   2099c:	2004      	movs	r0, #4
   2099e:	e7a8      	b.n	208f2 <am_hal_pwrctrl_low_power_init+0xaa>
   209a0:	100549c8 	.word	0x100549c8
   209a4:	4ffff000 	.word	0x4ffff000
   209a8:	40020000 	.word	0x40020000
   209ac:	40021000 	.word	0x40021000
   209b0:	40020018 	.word	0x40020018

000209b4 <am_hal_pwrctrl_blebuck_trim>:
   209b4:	b510      	push	{r4, lr}
   209b6:	4c12      	ldr	r4, [pc, #72]	@ (20a00 <am_hal_pwrctrl_blebuck_trim+0x4c>)
   209b8:	68e3      	ldr	r3, [r4, #12]
   209ba:	b2db      	uxtb	r3, r3
   209bc:	2b11      	cmp	r3, #17
   209be:	b082      	sub	sp, #8
   209c0:	d801      	bhi.n	209c6 <am_hal_pwrctrl_blebuck_trim+0x12>
   209c2:	b002      	add	sp, #8
   209c4:	bd10      	pop	{r4, pc}
   209c6:	f7ff f82b 	bl	1fa20 <am_hal_interrupt_master_disable>
   209ca:	9001      	str	r0, [sp, #4]
   209cc:	f8d4 3368 	ldr.w	r3, [r4, #872]	@ 0x368
   209d0:	2219      	movs	r2, #25
   209d2:	f362 138b 	bfi	r3, r2, #6, #6
   209d6:	f8c4 3368 	str.w	r3, [r4, #872]	@ 0x368
   209da:	f8d4 2368 	ldr.w	r2, [r4, #872]	@ 0x368
   209de:	230c      	movs	r3, #12
   209e0:	f363 0205 	bfi	r2, r3, #0, #6
   209e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   209e8:	f8c4 2368 	str.w	r2, [r4, #872]	@ 0x368
   209ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
   209ee:	f36f 5296 	bfc	r2, #22, #1
   209f2:	63da      	str	r2, [r3, #60]	@ 0x3c
   209f4:	9801      	ldr	r0, [sp, #4]
   209f6:	b002      	add	sp, #8
   209f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   209fc:	f7ff b814 	b.w	1fa28 <am_hal_interrupt_master_set>
   20a00:	40020000 	.word	0x40020000

00020a04 <am_hal_rtc_osc_select>:
   20a04:	b928      	cbnz	r0, 20a12 <am_hal_rtc_osc_select+0xe>
   20a06:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   20a0a:	68d3      	ldr	r3, [r2, #12]
   20a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   20a10:	60d3      	str	r3, [r2, #12]
   20a12:	4770      	bx	lr

00020a14 <am_hal_rtc_osc_enable>:
   20a14:	4a03      	ldr	r2, [pc, #12]	@ (20a24 <am_hal_rtc_osc_enable+0x10>)
   20a16:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
   20a1a:	f36f 1304 	bfc	r3, #4, #1
   20a1e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
   20a22:	4770      	bx	lr
   20a24:	40004200 	.word	0x40004200

00020a28 <am_hal_rtc_osc_disable>:
   20a28:	4a03      	ldr	r2, [pc, #12]	@ (20a38 <am_hal_rtc_osc_disable+0x10>)
   20a2a:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
   20a2e:	f043 0310 	orr.w	r3, r3, #16
   20a32:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
   20a36:	4770      	bx	lr
   20a38:	40004200 	.word	0x40004200

00020a3c <am_hal_rtc_time_12hour>:
   20a3c:	4a03      	ldr	r2, [pc, #12]	@ (20a4c <am_hal_rtc_time_12hour+0x10>)
   20a3e:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
   20a42:	f360 1345 	bfi	r3, r0, #5, #1
   20a46:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
   20a4a:	4770      	bx	lr
   20a4c:	40004200 	.word	0x40004200

00020a50 <am_hal_rtc_time_set>:
   20a50:	494a      	ldr	r1, [pc, #296]	@ (20b7c <am_hal_rtc_time_set+0x12c>)
   20a52:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
   20a56:	f043 0301 	orr.w	r3, r3, #1
   20a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20a5e:	f881 3050 	strb.w	r3, [r1, #80]	@ 0x50
   20a62:	4e47      	ldr	r6, [pc, #284]	@ (20b80 <am_hal_rtc_time_set+0x130>)
   20a64:	7f04      	ldrb	r4, [r0, #28]
   20a66:	f890 c020 	ldrb.w	ip, [r0, #32]
   20a6a:	f890 7028 	ldrb.w	r7, [r0, #40]	@ 0x28
   20a6e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
   20a72:	fba6 3504 	umull	r3, r5, r6, r4
   20a76:	08eb      	lsrs	r3, r5, #3
   20a78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   20a7c:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
   20a80:	fba6 3e0c 	umull	r3, lr, r6, ip
   20a84:	08eb      	lsrs	r3, r5, #3
   20a86:	ea4f 05de 	mov.w	r5, lr, lsr #3
   20a8a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   20a8e:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
   20a92:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   20a96:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
   20a9a:	ea45 150e 	orr.w	r5, r5, lr, lsl #4
   20a9e:	fba6 4e07 	umull	r4, lr, r6, r7
   20aa2:	fba6 4c02 	umull	r4, ip, r6, r2
   20aa6:	ea4f 04de 	mov.w	r4, lr, lsr #3
   20aaa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   20aae:	eba7 0444 	sub.w	r4, r7, r4, lsl #1
   20ab2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
   20ab6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   20aba:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   20abe:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
   20ac2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   20ac6:	061b      	lsls	r3, r3, #24
   20ac8:	042d      	lsls	r5, r5, #16
   20aca:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
   20ace:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
   20ad2:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
   20ad6:	f405 05fe 	and.w	r5, r5, #8323072	@ 0x7f0000
   20ada:	431d      	orrs	r5, r3
   20adc:	b2e4      	uxtb	r4, r4
   20ade:	0212      	lsls	r2, r2, #8
   20ae0:	432c      	orrs	r4, r5
   20ae2:	f402 42fe 	and.w	r2, r2, #32512	@ 0x7f00
   20ae6:	4322      	orrs	r2, r4
   20ae8:	640a      	str	r2, [r1, #64]	@ 0x40
   20aea:	7c07      	ldrb	r7, [r0, #16]
   20aec:	6844      	ldr	r4, [r0, #4]
   20aee:	f890 8018 	ldrb.w	r8, [r0, #24]
   20af2:	7d05      	ldrb	r5, [r0, #20]
   20af4:	fba6 3e07 	umull	r3, lr, r6, r7
   20af8:	ea4f 03de 	mov.w	r3, lr, lsr #3
   20afc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   20b00:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
   20b04:	0722      	lsls	r2, r4, #28
   20b06:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
   20b0a:	ea4f 00de 	mov.w	r0, lr, lsr #3
   20b0e:	ea43 1e00 	orr.w	lr, r3, r0, lsl #4
   20b12:	ea4f 6907 	mov.w	r9, r7, lsl #24
   20b16:	fba6 3708 	umull	r3, r7, r6, r8
   20b1a:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
   20b1e:	fba6 3605 	umull	r3, r6, r6, r5
   20b22:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
   20b26:	06e4      	lsls	r4, r4, #27
   20b28:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
   20b2c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
   20b30:	f004 6400 	and.w	r4, r4, #134217728	@ 0x8000000
   20b34:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   20b38:	4314      	orrs	r4, r2
   20b3a:	eba8 0040 	sub.w	r0, r8, r0, lsl #1
   20b3e:	f009 62e0 	and.w	r2, r9, #117440512	@ 0x7000000
   20b42:	08ff      	lsrs	r7, r7, #3
   20b44:	eba5 034c 	sub.w	r3, r5, ip, lsl #1
   20b48:	08f6      	lsrs	r6, r6, #3
   20b4a:	fa5f fe8e 	uxtb.w	lr, lr
   20b4e:	4322      	orrs	r2, r4
   20b50:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
   20b54:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
   20b58:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
   20b5c:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
   20b60:	021b      	lsls	r3, r3, #8
   20b62:	4302      	orrs	r2, r0
   20b64:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
   20b68:	4313      	orrs	r3, r2
   20b6a:	644b      	str	r3, [r1, #68]	@ 0x44
   20b6c:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
   20b70:	f36f 0300 	bfc	r3, #0, #1
   20b74:	f881 3050 	strb.w	r3, [r1, #80]	@ 0x50
   20b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20b7c:	40004200 	.word	0x40004200
   20b80:	cccccccd 	.word	0xcccccccd

00020b84 <am_hal_rtc_time_get>:
   20b84:	4a29      	ldr	r2, [pc, #164]	@ (20c2c <am_hal_rtc_time_get+0xa8>)
   20b86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
   20b88:	6c52      	ldr	r2, [r2, #68]	@ 0x44
   20b8a:	b4f0      	push	{r4, r5, r6, r7}
   20b8c:	f3c3 7401 	ubfx	r4, r3, #28, #2
   20b90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   20b94:	f3c3 6503 	ubfx	r5, r3, #24, #4
   20b98:	eb05 0544 	add.w	r5, r5, r4, lsl #1
   20b9c:	f3c3 5402 	ubfx	r4, r3, #20, #3
   20ba0:	f3c3 1c03 	ubfx	ip, r3, #4, #4
   20ba4:	61c5      	str	r5, [r0, #28]
   20ba6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   20baa:	f3c3 4503 	ubfx	r5, r3, #16, #4
   20bae:	eb05 0444 	add.w	r4, r5, r4, lsl #1
   20bb2:	f3c3 2603 	ubfx	r6, r3, #8, #4
   20bb6:	f3c3 3502 	ubfx	r5, r3, #12, #3
   20bba:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   20bbe:	f003 030f 	and.w	r3, r3, #15
   20bc2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   20bc6:	eb03 034c 	add.w	r3, r3, ip, lsl #1
   20bca:	eb06 0545 	add.w	r5, r6, r5, lsl #1
   20bce:	b2db      	uxtb	r3, r3
   20bd0:	e9c0 5309 	strd	r5, r3, [r0, #36]	@ 0x24
   20bd4:	f3c2 5103 	ubfx	r1, r2, #20, #4
   20bd8:	f3c2 7300 	ubfx	r3, r2, #28, #1
   20bdc:	f3c2 3700 	ubfx	r7, r2, #12, #1
   20be0:	f3c2 4603 	ubfx	r6, r2, #16, #4
   20be4:	6043      	str	r3, [r0, #4]
   20be6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   20bea:	f3c2 63c0 	ubfx	r3, r2, #27, #1
   20bee:	6204      	str	r4, [r0, #32]
   20bf0:	eb06 0141 	add.w	r1, r6, r1, lsl #1
   20bf4:	00bc      	lsls	r4, r7, #2
   20bf6:	f3c2 1601 	ubfx	r6, r2, #4, #2
   20bfa:	60c3      	str	r3, [r0, #12]
   20bfc:	f3c2 6302 	ubfx	r3, r2, #24, #3
   20c00:	f3c2 2503 	ubfx	r5, r2, #8, #4
   20c04:	443c      	add	r4, r7
   20c06:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   20c0a:	6083      	str	r3, [r0, #8]
   20c0c:	f002 030f 	and.w	r3, r2, #15
   20c10:	eb05 0444 	add.w	r4, r5, r4, lsl #1
   20c14:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   20c18:	0fd2      	lsrs	r2, r2, #31
   20c1a:	b2c9      	uxtb	r1, r1
   20c1c:	e9c0 1404 	strd	r1, r4, [r0, #16]
   20c20:	6183      	str	r3, [r0, #24]
   20c22:	6002      	str	r2, [r0, #0]
   20c24:	bcf0      	pop	{r4, r5, r6, r7}
   20c26:	4610      	mov	r0, r2
   20c28:	4770      	bx	lr
   20c2a:	bf00      	nop
   20c2c:	40004200 	.word	0x40004200

00020c30 <am_hal_stimer_config>:
   20c30:	4a03      	ldr	r2, [pc, #12]	@ (20c40 <am_hal_stimer_config+0x10>)
   20c32:	4603      	mov	r3, r0
   20c34:	f8d2 0140 	ldr.w	r0, [r2, #320]	@ 0x140
   20c38:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
   20c3c:	4770      	bx	lr
   20c3e:	bf00      	nop
   20c40:	40008000 	.word	0x40008000

00020c44 <am_hal_stimer_counter_get>:
   20c44:	4b01      	ldr	r3, [pc, #4]	@ (20c4c <am_hal_stimer_counter_get+0x8>)
   20c46:	f8d3 0144 	ldr.w	r0, [r3, #324]	@ 0x144
   20c4a:	4770      	bx	lr
   20c4c:	40008000 	.word	0x40008000

00020c50 <am_hal_stimer_compare_delta_set>:
   20c50:	2807      	cmp	r0, #7
   20c52:	d900      	bls.n	20c56 <am_hal_stimer_compare_delta_set+0x6>
   20c54:	4770      	bx	lr
   20c56:	b570      	push	{r4, r5, r6, lr}
   20c58:	b082      	sub	sp, #8
   20c5a:	4605      	mov	r5, r0
   20c5c:	460c      	mov	r4, r1
   20c5e:	f7fe fedf 	bl	1fa20 <am_hal_interrupt_master_disable>
   20c62:	4924      	ldr	r1, [pc, #144]	@ (20cf4 <am_hal_stimer_compare_delta_set+0xa4>)
   20c64:	9001      	str	r0, [sp, #4]
   20c66:	4b24      	ldr	r3, [pc, #144]	@ (20cf8 <am_hal_stimer_compare_delta_set+0xa8>)
   20c68:	f8d1 0140 	ldr.w	r0, [r1, #320]	@ 0x140
   20c6c:	f8d1 6140 	ldr.w	r6, [r1, #320]	@ 0x140
   20c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
   20c74:	40aa      	lsls	r2, r5
   20c76:	442b      	add	r3, r5
   20c78:	ea26 0602 	bic.w	r6, r6, r2
   20c7c:	009b      	lsls	r3, r3, #2
   20c7e:	f8c1 6140 	str.w	r6, [r1, #320]	@ 0x140
   20c82:	f8d1 1144 	ldr.w	r1, [r1, #324]	@ 0x144
   20c86:	601c      	str	r4, [r3, #0]
   20c88:	681d      	ldr	r5, [r3, #0]
   20c8a:	4421      	add	r1, r4
   20c8c:	1a6e      	subs	r6, r5, r1
   20c8e:	2e00      	cmp	r6, #0
   20c90:	db03      	blt.n	20c9a <am_hal_stimer_compare_delta_set+0x4a>
   20c92:	310a      	adds	r1, #10
   20c94:	1a69      	subs	r1, r5, r1
   20c96:	2900      	cmp	r1, #0
   20c98:	dd1e      	ble.n	20cd8 <am_hal_stimer_compare_delta_set+0x88>
   20c9a:	4916      	ldr	r1, [pc, #88]	@ (20cf4 <am_hal_stimer_compare_delta_set+0xa4>)
   20c9c:	f8d1 1144 	ldr.w	r1, [r1, #324]	@ 0x144
   20ca0:	601c      	str	r4, [r3, #0]
   20ca2:	681d      	ldr	r5, [r3, #0]
   20ca4:	4421      	add	r1, r4
   20ca6:	1a6e      	subs	r6, r5, r1
   20ca8:	2e00      	cmp	r6, #0
   20caa:	db03      	blt.n	20cb4 <am_hal_stimer_compare_delta_set+0x64>
   20cac:	310a      	adds	r1, #10
   20cae:	1a69      	subs	r1, r5, r1
   20cb0:	2900      	cmp	r1, #0
   20cb2:	dd11      	ble.n	20cd8 <am_hal_stimer_compare_delta_set+0x88>
   20cb4:	490f      	ldr	r1, [pc, #60]	@ (20cf4 <am_hal_stimer_compare_delta_set+0xa4>)
   20cb6:	f8d1 1144 	ldr.w	r1, [r1, #324]	@ 0x144
   20cba:	601c      	str	r4, [r3, #0]
   20cbc:	681d      	ldr	r5, [r3, #0]
   20cbe:	4421      	add	r1, r4
   20cc0:	1a6e      	subs	r6, r5, r1
   20cc2:	2e00      	cmp	r6, #0
   20cc4:	db03      	blt.n	20cce <am_hal_stimer_compare_delta_set+0x7e>
   20cc6:	310a      	adds	r1, #10
   20cc8:	1a69      	subs	r1, r5, r1
   20cca:	2900      	cmp	r1, #0
   20ccc:	dd04      	ble.n	20cd8 <am_hal_stimer_compare_delta_set+0x88>
   20cce:	4909      	ldr	r1, [pc, #36]	@ (20cf4 <am_hal_stimer_compare_delta_set+0xa4>)
   20cd0:	f8d1 1144 	ldr.w	r1, [r1, #324]	@ 0x144
   20cd4:	601c      	str	r4, [r3, #0]
   20cd6:	681b      	ldr	r3, [r3, #0]
   20cd8:	4b06      	ldr	r3, [pc, #24]	@ (20cf4 <am_hal_stimer_compare_delta_set+0xa4>)
   20cda:	f8d3 1140 	ldr.w	r1, [r3, #320]	@ 0x140
   20cde:	4002      	ands	r2, r0
   20ce0:	430a      	orrs	r2, r1
   20ce2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
   20ce6:	9801      	ldr	r0, [sp, #4]
   20ce8:	b002      	add	sp, #8
   20cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20cee:	f7fe be9b 	b.w	1fa28 <am_hal_interrupt_master_set>
   20cf2:	bf00      	nop
   20cf4:	40008000 	.word	0x40008000
   20cf8:	10002054 	.word	0x10002054

00020cfc <am_hal_stimer_int_enable>:
   20cfc:	4a03      	ldr	r2, [pc, #12]	@ (20d0c <am_hal_stimer_int_enable+0x10>)
   20cfe:	f8d2 3300 	ldr.w	r3, [r2, #768]	@ 0x300
   20d02:	4318      	orrs	r0, r3
   20d04:	f8c2 0300 	str.w	r0, [r2, #768]	@ 0x300
   20d08:	4770      	bx	lr
   20d0a:	bf00      	nop
   20d0c:	40008000 	.word	0x40008000

00020d10 <am_hal_stimer_int_clear>:
   20d10:	4b01      	ldr	r3, [pc, #4]	@ (20d18 <am_hal_stimer_int_clear+0x8>)
   20d12:	f8c3 0308 	str.w	r0, [r3, #776]	@ 0x308
   20d16:	4770      	bx	lr
   20d18:	40008000 	.word	0x40008000

00020d1c <am_hal_stimer_int_status_get>:
   20d1c:	4a04      	ldr	r2, [pc, #16]	@ (20d30 <am_hal_stimer_int_status_get+0x14>)
   20d1e:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
   20d22:	b110      	cbz	r0, 20d2a <am_hal_stimer_int_status_get+0xe>
   20d24:	f8d2 2300 	ldr.w	r2, [r2, #768]	@ 0x300
   20d28:	4013      	ands	r3, r2
   20d2a:	4618      	mov	r0, r3
   20d2c:	4770      	bx	lr
   20d2e:	bf00      	nop
   20d30:	40008000 	.word	0x40008000

00020d34 <am_hal_sysctrl_sleep>:
   20d34:	b510      	push	{r4, lr}
   20d36:	b082      	sub	sp, #8
   20d38:	4604      	mov	r4, r0
   20d3a:	f7fe fe71 	bl	1fa20 <am_hal_interrupt_master_disable>
   20d3e:	9001      	str	r0, [sp, #4]
   20d40:	b124      	cbz	r4, 20d4c <am_hal_sysctrl_sleep+0x18>
   20d42:	4b12      	ldr	r3, [pc, #72]	@ (20d8c <am_hal_sysctrl_sleep+0x58>)
   20d44:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
   20d48:	07db      	lsls	r3, r3, #31
   20d4a:	d513      	bpl.n	20d74 <am_hal_sysctrl_sleep+0x40>
   20d4c:	4a10      	ldr	r2, [pc, #64]	@ (20d90 <am_hal_sysctrl_sleep+0x5c>)
   20d4e:	6913      	ldr	r3, [r2, #16]
   20d50:	f023 0304 	bic.w	r3, r3, #4
   20d54:	6113      	str	r3, [r2, #16]
   20d56:	f3bf 8f4f 	dsb	sy
   20d5a:	4a0e      	ldr	r2, [pc, #56]	@ (20d94 <am_hal_sysctrl_sleep+0x60>)
   20d5c:	4b0e      	ldr	r3, [pc, #56]	@ (20d98 <am_hal_sysctrl_sleep+0x64>)
   20d5e:	6812      	ldr	r2, [r2, #0]
   20d60:	601a      	str	r2, [r3, #0]
   20d62:	bf30      	wfi
   20d64:	f3bf 8f6f 	isb	sy
   20d68:	9801      	ldr	r0, [sp, #4]
   20d6a:	b002      	add	sp, #8
   20d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20d70:	f7fe be5a 	b.w	1fa28 <am_hal_interrupt_master_set>
   20d74:	4b09      	ldr	r3, [pc, #36]	@ (20d9c <am_hal_sysctrl_sleep+0x68>)
   20d76:	681a      	ldr	r2, [r3, #0]
   20d78:	b912      	cbnz	r2, 20d80 <am_hal_sysctrl_sleep+0x4c>
   20d7a:	4a09      	ldr	r2, [pc, #36]	@ (20da0 <am_hal_sysctrl_sleep+0x6c>)
   20d7c:	6812      	ldr	r2, [r2, #0]
   20d7e:	601a      	str	r2, [r3, #0]
   20d80:	4a03      	ldr	r2, [pc, #12]	@ (20d90 <am_hal_sysctrl_sleep+0x5c>)
   20d82:	6913      	ldr	r3, [r2, #16]
   20d84:	f043 0304 	orr.w	r3, r3, #4
   20d88:	6113      	str	r3, [r2, #16]
   20d8a:	e7e4      	b.n	20d56 <am_hal_sysctrl_sleep+0x22>
   20d8c:	40020000 	.word	0x40020000
   20d90:	e000ed00 	.word	0xe000ed00
   20d94:	5fff0000 	.word	0x5fff0000
   20d98:	100549cc 	.word	0x100549cc
   20d9c:	100549c8 	.word	0x100549c8
   20da0:	4ffff000 	.word	0x4ffff000

00020da4 <am_hal_sysctrl_fpu_enable>:
   20da4:	4b02      	ldr	r3, [pc, #8]	@ (20db0 <am_hal_sysctrl_fpu_enable+0xc>)
   20da6:	f44f 0270 	mov.w	r2, #15728640	@ 0xf00000
   20daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   20dae:	4770      	bx	lr
   20db0:	e000ed00 	.word	0xe000ed00

00020db4 <am_hal_systick_delay_us>:
   20db4:	b4f0      	push	{r4, r5, r6, r7}
   20db6:	f04f 2140 	mov.w	r1, #1073758208	@ 0x40004000
   20dba:	2801      	cmp	r0, #1
   20dbc:	698a      	ldr	r2, [r1, #24]
   20dbe:	d93f      	bls.n	20e40 <am_hal_systick_delay_us+0x8c>
   20dc0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
   20dc2:	f002 0201 	and.w	r2, r2, #1
   20dc6:	2330      	movs	r3, #48	@ 0x30
   20dc8:	4113      	asrs	r3, r2
   20dca:	f3c1 0180 	ubfx	r1, r1, #2, #1
   20dce:	408b      	lsls	r3, r1
   20dd0:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
   20dd4:	fbb4 f2f3 	udiv	r2, r4, r3
   20dd8:	4290      	cmp	r0, r2
   20dda:	d91b      	bls.n	20e14 <am_hal_systick_delay_us+0x60>
   20ddc:	fbb0 f1f2 	udiv	r1, r0, r2
   20de0:	fb02 0611 	mls	r6, r2, r1, r0
   20de4:	3e02      	subs	r6, #2
   20de6:	fb03 f606 	mul.w	r6, r3, r6
   20dea:	2500      	movs	r5, #0
   20dec:	ebc1 6301 	rsb	r3, r1, r1, lsl #24
   20df0:	4a15      	ldr	r2, [pc, #84]	@ (20e48 <am_hal_systick_delay_us+0x94>)
   20df2:	eb03 0c06 	add.w	ip, r3, r6
   20df6:	4628      	mov	r0, r5
   20df8:	2701      	movs	r7, #1
   20dfa:	6054      	str	r4, [r2, #4]
   20dfc:	6090      	str	r0, [r2, #8]
   20dfe:	6017      	str	r7, [r2, #0]
   20e00:	6813      	ldr	r3, [r2, #0]
   20e02:	03db      	lsls	r3, r3, #15
   20e04:	d5fc      	bpl.n	20e00 <am_hal_systick_delay_us+0x4c>
   20e06:	3901      	subs	r1, #1
   20e08:	6015      	str	r5, [r2, #0]
   20e0a:	d1f6      	bne.n	20dfa <am_hal_systick_delay_us+0x46>
   20e0c:	2e01      	cmp	r6, #1
   20e0e:	bf38      	it	cc
   20e10:	2601      	movcc	r6, #1
   20e12:	e006      	b.n	20e22 <am_hal_systick_delay_us+0x6e>
   20e14:	3802      	subs	r0, #2
   20e16:	fb03 fc00 	mul.w	ip, r3, r0
   20e1a:	4666      	mov	r6, ip
   20e1c:	2e01      	cmp	r6, #1
   20e1e:	bf38      	it	cc
   20e20:	2601      	movcc	r6, #1
   20e22:	4909      	ldr	r1, [pc, #36]	@ (20e48 <am_hal_systick_delay_us+0x94>)
   20e24:	2400      	movs	r4, #0
   20e26:	2001      	movs	r0, #1
   20e28:	604e      	str	r6, [r1, #4]
   20e2a:	460a      	mov	r2, r1
   20e2c:	608c      	str	r4, [r1, #8]
   20e2e:	6008      	str	r0, [r1, #0]
   20e30:	6813      	ldr	r3, [r2, #0]
   20e32:	03db      	lsls	r3, r3, #15
   20e34:	d5fc      	bpl.n	20e30 <am_hal_systick_delay_us+0x7c>
   20e36:	2300      	movs	r3, #0
   20e38:	4660      	mov	r0, ip
   20e3a:	bcf0      	pop	{r4, r5, r6, r7}
   20e3c:	6013      	str	r3, [r2, #0]
   20e3e:	4770      	bx	lr
   20e40:	2601      	movs	r6, #1
   20e42:	46b4      	mov	ip, r6
   20e44:	e7ed      	b.n	20e22 <am_hal_systick_delay_us+0x6e>
   20e46:	bf00      	nop
   20e48:	e000e010 	.word	0xe000e010

00020e4c <am_hal_uart_initialize>:
   20e4c:	2801      	cmp	r0, #1
   20e4e:	d819      	bhi.n	20e84 <am_hal_uart_initialize+0x38>
   20e50:	b1e9      	cbz	r1, 20e8e <am_hal_uart_initialize+0x42>
   20e52:	b4f0      	push	{r4, r5, r6, r7}
   20e54:	2264      	movs	r2, #100	@ 0x64
   20e56:	4d0f      	ldr	r5, [pc, #60]	@ (20e94 <am_hal_uart_initialize+0x48>)
   20e58:	fb02 f200 	mul.w	r2, r2, r0
   20e5c:	18ac      	adds	r4, r5, r2
   20e5e:	78e3      	ldrb	r3, [r4, #3]
   20e60:	f3c3 0700 	ubfx	r7, r3, #0, #1
   20e64:	f013 0301 	ands.w	r3, r3, #1
   20e68:	d10e      	bne.n	20e88 <am_hal_uart_initialize+0x3c>
   20e6a:	6260      	str	r0, [r4, #36]	@ 0x24
   20e6c:	58ae      	ldr	r6, [r5, r2]
   20e6e:	480a      	ldr	r0, [pc, #40]	@ (20e98 <am_hal_uart_initialize+0x4c>)
   20e70:	f006 467e 	and.w	r6, r6, #4261412864	@ 0xfe000000
   20e74:	4330      	orrs	r0, r6
   20e76:	50a8      	str	r0, [r5, r2]
   20e78:	7127      	strb	r7, [r4, #4]
   20e7a:	6623      	str	r3, [r4, #96]	@ 0x60
   20e7c:	4618      	mov	r0, r3
   20e7e:	600c      	str	r4, [r1, #0]
   20e80:	bcf0      	pop	{r4, r5, r6, r7}
   20e82:	4770      	bx	lr
   20e84:	2005      	movs	r0, #5
   20e86:	4770      	bx	lr
   20e88:	2007      	movs	r0, #7
   20e8a:	bcf0      	pop	{r4, r5, r6, r7}
   20e8c:	4770      	bx	lr
   20e8e:	2006      	movs	r0, #6
   20e90:	4770      	bx	lr
   20e92:	bf00      	nop
   20e94:	10058128 	.word	0x10058128
   20e98:	01ea9e06 	.word	0x01ea9e06

00020e9c <am_hal_uart_power_control>:
   20e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e9e:	4604      	mov	r4, r0
   20ea0:	6800      	ldr	r0, [r0, #0]
   20ea2:	4b39      	ldr	r3, [pc, #228]	@ (20f88 <am_hal_uart_power_control+0xec>)
   20ea4:	f020 467e 	bic.w	r6, r0, #4261412864	@ 0xfe000000
   20ea8:	429e      	cmp	r6, r3
   20eaa:	b085      	sub	sp, #20
   20eac:	d13f      	bne.n	20f2e <am_hal_uart_power_control+0x92>
   20eae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   20eb0:	f105 0008 	add.w	r0, r5, #8
   20eb4:	b2c7      	uxtb	r7, r0
   20eb6:	b1a1      	cbz	r1, 20ee2 <am_hal_uart_power_control+0x46>
   20eb8:	3901      	subs	r1, #1
   20eba:	2901      	cmp	r1, #1
   20ebc:	d80e      	bhi.n	20edc <am_hal_uart_power_control+0x40>
   20ebe:	2a00      	cmp	r2, #0
   20ec0:	d138      	bne.n	20f34 <am_hal_uart_power_control+0x98>
   20ec2:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   20ec6:	351c      	adds	r5, #28
   20ec8:	032d      	lsls	r5, r5, #12
   20eca:	f04f 33ff 	mov.w	r3, #4294967295
   20ece:	646b      	str	r3, [r5, #68]	@ 0x44
   20ed0:	4638      	mov	r0, r7
   20ed2:	f7ff fc8d 	bl	207f0 <am_hal_pwrctrl_periph_disable>
   20ed6:	2000      	movs	r0, #0
   20ed8:	b005      	add	sp, #20
   20eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20edc:	2006      	movs	r0, #6
   20ede:	b005      	add	sp, #20
   20ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20ee2:	2a00      	cmp	r2, #0
   20ee4:	d047      	beq.n	20f76 <am_hal_uart_power_control+0xda>
   20ee6:	7923      	ldrb	r3, [r4, #4]
   20ee8:	2b00      	cmp	r3, #0
   20eea:	d04b      	beq.n	20f84 <am_hal_uart_power_control+0xe8>
   20eec:	4638      	mov	r0, r7
   20eee:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   20ef2:	9101      	str	r1, [sp, #4]
   20ef4:	351c      	adds	r5, #28
   20ef6:	f7ff fc51 	bl	2079c <am_hal_pwrctrl_periph_enable>
   20efa:	f7fe fd91 	bl	1fa20 <am_hal_interrupt_master_disable>
   20efe:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
   20f02:	032d      	lsls	r5, r5, #12
   20f04:	9002      	str	r0, [sp, #8]
   20f06:	6922      	ldr	r2, [r4, #16]
   20f08:	622b      	str	r3, [r5, #32]
   20f0a:	6963      	ldr	r3, [r4, #20]
   20f0c:	69a0      	ldr	r0, [r4, #24]
   20f0e:	626e      	str	r6, [r5, #36]	@ 0x24
   20f10:	62aa      	str	r2, [r5, #40]	@ 0x28
   20f12:	69e2      	ldr	r2, [r4, #28]
   20f14:	62eb      	str	r3, [r5, #44]	@ 0x2c
   20f16:	6a23      	ldr	r3, [r4, #32]
   20f18:	9901      	ldr	r1, [sp, #4]
   20f1a:	6328      	str	r0, [r5, #48]	@ 0x30
   20f1c:	636a      	str	r2, [r5, #52]	@ 0x34
   20f1e:	63ab      	str	r3, [r5, #56]	@ 0x38
   20f20:	9802      	ldr	r0, [sp, #8]
   20f22:	7121      	strb	r1, [r4, #4]
   20f24:	f7fe fd80 	bl	1fa28 <am_hal_interrupt_master_set>
   20f28:	9901      	ldr	r1, [sp, #4]
   20f2a:	4608      	mov	r0, r1
   20f2c:	e7d7      	b.n	20ede <am_hal_uart_power_control+0x42>
   20f2e:	2002      	movs	r0, #2
   20f30:	b005      	add	sp, #20
   20f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20f34:	f7fe fd74 	bl	1fa20 <am_hal_interrupt_master_disable>
   20f38:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   20f3c:	351c      	adds	r5, #28
   20f3e:	032d      	lsls	r5, r5, #12
   20f40:	9003      	str	r0, [sp, #12]
   20f42:	6a2a      	ldr	r2, [r5, #32]
   20f44:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   20f46:	60a2      	str	r2, [r4, #8]
   20f48:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
   20f4a:	60e3      	str	r3, [r4, #12]
   20f4c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
   20f4e:	6b29      	ldr	r1, [r5, #48]	@ 0x30
   20f50:	6163      	str	r3, [r4, #20]
   20f52:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   20f54:	6122      	str	r2, [r4, #16]
   20f56:	6baa      	ldr	r2, [r5, #56]	@ 0x38
   20f58:	61e3      	str	r3, [r4, #28]
   20f5a:	2301      	movs	r3, #1
   20f5c:	7123      	strb	r3, [r4, #4]
   20f5e:	9803      	ldr	r0, [sp, #12]
   20f60:	61a1      	str	r1, [r4, #24]
   20f62:	6222      	str	r2, [r4, #32]
   20f64:	f7fe fd60 	bl	1fa28 <am_hal_interrupt_master_set>
   20f68:	6823      	ldr	r3, [r4, #0]
   20f6a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   20f6e:	42b3      	cmp	r3, r6
   20f70:	d1ae      	bne.n	20ed0 <am_hal_uart_power_control+0x34>
   20f72:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   20f74:	e7a5      	b.n	20ec2 <am_hal_uart_power_control+0x26>
   20f76:	4638      	mov	r0, r7
   20f78:	9201      	str	r2, [sp, #4]
   20f7a:	f7ff fc0f 	bl	2079c <am_hal_pwrctrl_periph_enable>
   20f7e:	9a01      	ldr	r2, [sp, #4]
   20f80:	4610      	mov	r0, r2
   20f82:	e7ac      	b.n	20ede <am_hal_uart_power_control+0x42>
   20f84:	2007      	movs	r0, #7
   20f86:	e7aa      	b.n	20ede <am_hal_uart_power_control+0x42>
   20f88:	01ea9e06 	.word	0x01ea9e06

00020f8c <am_hal_uart_configure>:
   20f8c:	6803      	ldr	r3, [r0, #0]
   20f8e:	4a78      	ldr	r2, [pc, #480]	@ (21170 <am_hal_uart_configure+0x1e4>)
   20f90:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   20f94:	4293      	cmp	r3, r2
   20f96:	d001      	beq.n	20f9c <am_hal_uart_configure+0x10>
   20f98:	2002      	movs	r0, #2
   20f9a:	4770      	bx	lr
   20f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fa0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
   20fa2:	f504 2480 	add.w	r4, r4, #262144	@ 0x40000
   20fa6:	341c      	adds	r4, #28
   20fa8:	0324      	lsls	r4, r4, #12
   20faa:	2700      	movs	r7, #0
   20fac:	b084      	sub	sp, #16
   20fae:	6327      	str	r7, [r4, #48]	@ 0x30
   20fb0:	460e      	mov	r6, r1
   20fb2:	4605      	mov	r5, r0
   20fb4:	f7fe fd34 	bl	1fa20 <am_hal_interrupt_master_disable>
   20fb8:	9001      	str	r0, [sp, #4]
   20fba:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   20fbc:	f043 0308 	orr.w	r3, r3, #8
   20fc0:	8623      	strh	r3, [r4, #48]	@ 0x30
   20fc2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   20fc4:	2201      	movs	r2, #1
   20fc6:	f362 1306 	bfi	r3, r2, #4, #3
   20fca:	8623      	strh	r3, [r4, #48]	@ 0x30
   20fcc:	9801      	ldr	r0, [sp, #4]
   20fce:	f7fe fd2b 	bl	1fa28 <am_hal_interrupt_master_set>
   20fd2:	f7fe fd25 	bl	1fa20 <am_hal_interrupt_master_disable>
   20fd6:	9002      	str	r0, [sp, #8]
   20fd8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   20fda:	f367 0300 	bfi	r3, r7, #0, #1
   20fde:	8623      	strh	r3, [r4, #48]	@ 0x30
   20fe0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   20fe2:	f367 2349 	bfi	r3, r7, #9, #1
   20fe6:	8623      	strh	r3, [r4, #48]	@ 0x30
   20fe8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   20fea:	f367 2308 	bfi	r3, r7, #8, #1
   20fee:	8623      	strh	r3, [r4, #48]	@ 0x30
   20ff0:	9802      	ldr	r0, [sp, #8]
   20ff2:	f7fe fd19 	bl	1fa28 <am_hal_interrupt_master_set>
   20ff6:	4b5f      	ldr	r3, [pc, #380]	@ (21174 <am_hal_uart_configure+0x1e8>)
   20ff8:	6832      	ldr	r2, [r6, #0]
   20ffa:	68db      	ldr	r3, [r3, #12]
   20ffc:	b2db      	uxtb	r3, r3
   20ffe:	2b12      	cmp	r3, #18
   21000:	d076      	beq.n	210f0 <am_hal_uart_configure+0x164>
   21002:	4b5c      	ldr	r3, [pc, #368]	@ (21174 <am_hal_uart_configure+0x1e8>)
   21004:	68db      	ldr	r3, [r3, #12]
   21006:	b2db      	uxtb	r3, r3
   21008:	2b20      	cmp	r3, #32
   2100a:	d902      	bls.n	21012 <am_hal_uart_configure+0x86>
   2100c:	4b5a      	ldr	r3, [pc, #360]	@ (21178 <am_hal_uart_configure+0x1ec>)
   2100e:	429a      	cmp	r2, r3
   21010:	d871      	bhi.n	210f6 <am_hal_uart_configure+0x16a>
   21012:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   21014:	f3c3 1302 	ubfx	r3, r3, #4, #3
   21018:	3b01      	subs	r3, #1
   2101a:	b2db      	uxtb	r3, r3
   2101c:	2b03      	cmp	r3, #3
   2101e:	d86c      	bhi.n	210fa <am_hal_uart_configure+0x16e>
   21020:	4956      	ldr	r1, [pc, #344]	@ (2117c <am_hal_uart_configure+0x1f0>)
   21022:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   21026:	0112      	lsls	r2, r2, #4
   21028:	4291      	cmp	r1, r2
   2102a:	ea4f 1381 	mov.w	r3, r1, lsl #6
   2102e:	fbb1 f0f2 	udiv	r0, r1, r2
   21032:	fbb3 f3f2 	udiv	r3, r3, r2
   21036:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
   2103a:	d364      	bcc.n	21106 <am_hal_uart_configure+0x17a>
   2103c:	089a      	lsrs	r2, r3, #2
   2103e:	6260      	str	r0, [r4, #36]	@ 0x24
   21040:	eb02 1200 	add.w	r2, r2, r0, lsl #4
   21044:	6260      	str	r0, [r4, #36]	@ 0x24
   21046:	fbb1 f1f2 	udiv	r1, r1, r2
   2104a:	62a3      	str	r3, [r4, #40]	@ 0x28
   2104c:	6629      	str	r1, [r5, #96]	@ 0x60
   2104e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   21050:	f36f 338e 	bfc	r3, #14, #1
   21054:	8623      	strh	r3, [r4, #48]	@ 0x30
   21056:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   21058:	f36f 33cf 	bfc	r3, #15, #1
   2105c:	8623      	strh	r3, [r4, #48]	@ 0x30
   2105e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   21062:	6873      	ldr	r3, [r6, #4]
   21064:	6b22      	ldr	r2, [r4, #48]	@ 0x30
   21066:	430b      	orrs	r3, r1
   21068:	6931      	ldr	r1, [r6, #16]
   2106a:	4303      	orrs	r3, r0
   2106c:	430a      	orrs	r2, r1
   2106e:	f043 0310 	orr.w	r3, r3, #16
   21072:	6971      	ldr	r1, [r6, #20]
   21074:	6322      	str	r2, [r4, #48]	@ 0x30
   21076:	6361      	str	r1, [r4, #52]	@ 0x34
   21078:	62e3      	str	r3, [r4, #44]	@ 0x2c
   2107a:	f7fe fcd1 	bl	1fa20 <am_hal_interrupt_master_disable>
   2107e:	9003      	str	r0, [sp, #12]
   21080:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   21082:	f043 0301 	orr.w	r3, r3, #1
   21086:	8623      	strh	r3, [r4, #48]	@ 0x30
   21088:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   2108a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   2108e:	8623      	strh	r3, [r4, #48]	@ 0x30
   21090:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
   21092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   21096:	8623      	strh	r3, [r4, #48]	@ 0x30
   21098:	9803      	ldr	r0, [sp, #12]
   2109a:	f7fe fcc5 	bl	1fa28 <am_hal_interrupt_master_set>
   2109e:	682a      	ldr	r2, [r5, #0]
   210a0:	4b33      	ldr	r3, [pc, #204]	@ (21170 <am_hal_uart_configure+0x1e4>)
   210a2:	f022 487e 	bic.w	r8, r2, #4261412864	@ 0xfe000000
   210a6:	4598      	cmp	r8, r3
   210a8:	d11e      	bne.n	210e8 <am_hal_uart_configure+0x15c>
   210aa:	69b1      	ldr	r1, [r6, #24]
   210ac:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
   210b0:	b109      	cbz	r1, 210b6 <am_hal_uart_configure+0x12a>
   210b2:	69f3      	ldr	r3, [r6, #28]
   210b4:	bb5b      	cbnz	r3, 2110e <am_hal_uart_configure+0x182>
   210b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   210b8:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   210bc:	331c      	adds	r3, #28
   210be:	031b      	lsls	r3, r3, #12
   210c0:	2100      	movs	r1, #0
   210c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
   210c4:	f885 1028 	strb.w	r1, [r5, #40]	@ 0x28
   210c8:	f022 0220 	bic.w	r2, r2, #32
   210cc:	639a      	str	r2, [r3, #56]	@ 0x38
   210ce:	b10c      	cbz	r4, 210d4 <am_hal_uart_configure+0x148>
   210d0:	2f00      	cmp	r7, #0
   210d2:	d132      	bne.n	2113a <am_hal_uart_configure+0x1ae>
   210d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
   210d6:	2000      	movs	r0, #0
   210d8:	f022 0250 	bic.w	r2, r2, #80	@ 0x50
   210dc:	f885 0044 	strb.w	r0, [r5, #68]	@ 0x44
   210e0:	639a      	str	r2, [r3, #56]	@ 0x38
   210e2:	b004      	add	sp, #16
   210e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210e8:	2000      	movs	r0, #0
   210ea:	b004      	add	sp, #16
   210ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210f0:	f5b2 2f61 	cmp.w	r2, #921600	@ 0xe1000
   210f4:	d985      	bls.n	21002 <am_hal_uart_configure+0x76>
   210f6:	4822      	ldr	r0, [pc, #136]	@ (21180 <am_hal_uart_configure+0x1f4>)
   210f8:	e7f3      	b.n	210e2 <am_hal_uart_configure+0x156>
   210fa:	4822      	ldr	r0, [pc, #136]	@ (21184 <am_hal_uart_configure+0x1f8>)
   210fc:	2300      	movs	r3, #0
   210fe:	662b      	str	r3, [r5, #96]	@ 0x60
   21100:	b004      	add	sp, #16
   21102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21106:	2300      	movs	r3, #0
   21108:	481d      	ldr	r0, [pc, #116]	@ (21180 <am_hal_uart_configure+0x1f4>)
   2110a:	662b      	str	r3, [r5, #96]	@ 0x60
   2110c:	e7e9      	b.n	210e2 <am_hal_uart_configure+0x156>
   2110e:	2201      	movs	r2, #1
   21110:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
   21114:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
   21118:	f000 fc00 	bl	2191c <am_hal_queue_init>
   2111c:	682b      	ldr	r3, [r5, #0]
   2111e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   21122:	4543      	cmp	r3, r8
   21124:	d1e0      	bne.n	210e8 <am_hal_uart_configure+0x15c>
   21126:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   21128:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   2112c:	331c      	adds	r3, #28
   2112e:	031b      	lsls	r3, r3, #12
   21130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
   21132:	f042 0220 	orr.w	r2, r2, #32
   21136:	639a      	str	r2, [r3, #56]	@ 0x38
   21138:	e7c9      	b.n	210ce <am_hal_uart_configure+0x142>
   2113a:	2201      	movs	r2, #1
   2113c:	463b      	mov	r3, r7
   2113e:	f885 2044 	strb.w	r2, [r5, #68]	@ 0x44
   21142:	4621      	mov	r1, r4
   21144:	f105 0048 	add.w	r0, r5, #72	@ 0x48
   21148:	f000 fbe8 	bl	2191c <am_hal_queue_init>
   2114c:	682b      	ldr	r3, [r5, #0]
   2114e:	4a08      	ldr	r2, [pc, #32]	@ (21170 <am_hal_uart_configure+0x1e4>)
   21150:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   21154:	4293      	cmp	r3, r2
   21156:	d1c7      	bne.n	210e8 <am_hal_uart_configure+0x15c>
   21158:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   2115a:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   2115e:	331c      	adds	r3, #28
   21160:	031b      	lsls	r3, r3, #12
   21162:	2000      	movs	r0, #0
   21164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
   21166:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
   2116a:	639a      	str	r2, [r3, #56]	@ 0x38
   2116c:	e7b9      	b.n	210e2 <am_hal_uart_configure+0x156>
   2116e:	bf00      	nop
   21170:	01ea9e06 	.word	0x01ea9e06
   21174:	40020000 	.word	0x40020000
   21178:	0016e360 	.word	0x0016e360
   2117c:	0003125c 	.word	0x0003125c
   21180:	08000003 	.word	0x08000003
   21184:	08000002 	.word	0x08000002

00021188 <am_hal_uart_transfer>:
   21188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2118c:	ed2d 8b02 	vpush	{d8}
   21190:	680d      	ldr	r5, [r1, #0]
   21192:	b091      	sub	sp, #68	@ 0x44
   21194:	4604      	mov	r4, r0
   21196:	b14d      	cbz	r5, 211ac <am_hal_uart_transfer+0x24>
   21198:	2d01      	cmp	r5, #1
   2119a:	f000 8091 	beq.w	212c0 <am_hal_uart_transfer+0x138>
   2119e:	2507      	movs	r5, #7
   211a0:	4628      	mov	r0, r5
   211a2:	b011      	add	sp, #68	@ 0x44
   211a4:	ecbd 8b02 	vpop	{d8}
   211a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211ac:	f8d1 900c 	ldr.w	r9, [r1, #12]
   211b0:	684b      	ldr	r3, [r1, #4]
   211b2:	690a      	ldr	r2, [r1, #16]
   211b4:	688e      	ldr	r6, [r1, #8]
   211b6:	9301      	str	r3, [sp, #4]
   211b8:	9203      	str	r2, [sp, #12]
   211ba:	f1b9 0f00 	cmp.w	r9, #0
   211be:	f000 8113 	beq.w	213e8 <am_hal_uart_transfer+0x260>
   211c2:	2e00      	cmp	r6, #0
   211c4:	f000 8179 	beq.w	214ba <am_hal_uart_transfer+0x332>
   211c8:	2800      	cmp	r0, #0
   211ca:	f000 8168 	beq.w	2149e <am_hal_uart_transfer+0x316>
   211ce:	46aa      	mov	sl, r5
   211d0:	462f      	mov	r7, r5
   211d2:	9502      	str	r5, [sp, #8]
   211d4:	4605      	mov	r5, r0
   211d6:	4619      	mov	r1, r3
   211d8:	682a      	ldr	r2, [r5, #0]
   211da:	4bb4      	ldr	r3, [pc, #720]	@ (214ac <am_hal_uart_transfer+0x324>)
   211dc:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   211e0:	429a      	cmp	r2, r3
   211e2:	d12f      	bne.n	21244 <am_hal_uart_transfer+0xbc>
   211e4:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
   211e8:	2a00      	cmp	r2, #0
   211ea:	d133      	bne.n	21254 <am_hal_uart_transfer+0xcc>
   211ec:	6a68      	ldr	r0, [r5, #36]	@ 0x24
   211ee:	f500 2080 	add.w	r0, r0, #262144	@ 0x40000
   211f2:	301c      	adds	r0, #28
   211f4:	3901      	subs	r1, #1
   211f6:	0300      	lsls	r0, r0, #12
   211f8:	e005      	b.n	21206 <am_hal_uart_transfer+0x7e>
   211fa:	3201      	adds	r2, #1
   211fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21200:	6003      	str	r3, [r0, #0]
   21202:	42b2      	cmp	r2, r6
   21204:	d023      	beq.n	2124e <am_hal_uart_transfer+0xc6>
   21206:	6983      	ldr	r3, [r0, #24]
   21208:	069c      	lsls	r4, r3, #26
   2120a:	d5f6      	bpl.n	211fa <am_hal_uart_transfer+0x72>
   2120c:	4417      	add	r7, r2
   2120e:	1ab6      	subs	r6, r6, r2
   21210:	b936      	cbnz	r6, 21220 <am_hal_uart_transfer+0x98>
   21212:	9d02      	ldr	r5, [sp, #8]
   21214:	9b03      	ldr	r3, [sp, #12]
   21216:	2b00      	cmp	r3, #0
   21218:	f000 808d 	beq.w	21336 <am_hal_uart_transfer+0x1ae>
   2121c:	601f      	str	r7, [r3, #0]
   2121e:	e7bf      	b.n	211a0 <am_hal_uart_transfer+0x18>
   21220:	2010      	movs	r0, #16
   21222:	f7fe f9a9 	bl	1f578 <am_hal_flash_delay>
   21226:	f1b9 3fff 	cmp.w	r9, #4294967295
   2122a:	bf18      	it	ne
   2122c:	f10a 0a01 	addne.w	sl, sl, #1
   21230:	45d1      	cmp	r9, sl
   21232:	d9ee      	bls.n	21212 <am_hal_uart_transfer+0x8a>
   21234:	9b01      	ldr	r3, [sp, #4]
   21236:	682a      	ldr	r2, [r5, #0]
   21238:	19d9      	adds	r1, r3, r7
   2123a:	4b9c      	ldr	r3, [pc, #624]	@ (214ac <am_hal_uart_transfer+0x324>)
   2123c:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   21240:	429a      	cmp	r2, r3
   21242:	d0cf      	beq.n	211e4 <am_hal_uart_transfer+0x5c>
   21244:	9b03      	ldr	r3, [sp, #12]
   21246:	b103      	cbz	r3, 2124a <am_hal_uart_transfer+0xc2>
   21248:	601f      	str	r7, [r3, #0]
   2124a:	2502      	movs	r5, #2
   2124c:	e7a8      	b.n	211a0 <am_hal_uart_transfer+0x18>
   2124e:	9d02      	ldr	r5, [sp, #8]
   21250:	4417      	add	r7, r2
   21252:	e7df      	b.n	21214 <am_hal_uart_transfer+0x8c>
   21254:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	@ 0x34
   21258:	eba2 0b00 	sub.w	fp, r2, r0
   2125c:	45b3      	cmp	fp, r6
   2125e:	bf28      	it	cs
   21260:	46b3      	movcs	fp, r6
   21262:	f105 042c 	add.w	r4, r5, #44	@ 0x2c
   21266:	465a      	mov	r2, fp
   21268:	4620      	mov	r0, r4
   2126a:	f000 fb63 	bl	21934 <am_hal_queue_item_add>
   2126e:	f8d5 8024 	ldr.w	r8, [r5, #36]	@ 0x24
   21272:	f7fe fbd5 	bl	1fa20 <am_hal_interrupt_master_disable>
   21276:	f508 2880 	add.w	r8, r8, #262144	@ 0x40000
   2127a:	f108 081c 	add.w	r8, r8, #28
   2127e:	ea4f 3808 	mov.w	r8, r8, lsl #12
   21282:	9008      	str	r0, [sp, #32]
   21284:	e00d      	b.n	212a2 <am_hal_uart_transfer+0x11a>
   21286:	f000 fb93 	bl	219b0 <am_hal_queue_item_get>
   2128a:	b190      	cbz	r0, 212b2 <am_hal_uart_transfer+0x12a>
   2128c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   2128e:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   21292:	331c      	adds	r3, #28
   21294:	031b      	lsls	r3, r3, #12
   21296:	699a      	ldr	r2, [r3, #24]
   21298:	0692      	lsls	r2, r2, #26
   2129a:	bf5c      	itt	pl
   2129c:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   212a0:	601a      	strpl	r2, [r3, #0]
   212a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
   212a6:	069b      	lsls	r3, r3, #26
   212a8:	f04f 0201 	mov.w	r2, #1
   212ac:	a907      	add	r1, sp, #28
   212ae:	4620      	mov	r0, r4
   212b0:	d5e9      	bpl.n	21286 <am_hal_uart_transfer+0xfe>
   212b2:	9808      	ldr	r0, [sp, #32]
   212b4:	445f      	add	r7, fp
   212b6:	eba6 060b 	sub.w	r6, r6, fp
   212ba:	f7fe fbb5 	bl	1fa28 <am_hal_interrupt_master_set>
   212be:	e7a7      	b.n	21210 <am_hal_uart_transfer+0x88>
   212c0:	68cd      	ldr	r5, [r1, #12]
   212c2:	690b      	ldr	r3, [r1, #16]
   212c4:	9301      	str	r3, [sp, #4]
   212c6:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
   212ca:	2d00      	cmp	r5, #0
   212cc:	f000 80b8 	beq.w	21440 <am_hal_uart_transfer+0x2b8>
   212d0:	2f00      	cmp	r7, #0
   212d2:	f000 8123 	beq.w	2151c <am_hal_uart_transfer+0x394>
   212d6:	2800      	cmp	r0, #0
   212d8:	f000 80ec 	beq.w	214b4 <am_hal_uart_transfer+0x32c>
   212dc:	6822      	ldr	r2, [r4, #0]
   212de:	f8df a1cc 	ldr.w	sl, [pc, #460]	@ 214ac <am_hal_uart_transfer+0x324>
   212e2:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   212e6:	f04f 0900 	mov.w	r9, #0
   212ea:	f100 0348 	add.w	r3, r0, #72	@ 0x48
   212ee:	4552      	cmp	r2, sl
   212f0:	ee08 3a10 	vmov	s16, r3
   212f4:	46c8      	mov	r8, r9
   212f6:	465e      	mov	r6, fp
   212f8:	d134      	bne.n	21364 <am_hal_uart_transfer+0x1dc>
   212fa:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
   212fe:	2a00      	cmp	r2, #0
   21300:	d138      	bne.n	21374 <am_hal_uart_transfer+0x1ec>
   21302:	6a61      	ldr	r1, [r4, #36]	@ 0x24
   21304:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
   21308:	311c      	adds	r1, #28
   2130a:	1e73      	subs	r3, r6, #1
   2130c:	0309      	lsls	r1, r1, #12
   2130e:	e008      	b.n	21322 <am_hal_uart_transfer+0x19a>
   21310:	6808      	ldr	r0, [r1, #0]
   21312:	f410 6f70 	tst.w	r0, #3840	@ 0xf00
   21316:	d163      	bne.n	213e0 <am_hal_uart_transfer+0x258>
   21318:	3201      	adds	r2, #1
   2131a:	42ba      	cmp	r2, r7
   2131c:	f803 0f01 	strb.w	r0, [r3, #1]!
   21320:	d056      	beq.n	213d0 <am_hal_uart_transfer+0x248>
   21322:	6988      	ldr	r0, [r1, #24]
   21324:	06c0      	lsls	r0, r0, #27
   21326:	d5f3      	bpl.n	21310 <am_hal_uart_transfer+0x188>
   21328:	4490      	add	r8, r2
   2132a:	1abf      	subs	r7, r7, r2
   2132c:	b957      	cbnz	r7, 21344 <am_hal_uart_transfer+0x1bc>
   2132e:	9b01      	ldr	r3, [sp, #4]
   21330:	b10b      	cbz	r3, 21336 <am_hal_uart_transfer+0x1ae>
   21332:	f8c3 8000 	str.w	r8, [r3]
   21336:	2500      	movs	r5, #0
   21338:	4628      	mov	r0, r5
   2133a:	b011      	add	sp, #68	@ 0x44
   2133c:	ecbd 8b02 	vpop	{d8}
   21340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21344:	2010      	movs	r0, #16
   21346:	f7fe f917 	bl	1f578 <am_hal_flash_delay>
   2134a:	1c6b      	adds	r3, r5, #1
   2134c:	bf18      	it	ne
   2134e:	f109 0901 	addne.w	r9, r9, #1
   21352:	454d      	cmp	r5, r9
   21354:	d9eb      	bls.n	2132e <am_hal_uart_transfer+0x1a6>
   21356:	6822      	ldr	r2, [r4, #0]
   21358:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   2135c:	4552      	cmp	r2, sl
   2135e:	eb0b 0608 	add.w	r6, fp, r8
   21362:	d0ca      	beq.n	212fa <am_hal_uart_transfer+0x172>
   21364:	2502      	movs	r5, #2
   21366:	9b01      	ldr	r3, [sp, #4]
   21368:	2b00      	cmp	r3, #0
   2136a:	f43f af19 	beq.w	211a0 <am_hal_uart_transfer+0x18>
   2136e:	f8c3 8000 	str.w	r8, [r3]
   21372:	e715      	b.n	211a0 <am_hal_uart_transfer+0x18>
   21374:	f7fe fb54 	bl	1fa20 <am_hal_interrupt_master_disable>
   21378:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   2137a:	9007      	str	r0, [sp, #28]
   2137c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   21380:	321c      	adds	r2, #28
   21382:	0310      	lsls	r0, r2, #12
   21384:	f10d 0c20 	add.w	ip, sp, #32
   21388:	2200      	movs	r2, #0
   2138a:	6983      	ldr	r3, [r0, #24]
   2138c:	06db      	lsls	r3, r3, #27
   2138e:	d409      	bmi.n	213a4 <am_hal_uart_transfer+0x21c>
   21390:	6803      	ldr	r3, [r0, #0]
   21392:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   21396:	f102 0201 	add.w	r2, r2, #1
   2139a:	d11b      	bne.n	213d4 <am_hal_uart_transfer+0x24c>
   2139c:	2a20      	cmp	r2, #32
   2139e:	f80c 3b01 	strb.w	r3, [ip], #1
   213a2:	d1f2      	bne.n	2138a <am_hal_uart_transfer+0x202>
   213a4:	ee18 0a10 	vmov	r0, s16
   213a8:	a908      	add	r1, sp, #32
   213aa:	f000 fac3 	bl	21934 <am_hal_queue_item_add>
   213ae:	2800      	cmp	r0, #0
   213b0:	d077      	beq.n	214a2 <am_hal_uart_transfer+0x31a>
   213b2:	9807      	ldr	r0, [sp, #28]
   213b4:	f7fe fb38 	bl	1fa28 <am_hal_interrupt_master_set>
   213b8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
   213ba:	42ba      	cmp	r2, r7
   213bc:	bf28      	it	cs
   213be:	463a      	movcs	r2, r7
   213c0:	ee18 0a10 	vmov	r0, s16
   213c4:	4631      	mov	r1, r6
   213c6:	4490      	add	r8, r2
   213c8:	1abf      	subs	r7, r7, r2
   213ca:	f000 faf1 	bl	219b0 <am_hal_queue_item_get>
   213ce:	e7ad      	b.n	2132c <am_hal_uart_transfer+0x1a4>
   213d0:	4490      	add	r8, r2
   213d2:	e7ac      	b.n	2132e <am_hal_uart_transfer+0x1a6>
   213d4:	9807      	ldr	r0, [sp, #28]
   213d6:	f7fe fb27 	bl	1fa28 <am_hal_interrupt_master_set>
   213da:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
   213de:	e7c2      	b.n	21366 <am_hal_uart_transfer+0x1de>
   213e0:	4490      	add	r8, r2
   213e2:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
   213e6:	e7be      	b.n	21366 <am_hal_uart_transfer+0x1de>
   213e8:	2800      	cmp	r0, #0
   213ea:	f43f af2e 	beq.w	2124a <am_hal_uart_transfer+0xc2>
   213ee:	6803      	ldr	r3, [r0, #0]
   213f0:	4a2e      	ldr	r2, [pc, #184]	@ (214ac <am_hal_uart_transfer+0x324>)
   213f2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   213f6:	4293      	cmp	r3, r2
   213f8:	f47f af27 	bne.w	2124a <am_hal_uart_transfer+0xc2>
   213fc:	9b03      	ldr	r3, [sp, #12]
   213fe:	b10b      	cbz	r3, 21404 <am_hal_uart_transfer+0x27c>
   21400:	f8c3 9000 	str.w	r9, [r3]
   21404:	2e00      	cmp	r6, #0
   21406:	d096      	beq.n	21336 <am_hal_uart_transfer+0x1ae>
   21408:	f894 5028 	ldrb.w	r5, [r4, #40]	@ 0x28
   2140c:	2d00      	cmp	r5, #0
   2140e:	d156      	bne.n	214be <am_hal_uart_transfer+0x336>
   21410:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   21412:	9b01      	ldr	r3, [sp, #4]
   21414:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   21418:	321c      	adds	r2, #28
   2141a:	0312      	lsls	r2, r2, #12
   2141c:	3b01      	subs	r3, #1
   2141e:	e005      	b.n	2142c <am_hal_uart_transfer+0x2a4>
   21420:	3501      	adds	r5, #1
   21422:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   21426:	6011      	str	r1, [r2, #0]
   21428:	42ae      	cmp	r6, r5
   2142a:	d002      	beq.n	21432 <am_hal_uart_transfer+0x2aa>
   2142c:	6991      	ldr	r1, [r2, #24]
   2142e:	0689      	lsls	r1, r1, #26
   21430:	d5f6      	bpl.n	21420 <am_hal_uart_transfer+0x298>
   21432:	9b03      	ldr	r3, [sp, #12]
   21434:	2b00      	cmp	r3, #0
   21436:	f43f af7e 	beq.w	21336 <am_hal_uart_transfer+0x1ae>
   2143a:	601d      	str	r5, [r3, #0]
   2143c:	2500      	movs	r5, #0
   2143e:	e6af      	b.n	211a0 <am_hal_uart_transfer+0x18>
   21440:	2800      	cmp	r0, #0
   21442:	f43f af02 	beq.w	2124a <am_hal_uart_transfer+0xc2>
   21446:	6802      	ldr	r2, [r0, #0]
   21448:	4918      	ldr	r1, [pc, #96]	@ (214ac <am_hal_uart_transfer+0x324>)
   2144a:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   2144e:	428a      	cmp	r2, r1
   21450:	f47f aefb 	bne.w	2124a <am_hal_uart_transfer+0xc2>
   21454:	b103      	cbz	r3, 21458 <am_hal_uart_transfer+0x2d0>
   21456:	601d      	str	r5, [r3, #0]
   21458:	2f00      	cmp	r7, #0
   2145a:	f43f af6c 	beq.w	21336 <am_hal_uart_transfer+0x1ae>
   2145e:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
   21462:	2a00      	cmp	r2, #0
   21464:	d15c      	bne.n	21520 <am_hal_uart_transfer+0x398>
   21466:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   21468:	f500 2080 	add.w	r0, r0, #262144	@ 0x40000
   2146c:	301c      	adds	r0, #28
   2146e:	0300      	lsls	r0, r0, #12
   21470:	f10b 33ff 	add.w	r3, fp, #4294967295
   21474:	4614      	mov	r4, r2
   21476:	e009      	b.n	2148c <am_hal_uart_transfer+0x304>
   21478:	6801      	ldr	r1, [r0, #0]
   2147a:	f411 6270 	ands.w	r2, r1, #3840	@ 0xf00
   2147e:	f040 8080 	bne.w	21582 <am_hal_uart_transfer+0x3fa>
   21482:	3401      	adds	r4, #1
   21484:	42a7      	cmp	r7, r4
   21486:	f803 1f01 	strb.w	r1, [r3, #1]!
   2148a:	d07d      	beq.n	21588 <am_hal_uart_transfer+0x400>
   2148c:	6982      	ldr	r2, [r0, #24]
   2148e:	06d2      	lsls	r2, r2, #27
   21490:	d5f2      	bpl.n	21478 <am_hal_uart_transfer+0x2f0>
   21492:	9b01      	ldr	r3, [sp, #4]
   21494:	2b00      	cmp	r3, #0
   21496:	f43f ae83 	beq.w	211a0 <am_hal_uart_transfer+0x18>
   2149a:	601c      	str	r4, [r3, #0]
   2149c:	e680      	b.n	211a0 <am_hal_uart_transfer+0x18>
   2149e:	4607      	mov	r7, r0
   214a0:	e6d0      	b.n	21244 <am_hal_uart_transfer+0xbc>
   214a2:	9807      	ldr	r0, [sp, #28]
   214a4:	4d02      	ldr	r5, [pc, #8]	@ (214b0 <am_hal_uart_transfer+0x328>)
   214a6:	f7fe fabf 	bl	1fa28 <am_hal_interrupt_master_set>
   214aa:	e75c      	b.n	21366 <am_hal_uart_transfer+0x1de>
   214ac:	01ea9e06 	.word	0x01ea9e06
   214b0:	08000001 	.word	0x08000001
   214b4:	4680      	mov	r8, r0
   214b6:	2502      	movs	r5, #2
   214b8:	e755      	b.n	21366 <am_hal_uart_transfer+0x1de>
   214ba:	462f      	mov	r7, r5
   214bc:	e6aa      	b.n	21214 <am_hal_uart_transfer+0x8c>
   214be:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	@ 0x34
   214c2:	1b5d      	subs	r5, r3, r5
   214c4:	42b5      	cmp	r5, r6
   214c6:	bf28      	it	cs
   214c8:	4635      	movcs	r5, r6
   214ca:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
   214ce:	9901      	ldr	r1, [sp, #4]
   214d0:	462a      	mov	r2, r5
   214d2:	4638      	mov	r0, r7
   214d4:	f000 fa2e 	bl	21934 <am_hal_queue_item_add>
   214d8:	6a66      	ldr	r6, [r4, #36]	@ 0x24
   214da:	f7fe faa1 	bl	1fa20 <am_hal_interrupt_master_disable>
   214de:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
   214e2:	361c      	adds	r6, #28
   214e4:	0336      	lsls	r6, r6, #12
   214e6:	9005      	str	r0, [sp, #20]
   214e8:	e00d      	b.n	21506 <am_hal_uart_transfer+0x37e>
   214ea:	f000 fa61 	bl	219b0 <am_hal_queue_item_get>
   214ee:	b188      	cbz	r0, 21514 <am_hal_uart_transfer+0x38c>
   214f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   214f2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   214f6:	321c      	adds	r2, #28
   214f8:	0312      	lsls	r2, r2, #12
   214fa:	6993      	ldr	r3, [r2, #24]
   214fc:	0699      	lsls	r1, r3, #26
   214fe:	bf5c      	itt	pl
   21500:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   21504:	6013      	strpl	r3, [r2, #0]
   21506:	69b3      	ldr	r3, [r6, #24]
   21508:	069b      	lsls	r3, r3, #26
   2150a:	f04f 0201 	mov.w	r2, #1
   2150e:	a908      	add	r1, sp, #32
   21510:	4638      	mov	r0, r7
   21512:	d5ea      	bpl.n	214ea <am_hal_uart_transfer+0x362>
   21514:	9805      	ldr	r0, [sp, #20]
   21516:	f7fe fa87 	bl	1fa28 <am_hal_interrupt_master_set>
   2151a:	e78a      	b.n	21432 <am_hal_uart_transfer+0x2aa>
   2151c:	46b8      	mov	r8, r7
   2151e:	e706      	b.n	2132e <am_hal_uart_transfer+0x1a6>
   21520:	f7fe fa7e 	bl	1fa20 <am_hal_interrupt_master_disable>
   21524:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   21526:	9006      	str	r0, [sp, #24]
   21528:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   2152c:	321c      	adds	r2, #28
   2152e:	0310      	lsls	r0, r2, #12
   21530:	ae08      	add	r6, sp, #32
   21532:	2200      	movs	r2, #0
   21534:	6983      	ldr	r3, [r0, #24]
   21536:	06d9      	lsls	r1, r3, #27
   21538:	d409      	bmi.n	2154e <am_hal_uart_transfer+0x3c6>
   2153a:	6803      	ldr	r3, [r0, #0]
   2153c:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   21540:	f102 0201 	add.w	r2, r2, #1
   21544:	d117      	bne.n	21576 <am_hal_uart_transfer+0x3ee>
   21546:	2a20      	cmp	r2, #32
   21548:	f806 3b01 	strb.w	r3, [r6], #1
   2154c:	d1f2      	bne.n	21534 <am_hal_uart_transfer+0x3ac>
   2154e:	f104 0648 	add.w	r6, r4, #72	@ 0x48
   21552:	a908      	add	r1, sp, #32
   21554:	4630      	mov	r0, r6
   21556:	f000 f9ed 	bl	21934 <am_hal_queue_item_add>
   2155a:	b1b8      	cbz	r0, 2158c <am_hal_uart_transfer+0x404>
   2155c:	9806      	ldr	r0, [sp, #24]
   2155e:	f7fe fa63 	bl	1fa28 <am_hal_interrupt_master_set>
   21562:	6d24      	ldr	r4, [r4, #80]	@ 0x50
   21564:	42bc      	cmp	r4, r7
   21566:	bf28      	it	cs
   21568:	463c      	movcs	r4, r7
   2156a:	4659      	mov	r1, fp
   2156c:	4630      	mov	r0, r6
   2156e:	4622      	mov	r2, r4
   21570:	f000 fa1e 	bl	219b0 <am_hal_queue_item_get>
   21574:	e78d      	b.n	21492 <am_hal_uart_transfer+0x30a>
   21576:	9806      	ldr	r0, [sp, #24]
   21578:	f7fe fa56 	bl	1fa28 <am_hal_interrupt_master_set>
   2157c:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
   21580:	e60e      	b.n	211a0 <am_hal_uart_transfer+0x18>
   21582:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
   21586:	e784      	b.n	21492 <am_hal_uart_transfer+0x30a>
   21588:	4615      	mov	r5, r2
   2158a:	e782      	b.n	21492 <am_hal_uart_transfer+0x30a>
   2158c:	9806      	ldr	r0, [sp, #24]
   2158e:	4d02      	ldr	r5, [pc, #8]	@ (21598 <am_hal_uart_transfer+0x410>)
   21590:	f7fe fa4a 	bl	1fa28 <am_hal_interrupt_master_set>
   21594:	e604      	b.n	211a0 <am_hal_uart_transfer+0x18>
   21596:	bf00      	nop
   21598:	08000001 	.word	0x08000001

0002159c <am_hal_uart_tx_flush>:
   2159c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
   215a0:	b570      	push	{r4, r5, r6, lr}
   215a2:	6a45      	ldr	r5, [r0, #36]	@ 0x24
   215a4:	4604      	mov	r4, r0
   215a6:	b15b      	cbz	r3, 215c0 <am_hal_uart_tx_flush+0x24>
   215a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   215aa:	b14b      	cbz	r3, 215c0 <am_hal_uart_tx_flush+0x24>
   215ac:	4e0e      	ldr	r6, [pc, #56]	@ (215e8 <am_hal_uart_tx_flush+0x4c>)
   215ae:	6e20      	ldr	r0, [r4, #96]	@ 0x60
   215b0:	fbb6 f0f0 	udiv	r0, r6, r0
   215b4:	0100      	lsls	r0, r0, #4
   215b6:	f7fd ffdf 	bl	1f578 <am_hal_flash_delay>
   215ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   215bc:	2b00      	cmp	r3, #0
   215be:	d1f6      	bne.n	215ae <am_hal_uart_tx_flush+0x12>
   215c0:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   215c4:	351c      	adds	r5, #28
   215c6:	032d      	lsls	r5, r5, #12
   215c8:	69ab      	ldr	r3, [r5, #24]
   215ca:	071a      	lsls	r2, r3, #28
   215cc:	d509      	bpl.n	215e2 <am_hal_uart_tx_flush+0x46>
   215ce:	4e06      	ldr	r6, [pc, #24]	@ (215e8 <am_hal_uart_tx_flush+0x4c>)
   215d0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
   215d2:	fbb6 f3f3 	udiv	r3, r6, r3
   215d6:	0118      	lsls	r0, r3, #4
   215d8:	f7fd ffce 	bl	1f578 <am_hal_flash_delay>
   215dc:	69ab      	ldr	r3, [r5, #24]
   215de:	071b      	lsls	r3, r3, #28
   215e0:	d4f6      	bmi.n	215d0 <am_hal_uart_tx_flush+0x34>
   215e2:	2000      	movs	r0, #0
   215e4:	bd70      	pop	{r4, r5, r6, pc}
   215e6:	bf00      	nop
   215e8:	00b71b00 	.word	0x00b71b00

000215ec <am_hal_uart_interrupt_service>:
   215ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215f0:	4604      	mov	r4, r0
   215f2:	4847      	ldr	r0, [pc, #284]	@ (21710 <am_hal_uart_interrupt_service+0x124>)
   215f4:	6823      	ldr	r3, [r4, #0]
   215f6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   215fa:	4283      	cmp	r3, r0
   215fc:	b08a      	sub	sp, #40	@ 0x28
   215fe:	d124      	bne.n	2164a <am_hal_uart_interrupt_service+0x5e>
   21600:	f011 0f50 	tst.w	r1, #80	@ 0x50
   21604:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   21606:	460d      	mov	r5, r1
   21608:	4616      	mov	r6, r2
   2160a:	d002      	beq.n	21612 <am_hal_uart_interrupt_service+0x26>
   2160c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
   21610:	bb63      	cbnz	r3, 2166c <am_hal_uart_interrupt_service+0x80>
   21612:	06a9      	lsls	r1, r5, #26
   21614:	d409      	bmi.n	2162a <am_hal_uart_interrupt_service+0x3e>
   21616:	b126      	cbz	r6, 21622 <am_hal_uart_interrupt_service+0x36>
   21618:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
   2161c:	b15b      	cbz	r3, 21636 <am_hal_uart_interrupt_service+0x4a>
   2161e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   21620:	b1bb      	cbz	r3, 21652 <am_hal_uart_interrupt_service+0x66>
   21622:	2000      	movs	r0, #0
   21624:	b00a      	add	sp, #40	@ 0x28
   21626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2162a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
   2162e:	2b00      	cmp	r3, #0
   21630:	d13d      	bne.n	216ae <am_hal_uart_interrupt_service+0xc2>
   21632:	2e00      	cmp	r6, #0
   21634:	d0f5      	beq.n	21622 <am_hal_uart_interrupt_service+0x36>
   21636:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
   2163a:	371c      	adds	r7, #28
   2163c:	033f      	lsls	r7, r7, #12
   2163e:	69bb      	ldr	r3, [r7, #24]
   21640:	071b      	lsls	r3, r3, #28
   21642:	d40e      	bmi.n	21662 <am_hal_uart_interrupt_service+0x76>
   21644:	2301      	movs	r3, #1
   21646:	6033      	str	r3, [r6, #0]
   21648:	e7eb      	b.n	21622 <am_hal_uart_interrupt_service+0x36>
   2164a:	2002      	movs	r0, #2
   2164c:	b00a      	add	sp, #40	@ 0x28
   2164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21652:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
   21656:	371c      	adds	r7, #28
   21658:	033f      	lsls	r7, r7, #12
   2165a:	69bb      	ldr	r3, [r7, #24]
   2165c:	071a      	lsls	r2, r3, #28
   2165e:	d4e0      	bmi.n	21622 <am_hal_uart_interrupt_service+0x36>
   21660:	e7f0      	b.n	21644 <am_hal_uart_interrupt_service+0x58>
   21662:	2000      	movs	r0, #0
   21664:	6030      	str	r0, [r6, #0]
   21666:	b00a      	add	sp, #40	@ 0x28
   21668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2166c:	f7fe f9d8 	bl	1fa20 <am_hal_interrupt_master_disable>
   21670:	6a61      	ldr	r1, [r4, #36]	@ 0x24
   21672:	9001      	str	r0, [sp, #4]
   21674:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
   21678:	311c      	adds	r1, #28
   2167a:	0309      	lsls	r1, r1, #12
   2167c:	a802      	add	r0, sp, #8
   2167e:	2200      	movs	r2, #0
   21680:	698b      	ldr	r3, [r1, #24]
   21682:	06db      	lsls	r3, r3, #27
   21684:	d409      	bmi.n	2169a <am_hal_uart_interrupt_service+0xae>
   21686:	680b      	ldr	r3, [r1, #0]
   21688:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   2168c:	f102 0201 	add.w	r2, r2, #1
   21690:	d132      	bne.n	216f8 <am_hal_uart_interrupt_service+0x10c>
   21692:	2a20      	cmp	r2, #32
   21694:	f800 3b01 	strb.w	r3, [r0], #1
   21698:	d1f2      	bne.n	21680 <am_hal_uart_interrupt_service+0x94>
   2169a:	a902      	add	r1, sp, #8
   2169c:	f104 0048 	add.w	r0, r4, #72	@ 0x48
   216a0:	f000 f948 	bl	21934 <am_hal_queue_item_add>
   216a4:	b370      	cbz	r0, 21704 <am_hal_uart_interrupt_service+0x118>
   216a6:	9801      	ldr	r0, [sp, #4]
   216a8:	f7fe f9be 	bl	1fa28 <am_hal_interrupt_master_set>
   216ac:	e7b1      	b.n	21612 <am_hal_uart_interrupt_service+0x26>
   216ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   216b0:	f7fe f9b6 	bl	1fa20 <am_hal_interrupt_master_disable>
   216b4:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   216b8:	351c      	adds	r5, #28
   216ba:	032d      	lsls	r5, r5, #12
   216bc:	9002      	str	r0, [sp, #8]
   216be:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
   216c2:	e00d      	b.n	216e0 <am_hal_uart_interrupt_service+0xf4>
   216c4:	f000 f974 	bl	219b0 <am_hal_queue_item_get>
   216c8:	b190      	cbz	r0, 216f0 <am_hal_uart_interrupt_service+0x104>
   216ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   216cc:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   216d0:	331c      	adds	r3, #28
   216d2:	031b      	lsls	r3, r3, #12
   216d4:	699a      	ldr	r2, [r3, #24]
   216d6:	0692      	lsls	r2, r2, #26
   216d8:	bf5c      	itt	pl
   216da:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
   216de:	601a      	strpl	r2, [r3, #0]
   216e0:	69ab      	ldr	r3, [r5, #24]
   216e2:	069b      	lsls	r3, r3, #26
   216e4:	f04f 0201 	mov.w	r2, #1
   216e8:	f10d 0103 	add.w	r1, sp, #3
   216ec:	4640      	mov	r0, r8
   216ee:	d5e9      	bpl.n	216c4 <am_hal_uart_interrupt_service+0xd8>
   216f0:	9802      	ldr	r0, [sp, #8]
   216f2:	f7fe f999 	bl	1fa28 <am_hal_interrupt_master_set>
   216f6:	e78e      	b.n	21616 <am_hal_uart_interrupt_service+0x2a>
   216f8:	9801      	ldr	r0, [sp, #4]
   216fa:	f7fe f995 	bl	1fa28 <am_hal_interrupt_master_set>
   216fe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
   21702:	e78f      	b.n	21624 <am_hal_uart_interrupt_service+0x38>
   21704:	9801      	ldr	r0, [sp, #4]
   21706:	f7fe f98f 	bl	1fa28 <am_hal_interrupt_master_set>
   2170a:	4802      	ldr	r0, [pc, #8]	@ (21714 <am_hal_uart_interrupt_service+0x128>)
   2170c:	e78a      	b.n	21624 <am_hal_uart_interrupt_service+0x38>
   2170e:	bf00      	nop
   21710:	01ea9e06 	.word	0x01ea9e06
   21714:	08000001 	.word	0x08000001

00021718 <am_hal_uart_interrupt_enable>:
   21718:	6803      	ldr	r3, [r0, #0]
   2171a:	4a08      	ldr	r2, [pc, #32]	@ (2173c <am_hal_uart_interrupt_enable+0x24>)
   2171c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   21720:	4293      	cmp	r3, r2
   21722:	d109      	bne.n	21738 <am_hal_uart_interrupt_enable+0x20>
   21724:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   21726:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   2172a:	331c      	adds	r3, #28
   2172c:	031b      	lsls	r3, r3, #12
   2172e:	2000      	movs	r0, #0
   21730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
   21732:	4311      	orrs	r1, r2
   21734:	6399      	str	r1, [r3, #56]	@ 0x38
   21736:	4770      	bx	lr
   21738:	2002      	movs	r0, #2
   2173a:	4770      	bx	lr
   2173c:	01ea9e06 	.word	0x01ea9e06

00021740 <am_hal_uart_interrupt_clear>:
   21740:	6803      	ldr	r3, [r0, #0]
   21742:	4a07      	ldr	r2, [pc, #28]	@ (21760 <am_hal_uart_interrupt_clear+0x20>)
   21744:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   21748:	4293      	cmp	r3, r2
   2174a:	d107      	bne.n	2175c <am_hal_uart_interrupt_clear+0x1c>
   2174c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   2174e:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   21752:	331c      	adds	r3, #28
   21754:	031b      	lsls	r3, r3, #12
   21756:	2000      	movs	r0, #0
   21758:	6459      	str	r1, [r3, #68]	@ 0x44
   2175a:	4770      	bx	lr
   2175c:	2002      	movs	r0, #2
   2175e:	4770      	bx	lr
   21760:	01ea9e06 	.word	0x01ea9e06

00021764 <am_hal_uart_interrupt_status_get>:
   21764:	6803      	ldr	r3, [r0, #0]
   21766:	b410      	push	{r4}
   21768:	4c0b      	ldr	r4, [pc, #44]	@ (21798 <am_hal_uart_interrupt_status_get+0x34>)
   2176a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   2176e:	42a3      	cmp	r3, r4
   21770:	d10d      	bne.n	2178e <am_hal_uart_interrupt_status_get+0x2a>
   21772:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   21774:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   21778:	331c      	adds	r3, #28
   2177a:	031b      	lsls	r3, r3, #12
   2177c:	b92a      	cbnz	r2, 2178a <am_hal_uart_interrupt_status_get+0x26>
   2177e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
   21780:	f85d 4b04 	ldr.w	r4, [sp], #4
   21784:	600b      	str	r3, [r1, #0]
   21786:	2000      	movs	r0, #0
   21788:	4770      	bx	lr
   2178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
   2178c:	e7f8      	b.n	21780 <am_hal_uart_interrupt_status_get+0x1c>
   2178e:	2002      	movs	r0, #2
   21790:	f85d 4b04 	ldr.w	r4, [sp], #4
   21794:	4770      	bx	lr
   21796:	bf00      	nop
   21798:	01ea9e06 	.word	0x01ea9e06

0002179c <am_hal_cmdq_init>:
   2179c:	2807      	cmp	r0, #7
   2179e:	d84d      	bhi.n	2183c <am_hal_cmdq_init+0xa0>
   217a0:	2900      	cmp	r1, #0
   217a2:	d050      	beq.n	21846 <am_hal_cmdq_init+0xaa>
   217a4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   217a8:	684e      	ldr	r6, [r1, #4]
   217aa:	2e00      	cmp	r6, #0
   217ac:	d043      	beq.n	21836 <am_hal_cmdq_init+0x9a>
   217ae:	2a00      	cmp	r2, #0
   217b0:	d041      	beq.n	21836 <am_hal_cmdq_init+0x9a>
   217b2:	680c      	ldr	r4, [r1, #0]
   217b4:	2c01      	cmp	r4, #1
   217b6:	d93e      	bls.n	21836 <am_hal_cmdq_init+0x9a>
   217b8:	f8df e094 	ldr.w	lr, [pc, #148]	@ 21850 <am_hal_cmdq_init+0xb4>
   217bc:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
   217c0:	fb0c fc00 	mul.w	ip, ip, r0
   217c4:	eb0e 030c 	add.w	r3, lr, ip
   217c8:	78dd      	ldrb	r5, [r3, #3]
   217ca:	f015 0501 	ands.w	r5, r5, #1
   217ce:	d137      	bne.n	21840 <am_hal_cmdq_init+0xa4>
   217d0:	00e4      	lsls	r4, r4, #3
   217d2:	19a7      	adds	r7, r4, r6
   217d4:	e9c3 6701 	strd	r6, r7, [r3, #4]
   217d8:	e9c3 6604 	strd	r6, r6, [r3, #16]
   217dc:	4f1b      	ldr	r7, [pc, #108]	@ (2184c <am_hal_cmdq_init+0xb0>)
   217de:	619c      	str	r4, [r3, #24]
   217e0:	60de      	str	r6, [r3, #12]
   217e2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   217e6:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   217ea:	f85e 400c 	ldr.w	r4, [lr, ip]
   217ee:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 21854 <am_hal_cmdq_init+0xb8>
   217f2:	f004 477c 	and.w	r7, r4, #4227858432	@ 0xfc000000
   217f6:	ea47 0709 	orr.w	r7, r7, r9
   217fa:	6884      	ldr	r4, [r0, #8]
   217fc:	f84e 700c 	str.w	r7, [lr, ip]
   21800:	6258      	str	r0, [r3, #36]	@ 0x24
   21802:	e9c3 5507 	strd	r5, r5, [r3, #28]
   21806:	6025      	str	r5, [r4, #0]
   21808:	6a58      	ldr	r0, [r3, #36]	@ 0x24
   2180a:	68c0      	ldr	r0, [r0, #12]
   2180c:	6005      	str	r5, [r0, #0]
   2180e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
   21810:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
   21814:	6820      	ldr	r0, [r4, #0]
   21816:	4338      	orrs	r0, r7
   21818:	6020      	str	r0, [r4, #0]
   2181a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
   2181c:	6840      	ldr	r0, [r0, #4]
   2181e:	6006      	str	r6, [r0, #0]
   21820:	6a58      	ldr	r0, [r3, #36]	@ 0x24
   21822:	7a09      	ldrb	r1, [r1, #8]
   21824:	6804      	ldr	r4, [r0, #0]
   21826:	0049      	lsls	r1, r1, #1
   21828:	f001 0102 	and.w	r1, r1, #2
   2182c:	6021      	str	r1, [r4, #0]
   2182e:	4628      	mov	r0, r5
   21830:	6013      	str	r3, [r2, #0]
   21832:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
   21836:	2006      	movs	r0, #6
   21838:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
   2183c:	2005      	movs	r0, #5
   2183e:	4770      	bx	lr
   21840:	2007      	movs	r0, #7
   21842:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
   21846:	2006      	movs	r0, #6
   21848:	4770      	bx	lr
   2184a:	bf00      	nop
   2184c:	0003126c 	.word	0x0003126c
   21850:	100549d0 	.word	0x100549d0
   21854:	01cdcdcd 	.word	0x01cdcdcd

00021858 <am_hal_cmdq_enable>:
   21858:	4603      	mov	r3, r0
   2185a:	b1a0      	cbz	r0, 21886 <am_hal_cmdq_enable+0x2e>
   2185c:	6802      	ldr	r2, [r0, #0]
   2185e:	490c      	ldr	r1, [pc, #48]	@ (21890 <am_hal_cmdq_enable+0x38>)
   21860:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   21864:	428a      	cmp	r2, r1
   21866:	d10e      	bne.n	21886 <am_hal_cmdq_enable+0x2e>
   21868:	78c0      	ldrb	r0, [r0, #3]
   2186a:	f010 0002 	ands.w	r0, r0, #2
   2186e:	d10c      	bne.n	2188a <am_hal_cmdq_enable+0x32>
   21870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
   21872:	6811      	ldr	r1, [r2, #0]
   21874:	680a      	ldr	r2, [r1, #0]
   21876:	f042 0201 	orr.w	r2, r2, #1
   2187a:	600a      	str	r2, [r1, #0]
   2187c:	78da      	ldrb	r2, [r3, #3]
   2187e:	f042 0202 	orr.w	r2, r2, #2
   21882:	70da      	strb	r2, [r3, #3]
   21884:	4770      	bx	lr
   21886:	2002      	movs	r0, #2
   21888:	4770      	bx	lr
   2188a:	2000      	movs	r0, #0
   2188c:	4770      	bx	lr
   2188e:	bf00      	nop
   21890:	01cdcdcd 	.word	0x01cdcdcd

00021894 <am_hal_cmdq_term>:
   21894:	2800      	cmp	r0, #0
   21896:	d03d      	beq.n	21914 <am_hal_cmdq_term+0x80>
   21898:	b570      	push	{r4, r5, r6, lr}
   2189a:	6803      	ldr	r3, [r0, #0]
   2189c:	4a1e      	ldr	r2, [pc, #120]	@ (21918 <am_hal_cmdq_term+0x84>)
   2189e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   218a2:	4293      	cmp	r3, r2
   218a4:	b082      	sub	sp, #8
   218a6:	4604      	mov	r4, r0
   218a8:	d002      	beq.n	218b0 <am_hal_cmdq_term+0x1c>
   218aa:	2002      	movs	r0, #2
   218ac:	b002      	add	sp, #8
   218ae:	bd70      	pop	{r4, r5, r6, pc}
   218b0:	460d      	mov	r5, r1
   218b2:	f7fe f8b5 	bl	1fa20 <am_hal_interrupt_master_disable>
   218b6:	e9d4 2608 	ldrd	r2, r6, [r4, #32]
   218ba:	68b3      	ldr	r3, [r6, #8]
   218bc:	9001      	str	r0, [sp, #4]
   218be:	6819      	ldr	r1, [r3, #0]
   218c0:	f022 03ff 	bic.w	r3, r2, #255	@ 0xff
   218c4:	b2c9      	uxtb	r1, r1
   218c6:	430b      	orrs	r3, r1
   218c8:	1ad2      	subs	r2, r2, r3
   218ca:	2a00      	cmp	r2, #0
   218cc:	bfb8      	it	lt
   218ce:	f5a3 7380 	sublt.w	r3, r3, #256	@ 0x100
   218d2:	61e3      	str	r3, [r4, #28]
   218d4:	6873      	ldr	r3, [r6, #4]
   218d6:	681b      	ldr	r3, [r3, #0]
   218d8:	60e3      	str	r3, [r4, #12]
   218da:	9801      	ldr	r0, [sp, #4]
   218dc:	f7fe f8a4 	bl	1fa28 <am_hal_interrupt_master_set>
   218e0:	b91d      	cbnz	r5, 218ea <am_hal_cmdq_term+0x56>
   218e2:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   218e6:	429a      	cmp	r2, r3
   218e8:	d112      	bne.n	21910 <am_hal_cmdq_term+0x7c>
   218ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   218ec:	78e2      	ldrb	r2, [r4, #3]
   218ee:	6818      	ldr	r0, [r3, #0]
   218f0:	6919      	ldr	r1, [r3, #16]
   218f2:	f36f 0200 	bfc	r2, #0, #1
   218f6:	70e2      	strb	r2, [r4, #3]
   218f8:	6802      	ldr	r2, [r0, #0]
   218fa:	f022 0201 	bic.w	r2, r2, #1
   218fe:	6002      	str	r2, [r0, #0]
   21900:	695a      	ldr	r2, [r3, #20]
   21902:	680b      	ldr	r3, [r1, #0]
   21904:	2000      	movs	r0, #0
   21906:	ea23 0302 	bic.w	r3, r3, r2
   2190a:	600b      	str	r3, [r1, #0]
   2190c:	b002      	add	sp, #8
   2190e:	bd70      	pop	{r4, r5, r6, pc}
   21910:	2003      	movs	r0, #3
   21912:	e7cb      	b.n	218ac <am_hal_cmdq_term+0x18>
   21914:	2002      	movs	r0, #2
   21916:	4770      	bx	lr
   21918:	01cdcdcd 	.word	0x01cdcdcd

0002191c <am_hal_queue_init>:
   2191c:	b410      	push	{r4}
   2191e:	2400      	movs	r4, #0
   21920:	e9c0 4400 	strd	r4, r4, [r0]
   21924:	6084      	str	r4, [r0, #8]
   21926:	e9c0 2104 	strd	r2, r1, [r0, #16]
   2192a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2192e:	60c3      	str	r3, [r0, #12]
   21930:	4770      	bx	lr
   21932:	bf00      	nop

00021934 <am_hal_queue_item_add>:
   21934:	b5f0      	push	{r4, r5, r6, r7, lr}
   21936:	6906      	ldr	r6, [r0, #16]
   21938:	b083      	sub	sp, #12
   2193a:	4604      	mov	r4, r0
   2193c:	fb06 f602 	mul.w	r6, r6, r2
   21940:	460d      	mov	r5, r1
   21942:	f7fe f86d 	bl	1fa20 <am_hal_interrupt_master_disable>
   21946:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   2194a:	1a53      	subs	r3, r2, r1
   2194c:	42b3      	cmp	r3, r6
   2194e:	9001      	str	r0, [sp, #4]
   21950:	d31c      	bcc.n	2198c <am_hal_queue_item_add+0x58>
   21952:	b196      	cbz	r6, 2197a <am_hal_queue_item_add+0x46>
   21954:	6823      	ldr	r3, [r4, #0]
   21956:	b305      	cbz	r5, 2199a <am_hal_queue_item_add+0x66>
   21958:	1e68      	subs	r0, r5, #1
   2195a:	1987      	adds	r7, r0, r6
   2195c:	6962      	ldr	r2, [r4, #20]
   2195e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   21962:	54d1      	strb	r1, [r2, r3]
   21964:	6823      	ldr	r3, [r4, #0]
   21966:	68e5      	ldr	r5, [r4, #12]
   21968:	1c59      	adds	r1, r3, #1
   2196a:	4287      	cmp	r7, r0
   2196c:	fbb1 f3f5 	udiv	r3, r1, r5
   21970:	fb05 1313 	mls	r3, r5, r3, r1
   21974:	6023      	str	r3, [r4, #0]
   21976:	d1f1      	bne.n	2195c <am_hal_queue_item_add+0x28>
   21978:	68a1      	ldr	r1, [r4, #8]
   2197a:	9801      	ldr	r0, [sp, #4]
   2197c:	440e      	add	r6, r1
   2197e:	60a6      	str	r6, [r4, #8]
   21980:	f7fe f852 	bl	1fa28 <am_hal_interrupt_master_set>
   21984:	2401      	movs	r4, #1
   21986:	4620      	mov	r0, r4
   21988:	b003      	add	sp, #12
   2198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2198c:	9801      	ldr	r0, [sp, #4]
   2198e:	f7fe f84b 	bl	1fa28 <am_hal_interrupt_master_set>
   21992:	2400      	movs	r4, #0
   21994:	4620      	mov	r0, r4
   21996:	b003      	add	sp, #12
   21998:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2199a:	4628      	mov	r0, r5
   2199c:	3001      	adds	r0, #1
   2199e:	3301      	adds	r3, #1
   219a0:	4286      	cmp	r6, r0
   219a2:	fbb3 f5f2 	udiv	r5, r3, r2
   219a6:	fb02 3315 	mls	r3, r2, r5, r3
   219aa:	d1f7      	bne.n	2199c <am_hal_queue_item_add+0x68>
   219ac:	6023      	str	r3, [r4, #0]
   219ae:	e7e4      	b.n	2197a <am_hal_queue_item_add+0x46>

000219b0 <am_hal_queue_item_get>:
   219b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   219b2:	6906      	ldr	r6, [r0, #16]
   219b4:	4604      	mov	r4, r0
   219b6:	b083      	sub	sp, #12
   219b8:	fb06 f602 	mul.w	r6, r6, r2
   219bc:	460d      	mov	r5, r1
   219be:	f7fe f82f 	bl	1fa20 <am_hal_interrupt_master_disable>
   219c2:	68a2      	ldr	r2, [r4, #8]
   219c4:	9001      	str	r0, [sp, #4]
   219c6:	42b2      	cmp	r2, r6
   219c8:	d31c      	bcc.n	21a04 <am_hal_queue_item_get+0x54>
   219ca:	b196      	cbz	r6, 219f2 <am_hal_queue_item_get+0x42>
   219cc:	6863      	ldr	r3, [r4, #4]
   219ce:	b305      	cbz	r5, 21a12 <am_hal_queue_item_get+0x62>
   219d0:	1e68      	subs	r0, r5, #1
   219d2:	1987      	adds	r7, r0, r6
   219d4:	6962      	ldr	r2, [r4, #20]
   219d6:	5cd3      	ldrb	r3, [r2, r3]
   219d8:	f800 3f01 	strb.w	r3, [r0, #1]!
   219dc:	6863      	ldr	r3, [r4, #4]
   219de:	68e5      	ldr	r5, [r4, #12]
   219e0:	1c59      	adds	r1, r3, #1
   219e2:	4287      	cmp	r7, r0
   219e4:	fbb1 f3f5 	udiv	r3, r1, r5
   219e8:	fb05 1313 	mls	r3, r5, r3, r1
   219ec:	6063      	str	r3, [r4, #4]
   219ee:	d1f1      	bne.n	219d4 <am_hal_queue_item_get+0x24>
   219f0:	68a2      	ldr	r2, [r4, #8]
   219f2:	9801      	ldr	r0, [sp, #4]
   219f4:	1b92      	subs	r2, r2, r6
   219f6:	60a2      	str	r2, [r4, #8]
   219f8:	f7fe f816 	bl	1fa28 <am_hal_interrupt_master_set>
   219fc:	2401      	movs	r4, #1
   219fe:	4620      	mov	r0, r4
   21a00:	b003      	add	sp, #12
   21a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a04:	9801      	ldr	r0, [sp, #4]
   21a06:	f7fe f80f 	bl	1fa28 <am_hal_interrupt_master_set>
   21a0a:	2400      	movs	r4, #0
   21a0c:	4620      	mov	r0, r4
   21a0e:	b003      	add	sp, #12
   21a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a12:	68e1      	ldr	r1, [r4, #12]
   21a14:	4628      	mov	r0, r5
   21a16:	3001      	adds	r0, #1
   21a18:	3301      	adds	r3, #1
   21a1a:	42b0      	cmp	r0, r6
   21a1c:	fbb3 f5f1 	udiv	r5, r3, r1
   21a20:	fb01 3315 	mls	r3, r1, r5, r3
   21a24:	d1f7      	bne.n	21a16 <am_hal_queue_item_get+0x66>
   21a26:	6063      	str	r3, [r4, #4]
   21a28:	e7e3      	b.n	219f2 <am_hal_queue_item_get+0x42>
   21a2a:	bf00      	nop

00021a2c <__assert_func>:
   21a2c:	b500      	push	{lr}
   21a2e:	4c0b      	ldr	r4, [pc, #44]	@ (21a5c <__assert_func+0x30>)
   21a30:	6825      	ldr	r5, [r4, #0]
   21a32:	4614      	mov	r4, r2
   21a34:	68ee      	ldr	r6, [r5, #12]
   21a36:	461a      	mov	r2, r3
   21a38:	b085      	sub	sp, #20
   21a3a:	4603      	mov	r3, r0
   21a3c:	460d      	mov	r5, r1
   21a3e:	b14c      	cbz	r4, 21a54 <__assert_func+0x28>
   21a40:	4907      	ldr	r1, [pc, #28]	@ (21a60 <__assert_func+0x34>)
   21a42:	9500      	str	r5, [sp, #0]
   21a44:	e9cd 1401 	strd	r1, r4, [sp, #4]
   21a48:	4630      	mov	r0, r6
   21a4a:	4906      	ldr	r1, [pc, #24]	@ (21a64 <__assert_func+0x38>)
   21a4c:	f001 f886 	bl	22b5c <fiprintf>
   21a50:	f002 fea0 	bl	24794 <abort>
   21a54:	4904      	ldr	r1, [pc, #16]	@ (21a68 <__assert_func+0x3c>)
   21a56:	460c      	mov	r4, r1
   21a58:	e7f3      	b.n	21a42 <__assert_func+0x16>
   21a5a:	bf00      	nop
   21a5c:	100025a0 	.word	0x100025a0
   21a60:	0003092c 	.word	0x0003092c
   21a64:	0003093c 	.word	0x0003093c
   21a68:	00030618 	.word	0x00030618

00021a6c <atof>:
   21a6c:	2100      	movs	r1, #0
   21a6e:	f000 bffd 	b.w	22a6c <strtod>
   21a72:	bf00      	nop
   21a74:	0000      	movs	r0, r0
	...

00021a78 <_strtod_l>:
   21a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a7c:	ed2d 8b02 	vpush	{d8}
   21a80:	b09d      	sub	sp, #116	@ 0x74
   21a82:	4688      	mov	r8, r1
   21a84:	2100      	movs	r1, #0
   21a86:	9207      	str	r2, [sp, #28]
   21a88:	9118      	str	r1, [sp, #96]	@ 0x60
   21a8a:	2200      	movs	r2, #0
   21a8c:	2100      	movs	r1, #0
   21a8e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   21a92:	4683      	mov	fp, r0
   21a94:	4641      	mov	r1, r8
   21a96:	9117      	str	r1, [sp, #92]	@ 0x5c
   21a98:	460f      	mov	r7, r1
   21a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   21a9e:	2a2d      	cmp	r2, #45	@ 0x2d
   21aa0:	d85e      	bhi.n	21b60 <_strtod_l+0xe8>
   21aa2:	a001      	add	r0, pc, #4	@ (adr r0, 21aa8 <_strtod_l+0x30>)
   21aa4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   21aa8:	00021c7b 	.word	0x00021c7b
   21aac:	00021b61 	.word	0x00021b61
   21ab0:	00021b61 	.word	0x00021b61
   21ab4:	00021b61 	.word	0x00021b61
   21ab8:	00021b61 	.word	0x00021b61
   21abc:	00021b61 	.word	0x00021b61
   21ac0:	00021b61 	.word	0x00021b61
   21ac4:	00021b61 	.word	0x00021b61
   21ac8:	00021b61 	.word	0x00021b61
   21acc:	00021a97 	.word	0x00021a97
   21ad0:	00021a97 	.word	0x00021a97
   21ad4:	00021a97 	.word	0x00021a97
   21ad8:	00021a97 	.word	0x00021a97
   21adc:	00021a97 	.word	0x00021a97
   21ae0:	00021b61 	.word	0x00021b61
   21ae4:	00021b61 	.word	0x00021b61
   21ae8:	00021b61 	.word	0x00021b61
   21aec:	00021b61 	.word	0x00021b61
   21af0:	00021b61 	.word	0x00021b61
   21af4:	00021b61 	.word	0x00021b61
   21af8:	00021b61 	.word	0x00021b61
   21afc:	00021b61 	.word	0x00021b61
   21b00:	00021b61 	.word	0x00021b61
   21b04:	00021b61 	.word	0x00021b61
   21b08:	00021b61 	.word	0x00021b61
   21b0c:	00021b61 	.word	0x00021b61
   21b10:	00021b61 	.word	0x00021b61
   21b14:	00021b61 	.word	0x00021b61
   21b18:	00021b61 	.word	0x00021b61
   21b1c:	00021b61 	.word	0x00021b61
   21b20:	00021b61 	.word	0x00021b61
   21b24:	00021b61 	.word	0x00021b61
   21b28:	00021a97 	.word	0x00021a97
   21b2c:	00021b61 	.word	0x00021b61
   21b30:	00021b61 	.word	0x00021b61
   21b34:	00021b61 	.word	0x00021b61
   21b38:	00021b61 	.word	0x00021b61
   21b3c:	00021b61 	.word	0x00021b61
   21b40:	00021b61 	.word	0x00021b61
   21b44:	00021b61 	.word	0x00021b61
   21b48:	00021b61 	.word	0x00021b61
   21b4c:	00021b61 	.word	0x00021b61
   21b50:	00021b61 	.word	0x00021b61
   21b54:	00022223 	.word	0x00022223
   21b58:	00021b61 	.word	0x00021b61
   21b5c:	00022237 	.word	0x00022237
   21b60:	2100      	movs	r1, #0
   21b62:	9108      	str	r1, [sp, #32]
   21b64:	2a30      	cmp	r2, #48	@ 0x30
   21b66:	f000 8097 	beq.w	21c98 <_strtod_l+0x220>
   21b6a:	2300      	movs	r3, #0
   21b6c:	9309      	str	r3, [sp, #36]	@ 0x24
   21b6e:	2a2f      	cmp	r2, #47	@ 0x2f
   21b70:	4614      	mov	r4, r2
   21b72:	f240 8502 	bls.w	2257a <_strtod_l+0xb02>
   21b76:	f04f 0900 	mov.w	r9, #0
   21b7a:	4638      	mov	r0, r7
   21b7c:	464e      	mov	r6, r9
   21b7e:	464d      	mov	r5, r9
   21b80:	e013      	b.n	21baa <_strtod_l+0x132>
   21b82:	3001      	adds	r0, #1
   21b84:	2d08      	cmp	r5, #8
   21b86:	9017      	str	r0, [sp, #92]	@ 0x5c
   21b88:	bfc8      	it	gt
   21b8a:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   21b8e:	7804      	ldrb	r4, [r0, #0]
   21b90:	bfc6      	itte	gt
   21b92:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   21b96:	f1a2 0930 	subgt.w	r9, r2, #48	@ 0x30
   21b9a:	f1a3 0630 	suble.w	r6, r3, #48	@ 0x30
   21b9e:	2c2f      	cmp	r4, #47	@ 0x2f
   21ba0:	f105 0501 	add.w	r5, r5, #1
   21ba4:	4622      	mov	r2, r4
   21ba6:	f340 80b8 	ble.w	21d1a <_strtod_l+0x2a2>
   21baa:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   21bae:	2c39      	cmp	r4, #57	@ 0x39
   21bb0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   21bb4:	dde5      	ble.n	21b82 <_strtod_l+0x10a>
   21bb6:	49b0      	ldr	r1, [pc, #704]	@ (21e78 <_strtod_l+0x400>)
   21bb8:	2201      	movs	r2, #1
   21bba:	f002 fc5b 	bl	24474 <strncmp>
   21bbe:	2800      	cmp	r0, #0
   21bc0:	d17b      	bne.n	21cba <_strtod_l+0x242>
   21bc2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   21bc4:	4613      	mov	r3, r2
   21bc6:	3201      	adds	r2, #1
   21bc8:	9217      	str	r2, [sp, #92]	@ 0x5c
   21bca:	785c      	ldrb	r4, [r3, #1]
   21bcc:	2d00      	cmp	r5, #0
   21bce:	f040 85a2 	bne.w	22716 <_strtod_l+0xc9e>
   21bd2:	2c30      	cmp	r4, #48	@ 0x30
   21bd4:	f040 859c 	bne.w	22710 <_strtod_l+0xc98>
   21bd8:	4613      	mov	r3, r2
   21bda:	4618      	mov	r0, r3
   21bdc:	3301      	adds	r3, #1
   21bde:	9317      	str	r3, [sp, #92]	@ 0x5c
   21be0:	781c      	ldrb	r4, [r3, #0]
   21be2:	2c30      	cmp	r4, #48	@ 0x30
   21be4:	d0f9      	beq.n	21bda <_strtod_l+0x162>
   21be6:	f1c2 0301 	rsb	r3, r2, #1
   21bea:	4418      	add	r0, r3
   21bec:	f1a4 0331 	sub.w	r3, r4, #49	@ 0x31
   21bf0:	2b08      	cmp	r3, #8
   21bf2:	d836      	bhi.n	21c62 <_strtod_l+0x1ea>
   21bf4:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
   21bf6:	1c43      	adds	r3, r0, #1
   21bf8:	f1a4 0e30 	sub.w	lr, r4, #48	@ 0x30
   21bfc:	930d      	str	r3, [sp, #52]	@ 0x34
   21bfe:	2501      	movs	r5, #1
   21c00:	463c      	mov	r4, r7
   21c02:	f04f 0a00 	mov.w	sl, #0
   21c06:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   21c0a:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
   21c0e:	2000      	movs	r0, #0
   21c10:	1c63      	adds	r3, r4, #1
   21c12:	9317      	str	r3, [sp, #92]	@ 0x5c
   21c14:	7864      	ldrb	r4, [r4, #1]
   21c16:	f1a4 0230 	sub.w	r2, r4, #48	@ 0x30
   21c1a:	2a09      	cmp	r2, #9
   21c1c:	f200 82f1 	bhi.w	22202 <_strtod_l+0x78a>
   21c20:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   21c22:	3001      	adds	r0, #1
   21c24:	4696      	mov	lr, r2
   21c26:	2a00      	cmp	r2, #0
   21c28:	d0f2      	beq.n	21c10 <_strtod_l+0x198>
   21c2a:	2801      	cmp	r0, #1
   21c2c:	bfd8      	it	le
   21c2e:	f105 0c01 	addle.w	ip, r5, #1
   21c32:	f340 86fb 	ble.w	22a2c <_strtod_l+0xfb4>
   21c36:	eb00 0c05 	add.w	ip, r0, r5
   21c3a:	f10c 31ff 	add.w	r1, ip, #4294967295
   21c3e:	e003      	b.n	21c48 <_strtod_l+0x1d0>
   21c40:	005e      	lsls	r6, r3, #1
   21c42:	42a9      	cmp	r1, r5
   21c44:	f000 86f2 	beq.w	22a2c <_strtod_l+0xfb4>
   21c48:	2d08      	cmp	r5, #8
   21c4a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   21c4e:	f105 0501 	add.w	r5, r5, #1
   21c52:	ddf5      	ble.n	21c40 <_strtod_l+0x1c8>
   21c54:	2d10      	cmp	r5, #16
   21c56:	bfdc      	itt	le
   21c58:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   21c5c:	ea4f 0949 	movle.w	r9, r9, lsl #1
   21c60:	e7ef      	b.n	21c42 <_strtod_l+0x1ca>
   21c62:	2c65      	cmp	r4, #101	@ 0x65
   21c64:	f040 82ea 	bne.w	2223c <_strtod_l+0x7c4>
   21c68:	2300      	movs	r3, #0
   21c6a:	2201      	movs	r2, #1
   21c6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
   21c70:	469a      	mov	sl, r3
   21c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   21c74:	4303      	orrs	r3, r0
   21c76:	f040 82d2 	bne.w	2221e <_strtod_l+0x7a6>
   21c7a:	9b07      	ldr	r3, [sp, #28]
   21c7c:	ed9f 8b7c 	vldr	d8, [pc, #496]	@ 21e70 <_strtod_l+0x3f8>
   21c80:	b10b      	cbz	r3, 21c86 <_strtod_l+0x20e>
   21c82:	f8c3 8000 	str.w	r8, [r3]
   21c86:	eeb0 0a48 	vmov.f32	s0, s16
   21c8a:	eef0 0a68 	vmov.f32	s1, s17
   21c8e:	b01d      	add	sp, #116	@ 0x74
   21c90:	ecbd 8b02 	vpop	{d8}
   21c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c98:	787a      	ldrb	r2, [r7, #1]
   21c9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
   21c9e:	2a58      	cmp	r2, #88	@ 0x58
   21ca0:	f000 842e 	beq.w	22500 <_strtod_l+0xa88>
   21ca4:	3701      	adds	r7, #1
   21ca6:	9717      	str	r7, [sp, #92]	@ 0x5c
   21ca8:	783a      	ldrb	r2, [r7, #0]
   21caa:	2a30      	cmp	r2, #48	@ 0x30
   21cac:	d0fa      	beq.n	21ca4 <_strtod_l+0x22c>
   21cae:	2a00      	cmp	r2, #0
   21cb0:	f000 828f 	beq.w	221d2 <_strtod_l+0x75a>
   21cb4:	2301      	movs	r3, #1
   21cb6:	9309      	str	r3, [sp, #36]	@ 0x24
   21cb8:	e759      	b.n	21b6e <_strtod_l+0xf6>
   21cba:	2000      	movs	r0, #0
   21cbc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
   21cc0:	46aa      	mov	sl, r5
   21cc2:	2c65      	cmp	r4, #101	@ 0x65
   21cc4:	d036      	beq.n	21d34 <_strtod_l+0x2bc>
   21cc6:	2c45      	cmp	r4, #69	@ 0x45
   21cc8:	d034      	beq.n	21d34 <_strtod_l+0x2bc>
   21cca:	2300      	movs	r3, #0
   21ccc:	930e      	str	r3, [sp, #56]	@ 0x38
   21cce:	2d00      	cmp	r5, #0
   21cd0:	d17c      	bne.n	21dcc <_strtod_l+0x354>
   21cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   21cd4:	4303      	orrs	r3, r0
   21cd6:	f040 827c 	bne.w	221d2 <_strtod_l+0x75a>
   21cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   21cdc:	2b00      	cmp	r3, #0
   21cde:	d1cc      	bne.n	21c7a <_strtod_l+0x202>
   21ce0:	2c69      	cmp	r4, #105	@ 0x69
   21ce2:	f000 8477 	beq.w	225d4 <_strtod_l+0xb5c>
   21ce6:	f300 8470 	bgt.w	225ca <_strtod_l+0xb52>
   21cea:	2c49      	cmp	r4, #73	@ 0x49
   21cec:	f000 8472 	beq.w	225d4 <_strtod_l+0xb5c>
   21cf0:	2c4e      	cmp	r4, #78	@ 0x4e
   21cf2:	d1c2      	bne.n	21c7a <_strtod_l+0x202>
   21cf4:	4961      	ldr	r1, [pc, #388]	@ (21e7c <_strtod_l+0x404>)
   21cf6:	a817      	add	r0, sp, #92	@ 0x5c
   21cf8:	f003 f9c4 	bl	25084 <__match>
   21cfc:	2800      	cmp	r0, #0
   21cfe:	d0bc      	beq.n	21c7a <_strtod_l+0x202>
   21d00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   21d02:	781b      	ldrb	r3, [r3, #0]
   21d04:	2b28      	cmp	r3, #40	@ 0x28
   21d06:	f000 8583 	beq.w	22810 <_strtod_l+0xd98>
   21d0a:	485d      	ldr	r0, [pc, #372]	@ (21e80 <_strtod_l+0x408>)
   21d0c:	f002 fd34 	bl	24778 <nan>
   21d10:	eeb0 8a40 	vmov.f32	s16, s0
   21d14:	eef0 8a60 	vmov.f32	s17, s1
   21d18:	e25d      	b.n	221d6 <_strtod_l+0x75e>
   21d1a:	4957      	ldr	r1, [pc, #348]	@ (21e78 <_strtod_l+0x400>)
   21d1c:	2201      	movs	r2, #1
   21d1e:	f002 fba9 	bl	24474 <strncmp>
   21d22:	2800      	cmp	r0, #0
   21d24:	d1c9      	bne.n	21cba <_strtod_l+0x242>
   21d26:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   21d28:	900d      	str	r0, [sp, #52]	@ 0x34
   21d2a:	1c5a      	adds	r2, r3, #1
   21d2c:	9217      	str	r2, [sp, #92]	@ 0x5c
   21d2e:	785c      	ldrb	r4, [r3, #1]
   21d30:	46aa      	mov	sl, r5
   21d32:	e770      	b.n	21c16 <_strtod_l+0x19e>
   21d34:	2d00      	cmp	r5, #0
   21d36:	d09c      	beq.n	21c72 <_strtod_l+0x1fa>
   21d38:	f8dd 805c 	ldr.w	r8, [sp, #92]	@ 0x5c
   21d3c:	f108 0301 	add.w	r3, r8, #1
   21d40:	9317      	str	r3, [sp, #92]	@ 0x5c
   21d42:	f898 4001 	ldrb.w	r4, [r8, #1]
   21d46:	2c2b      	cmp	r4, #43	@ 0x2b
   21d48:	f000 8266 	beq.w	22218 <_strtod_l+0x7a0>
   21d4c:	2c2d      	cmp	r4, #45	@ 0x2d
   21d4e:	f000 825b 	beq.w	22208 <_strtod_l+0x790>
   21d52:	f04f 0c00 	mov.w	ip, #0
   21d56:	f1a4 0130 	sub.w	r1, r4, #48	@ 0x30
   21d5a:	2909      	cmp	r1, #9
   21d5c:	f200 824c 	bhi.w	221f8 <_strtod_l+0x780>
   21d60:	2c30      	cmp	r4, #48	@ 0x30
   21d62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   21d64:	d10a      	bne.n	21d7c <_strtod_l+0x304>
   21d66:	3301      	adds	r3, #1
   21d68:	9317      	str	r3, [sp, #92]	@ 0x5c
   21d6a:	781c      	ldrb	r4, [r3, #0]
   21d6c:	2c30      	cmp	r4, #48	@ 0x30
   21d6e:	d0fa      	beq.n	21d66 <_strtod_l+0x2ee>
   21d70:	f1a4 0231 	sub.w	r2, r4, #49	@ 0x31
   21d74:	2a08      	cmp	r2, #8
   21d76:	d8a8      	bhi.n	21cca <_strtod_l+0x252>
   21d78:	f1a4 0130 	sub.w	r1, r4, #48	@ 0x30
   21d7c:	1c5a      	adds	r2, r3, #1
   21d7e:	9217      	str	r2, [sp, #92]	@ 0x5c
   21d80:	785c      	ldrb	r4, [r3, #1]
   21d82:	2c2f      	cmp	r4, #47	@ 0x2f
   21d84:	f340 840d 	ble.w	225a2 <_strtod_l+0xb2a>
   21d88:	4696      	mov	lr, r2
   21d8a:	930e      	str	r3, [sp, #56]	@ 0x38
   21d8c:	e008      	b.n	21da0 <_strtod_l+0x328>
   21d8e:	3201      	adds	r2, #1
   21d90:	9217      	str	r2, [sp, #92]	@ 0x5c
   21d92:	f89e 4001 	ldrb.w	r4, [lr, #1]
   21d96:	2c2f      	cmp	r4, #47	@ 0x2f
   21d98:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
   21d9c:	dd06      	ble.n	21dac <_strtod_l+0x334>
   21d9e:	4696      	mov	lr, r2
   21da0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   21da4:	2c39      	cmp	r4, #57	@ 0x39
   21da6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   21daa:	ddf0      	ble.n	21d8e <_strtod_l+0x316>
   21dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   21dae:	1ad2      	subs	r2, r2, r3
   21db0:	2a08      	cmp	r2, #8
   21db2:	f340 83f6 	ble.w	225a2 <_strtod_l+0xb2a>
   21db6:	f644 631f 	movw	r3, #19999	@ 0x4e1f
   21dba:	930e      	str	r3, [sp, #56]	@ 0x38
   21dbc:	f1bc 0f00 	cmp.w	ip, #0
   21dc0:	d085      	beq.n	21cce <_strtod_l+0x256>
   21dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   21dc4:	425b      	negs	r3, r3
   21dc6:	930e      	str	r3, [sp, #56]	@ 0x38
   21dc8:	2d00      	cmp	r5, #0
   21dca:	d082      	beq.n	21cd2 <_strtod_l+0x25a>
   21dcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
   21dd0:	f1ba 0f00 	cmp.w	sl, #0
   21dd4:	bf08      	it	eq
   21dd6:	46aa      	moveq	sl, r5
   21dd8:	1a9b      	subs	r3, r3, r2
   21dda:	2d10      	cmp	r5, #16
   21ddc:	4630      	mov	r0, r6
   21dde:	930c      	str	r3, [sp, #48]	@ 0x30
   21de0:	462c      	mov	r4, r5
   21de2:	bfa8      	it	ge
   21de4:	2410      	movge	r4, #16
   21de6:	f7ea facd 	bl	c384 <__aeabi_ui2d>
   21dea:	2d09      	cmp	r5, #9
   21dec:	4602      	mov	r2, r0
   21dee:	460b      	mov	r3, r1
   21df0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21df4:	dd16      	ble.n	21e24 <_strtod_l+0x3ac>
   21df6:	4b23      	ldr	r3, [pc, #140]	@ (21e84 <_strtod_l+0x40c>)
   21df8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   21dfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
   21e00:	f7ea fb3a 	bl	c478 <__aeabi_dmul>
   21e04:	4602      	mov	r2, r0
   21e06:	4648      	mov	r0, r9
   21e08:	4690      	mov	r8, r2
   21e0a:	4689      	mov	r9, r1
   21e0c:	f7ea faba 	bl	c384 <__aeabi_ui2d>
   21e10:	4602      	mov	r2, r0
   21e12:	460b      	mov	r3, r1
   21e14:	4640      	mov	r0, r8
   21e16:	4649      	mov	r1, r9
   21e18:	f7ea f978 	bl	c10c <__adddf3>
   21e1c:	2d0f      	cmp	r5, #15
   21e1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21e22:	dc31      	bgt.n	21e88 <_strtod_l+0x410>
   21e24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   21e26:	2b00      	cmp	r3, #0
   21e28:	f000 8339 	beq.w	2249e <_strtod_l+0xa26>
   21e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   21e2e:	f340 8268 	ble.w	22302 <_strtod_l+0x88a>
   21e32:	2b16      	cmp	r3, #22
   21e34:	f340 83bc 	ble.w	225b0 <_strtod_l+0xb38>
   21e38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   21e3a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
   21e3e:	4293      	cmp	r3, r2
   21e40:	db22      	blt.n	21e88 <_strtod_l+0x410>
   21e42:	4c10      	ldr	r4, [pc, #64]	@ (21e84 <_strtod_l+0x40c>)
   21e44:	f1c5 050f 	rsb	r5, r5, #15
   21e48:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   21e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21e50:	e9d1 0100 	ldrd	r0, r1, [r1]
   21e54:	f7ea fb10 	bl	c478 <__aeabi_dmul>
   21e58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   21e5a:	1b5d      	subs	r5, r3, r5
   21e5c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   21e60:	e9d4 2300 	ldrd	r2, r3, [r4]
   21e64:	f7ea fb08 	bl	c478 <__aeabi_dmul>
   21e68:	ec41 0b18 	vmov	d8, r0, r1
   21e6c:	e1b3      	b.n	221d6 <_strtod_l+0x75e>
   21e6e:	bf00      	nop
	...
   21e78:	0003096c 	.word	0x0003096c
   21e7c:	0003097c 	.word	0x0003097c
   21e80:	00030618 	.word	0x00030618
   21e84:	00031558 	.word	0x00031558
   21e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   21e8a:	1b2c      	subs	r4, r5, r4
   21e8c:	441c      	add	r4, r3
   21e8e:	2c00      	cmp	r4, #0
   21e90:	f340 81da 	ble.w	22248 <_strtod_l+0x7d0>
   21e94:	f014 000f 	ands.w	r0, r4, #15
   21e98:	d00a      	beq.n	21eb0 <_strtod_l+0x438>
   21e9a:	493b      	ldr	r1, [pc, #236]	@ (21f88 <_strtod_l+0x510>)
   21e9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   21ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
   21ea8:	f7ea fae6 	bl	c478 <__aeabi_dmul>
   21eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21eb0:	f034 030f 	bics.w	r3, r4, #15
   21eb4:	d04b      	beq.n	21f4e <_strtod_l+0x4d6>
   21eb6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
   21eba:	f300 83a0 	bgt.w	225fe <_strtod_l+0xb86>
   21ebe:	2b10      	cmp	r3, #16
   21ec0:	f8df e0d8 	ldr.w	lr, [pc, #216]	@ 21f9c <_strtod_l+0x524>
   21ec4:	ea4f 1423 	mov.w	r4, r3, asr #4
   21ec8:	f340 84e8 	ble.w	2289c <_strtod_l+0xe24>
   21ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21ed0:	f04f 0c00 	mov.w	ip, #0
   21ed4:	9709      	str	r7, [sp, #36]	@ 0x24
   21ed6:	46f0      	mov	r8, lr
   21ed8:	46e1      	mov	r9, ip
   21eda:	4677      	mov	r7, lr
   21edc:	f014 0f01 	tst.w	r4, #1
   21ee0:	4610      	mov	r0, r2
   21ee2:	4619      	mov	r1, r3
   21ee4:	d007      	beq.n	21ef6 <_strtod_l+0x47e>
   21ee6:	e9d8 2300 	ldrd	r2, r3, [r8]
   21eea:	f7ea fac5 	bl	c478 <__aeabi_dmul>
   21eee:	f04f 0c01 	mov.w	ip, #1
   21ef2:	4602      	mov	r2, r0
   21ef4:	460b      	mov	r3, r1
   21ef6:	1064      	asrs	r4, r4, #1
   21ef8:	2c01      	cmp	r4, #1
   21efa:	f109 0901 	add.w	r9, r9, #1
   21efe:	f108 0808 	add.w	r8, r8, #8
   21f02:	d1eb      	bne.n	21edc <_strtod_l+0x464>
   21f04:	46be      	mov	lr, r7
   21f06:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   21f08:	f1bc 0f00 	cmp.w	ip, #0
   21f0c:	d001      	beq.n	21f12 <_strtod_l+0x49a>
   21f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21f12:	9b05      	ldr	r3, [sp, #20]
   21f14:	f1a3 7354 	sub.w	r3, r3, #55574528	@ 0x3500000
   21f18:	eb0e 01c9 	add.w	r1, lr, r9, lsl #3
   21f1c:	9305      	str	r3, [sp, #20]
   21f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21f22:	e9d1 0100 	ldrd	r0, r1, [r1]
   21f26:	f7ea faa7 	bl	c478 <__aeabi_dmul>
   21f2a:	4b18      	ldr	r3, [pc, #96]	@ (21f8c <_strtod_l+0x514>)
   21f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21f30:	400b      	ands	r3, r1
   21f32:	460a      	mov	r2, r1
   21f34:	4916      	ldr	r1, [pc, #88]	@ (21f90 <_strtod_l+0x518>)
   21f36:	428b      	cmp	r3, r1
   21f38:	f200 8361 	bhi.w	225fe <_strtod_l+0xb86>
   21f3c:	4915      	ldr	r1, [pc, #84]	@ (21f94 <_strtod_l+0x51c>)
   21f3e:	428b      	cmp	r3, r1
   21f40:	f240 8444 	bls.w	227cc <_strtod_l+0xd54>
   21f44:	4c14      	ldr	r4, [pc, #80]	@ (21f98 <_strtod_l+0x520>)
   21f46:	f04f 33ff 	mov.w	r3, #4294967295
   21f4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   21f4e:	2300      	movs	r3, #0
   21f50:	9309      	str	r3, [sp, #36]	@ 0x24
   21f52:	9600      	str	r6, [sp, #0]
   21f54:	462b      	mov	r3, r5
   21f56:	4652      	mov	r2, sl
   21f58:	4639      	mov	r1, r7
   21f5a:	4658      	mov	r0, fp
   21f5c:	f003 fce8 	bl	25930 <__s2b>
   21f60:	9012      	str	r0, [sp, #72]	@ 0x48
   21f62:	2800      	cmp	r0, #0
   21f64:	f000 834b 	beq.w	225fe <_strtod_l+0xb86>
   21f68:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
   21f6c:	1a9b      	subs	r3, r3, r2
   21f6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   21f70:	2a00      	cmp	r2, #0
   21f72:	bfa8      	it	ge
   21f74:	2300      	movge	r3, #0
   21f76:	930d      	str	r3, [sp, #52]	@ 0x34
   21f78:	f04f 0900 	mov.w	r9, #0
   21f7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   21f80:	9313      	str	r3, [sp, #76]	@ 0x4c
   21f82:	46ca      	mov	sl, r9
   21f84:	e0e6      	b.n	22154 <_strtod_l+0x6dc>
   21f86:	bf00      	nop
   21f88:	00031558 	.word	0x00031558
   21f8c:	7ff00000 	.word	0x7ff00000
   21f90:	7ca00000 	.word	0x7ca00000
   21f94:	7c900000 	.word	0x7c900000
   21f98:	7fefffff 	.word	0x7fefffff
   21f9c:	00031530 	.word	0x00031530
   21fa0:	1ad2      	subs	r2, r2, r3
   21fa2:	2a1f      	cmp	r2, #31
   21fa4:	eba4 0402 	sub.w	r4, r4, r2
   21fa8:	f300 823b 	bgt.w	22422 <_strtod_l+0x9aa>
   21fac:	2301      	movs	r3, #1
   21fae:	fa03 f502 	lsl.w	r5, r3, r2
   21fb2:	2300      	movs	r3, #0
   21fb4:	9310      	str	r3, [sp, #64]	@ 0x40
   21fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   21fb8:	4426      	add	r6, r4
   21fba:	4444      	add	r4, r8
   21fbc:	45a0      	cmp	r8, r4
   21fbe:	441e      	add	r6, r3
   21fc0:	4643      	mov	r3, r8
   21fc2:	bfa8      	it	ge
   21fc4:	4623      	movge	r3, r4
   21fc6:	42b3      	cmp	r3, r6
   21fc8:	bfa8      	it	ge
   21fca:	4633      	movge	r3, r6
   21fcc:	2b00      	cmp	r3, #0
   21fce:	dd03      	ble.n	21fd8 <_strtod_l+0x560>
   21fd0:	1ae4      	subs	r4, r4, r3
   21fd2:	1af6      	subs	r6, r6, r3
   21fd4:	eba8 0803 	sub.w	r8, r8, r3
   21fd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   21fda:	2b00      	cmp	r3, #0
   21fdc:	f300 81ca 	bgt.w	22374 <_strtod_l+0x8fc>
   21fe0:	2c00      	cmp	r4, #0
   21fe2:	f300 81e0 	bgt.w	223a6 <_strtod_l+0x92e>
   21fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   21fe8:	2b00      	cmp	r3, #0
   21fea:	f300 8210 	bgt.w	2240e <_strtod_l+0x996>
   21fee:	2e00      	cmp	r6, #0
   21ff0:	f300 8202 	bgt.w	223f8 <_strtod_l+0x980>
   21ff4:	f1b8 0f00 	cmp.w	r8, #0
   21ff8:	dd08      	ble.n	2200c <_strtod_l+0x594>
   21ffa:	4651      	mov	r1, sl
   21ffc:	4642      	mov	r2, r8
   21ffe:	4658      	mov	r0, fp
   22000:	f003 fe80 	bl	25d04 <__lshift>
   22004:	4682      	mov	sl, r0
   22006:	2800      	cmp	r0, #0
   22008:	f000 81ff 	beq.w	2240a <_strtod_l+0x992>
   2200c:	9918      	ldr	r1, [sp, #96]	@ 0x60
   2200e:	463a      	mov	r2, r7
   22010:	4658      	mov	r0, fp
   22012:	f003 ff11 	bl	25e38 <__mdiff>
   22016:	4681      	mov	r9, r0
   22018:	2800      	cmp	r0, #0
   2201a:	f000 81f6 	beq.w	2240a <_strtod_l+0x992>
   2201e:	2300      	movs	r3, #0
   22020:	68c2      	ldr	r2, [r0, #12]
   22022:	60c3      	str	r3, [r0, #12]
   22024:	4651      	mov	r1, sl
   22026:	920e      	str	r2, [sp, #56]	@ 0x38
   22028:	f003 fee4 	bl	25df4 <__mcmp>
   2202c:	2800      	cmp	r0, #0
   2202e:	f2c0 8402 	blt.w	22836 <_strtod_l+0xdbe>
   22032:	9e05      	ldr	r6, [sp, #20]
   22034:	f000 837c 	beq.w	22730 <_strtod_l+0xcb8>
   22038:	4651      	mov	r1, sl
   2203a:	4648      	mov	r0, r9
   2203c:	f004 f8a8 	bl	26190 <__ratio>
   22040:	ec55 4b10 	vmov	r4, r5, d0
   22044:	2200      	movs	r2, #0
   22046:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   2204a:	4620      	mov	r0, r4
   2204c:	4629      	mov	r1, r5
   2204e:	f7ea fc8f 	bl	c970 <__aeabi_dcmple>
   22052:	2800      	cmp	r0, #0
   22054:	f000 817e 	beq.w	22354 <_strtod_l+0x8dc>
   22058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2205a:	2b00      	cmp	r3, #0
   2205c:	f040 81ee 	bne.w	2243c <_strtod_l+0x9c4>
   22060:	9b04      	ldr	r3, [sp, #16]
   22062:	2b00      	cmp	r3, #0
   22064:	f040 8278 	bne.w	22558 <_strtod_l+0xae0>
   22068:	f3c6 0313 	ubfx	r3, r6, #0, #20
   2206c:	2b00      	cmp	r3, #0
   2206e:	f040 8219 	bne.w	224a4 <_strtod_l+0xa2c>
   22072:	4bb1      	ldr	r3, [pc, #708]	@ (22338 <_strtod_l+0x8c0>)
   22074:	2200      	movs	r2, #0
   22076:	4620      	mov	r0, r4
   22078:	4629      	mov	r1, r5
   2207a:	f7ea fc6f 	bl	c95c <__aeabi_dcmplt>
   2207e:	2800      	cmp	r0, #0
   22080:	f040 834d 	bne.w	2271e <_strtod_l+0xca6>
   22084:	4bad      	ldr	r3, [pc, #692]	@ (2233c <_strtod_l+0x8c4>)
   22086:	2200      	movs	r2, #0
   22088:	4620      	mov	r0, r4
   2208a:	4629      	mov	r1, r5
   2208c:	f7ea f9f4 	bl	c478 <__aeabi_dmul>
   22090:	460a      	mov	r2, r1
   22092:	4601      	mov	r1, r0
   22094:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
   22098:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
   2209c:	900a      	str	r0, [sp, #40]	@ 0x28
   2209e:	930b      	str	r3, [sp, #44]	@ 0x2c
   220a0:	f8df 82a0 	ldr.w	r8, [pc, #672]	@ 22344 <_strtod_l+0x8cc>
   220a4:	4ba6      	ldr	r3, [pc, #664]	@ (22340 <_strtod_l+0x8c8>)
   220a6:	ea06 0808 	and.w	r8, r6, r8
   220aa:	4598      	cmp	r8, r3
   220ac:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	@ 0x28
   220b0:	f000 81cb 	beq.w	2244a <_strtod_l+0x9d2>
   220b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   220b6:	b31b      	cbz	r3, 22100 <_strtod_l+0x688>
   220b8:	f1b8 6fd4 	cmp.w	r8, #111149056	@ 0x6a00000
   220bc:	d820      	bhi.n	22100 <_strtod_l+0x688>
   220be:	a39a      	add	r3, pc, #616	@ (adr r3, 22328 <_strtod_l+0x8b0>)
   220c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   220c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   220c8:	f7ea fc52 	bl	c970 <__aeabi_dcmple>
   220cc:	b1a0      	cbz	r0, 220f8 <_strtod_l+0x680>
   220ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   220d2:	f7ea fc6b 	bl	c9ac <__aeabi_d2uiz>
   220d6:	2801      	cmp	r0, #1
   220d8:	bf38      	it	cc
   220da:	2001      	movcc	r0, #1
   220dc:	f7ea f952 	bl	c384 <__aeabi_ui2d>
   220e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   220e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
   220e6:	2b00      	cmp	r3, #0
   220e8:	f040 828f 	bne.w	2260a <_strtod_l+0xb92>
   220ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
   220f0:	9014      	str	r0, [sp, #80]	@ 0x50
   220f2:	9315      	str	r3, [sp, #84]	@ 0x54
   220f4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
   220f8:	f105 63d6 	add.w	r3, r5, #112197632	@ 0x6b00000
   220fc:	eba3 0508 	sub.w	r5, r3, r8
   22100:	eeb0 0a48 	vmov.f32	s0, s16
   22104:	eef0 0a68 	vmov.f32	s1, s17
   22108:	f003 ff52 	bl	25fb0 <__ulp>
   2210c:	4620      	mov	r0, r4
   2210e:	ec53 2b10 	vmov	r2, r3, d0
   22112:	4629      	mov	r1, r5
   22114:	f7ea f9b0 	bl	c478 <__aeabi_dmul>
   22118:	ec53 2b18 	vmov	r2, r3, d8
   2211c:	f7e9 fff6 	bl	c10c <__adddf3>
   22120:	e9cd 0104 	strd	r0, r1, [sp, #16]
   22124:	460c      	mov	r4, r1
   22126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   22128:	b923      	cbnz	r3, 22134 <_strtod_l+0x6bc>
   2212a:	4b86      	ldr	r3, [pc, #536]	@ (22344 <_strtod_l+0x8cc>)
   2212c:	4023      	ands	r3, r4
   2212e:	4598      	cmp	r8, r3
   22130:	f000 81c1 	beq.w	224b6 <_strtod_l+0xa3e>
   22134:	9918      	ldr	r1, [sp, #96]	@ 0x60
   22136:	4658      	mov	r0, fp
   22138:	f003 fba0 	bl	2587c <_Bfree>
   2213c:	4639      	mov	r1, r7
   2213e:	4658      	mov	r0, fp
   22140:	f003 fb9c 	bl	2587c <_Bfree>
   22144:	4651      	mov	r1, sl
   22146:	4658      	mov	r0, fp
   22148:	f003 fb98 	bl	2587c <_Bfree>
   2214c:	4649      	mov	r1, r9
   2214e:	4658      	mov	r0, fp
   22150:	f003 fb94 	bl	2587c <_Bfree>
   22154:	9c12      	ldr	r4, [sp, #72]	@ 0x48
   22156:	4658      	mov	r0, fp
   22158:	6861      	ldr	r1, [r4, #4]
   2215a:	f003 fb69 	bl	25830 <_Balloc>
   2215e:	4607      	mov	r7, r0
   22160:	2800      	cmp	r0, #0
   22162:	f000 8152 	beq.w	2240a <_strtod_l+0x992>
   22166:	6922      	ldr	r2, [r4, #16]
   22168:	3202      	adds	r2, #2
   2216a:	0092      	lsls	r2, r2, #2
   2216c:	f104 010c 	add.w	r1, r4, #12
   22170:	300c      	adds	r0, #12
   22172:	f7ea fcdd 	bl	cb30 <memcpy>
   22176:	ed9d 8b04 	vldr	d8, [sp, #16]
   2217a:	aa1a      	add	r2, sp, #104	@ 0x68
   2217c:	a919      	add	r1, sp, #100	@ 0x64
   2217e:	4658      	mov	r0, fp
   22180:	eeb0 0a48 	vmov.f32	s0, s16
   22184:	eef0 0a68 	vmov.f32	s1, s17
   22188:	f003 ffa2 	bl	260d0 <__d2b>
   2218c:	9018      	str	r0, [sp, #96]	@ 0x60
   2218e:	2800      	cmp	r0, #0
   22190:	f000 8112 	beq.w	223b8 <_strtod_l+0x940>
   22194:	2101      	movs	r1, #1
   22196:	4658      	mov	r0, fp
   22198:	f003 fc76 	bl	25a88 <__i2b>
   2219c:	4682      	mov	sl, r0
   2219e:	2800      	cmp	r0, #0
   221a0:	f000 8133 	beq.w	2240a <_strtod_l+0x992>
   221a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   221a6:	2b00      	cmp	r3, #0
   221a8:	f2c0 8121 	blt.w	223ee <_strtod_l+0x976>
   221ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   221ae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
   221b0:	eb03 0802 	add.w	r8, r3, r2
   221b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   221b6:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
   221b8:	1a9b      	subs	r3, r3, r2
   221ba:	4423      	add	r3, r4
   221bc:	4a62      	ldr	r2, [pc, #392]	@ (22348 <_strtod_l+0x8d0>)
   221be:	3b01      	subs	r3, #1
   221c0:	4293      	cmp	r3, r2
   221c2:	f1c4 0436 	rsb	r4, r4, #54	@ 0x36
   221c6:	f6ff aeeb 	blt.w	21fa0 <_strtod_l+0x528>
   221ca:	2300      	movs	r3, #0
   221cc:	9310      	str	r3, [sp, #64]	@ 0x40
   221ce:	2501      	movs	r5, #1
   221d0:	e6f1      	b.n	21fb6 <_strtod_l+0x53e>
   221d2:	ed9f 8b57 	vldr	d8, [pc, #348]	@ 22330 <_strtod_l+0x8b8>
   221d6:	9a07      	ldr	r2, [sp, #28]
   221d8:	b10a      	cbz	r2, 221de <_strtod_l+0x766>
   221da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   221dc:	6013      	str	r3, [r2, #0]
   221de:	9b08      	ldr	r3, [sp, #32]
   221e0:	2b00      	cmp	r3, #0
   221e2:	f43f ad50 	beq.w	21c86 <_strtod_l+0x20e>
   221e6:	ee18 1a90 	vmov	r1, s17
   221ea:	ee18 2a10 	vmov	r2, s16
   221ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
   221f2:	ec43 2b18 	vmov	d8, r2, r3
   221f6:	e546      	b.n	21c86 <_strtod_l+0x20e>
   221f8:	2300      	movs	r3, #0
   221fa:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
   221fe:	930e      	str	r3, [sp, #56]	@ 0x38
   22200:	e565      	b.n	21cce <_strtod_l+0x256>
   22202:	2301      	movs	r3, #1
   22204:	930c      	str	r3, [sp, #48]	@ 0x30
   22206:	e55c      	b.n	21cc2 <_strtod_l+0x24a>
   22208:	f04f 0c01 	mov.w	ip, #1
   2220c:	f108 0302 	add.w	r3, r8, #2
   22210:	9317      	str	r3, [sp, #92]	@ 0x5c
   22212:	f898 4002 	ldrb.w	r4, [r8, #2]
   22216:	e59e      	b.n	21d56 <_strtod_l+0x2de>
   22218:	f04f 0c00 	mov.w	ip, #0
   2221c:	e7f6      	b.n	2220c <_strtod_l+0x794>
   2221e:	2500      	movs	r5, #0
   22220:	e58a      	b.n	21d38 <_strtod_l+0x2c0>
   22222:	2200      	movs	r2, #0
   22224:	9208      	str	r2, [sp, #32]
   22226:	1c79      	adds	r1, r7, #1
   22228:	9117      	str	r1, [sp, #92]	@ 0x5c
   2222a:	787a      	ldrb	r2, [r7, #1]
   2222c:	2a00      	cmp	r2, #0
   2222e:	f43f ad24 	beq.w	21c7a <_strtod_l+0x202>
   22232:	460f      	mov	r7, r1
   22234:	e496      	b.n	21b64 <_strtod_l+0xec>
   22236:	2201      	movs	r2, #1
   22238:	9208      	str	r2, [sp, #32]
   2223a:	e7f4      	b.n	22226 <_strtod_l+0x7ae>
   2223c:	2c45      	cmp	r4, #69	@ 0x45
   2223e:	f43f ad13 	beq.w	21c68 <_strtod_l+0x1f0>
   22242:	2301      	movs	r3, #1
   22244:	930c      	str	r3, [sp, #48]	@ 0x30
   22246:	e544      	b.n	21cd2 <_strtod_l+0x25a>
   22248:	f43f ae81 	beq.w	21f4e <_strtod_l+0x4d6>
   2224c:	4264      	negs	r4, r4
   2224e:	f014 020f 	ands.w	r2, r4, #15
   22252:	d00a      	beq.n	2226a <_strtod_l+0x7f2>
   22254:	4b3d      	ldr	r3, [pc, #244]	@ (2234c <_strtod_l+0x8d4>)
   22256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2225a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2225e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22262:	f7ea fa33 	bl	c6cc <__aeabi_ddiv>
   22266:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2226a:	1124      	asrs	r4, r4, #4
   2226c:	f43f ae6f 	beq.w	21f4e <_strtod_l+0x4d6>
   22270:	2c1f      	cmp	r4, #31
   22272:	dc40      	bgt.n	222f6 <_strtod_l+0x87e>
   22274:	f014 0310 	ands.w	r3, r4, #16
   22278:	bf18      	it	ne
   2227a:	236a      	movne	r3, #106	@ 0x6a
   2227c:	9309      	str	r3, [sp, #36]	@ 0x24
   2227e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   22282:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 22350 <_strtod_l+0x8d8>
   22286:	f04f 0c00 	mov.w	ip, #0
   2228a:	f014 0f01 	tst.w	r4, #1
   2228e:	4610      	mov	r0, r2
   22290:	4619      	mov	r1, r3
   22292:	d007      	beq.n	222a4 <_strtod_l+0x82c>
   22294:	e9d8 2300 	ldrd	r2, r3, [r8]
   22298:	f7ea f8ee 	bl	c478 <__aeabi_dmul>
   2229c:	f04f 0c01 	mov.w	ip, #1
   222a0:	4602      	mov	r2, r0
   222a2:	460b      	mov	r3, r1
   222a4:	1064      	asrs	r4, r4, #1
   222a6:	f108 0808 	add.w	r8, r8, #8
   222aa:	d1ee      	bne.n	2228a <_strtod_l+0x812>
   222ac:	f1bc 0f00 	cmp.w	ip, #0
   222b0:	d001      	beq.n	222b6 <_strtod_l+0x83e>
   222b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   222b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   222b8:	b1a3      	cbz	r3, 222e4 <_strtod_l+0x86c>
   222ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   222be:	f3c1 520a 	ubfx	r2, r1, #20, #11
   222c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
   222c6:	2b00      	cmp	r3, #0
   222c8:	dd0a      	ble.n	222e0 <_strtod_l+0x868>
   222ca:	2b1f      	cmp	r3, #31
   222cc:	f340 8327 	ble.w	2291e <_strtod_l+0xea6>
   222d0:	2000      	movs	r0, #0
   222d2:	2b34      	cmp	r3, #52	@ 0x34
   222d4:	9004      	str	r0, [sp, #16]
   222d6:	f340 838e 	ble.w	229f6 <_strtod_l+0xf7e>
   222da:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
   222de:	9305      	str	r3, [sp, #20]
   222e0:	236a      	movs	r3, #106	@ 0x6a
   222e2:	9309      	str	r3, [sp, #36]	@ 0x24
   222e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   222e8:	2200      	movs	r2, #0
   222ea:	2300      	movs	r3, #0
   222ec:	f7ea fb2c 	bl	c948 <__aeabi_dcmpeq>
   222f0:	2800      	cmp	r0, #0
   222f2:	f43f ae2e 	beq.w	21f52 <_strtod_l+0x4da>
   222f6:	2322      	movs	r3, #34	@ 0x22
   222f8:	ed9f 8b0d 	vldr	d8, [pc, #52]	@ 22330 <_strtod_l+0x8b8>
   222fc:	f8cb 3000 	str.w	r3, [fp]
   22300:	e769      	b.n	221d6 <_strtod_l+0x75e>
   22302:	3316      	adds	r3, #22
   22304:	f6ff adc0 	blt.w	21e88 <_strtod_l+0x410>
   22308:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
   2230c:	1a9a      	subs	r2, r3, r2
   2230e:	4b0f      	ldr	r3, [pc, #60]	@ (2234c <_strtod_l+0x8d4>)
   22310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   22314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22318:	e9d3 2300 	ldrd	r2, r3, [r3]
   2231c:	f7ea f9d6 	bl	c6cc <__aeabi_ddiv>
   22320:	ec41 0b18 	vmov	d8, r0, r1
   22324:	e757      	b.n	221d6 <_strtod_l+0x75e>
   22326:	bf00      	nop
   22328:	ffc00000 	.word	0xffc00000
   2232c:	41dfffff 	.word	0x41dfffff
	...
   22338:	3ff00000 	.word	0x3ff00000
   2233c:	3fe00000 	.word	0x3fe00000
   22340:	7fe00000 	.word	0x7fe00000
   22344:	7ff00000 	.word	0x7ff00000
   22348:	fffffc02 	.word	0xfffffc02
   2234c:	00031558 	.word	0x00031558
   22350:	000313d8 	.word	0x000313d8
   22354:	4bbe      	ldr	r3, [pc, #760]	@ (22650 <_strtod_l+0xbd8>)
   22356:	4620      	mov	r0, r4
   22358:	4629      	mov	r1, r5
   2235a:	2200      	movs	r2, #0
   2235c:	f7ea f88c 	bl	c478 <__aeabi_dmul>
   22360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   22362:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
   22366:	2b00      	cmp	r3, #0
   22368:	d163      	bne.n	22432 <_strtod_l+0x9ba>
   2236a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
   2236e:	900a      	str	r0, [sp, #40]	@ 0x28
   22370:	930b      	str	r3, [sp, #44]	@ 0x2c
   22372:	e695      	b.n	220a0 <_strtod_l+0x628>
   22374:	4651      	mov	r1, sl
   22376:	461a      	mov	r2, r3
   22378:	4658      	mov	r0, fp
   2237a:	f003 fc69 	bl	25c50 <__pow5mult>
   2237e:	4682      	mov	sl, r0
   22380:	2800      	cmp	r0, #0
   22382:	d042      	beq.n	2240a <_strtod_l+0x992>
   22384:	4601      	mov	r1, r0
   22386:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   22388:	4658      	mov	r0, fp
   2238a:	f003 fbab 	bl	25ae4 <__multiply>
   2238e:	2800      	cmp	r0, #0
   22390:	d03b      	beq.n	2240a <_strtod_l+0x992>
   22392:	900e      	str	r0, [sp, #56]	@ 0x38
   22394:	9918      	ldr	r1, [sp, #96]	@ 0x60
   22396:	4658      	mov	r0, fp
   22398:	f003 fa70 	bl	2587c <_Bfree>
   2239c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2239e:	9318      	str	r3, [sp, #96]	@ 0x60
   223a0:	2c00      	cmp	r4, #0
   223a2:	f77f ae20 	ble.w	21fe6 <_strtod_l+0x56e>
   223a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
   223a8:	4622      	mov	r2, r4
   223aa:	4658      	mov	r0, fp
   223ac:	f003 fcaa 	bl	25d04 <__lshift>
   223b0:	9018      	str	r0, [sp, #96]	@ 0x60
   223b2:	2800      	cmp	r0, #0
   223b4:	f47f ae17 	bne.w	21fe6 <_strtod_l+0x56e>
   223b8:	4605      	mov	r5, r0
   223ba:	ed9f 8b97 	vldr	d8, [pc, #604]	@ 22618 <_strtod_l+0xba0>
   223be:	2322      	movs	r3, #34	@ 0x22
   223c0:	f8cb 3000 	str.w	r3, [fp]
   223c4:	4629      	mov	r1, r5
   223c6:	4658      	mov	r0, fp
   223c8:	f003 fa58 	bl	2587c <_Bfree>
   223cc:	4639      	mov	r1, r7
   223ce:	4658      	mov	r0, fp
   223d0:	f003 fa54 	bl	2587c <_Bfree>
   223d4:	4651      	mov	r1, sl
   223d6:	4658      	mov	r0, fp
   223d8:	f003 fa50 	bl	2587c <_Bfree>
   223dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
   223de:	4658      	mov	r0, fp
   223e0:	f003 fa4c 	bl	2587c <_Bfree>
   223e4:	4649      	mov	r1, r9
   223e6:	4658      	mov	r0, fp
   223e8:	f003 fa48 	bl	2587c <_Bfree>
   223ec:	e6f3      	b.n	221d6 <_strtod_l+0x75e>
   223ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   223f0:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
   223f4:	1ad6      	subs	r6, r2, r3
   223f6:	e6dd      	b.n	221b4 <_strtod_l+0x73c>
   223f8:	4639      	mov	r1, r7
   223fa:	4632      	mov	r2, r6
   223fc:	4658      	mov	r0, fp
   223fe:	f003 fc81 	bl	25d04 <__lshift>
   22402:	4607      	mov	r7, r0
   22404:	2800      	cmp	r0, #0
   22406:	f47f adf5 	bne.w	21ff4 <_strtod_l+0x57c>
   2240a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   2240c:	e7d5      	b.n	223ba <_strtod_l+0x942>
   2240e:	4639      	mov	r1, r7
   22410:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   22412:	4658      	mov	r0, fp
   22414:	f003 fc1c 	bl	25c50 <__pow5mult>
   22418:	4607      	mov	r7, r0
   2241a:	2800      	cmp	r0, #0
   2241c:	f47f ade7 	bne.w	21fee <_strtod_l+0x576>
   22420:	e7f3      	b.n	2240a <_strtod_l+0x992>
   22422:	4a8c      	ldr	r2, [pc, #560]	@ (22654 <_strtod_l+0xbdc>)
   22424:	1ad3      	subs	r3, r2, r3
   22426:	2201      	movs	r2, #1
   22428:	fa02 f303 	lsl.w	r3, r2, r3
   2242c:	9310      	str	r3, [sp, #64]	@ 0x40
   2242e:	4615      	mov	r5, r2
   22430:	e5c1      	b.n	21fb6 <_strtod_l+0x53e>
   22432:	ed9d 7b10 	vldr	d7, [sp, #64]	@ 0x40
   22436:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
   2243a:	e631      	b.n	220a0 <_strtod_l+0x628>
   2243c:	ed9f 7b78 	vldr	d7, [pc, #480]	@ 22620 <_strtod_l+0xba8>
   22440:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
   22444:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   22448:	e62a      	b.n	220a0 <_strtod_l+0x628>
   2244a:	f1a6 7354 	sub.w	r3, r6, #55574528	@ 0x3500000
   2244e:	9305      	str	r3, [sp, #20]
   22450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   22454:	ec45 4b10 	vmov	d0, r4, r5
   22458:	f003 fdaa 	bl	25fb0 <__ulp>
   2245c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
   22460:	ec51 0b10 	vmov	r0, r1, d0
   22464:	f7ea f808 	bl	c478 <__aeabi_dmul>
   22468:	4622      	mov	r2, r4
   2246a:	462b      	mov	r3, r5
   2246c:	f7e9 fe4e 	bl	c10c <__adddf3>
   22470:	4a79      	ldr	r2, [pc, #484]	@ (22658 <_strtod_l+0xbe0>)
   22472:	4b7a      	ldr	r3, [pc, #488]	@ (2265c <_strtod_l+0xbe4>)
   22474:	400a      	ands	r2, r1
   22476:	429a      	cmp	r2, r3
   22478:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2247c:	d979      	bls.n	22572 <_strtod_l+0xafa>
   2247e:	ee18 2a90 	vmov	r2, s17
   22482:	f103 7354 	add.w	r3, r3, #55574528	@ 0x3500000
   22486:	429a      	cmp	r2, r3
   22488:	d103      	bne.n	22492 <_strtod_l+0xa1a>
   2248a:	ee18 3a10 	vmov	r3, s16
   2248e:	3301      	adds	r3, #1
   22490:	d0bb      	beq.n	2240a <_strtod_l+0x992>
   22492:	4c73      	ldr	r4, [pc, #460]	@ (22660 <_strtod_l+0xbe8>)
   22494:	f04f 33ff 	mov.w	r3, #4294967295
   22498:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2249c:	e64a      	b.n	22134 <_strtod_l+0x6bc>
   2249e:	ed9d 8b04 	vldr	d8, [sp, #16]
   224a2:	e698      	b.n	221d6 <_strtod_l+0x75e>
   224a4:	ed9f 7b60 	vldr	d7, [pc, #384]	@ 22628 <_strtod_l+0xbb0>
   224a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
   224ac:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 22620 <_strtod_l+0xba8>
   224b0:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   224b4:	e5f4      	b.n	220a0 <_strtod_l+0x628>
   224b6:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	@ 0x40
   224ba:	4628      	mov	r0, r5
   224bc:	4631      	mov	r1, r6
   224be:	f007 fe67 	bl	2a190 <__aeabi_d2lz>
   224c2:	f7e9 ffab 	bl	c41c <__aeabi_l2d>
   224c6:	4602      	mov	r2, r0
   224c8:	460b      	mov	r3, r1
   224ca:	4628      	mov	r0, r5
   224cc:	4631      	mov	r1, r6
   224ce:	f7e9 fe1b 	bl	c108 <__aeabi_dsub>
   224d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   224d4:	9e04      	ldr	r6, [sp, #16]
   224d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   224da:	4335      	orrs	r5, r6
   224dc:	4602      	mov	r2, r0
   224de:	460b      	mov	r3, r1
   224e0:	4325      	orrs	r5, r4
   224e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
   224e6:	d125      	bne.n	22534 <_strtod_l+0xabc>
   224e8:	a351      	add	r3, pc, #324	@ (adr r3, 22630 <_strtod_l+0xbb8>)
   224ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   224ee:	f7ea fa35 	bl	c95c <__aeabi_dcmplt>
   224f2:	2800      	cmp	r0, #0
   224f4:	f43f ae1e 	beq.w	22134 <_strtod_l+0x6bc>
   224f8:	ed9d 8b04 	vldr	d8, [sp, #16]
   224fc:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   224fe:	e761      	b.n	223c4 <_strtod_l+0x94c>
   22500:	9302      	str	r3, [sp, #8]
   22502:	9b08      	ldr	r3, [sp, #32]
   22504:	9301      	str	r3, [sp, #4]
   22506:	ab18      	add	r3, sp, #96	@ 0x60
   22508:	9300      	str	r3, [sp, #0]
   2250a:	4a56      	ldr	r2, [pc, #344]	@ (22664 <_strtod_l+0xbec>)
   2250c:	ab19      	add	r3, sp, #100	@ 0x64
   2250e:	a917      	add	r1, sp, #92	@ 0x5c
   22510:	4658      	mov	r0, fp
   22512:	f002 faf1 	bl	24af8 <__gethex>
   22516:	f010 050f 	ands.w	r5, r0, #15
   2251a:	4604      	mov	r4, r0
   2251c:	f43f ae59 	beq.w	221d2 <_strtod_l+0x75a>
   22520:	2d06      	cmp	r5, #6
   22522:	f040 80a9 	bne.w	22678 <_strtod_l+0xc00>
   22526:	3701      	adds	r7, #1
   22528:	2300      	movs	r3, #0
   2252a:	ed9f 8b43 	vldr	d8, [pc, #268]	@ 22638 <_strtod_l+0xbc0>
   2252e:	9717      	str	r7, [sp, #92]	@ 0x5c
   22530:	9308      	str	r3, [sp, #32]
   22532:	e650      	b.n	221d6 <_strtod_l+0x75e>
   22534:	a342      	add	r3, pc, #264	@ (adr r3, 22640 <_strtod_l+0xbc8>)
   22536:	e9d3 2300 	ldrd	r2, r3, [r3]
   2253a:	f7ea fa0f 	bl	c95c <__aeabi_dcmplt>
   2253e:	2800      	cmp	r0, #0
   22540:	d1da      	bne.n	224f8 <_strtod_l+0xa80>
   22542:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
   22546:	a340      	add	r3, pc, #256	@ (adr r3, 22648 <_strtod_l+0xbd0>)
   22548:	e9d3 2300 	ldrd	r2, r3, [r3]
   2254c:	f7ea fa24 	bl	c998 <__aeabi_dcmpgt>
   22550:	2800      	cmp	r0, #0
   22552:	f43f adef 	beq.w	22134 <_strtod_l+0x6bc>
   22556:	e7cf      	b.n	224f8 <_strtod_l+0xa80>
   22558:	9b04      	ldr	r3, [sp, #16]
   2255a:	2b01      	cmp	r3, #1
   2255c:	d1a2      	bne.n	224a4 <_strtod_l+0xa2c>
   2255e:	2e00      	cmp	r6, #0
   22560:	d1a0      	bne.n	224a4 <_strtod_l+0xa2c>
   22562:	9c18      	ldr	r4, [sp, #96]	@ 0x60
   22564:	2322      	movs	r3, #34	@ 0x22
   22566:	ed9f 8b34 	vldr	d8, [pc, #208]	@ 22638 <_strtod_l+0xbc0>
   2256a:	4625      	mov	r5, r4
   2256c:	f8cb 3000 	str.w	r3, [fp]
   22570:	e728      	b.n	223c4 <_strtod_l+0x94c>
   22572:	f101 7454 	add.w	r4, r1, #55574528	@ 0x3500000
   22576:	9405      	str	r4, [sp, #20]
   22578:	e5d5      	b.n	22126 <_strtod_l+0x6ae>
   2257a:	493b      	ldr	r1, [pc, #236]	@ (22668 <_strtod_l+0xbf0>)
   2257c:	2201      	movs	r2, #1
   2257e:	4638      	mov	r0, r7
   22580:	f001 ff78 	bl	24474 <strncmp>
   22584:	2800      	cmp	r0, #0
   22586:	f000 80ba 	beq.w	226fe <_strtod_l+0xc86>
   2258a:	f04f 0900 	mov.w	r9, #0
   2258e:	464e      	mov	r6, r9
   22590:	4648      	mov	r0, r9
   22592:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
   22596:	464d      	mov	r5, r9
   22598:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
   2259c:	46ca      	mov	sl, r9
   2259e:	f7ff bb92 	b.w	21cc6 <_strtod_l+0x24e>
   225a2:	f644 631f 	movw	r3, #19999	@ 0x4e1f
   225a6:	4299      	cmp	r1, r3
   225a8:	bfa8      	it	ge
   225aa:	4619      	movge	r1, r3
   225ac:	910e      	str	r1, [sp, #56]	@ 0x38
   225ae:	e405      	b.n	21dbc <_strtod_l+0x344>
   225b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
   225b2:	492e      	ldr	r1, [pc, #184]	@ (2266c <_strtod_l+0xbf4>)
   225b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   225b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   225bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   225c0:	f7e9 ff5a 	bl	c478 <__aeabi_dmul>
   225c4:	ec41 0b18 	vmov	d8, r0, r1
   225c8:	e605      	b.n	221d6 <_strtod_l+0x75e>
   225ca:	2c6e      	cmp	r4, #110	@ 0x6e
   225cc:	f43f ab92 	beq.w	21cf4 <_strtod_l+0x27c>
   225d0:	f7ff bb53 	b.w	21c7a <_strtod_l+0x202>
   225d4:	4926      	ldr	r1, [pc, #152]	@ (22670 <_strtod_l+0xbf8>)
   225d6:	a817      	add	r0, sp, #92	@ 0x5c
   225d8:	f002 fd54 	bl	25084 <__match>
   225dc:	2800      	cmp	r0, #0
   225de:	f43f ab4c 	beq.w	21c7a <_strtod_l+0x202>
   225e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   225e4:	4923      	ldr	r1, [pc, #140]	@ (22674 <_strtod_l+0xbfc>)
   225e6:	3b01      	subs	r3, #1
   225e8:	a817      	add	r0, sp, #92	@ 0x5c
   225ea:	9317      	str	r3, [sp, #92]	@ 0x5c
   225ec:	f002 fd4a 	bl	25084 <__match>
   225f0:	b910      	cbnz	r0, 225f8 <_strtod_l+0xb80>
   225f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   225f4:	3301      	adds	r3, #1
   225f6:	9317      	str	r3, [sp, #92]	@ 0x5c
   225f8:	ed9f 8b07 	vldr	d8, [pc, #28]	@ 22618 <_strtod_l+0xba0>
   225fc:	e5eb      	b.n	221d6 <_strtod_l+0x75e>
   225fe:	2322      	movs	r3, #34	@ 0x22
   22600:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 22618 <_strtod_l+0xba0>
   22604:	f8cb 3000 	str.w	r3, [fp]
   22608:	e5e5      	b.n	221d6 <_strtod_l+0x75e>
   2260a:	ed9d 7b10 	vldr	d7, [sp, #64]	@ 0x40
   2260e:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
   22612:	e56f      	b.n	220f4 <_strtod_l+0x67c>
   22614:	f3af 8000 	nop.w
   22618:	00000000 	.word	0x00000000
   2261c:	7ff00000 	.word	0x7ff00000
   22620:	00000000 	.word	0x00000000
   22624:	3ff00000 	.word	0x3ff00000
   22628:	00000000 	.word	0x00000000
   2262c:	bff00000 	.word	0xbff00000
   22630:	94a03595 	.word	0x94a03595
   22634:	3fcfffff 	.word	0x3fcfffff
	...
   22640:	94a03595 	.word	0x94a03595
   22644:	3fdfffff 	.word	0x3fdfffff
   22648:	35afe535 	.word	0x35afe535
   2264c:	3fe00000 	.word	0x3fe00000
   22650:	3fe00000 	.word	0x3fe00000
   22654:	fffffbe2 	.word	0xfffffbe2
   22658:	7ff00000 	.word	0x7ff00000
   2265c:	7c9fffff 	.word	0x7c9fffff
   22660:	7fefffff 	.word	0x7fefffff
   22664:	000313c0 	.word	0x000313c0
   22668:	0003096c 	.word	0x0003096c
   2266c:	00031558 	.word	0x00031558
   22670:	00030970 	.word	0x00030970
   22674:	00030974 	.word	0x00030974
   22678:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   2267a:	b13a      	cbz	r2, 2268c <_strtod_l+0xc14>
   2267c:	2135      	movs	r1, #53	@ 0x35
   2267e:	a81a      	add	r0, sp, #104	@ 0x68
   22680:	f003 fdb6 	bl	261f0 <__copybits>
   22684:	9918      	ldr	r1, [sp, #96]	@ 0x60
   22686:	4658      	mov	r0, fp
   22688:	f003 f8f8 	bl	2587c <_Bfree>
   2268c:	3d01      	subs	r5, #1
   2268e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   22690:	2d04      	cmp	r5, #4
   22692:	f200 81de 	bhi.w	22a52 <_strtod_l+0xfda>
   22696:	e8df f005 	tbb	[pc, r5]
   2269a:	2c03      	.short	0x2c03
   2269c:	1e29      	.short	0x1e29
   2269e:	03          	.byte	0x03
   2269f:	00          	.byte	0x00
   226a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   226a2:	9204      	str	r2, [sp, #16]
   226a4:	f203 4233 	addw	r2, r3, #1075	@ 0x433
   226a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   226aa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
   226ae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   226b2:	9305      	str	r3, [sp, #20]
   226b4:	05e2      	lsls	r2, r4, #23
   226b6:	d502      	bpl.n	226be <_strtod_l+0xc46>
   226b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
   226bc:	9305      	str	r3, [sp, #20]
   226be:	4ab6      	ldr	r2, [pc, #728]	@ (22998 <_strtod_l+0xf20>)
   226c0:	401a      	ands	r2, r3
   226c2:	ed9d 8b04 	vldr	d8, [sp, #16]
   226c6:	2a00      	cmp	r2, #0
   226c8:	f47f ad85 	bne.w	221d6 <_strtod_l+0x75e>
   226cc:	f001 ffe8 	bl	246a0 <__errno>
   226d0:	2322      	movs	r3, #34	@ 0x22
   226d2:	6003      	str	r3, [r0, #0]
   226d4:	e57f      	b.n	221d6 <_strtod_l+0x75e>
   226d6:	f04f 32ff 	mov.w	r2, #4294967295
   226da:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   226de:	e9cd 2304 	strd	r2, r3, [sp, #16]
   226e2:	05e3      	lsls	r3, r4, #23
   226e4:	f57f aedb 	bpl.w	2249e <_strtod_l+0xa26>
   226e8:	9b05      	ldr	r3, [sp, #20]
   226ea:	e7e5      	b.n	226b8 <_strtod_l+0xc40>
   226ec:	4baa      	ldr	r3, [pc, #680]	@ (22998 <_strtod_l+0xf20>)
   226ee:	9305      	str	r3, [sp, #20]
   226f0:	e7f7      	b.n	226e2 <_strtod_l+0xc6a>
   226f2:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
   226f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   226f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   226fc:	e7da      	b.n	226b4 <_strtod_l+0xc3c>
   226fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   22700:	4613      	mov	r3, r2
   22702:	3201      	adds	r2, #1
   22704:	9217      	str	r2, [sp, #92]	@ 0x5c
   22706:	785c      	ldrb	r4, [r3, #1]
   22708:	4606      	mov	r6, r0
   2270a:	4681      	mov	r9, r0
   2270c:	f7ff ba61 	b.w	21bd2 <_strtod_l+0x15a>
   22710:	2000      	movs	r0, #0
   22712:	f7ff ba6b 	b.w	21bec <_strtod_l+0x174>
   22716:	46aa      	mov	sl, r5
   22718:	900d      	str	r0, [sp, #52]	@ 0x34
   2271a:	f7ff ba7c 	b.w	21c16 <_strtod_l+0x19e>
   2271e:	ed9f 7b9a 	vldr	d7, [pc, #616]	@ 22988 <_strtod_l+0xf10>
   22722:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
   22726:	ed9f 7b9a 	vldr	d7, [pc, #616]	@ 22990 <_strtod_l+0xf18>
   2272a:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   2272e:	e4b7      	b.n	220a0 <_strtod_l+0x628>
   22730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   22732:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
   22736:	4999      	ldr	r1, [pc, #612]	@ (2299c <_strtod_l+0xf24>)
   22738:	46a8      	mov	r8, r5
   2273a:	f3c6 0213 	ubfx	r2, r6, #0, #20
   2273e:	2b00      	cmp	r3, #0
   22740:	d049      	beq.n	227d6 <_strtod_l+0xd5e>
   22742:	428a      	cmp	r2, r1
   22744:	f000 80f3 	beq.w	2292e <_strtod_l+0xeb6>
   22748:	f1bc 0f00 	cmp.w	ip, #0
   2274c:	d137      	bne.n	227be <_strtod_l+0xd46>
   2274e:	9b04      	ldr	r3, [sp, #16]
   22750:	421d      	tst	r5, r3
   22752:	d037      	beq.n	227c4 <_strtod_l+0xd4c>
   22754:	eeb0 0a48 	vmov.f32	s0, s16
   22758:	eef0 0a68 	vmov.f32	s1, s17
   2275c:	f003 fc28 	bl	25fb0 <__ulp>
   22760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   22762:	ec51 0b10 	vmov	r0, r1, d0
   22766:	2b00      	cmp	r3, #0
   22768:	f000 814d 	beq.w	22a06 <_strtod_l+0xf8e>
   2276c:	f3c6 530a 	ubfx	r3, r6, #20, #11
   22770:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
   22774:	2b00      	cmp	r3, #0
   22776:	dd07      	ble.n	22788 <_strtod_l+0xd10>
   22778:	051c      	lsls	r4, r3, #20
   2277a:	f104 537f 	add.w	r3, r4, #1069547520	@ 0x3fc00000
   2277e:	2200      	movs	r2, #0
   22780:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
   22784:	f7e9 fe78 	bl	c478 <__aeabi_dmul>
   22788:	4602      	mov	r2, r0
   2278a:	460b      	mov	r3, r1
   2278c:	ec51 0b18 	vmov	r0, r1, d8
   22790:	f7e9 fcbc 	bl	c10c <__adddf3>
   22794:	ec41 0b18 	vmov	d8, r0, r1
   22798:	4b81      	ldr	r3, [pc, #516]	@ (229a0 <_strtod_l+0xf28>)
   2279a:	ec51 0b18 	vmov	r0, r1, d8
   2279e:	2200      	movs	r2, #0
   227a0:	f7e9 fe6a 	bl	c478 <__aeabi_dmul>
   227a4:	ec41 0b18 	vmov	d8, r0, r1
   227a8:	4b7b      	ldr	r3, [pc, #492]	@ (22998 <_strtod_l+0xf20>)
   227aa:	ee18 2a90 	vmov	r2, s17
   227ae:	4013      	ands	r3, r2
   227b0:	2b00      	cmp	r3, #0
   227b2:	f47f aea3 	bne.w	224fc <_strtod_l+0xa84>
   227b6:	2322      	movs	r3, #34	@ 0x22
   227b8:	f8cb 3000 	str.w	r3, [fp]
   227bc:	e69e      	b.n	224fc <_strtod_l+0xa84>
   227be:	ea1c 0f06 	tst.w	ip, r6
   227c2:	d1c7      	bne.n	22754 <_strtod_l+0xcdc>
   227c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   227c6:	2b00      	cmp	r3, #0
   227c8:	d1e6      	bne.n	22798 <_strtod_l+0xd20>
   227ca:	e697      	b.n	224fc <_strtod_l+0xa84>
   227cc:	f102 7354 	add.w	r3, r2, #55574528	@ 0x3500000
   227d0:	9305      	str	r3, [sp, #20]
   227d2:	f7ff bbbc 	b.w	21f4e <_strtod_l+0x4d6>
   227d6:	2a00      	cmp	r2, #0
   227d8:	d164      	bne.n	228a4 <_strtod_l+0xe2c>
   227da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   227de:	2800      	cmp	r0, #0
   227e0:	f040 8096 	bne.w	22910 <_strtod_l+0xe98>
   227e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   227e6:	2b00      	cmp	r3, #0
   227e8:	f040 80f4 	bne.w	229d4 <_strtod_l+0xf5c>
   227ec:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
   227f0:	0d24      	lsrs	r4, r4, #20
   227f2:	0524      	lsls	r4, r4, #20
   227f4:	f5a4 1480 	sub.w	r4, r4, #1048576	@ 0x100000
   227f8:	ea6f 5314 	mvn.w	r3, r4, lsr #20
   227fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   22800:	9305      	str	r3, [sp, #20]
   22802:	f04f 33ff 	mov.w	r3, #4294967295
   22806:	9304      	str	r3, [sp, #16]
   22808:	ed9d 8b04 	vldr	d8, [sp, #16]
   2280c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   2280e:	e5d9      	b.n	223c4 <_strtod_l+0x94c>
   22810:	4964      	ldr	r1, [pc, #400]	@ (229a4 <_strtod_l+0xf2c>)
   22812:	a817      	add	r0, sp, #92	@ 0x5c
   22814:	aa1a      	add	r2, sp, #104	@ 0x68
   22816:	f002 fc51 	bl	250bc <__hexnan>
   2281a:	2805      	cmp	r0, #5
   2281c:	f47f aa75 	bne.w	21d0a <_strtod_l+0x292>
   22820:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   22822:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
   22826:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
   2282a:	9305      	str	r3, [sp, #20]
   2282c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   2282e:	9304      	str	r3, [sp, #16]
   22830:	ed9d 8b04 	vldr	d8, [sp, #16]
   22834:	e4cf      	b.n	221d6 <_strtod_l+0x75e>
   22836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2283a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2283c:	4303      	orrs	r3, r0
   2283e:	d1c1      	bne.n	227c4 <_strtod_l+0xd4c>
   22840:	f3c1 0313 	ubfx	r3, r1, #0, #20
   22844:	2b00      	cmp	r3, #0
   22846:	d1bd      	bne.n	227c4 <_strtod_l+0xd4c>
   22848:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
   2284c:	0d24      	lsrs	r4, r4, #20
   2284e:	0524      	lsls	r4, r4, #20
   22850:	f1b4 6fd6 	cmp.w	r4, #112197632	@ 0x6b00000
   22854:	4625      	mov	r5, r4
   22856:	d9b5      	bls.n	227c4 <_strtod_l+0xd4c>
   22858:	f8d9 3014 	ldr.w	r3, [r9, #20]
   2285c:	b91b      	cbnz	r3, 22866 <_strtod_l+0xdee>
   2285e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   22862:	2b01      	cmp	r3, #1
   22864:	ddae      	ble.n	227c4 <_strtod_l+0xd4c>
   22866:	4649      	mov	r1, r9
   22868:	2201      	movs	r2, #1
   2286a:	4658      	mov	r0, fp
   2286c:	f003 fa4a 	bl	25d04 <__lshift>
   22870:	4651      	mov	r1, sl
   22872:	4681      	mov	r9, r0
   22874:	f003 fabe 	bl	25df4 <__mcmp>
   22878:	2800      	cmp	r0, #0
   2287a:	dda3      	ble.n	227c4 <_strtod_l+0xd4c>
   2287c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2287e:	2b00      	cmp	r3, #0
   22880:	d0b8      	beq.n	227f4 <_strtod_l+0xd7c>
   22882:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
   22886:	ea6f 5315 	mvn.w	r3, r5, lsr #20
   2288a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   2288e:	9305      	str	r3, [sp, #20]
   22890:	f04f 33ff 	mov.w	r3, #4294967295
   22894:	9304      	str	r3, [sp, #16]
   22896:	ed9d 8b04 	vldr	d8, [sp, #16]
   2289a:	e77d      	b.n	22798 <_strtod_l+0xd20>
   2289c:	f04f 0900 	mov.w	r9, #0
   228a0:	f7ff bb37 	b.w	21f12 <_strtod_l+0x49a>
   228a4:	f1bc 0f00 	cmp.w	ip, #0
   228a8:	d12d      	bne.n	22906 <_strtod_l+0xe8e>
   228aa:	9b04      	ldr	r3, [sp, #16]
   228ac:	421d      	tst	r5, r3
   228ae:	d089      	beq.n	227c4 <_strtod_l+0xd4c>
   228b0:	eeb0 0a48 	vmov.f32	s0, s16
   228b4:	eef0 0a68 	vmov.f32	s1, s17
   228b8:	f003 fb7a 	bl	25fb0 <__ulp>
   228bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   228be:	ec51 0b10 	vmov	r0, r1, d0
   228c2:	2b00      	cmp	r3, #0
   228c4:	d072      	beq.n	229ac <_strtod_l+0xf34>
   228c6:	f3c6 530a 	ubfx	r3, r6, #20, #11
   228ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
   228ce:	2b00      	cmp	r3, #0
   228d0:	dd07      	ble.n	228e2 <_strtod_l+0xe6a>
   228d2:	051c      	lsls	r4, r3, #20
   228d4:	f104 537f 	add.w	r3, r4, #1069547520	@ 0x3fc00000
   228d8:	2200      	movs	r2, #0
   228da:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
   228de:	f7e9 fdcb 	bl	c478 <__aeabi_dmul>
   228e2:	4602      	mov	r2, r0
   228e4:	460b      	mov	r3, r1
   228e6:	ec51 0b18 	vmov	r0, r1, d8
   228ea:	f7e9 fc0d 	bl	c108 <__aeabi_dsub>
   228ee:	4602      	mov	r2, r0
   228f0:	460b      	mov	r3, r1
   228f2:	ec43 2b18 	vmov	d8, r2, r3
   228f6:	2200      	movs	r2, #0
   228f8:	2300      	movs	r3, #0
   228fa:	f7ea f825 	bl	c948 <__aeabi_dcmpeq>
   228fe:	2800      	cmp	r0, #0
   22900:	f43f af4a 	beq.w	22798 <_strtod_l+0xd20>
   22904:	e62d      	b.n	22562 <_strtod_l+0xaea>
   22906:	ea1c 0f06 	tst.w	ip, r6
   2290a:	f43f af5b 	beq.w	227c4 <_strtod_l+0xd4c>
   2290e:	e7cf      	b.n	228b0 <_strtod_l+0xe38>
   22910:	f1bc 0f00 	cmp.w	ip, #0
   22914:	d1f7      	bne.n	22906 <_strtod_l+0xe8e>
   22916:	4228      	tst	r0, r5
   22918:	f43f af54 	beq.w	227c4 <_strtod_l+0xd4c>
   2291c:	e7c8      	b.n	228b0 <_strtod_l+0xe38>
   2291e:	f04f 32ff 	mov.w	r2, #4294967295
   22922:	fa02 f303 	lsl.w	r3, r2, r3
   22926:	9a04      	ldr	r2, [sp, #16]
   22928:	401a      	ands	r2, r3
   2292a:	9204      	str	r2, [sp, #16]
   2292c:	e4d8      	b.n	222e0 <_strtod_l+0x868>
   2292e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   22930:	9904      	ldr	r1, [sp, #16]
   22932:	b1b3      	cbz	r3, 22962 <_strtod_l+0xeea>
   22934:	4a18      	ldr	r2, [pc, #96]	@ (22998 <_strtod_l+0xf20>)
   22936:	4032      	ands	r2, r6
   22938:	f1b2 6fd4 	cmp.w	r2, #111149056	@ 0x6a00000
   2293c:	d811      	bhi.n	22962 <_strtod_l+0xeea>
   2293e:	0d12      	lsrs	r2, r2, #20
   22940:	f1c2 026b 	rsb	r2, r2, #107	@ 0x6b
   22944:	f04f 30ff 	mov.w	r0, #4294967295
   22948:	fa00 f202 	lsl.w	r2, r0, r2
   2294c:	4291      	cmp	r1, r2
   2294e:	d00b      	beq.n	22968 <_strtod_l+0xef0>
   22950:	f1bc 0f00 	cmp.w	ip, #0
   22954:	f47f af33 	bne.w	227be <_strtod_l+0xd46>
   22958:	ea11 0f08 	tst.w	r1, r8
   2295c:	f43f af32 	beq.w	227c4 <_strtod_l+0xd4c>
   22960:	e6f8      	b.n	22754 <_strtod_l+0xcdc>
   22962:	f04f 32ff 	mov.w	r2, #4294967295
   22966:	e7f1      	b.n	2294c <_strtod_l+0xed4>
   22968:	4a0f      	ldr	r2, [pc, #60]	@ (229a8 <_strtod_l+0xf30>)
   2296a:	4296      	cmp	r6, r2
   2296c:	d055      	beq.n	22a1a <_strtod_l+0xfa2>
   2296e:	4a0a      	ldr	r2, [pc, #40]	@ (22998 <_strtod_l+0xf20>)
   22970:	4032      	ands	r2, r6
   22972:	f502 1380 	add.w	r3, r2, #1048576	@ 0x100000
   22976:	9305      	str	r3, [sp, #20]
   22978:	2300      	movs	r3, #0
   2297a:	9304      	str	r3, [sp, #16]
   2297c:	ed9d 8b04 	vldr	d8, [sp, #16]
   22980:	e720      	b.n	227c4 <_strtod_l+0xd4c>
   22982:	bf00      	nop
   22984:	f3af 8000 	nop.w
   22988:	00000000 	.word	0x00000000
   2298c:	bfe00000 	.word	0xbfe00000
   22990:	00000000 	.word	0x00000000
   22994:	3fe00000 	.word	0x3fe00000
   22998:	7ff00000 	.word	0x7ff00000
   2299c:	000fffff 	.word	0x000fffff
   229a0:	39500000 	.word	0x39500000
   229a4:	000313ac 	.word	0x000313ac
   229a8:	7fefffff 	.word	0x7fefffff
   229ac:	4602      	mov	r2, r0
   229ae:	460b      	mov	r3, r1
   229b0:	ec51 0b18 	vmov	r0, r1, d8
   229b4:	f7e9 fba8 	bl	c108 <__aeabi_dsub>
   229b8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
   229ba:	4602      	mov	r2, r0
   229bc:	460b      	mov	r3, r1
   229be:	ec43 2b18 	vmov	d8, r2, r3
   229c2:	2200      	movs	r2, #0
   229c4:	2300      	movs	r3, #0
   229c6:	4625      	mov	r5, r4
   229c8:	f7e9 ffbe 	bl	c948 <__aeabi_dcmpeq>
   229cc:	2800      	cmp	r0, #0
   229ce:	f43f acf9 	beq.w	223c4 <_strtod_l+0x94c>
   229d2:	e5c7      	b.n	22564 <_strtod_l+0xaec>
   229d4:	4d24      	ldr	r5, [pc, #144]	@ (22a68 <_strtod_l+0xff0>)
   229d6:	4035      	ands	r5, r6
   229d8:	f1b5 6fd6 	cmp.w	r5, #112197632	@ 0x6b00000
   229dc:	f63f af51 	bhi.w	22882 <_strtod_l+0xe0a>
   229e0:	f1b5 7f5c 	cmp.w	r5, #57671680	@ 0x3700000
   229e4:	f63f aed8 	bhi.w	22798 <_strtod_l+0xd20>
   229e8:	2322      	movs	r3, #34	@ 0x22
   229ea:	ed9f 8b1b 	vldr	d8, [pc, #108]	@ 22a58 <_strtod_l+0xfe0>
   229ee:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   229f0:	f8cb 3000 	str.w	r3, [fp]
   229f4:	e4e6      	b.n	223c4 <_strtod_l+0x94c>
   229f6:	f1c2 024b 	rsb	r2, r2, #75	@ 0x4b
   229fa:	f04f 33ff 	mov.w	r3, #4294967295
   229fe:	4093      	lsls	r3, r2
   22a00:	400b      	ands	r3, r1
   22a02:	9305      	str	r3, [sp, #20]
   22a04:	e46c      	b.n	222e0 <_strtod_l+0x868>
   22a06:	4602      	mov	r2, r0
   22a08:	460b      	mov	r3, r1
   22a0a:	ec51 0b18 	vmov	r0, r1, d8
   22a0e:	f7e9 fb7d 	bl	c10c <__adddf3>
   22a12:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   22a14:	ec41 0b18 	vmov	d8, r0, r1
   22a18:	e4d4      	b.n	223c4 <_strtod_l+0x94c>
   22a1a:	3101      	adds	r1, #1
   22a1c:	d1a7      	bne.n	2296e <_strtod_l+0xef6>
   22a1e:	2322      	movs	r3, #34	@ 0x22
   22a20:	ed9f 8b0f 	vldr	d8, [pc, #60]	@ 22a60 <_strtod_l+0xfe8>
   22a24:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   22a26:	f8cb 3000 	str.w	r3, [fp]
   22a2a:	e4cb      	b.n	223c4 <_strtod_l+0x94c>
   22a2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   22a2e:	2d08      	cmp	r5, #8
   22a30:	4403      	add	r3, r0
   22a32:	930d      	str	r3, [sp, #52]	@ 0x34
   22a34:	dc02      	bgt.n	22a3c <_strtod_l+0xfc4>
   22a36:	4665      	mov	r5, ip
   22a38:	f7ff b8e5 	b.w	21c06 <_strtod_l+0x18e>
   22a3c:	f1bc 0f10 	cmp.w	ip, #16
   22a40:	bfdc      	itt	le
   22a42:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   22a46:	eb02 0949 	addle.w	r9, r2, r9, lsl #1
   22a4a:	4665      	mov	r5, ip
   22a4c:	2000      	movs	r0, #0
   22a4e:	f7ff b8df 	b.w	21c10 <_strtod_l+0x198>
   22a52:	2300      	movs	r3, #0
   22a54:	e62e      	b.n	226b4 <_strtod_l+0xc3c>
   22a56:	bf00      	nop
	...
   22a64:	7ff00000 	.word	0x7ff00000
   22a68:	7ff00000 	.word	0x7ff00000

00022a6c <strtod>:
   22a6c:	b410      	push	{r4}
   22a6e:	4c05      	ldr	r4, [pc, #20]	@ (22a84 <strtod+0x18>)
   22a70:	4b05      	ldr	r3, [pc, #20]	@ (22a88 <strtod+0x1c>)
   22a72:	4684      	mov	ip, r0
   22a74:	460a      	mov	r2, r1
   22a76:	6820      	ldr	r0, [r4, #0]
   22a78:	f85d 4b04 	ldr.w	r4, [sp], #4
   22a7c:	4661      	mov	r1, ip
   22a7e:	f7fe bffb 	b.w	21a78 <_strtod_l>
   22a82:	bf00      	nop
   22a84:	100025a0 	.word	0x100025a0
   22a88:	10002434 	.word	0x10002434

00022a8c <strtof>:
   22a8c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   22a90:	4e2c      	ldr	r6, [pc, #176]	@ (22b44 <strtof+0xb8>)
   22a92:	4b2d      	ldr	r3, [pc, #180]	@ (22b48 <strtof+0xbc>)
   22a94:	4604      	mov	r4, r0
   22a96:	460a      	mov	r2, r1
   22a98:	ed2d 8b02 	vpush	{d8}
   22a9c:	4621      	mov	r1, r4
   22a9e:	6830      	ldr	r0, [r6, #0]
   22aa0:	f7fe ffea 	bl	21a78 <_strtod_l>
   22aa4:	ec55 4b10 	vmov	r4, r5, d0
   22aa8:	4622      	mov	r2, r4
   22aaa:	462b      	mov	r3, r5
   22aac:	4620      	mov	r0, r4
   22aae:	4629      	mov	r1, r5
   22ab0:	f7ea f952 	bl	cd58 <__aeabi_dcmpun>
   22ab4:	bbc0      	cbnz	r0, 22b28 <strtof+0x9c>
   22ab6:	4620      	mov	r0, r4
   22ab8:	4629      	mov	r1, r5
   22aba:	f7e9 ff97 	bl	c9ec <__aeabi_d2f>
   22abe:	ee08 0a10 	vmov	s16, r0
   22ac2:	eddf 7a22 	vldr	s15, [pc, #136]	@ 22b4c <strtof+0xc0>
   22ac6:	eeb0 7ac8 	vabs.f32	s14, s16
   22aca:	eeb4 7a67 	vcmp.f32	s14, s15
   22ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22ad2:	dd1a      	ble.n	22b0a <strtof+0x7e>
   22ad4:	f025 4900 	bic.w	r9, r5, #2147483648	@ 0x80000000
   22ad8:	4b1d      	ldr	r3, [pc, #116]	@ (22b50 <strtof+0xc4>)
   22ada:	f04f 32ff 	mov.w	r2, #4294967295
   22ade:	4620      	mov	r0, r4
   22ae0:	4649      	mov	r1, r9
   22ae2:	f7ea f939 	bl	cd58 <__aeabi_dcmpun>
   22ae6:	b938      	cbnz	r0, 22af8 <strtof+0x6c>
   22ae8:	4b19      	ldr	r3, [pc, #100]	@ (22b50 <strtof+0xc4>)
   22aea:	4620      	mov	r0, r4
   22aec:	4649      	mov	r1, r9
   22aee:	f04f 32ff 	mov.w	r2, #4294967295
   22af2:	f7e9 ff3d 	bl	c970 <__aeabi_dcmple>
   22af6:	b140      	cbz	r0, 22b0a <strtof+0x7e>
   22af8:	6833      	ldr	r3, [r6, #0]
   22afa:	2222      	movs	r2, #34	@ 0x22
   22afc:	601a      	str	r2, [r3, #0]
   22afe:	eeb0 0a48 	vmov.f32	s0, s16
   22b02:	ecbd 8b02 	vpop	{d8}
   22b06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22b0a:	ee18 3a10 	vmov	r3, s16
   22b0e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
   22b12:	d1f4      	bne.n	22afe <strtof+0x72>
   22b14:	4b0f      	ldr	r3, [pc, #60]	@ (22b54 <strtof+0xc8>)
   22b16:	402b      	ands	r3, r5
   22b18:	2b00      	cmp	r3, #0
   22b1a:	d1ed      	bne.n	22af8 <strtof+0x6c>
   22b1c:	eeb0 0a48 	vmov.f32	s0, s16
   22b20:	ecbd 8b02 	vpop	{d8}
   22b24:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22b28:	2d00      	cmp	r5, #0
   22b2a:	480b      	ldr	r0, [pc, #44]	@ (22b58 <strtof+0xcc>)
   22b2c:	da04      	bge.n	22b38 <strtof+0xac>
   22b2e:	f001 fe2b 	bl	24788 <nanf>
   22b32:	eeb1 8a40 	vneg.f32	s16, s0
   22b36:	e7e2      	b.n	22afe <strtof+0x72>
   22b38:	ecbd 8b02 	vpop	{d8}
   22b3c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   22b40:	f001 be22 	b.w	24788 <nanf>
   22b44:	100025a0 	.word	0x100025a0
   22b48:	10002434 	.word	0x10002434
   22b4c:	7f7fffff 	.word	0x7f7fffff
   22b50:	7fefffff 	.word	0x7fefffff
   22b54:	7ff00000 	.word	0x7ff00000
   22b58:	00030618 	.word	0x00030618

00022b5c <fiprintf>:
   22b5c:	b40e      	push	{r1, r2, r3}
   22b5e:	b510      	push	{r4, lr}
   22b60:	b083      	sub	sp, #12
   22b62:	ab05      	add	r3, sp, #20
   22b64:	4c06      	ldr	r4, [pc, #24]	@ (22b80 <fiprintf+0x24>)
   22b66:	f853 2b04 	ldr.w	r2, [r3], #4
   22b6a:	9301      	str	r3, [sp, #4]
   22b6c:	4601      	mov	r1, r0
   22b6e:	6820      	ldr	r0, [r4, #0]
   22b70:	f000 f808 	bl	22b84 <_vfiprintf_r>
   22b74:	b003      	add	sp, #12
   22b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22b7a:	b003      	add	sp, #12
   22b7c:	4770      	bx	lr
   22b7e:	bf00      	nop
   22b80:	100025a0 	.word	0x100025a0

00022b84 <_vfiprintf_r>:
   22b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b88:	b0c7      	sub	sp, #284	@ 0x11c
   22b8a:	af16      	add	r7, sp, #88	@ 0x58
   22b8c:	e9cd 2106 	strd	r2, r1, [sp, #24]
   22b90:	4683      	mov	fp, r0
   22b92:	2208      	movs	r2, #8
   22b94:	2100      	movs	r1, #0
   22b96:	4638      	mov	r0, r7
   22b98:	461c      	mov	r4, r3
   22b9a:	930c      	str	r3, [sp, #48]	@ 0x30
   22b9c:	f001 fbf8 	bl	24390 <memset>
   22ba0:	f1bb 0f00 	cmp.w	fp, #0
   22ba4:	d004      	beq.n	22bb0 <_vfiprintf_r+0x2c>
   22ba6:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
   22baa:	2b00      	cmp	r3, #0
   22bac:	f000 8627 	beq.w	237fe <_vfiprintf_r+0xc7a>
   22bb0:	9b07      	ldr	r3, [sp, #28]
   22bb2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
   22bb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   22bb8:	07d0      	lsls	r0, r2, #31
   22bba:	d402      	bmi.n	22bc2 <_vfiprintf_r+0x3e>
   22bbc:	0599      	lsls	r1, r3, #22
   22bbe:	f140 850a 	bpl.w	235d6 <_vfiprintf_r+0xa52>
   22bc2:	049e      	lsls	r6, r3, #18
   22bc4:	d406      	bmi.n	22bd4 <_vfiprintf_r+0x50>
   22bc6:	9907      	ldr	r1, [sp, #28]
   22bc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
   22bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
   22bd0:	818b      	strh	r3, [r1, #12]
   22bd2:	664a      	str	r2, [r1, #100]	@ 0x64
   22bd4:	0495      	lsls	r5, r2, #18
   22bd6:	f100 86c3 	bmi.w	23960 <_vfiprintf_r+0xddc>
   22bda:	9a07      	ldr	r2, [sp, #28]
   22bdc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   22be0:	0719      	lsls	r1, r3, #28
   22be2:	f140 80cb 	bpl.w	22d7c <_vfiprintf_r+0x1f8>
   22be6:	6912      	ldr	r2, [r2, #16]
   22be8:	2a00      	cmp	r2, #0
   22bea:	f000 80c7 	beq.w	22d7c <_vfiprintf_r+0x1f8>
   22bee:	f003 021a 	and.w	r2, r3, #26
   22bf2:	2a0a      	cmp	r2, #10
   22bf4:	f000 80d1 	beq.w	22d9a <_vfiprintf_r+0x216>
   22bf8:	2300      	movs	r3, #0
   22bfa:	469e      	mov	lr, r3
   22bfc:	e9cd ee0f 	strd	lr, lr, [sp, #60]	@ 0x3c
   22c00:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
   22c04:	f8df a8f8 	ldr.w	sl, [pc, #2296]	@ 23500 <_vfiprintf_r+0x97c>
   22c08:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
   22c0c:	ab1d      	add	r3, sp, #116	@ 0x74
   22c0e:	931a      	str	r3, [sp, #104]	@ 0x68
   22c10:	4699      	mov	r9, r3
   22c12:	f8cd e020 	str.w	lr, [sp, #32]
   22c16:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
   22c1a:	9d06      	ldr	r5, [sp, #24]
   22c1c:	f8da 40e4 	ldr.w	r4, [sl, #228]	@ 0xe4
   22c20:	f001 fce0 	bl	245e4 <__locale_mb_cur_max>
   22c24:	9700      	str	r7, [sp, #0]
   22c26:	4603      	mov	r3, r0
   22c28:	462a      	mov	r2, r5
   22c2a:	a914      	add	r1, sp, #80	@ 0x50
   22c2c:	4658      	mov	r0, fp
   22c2e:	47a0      	blx	r4
   22c30:	2800      	cmp	r0, #0
   22c32:	f000 80d1 	beq.w	22dd8 <_vfiprintf_r+0x254>
   22c36:	f2c0 80c7 	blt.w	22dc8 <_vfiprintf_r+0x244>
   22c3a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   22c3c:	2a25      	cmp	r2, #37	@ 0x25
   22c3e:	4603      	mov	r3, r0
   22c40:	d001      	beq.n	22c46 <_vfiprintf_r+0xc2>
   22c42:	441d      	add	r5, r3
   22c44:	e7ea      	b.n	22c1c <_vfiprintf_r+0x98>
   22c46:	9b06      	ldr	r3, [sp, #24]
   22c48:	1aee      	subs	r6, r5, r3
   22c4a:	4604      	mov	r4, r0
   22c4c:	f040 80c8 	bne.w	22de0 <_vfiprintf_r+0x25c>
   22c50:	2300      	movs	r3, #0
   22c52:	f04f 31ff 	mov.w	r1, #4294967295
   22c56:	786a      	ldrb	r2, [r5, #1]
   22c58:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   22c5c:	9309      	str	r3, [sp, #36]	@ 0x24
   22c5e:	1c6c      	adds	r4, r5, #1
   22c60:	9105      	str	r1, [sp, #20]
   22c62:	9303      	str	r3, [sp, #12]
   22c64:	3401      	adds	r4, #1
   22c66:	f1a2 0320 	sub.w	r3, r2, #32
   22c6a:	2b5a      	cmp	r3, #90	@ 0x5a
   22c6c:	f200 80f9 	bhi.w	22e62 <_vfiprintf_r+0x2de>
   22c70:	e8df f013 	tbh	[pc, r3, lsl #1]
   22c74:	00f70260 	.word	0x00f70260
   22c78:	025a00f7 	.word	0x025a00f7
   22c7c:	00f700f7 	.word	0x00f700f7
   22c80:	006a00f7 	.word	0x006a00f7
   22c84:	00f700f7 	.word	0x00f700f7
   22c88:	01f901e8 	.word	0x01f901e8
   22c8c:	01f300f7 	.word	0x01f300f7
   22c90:	00f70204 	.word	0x00f70204
   22c94:	005b01fe 	.word	0x005b01fe
   22c98:	005b005b 	.word	0x005b005b
   22c9c:	005b005b 	.word	0x005b005b
   22ca0:	005b005b 	.word	0x005b005b
   22ca4:	005b005b 	.word	0x005b005b
   22ca8:	00f700f7 	.word	0x00f700f7
   22cac:	00f700f7 	.word	0x00f700f7
   22cb0:	00f700f7 	.word	0x00f700f7
   22cb4:	00f700f7 	.word	0x00f700f7
   22cb8:	019d00f7 	.word	0x019d00f7
   22cbc:	00f7026a 	.word	0x00f7026a
   22cc0:	00f700f7 	.word	0x00f700f7
   22cc4:	00f700f7 	.word	0x00f700f7
   22cc8:	00f700f7 	.word	0x00f700f7
   22ccc:	00f700f7 	.word	0x00f700f7
   22cd0:	022000f7 	.word	0x022000f7
   22cd4:	00f700f7 	.word	0x00f700f7
   22cd8:	017600f7 	.word	0x017600f7
   22cdc:	028d00f7 	.word	0x028d00f7
   22ce0:	00f700f7 	.word	0x00f700f7
   22ce4:	00f704e7 	.word	0x00f704e7
   22ce8:	00f700f7 	.word	0x00f700f7
   22cec:	00f700f7 	.word	0x00f700f7
   22cf0:	00f700f7 	.word	0x00f700f7
   22cf4:	00f700f7 	.word	0x00f700f7
   22cf8:	019d00f7 	.word	0x019d00f7
   22cfc:	00f701c2 	.word	0x00f701c2
   22d00:	00f700f7 	.word	0x00f700f7
   22d04:	01c20284 	.word	0x01c20284
   22d08:	00f7007e 	.word	0x00f7007e
   22d0c:	00f7030a 	.word	0x00f7030a
   22d10:	04e402fb 	.word	0x04e402fb
   22d14:	007e02da 	.word	0x007e02da
   22d18:	017600f7 	.word	0x017600f7
   22d1c:	04e1007c 	.word	0x04e1007c
   22d20:	00f700f7 	.word	0x00f700f7
   22d24:	00f7050a 	.word	0x00f7050a
   22d28:	007c      	.short	0x007c
   22d2a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
   22d2e:	2100      	movs	r1, #0
   22d30:	f814 2b01 	ldrb.w	r2, [r4], #1
   22d34:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   22d38:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   22d3c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
   22d40:	2b09      	cmp	r3, #9
   22d42:	d9f5      	bls.n	22d30 <_vfiprintf_r+0x1ac>
   22d44:	9109      	str	r1, [sp, #36]	@ 0x24
   22d46:	e78e      	b.n	22c66 <_vfiprintf_r+0xe2>
   22d48:	4658      	mov	r0, fp
   22d4a:	f001 fc51 	bl	245f0 <_localeconv_r>
   22d4e:	6843      	ldr	r3, [r0, #4]
   22d50:	930f      	str	r3, [sp, #60]	@ 0x3c
   22d52:	4618      	mov	r0, r3
   22d54:	f7e9 ff94 	bl	cc80 <strlen>
   22d58:	9010      	str	r0, [sp, #64]	@ 0x40
   22d5a:	4605      	mov	r5, r0
   22d5c:	4658      	mov	r0, fp
   22d5e:	f001 fc47 	bl	245f0 <_localeconv_r>
   22d62:	6883      	ldr	r3, [r0, #8]
   22d64:	930e      	str	r3, [sp, #56]	@ 0x38
   22d66:	2d00      	cmp	r5, #0
   22d68:	f040 8456 	bne.w	23618 <_vfiprintf_r+0xa94>
   22d6c:	7822      	ldrb	r2, [r4, #0]
   22d6e:	e779      	b.n	22c64 <_vfiprintf_r+0xe0>
   22d70:	9b03      	ldr	r3, [sp, #12]
   22d72:	7822      	ldrb	r2, [r4, #0]
   22d74:	f043 0320 	orr.w	r3, r3, #32
   22d78:	9303      	str	r3, [sp, #12]
   22d7a:	e773      	b.n	22c64 <_vfiprintf_r+0xe0>
   22d7c:	9d07      	ldr	r5, [sp, #28]
   22d7e:	4658      	mov	r0, fp
   22d80:	4629      	mov	r1, r5
   22d82:	f001 fa23 	bl	241cc <__swsetup_r>
   22d86:	2800      	cmp	r0, #0
   22d88:	f040 861e 	bne.w	239c8 <_vfiprintf_r+0xe44>
   22d8c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   22d90:	f003 021a 	and.w	r2, r3, #26
   22d94:	2a0a      	cmp	r2, #10
   22d96:	f47f af2f 	bne.w	22bf8 <_vfiprintf_r+0x74>
   22d9a:	9907      	ldr	r1, [sp, #28]
   22d9c:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
   22da0:	2a00      	cmp	r2, #0
   22da2:	f6ff af29 	blt.w	22bf8 <_vfiprintf_r+0x74>
   22da6:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
   22da8:	07d6      	lsls	r6, r2, #31
   22daa:	d402      	bmi.n	22db2 <_vfiprintf_r+0x22e>
   22dac:	059d      	lsls	r5, r3, #22
   22dae:	f140 85cb 	bpl.w	23948 <_vfiprintf_r+0xdc4>
   22db2:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
   22db6:	4623      	mov	r3, r4
   22db8:	4658      	mov	r0, fp
   22dba:	f000 fe17 	bl	239ec <__sbprintf>
   22dbe:	9008      	str	r0, [sp, #32]
   22dc0:	9808      	ldr	r0, [sp, #32]
   22dc2:	b047      	add	sp, #284	@ 0x11c
   22dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22dc8:	2208      	movs	r2, #8
   22dca:	2100      	movs	r1, #0
   22dcc:	4638      	mov	r0, r7
   22dce:	f001 fadf 	bl	24390 <memset>
   22dd2:	2301      	movs	r3, #1
   22dd4:	441d      	add	r5, r3
   22dd6:	e721      	b.n	22c1c <_vfiprintf_r+0x98>
   22dd8:	9b06      	ldr	r3, [sp, #24]
   22dda:	1aee      	subs	r6, r5, r3
   22ddc:	4604      	mov	r4, r0
   22dde:	d012      	beq.n	22e06 <_vfiprintf_r+0x282>
   22de0:	9b06      	ldr	r3, [sp, #24]
   22de2:	e9c9 3600 	strd	r3, r6, [r9]
   22de6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   22de8:	4433      	add	r3, r6
   22dea:	931c      	str	r3, [sp, #112]	@ 0x70
   22dec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   22dee:	3301      	adds	r3, #1
   22df0:	2b07      	cmp	r3, #7
   22df2:	931b      	str	r3, [sp, #108]	@ 0x6c
   22df4:	dc11      	bgt.n	22e1a <_vfiprintf_r+0x296>
   22df6:	f109 0908 	add.w	r9, r9, #8
   22dfa:	9b08      	ldr	r3, [sp, #32]
   22dfc:	4433      	add	r3, r6
   22dfe:	9308      	str	r3, [sp, #32]
   22e00:	2c00      	cmp	r4, #0
   22e02:	f47f af25 	bne.w	22c50 <_vfiprintf_r+0xcc>
   22e06:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   22e08:	2b00      	cmp	r3, #0
   22e0a:	f040 85b8 	bne.w	2397e <_vfiprintf_r+0xdfa>
   22e0e:	9b07      	ldr	r3, [sp, #28]
   22e10:	2200      	movs	r2, #0
   22e12:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   22e16:	921b      	str	r2, [sp, #108]	@ 0x6c
   22e18:	e018      	b.n	22e4c <_vfiprintf_r+0x2c8>
   22e1a:	9907      	ldr	r1, [sp, #28]
   22e1c:	aa1a      	add	r2, sp, #104	@ 0x68
   22e1e:	4658      	mov	r0, fp
   22e20:	f000 fe24 	bl	23a6c <__sprint_r>
   22e24:	b978      	cbnz	r0, 22e46 <_vfiprintf_r+0x2c2>
   22e26:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   22e2a:	e7e6      	b.n	22dfa <_vfiprintf_r+0x276>
   22e2c:	9907      	ldr	r1, [sp, #28]
   22e2e:	aa1a      	add	r2, sp, #104	@ 0x68
   22e30:	4658      	mov	r0, fp
   22e32:	f000 fe1b 	bl	23a6c <__sprint_r>
   22e36:	2800      	cmp	r0, #0
   22e38:	d07e      	beq.n	22f38 <_vfiprintf_r+0x3b4>
   22e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   22e3c:	b11b      	cbz	r3, 22e46 <_vfiprintf_r+0x2c2>
   22e3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   22e40:	4658      	mov	r0, fp
   22e42:	f001 fd0b 	bl	2485c <_free_r>
   22e46:	9b07      	ldr	r3, [sp, #28]
   22e48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   22e4c:	9a07      	ldr	r2, [sp, #28]
   22e4e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
   22e50:	07d1      	lsls	r1, r2, #31
   22e52:	d57c      	bpl.n	22f4e <_vfiprintf_r+0x3ca>
   22e54:	065b      	lsls	r3, r3, #25
   22e56:	f100 858d 	bmi.w	23974 <_vfiprintf_r+0xdf0>
   22e5a:	9808      	ldr	r0, [sp, #32]
   22e5c:	b047      	add	sp, #284	@ 0x11c
   22e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e62:	9406      	str	r4, [sp, #24]
   22e64:	2a00      	cmp	r2, #0
   22e66:	d0ce      	beq.n	22e06 <_vfiprintf_r+0x282>
   22e68:	2300      	movs	r3, #0
   22e6a:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   22e6e:	2301      	movs	r3, #1
   22e70:	f88d 20b4 	strb.w	r2, [sp, #180]	@ 0xb4
   22e74:	9304      	str	r3, [sp, #16]
   22e76:	930a      	str	r3, [sp, #40]	@ 0x28
   22e78:	ac2d      	add	r4, sp, #180	@ 0xb4
   22e7a:	2300      	movs	r3, #0
   22e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
   22e7e:	9305      	str	r3, [sp, #20]
   22e80:	9803      	ldr	r0, [sp, #12]
   22e82:	f010 0884 	ands.w	r8, r0, #132	@ 0x84
   22e86:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   22e8a:	d105      	bne.n	22e98 <_vfiprintf_r+0x314>
   22e8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
   22e8e:	9d04      	ldr	r5, [sp, #16]
   22e90:	1b45      	subs	r5, r0, r5
   22e92:	2d00      	cmp	r5, #0
   22e94:	f300 82d6 	bgt.w	23444 <_vfiprintf_r+0x8c0>
   22e98:	f89d 004b 	ldrb.w	r0, [sp, #75]	@ 0x4b
   22e9c:	b178      	cbz	r0, 22ebe <_vfiprintf_r+0x33a>
   22e9e:	3201      	adds	r2, #1
   22ea0:	2001      	movs	r0, #1
   22ea2:	3101      	adds	r1, #1
   22ea4:	f8c9 0004 	str.w	r0, [r9, #4]
   22ea8:	2a07      	cmp	r2, #7
   22eaa:	f10d 004b 	add.w	r0, sp, #75	@ 0x4b
   22eae:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   22eb2:	f8c9 0000 	str.w	r0, [r9]
   22eb6:	f300 82fa 	bgt.w	234ae <_vfiprintf_r+0x92a>
   22eba:	f109 0908 	add.w	r9, r9, #8
   22ebe:	b17b      	cbz	r3, 22ee0 <_vfiprintf_r+0x35c>
   22ec0:	3201      	adds	r2, #1
   22ec2:	a813      	add	r0, sp, #76	@ 0x4c
   22ec4:	3102      	adds	r1, #2
   22ec6:	f8c9 0000 	str.w	r0, [r9]
   22eca:	2a07      	cmp	r2, #7
   22ecc:	f04f 0002 	mov.w	r0, #2
   22ed0:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   22ed4:	f8c9 0004 	str.w	r0, [r9, #4]
   22ed8:	f300 82f8 	bgt.w	234cc <_vfiprintf_r+0x948>
   22edc:	f109 0908 	add.w	r9, r9, #8
   22ee0:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
   22ee4:	f000 820c 	beq.w	23300 <_vfiprintf_r+0x77c>
   22ee8:	9b05      	ldr	r3, [sp, #20]
   22eea:	980a      	ldr	r0, [sp, #40]	@ 0x28
   22eec:	1a1d      	subs	r5, r3, r0
   22eee:	2d00      	cmp	r5, #0
   22ef0:	f300 824a 	bgt.w	23388 <_vfiprintf_r+0x804>
   22ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   22ef6:	f8c9 4000 	str.w	r4, [r9]
   22efa:	3201      	adds	r2, #1
   22efc:	4419      	add	r1, r3
   22efe:	2a07      	cmp	r2, #7
   22f00:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   22f04:	f8c9 3004 	str.w	r3, [r9, #4]
   22f08:	f300 8279 	bgt.w	233fe <_vfiprintf_r+0x87a>
   22f0c:	f109 0908 	add.w	r9, r9, #8
   22f10:	9b03      	ldr	r3, [sp, #12]
   22f12:	0758      	lsls	r0, r3, #29
   22f14:	d505      	bpl.n	22f22 <_vfiprintf_r+0x39e>
   22f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   22f18:	9a04      	ldr	r2, [sp, #16]
   22f1a:	1a9c      	subs	r4, r3, r2
   22f1c:	2c00      	cmp	r4, #0
   22f1e:	f300 82e2 	bgt.w	234e6 <_vfiprintf_r+0x962>
   22f22:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   22f26:	9804      	ldr	r0, [sp, #16]
   22f28:	4282      	cmp	r2, r0
   22f2a:	bfac      	ite	ge
   22f2c:	189b      	addge	r3, r3, r2
   22f2e:	181b      	addlt	r3, r3, r0
   22f30:	9308      	str	r3, [sp, #32]
   22f32:	2900      	cmp	r1, #0
   22f34:	f47f af7a 	bne.w	22e2c <_vfiprintf_r+0x2a8>
   22f38:	2300      	movs	r3, #0
   22f3a:	931b      	str	r3, [sp, #108]	@ 0x6c
   22f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   22f3e:	b11b      	cbz	r3, 22f48 <_vfiprintf_r+0x3c4>
   22f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   22f42:	4658      	mov	r0, fp
   22f44:	f001 fc8a 	bl	2485c <_free_r>
   22f48:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   22f4c:	e665      	b.n	22c1a <_vfiprintf_r+0x96>
   22f4e:	059a      	lsls	r2, r3, #22
   22f50:	d480      	bmi.n	22e54 <_vfiprintf_r+0x2d0>
   22f52:	9c07      	ldr	r4, [sp, #28]
   22f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   22f56:	f001 fbaf 	bl	246b8 <__retarget_lock_release_recursive>
   22f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22f5e:	e779      	b.n	22e54 <_vfiprintf_r+0x2d0>
   22f60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
   22f62:	9406      	str	r4, [sp, #24]
   22f64:	f856 4b04 	ldr.w	r4, [r6], #4
   22f68:	2300      	movs	r3, #0
   22f6a:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   22f6e:	2c00      	cmp	r4, #0
   22f70:	f000 845d 	beq.w	2382e <_vfiprintf_r+0xcaa>
   22f74:	2a53      	cmp	r2, #83	@ 0x53
   22f76:	f000 83a2 	beq.w	236be <_vfiprintf_r+0xb3a>
   22f7a:	9b03      	ldr	r3, [sp, #12]
   22f7c:	f013 0510 	ands.w	r5, r3, #16
   22f80:	f040 839d 	bne.w	236be <_vfiprintf_r+0xb3a>
   22f84:	9b05      	ldr	r3, [sp, #20]
   22f86:	2b00      	cmp	r3, #0
   22f88:	f2c0 84cd 	blt.w	23926 <_vfiprintf_r+0xda2>
   22f8c:	461a      	mov	r2, r3
   22f8e:	4629      	mov	r1, r5
   22f90:	4620      	mov	r0, r4
   22f92:	f7e9 fd7d 	bl	ca90 <memchr>
   22f96:	900b      	str	r0, [sp, #44]	@ 0x2c
   22f98:	2800      	cmp	r0, #0
   22f9a:	f000 8506 	beq.w	239aa <_vfiprintf_r+0xe26>
   22f9e:	1b03      	subs	r3, r0, r4
   22fa0:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
   22fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22fa8:	9304      	str	r3, [sp, #16]
   22faa:	f000 bc9d 	b.w	238e8 <_vfiprintf_r+0xd64>
   22fae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   22fb0:	9406      	str	r4, [sp, #24]
   22fb2:	2a43      	cmp	r2, #67	@ 0x43
   22fb4:	f103 0504 	add.w	r5, r3, #4
   22fb8:	d003      	beq.n	22fc2 <_vfiprintf_r+0x43e>
   22fba:	9b03      	ldr	r3, [sp, #12]
   22fbc:	06d8      	lsls	r0, r3, #27
   22fbe:	f140 8367 	bpl.w	23690 <_vfiprintf_r+0xb0c>
   22fc2:	2208      	movs	r2, #8
   22fc4:	2100      	movs	r1, #0
   22fc6:	a818      	add	r0, sp, #96	@ 0x60
   22fc8:	f001 f9e2 	bl	24390 <memset>
   22fcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   22fce:	ac2d      	add	r4, sp, #180	@ 0xb4
   22fd0:	681a      	ldr	r2, [r3, #0]
   22fd2:	4621      	mov	r1, r4
   22fd4:	ab18      	add	r3, sp, #96	@ 0x60
   22fd6:	4658      	mov	r0, fp
   22fd8:	f003 fb16 	bl	26608 <_wcrtomb_r>
   22fdc:	4603      	mov	r3, r0
   22fde:	3301      	adds	r3, #1
   22fe0:	900a      	str	r0, [sp, #40]	@ 0x28
   22fe2:	f000 84d6 	beq.w	23992 <_vfiprintf_r+0xe0e>
   22fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   22fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22fec:	9304      	str	r3, [sp, #16]
   22fee:	2300      	movs	r3, #0
   22ff0:	950c      	str	r5, [sp, #48]	@ 0x30
   22ff2:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   22ff6:	e740      	b.n	22e7a <_vfiprintf_r+0x2f6>
   22ff8:	9b03      	ldr	r3, [sp, #12]
   22ffa:	9406      	str	r4, [sp, #24]
   22ffc:	0699      	lsls	r1, r3, #26
   22ffe:	f140 80ac 	bpl.w	2315a <_vfiprintf_r+0x5d6>
   23002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23004:	3307      	adds	r3, #7
   23006:	f023 0307 	bic.w	r3, r3, #7
   2300a:	4619      	mov	r1, r3
   2300c:	685a      	ldr	r2, [r3, #4]
   2300e:	f851 3b08 	ldr.w	r3, [r1], #8
   23012:	910c      	str	r1, [sp, #48]	@ 0x30
   23014:	4611      	mov	r1, r2
   23016:	2a00      	cmp	r2, #0
   23018:	f2c0 813f 	blt.w	2329a <_vfiprintf_r+0x716>
   2301c:	9a05      	ldr	r2, [sp, #20]
   2301e:	2a00      	cmp	r2, #0
   23020:	f2c0 8148 	blt.w	232b4 <_vfiprintf_r+0x730>
   23024:	9a03      	ldr	r2, [sp, #12]
   23026:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   2302a:	9203      	str	r2, [sp, #12]
   2302c:	ea53 0201 	orrs.w	r2, r3, r1
   23030:	f040 8140 	bne.w	232b4 <_vfiprintf_r+0x730>
   23034:	9b05      	ldr	r3, [sp, #20]
   23036:	2b00      	cmp	r3, #0
   23038:	f040 848b 	bne.w	23952 <_vfiprintf_r+0xdce>
   2303c:	9304      	str	r3, [sp, #16]
   2303e:	930a      	str	r3, [sp, #40]	@ 0x28
   23040:	ac46      	add	r4, sp, #280	@ 0x118
   23042:	e149      	b.n	232d8 <_vfiprintf_r+0x754>
   23044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23046:	f853 2b04 	ldr.w	r2, [r3], #4
   2304a:	9209      	str	r2, [sp, #36]	@ 0x24
   2304c:	2a00      	cmp	r2, #0
   2304e:	f280 82ba 	bge.w	235c6 <_vfiprintf_r+0xa42>
   23052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   23054:	930c      	str	r3, [sp, #48]	@ 0x30
   23056:	4252      	negs	r2, r2
   23058:	9209      	str	r2, [sp, #36]	@ 0x24
   2305a:	9b03      	ldr	r3, [sp, #12]
   2305c:	7822      	ldrb	r2, [r4, #0]
   2305e:	f043 0304 	orr.w	r3, r3, #4
   23062:	9303      	str	r3, [sp, #12]
   23064:	e5fe      	b.n	22c64 <_vfiprintf_r+0xe0>
   23066:	232b      	movs	r3, #43	@ 0x2b
   23068:	7822      	ldrb	r2, [r4, #0]
   2306a:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   2306e:	e5f9      	b.n	22c64 <_vfiprintf_r+0xe0>
   23070:	9b03      	ldr	r3, [sp, #12]
   23072:	7822      	ldrb	r2, [r4, #0]
   23074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   23078:	9303      	str	r3, [sp, #12]
   2307a:	e5f3      	b.n	22c64 <_vfiprintf_r+0xe0>
   2307c:	4620      	mov	r0, r4
   2307e:	f810 2b01 	ldrb.w	r2, [r0], #1
   23082:	2a2a      	cmp	r2, #42	@ 0x2a
   23084:	f000 8495 	beq.w	239b2 <_vfiprintf_r+0xe2e>
   23088:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
   2308c:	2b09      	cmp	r3, #9
   2308e:	bf98      	it	ls
   23090:	2100      	movls	r1, #0
   23092:	f200 8460 	bhi.w	23956 <_vfiprintf_r+0xdd2>
   23096:	f810 2b01 	ldrb.w	r2, [r0], #1
   2309a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   2309e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   230a2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
   230a6:	2b09      	cmp	r3, #9
   230a8:	d9f5      	bls.n	23096 <_vfiprintf_r+0x512>
   230aa:	ea41 73e1 	orr.w	r3, r1, r1, asr #31
   230ae:	9305      	str	r3, [sp, #20]
   230b0:	4604      	mov	r4, r0
   230b2:	e5d8      	b.n	22c66 <_vfiprintf_r+0xe2>
   230b4:	9b03      	ldr	r3, [sp, #12]
   230b6:	9406      	str	r4, [sp, #24]
   230b8:	f043 0210 	orr.w	r2, r3, #16
   230bc:	f012 0120 	ands.w	r1, r2, #32
   230c0:	f000 8251 	beq.w	23566 <_vfiprintf_r+0x9e2>
   230c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   230c6:	3307      	adds	r3, #7
   230c8:	f023 0307 	bic.w	r3, r3, #7
   230cc:	4618      	mov	r0, r3
   230ce:	6859      	ldr	r1, [r3, #4]
   230d0:	f850 3b08 	ldr.w	r3, [r0], #8
   230d4:	900c      	str	r0, [sp, #48]	@ 0x30
   230d6:	f422 6480 	bic.w	r4, r2, #1024	@ 0x400
   230da:	9403      	str	r4, [sp, #12]
   230dc:	9c05      	ldr	r4, [sp, #20]
   230de:	2000      	movs	r0, #0
   230e0:	4284      	cmp	r4, r0
   230e2:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   230e6:	db7c      	blt.n	231e2 <_vfiprintf_r+0x65e>
   230e8:	ea53 0401 	orrs.w	r4, r3, r1
   230ec:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
   230f0:	f040 8381 	bne.w	237f6 <_vfiprintf_r+0xc72>
   230f4:	9c03      	ldr	r4, [sp, #12]
   230f6:	9203      	str	r2, [sp, #12]
   230f8:	9b05      	ldr	r3, [sp, #20]
   230fa:	2b00      	cmp	r3, #0
   230fc:	d169      	bne.n	231d2 <_vfiprintf_r+0x64e>
   230fe:	2800      	cmp	r0, #0
   23100:	f040 825c 	bne.w	235bc <_vfiprintf_r+0xa38>
   23104:	f014 0201 	ands.w	r2, r4, #1
   23108:	920a      	str	r2, [sp, #40]	@ 0x28
   2310a:	f000 8260 	beq.w	235ce <_vfiprintf_r+0xa4a>
   2310e:	2330      	movs	r3, #48	@ 0x30
   23110:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
   23114:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   23118:	9204      	str	r2, [sp, #16]
   2311a:	f20d 1417 	addw	r4, sp, #279	@ 0x117
   2311e:	2b00      	cmp	r3, #0
   23120:	f040 80df 	bne.w	232e2 <_vfiprintf_r+0x75e>
   23124:	930b      	str	r3, [sp, #44]	@ 0x2c
   23126:	e0e1      	b.n	232ec <_vfiprintf_r+0x768>
   23128:	9b03      	ldr	r3, [sp, #12]
   2312a:	7822      	ldrb	r2, [r4, #0]
   2312c:	f043 0301 	orr.w	r3, r3, #1
   23130:	9303      	str	r3, [sp, #12]
   23132:	e597      	b.n	22c64 <_vfiprintf_r+0xe0>
   23134:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   23138:	7822      	ldrb	r2, [r4, #0]
   2313a:	2b00      	cmp	r3, #0
   2313c:	f47f ad92 	bne.w	22c64 <_vfiprintf_r+0xe0>
   23140:	2320      	movs	r3, #32
   23142:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   23146:	e58d      	b.n	22c64 <_vfiprintf_r+0xe0>
   23148:	9b03      	ldr	r3, [sp, #12]
   2314a:	9406      	str	r4, [sp, #24]
   2314c:	f043 0310 	orr.w	r3, r3, #16
   23150:	9303      	str	r3, [sp, #12]
   23152:	9b03      	ldr	r3, [sp, #12]
   23154:	0699      	lsls	r1, r3, #26
   23156:	f53f af54 	bmi.w	23002 <_vfiprintf_r+0x47e>
   2315a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2315c:	f852 3b04 	ldr.w	r3, [r2], #4
   23160:	920c      	str	r2, [sp, #48]	@ 0x30
   23162:	9a03      	ldr	r2, [sp, #12]
   23164:	06d2      	lsls	r2, r2, #27
   23166:	f100 8243 	bmi.w	235f0 <_vfiprintf_r+0xa6c>
   2316a:	9a03      	ldr	r2, [sp, #12]
   2316c:	0656      	lsls	r6, r2, #25
   2316e:	f140 823b 	bpl.w	235e8 <_vfiprintf_r+0xa64>
   23172:	f343 31c0 	sbfx	r1, r3, #15, #1
   23176:	460a      	mov	r2, r1
   23178:	b21b      	sxth	r3, r3
   2317a:	e74c      	b.n	23016 <_vfiprintf_r+0x492>
   2317c:	7822      	ldrb	r2, [r4, #0]
   2317e:	9b03      	ldr	r3, [sp, #12]
   23180:	2a68      	cmp	r2, #104	@ 0x68
   23182:	f000 8295 	beq.w	236b0 <_vfiprintf_r+0xb2c>
   23186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2318a:	9303      	str	r3, [sp, #12]
   2318c:	e56a      	b.n	22c64 <_vfiprintf_r+0xe0>
   2318e:	9b03      	ldr	r3, [sp, #12]
   23190:	9406      	str	r4, [sp, #24]
   23192:	f043 0410 	orr.w	r4, r3, #16
   23196:	f014 0120 	ands.w	r1, r4, #32
   2319a:	f000 81f3 	beq.w	23584 <_vfiprintf_r+0xa00>
   2319e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   231a0:	3307      	adds	r3, #7
   231a2:	f023 0307 	bic.w	r3, r3, #7
   231a6:	461a      	mov	r2, r3
   231a8:	6859      	ldr	r1, [r3, #4]
   231aa:	f852 3b08 	ldr.w	r3, [r2], #8
   231ae:	920c      	str	r2, [sp, #48]	@ 0x30
   231b0:	2200      	movs	r2, #0
   231b2:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
   231b6:	9a05      	ldr	r2, [sp, #20]
   231b8:	2a00      	cmp	r2, #0
   231ba:	f2c0 831e 	blt.w	237fa <_vfiprintf_r+0xc76>
   231be:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
   231c2:	9203      	str	r2, [sp, #12]
   231c4:	ea53 0201 	orrs.w	r2, r3, r1
   231c8:	d174      	bne.n	232b4 <_vfiprintf_r+0x730>
   231ca:	9b05      	ldr	r3, [sp, #20]
   231cc:	2001      	movs	r0, #1
   231ce:	2b00      	cmp	r3, #0
   231d0:	d095      	beq.n	230fe <_vfiprintf_r+0x57a>
   231d2:	2801      	cmp	r0, #1
   231d4:	f000 83bd 	beq.w	23952 <_vfiprintf_r+0xdce>
   231d8:	2300      	movs	r3, #0
   231da:	2802      	cmp	r0, #2
   231dc:	4619      	mov	r1, r3
   231de:	f000 811a 	beq.w	23416 <_vfiprintf_r+0x892>
   231e2:	ac46      	add	r4, sp, #280	@ 0x118
   231e4:	f003 0207 	and.w	r2, r3, #7
   231e8:	08db      	lsrs	r3, r3, #3
   231ea:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
   231ee:	08c9      	lsrs	r1, r1, #3
   231f0:	3230      	adds	r2, #48	@ 0x30
   231f2:	ea53 0501 	orrs.w	r5, r3, r1
   231f6:	4620      	mov	r0, r4
   231f8:	f804 2d01 	strb.w	r2, [r4, #-1]!
   231fc:	d1f2      	bne.n	231e4 <_vfiprintf_r+0x660>
   231fe:	9b03      	ldr	r3, [sp, #12]
   23200:	07dd      	lsls	r5, r3, #31
   23202:	f140 8116 	bpl.w	23432 <_vfiprintf_r+0x8ae>
   23206:	2a30      	cmp	r2, #48	@ 0x30
   23208:	f000 8113 	beq.w	23432 <_vfiprintf_r+0x8ae>
   2320c:	2330      	movs	r3, #48	@ 0x30
   2320e:	9a05      	ldr	r2, [sp, #20]
   23210:	f804 3c01 	strb.w	r3, [r4, #-1]
   23214:	3802      	subs	r0, #2
   23216:	ab46      	add	r3, sp, #280	@ 0x118
   23218:	1a1b      	subs	r3, r3, r0
   2321a:	429a      	cmp	r2, r3
   2321c:	bfb8      	it	lt
   2321e:	461a      	movlt	r2, r3
   23220:	930a      	str	r3, [sp, #40]	@ 0x28
   23222:	4604      	mov	r4, r0
   23224:	9204      	str	r2, [sp, #16]
   23226:	e057      	b.n	232d8 <_vfiprintf_r+0x754>
   23228:	9b03      	ldr	r3, [sp, #12]
   2322a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2322c:	9406      	str	r4, [sp, #24]
   2322e:	f043 0302 	orr.w	r3, r3, #2
   23232:	9303      	str	r3, [sp, #12]
   23234:	f852 3b04 	ldr.w	r3, [r2], #4
   23238:	920c      	str	r2, [sp, #48]	@ 0x30
   2323a:	f647 0230 	movw	r2, #30768	@ 0x7830
   2323e:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
   23242:	4aad      	ldr	r2, [pc, #692]	@ (234f8 <_vfiprintf_r+0x974>)
   23244:	920d      	str	r2, [sp, #52]	@ 0x34
   23246:	2100      	movs	r1, #0
   23248:	2200      	movs	r2, #0
   2324a:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
   2324e:	9a05      	ldr	r2, [sp, #20]
   23250:	2a00      	cmp	r2, #0
   23252:	f2c0 80e0 	blt.w	23416 <_vfiprintf_r+0x892>
   23256:	9c03      	ldr	r4, [sp, #12]
   23258:	ea53 0001 	orrs.w	r0, r3, r1
   2325c:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
   23260:	9203      	str	r2, [sp, #12]
   23262:	f040 80d8 	bne.w	23416 <_vfiprintf_r+0x892>
   23266:	2002      	movs	r0, #2
   23268:	e746      	b.n	230f8 <_vfiprintf_r+0x574>
   2326a:	9b03      	ldr	r3, [sp, #12]
   2326c:	9406      	str	r4, [sp, #24]
   2326e:	069c      	lsls	r4, r3, #26
   23270:	f140 81c1 	bpl.w	235f6 <_vfiprintf_r+0xa72>
   23274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23276:	9a08      	ldr	r2, [sp, #32]
   23278:	681b      	ldr	r3, [r3, #0]
   2327a:	601a      	str	r2, [r3, #0]
   2327c:	17d2      	asrs	r2, r2, #31
   2327e:	605a      	str	r2, [r3, #4]
   23280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23282:	3304      	adds	r3, #4
   23284:	930c      	str	r3, [sp, #48]	@ 0x30
   23286:	e4c8      	b.n	22c1a <_vfiprintf_r+0x96>
   23288:	7822      	ldrb	r2, [r4, #0]
   2328a:	9b03      	ldr	r3, [sp, #12]
   2328c:	2a6c      	cmp	r2, #108	@ 0x6c
   2328e:	f000 8208 	beq.w	236a2 <_vfiprintf_r+0xb1e>
   23292:	f043 0310 	orr.w	r3, r3, #16
   23296:	9303      	str	r3, [sp, #12]
   23298:	e4e4      	b.n	22c64 <_vfiprintf_r+0xe0>
   2329a:	222d      	movs	r2, #45	@ 0x2d
   2329c:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
   232a0:	9a05      	ldr	r2, [sp, #20]
   232a2:	425b      	negs	r3, r3
   232a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   232a8:	2a00      	cmp	r2, #0
   232aa:	db03      	blt.n	232b4 <_vfiprintf_r+0x730>
   232ac:	9a03      	ldr	r2, [sp, #12]
   232ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   232b2:	9203      	str	r2, [sp, #12]
   232b4:	2b0a      	cmp	r3, #10
   232b6:	f171 0200 	sbcs.w	r2, r1, #0
   232ba:	f080 8239 	bcs.w	23730 <_vfiprintf_r+0xbac>
   232be:	3330      	adds	r3, #48	@ 0x30
   232c0:	b2db      	uxtb	r3, r3
   232c2:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
   232c6:	9b05      	ldr	r3, [sp, #20]
   232c8:	2b01      	cmp	r3, #1
   232ca:	bfb8      	it	lt
   232cc:	2301      	movlt	r3, #1
   232ce:	9304      	str	r3, [sp, #16]
   232d0:	2301      	movs	r3, #1
   232d2:	930a      	str	r3, [sp, #40]	@ 0x28
   232d4:	f20d 1417 	addw	r4, sp, #279	@ 0x117
   232d8:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   232dc:	2b00      	cmp	r3, #0
   232de:	f43f af21 	beq.w	23124 <_vfiprintf_r+0x5a0>
   232e2:	2300      	movs	r3, #0
   232e4:	930b      	str	r3, [sp, #44]	@ 0x2c
   232e6:	9b04      	ldr	r3, [sp, #16]
   232e8:	3301      	adds	r3, #1
   232ea:	9304      	str	r3, [sp, #16]
   232ec:	9b03      	ldr	r3, [sp, #12]
   232ee:	f013 0302 	ands.w	r3, r3, #2
   232f2:	f43f adc5 	beq.w	22e80 <_vfiprintf_r+0x2fc>
   232f6:	9b04      	ldr	r3, [sp, #16]
   232f8:	3302      	adds	r3, #2
   232fa:	9304      	str	r3, [sp, #16]
   232fc:	2302      	movs	r3, #2
   232fe:	e5bf      	b.n	22e80 <_vfiprintf_r+0x2fc>
   23300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   23302:	9804      	ldr	r0, [sp, #16]
   23304:	1a1d      	subs	r5, r3, r0
   23306:	2d00      	cmp	r5, #0
   23308:	f77f adee 	ble.w	22ee8 <_vfiprintf_r+0x364>
   2330c:	2d10      	cmp	r5, #16
   2330e:	f8df 81ec 	ldr.w	r8, [pc, #492]	@ 234fc <_vfiprintf_r+0x978>
   23312:	dd26      	ble.n	23362 <_vfiprintf_r+0x7de>
   23314:	4640      	mov	r0, r8
   23316:	464b      	mov	r3, r9
   23318:	46a0      	mov	r8, r4
   2331a:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2331e:	2610      	movs	r6, #16
   23320:	4604      	mov	r4, r0
   23322:	e004      	b.n	2332e <_vfiprintf_r+0x7aa>
   23324:	3d10      	subs	r5, #16
   23326:	2d10      	cmp	r5, #16
   23328:	f103 0308 	add.w	r3, r3, #8
   2332c:	dd15      	ble.n	2335a <_vfiprintf_r+0x7d6>
   2332e:	3201      	adds	r2, #1
   23330:	3110      	adds	r1, #16
   23332:	2a07      	cmp	r2, #7
   23334:	e9c3 4600 	strd	r4, r6, [r3]
   23338:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   2333c:	ddf2      	ble.n	23324 <_vfiprintf_r+0x7a0>
   2333e:	aa1a      	add	r2, sp, #104	@ 0x68
   23340:	4649      	mov	r1, r9
   23342:	4658      	mov	r0, fp
   23344:	f000 fb92 	bl	23a6c <__sprint_r>
   23348:	2800      	cmp	r0, #0
   2334a:	f47f ad76 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   2334e:	3d10      	subs	r5, #16
   23350:	2d10      	cmp	r5, #16
   23352:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   23356:	ab1d      	add	r3, sp, #116	@ 0x74
   23358:	dce9      	bgt.n	2332e <_vfiprintf_r+0x7aa>
   2335a:	4699      	mov	r9, r3
   2335c:	4623      	mov	r3, r4
   2335e:	4644      	mov	r4, r8
   23360:	4698      	mov	r8, r3
   23362:	3201      	adds	r2, #1
   23364:	4429      	add	r1, r5
   23366:	2a07      	cmp	r2, #7
   23368:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   2336c:	f8c9 8000 	str.w	r8, [r9]
   23370:	f8c9 5004 	str.w	r5, [r9, #4]
   23374:	f300 8248 	bgt.w	23808 <_vfiprintf_r+0xc84>
   23378:	9b05      	ldr	r3, [sp, #20]
   2337a:	980a      	ldr	r0, [sp, #40]	@ 0x28
   2337c:	1a1d      	subs	r5, r3, r0
   2337e:	2d00      	cmp	r5, #0
   23380:	f109 0908 	add.w	r9, r9, #8
   23384:	f77f adb6 	ble.w	22ef4 <_vfiprintf_r+0x370>
   23388:	2d10      	cmp	r5, #16
   2338a:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 234fc <_vfiprintf_r+0x978>
   2338e:	dd28      	ble.n	233e2 <_vfiprintf_r+0x85e>
   23390:	464b      	mov	r3, r9
   23392:	2610      	movs	r6, #16
   23394:	46a9      	mov	r9, r5
   23396:	4625      	mov	r5, r4
   23398:	9c07      	ldr	r4, [sp, #28]
   2339a:	e006      	b.n	233aa <_vfiprintf_r+0x826>
   2339c:	f1a9 0910 	sub.w	r9, r9, #16
   233a0:	f1b9 0f10 	cmp.w	r9, #16
   233a4:	f103 0308 	add.w	r3, r3, #8
   233a8:	dd18      	ble.n	233dc <_vfiprintf_r+0x858>
   233aa:	3201      	adds	r2, #1
   233ac:	4853      	ldr	r0, [pc, #332]	@ (234fc <_vfiprintf_r+0x978>)
   233ae:	3110      	adds	r1, #16
   233b0:	2a07      	cmp	r2, #7
   233b2:	e9c3 0600 	strd	r0, r6, [r3]
   233b6:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   233ba:	ddef      	ble.n	2339c <_vfiprintf_r+0x818>
   233bc:	aa1a      	add	r2, sp, #104	@ 0x68
   233be:	4621      	mov	r1, r4
   233c0:	4658      	mov	r0, fp
   233c2:	f000 fb53 	bl	23a6c <__sprint_r>
   233c6:	2800      	cmp	r0, #0
   233c8:	f47f ad37 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   233cc:	f1a9 0910 	sub.w	r9, r9, #16
   233d0:	f1b9 0f10 	cmp.w	r9, #16
   233d4:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   233d8:	ab1d      	add	r3, sp, #116	@ 0x74
   233da:	dce6      	bgt.n	233aa <_vfiprintf_r+0x826>
   233dc:	462c      	mov	r4, r5
   233de:	464d      	mov	r5, r9
   233e0:	4699      	mov	r9, r3
   233e2:	3201      	adds	r2, #1
   233e4:	4429      	add	r1, r5
   233e6:	2a07      	cmp	r2, #7
   233e8:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   233ec:	f8c9 8000 	str.w	r8, [r9]
   233f0:	f8c9 5004 	str.w	r5, [r9, #4]
   233f4:	f300 80d5 	bgt.w	235a2 <_vfiprintf_r+0xa1e>
   233f8:	f109 0908 	add.w	r9, r9, #8
   233fc:	e57a      	b.n	22ef4 <_vfiprintf_r+0x370>
   233fe:	9907      	ldr	r1, [sp, #28]
   23400:	aa1a      	add	r2, sp, #104	@ 0x68
   23402:	4658      	mov	r0, fp
   23404:	f000 fb32 	bl	23a6c <__sprint_r>
   23408:	2800      	cmp	r0, #0
   2340a:	f47f ad16 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   2340e:	991c      	ldr	r1, [sp, #112]	@ 0x70
   23410:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   23414:	e57c      	b.n	22f10 <_vfiprintf_r+0x38c>
   23416:	980d      	ldr	r0, [sp, #52]	@ 0x34
   23418:	ac46      	add	r4, sp, #280	@ 0x118
   2341a:	f003 020f 	and.w	r2, r3, #15
   2341e:	091b      	lsrs	r3, r3, #4
   23420:	5c82      	ldrb	r2, [r0, r2]
   23422:	f804 2d01 	strb.w	r2, [r4, #-1]!
   23426:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
   2342a:	0909      	lsrs	r1, r1, #4
   2342c:	ea53 0201 	orrs.w	r2, r3, r1
   23430:	d1f3      	bne.n	2341a <_vfiprintf_r+0x896>
   23432:	9a05      	ldr	r2, [sp, #20]
   23434:	ab46      	add	r3, sp, #280	@ 0x118
   23436:	1b1b      	subs	r3, r3, r4
   23438:	429a      	cmp	r2, r3
   2343a:	bfb8      	it	lt
   2343c:	461a      	movlt	r2, r3
   2343e:	930a      	str	r3, [sp, #40]	@ 0x28
   23440:	9204      	str	r2, [sp, #16]
   23442:	e749      	b.n	232d8 <_vfiprintf_r+0x754>
   23444:	2d10      	cmp	r5, #16
   23446:	4e2f      	ldr	r6, [pc, #188]	@ (23504 <_vfiprintf_r+0x980>)
   23448:	dd23      	ble.n	23492 <_vfiprintf_r+0x90e>
   2344a:	4648      	mov	r0, r9
   2344c:	9311      	str	r3, [sp, #68]	@ 0x44
   2344e:	46a1      	mov	r9, r4
   23450:	9c07      	ldr	r4, [sp, #28]
   23452:	e004      	b.n	2345e <_vfiprintf_r+0x8da>
   23454:	3d10      	subs	r5, #16
   23456:	2d10      	cmp	r5, #16
   23458:	f100 0008 	add.w	r0, r0, #8
   2345c:	dd16      	ble.n	2348c <_vfiprintf_r+0x908>
   2345e:	3201      	adds	r2, #1
   23460:	3110      	adds	r1, #16
   23462:	2310      	movs	r3, #16
   23464:	2a07      	cmp	r2, #7
   23466:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   2346a:	6006      	str	r6, [r0, #0]
   2346c:	6043      	str	r3, [r0, #4]
   2346e:	ddf1      	ble.n	23454 <_vfiprintf_r+0x8d0>
   23470:	aa1a      	add	r2, sp, #104	@ 0x68
   23472:	4621      	mov	r1, r4
   23474:	4658      	mov	r0, fp
   23476:	f000 faf9 	bl	23a6c <__sprint_r>
   2347a:	2800      	cmp	r0, #0
   2347c:	f47f acdd 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   23480:	3d10      	subs	r5, #16
   23482:	2d10      	cmp	r5, #16
   23484:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   23488:	a81d      	add	r0, sp, #116	@ 0x74
   2348a:	dce8      	bgt.n	2345e <_vfiprintf_r+0x8da>
   2348c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   2348e:	464c      	mov	r4, r9
   23490:	4681      	mov	r9, r0
   23492:	3201      	adds	r2, #1
   23494:	4429      	add	r1, r5
   23496:	2a07      	cmp	r2, #7
   23498:	e9cd 211b 	strd	r2, r1, [sp, #108]	@ 0x6c
   2349c:	f8c9 6000 	str.w	r6, [r9]
   234a0:	f8c9 5004 	str.w	r5, [r9, #4]
   234a4:	f300 8197 	bgt.w	237d6 <_vfiprintf_r+0xc52>
   234a8:	f109 0908 	add.w	r9, r9, #8
   234ac:	e4f4      	b.n	22e98 <_vfiprintf_r+0x314>
   234ae:	9907      	ldr	r1, [sp, #28]
   234b0:	9311      	str	r3, [sp, #68]	@ 0x44
   234b2:	aa1a      	add	r2, sp, #104	@ 0x68
   234b4:	4658      	mov	r0, fp
   234b6:	f000 fad9 	bl	23a6c <__sprint_r>
   234ba:	2800      	cmp	r0, #0
   234bc:	f47f acbd 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   234c0:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   234c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   234c6:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   234ca:	e4f8      	b.n	22ebe <_vfiprintf_r+0x33a>
   234cc:	9907      	ldr	r1, [sp, #28]
   234ce:	aa1a      	add	r2, sp, #104	@ 0x68
   234d0:	4658      	mov	r0, fp
   234d2:	f000 facb 	bl	23a6c <__sprint_r>
   234d6:	2800      	cmp	r0, #0
   234d8:	f47f acaf 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   234dc:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   234e0:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   234e4:	e4fc      	b.n	22ee0 <_vfiprintf_r+0x35c>
   234e6:	2c10      	cmp	r4, #16
   234e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   234ea:	4e06      	ldr	r6, [pc, #24]	@ (23504 <_vfiprintf_r+0x980>)
   234ec:	dd28      	ble.n	23540 <_vfiprintf_r+0x9bc>
   234ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
   234f2:	2510      	movs	r5, #16
   234f4:	e00d      	b.n	23512 <_vfiprintf_r+0x98e>
   234f6:	bf00      	nop
   234f8:	00030994 	.word	0x00030994
   234fc:	00031400 	.word	0x00031400
   23500:	10002434 	.word	0x10002434
   23504:	00031410 	.word	0x00031410
   23508:	3c10      	subs	r4, #16
   2350a:	2c10      	cmp	r4, #16
   2350c:	f109 0908 	add.w	r9, r9, #8
   23510:	dd16      	ble.n	23540 <_vfiprintf_r+0x9bc>
   23512:	3301      	adds	r3, #1
   23514:	3110      	adds	r1, #16
   23516:	2b07      	cmp	r3, #7
   23518:	e9c9 6500 	strd	r6, r5, [r9]
   2351c:	e9cd 311b 	strd	r3, r1, [sp, #108]	@ 0x6c
   23520:	ddf2      	ble.n	23508 <_vfiprintf_r+0x984>
   23522:	aa1a      	add	r2, sp, #104	@ 0x68
   23524:	4641      	mov	r1, r8
   23526:	4658      	mov	r0, fp
   23528:	f000 faa0 	bl	23a6c <__sprint_r>
   2352c:	2800      	cmp	r0, #0
   2352e:	f47f ac84 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   23532:	3c10      	subs	r4, #16
   23534:	2c10      	cmp	r4, #16
   23536:	e9dd 311b 	ldrd	r3, r1, [sp, #108]	@ 0x6c
   2353a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   2353e:	dce8      	bgt.n	23512 <_vfiprintf_r+0x98e>
   23540:	3301      	adds	r3, #1
   23542:	4421      	add	r1, r4
   23544:	2b07      	cmp	r3, #7
   23546:	e9c9 6400 	strd	r6, r4, [r9]
   2354a:	e9cd 311b 	strd	r3, r1, [sp, #108]	@ 0x6c
   2354e:	f77f ace8 	ble.w	22f22 <_vfiprintf_r+0x39e>
   23552:	9907      	ldr	r1, [sp, #28]
   23554:	aa1a      	add	r2, sp, #104	@ 0x68
   23556:	4658      	mov	r0, fp
   23558:	f000 fa88 	bl	23a6c <__sprint_r>
   2355c:	2800      	cmp	r0, #0
   2355e:	f47f ac6c 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   23562:	991c      	ldr	r1, [sp, #112]	@ 0x70
   23564:	e4dd      	b.n	22f22 <_vfiprintf_r+0x39e>
   23566:	980c      	ldr	r0, [sp, #48]	@ 0x30
   23568:	f850 3b04 	ldr.w	r3, [r0], #4
   2356c:	900c      	str	r0, [sp, #48]	@ 0x30
   2356e:	f012 0010 	ands.w	r0, r2, #16
   23572:	f47f adb0 	bne.w	230d6 <_vfiprintf_r+0x552>
   23576:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
   2357a:	f000 8162 	beq.w	23842 <_vfiprintf_r+0xcbe>
   2357e:	b29b      	uxth	r3, r3
   23580:	4601      	mov	r1, r0
   23582:	e5a8      	b.n	230d6 <_vfiprintf_r+0x552>
   23584:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   23586:	f852 3b04 	ldr.w	r3, [r2], #4
   2358a:	920c      	str	r2, [sp, #48]	@ 0x30
   2358c:	f014 0210 	ands.w	r2, r4, #16
   23590:	f47f ae0e 	bne.w	231b0 <_vfiprintf_r+0x62c>
   23594:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
   23598:	f000 8159 	beq.w	2384e <_vfiprintf_r+0xcca>
   2359c:	b29b      	uxth	r3, r3
   2359e:	4611      	mov	r1, r2
   235a0:	e606      	b.n	231b0 <_vfiprintf_r+0x62c>
   235a2:	9907      	ldr	r1, [sp, #28]
   235a4:	aa1a      	add	r2, sp, #104	@ 0x68
   235a6:	4658      	mov	r0, fp
   235a8:	f000 fa60 	bl	23a6c <__sprint_r>
   235ac:	2800      	cmp	r0, #0
   235ae:	f47f ac44 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   235b2:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   235b6:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   235ba:	e49b      	b.n	22ef4 <_vfiprintf_r+0x370>
   235bc:	9b05      	ldr	r3, [sp, #20]
   235be:	9304      	str	r3, [sp, #16]
   235c0:	930a      	str	r3, [sp, #40]	@ 0x28
   235c2:	ac46      	add	r4, sp, #280	@ 0x118
   235c4:	e688      	b.n	232d8 <_vfiprintf_r+0x754>
   235c6:	7822      	ldrb	r2, [r4, #0]
   235c8:	930c      	str	r3, [sp, #48]	@ 0x30
   235ca:	f7ff bb4b 	b.w	22c64 <_vfiprintf_r+0xe0>
   235ce:	9b05      	ldr	r3, [sp, #20]
   235d0:	9304      	str	r3, [sp, #16]
   235d2:	ac46      	add	r4, sp, #280	@ 0x118
   235d4:	e680      	b.n	232d8 <_vfiprintf_r+0x754>
   235d6:	9d07      	ldr	r5, [sp, #28]
   235d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
   235da:	f001 f86b 	bl	246b4 <__retarget_lock_acquire_recursive>
   235de:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   235e2:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
   235e4:	f7ff baed 	b.w	22bc2 <_vfiprintf_r+0x3e>
   235e8:	9a03      	ldr	r2, [sp, #12]
   235ea:	0595      	lsls	r5, r2, #22
   235ec:	f100 8187 	bmi.w	238fe <_vfiprintf_r+0xd7a>
   235f0:	17d9      	asrs	r1, r3, #31
   235f2:	460a      	mov	r2, r1
   235f4:	e50f      	b.n	23016 <_vfiprintf_r+0x492>
   235f6:	9b03      	ldr	r3, [sp, #12]
   235f8:	06d8      	lsls	r0, r3, #27
   235fa:	f100 8113 	bmi.w	23824 <_vfiprintf_r+0xca0>
   235fe:	9b03      	ldr	r3, [sp, #12]
   23600:	0659      	lsls	r1, r3, #25
   23602:	f100 818b 	bmi.w	2391c <_vfiprintf_r+0xd98>
   23606:	9b03      	ldr	r3, [sp, #12]
   23608:	059a      	lsls	r2, r3, #22
   2360a:	f140 810b 	bpl.w	23824 <_vfiprintf_r+0xca0>
   2360e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23610:	9a08      	ldr	r2, [sp, #32]
   23612:	681b      	ldr	r3, [r3, #0]
   23614:	701a      	strb	r2, [r3, #0]
   23616:	e633      	b.n	23280 <_vfiprintf_r+0x6fc>
   23618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2361a:	7822      	ldrb	r2, [r4, #0]
   2361c:	2b00      	cmp	r3, #0
   2361e:	f43f ab21 	beq.w	22c64 <_vfiprintf_r+0xe0>
   23622:	781b      	ldrb	r3, [r3, #0]
   23624:	2b00      	cmp	r3, #0
   23626:	f43f ab1d 	beq.w	22c64 <_vfiprintf_r+0xe0>
   2362a:	9b03      	ldr	r3, [sp, #12]
   2362c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
   23630:	9303      	str	r3, [sp, #12]
   23632:	f7ff bb17 	b.w	22c64 <_vfiprintf_r+0xe0>
   23636:	9406      	str	r4, [sp, #24]
   23638:	9c03      	ldr	r4, [sp, #12]
   2363a:	e5ac      	b.n	23196 <_vfiprintf_r+0x612>
   2363c:	9a03      	ldr	r2, [sp, #12]
   2363e:	9406      	str	r4, [sp, #24]
   23640:	e53c      	b.n	230bc <_vfiprintf_r+0x538>
   23642:	4bb2      	ldr	r3, [pc, #712]	@ (2390c <_vfiprintf_r+0xd88>)
   23644:	9406      	str	r4, [sp, #24]
   23646:	930d      	str	r3, [sp, #52]	@ 0x34
   23648:	9b03      	ldr	r3, [sp, #12]
   2364a:	f013 0120 	ands.w	r1, r3, #32
   2364e:	d05f      	beq.n	23710 <_vfiprintf_r+0xb8c>
   23650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23652:	3307      	adds	r3, #7
   23654:	f023 0307 	bic.w	r3, r3, #7
   23658:	4618      	mov	r0, r3
   2365a:	6859      	ldr	r1, [r3, #4]
   2365c:	f850 3b08 	ldr.w	r3, [r0], #8
   23660:	900c      	str	r0, [sp, #48]	@ 0x30
   23662:	9c03      	ldr	r4, [sp, #12]
   23664:	07e6      	lsls	r6, r4, #31
   23666:	d50a      	bpl.n	2367e <_vfiprintf_r+0xafa>
   23668:	ea53 0001 	orrs.w	r0, r3, r1
   2366c:	d007      	beq.n	2367e <_vfiprintf_r+0xafa>
   2366e:	f88d 204d 	strb.w	r2, [sp, #77]	@ 0x4d
   23672:	f044 0202 	orr.w	r2, r4, #2
   23676:	9203      	str	r2, [sp, #12]
   23678:	2230      	movs	r2, #48	@ 0x30
   2367a:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
   2367e:	9a03      	ldr	r2, [sp, #12]
   23680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
   23684:	9203      	str	r2, [sp, #12]
   23686:	e5df      	b.n	23248 <_vfiprintf_r+0x6c4>
   23688:	4ba1      	ldr	r3, [pc, #644]	@ (23910 <_vfiprintf_r+0xd8c>)
   2368a:	9406      	str	r4, [sp, #24]
   2368c:	930d      	str	r3, [sp, #52]	@ 0x34
   2368e:	e7db      	b.n	23648 <_vfiprintf_r+0xac4>
   23690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23692:	681b      	ldr	r3, [r3, #0]
   23694:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
   23698:	2301      	movs	r3, #1
   2369a:	9304      	str	r3, [sp, #16]
   2369c:	930a      	str	r3, [sp, #40]	@ 0x28
   2369e:	ac2d      	add	r4, sp, #180	@ 0xb4
   236a0:	e4a5      	b.n	22fee <_vfiprintf_r+0x46a>
   236a2:	f043 0320 	orr.w	r3, r3, #32
   236a6:	7862      	ldrb	r2, [r4, #1]
   236a8:	9303      	str	r3, [sp, #12]
   236aa:	3401      	adds	r4, #1
   236ac:	f7ff bada 	b.w	22c64 <_vfiprintf_r+0xe0>
   236b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   236b4:	7862      	ldrb	r2, [r4, #1]
   236b6:	9303      	str	r3, [sp, #12]
   236b8:	3401      	adds	r4, #1
   236ba:	f7ff bad3 	b.w	22c64 <_vfiprintf_r+0xe0>
   236be:	2208      	movs	r2, #8
   236c0:	2100      	movs	r1, #0
   236c2:	a818      	add	r0, sp, #96	@ 0x60
   236c4:	9415      	str	r4, [sp, #84]	@ 0x54
   236c6:	f000 fe63 	bl	24390 <memset>
   236ca:	9b05      	ldr	r3, [sp, #20]
   236cc:	2b00      	cmp	r3, #0
   236ce:	f2c0 80dc 	blt.w	2388a <_vfiprintf_r+0xd06>
   236d2:	2500      	movs	r5, #0
   236d4:	f8cd 9010 	str.w	r9, [sp, #16]
   236d8:	46a8      	mov	r8, r5
   236da:	4699      	mov	r9, r3
   236dc:	e00e      	b.n	236fc <_vfiprintf_r+0xb78>
   236de:	a92d      	add	r1, sp, #180	@ 0xb4
   236e0:	4658      	mov	r0, fp
   236e2:	f002 ff91 	bl	26608 <_wcrtomb_r>
   236e6:	1c43      	adds	r3, r0, #1
   236e8:	4440      	add	r0, r8
   236ea:	f000 8152 	beq.w	23992 <_vfiprintf_r+0xe0e>
   236ee:	4548      	cmp	r0, r9
   236f0:	dc09      	bgt.n	23706 <_vfiprintf_r+0xb82>
   236f2:	f105 0504 	add.w	r5, r5, #4
   236f6:	f000 8154 	beq.w	239a2 <_vfiprintf_r+0xe1e>
   236fa:	4680      	mov	r8, r0
   236fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   236fe:	5952      	ldr	r2, [r2, r5]
   23700:	ab18      	add	r3, sp, #96	@ 0x60
   23702:	2a00      	cmp	r2, #0
   23704:	d1eb      	bne.n	236de <_vfiprintf_r+0xb5a>
   23706:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2370a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
   2370e:	e0c9      	b.n	238a4 <_vfiprintf_r+0xd20>
   23710:	980c      	ldr	r0, [sp, #48]	@ 0x30
   23712:	f850 3b04 	ldr.w	r3, [r0], #4
   23716:	900c      	str	r0, [sp, #48]	@ 0x30
   23718:	9803      	ldr	r0, [sp, #12]
   2371a:	f010 0010 	ands.w	r0, r0, #16
   2371e:	d1a0      	bne.n	23662 <_vfiprintf_r+0xade>
   23720:	9903      	ldr	r1, [sp, #12]
   23722:	f011 0440 	ands.w	r4, r1, #64	@ 0x40
   23726:	f000 8099 	beq.w	2385c <_vfiprintf_r+0xcd8>
   2372a:	b29b      	uxth	r3, r3
   2372c:	4601      	mov	r1, r0
   2372e:	e798      	b.n	23662 <_vfiprintf_r+0xade>
   23730:	9a03      	ldr	r2, [sp, #12]
   23732:	f8cd 9010 	str.w	r9, [sp, #16]
   23736:	ac46      	add	r4, sp, #280	@ 0x118
   23738:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
   2373c:	46a1      	mov	r9, r4
   2373e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
   23742:	4e74      	ldr	r6, [pc, #464]	@ (23914 <_vfiprintf_r+0xd90>)
   23744:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
   23748:	f04f 0c00 	mov.w	ip, #0
   2374c:	4614      	mov	r4, r2
   2374e:	e005      	b.n	2375c <_vfiprintf_r+0xbd8>
   23750:	2b0a      	cmp	r3, #10
   23752:	f171 0100 	sbcs.w	r1, r1, #0
   23756:	d336      	bcc.n	237c6 <_vfiprintf_r+0xc42>
   23758:	4643      	mov	r3, r8
   2375a:	4629      	mov	r1, r5
   2375c:	185a      	adds	r2, r3, r1
   2375e:	f142 0200 	adc.w	r2, r2, #0
   23762:	fba6 0502 	umull	r0, r5, r6, r2
   23766:	f025 0003 	bic.w	r0, r5, #3
   2376a:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   2376e:	1a12      	subs	r2, r2, r0
   23770:	1a98      	subs	r0, r3, r2
   23772:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
   23776:	f161 0e00 	sbc.w	lr, r1, #0
   2377a:	fb05 f500 	mul.w	r5, r5, r0
   2377e:	fb06 550e 	mla	r5, r6, lr, r5
   23782:	fba0 8006 	umull	r8, r0, r0, r6
   23786:	4405      	add	r5, r0
   23788:	f008 0e01 	and.w	lr, r8, #1
   2378c:	2005      	movs	r0, #5
   2378e:	fbae 0e00 	umull	r0, lr, lr, r0
   23792:	1880      	adds	r0, r0, r2
   23794:	ea4f 0858 	mov.w	r8, r8, lsr #1
   23798:	3030      	adds	r0, #48	@ 0x30
   2379a:	f809 0c01 	strb.w	r0, [r9, #-1]
   2379e:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
   237a2:	f10c 0c01 	add.w	ip, ip, #1
   237a6:	f109 39ff 	add.w	r9, r9, #4294967295
   237aa:	086d      	lsrs	r5, r5, #1
   237ac:	2c00      	cmp	r4, #0
   237ae:	d0cf      	beq.n	23750 <_vfiprintf_r+0xbcc>
   237b0:	f89b 2000 	ldrb.w	r2, [fp]
   237b4:	4562      	cmp	r2, ip
   237b6:	d1cb      	bne.n	23750 <_vfiprintf_r+0xbcc>
   237b8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   237bc:	d0c8      	beq.n	23750 <_vfiprintf_r+0xbcc>
   237be:	2b0a      	cmp	r3, #10
   237c0:	f171 0100 	sbcs.w	r1, r1, #0
   237c4:	d251      	bcs.n	2386a <_vfiprintf_r+0xce6>
   237c6:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
   237ca:	464c      	mov	r4, r9
   237cc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
   237d0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   237d4:	e62d      	b.n	23432 <_vfiprintf_r+0x8ae>
   237d6:	9907      	ldr	r1, [sp, #28]
   237d8:	9311      	str	r3, [sp, #68]	@ 0x44
   237da:	aa1a      	add	r2, sp, #104	@ 0x68
   237dc:	4658      	mov	r0, fp
   237de:	f000 f945 	bl	23a6c <__sprint_r>
   237e2:	2800      	cmp	r0, #0
   237e4:	f47f ab29 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   237e8:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   237ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   237ee:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   237f2:	f7ff bb51 	b.w	22e98 <_vfiprintf_r+0x314>
   237f6:	9203      	str	r2, [sp, #12]
   237f8:	e4f3      	b.n	231e2 <_vfiprintf_r+0x65e>
   237fa:	9403      	str	r4, [sp, #12]
   237fc:	e55a      	b.n	232b4 <_vfiprintf_r+0x730>
   237fe:	4658      	mov	r0, fp
   23800:	f000 faae 	bl	23d60 <__sinit>
   23804:	f7ff b9d4 	b.w	22bb0 <_vfiprintf_r+0x2c>
   23808:	9907      	ldr	r1, [sp, #28]
   2380a:	aa1a      	add	r2, sp, #104	@ 0x68
   2380c:	4658      	mov	r0, fp
   2380e:	f000 f92d 	bl	23a6c <__sprint_r>
   23812:	2800      	cmp	r0, #0
   23814:	f47f ab11 	bne.w	22e3a <_vfiprintf_r+0x2b6>
   23818:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
   2381c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   23820:	f7ff bb62 	b.w	22ee8 <_vfiprintf_r+0x364>
   23824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23826:	9a08      	ldr	r2, [sp, #32]
   23828:	681b      	ldr	r3, [r3, #0]
   2382a:	601a      	str	r2, [r3, #0]
   2382c:	e528      	b.n	23280 <_vfiprintf_r+0x6fc>
   2382e:	9b05      	ldr	r3, [sp, #20]
   23830:	4c39      	ldr	r4, [pc, #228]	@ (23918 <_vfiprintf_r+0xd94>)
   23832:	960c      	str	r6, [sp, #48]	@ 0x30
   23834:	2b06      	cmp	r3, #6
   23836:	bf28      	it	cs
   23838:	2306      	movcs	r3, #6
   2383a:	930a      	str	r3, [sp, #40]	@ 0x28
   2383c:	9304      	str	r3, [sp, #16]
   2383e:	f7ff bb1c 	b.w	22e7a <_vfiprintf_r+0x2f6>
   23842:	f412 7100 	ands.w	r1, r2, #512	@ 0x200
   23846:	bf1c      	itt	ne
   23848:	b2db      	uxtbne	r3, r3
   2384a:	4621      	movne	r1, r4
   2384c:	e443      	b.n	230d6 <_vfiprintf_r+0x552>
   2384e:	f414 7100 	ands.w	r1, r4, #512	@ 0x200
   23852:	f43f acad 	beq.w	231b0 <_vfiprintf_r+0x62c>
   23856:	b2db      	uxtb	r3, r3
   23858:	4601      	mov	r1, r0
   2385a:	e4a9      	b.n	231b0 <_vfiprintf_r+0x62c>
   2385c:	9903      	ldr	r1, [sp, #12]
   2385e:	f411 7100 	ands.w	r1, r1, #512	@ 0x200
   23862:	bf1c      	itt	ne
   23864:	b2db      	uxtbne	r3, r3
   23866:	4621      	movne	r1, r4
   23868:	e6fb      	b.n	23662 <_vfiprintf_r+0xade>
   2386a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2386c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   2386e:	eba9 0903 	sub.w	r9, r9, r3
   23872:	461a      	mov	r2, r3
   23874:	4648      	mov	r0, r9
   23876:	f000 fe43 	bl	24500 <strncpy>
   2387a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   2387e:	b10b      	cbz	r3, 23884 <_vfiprintf_r+0xd00>
   23880:	f10b 0b01 	add.w	fp, fp, #1
   23884:	f04f 0c00 	mov.w	ip, #0
   23888:	e766      	b.n	23758 <_vfiprintf_r+0xbd4>
   2388a:	ab18      	add	r3, sp, #96	@ 0x60
   2388c:	9300      	str	r3, [sp, #0]
   2388e:	2300      	movs	r3, #0
   23890:	4619      	mov	r1, r3
   23892:	aa15      	add	r2, sp, #84	@ 0x54
   23894:	4658      	mov	r0, fp
   23896:	f002 fedd 	bl	26654 <_wcsrtombs_r>
   2389a:	4603      	mov	r3, r0
   2389c:	3301      	adds	r3, #1
   2389e:	900a      	str	r0, [sp, #40]	@ 0x28
   238a0:	d077      	beq.n	23992 <_vfiprintf_r+0xe0e>
   238a2:	9415      	str	r4, [sp, #84]	@ 0x54
   238a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   238a6:	b1e3      	cbz	r3, 238e2 <_vfiprintf_r+0xd5e>
   238a8:	2b63      	cmp	r3, #99	@ 0x63
   238aa:	dc45      	bgt.n	23938 <_vfiprintf_r+0xdb4>
   238ac:	2300      	movs	r3, #0
   238ae:	930b      	str	r3, [sp, #44]	@ 0x2c
   238b0:	ac2d      	add	r4, sp, #180	@ 0xb4
   238b2:	2208      	movs	r2, #8
   238b4:	2100      	movs	r1, #0
   238b6:	a818      	add	r0, sp, #96	@ 0x60
   238b8:	f000 fd6a 	bl	24390 <memset>
   238bc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
   238be:	ab18      	add	r3, sp, #96	@ 0x60
   238c0:	9300      	str	r3, [sp, #0]
   238c2:	aa15      	add	r2, sp, #84	@ 0x54
   238c4:	462b      	mov	r3, r5
   238c6:	4621      	mov	r1, r4
   238c8:	4658      	mov	r0, fp
   238ca:	f002 fec3 	bl	26654 <_wcsrtombs_r>
   238ce:	4285      	cmp	r5, r0
   238d0:	f040 8085 	bne.w	239de <_vfiprintf_r+0xe5a>
   238d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   238d6:	2300      	movs	r3, #0
   238d8:	54a3      	strb	r3, [r4, r2]
   238da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   238de:	9304      	str	r3, [sp, #16]
   238e0:	e002      	b.n	238e8 <_vfiprintf_r+0xd64>
   238e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   238e4:	9304      	str	r3, [sp, #16]
   238e6:	930b      	str	r3, [sp, #44]	@ 0x2c
   238e8:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   238ec:	b11b      	cbz	r3, 238f6 <_vfiprintf_r+0xd72>
   238ee:	2300      	movs	r3, #0
   238f0:	960c      	str	r6, [sp, #48]	@ 0x30
   238f2:	9305      	str	r3, [sp, #20]
   238f4:	e4f7      	b.n	232e6 <_vfiprintf_r+0x762>
   238f6:	9305      	str	r3, [sp, #20]
   238f8:	960c      	str	r6, [sp, #48]	@ 0x30
   238fa:	f7ff bac1 	b.w	22e80 <_vfiprintf_r+0x2fc>
   238fe:	f343 11c0 	sbfx	r1, r3, #7, #1
   23902:	460a      	mov	r2, r1
   23904:	b25b      	sxtb	r3, r3
   23906:	f7ff bb86 	b.w	23016 <_vfiprintf_r+0x492>
   2390a:	bf00      	nop
   2390c:	00030980 	.word	0x00030980
   23910:	00030994 	.word	0x00030994
   23914:	cccccccd 	.word	0xcccccccd
   23918:	000309a8 	.word	0x000309a8
   2391c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2391e:	9a08      	ldr	r2, [sp, #32]
   23920:	681b      	ldr	r3, [r3, #0]
   23922:	801a      	strh	r2, [r3, #0]
   23924:	e4ac      	b.n	23280 <_vfiprintf_r+0x6fc>
   23926:	4620      	mov	r0, r4
   23928:	f7e9 f9aa 	bl	cc80 <strlen>
   2392c:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   23930:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28
   23934:	9304      	str	r3, [sp, #16]
   23936:	e7d7      	b.n	238e8 <_vfiprintf_r+0xd64>
   23938:	1c59      	adds	r1, r3, #1
   2393a:	4658      	mov	r0, fp
   2393c:	f001 fca4 	bl	25288 <_malloc_r>
   23940:	4604      	mov	r4, r0
   23942:	b330      	cbz	r0, 23992 <_vfiprintf_r+0xe0e>
   23944:	900b      	str	r0, [sp, #44]	@ 0x2c
   23946:	e7b4      	b.n	238b2 <_vfiprintf_r+0xd2e>
   23948:	6d88      	ldr	r0, [r1, #88]	@ 0x58
   2394a:	f000 feb5 	bl	246b8 <__retarget_lock_release_recursive>
   2394e:	f7ff ba30 	b.w	22db2 <_vfiprintf_r+0x22e>
   23952:	2330      	movs	r3, #48	@ 0x30
   23954:	e4b5      	b.n	232c2 <_vfiprintf_r+0x73e>
   23956:	2300      	movs	r3, #0
   23958:	4604      	mov	r4, r0
   2395a:	9305      	str	r3, [sp, #20]
   2395c:	f7ff b983 	b.w	22c66 <_vfiprintf_r+0xe2>
   23960:	07d4      	lsls	r4, r2, #31
   23962:	d407      	bmi.n	23974 <_vfiprintf_r+0xdf0>
   23964:	9b07      	ldr	r3, [sp, #28]
   23966:	899b      	ldrh	r3, [r3, #12]
   23968:	0598      	lsls	r0, r3, #22
   2396a:	d403      	bmi.n	23974 <_vfiprintf_r+0xdf0>
   2396c:	9b07      	ldr	r3, [sp, #28]
   2396e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
   23970:	f000 fea2 	bl	246b8 <__retarget_lock_release_recursive>
   23974:	f04f 33ff 	mov.w	r3, #4294967295
   23978:	9308      	str	r3, [sp, #32]
   2397a:	f7ff ba6e 	b.w	22e5a <_vfiprintf_r+0x2d6>
   2397e:	9907      	ldr	r1, [sp, #28]
   23980:	aa1a      	add	r2, sp, #104	@ 0x68
   23982:	4658      	mov	r0, fp
   23984:	f000 f872 	bl	23a6c <__sprint_r>
   23988:	2800      	cmp	r0, #0
   2398a:	f43f aa40 	beq.w	22e0e <_vfiprintf_r+0x28a>
   2398e:	f7ff ba5a 	b.w	22e46 <_vfiprintf_r+0x2c2>
   23992:	9a07      	ldr	r2, [sp, #28]
   23994:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   23998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2399c:	8193      	strh	r3, [r2, #12]
   2399e:	f7ff ba55 	b.w	22e4c <_vfiprintf_r+0x2c8>
   239a2:	e9dd 9304 	ldrd	r9, r3, [sp, #16]
   239a6:	930a      	str	r3, [sp, #40]	@ 0x28
   239a8:	e77c      	b.n	238a4 <_vfiprintf_r+0xd20>
   239aa:	9b05      	ldr	r3, [sp, #20]
   239ac:	9304      	str	r3, [sp, #16]
   239ae:	930a      	str	r3, [sp, #40]	@ 0x28
   239b0:	e79a      	b.n	238e8 <_vfiprintf_r+0xd64>
   239b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   239b4:	7862      	ldrb	r2, [r4, #1]
   239b6:	f853 1b04 	ldr.w	r1, [r3], #4
   239ba:	930c      	str	r3, [sp, #48]	@ 0x30
   239bc:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   239c0:	4604      	mov	r4, r0
   239c2:	9105      	str	r1, [sp, #20]
   239c4:	f7ff b94e 	b.w	22c64 <_vfiprintf_r+0xe0>
   239c8:	9a07      	ldr	r2, [sp, #28]
   239ca:	6e53      	ldr	r3, [r2, #100]	@ 0x64
   239cc:	07db      	lsls	r3, r3, #31
   239ce:	d4d1      	bmi.n	23974 <_vfiprintf_r+0xdf0>
   239d0:	8993      	ldrh	r3, [r2, #12]
   239d2:	059f      	lsls	r7, r3, #22
   239d4:	d4ce      	bmi.n	23974 <_vfiprintf_r+0xdf0>
   239d6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
   239d8:	f000 fe6e 	bl	246b8 <__retarget_lock_release_recursive>
   239dc:	e7ca      	b.n	23974 <_vfiprintf_r+0xdf0>
   239de:	9a07      	ldr	r2, [sp, #28]
   239e0:	8993      	ldrh	r3, [r2, #12]
   239e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   239e6:	8193      	strh	r3, [r2, #12]
   239e8:	f7ff ba27 	b.w	22e3a <_vfiprintf_r+0x2b6>

000239ec <__sbprintf>:
   239ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   239ee:	461f      	mov	r7, r3
   239f0:	898b      	ldrh	r3, [r1, #12]
   239f2:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
   239f6:	f023 0302 	bic.w	r3, r3, #2
   239fa:	f8ad 300c 	strh.w	r3, [sp, #12]
   239fe:	ab1a      	add	r3, sp, #104	@ 0x68
   23a00:	9300      	str	r3, [sp, #0]
   23a02:	9304      	str	r3, [sp, #16]
   23a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   23a08:	9302      	str	r3, [sp, #8]
   23a0a:	9305      	str	r3, [sp, #20]
   23a0c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   23a0e:	9319      	str	r3, [sp, #100]	@ 0x64
   23a10:	89cb      	ldrh	r3, [r1, #14]
   23a12:	f8ad 300e 	strh.w	r3, [sp, #14]
   23a16:	69cb      	ldr	r3, [r1, #28]
   23a18:	9307      	str	r3, [sp, #28]
   23a1a:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
   23a1c:	9309      	str	r3, [sp, #36]	@ 0x24
   23a1e:	4615      	mov	r5, r2
   23a20:	2300      	movs	r3, #0
   23a22:	4606      	mov	r6, r0
   23a24:	a816      	add	r0, sp, #88	@ 0x58
   23a26:	460c      	mov	r4, r1
   23a28:	9306      	str	r3, [sp, #24]
   23a2a:	f000 fe3f 	bl	246ac <__retarget_lock_init_recursive>
   23a2e:	462a      	mov	r2, r5
   23a30:	463b      	mov	r3, r7
   23a32:	4669      	mov	r1, sp
   23a34:	4630      	mov	r0, r6
   23a36:	f7ff f8a5 	bl	22b84 <_vfiprintf_r>
   23a3a:	1e05      	subs	r5, r0, #0
   23a3c:	db07      	blt.n	23a4e <__sbprintf+0x62>
   23a3e:	4669      	mov	r1, sp
   23a40:	4630      	mov	r0, r6
   23a42:	f000 f8bf 	bl	23bc4 <_fflush_r>
   23a46:	2800      	cmp	r0, #0
   23a48:	bf18      	it	ne
   23a4a:	f04f 35ff 	movne.w	r5, #4294967295
   23a4e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23a52:	065b      	lsls	r3, r3, #25
   23a54:	d503      	bpl.n	23a5e <__sbprintf+0x72>
   23a56:	89a3      	ldrh	r3, [r4, #12]
   23a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   23a5c:	81a3      	strh	r3, [r4, #12]
   23a5e:	9816      	ldr	r0, [sp, #88]	@ 0x58
   23a60:	f000 fe26 	bl	246b0 <__retarget_lock_close_recursive>
   23a64:	4628      	mov	r0, r5
   23a66:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
   23a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023a6c <__sprint_r>:
   23a6c:	6893      	ldr	r3, [r2, #8]
   23a6e:	b510      	push	{r4, lr}
   23a70:	4614      	mov	r4, r2
   23a72:	b91b      	cbnz	r3, 23a7c <__sprint_r+0x10>
   23a74:	4618      	mov	r0, r3
   23a76:	2300      	movs	r3, #0
   23a78:	6063      	str	r3, [r4, #4]
   23a7a:	bd10      	pop	{r4, pc}
   23a7c:	f000 f99a 	bl	23db4 <__sfvwrite_r>
   23a80:	2300      	movs	r3, #0
   23a82:	60a3      	str	r3, [r4, #8]
   23a84:	2300      	movs	r3, #0
   23a86:	6063      	str	r3, [r4, #4]
   23a88:	bd10      	pop	{r4, pc}
   23a8a:	bf00      	nop

00023a8c <__sflush_r>:
   23a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   23a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a94:	0716      	lsls	r6, r2, #28
   23a96:	460c      	mov	r4, r1
   23a98:	4680      	mov	r8, r0
   23a9a:	d44e      	bmi.n	23b3a <__sflush_r+0xae>
   23a9c:	6849      	ldr	r1, [r1, #4]
   23a9e:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
   23aa2:	2900      	cmp	r1, #0
   23aa4:	81a3      	strh	r3, [r4, #12]
   23aa6:	dd63      	ble.n	23b70 <__sflush_r+0xe4>
   23aa8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
   23aaa:	2d00      	cmp	r5, #0
   23aac:	d042      	beq.n	23b34 <__sflush_r+0xa8>
   23aae:	2100      	movs	r1, #0
   23ab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
   23ab4:	f8d8 6000 	ldr.w	r6, [r8]
   23ab8:	f8c8 1000 	str.w	r1, [r8]
   23abc:	69e1      	ldr	r1, [r4, #28]
   23abe:	d164      	bne.n	23b8a <__sflush_r+0xfe>
   23ac0:	2301      	movs	r3, #1
   23ac2:	4640      	mov	r0, r8
   23ac4:	47a8      	blx	r5
   23ac6:	1c45      	adds	r5, r0, #1
   23ac8:	4602      	mov	r2, r0
   23aca:	d06e      	beq.n	23baa <__sflush_r+0x11e>
   23acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23ad0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
   23ad2:	69e1      	ldr	r1, [r4, #28]
   23ad4:	0758      	lsls	r0, r3, #29
   23ad6:	d505      	bpl.n	23ae4 <__sflush_r+0x58>
   23ad8:	6863      	ldr	r3, [r4, #4]
   23ada:	1ad2      	subs	r2, r2, r3
   23adc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   23ade:	b10b      	cbz	r3, 23ae4 <__sflush_r+0x58>
   23ae0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
   23ae2:	1ad2      	subs	r2, r2, r3
   23ae4:	2300      	movs	r3, #0
   23ae6:	4640      	mov	r0, r8
   23ae8:	47a8      	blx	r5
   23aea:	1c43      	adds	r3, r0, #1
   23aec:	d14f      	bne.n	23b8e <__sflush_r+0x102>
   23aee:	f8d8 1000 	ldr.w	r1, [r8]
   23af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23af6:	291d      	cmp	r1, #29
   23af8:	d840      	bhi.n	23b7c <__sflush_r+0xf0>
   23afa:	4a31      	ldr	r2, [pc, #196]	@ (23bc0 <__sflush_r+0x134>)
   23afc:	40ca      	lsrs	r2, r1
   23afe:	07d7      	lsls	r7, r2, #31
   23b00:	d53c      	bpl.n	23b7c <__sflush_r+0xf0>
   23b02:	6922      	ldr	r2, [r4, #16]
   23b04:	6022      	str	r2, [r4, #0]
   23b06:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
   23b0a:	81a2      	strh	r2, [r4, #12]
   23b0c:	04dd      	lsls	r5, r3, #19
   23b0e:	f04f 0200 	mov.w	r2, #0
   23b12:	6062      	str	r2, [r4, #4]
   23b14:	d501      	bpl.n	23b1a <__sflush_r+0x8e>
   23b16:	2900      	cmp	r1, #0
   23b18:	d045      	beq.n	23ba6 <__sflush_r+0x11a>
   23b1a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   23b1c:	f8c8 6000 	str.w	r6, [r8]
   23b20:	b141      	cbz	r1, 23b34 <__sflush_r+0xa8>
   23b22:	f104 0340 	add.w	r3, r4, #64	@ 0x40
   23b26:	4299      	cmp	r1, r3
   23b28:	d002      	beq.n	23b30 <__sflush_r+0xa4>
   23b2a:	4640      	mov	r0, r8
   23b2c:	f000 fe96 	bl	2485c <_free_r>
   23b30:	2300      	movs	r3, #0
   23b32:	6323      	str	r3, [r4, #48]	@ 0x30
   23b34:	2000      	movs	r0, #0
   23b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b3a:	690e      	ldr	r6, [r1, #16]
   23b3c:	2e00      	cmp	r6, #0
   23b3e:	d0f9      	beq.n	23b34 <__sflush_r+0xa8>
   23b40:	680d      	ldr	r5, [r1, #0]
   23b42:	600e      	str	r6, [r1, #0]
   23b44:	0792      	lsls	r2, r2, #30
   23b46:	bf0c      	ite	eq
   23b48:	694b      	ldreq	r3, [r1, #20]
   23b4a:	2300      	movne	r3, #0
   23b4c:	1bad      	subs	r5, r5, r6
   23b4e:	608b      	str	r3, [r1, #8]
   23b50:	e00b      	b.n	23b6a <__sflush_r+0xde>
   23b52:	462b      	mov	r3, r5
   23b54:	4632      	mov	r2, r6
   23b56:	69e1      	ldr	r1, [r4, #28]
   23b58:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   23b5a:	4640      	mov	r0, r8
   23b5c:	47b8      	blx	r7
   23b5e:	f1b0 0c00 	subs.w	ip, r0, #0
   23b62:	eba5 050c 	sub.w	r5, r5, ip
   23b66:	4466      	add	r6, ip
   23b68:	dd06      	ble.n	23b78 <__sflush_r+0xec>
   23b6a:	2d00      	cmp	r5, #0
   23b6c:	dcf1      	bgt.n	23b52 <__sflush_r+0xc6>
   23b6e:	e7e1      	b.n	23b34 <__sflush_r+0xa8>
   23b70:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
   23b72:	2900      	cmp	r1, #0
   23b74:	dc98      	bgt.n	23aa8 <__sflush_r+0x1c>
   23b76:	e7dd      	b.n	23b34 <__sflush_r+0xa8>
   23b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   23b80:	81a3      	strh	r3, [r4, #12]
   23b82:	f04f 30ff 	mov.w	r0, #4294967295
   23b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b8a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
   23b8c:	e7a2      	b.n	23ad4 <__sflush_r+0x48>
   23b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23b92:	6922      	ldr	r2, [r4, #16]
   23b94:	6022      	str	r2, [r4, #0]
   23b96:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
   23b9a:	81a2      	strh	r2, [r4, #12]
   23b9c:	04db      	lsls	r3, r3, #19
   23b9e:	f04f 0200 	mov.w	r2, #0
   23ba2:	6062      	str	r2, [r4, #4]
   23ba4:	d5b9      	bpl.n	23b1a <__sflush_r+0x8e>
   23ba6:	6520      	str	r0, [r4, #80]	@ 0x50
   23ba8:	e7b7      	b.n	23b1a <__sflush_r+0x8e>
   23baa:	f8d8 3000 	ldr.w	r3, [r8]
   23bae:	2b00      	cmp	r3, #0
   23bb0:	d08c      	beq.n	23acc <__sflush_r+0x40>
   23bb2:	2b1d      	cmp	r3, #29
   23bb4:	d001      	beq.n	23bba <__sflush_r+0x12e>
   23bb6:	2b16      	cmp	r3, #22
   23bb8:	d1de      	bne.n	23b78 <__sflush_r+0xec>
   23bba:	f8c8 6000 	str.w	r6, [r8]
   23bbe:	e7b9      	b.n	23b34 <__sflush_r+0xa8>
   23bc0:	20400001 	.word	0x20400001

00023bc4 <_fflush_r>:
   23bc4:	b538      	push	{r3, r4, r5, lr}
   23bc6:	460c      	mov	r4, r1
   23bc8:	4605      	mov	r5, r0
   23bca:	b108      	cbz	r0, 23bd0 <_fflush_r+0xc>
   23bcc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   23bce:	b303      	cbz	r3, 23c12 <_fflush_r+0x4e>
   23bd0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   23bd4:	b188      	cbz	r0, 23bfa <_fflush_r+0x36>
   23bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   23bd8:	07db      	lsls	r3, r3, #31
   23bda:	d401      	bmi.n	23be0 <_fflush_r+0x1c>
   23bdc:	0581      	lsls	r1, r0, #22
   23bde:	d50f      	bpl.n	23c00 <_fflush_r+0x3c>
   23be0:	4628      	mov	r0, r5
   23be2:	4621      	mov	r1, r4
   23be4:	f7ff ff52 	bl	23a8c <__sflush_r>
   23be8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   23bea:	07da      	lsls	r2, r3, #31
   23bec:	4605      	mov	r5, r0
   23bee:	d402      	bmi.n	23bf6 <_fflush_r+0x32>
   23bf0:	89a3      	ldrh	r3, [r4, #12]
   23bf2:	059b      	lsls	r3, r3, #22
   23bf4:	d508      	bpl.n	23c08 <_fflush_r+0x44>
   23bf6:	4628      	mov	r0, r5
   23bf8:	bd38      	pop	{r3, r4, r5, pc}
   23bfa:	4605      	mov	r5, r0
   23bfc:	4628      	mov	r0, r5
   23bfe:	bd38      	pop	{r3, r4, r5, pc}
   23c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   23c02:	f000 fd57 	bl	246b4 <__retarget_lock_acquire_recursive>
   23c06:	e7eb      	b.n	23be0 <_fflush_r+0x1c>
   23c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   23c0a:	f000 fd55 	bl	246b8 <__retarget_lock_release_recursive>
   23c0e:	4628      	mov	r0, r5
   23c10:	bd38      	pop	{r3, r4, r5, pc}
   23c12:	f000 f8a5 	bl	23d60 <__sinit>
   23c16:	e7db      	b.n	23bd0 <_fflush_r+0xc>

00023c18 <stdio_exit_handler>:
   23c18:	4a02      	ldr	r2, [pc, #8]	@ (23c24 <stdio_exit_handler+0xc>)
   23c1a:	4903      	ldr	r1, [pc, #12]	@ (23c28 <stdio_exit_handler+0x10>)
   23c1c:	4803      	ldr	r0, [pc, #12]	@ (23c2c <stdio_exit_handler+0x14>)
   23c1e:	f000 ba49 	b.w	240b4 <_fwalk_sglue>
   23c22:	bf00      	nop
   23c24:	10002428 	.word	0x10002428
   23c28:	00028205 	.word	0x00028205
   23c2c:	100025a8 	.word	0x100025a8

00023c30 <cleanup_stdio>:
   23c30:	4b0c      	ldr	r3, [pc, #48]	@ (23c64 <cleanup_stdio+0x34>)
   23c32:	6841      	ldr	r1, [r0, #4]
   23c34:	4299      	cmp	r1, r3
   23c36:	b510      	push	{r4, lr}
   23c38:	4604      	mov	r4, r0
   23c3a:	d001      	beq.n	23c40 <cleanup_stdio+0x10>
   23c3c:	f004 fae2 	bl	28204 <_fclose_r>
   23c40:	68a1      	ldr	r1, [r4, #8]
   23c42:	4b09      	ldr	r3, [pc, #36]	@ (23c68 <cleanup_stdio+0x38>)
   23c44:	4299      	cmp	r1, r3
   23c46:	d002      	beq.n	23c4e <cleanup_stdio+0x1e>
   23c48:	4620      	mov	r0, r4
   23c4a:	f004 fadb 	bl	28204 <_fclose_r>
   23c4e:	68e1      	ldr	r1, [r4, #12]
   23c50:	4b06      	ldr	r3, [pc, #24]	@ (23c6c <cleanup_stdio+0x3c>)
   23c52:	4299      	cmp	r1, r3
   23c54:	d004      	beq.n	23c60 <cleanup_stdio+0x30>
   23c56:	4620      	mov	r0, r4
   23c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23c5c:	f004 bad2 	b.w	28204 <_fclose_r>
   23c60:	bd10      	pop	{r4, pc}
   23c62:	bf00      	nop
   23c64:	10054b30 	.word	0x10054b30
   23c68:	10054b98 	.word	0x10054b98
   23c6c:	10054c00 	.word	0x10054c00

00023c70 <global_stdio_init.part.0>:
   23c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23c74:	4a31      	ldr	r2, [pc, #196]	@ (23d3c <global_stdio_init.part.0+0xcc>)
   23c76:	4c32      	ldr	r4, [pc, #200]	@ (23d40 <global_stdio_init.part.0+0xd0>)
   23c78:	4932      	ldr	r1, [pc, #200]	@ (23d44 <global_stdio_init.part.0+0xd4>)
   23c7a:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 23d58 <global_stdio_init.part.0+0xe8>
   23c7e:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 23d5c <global_stdio_init.part.0+0xec>
   23c82:	4f31      	ldr	r7, [pc, #196]	@ (23d48 <global_stdio_init.part.0+0xd8>)
   23c84:	6011      	str	r1, [r2, #0]
   23c86:	2500      	movs	r5, #0
   23c88:	2304      	movs	r3, #4
   23c8a:	4629      	mov	r1, r5
   23c8c:	2208      	movs	r2, #8
   23c8e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
   23c92:	e9c4 3503 	strd	r3, r5, [r4, #12]
   23c96:	4e2d      	ldr	r6, [pc, #180]	@ (23d4c <global_stdio_init.part.0+0xdc>)
   23c98:	60a5      	str	r5, [r4, #8]
   23c9a:	e9c4 5500 	strd	r5, r5, [r4]
   23c9e:	e9c4 5505 	strd	r5, r5, [r4, #20]
   23ca2:	6665      	str	r5, [r4, #100]	@ 0x64
   23ca4:	f000 fb74 	bl	24390 <memset>
   23ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
   23cac:	e9c4 4907 	strd	r4, r9, [r4, #28]
   23cb0:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
   23cb4:	62e6      	str	r6, [r4, #44]	@ 0x2c
   23cb6:	f000 fcf9 	bl	246ac <__retarget_lock_init_recursive>
   23cba:	4629      	mov	r1, r5
   23cbc:	4b24      	ldr	r3, [pc, #144]	@ (23d50 <global_stdio_init.part.0+0xe0>)
   23cbe:	6763      	str	r3, [r4, #116]	@ 0x74
   23cc0:	2208      	movs	r2, #8
   23cc2:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
   23cc6:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
   23cca:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
   23cce:	6725      	str	r5, [r4, #112]	@ 0x70
   23cd0:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
   23cd4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
   23cd8:	f000 fb5a 	bl	24390 <memset>
   23cdc:	f104 0368 	add.w	r3, r4, #104	@ 0x68
   23ce0:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
   23ce4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
   23ce8:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
   23cec:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
   23cf0:	f000 fcdc 	bl	246ac <__retarget_lock_init_recursive>
   23cf4:	4b17      	ldr	r3, [pc, #92]	@ (23d54 <global_stdio_init.part.0+0xe4>)
   23cf6:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
   23cfa:	4629      	mov	r1, r5
   23cfc:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
   23d00:	2208      	movs	r2, #8
   23d02:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
   23d06:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
   23d0a:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
   23d0e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
   23d12:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
   23d16:	f000 fb3b 	bl	24390 <memset>
   23d1a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
   23d1e:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
   23d22:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
   23d26:	f504 7094 	add.w	r0, r4, #296	@ 0x128
   23d2a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
   23d2e:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
   23d32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23d36:	f000 bcb9 	b.w	246ac <__retarget_lock_init_recursive>
   23d3a:	bf00      	nop
   23d3c:	10054c68 	.word	0x10054c68
   23d40:	10054b30 	.word	0x10054b30
   23d44:	00023c19 	.word	0x00023c19
   23d48:	000241a1 	.word	0x000241a1
   23d4c:	000241c5 	.word	0x000241c5
   23d50:	00010009 	.word	0x00010009
   23d54:	00020012 	.word	0x00020012
   23d58:	0002413d 	.word	0x0002413d
   23d5c:	00024161 	.word	0x00024161

00023d60 <__sinit>:
   23d60:	b510      	push	{r4, lr}
   23d62:	4604      	mov	r4, r0
   23d64:	480a      	ldr	r0, [pc, #40]	@ (23d90 <__sinit+0x30>)
   23d66:	f000 fca5 	bl	246b4 <__retarget_lock_acquire_recursive>
   23d6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   23d6c:	b923      	cbnz	r3, 23d78 <__sinit+0x18>
   23d6e:	4b09      	ldr	r3, [pc, #36]	@ (23d94 <__sinit+0x34>)
   23d70:	4a09      	ldr	r2, [pc, #36]	@ (23d98 <__sinit+0x38>)
   23d72:	681b      	ldr	r3, [r3, #0]
   23d74:	6362      	str	r2, [r4, #52]	@ 0x34
   23d76:	b123      	cbz	r3, 23d82 <__sinit+0x22>
   23d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23d7c:	4804      	ldr	r0, [pc, #16]	@ (23d90 <__sinit+0x30>)
   23d7e:	f000 bc9b 	b.w	246b8 <__retarget_lock_release_recursive>
   23d82:	f7ff ff75 	bl	23c70 <global_stdio_init.part.0>
   23d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23d8a:	4801      	ldr	r0, [pc, #4]	@ (23d90 <__sinit+0x30>)
   23d8c:	f000 bc94 	b.w	246b8 <__retarget_lock_release_recursive>
   23d90:	10054c74 	.word	0x10054c74
   23d94:	10054c68 	.word	0x10054c68
   23d98:	00023c31 	.word	0x00023c31

00023d9c <__sfp_lock_acquire>:
   23d9c:	4801      	ldr	r0, [pc, #4]	@ (23da4 <__sfp_lock_acquire+0x8>)
   23d9e:	f000 bc89 	b.w	246b4 <__retarget_lock_acquire_recursive>
   23da2:	bf00      	nop
   23da4:	10054c74 	.word	0x10054c74

00023da8 <__sfp_lock_release>:
   23da8:	4801      	ldr	r0, [pc, #4]	@ (23db0 <__sfp_lock_release+0x8>)
   23daa:	f000 bc85 	b.w	246b8 <__retarget_lock_release_recursive>
   23dae:	bf00      	nop
   23db0:	10054c74 	.word	0x10054c74

00023db4 <__sfvwrite_r>:
   23db4:	6893      	ldr	r3, [r2, #8]
   23db6:	2b00      	cmp	r3, #0
   23db8:	f000 80f8 	beq.w	23fac <__sfvwrite_r+0x1f8>
   23dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dc0:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   23dc4:	f01c 0f08 	tst.w	ip, #8
   23dc8:	b083      	sub	sp, #12
   23dca:	4690      	mov	r8, r2
   23dcc:	4681      	mov	r9, r0
   23dce:	460c      	mov	r4, r1
   23dd0:	d031      	beq.n	23e36 <__sfvwrite_r+0x82>
   23dd2:	690b      	ldr	r3, [r1, #16]
   23dd4:	b37b      	cbz	r3, 23e36 <__sfvwrite_r+0x82>
   23dd6:	f01c 0702 	ands.w	r7, ip, #2
   23dda:	f8d8 6000 	ldr.w	r6, [r8]
   23dde:	d038      	beq.n	23e52 <__sfvwrite_r+0x9e>
   23de0:	2700      	movs	r7, #0
   23de2:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
   23de6:	69e1      	ldr	r1, [r4, #28]
   23de8:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 240b0 <__sfvwrite_r+0x2fc>
   23dec:	463d      	mov	r5, r7
   23dee:	4555      	cmp	r5, sl
   23df0:	462b      	mov	r3, r5
   23df2:	463a      	mov	r2, r7
   23df4:	bf28      	it	cs
   23df6:	4653      	movcs	r3, sl
   23df8:	4648      	mov	r0, r9
   23dfa:	b1c5      	cbz	r5, 23e2e <__sfvwrite_r+0x7a>
   23dfc:	47d8      	blx	fp
   23dfe:	2800      	cmp	r0, #0
   23e00:	f340 80ca 	ble.w	23f98 <__sfvwrite_r+0x1e4>
   23e04:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23e08:	1a1b      	subs	r3, r3, r0
   23e0a:	4407      	add	r7, r0
   23e0c:	1a2d      	subs	r5, r5, r0
   23e0e:	f8c8 3008 	str.w	r3, [r8, #8]
   23e12:	2b00      	cmp	r3, #0
   23e14:	f000 80b6 	beq.w	23f84 <__sfvwrite_r+0x1d0>
   23e18:	4555      	cmp	r5, sl
   23e1a:	462b      	mov	r3, r5
   23e1c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
   23e20:	69e1      	ldr	r1, [r4, #28]
   23e22:	bf28      	it	cs
   23e24:	4653      	movcs	r3, sl
   23e26:	463a      	mov	r2, r7
   23e28:	4648      	mov	r0, r9
   23e2a:	2d00      	cmp	r5, #0
   23e2c:	d1e6      	bne.n	23dfc <__sfvwrite_r+0x48>
   23e2e:	e9d6 7500 	ldrd	r7, r5, [r6]
   23e32:	3608      	adds	r6, #8
   23e34:	e7db      	b.n	23dee <__sfvwrite_r+0x3a>
   23e36:	4621      	mov	r1, r4
   23e38:	4648      	mov	r0, r9
   23e3a:	f000 f9c7 	bl	241cc <__swsetup_r>
   23e3e:	2800      	cmp	r0, #0
   23e40:	f040 80af 	bne.w	23fa2 <__sfvwrite_r+0x1ee>
   23e44:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   23e48:	f8d8 6000 	ldr.w	r6, [r8]
   23e4c:	f01c 0702 	ands.w	r7, ip, #2
   23e50:	d1c6      	bne.n	23de0 <__sfvwrite_r+0x2c>
   23e52:	f01c 0a01 	ands.w	sl, ip, #1
   23e56:	d163      	bne.n	23f20 <__sfvwrite_r+0x16c>
   23e58:	6823      	ldr	r3, [r4, #0]
   23e5a:	68a1      	ldr	r1, [r4, #8]
   23e5c:	4657      	mov	r7, sl
   23e5e:	4618      	mov	r0, r3
   23e60:	468b      	mov	fp, r1
   23e62:	2f00      	cmp	r7, #0
   23e64:	d058      	beq.n	23f18 <__sfvwrite_r+0x164>
   23e66:	f41c 7f00 	tst.w	ip, #512	@ 0x200
   23e6a:	f000 80b5 	beq.w	23fd8 <__sfvwrite_r+0x224>
   23e6e:	42b9      	cmp	r1, r7
   23e70:	460a      	mov	r2, r1
   23e72:	f200 80e1 	bhi.w	24038 <__sfvwrite_r+0x284>
   23e76:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
   23e7a:	d02f      	beq.n	23edc <__sfvwrite_r+0x128>
   23e7c:	6921      	ldr	r1, [r4, #16]
   23e7e:	6962      	ldr	r2, [r4, #20]
   23e80:	1a5d      	subs	r5, r3, r1
   23e82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   23e86:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   23e8a:	1c6b      	adds	r3, r5, #1
   23e8c:	1052      	asrs	r2, r2, #1
   23e8e:	443b      	add	r3, r7
   23e90:	4293      	cmp	r3, r2
   23e92:	bf92      	itee	ls
   23e94:	4693      	movls	fp, r2
   23e96:	469b      	movhi	fp, r3
   23e98:	461a      	movhi	r2, r3
   23e9a:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
   23e9e:	f000 80ea 	beq.w	24076 <__sfvwrite_r+0x2c2>
   23ea2:	4611      	mov	r1, r2
   23ea4:	4648      	mov	r0, r9
   23ea6:	f001 f9ef 	bl	25288 <_malloc_r>
   23eaa:	2800      	cmp	r0, #0
   23eac:	f000 80f9 	beq.w	240a2 <__sfvwrite_r+0x2ee>
   23eb0:	462a      	mov	r2, r5
   23eb2:	6921      	ldr	r1, [r4, #16]
   23eb4:	9000      	str	r0, [sp, #0]
   23eb6:	f7e8 fe3b 	bl	cb30 <memcpy>
   23eba:	89a2      	ldrh	r2, [r4, #12]
   23ebc:	9b00      	ldr	r3, [sp, #0]
   23ebe:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
   23ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
   23ec6:	81a2      	strh	r2, [r4, #12]
   23ec8:	1958      	adds	r0, r3, r5
   23eca:	ebab 0505 	sub.w	r5, fp, r5
   23ece:	f8c4 b014 	str.w	fp, [r4, #20]
   23ed2:	6123      	str	r3, [r4, #16]
   23ed4:	60a5      	str	r5, [r4, #8]
   23ed6:	6020      	str	r0, [r4, #0]
   23ed8:	46bb      	mov	fp, r7
   23eda:	463a      	mov	r2, r7
   23edc:	4651      	mov	r1, sl
   23ede:	9200      	str	r2, [sp, #0]
   23ee0:	f000 f9d6 	bl	24290 <memmove>
   23ee4:	68a1      	ldr	r1, [r4, #8]
   23ee6:	6823      	ldr	r3, [r4, #0]
   23ee8:	9a00      	ldr	r2, [sp, #0]
   23eea:	eba1 010b 	sub.w	r1, r1, fp
   23eee:	441a      	add	r2, r3
   23ef0:	463d      	mov	r5, r7
   23ef2:	60a1      	str	r1, [r4, #8]
   23ef4:	6022      	str	r2, [r4, #0]
   23ef6:	2700      	movs	r7, #0
   23ef8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23efc:	1b5b      	subs	r3, r3, r5
   23efe:	44aa      	add	sl, r5
   23f00:	f8c8 3008 	str.w	r3, [r8, #8]
   23f04:	2b00      	cmp	r3, #0
   23f06:	d03d      	beq.n	23f84 <__sfvwrite_r+0x1d0>
   23f08:	6823      	ldr	r3, [r4, #0]
   23f0a:	68a1      	ldr	r1, [r4, #8]
   23f0c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   23f10:	4618      	mov	r0, r3
   23f12:	468b      	mov	fp, r1
   23f14:	2f00      	cmp	r7, #0
   23f16:	d1a6      	bne.n	23e66 <__sfvwrite_r+0xb2>
   23f18:	e9d6 a700 	ldrd	sl, r7, [r6]
   23f1c:	3608      	adds	r6, #8
   23f1e:	e79e      	b.n	23e5e <__sfvwrite_r+0xaa>
   23f20:	4638      	mov	r0, r7
   23f22:	46bb      	mov	fp, r7
   23f24:	463d      	mov	r5, r7
   23f26:	9700      	str	r7, [sp, #0]
   23f28:	2d00      	cmp	r5, #0
   23f2a:	d041      	beq.n	23fb0 <__sfvwrite_r+0x1fc>
   23f2c:	2800      	cmp	r0, #0
   23f2e:	d046      	beq.n	23fbe <__sfvwrite_r+0x20a>
   23f30:	9a00      	ldr	r2, [sp, #0]
   23f32:	6820      	ldr	r0, [r4, #0]
   23f34:	68a1      	ldr	r1, [r4, #8]
   23f36:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
   23f3a:	42aa      	cmp	r2, r5
   23f3c:	bf28      	it	cs
   23f3e:	462a      	movcs	r2, r5
   23f40:	42b8      	cmp	r0, r7
   23f42:	d904      	bls.n	23f4e <__sfvwrite_r+0x19a>
   23f44:	eb01 0a03 	add.w	sl, r1, r3
   23f48:	4552      	cmp	r2, sl
   23f4a:	f300 8085 	bgt.w	24058 <__sfvwrite_r+0x2a4>
   23f4e:	4293      	cmp	r3, r2
   23f50:	dc75      	bgt.n	2403e <__sfvwrite_r+0x28a>
   23f52:	69e1      	ldr	r1, [r4, #28]
   23f54:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   23f56:	465a      	mov	r2, fp
   23f58:	4648      	mov	r0, r9
   23f5a:	47b8      	blx	r7
   23f5c:	f1b0 0a00 	subs.w	sl, r0, #0
   23f60:	dd1a      	ble.n	23f98 <__sfvwrite_r+0x1e4>
   23f62:	9b00      	ldr	r3, [sp, #0]
   23f64:	ebb3 030a 	subs.w	r3, r3, sl
   23f68:	9300      	str	r3, [sp, #0]
   23f6a:	d00f      	beq.n	23f8c <__sfvwrite_r+0x1d8>
   23f6c:	2001      	movs	r0, #1
   23f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23f72:	eba3 030a 	sub.w	r3, r3, sl
   23f76:	44d3      	add	fp, sl
   23f78:	eba5 050a 	sub.w	r5, r5, sl
   23f7c:	f8c8 3008 	str.w	r3, [r8, #8]
   23f80:	2b00      	cmp	r3, #0
   23f82:	d1d1      	bne.n	23f28 <__sfvwrite_r+0x174>
   23f84:	2000      	movs	r0, #0
   23f86:	b003      	add	sp, #12
   23f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f8c:	4621      	mov	r1, r4
   23f8e:	4648      	mov	r0, r9
   23f90:	f7ff fe18 	bl	23bc4 <_fflush_r>
   23f94:	2800      	cmp	r0, #0
   23f96:	d0ea      	beq.n	23f6e <__sfvwrite_r+0x1ba>
   23f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   23fa0:	81a3      	strh	r3, [r4, #12]
   23fa2:	f04f 30ff 	mov.w	r0, #4294967295
   23fa6:	b003      	add	sp, #12
   23fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fac:	2000      	movs	r0, #0
   23fae:	4770      	bx	lr
   23fb0:	6875      	ldr	r5, [r6, #4]
   23fb2:	4633      	mov	r3, r6
   23fb4:	3608      	adds	r6, #8
   23fb6:	2d00      	cmp	r5, #0
   23fb8:	d0fa      	beq.n	23fb0 <__sfvwrite_r+0x1fc>
   23fba:	f8d3 b000 	ldr.w	fp, [r3]
   23fbe:	462a      	mov	r2, r5
   23fc0:	210a      	movs	r1, #10
   23fc2:	4658      	mov	r0, fp
   23fc4:	f7e8 fd64 	bl	ca90 <memchr>
   23fc8:	2800      	cmp	r0, #0
   23fca:	d067      	beq.n	2409c <__sfvwrite_r+0x2e8>
   23fcc:	3001      	adds	r0, #1
   23fce:	eba0 030b 	sub.w	r3, r0, fp
   23fd2:	9300      	str	r3, [sp, #0]
   23fd4:	461a      	mov	r2, r3
   23fd6:	e7ac      	b.n	23f32 <__sfvwrite_r+0x17e>
   23fd8:	6922      	ldr	r2, [r4, #16]
   23fda:	429a      	cmp	r2, r3
   23fdc:	d314      	bcc.n	24008 <__sfvwrite_r+0x254>
   23fde:	6962      	ldr	r2, [r4, #20]
   23fe0:	42ba      	cmp	r2, r7
   23fe2:	d811      	bhi.n	24008 <__sfvwrite_r+0x254>
   23fe4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   23fe8:	42bb      	cmp	r3, r7
   23fea:	bf28      	it	cs
   23fec:	463b      	movcs	r3, r7
   23fee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   23ff0:	fb93 f3f2 	sdiv	r3, r3, r2
   23ff4:	69e1      	ldr	r1, [r4, #28]
   23ff6:	fb02 f303 	mul.w	r3, r2, r3
   23ffa:	4648      	mov	r0, r9
   23ffc:	4652      	mov	r2, sl
   23ffe:	47a8      	blx	r5
   24000:	1e05      	subs	r5, r0, #0
   24002:	ddc9      	ble.n	23f98 <__sfvwrite_r+0x1e4>
   24004:	1b7f      	subs	r7, r7, r5
   24006:	e777      	b.n	23ef8 <__sfvwrite_r+0x144>
   24008:	42b9      	cmp	r1, r7
   2400a:	bf28      	it	cs
   2400c:	4639      	movcs	r1, r7
   2400e:	460d      	mov	r5, r1
   24010:	4618      	mov	r0, r3
   24012:	460a      	mov	r2, r1
   24014:	4651      	mov	r1, sl
   24016:	f000 f93b 	bl	24290 <memmove>
   2401a:	68a1      	ldr	r1, [r4, #8]
   2401c:	6823      	ldr	r3, [r4, #0]
   2401e:	1b49      	subs	r1, r1, r5
   24020:	442b      	add	r3, r5
   24022:	60a1      	str	r1, [r4, #8]
   24024:	6023      	str	r3, [r4, #0]
   24026:	2900      	cmp	r1, #0
   24028:	d1ec      	bne.n	24004 <__sfvwrite_r+0x250>
   2402a:	4621      	mov	r1, r4
   2402c:	4648      	mov	r0, r9
   2402e:	f7ff fdc9 	bl	23bc4 <_fflush_r>
   24032:	2800      	cmp	r0, #0
   24034:	d0e6      	beq.n	24004 <__sfvwrite_r+0x250>
   24036:	e7af      	b.n	23f98 <__sfvwrite_r+0x1e4>
   24038:	46bb      	mov	fp, r7
   2403a:	463a      	mov	r2, r7
   2403c:	e74e      	b.n	23edc <__sfvwrite_r+0x128>
   2403e:	4659      	mov	r1, fp
   24040:	9201      	str	r2, [sp, #4]
   24042:	f000 f925 	bl	24290 <memmove>
   24046:	9a01      	ldr	r2, [sp, #4]
   24048:	68a3      	ldr	r3, [r4, #8]
   2404a:	1a9b      	subs	r3, r3, r2
   2404c:	60a3      	str	r3, [r4, #8]
   2404e:	6823      	ldr	r3, [r4, #0]
   24050:	4413      	add	r3, r2
   24052:	6023      	str	r3, [r4, #0]
   24054:	4692      	mov	sl, r2
   24056:	e784      	b.n	23f62 <__sfvwrite_r+0x1ae>
   24058:	4659      	mov	r1, fp
   2405a:	4652      	mov	r2, sl
   2405c:	f000 f918 	bl	24290 <memmove>
   24060:	6823      	ldr	r3, [r4, #0]
   24062:	4453      	add	r3, sl
   24064:	6023      	str	r3, [r4, #0]
   24066:	4621      	mov	r1, r4
   24068:	4648      	mov	r0, r9
   2406a:	f7ff fdab 	bl	23bc4 <_fflush_r>
   2406e:	2800      	cmp	r0, #0
   24070:	f43f af77 	beq.w	23f62 <__sfvwrite_r+0x1ae>
   24074:	e790      	b.n	23f98 <__sfvwrite_r+0x1e4>
   24076:	4648      	mov	r0, r9
   24078:	f002 f916 	bl	262a8 <_realloc_r>
   2407c:	4603      	mov	r3, r0
   2407e:	2800      	cmp	r0, #0
   24080:	f47f af22 	bne.w	23ec8 <__sfvwrite_r+0x114>
   24084:	6921      	ldr	r1, [r4, #16]
   24086:	4648      	mov	r0, r9
   24088:	f000 fbe8 	bl	2485c <_free_r>
   2408c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24090:	220c      	movs	r2, #12
   24092:	f8c9 2000 	str.w	r2, [r9]
   24096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   2409a:	e77f      	b.n	23f9c <__sfvwrite_r+0x1e8>
   2409c:	1c6a      	adds	r2, r5, #1
   2409e:	9200      	str	r2, [sp, #0]
   240a0:	e747      	b.n	23f32 <__sfvwrite_r+0x17e>
   240a2:	220c      	movs	r2, #12
   240a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   240a8:	f8c9 2000 	str.w	r2, [r9]
   240ac:	e776      	b.n	23f9c <__sfvwrite_r+0x1e8>
   240ae:	bf00      	nop
   240b0:	7ffffc00 	.word	0x7ffffc00

000240b4 <_fwalk_sglue>:
   240b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   240b8:	4607      	mov	r7, r0
   240ba:	4688      	mov	r8, r1
   240bc:	4616      	mov	r6, r2
   240be:	f04f 0900 	mov.w	r9, #0
   240c2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   240c6:	3d01      	subs	r5, #1
   240c8:	d410      	bmi.n	240ec <_fwalk_sglue+0x38>
   240ca:	89a3      	ldrh	r3, [r4, #12]
   240cc:	2b01      	cmp	r3, #1
   240ce:	d908      	bls.n	240e2 <_fwalk_sglue+0x2e>
   240d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   240d4:	3301      	adds	r3, #1
   240d6:	4621      	mov	r1, r4
   240d8:	4638      	mov	r0, r7
   240da:	d002      	beq.n	240e2 <_fwalk_sglue+0x2e>
   240dc:	47c0      	blx	r8
   240de:	ea49 0900 	orr.w	r9, r9, r0
   240e2:	3d01      	subs	r5, #1
   240e4:	1c6b      	adds	r3, r5, #1
   240e6:	f104 0468 	add.w	r4, r4, #104	@ 0x68
   240ea:	d1ee      	bne.n	240ca <_fwalk_sglue+0x16>
   240ec:	6836      	ldr	r6, [r6, #0]
   240ee:	2e00      	cmp	r6, #0
   240f0:	d1e7      	bne.n	240c2 <_fwalk_sglue+0xe>
   240f2:	4648      	mov	r0, r9
   240f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000240f8 <sprintf>:
   240f8:	b40e      	push	{r1, r2, r3}
   240fa:	b530      	push	{r4, r5, lr}
   240fc:	b09c      	sub	sp, #112	@ 0x70
   240fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   24102:	ab1f      	add	r3, sp, #124	@ 0x7c
   24104:	9104      	str	r1, [sp, #16]
   24106:	9107      	str	r1, [sp, #28]
   24108:	490a      	ldr	r1, [pc, #40]	@ (24134 <sprintf+0x3c>)
   2410a:	f853 2b04 	ldr.w	r2, [r3], #4
   2410e:	9002      	str	r0, [sp, #8]
   24110:	2400      	movs	r4, #0
   24112:	9006      	str	r0, [sp, #24]
   24114:	4d08      	ldr	r5, [pc, #32]	@ (24138 <sprintf+0x40>)
   24116:	6808      	ldr	r0, [r1, #0]
   24118:	9301      	str	r3, [sp, #4]
   2411a:	a902      	add	r1, sp, #8
   2411c:	9505      	str	r5, [sp, #20]
   2411e:	941b      	str	r4, [sp, #108]	@ 0x6c
   24120:	f002 faa6 	bl	26670 <_svfprintf_r>
   24124:	9b02      	ldr	r3, [sp, #8]
   24126:	701c      	strb	r4, [r3, #0]
   24128:	b01c      	add	sp, #112	@ 0x70
   2412a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2412e:	b003      	add	sp, #12
   24130:	4770      	bx	lr
   24132:	bf00      	nop
   24134:	100025a0 	.word	0x100025a0
   24138:	ffff0208 	.word	0xffff0208

0002413c <__sread>:
   2413c:	b510      	push	{r4, lr}
   2413e:	460c      	mov	r4, r1
   24140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24144:	f000 fa80 	bl	24648 <_read_r>
   24148:	2800      	cmp	r0, #0
   2414a:	db03      	blt.n	24154 <__sread+0x18>
   2414c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
   2414e:	4403      	add	r3, r0
   24150:	6523      	str	r3, [r4, #80]	@ 0x50
   24152:	bd10      	pop	{r4, pc}
   24154:	89a3      	ldrh	r3, [r4, #12]
   24156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
   2415a:	81a3      	strh	r3, [r4, #12]
   2415c:	bd10      	pop	{r4, pc}
   2415e:	bf00      	nop

00024160 <__swrite>:
   24160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24164:	460c      	mov	r4, r1
   24166:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   2416a:	461f      	mov	r7, r3
   2416c:	05cb      	lsls	r3, r1, #23
   2416e:	4605      	mov	r5, r0
   24170:	4616      	mov	r6, r2
   24172:	d40b      	bmi.n	2418c <__swrite+0x2c>
   24174:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
   24178:	81a1      	strh	r1, [r4, #12]
   2417a:	463b      	mov	r3, r7
   2417c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24180:	4632      	mov	r2, r6
   24182:	4628      	mov	r0, r5
   24184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24188:	f000 ba74 	b.w	24674 <_write_r>
   2418c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24190:	2302      	movs	r3, #2
   24192:	2200      	movs	r2, #0
   24194:	f000 fa42 	bl	2461c <_lseek_r>
   24198:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   2419c:	e7ea      	b.n	24174 <__swrite+0x14>
   2419e:	bf00      	nop

000241a0 <__sseek>:
   241a0:	b510      	push	{r4, lr}
   241a2:	460c      	mov	r4, r1
   241a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   241a8:	f000 fa38 	bl	2461c <_lseek_r>
   241ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   241b0:	1c42      	adds	r2, r0, #1
   241b2:	bf0e      	itee	eq
   241b4:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
   241b8:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
   241bc:	6520      	strne	r0, [r4, #80]	@ 0x50
   241be:	81a3      	strh	r3, [r4, #12]
   241c0:	bd10      	pop	{r4, pc}
   241c2:	bf00      	nop

000241c4 <__sclose>:
   241c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   241c8:	f000 ba16 	b.w	245f8 <_close_r>

000241cc <__swsetup_r>:
   241cc:	b538      	push	{r3, r4, r5, lr}
   241ce:	4b2f      	ldr	r3, [pc, #188]	@ (2428c <__swsetup_r+0xc0>)
   241d0:	681b      	ldr	r3, [r3, #0]
   241d2:	4605      	mov	r5, r0
   241d4:	460c      	mov	r4, r1
   241d6:	b113      	cbz	r3, 241de <__swsetup_r+0x12>
   241d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   241da:	2a00      	cmp	r2, #0
   241dc:	d04b      	beq.n	24276 <__swsetup_r+0xaa>
   241de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   241e2:	0718      	lsls	r0, r3, #28
   241e4:	d51c      	bpl.n	24220 <__swsetup_r+0x54>
   241e6:	6922      	ldr	r2, [r4, #16]
   241e8:	b322      	cbz	r2, 24234 <__swsetup_r+0x68>
   241ea:	f013 0101 	ands.w	r1, r3, #1
   241ee:	d007      	beq.n	24200 <__swsetup_r+0x34>
   241f0:	6961      	ldr	r1, [r4, #20]
   241f2:	2000      	movs	r0, #0
   241f4:	4249      	negs	r1, r1
   241f6:	60a0      	str	r0, [r4, #8]
   241f8:	61a1      	str	r1, [r4, #24]
   241fa:	b13a      	cbz	r2, 2420c <__swsetup_r+0x40>
   241fc:	2000      	movs	r0, #0
   241fe:	bd38      	pop	{r3, r4, r5, pc}
   24200:	0798      	lsls	r0, r3, #30
   24202:	bf58      	it	pl
   24204:	6961      	ldrpl	r1, [r4, #20]
   24206:	60a1      	str	r1, [r4, #8]
   24208:	2a00      	cmp	r2, #0
   2420a:	d1f7      	bne.n	241fc <__swsetup_r+0x30>
   2420c:	0619      	lsls	r1, r3, #24
   2420e:	bf58      	it	pl
   24210:	4610      	movpl	r0, r2
   24212:	d5f4      	bpl.n	241fe <__swsetup_r+0x32>
   24214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   24218:	81a3      	strh	r3, [r4, #12]
   2421a:	f04f 30ff 	mov.w	r0, #4294967295
   2421e:	bd38      	pop	{r3, r4, r5, pc}
   24220:	06d9      	lsls	r1, r3, #27
   24222:	d52c      	bpl.n	2427e <__swsetup_r+0xb2>
   24224:	075a      	lsls	r2, r3, #29
   24226:	d412      	bmi.n	2424e <__swsetup_r+0x82>
   24228:	6922      	ldr	r2, [r4, #16]
   2422a:	f043 0308 	orr.w	r3, r3, #8
   2422e:	81a3      	strh	r3, [r4, #12]
   24230:	2a00      	cmp	r2, #0
   24232:	d1da      	bne.n	241ea <__swsetup_r+0x1e>
   24234:	f403 7120 	and.w	r1, r3, #640	@ 0x280
   24238:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   2423c:	d0d5      	beq.n	241ea <__swsetup_r+0x1e>
   2423e:	4621      	mov	r1, r4
   24240:	4628      	mov	r0, r5
   24242:	f004 f83f 	bl	282c4 <__smakebuf_r>
   24246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2424a:	6922      	ldr	r2, [r4, #16]
   2424c:	e7cd      	b.n	241ea <__swsetup_r+0x1e>
   2424e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   24250:	b151      	cbz	r1, 24268 <__swsetup_r+0x9c>
   24252:	f104 0240 	add.w	r2, r4, #64	@ 0x40
   24256:	4291      	cmp	r1, r2
   24258:	d004      	beq.n	24264 <__swsetup_r+0x98>
   2425a:	4628      	mov	r0, r5
   2425c:	f000 fafe 	bl	2485c <_free_r>
   24260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24264:	2200      	movs	r2, #0
   24266:	6322      	str	r2, [r4, #48]	@ 0x30
   24268:	6922      	ldr	r2, [r4, #16]
   2426a:	2100      	movs	r1, #0
   2426c:	e9c4 2100 	strd	r2, r1, [r4]
   24270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
   24274:	e7d9      	b.n	2422a <__swsetup_r+0x5e>
   24276:	4618      	mov	r0, r3
   24278:	f7ff fd72 	bl	23d60 <__sinit>
   2427c:	e7af      	b.n	241de <__swsetup_r+0x12>
   2427e:	2209      	movs	r2, #9
   24280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   24284:	602a      	str	r2, [r5, #0]
   24286:	81a3      	strh	r3, [r4, #12]
   24288:	e7c7      	b.n	2421a <__swsetup_r+0x4e>
   2428a:	bf00      	nop
   2428c:	100025a0 	.word	0x100025a0

00024290 <memmove>:
   24290:	4288      	cmp	r0, r1
   24292:	d90e      	bls.n	242b2 <memmove+0x22>
   24294:	188b      	adds	r3, r1, r2
   24296:	4283      	cmp	r3, r0
   24298:	d90b      	bls.n	242b2 <memmove+0x22>
   2429a:	eb00 0c02 	add.w	ip, r0, r2
   2429e:	2a00      	cmp	r2, #0
   242a0:	d06e      	beq.n	24380 <memmove+0xf0>
   242a2:	4662      	mov	r2, ip
   242a4:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   242a8:	f802 cd01 	strb.w	ip, [r2, #-1]!
   242ac:	4299      	cmp	r1, r3
   242ae:	d1f9      	bne.n	242a4 <memmove+0x14>
   242b0:	4770      	bx	lr
   242b2:	2a0f      	cmp	r2, #15
   242b4:	d80f      	bhi.n	242d6 <memmove+0x46>
   242b6:	4603      	mov	r3, r0
   242b8:	f102 3cff 	add.w	ip, r2, #4294967295
   242bc:	2a00      	cmp	r2, #0
   242be:	d05f      	beq.n	24380 <memmove+0xf0>
   242c0:	f10c 0c01 	add.w	ip, ip, #1
   242c4:	3b01      	subs	r3, #1
   242c6:	448c      	add	ip, r1
   242c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   242cc:	f803 2f01 	strb.w	r2, [r3, #1]!
   242d0:	4561      	cmp	r1, ip
   242d2:	d1f9      	bne.n	242c8 <memmove+0x38>
   242d4:	4770      	bx	lr
   242d6:	ea40 0301 	orr.w	r3, r0, r1
   242da:	079b      	lsls	r3, r3, #30
   242dc:	d151      	bne.n	24382 <memmove+0xf2>
   242de:	f1a2 0310 	sub.w	r3, r2, #16
   242e2:	b570      	push	{r4, r5, r6, lr}
   242e4:	f101 0c20 	add.w	ip, r1, #32
   242e8:	f023 050f 	bic.w	r5, r3, #15
   242ec:	f101 0e10 	add.w	lr, r1, #16
   242f0:	f100 0410 	add.w	r4, r0, #16
   242f4:	44ac      	add	ip, r5
   242f6:	091b      	lsrs	r3, r3, #4
   242f8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   242fc:	f844 5c10 	str.w	r5, [r4, #-16]
   24300:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   24304:	f844 5c0c 	str.w	r5, [r4, #-12]
   24308:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   2430c:	f844 5c08 	str.w	r5, [r4, #-8]
   24310:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   24314:	f844 5c04 	str.w	r5, [r4, #-4]
   24318:	f10e 0e10 	add.w	lr, lr, #16
   2431c:	45e6      	cmp	lr, ip
   2431e:	f104 0410 	add.w	r4, r4, #16
   24322:	d1e9      	bne.n	242f8 <memmove+0x68>
   24324:	3301      	adds	r3, #1
   24326:	f012 0f0c 	tst.w	r2, #12
   2432a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   2432e:	f002 040f 	and.w	r4, r2, #15
   24332:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   24336:	d028      	beq.n	2438a <memmove+0xfa>
   24338:	3c04      	subs	r4, #4
   2433a:	f024 0603 	bic.w	r6, r4, #3
   2433e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   24342:	441e      	add	r6, r3
   24344:	1f1c      	subs	r4, r3, #4
   24346:	468e      	mov	lr, r1
   24348:	f85e 5b04 	ldr.w	r5, [lr], #4
   2434c:	f844 5f04 	str.w	r5, [r4, #4]!
   24350:	42b4      	cmp	r4, r6
   24352:	d1f9      	bne.n	24348 <memmove+0xb8>
   24354:	f10c 0401 	add.w	r4, ip, #1
   24358:	f002 0203 	and.w	r2, r2, #3
   2435c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   24360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   24364:	f102 3cff 	add.w	ip, r2, #4294967295
   24368:	b14a      	cbz	r2, 2437e <memmove+0xee>
   2436a:	f10c 0c01 	add.w	ip, ip, #1
   2436e:	3b01      	subs	r3, #1
   24370:	448c      	add	ip, r1
   24372:	f811 2b01 	ldrb.w	r2, [r1], #1
   24376:	f803 2f01 	strb.w	r2, [r3, #1]!
   2437a:	4561      	cmp	r1, ip
   2437c:	d1f9      	bne.n	24372 <memmove+0xe2>
   2437e:	bd70      	pop	{r4, r5, r6, pc}
   24380:	4770      	bx	lr
   24382:	f102 3cff 	add.w	ip, r2, #4294967295
   24386:	4603      	mov	r3, r0
   24388:	e79a      	b.n	242c0 <memmove+0x30>
   2438a:	4622      	mov	r2, r4
   2438c:	e7ea      	b.n	24364 <memmove+0xd4>
   2438e:	bf00      	nop

00024390 <memset>:
   24390:	0783      	lsls	r3, r0, #30
   24392:	b530      	push	{r4, r5, lr}
   24394:	d047      	beq.n	24426 <memset+0x96>
   24396:	1e54      	subs	r4, r2, #1
   24398:	2a00      	cmp	r2, #0
   2439a:	d03e      	beq.n	2441a <memset+0x8a>
   2439c:	b2ca      	uxtb	r2, r1
   2439e:	4603      	mov	r3, r0
   243a0:	e001      	b.n	243a6 <memset+0x16>
   243a2:	3c01      	subs	r4, #1
   243a4:	d339      	bcc.n	2441a <memset+0x8a>
   243a6:	f803 2b01 	strb.w	r2, [r3], #1
   243aa:	079d      	lsls	r5, r3, #30
   243ac:	d1f9      	bne.n	243a2 <memset+0x12>
   243ae:	2c03      	cmp	r4, #3
   243b0:	d92c      	bls.n	2440c <memset+0x7c>
   243b2:	b2cd      	uxtb	r5, r1
   243b4:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   243b8:	2c0f      	cmp	r4, #15
   243ba:	eb05 4505 	add.w	r5, r5, r5, lsl #16
   243be:	d935      	bls.n	2442c <memset+0x9c>
   243c0:	f1a4 0210 	sub.w	r2, r4, #16
   243c4:	f022 0c0f 	bic.w	ip, r2, #15
   243c8:	f103 0e10 	add.w	lr, r3, #16
   243cc:	44e6      	add	lr, ip
   243ce:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   243d2:	461a      	mov	r2, r3
   243d4:	e9c2 5500 	strd	r5, r5, [r2]
   243d8:	e9c2 5502 	strd	r5, r5, [r2, #8]
   243dc:	3210      	adds	r2, #16
   243de:	4572      	cmp	r2, lr
   243e0:	d1f8      	bne.n	243d4 <memset+0x44>
   243e2:	f10c 0201 	add.w	r2, ip, #1
   243e6:	f014 0f0c 	tst.w	r4, #12
   243ea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   243ee:	f004 0c0f 	and.w	ip, r4, #15
   243f2:	d013      	beq.n	2441c <memset+0x8c>
   243f4:	f1ac 0304 	sub.w	r3, ip, #4
   243f8:	f023 0303 	bic.w	r3, r3, #3
   243fc:	3304      	adds	r3, #4
   243fe:	4413      	add	r3, r2
   24400:	f842 5b04 	str.w	r5, [r2], #4
   24404:	4293      	cmp	r3, r2
   24406:	d1fb      	bne.n	24400 <memset+0x70>
   24408:	f00c 0403 	and.w	r4, ip, #3
   2440c:	b12c      	cbz	r4, 2441a <memset+0x8a>
   2440e:	b2c9      	uxtb	r1, r1
   24410:	441c      	add	r4, r3
   24412:	f803 1b01 	strb.w	r1, [r3], #1
   24416:	42a3      	cmp	r3, r4
   24418:	d1fb      	bne.n	24412 <memset+0x82>
   2441a:	bd30      	pop	{r4, r5, pc}
   2441c:	4664      	mov	r4, ip
   2441e:	4613      	mov	r3, r2
   24420:	2c00      	cmp	r4, #0
   24422:	d1f4      	bne.n	2440e <memset+0x7e>
   24424:	e7f9      	b.n	2441a <memset+0x8a>
   24426:	4603      	mov	r3, r0
   24428:	4614      	mov	r4, r2
   2442a:	e7c0      	b.n	243ae <memset+0x1e>
   2442c:	461a      	mov	r2, r3
   2442e:	46a4      	mov	ip, r4
   24430:	e7e0      	b.n	243f4 <memset+0x64>
   24432:	bf00      	nop

00024434 <strcat>:
   24434:	0783      	lsls	r3, r0, #30
   24436:	b510      	push	{r4, lr}
   24438:	4604      	mov	r4, r0
   2443a:	d110      	bne.n	2445e <strcat+0x2a>
   2443c:	6802      	ldr	r2, [r0, #0]
   2443e:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   24442:	ea23 0302 	bic.w	r3, r3, r2
   24446:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   2444a:	d108      	bne.n	2445e <strcat+0x2a>
   2444c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   24450:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   24454:	ea23 0302 	bic.w	r3, r3, r2
   24458:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   2445c:	d0f6      	beq.n	2444c <strcat+0x18>
   2445e:	7803      	ldrb	r3, [r0, #0]
   24460:	b11b      	cbz	r3, 2446a <strcat+0x36>
   24462:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   24466:	2b00      	cmp	r3, #0
   24468:	d1fb      	bne.n	24462 <strcat+0x2e>
   2446a:	f000 f927 	bl	246bc <strcpy>
   2446e:	4620      	mov	r0, r4
   24470:	bd10      	pop	{r4, pc}
   24472:	bf00      	nop

00024474 <strncmp>:
   24474:	2a00      	cmp	r2, #0
   24476:	d03e      	beq.n	244f6 <strncmp+0x82>
   24478:	b530      	push	{r4, r5, lr}
   2447a:	4684      	mov	ip, r0
   2447c:	4604      	mov	r4, r0
   2447e:	4308      	orrs	r0, r1
   24480:	0780      	lsls	r0, r0, #30
   24482:	460b      	mov	r3, r1
   24484:	d12e      	bne.n	244e4 <strncmp+0x70>
   24486:	2a03      	cmp	r2, #3
   24488:	d807      	bhi.n	2449a <strncmp+0x26>
   2448a:	e02b      	b.n	244e4 <strncmp+0x70>
   2448c:	3a04      	subs	r2, #4
   2448e:	d025      	beq.n	244dc <strncmp+0x68>
   24490:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
   24494:	d122      	bne.n	244dc <strncmp+0x68>
   24496:	2a03      	cmp	r2, #3
   24498:	d922      	bls.n	244e0 <strncmp+0x6c>
   2449a:	6820      	ldr	r0, [r4, #0]
   2449c:	4619      	mov	r1, r3
   2449e:	f853 5b04 	ldr.w	r5, [r3], #4
   244a2:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
   244a6:	42a8      	cmp	r0, r5
   244a8:	46a4      	mov	ip, r4
   244aa:	ea2e 0e00 	bic.w	lr, lr, r0
   244ae:	f104 0404 	add.w	r4, r4, #4
   244b2:	d0eb      	beq.n	2448c <strncmp+0x18>
   244b4:	f89c 0000 	ldrb.w	r0, [ip]
   244b8:	780c      	ldrb	r4, [r1, #0]
   244ba:	4284      	cmp	r4, r0
   244bc:	d11d      	bne.n	244fa <strncmp+0x86>
   244be:	46e6      	mov	lr, ip
   244c0:	b168      	cbz	r0, 244de <strncmp+0x6a>
   244c2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   244c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   244ca:	eba2 030e 	sub.w	r3, r2, lr
   244ce:	42a0      	cmp	r0, r4
   244d0:	f103 33ff 	add.w	r3, r3, #4294967295
   244d4:	d111      	bne.n	244fa <strncmp+0x86>
   244d6:	eb1c 0303 	adds.w	r3, ip, r3
   244da:	d1f1      	bne.n	244c0 <strncmp+0x4c>
   244dc:	2000      	movs	r0, #0
   244de:	bd30      	pop	{r4, r5, pc}
   244e0:	46a4      	mov	ip, r4
   244e2:	4619      	mov	r1, r3
   244e4:	f89c 0000 	ldrb.w	r0, [ip]
   244e8:	780c      	ldrb	r4, [r1, #0]
   244ea:	42a0      	cmp	r0, r4
   244ec:	d105      	bne.n	244fa <strncmp+0x86>
   244ee:	2a01      	cmp	r2, #1
   244f0:	d0f4      	beq.n	244dc <strncmp+0x68>
   244f2:	46e6      	mov	lr, ip
   244f4:	e7e4      	b.n	244c0 <strncmp+0x4c>
   244f6:	4610      	mov	r0, r2
   244f8:	4770      	bx	lr
   244fa:	1b00      	subs	r0, r0, r4
   244fc:	bd30      	pop	{r4, r5, pc}
   244fe:	bf00      	nop

00024500 <strncpy>:
   24500:	ea40 0301 	orr.w	r3, r0, r1
   24504:	079b      	lsls	r3, r3, #30
   24506:	b510      	push	{r4, lr}
   24508:	d101      	bne.n	2450e <strncpy+0xe>
   2450a:	2a03      	cmp	r2, #3
   2450c:	d817      	bhi.n	2453e <strncpy+0x3e>
   2450e:	4684      	mov	ip, r0
   24510:	f101 3eff 	add.w	lr, r1, #4294967295
   24514:	e007      	b.n	24526 <strncpy+0x26>
   24516:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   2451a:	f803 1b01 	strb.w	r1, [r3], #1
   2451e:	1e54      	subs	r4, r2, #1
   24520:	b129      	cbz	r1, 2452e <strncpy+0x2e>
   24522:	469c      	mov	ip, r3
   24524:	4622      	mov	r2, r4
   24526:	4663      	mov	r3, ip
   24528:	2a00      	cmp	r2, #0
   2452a:	d1f4      	bne.n	24516 <strncpy+0x16>
   2452c:	bd10      	pop	{r4, pc}
   2452e:	4494      	add	ip, r2
   24530:	2c00      	cmp	r4, #0
   24532:	d0fb      	beq.n	2452c <strncpy+0x2c>
   24534:	f803 1b01 	strb.w	r1, [r3], #1
   24538:	4563      	cmp	r3, ip
   2453a:	d1fb      	bne.n	24534 <strncpy+0x34>
   2453c:	bd10      	pop	{r4, pc}
   2453e:	468e      	mov	lr, r1
   24540:	4684      	mov	ip, r0
   24542:	f8de 4000 	ldr.w	r4, [lr]
   24546:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
   2454a:	ea23 0304 	bic.w	r3, r3, r4
   2454e:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   24552:	4671      	mov	r1, lr
   24554:	f10e 0e04 	add.w	lr, lr, #4
   24558:	d1da      	bne.n	24510 <strncpy+0x10>
   2455a:	3a04      	subs	r2, #4
   2455c:	2a03      	cmp	r2, #3
   2455e:	f84c 4b04 	str.w	r4, [ip], #4
   24562:	d8ee      	bhi.n	24542 <strncpy+0x42>
   24564:	4671      	mov	r1, lr
   24566:	e7d3      	b.n	24510 <strncpy+0x10>

00024568 <strtok>:
   24568:	4a02      	ldr	r2, [pc, #8]	@ (24574 <strtok+0xc>)
   2456a:	6812      	ldr	r2, [r2, #0]
   2456c:	2301      	movs	r3, #1
   2456e:	3250      	adds	r2, #80	@ 0x50
   24570:	f000 b802 	b.w	24578 <__strtok_r>
   24574:	100025a0 	.word	0x100025a0

00024578 <__strtok_r>:
   24578:	b318      	cbz	r0, 245c2 <__strtok_r+0x4a>
   2457a:	b4f0      	push	{r4, r5, r6, r7}
   2457c:	4607      	mov	r7, r0
   2457e:	468c      	mov	ip, r1
   24580:	f817 5b01 	ldrb.w	r5, [r7], #1
   24584:	e001      	b.n	2458a <__strtok_r+0x12>
   24586:	42a5      	cmp	r5, r4
   24588:	d014      	beq.n	245b4 <__strtok_r+0x3c>
   2458a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2458e:	2c00      	cmp	r4, #0
   24590:	d1f9      	bne.n	24586 <__strtok_r+0xe>
   24592:	b1dd      	cbz	r5, 245cc <__strtok_r+0x54>
   24594:	463e      	mov	r6, r7
   24596:	460c      	mov	r4, r1
   24598:	f816 5b01 	ldrb.w	r5, [r6], #1
   2459c:	e000      	b.n	245a0 <__strtok_r+0x28>
   2459e:	b163      	cbz	r3, 245ba <__strtok_r+0x42>
   245a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   245a4:	429d      	cmp	r5, r3
   245a6:	d1fa      	bne.n	2459e <__strtok_r+0x26>
   245a8:	b14d      	cbz	r5, 245be <__strtok_r+0x46>
   245aa:	2300      	movs	r3, #0
   245ac:	703b      	strb	r3, [r7, #0]
   245ae:	6016      	str	r6, [r2, #0]
   245b0:	bcf0      	pop	{r4, r5, r6, r7}
   245b2:	4770      	bx	lr
   245b4:	b173      	cbz	r3, 245d4 <__strtok_r+0x5c>
   245b6:	4638      	mov	r0, r7
   245b8:	e7e0      	b.n	2457c <__strtok_r+0x4>
   245ba:	4637      	mov	r7, r6
   245bc:	e7ea      	b.n	24594 <__strtok_r+0x1c>
   245be:	462e      	mov	r6, r5
   245c0:	e7f5      	b.n	245ae <__strtok_r+0x36>
   245c2:	6810      	ldr	r0, [r2, #0]
   245c4:	2800      	cmp	r0, #0
   245c6:	d1d8      	bne.n	2457a <__strtok_r+0x2>
   245c8:	2000      	movs	r0, #0
   245ca:	4770      	bx	lr
   245cc:	6015      	str	r5, [r2, #0]
   245ce:	2000      	movs	r0, #0
   245d0:	bcf0      	pop	{r4, r5, r6, r7}
   245d2:	4770      	bx	lr
   245d4:	6017      	str	r7, [r2, #0]
   245d6:	7003      	strb	r3, [r0, #0]
   245d8:	e7ea      	b.n	245b0 <__strtok_r+0x38>
   245da:	bf00      	nop

000245dc <strtok_r>:
   245dc:	2301      	movs	r3, #1
   245de:	f7ff bfcb 	b.w	24578 <__strtok_r>
   245e2:	bf00      	nop

000245e4 <__locale_mb_cur_max>:
   245e4:	4b01      	ldr	r3, [pc, #4]	@ (245ec <__locale_mb_cur_max+0x8>)
   245e6:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
   245ea:	4770      	bx	lr
   245ec:	10002434 	.word	0x10002434

000245f0 <_localeconv_r>:
   245f0:	4800      	ldr	r0, [pc, #0]	@ (245f4 <_localeconv_r+0x4>)
   245f2:	4770      	bx	lr
   245f4:	10002524 	.word	0x10002524

000245f8 <_close_r>:
   245f8:	b538      	push	{r3, r4, r5, lr}
   245fa:	4d07      	ldr	r5, [pc, #28]	@ (24618 <_close_r+0x20>)
   245fc:	2200      	movs	r2, #0
   245fe:	4604      	mov	r4, r0
   24600:	4608      	mov	r0, r1
   24602:	602a      	str	r2, [r5, #0]
   24604:	f005 fbae 	bl	29d64 <_close>
   24608:	1c43      	adds	r3, r0, #1
   2460a:	d000      	beq.n	2460e <_close_r+0x16>
   2460c:	bd38      	pop	{r3, r4, r5, pc}
   2460e:	682b      	ldr	r3, [r5, #0]
   24610:	2b00      	cmp	r3, #0
   24612:	d0fb      	beq.n	2460c <_close_r+0x14>
   24614:	6023      	str	r3, [r4, #0]
   24616:	bd38      	pop	{r3, r4, r5, pc}
   24618:	10054c6c 	.word	0x10054c6c

0002461c <_lseek_r>:
   2461c:	b538      	push	{r3, r4, r5, lr}
   2461e:	460c      	mov	r4, r1
   24620:	4d08      	ldr	r5, [pc, #32]	@ (24644 <_lseek_r+0x28>)
   24622:	4684      	mov	ip, r0
   24624:	4611      	mov	r1, r2
   24626:	4620      	mov	r0, r4
   24628:	461a      	mov	r2, r3
   2462a:	2300      	movs	r3, #0
   2462c:	602b      	str	r3, [r5, #0]
   2462e:	4664      	mov	r4, ip
   24630:	f005 fb42 	bl	29cb8 <_lseek>
   24634:	1c43      	adds	r3, r0, #1
   24636:	d000      	beq.n	2463a <_lseek_r+0x1e>
   24638:	bd38      	pop	{r3, r4, r5, pc}
   2463a:	682b      	ldr	r3, [r5, #0]
   2463c:	2b00      	cmp	r3, #0
   2463e:	d0fb      	beq.n	24638 <_lseek_r+0x1c>
   24640:	6023      	str	r3, [r4, #0]
   24642:	bd38      	pop	{r3, r4, r5, pc}
   24644:	10054c6c 	.word	0x10054c6c

00024648 <_read_r>:
   24648:	b538      	push	{r3, r4, r5, lr}
   2464a:	460c      	mov	r4, r1
   2464c:	4d08      	ldr	r5, [pc, #32]	@ (24670 <_read_r+0x28>)
   2464e:	4684      	mov	ip, r0
   24650:	4611      	mov	r1, r2
   24652:	4620      	mov	r0, r4
   24654:	461a      	mov	r2, r3
   24656:	2300      	movs	r3, #0
   24658:	602b      	str	r3, [r5, #0]
   2465a:	4664      	mov	r4, ip
   2465c:	f005 fa88 	bl	29b70 <_read>
   24660:	1c43      	adds	r3, r0, #1
   24662:	d000      	beq.n	24666 <_read_r+0x1e>
   24664:	bd38      	pop	{r3, r4, r5, pc}
   24666:	682b      	ldr	r3, [r5, #0]
   24668:	2b00      	cmp	r3, #0
   2466a:	d0fb      	beq.n	24664 <_read_r+0x1c>
   2466c:	6023      	str	r3, [r4, #0]
   2466e:	bd38      	pop	{r3, r4, r5, pc}
   24670:	10054c6c 	.word	0x10054c6c

00024674 <_write_r>:
   24674:	b538      	push	{r3, r4, r5, lr}
   24676:	460c      	mov	r4, r1
   24678:	4d08      	ldr	r5, [pc, #32]	@ (2469c <_write_r+0x28>)
   2467a:	4684      	mov	ip, r0
   2467c:	4611      	mov	r1, r2
   2467e:	4620      	mov	r0, r4
   24680:	461a      	mov	r2, r3
   24682:	2300      	movs	r3, #0
   24684:	602b      	str	r3, [r5, #0]
   24686:	4664      	mov	r4, ip
   24688:	f005 fb18 	bl	29cbc <_write>
   2468c:	1c43      	adds	r3, r0, #1
   2468e:	d000      	beq.n	24692 <_write_r+0x1e>
   24690:	bd38      	pop	{r3, r4, r5, pc}
   24692:	682b      	ldr	r3, [r5, #0]
   24694:	2b00      	cmp	r3, #0
   24696:	d0fb      	beq.n	24690 <_write_r+0x1c>
   24698:	6023      	str	r3, [r4, #0]
   2469a:	bd38      	pop	{r3, r4, r5, pc}
   2469c:	10054c6c 	.word	0x10054c6c

000246a0 <__errno>:
   246a0:	4b01      	ldr	r3, [pc, #4]	@ (246a8 <__errno+0x8>)
   246a2:	6818      	ldr	r0, [r3, #0]
   246a4:	4770      	bx	lr
   246a6:	bf00      	nop
   246a8:	100025a0 	.word	0x100025a0

000246ac <__retarget_lock_init_recursive>:
   246ac:	4770      	bx	lr
   246ae:	bf00      	nop

000246b0 <__retarget_lock_close_recursive>:
   246b0:	4770      	bx	lr
   246b2:	bf00      	nop

000246b4 <__retarget_lock_acquire_recursive>:
   246b4:	4770      	bx	lr
   246b6:	bf00      	nop

000246b8 <__retarget_lock_release_recursive>:
   246b8:	4770      	bx	lr
   246ba:	bf00      	nop

000246bc <strcpy>:
   246bc:	ea80 0201 	eor.w	r2, r0, r1
   246c0:	4684      	mov	ip, r0
   246c2:	f012 0f03 	tst.w	r2, #3
   246c6:	d14f      	bne.n	24768 <strcpy+0xac>
   246c8:	f011 0f03 	tst.w	r1, #3
   246cc:	d132      	bne.n	24734 <strcpy+0x78>
   246ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
   246d2:	f011 0f04 	tst.w	r1, #4
   246d6:	f851 3b04 	ldr.w	r3, [r1], #4
   246da:	d00b      	beq.n	246f4 <strcpy+0x38>
   246dc:	f1a3 3201 	sub.w	r2, r3, #16843009	@ 0x1010101
   246e0:	439a      	bics	r2, r3
   246e2:	f012 3f80 	tst.w	r2, #2155905152	@ 0x80808080
   246e6:	bf04      	itt	eq
   246e8:	f84c 3b04 	streq.w	r3, [ip], #4
   246ec:	f851 3b04 	ldreq.w	r3, [r1], #4
   246f0:	d116      	bne.n	24720 <strcpy+0x64>
   246f2:	bf00      	nop
   246f4:	f851 4b04 	ldr.w	r4, [r1], #4
   246f8:	f1a3 3201 	sub.w	r2, r3, #16843009	@ 0x1010101
   246fc:	439a      	bics	r2, r3
   246fe:	f012 3f80 	tst.w	r2, #2155905152	@ 0x80808080
   24702:	f1a4 3201 	sub.w	r2, r4, #16843009	@ 0x1010101
   24706:	d10b      	bne.n	24720 <strcpy+0x64>
   24708:	f84c 3b04 	str.w	r3, [ip], #4
   2470c:	43a2      	bics	r2, r4
   2470e:	f012 3f80 	tst.w	r2, #2155905152	@ 0x80808080
   24712:	bf04      	itt	eq
   24714:	f851 3b04 	ldreq.w	r3, [r1], #4
   24718:	f84c 4b04 	streq.w	r4, [ip], #4
   2471c:	d0ea      	beq.n	246f4 <strcpy+0x38>
   2471e:	4623      	mov	r3, r4
   24720:	f80c 3b01 	strb.w	r3, [ip], #1
   24724:	f013 0fff 	tst.w	r3, #255	@ 0xff
   24728:	ea4f 2333 	mov.w	r3, r3, ror #8
   2472c:	d1f8      	bne.n	24720 <strcpy+0x64>
   2472e:	f85d 4b04 	ldr.w	r4, [sp], #4
   24732:	4770      	bx	lr
   24734:	f011 0f01 	tst.w	r1, #1
   24738:	d006      	beq.n	24748 <strcpy+0x8c>
   2473a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2473e:	f80c 2b01 	strb.w	r2, [ip], #1
   24742:	2a00      	cmp	r2, #0
   24744:	bf08      	it	eq
   24746:	4770      	bxeq	lr
   24748:	f011 0f02 	tst.w	r1, #2
   2474c:	d0bf      	beq.n	246ce <strcpy+0x12>
   2474e:	f831 2b02 	ldrh.w	r2, [r1], #2
   24752:	f012 0fff 	tst.w	r2, #255	@ 0xff
   24756:	bf16      	itet	ne
   24758:	f82c 2b02 	strhne.w	r2, [ip], #2
   2475c:	f88c 2000 	strbeq.w	r2, [ip]
   24760:	f412 4f7f 	tstne.w	r2, #65280	@ 0xff00
   24764:	d1b3      	bne.n	246ce <strcpy+0x12>
   24766:	4770      	bx	lr
   24768:	f811 2b01 	ldrb.w	r2, [r1], #1
   2476c:	f80c 2b01 	strb.w	r2, [ip], #1
   24770:	2a00      	cmp	r2, #0
   24772:	d1f9      	bne.n	24768 <strcpy+0xac>
   24774:	4770      	bx	lr
   24776:	bf00      	nop

00024778 <nan>:
   24778:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 24780 <nan+0x8>
   2477c:	4770      	bx	lr
   2477e:	bf00      	nop
   24780:	00000000 	.word	0x00000000
   24784:	7ff80000 	.word	0x7ff80000

00024788 <nanf>:
   24788:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 24790 <nanf+0x8>
   2478c:	4770      	bx	lr
   2478e:	bf00      	nop
   24790:	7fc00000 	.word	0x7fc00000

00024794 <abort>:
   24794:	b508      	push	{r3, lr}
   24796:	2006      	movs	r0, #6
   24798:	f003 fe02 	bl	283a0 <raise>
   2479c:	2001      	movs	r0, #1
   2479e:	f005 f9b7 	bl	29b10 <_exit>
   247a2:	bf00      	nop

000247a4 <_malloc_trim_r>:
   247a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   247a8:	4606      	mov	r6, r0
   247aa:	2008      	movs	r0, #8
   247ac:	4689      	mov	r9, r1
   247ae:	f003 fe75 	bl	2849c <sysconf>
   247b2:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 24858 <_malloc_trim_r+0xb4>
   247b6:	4605      	mov	r5, r0
   247b8:	4630      	mov	r0, r6
   247ba:	f001 f82d 	bl	25818 <__malloc_lock>
   247be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   247c2:	685f      	ldr	r7, [r3, #4]
   247c4:	f027 0703 	bic.w	r7, r7, #3
   247c8:	f1a7 0411 	sub.w	r4, r7, #17
   247cc:	eba4 0409 	sub.w	r4, r4, r9
   247d0:	442c      	add	r4, r5
   247d2:	fbb4 f4f5 	udiv	r4, r4, r5
   247d6:	3c01      	subs	r4, #1
   247d8:	fb05 f404 	mul.w	r4, r5, r4
   247dc:	42a5      	cmp	r5, r4
   247de:	dc08      	bgt.n	247f2 <_malloc_trim_r+0x4e>
   247e0:	2100      	movs	r1, #0
   247e2:	4630      	mov	r0, r6
   247e4:	f003 fe48 	bl	28478 <_sbrk_r>
   247e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   247ec:	443b      	add	r3, r7
   247ee:	4298      	cmp	r0, r3
   247f0:	d005      	beq.n	247fe <_malloc_trim_r+0x5a>
   247f2:	4630      	mov	r0, r6
   247f4:	f001 f816 	bl	25824 <__malloc_unlock>
   247f8:	2000      	movs	r0, #0
   247fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   247fe:	4261      	negs	r1, r4
   24800:	4630      	mov	r0, r6
   24802:	f003 fe39 	bl	28478 <_sbrk_r>
   24806:	3001      	adds	r0, #1
   24808:	d00f      	beq.n	2482a <_malloc_trim_r+0x86>
   2480a:	4a11      	ldr	r2, [pc, #68]	@ (24850 <_malloc_trim_r+0xac>)
   2480c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24810:	1b3f      	subs	r7, r7, r4
   24812:	f047 0701 	orr.w	r7, r7, #1
   24816:	605f      	str	r7, [r3, #4]
   24818:	6813      	ldr	r3, [r2, #0]
   2481a:	4630      	mov	r0, r6
   2481c:	1b1b      	subs	r3, r3, r4
   2481e:	6013      	str	r3, [r2, #0]
   24820:	f001 f800 	bl	25824 <__malloc_unlock>
   24824:	2001      	movs	r0, #1
   24826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2482a:	2100      	movs	r1, #0
   2482c:	4630      	mov	r0, r6
   2482e:	f003 fe23 	bl	28478 <_sbrk_r>
   24832:	f8d8 2008 	ldr.w	r2, [r8, #8]
   24836:	1a83      	subs	r3, r0, r2
   24838:	2b0f      	cmp	r3, #15
   2483a:	ddda      	ble.n	247f2 <_malloc_trim_r+0x4e>
   2483c:	f043 0301 	orr.w	r3, r3, #1
   24840:	6053      	str	r3, [r2, #4]
   24842:	4b04      	ldr	r3, [pc, #16]	@ (24854 <_malloc_trim_r+0xb0>)
   24844:	4902      	ldr	r1, [pc, #8]	@ (24850 <_malloc_trim_r+0xac>)
   24846:	681b      	ldr	r3, [r3, #0]
   24848:	1ac0      	subs	r0, r0, r3
   2484a:	6008      	str	r0, [r1, #0]
   2484c:	e7d1      	b.n	247f2 <_malloc_trim_r+0x4e>
   2484e:	bf00      	nop
   24850:	10054c78 	.word	0x10054c78
   24854:	100026e8 	.word	0x100026e8
   24858:	100026f0 	.word	0x100026f0

0002485c <_free_r>:
   2485c:	2900      	cmp	r1, #0
   2485e:	d07c      	beq.n	2495a <_free_r+0xfe>
   24860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24864:	460c      	mov	r4, r1
   24866:	4680      	mov	r8, r0
   24868:	f000 ffd6 	bl	25818 <__malloc_lock>
   2486c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24870:	4f75      	ldr	r7, [pc, #468]	@ (24a48 <_free_r+0x1ec>)
   24872:	f1a4 0508 	sub.w	r5, r4, #8
   24876:	f023 0101 	bic.w	r1, r3, #1
   2487a:	1868      	adds	r0, r5, r1
   2487c:	68be      	ldr	r6, [r7, #8]
   2487e:	6842      	ldr	r2, [r0, #4]
   24880:	4286      	cmp	r6, r0
   24882:	f022 0203 	bic.w	r2, r2, #3
   24886:	f000 8083 	beq.w	24990 <_free_r+0x134>
   2488a:	07de      	lsls	r6, r3, #31
   2488c:	6042      	str	r2, [r0, #4]
   2488e:	eb00 0c02 	add.w	ip, r0, r2
   24892:	d433      	bmi.n	248fc <_free_r+0xa0>
   24894:	f854 4c08 	ldr.w	r4, [r4, #-8]
   24898:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2489c:	1b2d      	subs	r5, r5, r4
   2489e:	4421      	add	r1, r4
   248a0:	68ac      	ldr	r4, [r5, #8]
   248a2:	f107 0c08 	add.w	ip, r7, #8
   248a6:	4564      	cmp	r4, ip
   248a8:	f003 0301 	and.w	r3, r3, #1
   248ac:	d064      	beq.n	24978 <_free_r+0x11c>
   248ae:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   248b2:	f8c4 e00c 	str.w	lr, [r4, #12]
   248b6:	f8ce 4008 	str.w	r4, [lr, #8]
   248ba:	2b00      	cmp	r3, #0
   248bc:	f000 8081 	beq.w	249c2 <_free_r+0x166>
   248c0:	f041 0301 	orr.w	r3, r1, #1
   248c4:	606b      	str	r3, [r5, #4]
   248c6:	6001      	str	r1, [r0, #0]
   248c8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   248cc:	d222      	bcs.n	24914 <_free_r+0xb8>
   248ce:	6878      	ldr	r0, [r7, #4]
   248d0:	08cb      	lsrs	r3, r1, #3
   248d2:	2201      	movs	r2, #1
   248d4:	0949      	lsrs	r1, r1, #5
   248d6:	3301      	adds	r3, #1
   248d8:	408a      	lsls	r2, r1
   248da:	4302      	orrs	r2, r0
   248dc:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   248e0:	607a      	str	r2, [r7, #4]
   248e2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   248e6:	3a08      	subs	r2, #8
   248e8:	e9c5 1202 	strd	r1, r2, [r5, #8]
   248ec:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   248f0:	60cd      	str	r5, [r1, #12]
   248f2:	4640      	mov	r0, r8
   248f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   248f8:	f000 bf94 	b.w	25824 <__malloc_unlock>
   248fc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   24900:	07db      	lsls	r3, r3, #31
   24902:	d52b      	bpl.n	2495c <_free_r+0x100>
   24904:	f041 0301 	orr.w	r3, r1, #1
   24908:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   2490c:	f844 3c04 	str.w	r3, [r4, #-4]
   24910:	6001      	str	r1, [r0, #0]
   24912:	d3dc      	bcc.n	248ce <_free_r+0x72>
   24914:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
   24918:	ea4f 2351 	mov.w	r3, r1, lsr #9
   2491c:	d253      	bcs.n	249c6 <_free_r+0x16a>
   2491e:	098b      	lsrs	r3, r1, #6
   24920:	f103 0039 	add.w	r0, r3, #57	@ 0x39
   24924:	f103 0238 	add.w	r2, r3, #56	@ 0x38
   24928:	00c3      	lsls	r3, r0, #3
   2492a:	18f8      	adds	r0, r7, r3
   2492c:	58fb      	ldr	r3, [r7, r3]
   2492e:	3808      	subs	r0, #8
   24930:	4298      	cmp	r0, r3
   24932:	d103      	bne.n	2493c <_free_r+0xe0>
   24934:	e061      	b.n	249fa <_free_r+0x19e>
   24936:	689b      	ldr	r3, [r3, #8]
   24938:	4298      	cmp	r0, r3
   2493a:	d004      	beq.n	24946 <_free_r+0xea>
   2493c:	685a      	ldr	r2, [r3, #4]
   2493e:	f022 0203 	bic.w	r2, r2, #3
   24942:	428a      	cmp	r2, r1
   24944:	d8f7      	bhi.n	24936 <_free_r+0xda>
   24946:	68d8      	ldr	r0, [r3, #12]
   24948:	e9c5 3002 	strd	r3, r0, [r5, #8]
   2494c:	6085      	str	r5, [r0, #8]
   2494e:	60dd      	str	r5, [r3, #12]
   24950:	4640      	mov	r0, r8
   24952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24956:	f000 bf65 	b.w	25824 <__malloc_unlock>
   2495a:	4770      	bx	lr
   2495c:	4411      	add	r1, r2
   2495e:	f107 0c08 	add.w	ip, r7, #8
   24962:	6883      	ldr	r3, [r0, #8]
   24964:	4563      	cmp	r3, ip
   24966:	d03f      	beq.n	249e8 <_free_r+0x18c>
   24968:	68c2      	ldr	r2, [r0, #12]
   2496a:	60da      	str	r2, [r3, #12]
   2496c:	6093      	str	r3, [r2, #8]
   2496e:	f041 0301 	orr.w	r3, r1, #1
   24972:	606b      	str	r3, [r5, #4]
   24974:	5069      	str	r1, [r5, r1]
   24976:	e7a7      	b.n	248c8 <_free_r+0x6c>
   24978:	2b00      	cmp	r3, #0
   2497a:	d15f      	bne.n	24a3c <_free_r+0x1e0>
   2497c:	440a      	add	r2, r1
   2497e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   24982:	60cb      	str	r3, [r1, #12]
   24984:	6099      	str	r1, [r3, #8]
   24986:	f042 0301 	orr.w	r3, r2, #1
   2498a:	606b      	str	r3, [r5, #4]
   2498c:	50aa      	str	r2, [r5, r2]
   2498e:	e7b0      	b.n	248f2 <_free_r+0x96>
   24990:	07db      	lsls	r3, r3, #31
   24992:	440a      	add	r2, r1
   24994:	d407      	bmi.n	249a6 <_free_r+0x14a>
   24996:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2499a:	1aed      	subs	r5, r5, r3
   2499c:	441a      	add	r2, r3
   2499e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
   249a2:	60cb      	str	r3, [r1, #12]
   249a4:	6099      	str	r1, [r3, #8]
   249a6:	f042 0301 	orr.w	r3, r2, #1
   249aa:	606b      	str	r3, [r5, #4]
   249ac:	4b27      	ldr	r3, [pc, #156]	@ (24a4c <_free_r+0x1f0>)
   249ae:	60bd      	str	r5, [r7, #8]
   249b0:	681b      	ldr	r3, [r3, #0]
   249b2:	4293      	cmp	r3, r2
   249b4:	d89d      	bhi.n	248f2 <_free_r+0x96>
   249b6:	4b26      	ldr	r3, [pc, #152]	@ (24a50 <_free_r+0x1f4>)
   249b8:	4640      	mov	r0, r8
   249ba:	6819      	ldr	r1, [r3, #0]
   249bc:	f7ff fef2 	bl	247a4 <_malloc_trim_r>
   249c0:	e797      	b.n	248f2 <_free_r+0x96>
   249c2:	4411      	add	r1, r2
   249c4:	e7cd      	b.n	24962 <_free_r+0x106>
   249c6:	2b14      	cmp	r3, #20
   249c8:	d908      	bls.n	249dc <_free_r+0x180>
   249ca:	2b54      	cmp	r3, #84	@ 0x54
   249cc:	d81d      	bhi.n	24a0a <_free_r+0x1ae>
   249ce:	0b0b      	lsrs	r3, r1, #12
   249d0:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
   249d4:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
   249d8:	00c3      	lsls	r3, r0, #3
   249da:	e7a6      	b.n	2492a <_free_r+0xce>
   249dc:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
   249e0:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
   249e4:	00c3      	lsls	r3, r0, #3
   249e6:	e7a0      	b.n	2492a <_free_r+0xce>
   249e8:	f041 0301 	orr.w	r3, r1, #1
   249ec:	e9c7 5504 	strd	r5, r5, [r7, #16]
   249f0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   249f4:	606b      	str	r3, [r5, #4]
   249f6:	5069      	str	r1, [r5, r1]
   249f8:	e77b      	b.n	248f2 <_free_r+0x96>
   249fa:	6879      	ldr	r1, [r7, #4]
   249fc:	1092      	asrs	r2, r2, #2
   249fe:	2401      	movs	r4, #1
   24a00:	fa04 f202 	lsl.w	r2, r4, r2
   24a04:	430a      	orrs	r2, r1
   24a06:	607a      	str	r2, [r7, #4]
   24a08:	e79e      	b.n	24948 <_free_r+0xec>
   24a0a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   24a0e:	d806      	bhi.n	24a1e <_free_r+0x1c2>
   24a10:	0bcb      	lsrs	r3, r1, #15
   24a12:	f103 0078 	add.w	r0, r3, #120	@ 0x78
   24a16:	f103 0277 	add.w	r2, r3, #119	@ 0x77
   24a1a:	00c3      	lsls	r3, r0, #3
   24a1c:	e785      	b.n	2492a <_free_r+0xce>
   24a1e:	f240 5254 	movw	r2, #1364	@ 0x554
   24a22:	4293      	cmp	r3, r2
   24a24:	d806      	bhi.n	24a34 <_free_r+0x1d8>
   24a26:	0c8b      	lsrs	r3, r1, #18
   24a28:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
   24a2c:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
   24a30:	00c3      	lsls	r3, r0, #3
   24a32:	e77a      	b.n	2492a <_free_r+0xce>
   24a34:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   24a38:	227e      	movs	r2, #126	@ 0x7e
   24a3a:	e776      	b.n	2492a <_free_r+0xce>
   24a3c:	f041 0301 	orr.w	r3, r1, #1
   24a40:	606b      	str	r3, [r5, #4]
   24a42:	6001      	str	r1, [r0, #0]
   24a44:	e755      	b.n	248f2 <_free_r+0x96>
   24a46:	bf00      	nop
   24a48:	100026f0 	.word	0x100026f0
   24a4c:	100026ec 	.word	0x100026ec
   24a50:	10054ca8 	.word	0x10054ca8

00024a54 <rshift>:
   24a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a58:	6904      	ldr	r4, [r0, #16]
   24a5a:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   24a5e:	dc05      	bgt.n	24a6c <rshift+0x18>
   24a60:	2300      	movs	r3, #0
   24a62:	6103      	str	r3, [r0, #16]
   24a64:	2300      	movs	r3, #0
   24a66:	6143      	str	r3, [r0, #20]
   24a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24a6c:	f100 0514 	add.w	r5, r0, #20
   24a70:	114e      	asrs	r6, r1, #5
   24a72:	f011 0c1f 	ands.w	ip, r1, #31
   24a76:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
   24a7a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
   24a7e:	d021      	beq.n	24ac4 <rshift+0x70>
   24a80:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   24a84:	3304      	adds	r3, #4
   24a86:	459e      	cmp	lr, r3
   24a88:	fa21 f10c 	lsr.w	r1, r1, ip
   24a8c:	f1cc 0820 	rsb	r8, ip, #32
   24a90:	d92d      	bls.n	24aee <rshift+0x9a>
   24a92:	462f      	mov	r7, r5
   24a94:	681a      	ldr	r2, [r3, #0]
   24a96:	fa02 f208 	lsl.w	r2, r2, r8
   24a9a:	430a      	orrs	r2, r1
   24a9c:	f847 2b04 	str.w	r2, [r7], #4
   24aa0:	f853 1b04 	ldr.w	r1, [r3], #4
   24aa4:	459e      	cmp	lr, r3
   24aa6:	fa21 f10c 	lsr.w	r1, r1, ip
   24aaa:	d8f3      	bhi.n	24a94 <rshift+0x40>
   24aac:	1ba3      	subs	r3, r4, r6
   24aae:	009b      	lsls	r3, r3, #2
   24ab0:	3b05      	subs	r3, #5
   24ab2:	089b      	lsrs	r3, r3, #2
   24ab4:	3301      	adds	r3, #1
   24ab6:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   24aba:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
   24abe:	b179      	cbz	r1, 24ae0 <rshift+0x8c>
   24ac0:	3404      	adds	r4, #4
   24ac2:	e00d      	b.n	24ae0 <rshift+0x8c>
   24ac4:	459e      	cmp	lr, r3
   24ac6:	bf88      	it	hi
   24ac8:	f100 0210 	addhi.w	r2, r0, #16
   24acc:	d9c8      	bls.n	24a60 <rshift+0xc>
   24ace:	f853 1b04 	ldr.w	r1, [r3], #4
   24ad2:	f842 1f04 	str.w	r1, [r2, #4]!
   24ad6:	459e      	cmp	lr, r3
   24ad8:	d8f9      	bhi.n	24ace <rshift+0x7a>
   24ada:	1ba4      	subs	r4, r4, r6
   24adc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   24ae0:	1b63      	subs	r3, r4, r5
   24ae2:	109b      	asrs	r3, r3, #2
   24ae4:	42ac      	cmp	r4, r5
   24ae6:	6103      	str	r3, [r0, #16]
   24ae8:	d0bc      	beq.n	24a64 <rshift+0x10>
   24aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24aee:	6141      	str	r1, [r0, #20]
   24af0:	2900      	cmp	r1, #0
   24af2:	d0b5      	beq.n	24a60 <rshift+0xc>
   24af4:	462c      	mov	r4, r5
   24af6:	e7e3      	b.n	24ac0 <rshift+0x6c>

00024af8 <__gethex>:
   24af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24afc:	680f      	ldr	r7, [r1, #0]
   24afe:	b085      	sub	sp, #20
   24b00:	e9cd 2000 	strd	r2, r0, [sp]
   24b04:	78ba      	ldrb	r2, [r7, #2]
   24b06:	9303      	str	r3, [sp, #12]
   24b08:	2a30      	cmp	r2, #48	@ 0x30
   24b0a:	4689      	mov	r9, r1
   24b0c:	f040 81ec 	bne.w	24ee8 <__gethex+0x3f0>
   24b10:	1cfb      	adds	r3, r7, #3
   24b12:	781a      	ldrb	r2, [r3, #0]
   24b14:	2a30      	cmp	r2, #48	@ 0x30
   24b16:	461c      	mov	r4, r3
   24b18:	f103 0301 	add.w	r3, r3, #1
   24b1c:	d0f9      	beq.n	24b12 <__gethex+0x1a>
   24b1e:	1be7      	subs	r7, r4, r7
   24b20:	3f02      	subs	r7, #2
   24b22:	f8df 8300 	ldr.w	r8, [pc, #768]	@ 24e24 <__gethex+0x32c>
   24b26:	f818 3002 	ldrb.w	r3, [r8, r2]
   24b2a:	2b00      	cmp	r3, #0
   24b2c:	f000 80ee 	beq.w	24d0c <__gethex+0x214>
   24b30:	7823      	ldrb	r3, [r4, #0]
   24b32:	f818 3003 	ldrb.w	r3, [r8, r3]
   24b36:	f04f 0a00 	mov.w	sl, #0
   24b3a:	4655      	mov	r5, sl
   24b3c:	2b00      	cmp	r3, #0
   24b3e:	f000 816d 	beq.w	24e1c <__gethex+0x324>
   24b42:	4626      	mov	r6, r4
   24b44:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   24b48:	f818 3003 	ldrb.w	r3, [r8, r3]
   24b4c:	2b00      	cmp	r3, #0
   24b4e:	d1f9      	bne.n	24b44 <__gethex+0x4c>
   24b50:	49b3      	ldr	r1, [pc, #716]	@ (24e20 <__gethex+0x328>)
   24b52:	2201      	movs	r2, #1
   24b54:	4630      	mov	r0, r6
   24b56:	f7ff fc8d 	bl	24474 <strncmp>
   24b5a:	4683      	mov	fp, r0
   24b5c:	2800      	cmp	r0, #0
   24b5e:	d04c      	beq.n	24bfa <__gethex+0x102>
   24b60:	7832      	ldrb	r2, [r6, #0]
   24b62:	2d00      	cmp	r5, #0
   24b64:	f000 81a1 	beq.w	24eaa <__gethex+0x3b2>
   24b68:	1bab      	subs	r3, r5, r6
   24b6a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   24b6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
   24b72:	2a50      	cmp	r2, #80	@ 0x50
   24b74:	4635      	mov	r5, r6
   24b76:	d04c      	beq.n	24c12 <__gethex+0x11a>
   24b78:	f8c9 6000 	str.w	r6, [r9]
   24b7c:	f1ba 0f00 	cmp.w	sl, #0
   24b80:	d174      	bne.n	24c6c <__gethex+0x174>
   24b82:	1b2a      	subs	r2, r5, r4
   24b84:	3a01      	subs	r2, #1
   24b86:	2a07      	cmp	r2, #7
   24b88:	4651      	mov	r1, sl
   24b8a:	dd04      	ble.n	24b96 <__gethex+0x9e>
   24b8c:	1052      	asrs	r2, r2, #1
   24b8e:	2a07      	cmp	r2, #7
   24b90:	f101 0101 	add.w	r1, r1, #1
   24b94:	dcfa      	bgt.n	24b8c <__gethex+0x94>
   24b96:	9801      	ldr	r0, [sp, #4]
   24b98:	f000 fe4a 	bl	25830 <_Balloc>
   24b9c:	4682      	mov	sl, r0
   24b9e:	2800      	cmp	r0, #0
   24ba0:	f000 825f 	beq.w	25062 <__gethex+0x56a>
   24ba4:	f100 0614 	add.w	r6, r0, #20
   24ba8:	42a5      	cmp	r5, r4
   24baa:	9602      	str	r6, [sp, #8]
   24bac:	d966      	bls.n	24c7c <__gethex+0x184>
   24bae:	2700      	movs	r7, #0
   24bb0:	46b9      	mov	r9, r7
   24bb2:	e00d      	b.n	24bd0 <__gethex+0xd8>
   24bb4:	2f20      	cmp	r7, #32
   24bb6:	d01a      	beq.n	24bee <__gethex+0xf6>
   24bb8:	463a      	mov	r2, r7
   24bba:	3704      	adds	r7, #4
   24bbc:	782b      	ldrb	r3, [r5, #0]
   24bbe:	f818 3003 	ldrb.w	r3, [r8, r3]
   24bc2:	f003 030f 	and.w	r3, r3, #15
   24bc6:	4093      	lsls	r3, r2
   24bc8:	ea49 0903 	orr.w	r9, r9, r3
   24bcc:	42a5      	cmp	r5, r4
   24bce:	d058      	beq.n	24c82 <__gethex+0x18a>
   24bd0:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   24bd4:	2b2e      	cmp	r3, #46	@ 0x2e
   24bd6:	d1ed      	bne.n	24bb4 <__gethex+0xbc>
   24bd8:	42a5      	cmp	r5, r4
   24bda:	d3eb      	bcc.n	24bb4 <__gethex+0xbc>
   24bdc:	4990      	ldr	r1, [pc, #576]	@ (24e20 <__gethex+0x328>)
   24bde:	2201      	movs	r2, #1
   24be0:	4628      	mov	r0, r5
   24be2:	f7ff fc47 	bl	24474 <strncmp>
   24be6:	2800      	cmp	r0, #0
   24be8:	d0f0      	beq.n	24bcc <__gethex+0xd4>
   24bea:	2f20      	cmp	r7, #32
   24bec:	d1e4      	bne.n	24bb8 <__gethex+0xc0>
   24bee:	2200      	movs	r2, #0
   24bf0:	f846 9b04 	str.w	r9, [r6], #4
   24bf4:	2704      	movs	r7, #4
   24bf6:	4691      	mov	r9, r2
   24bf8:	e7e0      	b.n	24bbc <__gethex+0xc4>
   24bfa:	2d00      	cmp	r5, #0
   24bfc:	f000 8165 	beq.w	24eca <__gethex+0x3d2>
   24c00:	7832      	ldrb	r2, [r6, #0]
   24c02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
   24c06:	1bab      	subs	r3, r5, r6
   24c08:	2a50      	cmp	r2, #80	@ 0x50
   24c0a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   24c0e:	4635      	mov	r5, r6
   24c10:	d1b2      	bne.n	24b78 <__gethex+0x80>
   24c12:	786a      	ldrb	r2, [r5, #1]
   24c14:	2a2b      	cmp	r2, #43	@ 0x2b
   24c16:	f000 8146 	beq.w	24ea6 <__gethex+0x3ae>
   24c1a:	2a2d      	cmp	r2, #45	@ 0x2d
   24c1c:	f040 80d3 	bne.w	24dc6 <__gethex+0x2ce>
   24c20:	2001      	movs	r0, #1
   24c22:	78aa      	ldrb	r2, [r5, #2]
   24c24:	f818 1002 	ldrb.w	r1, [r8, r2]
   24c28:	1e4a      	subs	r2, r1, #1
   24c2a:	2a18      	cmp	r2, #24
   24c2c:	f105 0602 	add.w	r6, r5, #2
   24c30:	f200 80d3 	bhi.w	24dda <__gethex+0x2e2>
   24c34:	7872      	ldrb	r2, [r6, #1]
   24c36:	f818 2002 	ldrb.w	r2, [r8, r2]
   24c3a:	3910      	subs	r1, #16
   24c3c:	3601      	adds	r6, #1
   24c3e:	b95a      	cbnz	r2, 24c58 <__gethex+0x160>
   24c40:	e00c      	b.n	24c5c <__gethex+0x164>
   24c42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   24c46:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   24c4a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   24c4e:	f1a2 0110 	sub.w	r1, r2, #16
   24c52:	f818 2003 	ldrb.w	r2, [r8, r3]
   24c56:	b10a      	cbz	r2, 24c5c <__gethex+0x164>
   24c58:	2a19      	cmp	r2, #25
   24c5a:	ddf2      	ble.n	24c42 <__gethex+0x14a>
   24c5c:	b100      	cbz	r0, 24c60 <__gethex+0x168>
   24c5e:	4249      	negs	r1, r1
   24c60:	448b      	add	fp, r1
   24c62:	f8c9 6000 	str.w	r6, [r9]
   24c66:	f1ba 0f00 	cmp.w	sl, #0
   24c6a:	d08a      	beq.n	24b82 <__gethex+0x8a>
   24c6c:	2f00      	cmp	r7, #0
   24c6e:	bf0c      	ite	eq
   24c70:	2506      	moveq	r5, #6
   24c72:	2500      	movne	r5, #0
   24c74:	4628      	mov	r0, r5
   24c76:	b005      	add	sp, #20
   24c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c7c:	9e02      	ldr	r6, [sp, #8]
   24c7e:	f04f 0900 	mov.w	r9, #0
   24c82:	f846 9b04 	str.w	r9, [r6], #4
   24c86:	9b02      	ldr	r3, [sp, #8]
   24c88:	1af6      	subs	r6, r6, r3
   24c8a:	10b6      	asrs	r6, r6, #2
   24c8c:	f8ca 6010 	str.w	r6, [sl, #16]
   24c90:	4648      	mov	r0, r9
   24c92:	f000 fea7 	bl	259e4 <__hi0bits>
   24c96:	9b00      	ldr	r3, [sp, #0]
   24c98:	0176      	lsls	r6, r6, #5
   24c9a:	681c      	ldr	r4, [r3, #0]
   24c9c:	1a36      	subs	r6, r6, r0
   24c9e:	42a6      	cmp	r6, r4
   24ca0:	dc74      	bgt.n	24d8c <__gethex+0x294>
   24ca2:	f2c0 8104 	blt.w	24eae <__gethex+0x3b6>
   24ca6:	2700      	movs	r7, #0
   24ca8:	9b00      	ldr	r3, [sp, #0]
   24caa:	689a      	ldr	r2, [r3, #8]
   24cac:	455a      	cmp	r2, fp
   24cae:	f2c0 813b 	blt.w	24f28 <__gethex+0x430>
   24cb2:	9b00      	ldr	r3, [sp, #0]
   24cb4:	685a      	ldr	r2, [r3, #4]
   24cb6:	455a      	cmp	r2, fp
   24cb8:	dd4b      	ble.n	24d52 <__gethex+0x25a>
   24cba:	eba2 0b0b 	sub.w	fp, r2, fp
   24cbe:	455c      	cmp	r4, fp
   24cc0:	f300 808d 	bgt.w	24dde <__gethex+0x2e6>
   24cc4:	68db      	ldr	r3, [r3, #12]
   24cc6:	2b02      	cmp	r3, #2
   24cc8:	f000 80dd 	beq.w	24e86 <__gethex+0x38e>
   24ccc:	2b03      	cmp	r3, #3
   24cce:	f000 814a 	beq.w	24f66 <__gethex+0x46e>
   24cd2:	2b01      	cmp	r3, #1
   24cd4:	f040 80db 	bne.w	24e8e <__gethex+0x396>
   24cd8:	455c      	cmp	r4, fp
   24cda:	f040 80d8 	bne.w	24e8e <__gethex+0x396>
   24cde:	2c01      	cmp	r4, #1
   24ce0:	d008      	beq.n	24cf4 <__gethex+0x1fc>
   24ce2:	1e61      	subs	r1, r4, #1
   24ce4:	4650      	mov	r0, sl
   24ce6:	f001 fab1 	bl	2624c <__any_on>
   24cea:	2800      	cmp	r0, #0
   24cec:	f000 80cf 	beq.w	24e8e <__gethex+0x396>
   24cf0:	9b00      	ldr	r3, [sp, #0]
   24cf2:	685a      	ldr	r2, [r3, #4]
   24cf4:	9903      	ldr	r1, [sp, #12]
   24cf6:	600a      	str	r2, [r1, #0]
   24cf8:	9a02      	ldr	r2, [sp, #8]
   24cfa:	2301      	movs	r3, #1
   24cfc:	f8ca 3010 	str.w	r3, [sl, #16]
   24d00:	6013      	str	r3, [r2, #0]
   24d02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   24d04:	2562      	movs	r5, #98	@ 0x62
   24d06:	f8c3 a000 	str.w	sl, [r3]
   24d0a:	e7b3      	b.n	24c74 <__gethex+0x17c>
   24d0c:	4944      	ldr	r1, [pc, #272]	@ (24e20 <__gethex+0x328>)
   24d0e:	2201      	movs	r2, #1
   24d10:	4620      	mov	r0, r4
   24d12:	f7ff fbaf 	bl	24474 <strncmp>
   24d16:	4682      	mov	sl, r0
   24d18:	2800      	cmp	r0, #0
   24d1a:	f040 8085 	bne.w	24e28 <__gethex+0x330>
   24d1e:	7863      	ldrb	r3, [r4, #1]
   24d20:	f818 2003 	ldrb.w	r2, [r8, r3]
   24d24:	1c65      	adds	r5, r4, #1
   24d26:	2a00      	cmp	r2, #0
   24d28:	f000 8080 	beq.w	24e2c <__gethex+0x334>
   24d2c:	2b30      	cmp	r3, #48	@ 0x30
   24d2e:	462c      	mov	r4, r5
   24d30:	f040 8124 	bne.w	24f7c <__gethex+0x484>
   24d34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   24d38:	2b30      	cmp	r3, #48	@ 0x30
   24d3a:	d0fb      	beq.n	24d34 <__gethex+0x23c>
   24d3c:	f818 3003 	ldrb.w	r3, [r8, r3]
   24d40:	fab3 fa83 	clz	sl, r3
   24d44:	2701      	movs	r7, #1
   24d46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
   24d4a:	2b00      	cmp	r3, #0
   24d4c:	f47f aef9 	bne.w	24b42 <__gethex+0x4a>
   24d50:	e064      	b.n	24e1c <__gethex+0x324>
   24d52:	2501      	movs	r5, #1
   24d54:	b187      	cbz	r7, 24d78 <__gethex+0x280>
   24d56:	9b00      	ldr	r3, [sp, #0]
   24d58:	68da      	ldr	r2, [r3, #12]
   24d5a:	2a02      	cmp	r2, #2
   24d5c:	d06e      	beq.n	24e3c <__gethex+0x344>
   24d5e:	2a03      	cmp	r2, #3
   24d60:	d070      	beq.n	24e44 <__gethex+0x34c>
   24d62:	2a01      	cmp	r2, #1
   24d64:	d106      	bne.n	24d74 <__gethex+0x27c>
   24d66:	07b9      	lsls	r1, r7, #30
   24d68:	d504      	bpl.n	24d74 <__gethex+0x27c>
   24d6a:	9b02      	ldr	r3, [sp, #8]
   24d6c:	681a      	ldr	r2, [r3, #0]
   24d6e:	4317      	orrs	r7, r2
   24d70:	07fa      	lsls	r2, r7, #31
   24d72:	d46a      	bmi.n	24e4a <__gethex+0x352>
   24d74:	f045 0510 	orr.w	r5, r5, #16
   24d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   24d7a:	f8c3 a000 	str.w	sl, [r3]
   24d7e:	9b03      	ldr	r3, [sp, #12]
   24d80:	4628      	mov	r0, r5
   24d82:	f8c3 b000 	str.w	fp, [r3]
   24d86:	b005      	add	sp, #20
   24d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d8c:	1b36      	subs	r6, r6, r4
   24d8e:	4631      	mov	r1, r6
   24d90:	4650      	mov	r0, sl
   24d92:	f001 fa5b 	bl	2624c <__any_on>
   24d96:	4607      	mov	r7, r0
   24d98:	b178      	cbz	r0, 24dba <__gethex+0x2c2>
   24d9a:	1e71      	subs	r1, r6, #1
   24d9c:	114a      	asrs	r2, r1, #5
   24d9e:	9b02      	ldr	r3, [sp, #8]
   24da0:	2701      	movs	r7, #1
   24da2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   24da6:	f001 021f 	and.w	r2, r1, #31
   24daa:	fa07 f202 	lsl.w	r2, r7, r2
   24dae:	4202      	tst	r2, r0
   24db0:	d003      	beq.n	24dba <__gethex+0x2c2>
   24db2:	42b9      	cmp	r1, r7
   24db4:	f300 80c9 	bgt.w	24f4a <__gethex+0x452>
   24db8:	2702      	movs	r7, #2
   24dba:	4631      	mov	r1, r6
   24dbc:	4650      	mov	r0, sl
   24dbe:	f7ff fe49 	bl	24a54 <rshift>
   24dc2:	44b3      	add	fp, r6
   24dc4:	e770      	b.n	24ca8 <__gethex+0x1b0>
   24dc6:	f818 1002 	ldrb.w	r1, [r8, r2]
   24dca:	1e4a      	subs	r2, r1, #1
   24dcc:	2a18      	cmp	r2, #24
   24dce:	f105 0601 	add.w	r6, r5, #1
   24dd2:	f04f 0000 	mov.w	r0, #0
   24dd6:	f67f af2d 	bls.w	24c34 <__gethex+0x13c>
   24dda:	462e      	mov	r6, r5
   24ddc:	e6cc      	b.n	24b78 <__gethex+0x80>
   24dde:	f10b 36ff 	add.w	r6, fp, #4294967295
   24de2:	2f00      	cmp	r7, #0
   24de4:	f040 80a9 	bne.w	24f3a <__gethex+0x442>
   24de8:	2e00      	cmp	r6, #0
   24dea:	f040 80a8 	bne.w	24f3e <__gethex+0x446>
   24dee:	1173      	asrs	r3, r6, #5
   24df0:	9a02      	ldr	r2, [sp, #8]
   24df2:	f006 061f 	and.w	r6, r6, #31
   24df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   24dfa:	2301      	movs	r3, #1
   24dfc:	40b3      	lsls	r3, r6
   24dfe:	4213      	tst	r3, r2
   24e00:	4659      	mov	r1, fp
   24e02:	4650      	mov	r0, sl
   24e04:	bf18      	it	ne
   24e06:	f047 0702 	orrne.w	r7, r7, #2
   24e0a:	f7ff fe23 	bl	24a54 <rshift>
   24e0e:	9b00      	ldr	r3, [sp, #0]
   24e10:	eba4 040b 	sub.w	r4, r4, fp
   24e14:	2502      	movs	r5, #2
   24e16:	f8d3 b004 	ldr.w	fp, [r3, #4]
   24e1a:	e79b      	b.n	24d54 <__gethex+0x25c>
   24e1c:	4626      	mov	r6, r4
   24e1e:	e697      	b.n	24b50 <__gethex+0x58>
   24e20:	0003096c 	.word	0x0003096c
   24e24:	00031420 	.word	0x00031420
   24e28:	7823      	ldrb	r3, [r4, #0]
   24e2a:	4625      	mov	r5, r4
   24e2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   24e30:	2b50      	cmp	r3, #80	@ 0x50
   24e32:	f000 8093 	beq.w	24f5c <__gethex+0x464>
   24e36:	f8c9 5000 	str.w	r5, [r9]
   24e3a:	e717      	b.n	24c6c <__gethex+0x174>
   24e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   24e3e:	f1c3 0301 	rsb	r3, r3, #1
   24e42:	930f      	str	r3, [sp, #60]	@ 0x3c
   24e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   24e46:	2b00      	cmp	r3, #0
   24e48:	d094      	beq.n	24d74 <__gethex+0x27c>
   24e4a:	f8da 7010 	ldr.w	r7, [sl, #16]
   24e4e:	9a02      	ldr	r2, [sp, #8]
   24e50:	ea4f 0987 	mov.w	r9, r7, lsl #2
   24e54:	4690      	mov	r8, r2
   24e56:	eb02 0687 	add.w	r6, r2, r7, lsl #2
   24e5a:	2000      	movs	r0, #0
   24e5c:	e003      	b.n	24e66 <__gethex+0x36e>
   24e5e:	4296      	cmp	r6, r2
   24e60:	f842 0c04 	str.w	r0, [r2, #-4]
   24e64:	d943      	bls.n	24eee <__gethex+0x3f6>
   24e66:	4694      	mov	ip, r2
   24e68:	f852 1b04 	ldr.w	r1, [r2], #4
   24e6c:	1c4b      	adds	r3, r1, #1
   24e6e:	d0f6      	beq.n	24e5e <__gethex+0x366>
   24e70:	3101      	adds	r1, #1
   24e72:	2d02      	cmp	r5, #2
   24e74:	f8cc 1000 	str.w	r1, [ip]
   24e78:	d079      	beq.n	24f6e <__gethex+0x476>
   24e7a:	f014 041f 	ands.w	r4, r4, #31
   24e7e:	f040 80a5 	bne.w	24fcc <__gethex+0x4d4>
   24e82:	2521      	movs	r5, #33	@ 0x21
   24e84:	e778      	b.n	24d78 <__gethex+0x280>
   24e86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   24e88:	2b00      	cmp	r3, #0
   24e8a:	f43f af33 	beq.w	24cf4 <__gethex+0x1fc>
   24e8e:	9801      	ldr	r0, [sp, #4]
   24e90:	4651      	mov	r1, sl
   24e92:	f000 fcf3 	bl	2587c <_Bfree>
   24e96:	2550      	movs	r5, #80	@ 0x50
   24e98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   24e9a:	2300      	movs	r3, #0
   24e9c:	4628      	mov	r0, r5
   24e9e:	6013      	str	r3, [r2, #0]
   24ea0:	b005      	add	sp, #20
   24ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ea6:	2000      	movs	r0, #0
   24ea8:	e6bb      	b.n	24c22 <__gethex+0x12a>
   24eaa:	46ab      	mov	fp, r5
   24eac:	e65f      	b.n	24b6e <__gethex+0x76>
   24eae:	1ba6      	subs	r6, r4, r6
   24eb0:	4651      	mov	r1, sl
   24eb2:	9801      	ldr	r0, [sp, #4]
   24eb4:	4632      	mov	r2, r6
   24eb6:	f000 ff25 	bl	25d04 <__lshift>
   24eba:	f100 0314 	add.w	r3, r0, #20
   24ebe:	ebab 0b06 	sub.w	fp, fp, r6
   24ec2:	4682      	mov	sl, r0
   24ec4:	9302      	str	r3, [sp, #8]
   24ec6:	2700      	movs	r7, #0
   24ec8:	e6ee      	b.n	24ca8 <__gethex+0x1b0>
   24eca:	7872      	ldrb	r2, [r6, #1]
   24ecc:	f818 1002 	ldrb.w	r1, [r8, r2]
   24ed0:	1c75      	adds	r5, r6, #1
   24ed2:	462e      	mov	r6, r5
   24ed4:	2900      	cmp	r1, #0
   24ed6:	f43f ae4a 	beq.w	24b6e <__gethex+0x76>
   24eda:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   24ede:	f818 3002 	ldrb.w	r3, [r8, r2]
   24ee2:	2b00      	cmp	r3, #0
   24ee4:	d1f9      	bne.n	24eda <__gethex+0x3e2>
   24ee6:	e63f      	b.n	24b68 <__gethex+0x70>
   24ee8:	1cbc      	adds	r4, r7, #2
   24eea:	2700      	movs	r7, #0
   24eec:	e619      	b.n	24b22 <__gethex+0x2a>
   24eee:	f8da 2008 	ldr.w	r2, [sl, #8]
   24ef2:	4297      	cmp	r7, r2
   24ef4:	da44      	bge.n	24f80 <__gethex+0x488>
   24ef6:	eb0a 0187 	add.w	r1, sl, r7, lsl #2
   24efa:	1c7a      	adds	r2, r7, #1
   24efc:	2001      	movs	r0, #1
   24efe:	2d02      	cmp	r5, #2
   24f00:	f8ca 2010 	str.w	r2, [sl, #16]
   24f04:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24f08:	6148      	str	r0, [r1, #20]
   24f0a:	d030      	beq.n	24f6e <__gethex+0x476>
   24f0c:	2a00      	cmp	r2, #0
   24f0e:	dc6a      	bgt.n	24fe6 <__gethex+0x4ee>
   24f10:	2200      	movs	r2, #0
   24f12:	f8ca 2010 	str.w	r2, [sl, #16]
   24f16:	2200      	movs	r2, #0
   24f18:	f8ca 2014 	str.w	r2, [sl, #20]
   24f1c:	9b00      	ldr	r3, [sp, #0]
   24f1e:	689a      	ldr	r2, [r3, #8]
   24f20:	f10b 0b01 	add.w	fp, fp, #1
   24f24:	455a      	cmp	r2, fp
   24f26:	daac      	bge.n	24e82 <__gethex+0x38a>
   24f28:	9801      	ldr	r0, [sp, #4]
   24f2a:	4651      	mov	r1, sl
   24f2c:	f000 fca6 	bl	2587c <_Bfree>
   24f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   24f32:	2300      	movs	r3, #0
   24f34:	25a3      	movs	r5, #163	@ 0xa3
   24f36:	6013      	str	r3, [r2, #0]
   24f38:	e69c      	b.n	24c74 <__gethex+0x17c>
   24f3a:	2701      	movs	r7, #1
   24f3c:	e757      	b.n	24dee <__gethex+0x2f6>
   24f3e:	4631      	mov	r1, r6
   24f40:	4650      	mov	r0, sl
   24f42:	f001 f983 	bl	2624c <__any_on>
   24f46:	4607      	mov	r7, r0
   24f48:	e751      	b.n	24dee <__gethex+0x2f6>
   24f4a:	1eb1      	subs	r1, r6, #2
   24f4c:	4650      	mov	r0, sl
   24f4e:	f001 f97d 	bl	2624c <__any_on>
   24f52:	2800      	cmp	r0, #0
   24f54:	f43f af30 	beq.w	24db8 <__gethex+0x2c0>
   24f58:	2703      	movs	r7, #3
   24f5a:	e72e      	b.n	24dba <__gethex+0x2c2>
   24f5c:	f04f 0b00 	mov.w	fp, #0
   24f60:	f04f 0a01 	mov.w	sl, #1
   24f64:	e655      	b.n	24c12 <__gethex+0x11a>
   24f66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   24f68:	2b00      	cmp	r3, #0
   24f6a:	d090      	beq.n	24e8e <__gethex+0x396>
   24f6c:	e6c2      	b.n	24cf4 <__gethex+0x1fc>
   24f6e:	9b00      	ldr	r3, [sp, #0]
   24f70:	681a      	ldr	r2, [r3, #0]
   24f72:	3a01      	subs	r2, #1
   24f74:	42a2      	cmp	r2, r4
   24f76:	d060      	beq.n	2503a <__gethex+0x542>
   24f78:	2522      	movs	r5, #34	@ 0x22
   24f7a:	e6fd      	b.n	24d78 <__gethex+0x280>
   24f7c:	2701      	movs	r7, #1
   24f7e:	e5e0      	b.n	24b42 <__gethex+0x4a>
   24f80:	f8da 1004 	ldr.w	r1, [sl, #4]
   24f84:	9801      	ldr	r0, [sp, #4]
   24f86:	3101      	adds	r1, #1
   24f88:	f000 fc52 	bl	25830 <_Balloc>
   24f8c:	4606      	mov	r6, r0
   24f8e:	2800      	cmp	r0, #0
   24f90:	d06d      	beq.n	2506e <__gethex+0x576>
   24f92:	f8da 2010 	ldr.w	r2, [sl, #16]
   24f96:	3202      	adds	r2, #2
   24f98:	0092      	lsls	r2, r2, #2
   24f9a:	f10a 010c 	add.w	r1, sl, #12
   24f9e:	300c      	adds	r0, #12
   24fa0:	f7e7 fdc6 	bl	cb30 <memcpy>
   24fa4:	4651      	mov	r1, sl
   24fa6:	9801      	ldr	r0, [sp, #4]
   24fa8:	f000 fc68 	bl	2587c <_Bfree>
   24fac:	6932      	ldr	r2, [r6, #16]
   24fae:	2001      	movs	r0, #1
   24fb0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
   24fb4:	2d02      	cmp	r5, #2
   24fb6:	4402      	add	r2, r0
   24fb8:	6132      	str	r2, [r6, #16]
   24fba:	f106 0814 	add.w	r8, r6, #20
   24fbe:	6148      	str	r0, [r1, #20]
   24fc0:	46b2      	mov	sl, r6
   24fc2:	d0d4      	beq.n	24f6e <__gethex+0x476>
   24fc4:	4297      	cmp	r7, r2
   24fc6:	f6bf af58 	bge.w	24e7a <__gethex+0x382>
   24fca:	e79f      	b.n	24f0c <__gethex+0x414>
   24fcc:	44c1      	add	r9, r8
   24fce:	f1c4 0420 	rsb	r4, r4, #32
   24fd2:	f859 0c04 	ldr.w	r0, [r9, #-4]
   24fd6:	f000 fd05 	bl	259e4 <__hi0bits>
   24fda:	42a0      	cmp	r0, r4
   24fdc:	f6bf af51 	bge.w	24e82 <__gethex+0x38a>
   24fe0:	f8da 2010 	ldr.w	r2, [sl, #16]
   24fe4:	e792      	b.n	24f0c <__gethex+0x414>
   24fe6:	eb08 0482 	add.w	r4, r8, r2, lsl #2
   24fea:	f10a 0018 	add.w	r0, sl, #24
   24fee:	f8da 2014 	ldr.w	r2, [sl, #20]
   24ff2:	4284      	cmp	r4, r0
   24ff4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   24ff8:	d92b      	bls.n	25052 <__gethex+0x55a>
   24ffa:	4645      	mov	r5, r8
   24ffc:	6803      	ldr	r3, [r0, #0]
   24ffe:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   25002:	f845 2b04 	str.w	r2, [r5], #4
   25006:	f850 2b04 	ldr.w	r2, [r0], #4
   2500a:	4284      	cmp	r4, r0
   2500c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   25010:	d8f4      	bhi.n	24ffc <__gethex+0x504>
   25012:	eba4 010a 	sub.w	r1, r4, sl
   25016:	3919      	subs	r1, #25
   25018:	0889      	lsrs	r1, r1, #2
   2501a:	3101      	adds	r1, #1
   2501c:	f848 2021 	str.w	r2, [r8, r1, lsl #2]
   25020:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   25024:	b102      	cbz	r2, 25028 <__gethex+0x530>
   25026:	3104      	adds	r1, #4
   25028:	eba1 0208 	sub.w	r2, r1, r8
   2502c:	1092      	asrs	r2, r2, #2
   2502e:	4541      	cmp	r1, r8
   25030:	f8ca 2010 	str.w	r2, [sl, #16]
   25034:	f47f af72 	bne.w	24f1c <__gethex+0x424>
   25038:	e76d      	b.n	24f16 <__gethex+0x41e>
   2503a:	1162      	asrs	r2, r4, #5
   2503c:	f004 041f 	and.w	r4, r4, #31
   25040:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   25044:	2201      	movs	r2, #1
   25046:	40a2      	lsls	r2, r4
   25048:	420a      	tst	r2, r1
   2504a:	bf14      	ite	ne
   2504c:	2521      	movne	r5, #33	@ 0x21
   2504e:	2522      	moveq	r5, #34	@ 0x22
   25050:	e692      	b.n	24d78 <__gethex+0x280>
   25052:	f8c8 2000 	str.w	r2, [r8]
   25056:	b10a      	cbz	r2, 2505c <__gethex+0x564>
   25058:	4641      	mov	r1, r8
   2505a:	e7e4      	b.n	25026 <__gethex+0x52e>
   2505c:	f8ca 2010 	str.w	r2, [sl, #16]
   25060:	e759      	b.n	24f16 <__gethex+0x41e>
   25062:	4b06      	ldr	r3, [pc, #24]	@ (2507c <__gethex+0x584>)
   25064:	4806      	ldr	r0, [pc, #24]	@ (25080 <__gethex+0x588>)
   25066:	4652      	mov	r2, sl
   25068:	21e4      	movs	r1, #228	@ 0xe4
   2506a:	f7fc fcdf 	bl	21a2c <__assert_func>
   2506e:	4b03      	ldr	r3, [pc, #12]	@ (2507c <__gethex+0x584>)
   25070:	4803      	ldr	r0, [pc, #12]	@ (25080 <__gethex+0x588>)
   25072:	4632      	mov	r2, r6
   25074:	2184      	movs	r1, #132	@ 0x84
   25076:	f7fc fcd9 	bl	21a2c <__assert_func>
   2507a:	bf00      	nop
   2507c:	000309f4 	.word	0x000309f4
   25080:	00030a08 	.word	0x00030a08

00025084 <__match>:
   25084:	b410      	push	{r4}
   25086:	6804      	ldr	r4, [r0, #0]
   25088:	3401      	adds	r4, #1
   2508a:	e009      	b.n	250a0 <__match+0x1c>
   2508c:	f814 3b01 	ldrb.w	r3, [r4], #1
   25090:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
   25094:	f1bc 0f19 	cmp.w	ip, #25
   25098:	bf98      	it	ls
   2509a:	3320      	addls	r3, #32
   2509c:	4293      	cmp	r3, r2
   2509e:	d108      	bne.n	250b2 <__match+0x2e>
   250a0:	f811 2b01 	ldrb.w	r2, [r1], #1
   250a4:	2a00      	cmp	r2, #0
   250a6:	d1f1      	bne.n	2508c <__match+0x8>
   250a8:	6004      	str	r4, [r0, #0]
   250aa:	2001      	movs	r0, #1
   250ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   250b0:	4770      	bx	lr
   250b2:	2000      	movs	r0, #0
   250b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   250b8:	4770      	bx	lr
   250ba:	bf00      	nop

000250bc <__hexnan>:
   250bc:	6809      	ldr	r1, [r1, #0]
   250be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250c2:	114b      	asrs	r3, r1, #5
   250c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   250c8:	f011 0b1f 	ands.w	fp, r1, #31
   250cc:	4607      	mov	r7, r0
   250ce:	bf0c      	ite	eq
   250d0:	4618      	moveq	r0, r3
   250d2:	1d18      	addne	r0, r3, #4
   250d4:	683c      	ldr	r4, [r7, #0]
   250d6:	bf0c      	ite	eq
   250d8:	1f1d      	subeq	r5, r3, #4
   250da:	461d      	movne	r5, r3
   250dc:	2300      	movs	r3, #0
   250de:	b085      	sub	sp, #20
   250e0:	f840 3c04 	str.w	r3, [r0, #-4]
   250e4:	7861      	ldrb	r1, [r4, #1]
   250e6:	3401      	adds	r4, #1
   250e8:	2900      	cmp	r1, #0
   250ea:	f000 80a8 	beq.w	2523e <__hexnan+0x182>
   250ee:	469e      	mov	lr, r3
   250f0:	469a      	mov	sl, r3
   250f2:	461e      	mov	r6, r3
   250f4:	460b      	mov	r3, r1
   250f6:	4601      	mov	r1, r0
   250f8:	4610      	mov	r0, r2
   250fa:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 25284 <__hexnan+0x1c8>
   250fe:	9701      	str	r7, [sp, #4]
   25100:	465a      	mov	r2, fp
   25102:	46a8      	mov	r8, r5
   25104:	46ac      	mov	ip, r5
   25106:	4683      	mov	fp, r0
   25108:	e010      	b.n	2512c <__hexnan+0x70>
   2510a:	2b20      	cmp	r3, #32
   2510c:	f200 808f 	bhi.w	2522e <__hexnan+0x172>
   25110:	4556      	cmp	r6, sl
   25112:	dd08      	ble.n	25126 <__hexnan+0x6a>
   25114:	45e0      	cmp	r8, ip
   25116:	d902      	bls.n	2511e <__hexnan+0x62>
   25118:	f1be 0f07 	cmp.w	lr, #7
   2511c:	dd5f      	ble.n	251de <__hexnan+0x122>
   2511e:	45e3      	cmp	fp, ip
   25120:	d354      	bcc.n	251cc <__hexnan+0x110>
   25122:	f04f 0e08 	mov.w	lr, #8
   25126:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2512a:	b1b3      	cbz	r3, 2515a <__hexnan+0x9e>
   2512c:	f819 7003 	ldrb.w	r7, [r9, r3]
   25130:	2f00      	cmp	r7, #0
   25132:	d0ea      	beq.n	2510a <__hexnan+0x4e>
   25134:	f10e 0e01 	add.w	lr, lr, #1
   25138:	f1be 0f08 	cmp.w	lr, #8
   2513c:	f106 0601 	add.w	r6, r6, #1
   25140:	dc3a      	bgt.n	251b8 <__hexnan+0xfc>
   25142:	f8dc 3000 	ldr.w	r3, [ip]
   25146:	011b      	lsls	r3, r3, #4
   25148:	f007 070f 	and.w	r7, r7, #15
   2514c:	431f      	orrs	r7, r3
   2514e:	f8cc 7000 	str.w	r7, [ip]
   25152:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   25156:	2b00      	cmp	r3, #0
   25158:	d1e8      	bne.n	2512c <__hexnan+0x70>
   2515a:	465b      	mov	r3, fp
   2515c:	4608      	mov	r0, r1
   2515e:	4693      	mov	fp, r2
   25160:	461a      	mov	r2, r3
   25162:	2e00      	cmp	r6, #0
   25164:	d06b      	beq.n	2523e <__hexnan+0x182>
   25166:	45c4      	cmp	ip, r8
   25168:	d202      	bcs.n	25170 <__hexnan+0xb4>
   2516a:	f1be 0f07 	cmp.w	lr, #7
   2516e:	dd73      	ble.n	25258 <__hexnan+0x19c>
   25170:	4562      	cmp	r2, ip
   25172:	d24d      	bcs.n	25210 <__hexnan+0x154>
   25174:	1f11      	subs	r1, r2, #4
   25176:	4663      	mov	r3, ip
   25178:	f853 4b04 	ldr.w	r4, [r3], #4
   2517c:	f841 4f04 	str.w	r4, [r1, #4]!
   25180:	42ab      	cmp	r3, r5
   25182:	d9f9      	bls.n	25178 <__hexnan+0xbc>
   25184:	eba5 030c 	sub.w	r3, r5, ip
   25188:	f023 0303 	bic.w	r3, r3, #3
   2518c:	1c69      	adds	r1, r5, #1
   2518e:	3304      	adds	r3, #4
   25190:	f10c 0c01 	add.w	ip, ip, #1
   25194:	458c      	cmp	ip, r1
   25196:	bf88      	it	hi
   25198:	2304      	movhi	r3, #4
   2519a:	4413      	add	r3, r2
   2519c:	2100      	movs	r1, #0
   2519e:	f843 1b04 	str.w	r1, [r3], #4
   251a2:	42ab      	cmp	r3, r5
   251a4:	d9fb      	bls.n	2519e <__hexnan+0xe2>
   251a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   251aa:	2b00      	cmp	r3, #0
   251ac:	d14d      	bne.n	2524a <__hexnan+0x18e>
   251ae:	42aa      	cmp	r2, r5
   251b0:	d049      	beq.n	25246 <__hexnan+0x18a>
   251b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   251b6:	e7f8      	b.n	251aa <__hexnan+0xee>
   251b8:	45e3      	cmp	fp, ip
   251ba:	d2b4      	bcs.n	25126 <__hexnan+0x6a>
   251bc:	2300      	movs	r3, #0
   251be:	f84c 3c04 	str.w	r3, [ip, #-4]
   251c2:	f04f 0e01 	mov.w	lr, #1
   251c6:	f1ac 0c04 	sub.w	ip, ip, #4
   251ca:	e7bd      	b.n	25148 <__hexnan+0x8c>
   251cc:	2300      	movs	r3, #0
   251ce:	f1ac 0804 	sub.w	r8, ip, #4
   251d2:	f84c 3c04 	str.w	r3, [ip, #-4]
   251d6:	46b2      	mov	sl, r6
   251d8:	46c4      	mov	ip, r8
   251da:	469e      	mov	lr, r3
   251dc:	e7a3      	b.n	25126 <__hexnan+0x6a>
   251de:	f1ce 0008 	rsb	r0, lr, #8
   251e2:	0080      	lsls	r0, r0, #2
   251e4:	e9cd 2c02 	strd	r2, ip, [sp, #8]
   251e8:	f8dc 3000 	ldr.w	r3, [ip]
   251ec:	4667      	mov	r7, ip
   251ee:	f1c0 0e20 	rsb	lr, r0, #32
   251f2:	4684      	mov	ip, r0
   251f4:	6878      	ldr	r0, [r7, #4]
   251f6:	fa00 f20e 	lsl.w	r2, r0, lr
   251fa:	431a      	orrs	r2, r3
   251fc:	fa20 f30c 	lsr.w	r3, r0, ip
   25200:	603a      	str	r2, [r7, #0]
   25202:	f847 3f04 	str.w	r3, [r7, #4]!
   25206:	45b8      	cmp	r8, r7
   25208:	d8f4      	bhi.n	251f4 <__hexnan+0x138>
   2520a:	e9dd 2c02 	ldrd	r2, ip, [sp, #8]
   2520e:	e786      	b.n	2511e <__hexnan+0x62>
   25210:	f850 3c04 	ldr.w	r3, [r0, #-4]
   25214:	f1bb 0f00 	cmp.w	fp, #0
   25218:	d0c7      	beq.n	251aa <__hexnan+0xee>
   2521a:	f1cb 0b20 	rsb	fp, fp, #32
   2521e:	f04f 31ff 	mov.w	r1, #4294967295
   25222:	fa21 f10b 	lsr.w	r1, r1, fp
   25226:	400b      	ands	r3, r1
   25228:	f840 3c04 	str.w	r3, [r0, #-4]
   2522c:	e7bd      	b.n	251aa <__hexnan+0xee>
   2522e:	4608      	mov	r0, r1
   25230:	4619      	mov	r1, r3
   25232:	2929      	cmp	r1, #41	@ 0x29
   25234:	465b      	mov	r3, fp
   25236:	9f01      	ldr	r7, [sp, #4]
   25238:	4693      	mov	fp, r2
   2523a:	461a      	mov	r2, r3
   2523c:	d009      	beq.n	25252 <__hexnan+0x196>
   2523e:	2004      	movs	r0, #4
   25240:	b005      	add	sp, #20
   25242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25246:	2301      	movs	r3, #1
   25248:	602b      	str	r3, [r5, #0]
   2524a:	2005      	movs	r0, #5
   2524c:	b005      	add	sp, #20
   2524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25252:	3401      	adds	r4, #1
   25254:	603c      	str	r4, [r7, #0]
   25256:	e784      	b.n	25162 <__hexnan+0xa6>
   25258:	f1ce 0308 	rsb	r3, lr, #8
   2525c:	f8dc 1000 	ldr.w	r1, [ip]
   25260:	009b      	lsls	r3, r3, #2
   25262:	f1c3 0e20 	rsb	lr, r3, #32
   25266:	4666      	mov	r6, ip
   25268:	460c      	mov	r4, r1
   2526a:	6877      	ldr	r7, [r6, #4]
   2526c:	fa07 f10e 	lsl.w	r1, r7, lr
   25270:	4321      	orrs	r1, r4
   25272:	fa27 f403 	lsr.w	r4, r7, r3
   25276:	6031      	str	r1, [r6, #0]
   25278:	f846 4f04 	str.w	r4, [r6, #4]!
   2527c:	45b0      	cmp	r8, r6
   2527e:	d8f4      	bhi.n	2526a <__hexnan+0x1ae>
   25280:	e776      	b.n	25170 <__hexnan+0xb4>
   25282:	bf00      	nop
   25284:	00031420 	.word	0x00031420

00025288 <_malloc_r>:
   25288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2528c:	f101 050b 	add.w	r5, r1, #11
   25290:	2d16      	cmp	r5, #22
   25292:	b083      	sub	sp, #12
   25294:	4606      	mov	r6, r0
   25296:	d823      	bhi.n	252e0 <_malloc_r+0x58>
   25298:	2910      	cmp	r1, #16
   2529a:	f200 80af 	bhi.w	253fc <_malloc_r+0x174>
   2529e:	f000 fabb 	bl	25818 <__malloc_lock>
   252a2:	2510      	movs	r5, #16
   252a4:	2318      	movs	r3, #24
   252a6:	2002      	movs	r0, #2
   252a8:	4fb7      	ldr	r7, [pc, #732]	@ (25588 <_malloc_r+0x300>)
   252aa:	443b      	add	r3, r7
   252ac:	f1a3 0208 	sub.w	r2, r3, #8
   252b0:	685c      	ldr	r4, [r3, #4]
   252b2:	4294      	cmp	r4, r2
   252b4:	f000 811e 	beq.w	254f4 <_malloc_r+0x26c>
   252b8:	6863      	ldr	r3, [r4, #4]
   252ba:	68e2      	ldr	r2, [r4, #12]
   252bc:	68a1      	ldr	r1, [r4, #8]
   252be:	f023 0303 	bic.w	r3, r3, #3
   252c2:	60ca      	str	r2, [r1, #12]
   252c4:	4423      	add	r3, r4
   252c6:	4630      	mov	r0, r6
   252c8:	6091      	str	r1, [r2, #8]
   252ca:	685a      	ldr	r2, [r3, #4]
   252cc:	f042 0201 	orr.w	r2, r2, #1
   252d0:	605a      	str	r2, [r3, #4]
   252d2:	f000 faa7 	bl	25824 <__malloc_unlock>
   252d6:	3408      	adds	r4, #8
   252d8:	4620      	mov	r0, r4
   252da:	b003      	add	sp, #12
   252dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252e0:	f035 0507 	bics.w	r5, r5, #7
   252e4:	f100 808a 	bmi.w	253fc <_malloc_r+0x174>
   252e8:	42a9      	cmp	r1, r5
   252ea:	f200 8087 	bhi.w	253fc <_malloc_r+0x174>
   252ee:	f000 fa93 	bl	25818 <__malloc_lock>
   252f2:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
   252f6:	f0c0 816e 	bcc.w	255d6 <_malloc_r+0x34e>
   252fa:	0a6b      	lsrs	r3, r5, #9
   252fc:	f000 8082 	beq.w	25404 <_malloc_r+0x17c>
   25300:	2b04      	cmp	r3, #4
   25302:	f200 811d 	bhi.w	25540 <_malloc_r+0x2b8>
   25306:	09ab      	lsrs	r3, r5, #6
   25308:	f103 0039 	add.w	r0, r3, #57	@ 0x39
   2530c:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
   25310:	00c3      	lsls	r3, r0, #3
   25312:	4f9d      	ldr	r7, [pc, #628]	@ (25588 <_malloc_r+0x300>)
   25314:	443b      	add	r3, r7
   25316:	f1a3 0c08 	sub.w	ip, r3, #8
   2531a:	685c      	ldr	r4, [r3, #4]
   2531c:	45a4      	cmp	ip, r4
   2531e:	d107      	bne.n	25330 <_malloc_r+0xa8>
   25320:	e00d      	b.n	2533e <_malloc_r+0xb6>
   25322:	2a00      	cmp	r2, #0
   25324:	68e1      	ldr	r1, [r4, #12]
   25326:	f280 80df 	bge.w	254e8 <_malloc_r+0x260>
   2532a:	458c      	cmp	ip, r1
   2532c:	d007      	beq.n	2533e <_malloc_r+0xb6>
   2532e:	460c      	mov	r4, r1
   25330:	6863      	ldr	r3, [r4, #4]
   25332:	f023 0303 	bic.w	r3, r3, #3
   25336:	1b5a      	subs	r2, r3, r5
   25338:	2a0f      	cmp	r2, #15
   2533a:	ddf2      	ble.n	25322 <_malloc_r+0x9a>
   2533c:	4670      	mov	r0, lr
   2533e:	f8df 8260 	ldr.w	r8, [pc, #608]	@ 255a0 <_malloc_r+0x318>
   25342:	693c      	ldr	r4, [r7, #16]
   25344:	4544      	cmp	r4, r8
   25346:	f000 80bc 	beq.w	254c2 <_malloc_r+0x23a>
   2534a:	6863      	ldr	r3, [r4, #4]
   2534c:	f023 0c03 	bic.w	ip, r3, #3
   25350:	ebac 0305 	sub.w	r3, ip, r5
   25354:	2b0f      	cmp	r3, #15
   25356:	f300 8142 	bgt.w	255de <_malloc_r+0x356>
   2535a:	2b00      	cmp	r3, #0
   2535c:	e9c7 8804 	strd	r8, r8, [r7, #16]
   25360:	f280 812d 	bge.w	255be <_malloc_r+0x336>
   25364:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
   25368:	f8d7 e004 	ldr.w	lr, [r7, #4]
   2536c:	f080 80c8 	bcs.w	25500 <_malloc_r+0x278>
   25370:	ea4f 01dc 	mov.w	r1, ip, lsr #3
   25374:	3101      	adds	r1, #1
   25376:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   2537a:	2301      	movs	r3, #1
   2537c:	fa03 f30c 	lsl.w	r3, r3, ip
   25380:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
   25384:	60a2      	str	r2, [r4, #8]
   25386:	ea4e 0e03 	orr.w	lr, lr, r3
   2538a:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   2538e:	3b08      	subs	r3, #8
   25390:	60e3      	str	r3, [r4, #12]
   25392:	f8c7 e004 	str.w	lr, [r7, #4]
   25396:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
   2539a:	60d4      	str	r4, [r2, #12]
   2539c:	1083      	asrs	r3, r0, #2
   2539e:	f04f 0c01 	mov.w	ip, #1
   253a2:	fa0c fc03 	lsl.w	ip, ip, r3
   253a6:	45f4      	cmp	ip, lr
   253a8:	d832      	bhi.n	25410 <_malloc_r+0x188>
   253aa:	ea1c 0f0e 	tst.w	ip, lr
   253ae:	d108      	bne.n	253c2 <_malloc_r+0x13a>
   253b0:	f020 0003 	bic.w	r0, r0, #3
   253b4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   253b8:	ea1c 0f0e 	tst.w	ip, lr
   253bc:	f100 0004 	add.w	r0, r0, #4
   253c0:	d0f8      	beq.n	253b4 <_malloc_r+0x12c>
   253c2:	eb07 0ac0 	add.w	sl, r7, r0, lsl #3
   253c6:	46d6      	mov	lr, sl
   253c8:	4681      	mov	r9, r0
   253ca:	f8de 300c 	ldr.w	r3, [lr, #12]
   253ce:	e00b      	b.n	253e8 <_malloc_r+0x160>
   253d0:	6859      	ldr	r1, [r3, #4]
   253d2:	f021 0103 	bic.w	r1, r1, #3
   253d6:	1b4a      	subs	r2, r1, r5
   253d8:	2a0f      	cmp	r2, #15
   253da:	461c      	mov	r4, r3
   253dc:	68db      	ldr	r3, [r3, #12]
   253de:	f300 80bb 	bgt.w	25558 <_malloc_r+0x2d0>
   253e2:	2a00      	cmp	r2, #0
   253e4:	f280 80de 	bge.w	255a4 <_malloc_r+0x31c>
   253e8:	459e      	cmp	lr, r3
   253ea:	d1f1      	bne.n	253d0 <_malloc_r+0x148>
   253ec:	f109 0901 	add.w	r9, r9, #1
   253f0:	f019 0f03 	tst.w	r9, #3
   253f4:	f10e 0e08 	add.w	lr, lr, #8
   253f8:	d1e7      	bne.n	253ca <_malloc_r+0x142>
   253fa:	e119      	b.n	25630 <_malloc_r+0x3a8>
   253fc:	230c      	movs	r3, #12
   253fe:	6033      	str	r3, [r6, #0]
   25400:	2400      	movs	r4, #0
   25402:	e769      	b.n	252d8 <_malloc_r+0x50>
   25404:	f44f 7300 	mov.w	r3, #512	@ 0x200
   25408:	2040      	movs	r0, #64	@ 0x40
   2540a:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
   2540e:	e780      	b.n	25312 <_malloc_r+0x8a>
   25410:	68bc      	ldr	r4, [r7, #8]
   25412:	6863      	ldr	r3, [r4, #4]
   25414:	f023 0903 	bic.w	r9, r3, #3
   25418:	45a9      	cmp	r9, r5
   2541a:	d303      	bcc.n	25424 <_malloc_r+0x19c>
   2541c:	eba9 0305 	sub.w	r3, r9, r5
   25420:	2b0f      	cmp	r3, #15
   25422:	dc51      	bgt.n	254c8 <_malloc_r+0x240>
   25424:	4b59      	ldr	r3, [pc, #356]	@ (2558c <_malloc_r+0x304>)
   25426:	681b      	ldr	r3, [r3, #0]
   25428:	2008      	movs	r0, #8
   2542a:	f103 0810 	add.w	r8, r3, #16
   2542e:	eb04 0309 	add.w	r3, r4, r9
   25432:	9300      	str	r3, [sp, #0]
   25434:	f003 f832 	bl	2849c <sysconf>
   25438:	4a55      	ldr	r2, [pc, #340]	@ (25590 <_malloc_r+0x308>)
   2543a:	6813      	ldr	r3, [r2, #0]
   2543c:	3301      	adds	r3, #1
   2543e:	44a8      	add	r8, r5
   25440:	4683      	mov	fp, r0
   25442:	d005      	beq.n	25450 <_malloc_r+0x1c8>
   25444:	f108 38ff 	add.w	r8, r8, #4294967295
   25448:	4480      	add	r8, r0
   2544a:	4243      	negs	r3, r0
   2544c:	ea03 0808 	and.w	r8, r3, r8
   25450:	4641      	mov	r1, r8
   25452:	4630      	mov	r0, r6
   25454:	f003 f810 	bl	28478 <_sbrk_r>
   25458:	f1b0 3fff 	cmp.w	r0, #4294967295
   2545c:	4a4c      	ldr	r2, [pc, #304]	@ (25590 <_malloc_r+0x308>)
   2545e:	4682      	mov	sl, r0
   25460:	f000 80d8 	beq.w	25614 <_malloc_r+0x38c>
   25464:	9b00      	ldr	r3, [sp, #0]
   25466:	4283      	cmp	r3, r0
   25468:	f200 80d2 	bhi.w	25610 <_malloc_r+0x388>
   2546c:	4b49      	ldr	r3, [pc, #292]	@ (25594 <_malloc_r+0x30c>)
   2546e:	6818      	ldr	r0, [r3, #0]
   25470:	4440      	add	r0, r8
   25472:	f10b 31ff 	add.w	r1, fp, #4294967295
   25476:	6018      	str	r0, [r3, #0]
   25478:	4684      	mov	ip, r0
   2547a:	f040 80fc 	bne.w	25676 <_malloc_r+0x3ee>
   2547e:	ea1a 0f01 	tst.w	sl, r1
   25482:	f040 80f8 	bne.w	25676 <_malloc_r+0x3ee>
   25486:	f8d7 a008 	ldr.w	sl, [r7, #8]
   2548a:	44c8      	add	r8, r9
   2548c:	f048 0201 	orr.w	r2, r8, #1
   25490:	f8ca 2004 	str.w	r2, [sl, #4]
   25494:	4b40      	ldr	r3, [pc, #256]	@ (25598 <_malloc_r+0x310>)
   25496:	6819      	ldr	r1, [r3, #0]
   25498:	4281      	cmp	r1, r0
   2549a:	bf38      	it	cc
   2549c:	6018      	strcc	r0, [r3, #0]
   2549e:	4b3f      	ldr	r3, [pc, #252]	@ (2559c <_malloc_r+0x314>)
   254a0:	6819      	ldr	r1, [r3, #0]
   254a2:	4281      	cmp	r1, r0
   254a4:	bf38      	it	cc
   254a6:	6018      	strcc	r0, [r3, #0]
   254a8:	4654      	mov	r4, sl
   254aa:	f022 0803 	bic.w	r8, r2, #3
   254ae:	45a8      	cmp	r8, r5
   254b0:	eba8 0305 	sub.w	r3, r8, r5
   254b4:	d301      	bcc.n	254ba <_malloc_r+0x232>
   254b6:	2b0f      	cmp	r3, #15
   254b8:	dc06      	bgt.n	254c8 <_malloc_r+0x240>
   254ba:	4630      	mov	r0, r6
   254bc:	f000 f9b2 	bl	25824 <__malloc_unlock>
   254c0:	e79e      	b.n	25400 <_malloc_r+0x178>
   254c2:	f8d7 e004 	ldr.w	lr, [r7, #4]
   254c6:	e769      	b.n	2539c <_malloc_r+0x114>
   254c8:	1962      	adds	r2, r4, r5
   254ca:	f043 0301 	orr.w	r3, r3, #1
   254ce:	f045 0501 	orr.w	r5, r5, #1
   254d2:	6065      	str	r5, [r4, #4]
   254d4:	4630      	mov	r0, r6
   254d6:	60ba      	str	r2, [r7, #8]
   254d8:	6053      	str	r3, [r2, #4]
   254da:	f000 f9a3 	bl	25824 <__malloc_unlock>
   254de:	3408      	adds	r4, #8
   254e0:	4620      	mov	r0, r4
   254e2:	b003      	add	sp, #12
   254e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254e8:	68a2      	ldr	r2, [r4, #8]
   254ea:	4423      	add	r3, r4
   254ec:	60d1      	str	r1, [r2, #12]
   254ee:	4630      	mov	r0, r6
   254f0:	608a      	str	r2, [r1, #8]
   254f2:	e6ea      	b.n	252ca <_malloc_r+0x42>
   254f4:	68dc      	ldr	r4, [r3, #12]
   254f6:	42a3      	cmp	r3, r4
   254f8:	f47f aede 	bne.w	252b8 <_malloc_r+0x30>
   254fc:	3002      	adds	r0, #2
   254fe:	e71e      	b.n	2533e <_malloc_r+0xb6>
   25500:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
   25504:	ea4f 225c 	mov.w	r2, ip, lsr #9
   25508:	d37b      	bcc.n	25602 <_malloc_r+0x37a>
   2550a:	2a14      	cmp	r2, #20
   2550c:	f200 8112 	bhi.w	25734 <_malloc_r+0x4ac>
   25510:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
   25514:	00db      	lsls	r3, r3, #3
   25516:	325b      	adds	r2, #91	@ 0x5b
   25518:	18f9      	adds	r1, r7, r3
   2551a:	58fb      	ldr	r3, [r7, r3]
   2551c:	3908      	subs	r1, #8
   2551e:	4299      	cmp	r1, r3
   25520:	d103      	bne.n	2552a <_malloc_r+0x2a2>
   25522:	e0ec      	b.n	256fe <_malloc_r+0x476>
   25524:	689b      	ldr	r3, [r3, #8]
   25526:	4299      	cmp	r1, r3
   25528:	d004      	beq.n	25534 <_malloc_r+0x2ac>
   2552a:	685a      	ldr	r2, [r3, #4]
   2552c:	f022 0203 	bic.w	r2, r2, #3
   25530:	4562      	cmp	r2, ip
   25532:	d8f7      	bhi.n	25524 <_malloc_r+0x29c>
   25534:	68d9      	ldr	r1, [r3, #12]
   25536:	e9c4 3102 	strd	r3, r1, [r4, #8]
   2553a:	608c      	str	r4, [r1, #8]
   2553c:	60dc      	str	r4, [r3, #12]
   2553e:	e72d      	b.n	2539c <_malloc_r+0x114>
   25540:	2b14      	cmp	r3, #20
   25542:	d96a      	bls.n	2561a <_malloc_r+0x392>
   25544:	2b54      	cmp	r3, #84	@ 0x54
   25546:	f200 80fe 	bhi.w	25746 <_malloc_r+0x4be>
   2554a:	0b2b      	lsrs	r3, r5, #12
   2554c:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
   25550:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
   25554:	00c3      	lsls	r3, r0, #3
   25556:	e6dc      	b.n	25312 <_malloc_r+0x8a>
   25558:	f8d4 c008 	ldr.w	ip, [r4, #8]
   2555c:	4630      	mov	r0, r6
   2555e:	1966      	adds	r6, r4, r5
   25560:	f045 0501 	orr.w	r5, r5, #1
   25564:	6065      	str	r5, [r4, #4]
   25566:	f8cc 300c 	str.w	r3, [ip, #12]
   2556a:	f8c3 c008 	str.w	ip, [r3, #8]
   2556e:	f042 0301 	orr.w	r3, r2, #1
   25572:	e9c7 6604 	strd	r6, r6, [r7, #16]
   25576:	e9c6 8802 	strd	r8, r8, [r6, #8]
   2557a:	6073      	str	r3, [r6, #4]
   2557c:	5062      	str	r2, [r4, r1]
   2557e:	f000 f951 	bl	25824 <__malloc_unlock>
   25582:	3408      	adds	r4, #8
   25584:	e6a8      	b.n	252d8 <_malloc_r+0x50>
   25586:	bf00      	nop
   25588:	100026f0 	.word	0x100026f0
   2558c:	10054ca8 	.word	0x10054ca8
   25590:	100026e8 	.word	0x100026e8
   25594:	10054c78 	.word	0x10054c78
   25598:	10054ca4 	.word	0x10054ca4
   2559c:	10054ca0 	.word	0x10054ca0
   255a0:	100026f8 	.word	0x100026f8
   255a4:	4421      	add	r1, r4
   255a6:	4630      	mov	r0, r6
   255a8:	684a      	ldr	r2, [r1, #4]
   255aa:	f042 0201 	orr.w	r2, r2, #1
   255ae:	604a      	str	r2, [r1, #4]
   255b0:	f854 2f08 	ldr.w	r2, [r4, #8]!
   255b4:	60d3      	str	r3, [r2, #12]
   255b6:	609a      	str	r2, [r3, #8]
   255b8:	f000 f934 	bl	25824 <__malloc_unlock>
   255bc:	e68c      	b.n	252d8 <_malloc_r+0x50>
   255be:	44a4      	add	ip, r4
   255c0:	4630      	mov	r0, r6
   255c2:	f8dc 3004 	ldr.w	r3, [ip, #4]
   255c6:	f043 0301 	orr.w	r3, r3, #1
   255ca:	f8cc 3004 	str.w	r3, [ip, #4]
   255ce:	f000 f929 	bl	25824 <__malloc_unlock>
   255d2:	3408      	adds	r4, #8
   255d4:	e680      	b.n	252d8 <_malloc_r+0x50>
   255d6:	08e8      	lsrs	r0, r5, #3
   255d8:	f105 0308 	add.w	r3, r5, #8
   255dc:	e664      	b.n	252a8 <_malloc_r+0x20>
   255de:	1962      	adds	r2, r4, r5
   255e0:	f043 0101 	orr.w	r1, r3, #1
   255e4:	f045 0501 	orr.w	r5, r5, #1
   255e8:	6065      	str	r5, [r4, #4]
   255ea:	4630      	mov	r0, r6
   255ec:	e9c7 2204 	strd	r2, r2, [r7, #16]
   255f0:	e9c2 8802 	strd	r8, r8, [r2, #8]
   255f4:	6051      	str	r1, [r2, #4]
   255f6:	f844 300c 	str.w	r3, [r4, ip]
   255fa:	f000 f913 	bl	25824 <__malloc_unlock>
   255fe:	3408      	adds	r4, #8
   25600:	e66a      	b.n	252d8 <_malloc_r+0x50>
   25602:	ea4f 129c 	mov.w	r2, ip, lsr #6
   25606:	f102 0339 	add.w	r3, r2, #57	@ 0x39
   2560a:	00db      	lsls	r3, r3, #3
   2560c:	3238      	adds	r2, #56	@ 0x38
   2560e:	e783      	b.n	25518 <_malloc_r+0x290>
   25610:	42bc      	cmp	r4, r7
   25612:	d028      	beq.n	25666 <_malloc_r+0x3de>
   25614:	68bc      	ldr	r4, [r7, #8]
   25616:	6862      	ldr	r2, [r4, #4]
   25618:	e747      	b.n	254aa <_malloc_r+0x222>
   2561a:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
   2561e:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
   25622:	00c3      	lsls	r3, r0, #3
   25624:	e675      	b.n	25312 <_malloc_r+0x8a>
   25626:	f85a 3908 	ldr.w	r3, [sl], #-8
   2562a:	4553      	cmp	r3, sl
   2562c:	f040 80d9 	bne.w	257e2 <_malloc_r+0x55a>
   25630:	f010 0f03 	tst.w	r0, #3
   25634:	f100 30ff 	add.w	r0, r0, #4294967295
   25638:	d1f5      	bne.n	25626 <_malloc_r+0x39e>
   2563a:	687b      	ldr	r3, [r7, #4]
   2563c:	ea23 030c 	bic.w	r3, r3, ip
   25640:	607b      	str	r3, [r7, #4]
   25642:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25646:	459c      	cmp	ip, r3
   25648:	f63f aee2 	bhi.w	25410 <_malloc_r+0x188>
   2564c:	f1bc 0f00 	cmp.w	ip, #0
   25650:	d104      	bne.n	2565c <_malloc_r+0x3d4>
   25652:	e6dd      	b.n	25410 <_malloc_r+0x188>
   25654:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25658:	f109 0904 	add.w	r9, r9, #4
   2565c:	ea1c 0f03 	tst.w	ip, r3
   25660:	d0f8      	beq.n	25654 <_malloc_r+0x3cc>
   25662:	4648      	mov	r0, r9
   25664:	e6ad      	b.n	253c2 <_malloc_r+0x13a>
   25666:	4b60      	ldr	r3, [pc, #384]	@ (257e8 <_malloc_r+0x560>)
   25668:	6818      	ldr	r0, [r3, #0]
   2566a:	eb08 0c00 	add.w	ip, r8, r0
   2566e:	f10b 31ff 	add.w	r1, fp, #4294967295
   25672:	f8c3 c000 	str.w	ip, [r3]
   25676:	6810      	ldr	r0, [r2, #0]
   25678:	3001      	adds	r0, #1
   2567a:	d06e      	beq.n	2575a <_malloc_r+0x4d2>
   2567c:	9a00      	ldr	r2, [sp, #0]
   2567e:	ebaa 0202 	sub.w	r2, sl, r2
   25682:	4462      	add	r2, ip
   25684:	601a      	str	r2, [r3, #0]
   25686:	f01a 0207 	ands.w	r2, sl, #7
   2568a:	e9cd 2300 	strd	r2, r3, [sp]
   2568e:	d040      	beq.n	25712 <_malloc_r+0x48a>
   25690:	f1c2 0208 	rsb	r2, r2, #8
   25694:	4492      	add	sl, r2
   25696:	44d0      	add	r8, sl
   25698:	ea08 0001 	and.w	r0, r8, r1
   2569c:	445a      	add	r2, fp
   2569e:	1a12      	subs	r2, r2, r0
   256a0:	ea02 0b01 	and.w	fp, r2, r1
   256a4:	4659      	mov	r1, fp
   256a6:	4630      	mov	r0, r6
   256a8:	f002 fee6 	bl	28478 <_sbrk_r>
   256ac:	1c42      	adds	r2, r0, #1
   256ae:	9b01      	ldr	r3, [sp, #4]
   256b0:	d06f      	beq.n	25792 <_malloc_r+0x50a>
   256b2:	eba0 000a 	sub.w	r0, r0, sl
   256b6:	eb00 080b 	add.w	r8, r0, fp
   256ba:	6818      	ldr	r0, [r3, #0]
   256bc:	f8c7 a008 	str.w	sl, [r7, #8]
   256c0:	f048 0201 	orr.w	r2, r8, #1
   256c4:	4458      	add	r0, fp
   256c6:	42bc      	cmp	r4, r7
   256c8:	f8ca 2004 	str.w	r2, [sl, #4]
   256cc:	6018      	str	r0, [r3, #0]
   256ce:	f43f aee1 	beq.w	25494 <_malloc_r+0x20c>
   256d2:	f1b9 0f0f 	cmp.w	r9, #15
   256d6:	d943      	bls.n	25760 <_malloc_r+0x4d8>
   256d8:	6861      	ldr	r1, [r4, #4]
   256da:	f1a9 020c 	sub.w	r2, r9, #12
   256de:	f022 0207 	bic.w	r2, r2, #7
   256e2:	f001 0101 	and.w	r1, r1, #1
   256e6:	4311      	orrs	r1, r2
   256e8:	6061      	str	r1, [r4, #4]
   256ea:	f04f 0c05 	mov.w	ip, #5
   256ee:	18a1      	adds	r1, r4, r2
   256f0:	2a0f      	cmp	r2, #15
   256f2:	e9c1 cc01 	strd	ip, ip, [r1, #4]
   256f6:	d854      	bhi.n	257a2 <_malloc_r+0x51a>
   256f8:	f8da 2004 	ldr.w	r2, [sl, #4]
   256fc:	e6ca      	b.n	25494 <_malloc_r+0x20c>
   256fe:	1092      	asrs	r2, r2, #2
   25700:	f04f 0c01 	mov.w	ip, #1
   25704:	fa0c f202 	lsl.w	r2, ip, r2
   25708:	ea4e 0e02 	orr.w	lr, lr, r2
   2570c:	f8c7 e004 	str.w	lr, [r7, #4]
   25710:	e711      	b.n	25536 <_malloc_r+0x2ae>
   25712:	eb0a 0208 	add.w	r2, sl, r8
   25716:	400a      	ands	r2, r1
   25718:	ebab 0202 	sub.w	r2, fp, r2
   2571c:	ea02 0b01 	and.w	fp, r2, r1
   25720:	4659      	mov	r1, fp
   25722:	4630      	mov	r0, r6
   25724:	f002 fea8 	bl	28478 <_sbrk_r>
   25728:	1c43      	adds	r3, r0, #1
   2572a:	9b01      	ldr	r3, [sp, #4]
   2572c:	d1c1      	bne.n	256b2 <_malloc_r+0x42a>
   2572e:	f8dd b000 	ldr.w	fp, [sp]
   25732:	e7c2      	b.n	256ba <_malloc_r+0x432>
   25734:	2a54      	cmp	r2, #84	@ 0x54
   25736:	d817      	bhi.n	25768 <_malloc_r+0x4e0>
   25738:	ea4f 321c 	mov.w	r2, ip, lsr #12
   2573c:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
   25740:	00db      	lsls	r3, r3, #3
   25742:	326e      	adds	r2, #110	@ 0x6e
   25744:	e6e8      	b.n	25518 <_malloc_r+0x290>
   25746:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   2574a:	d817      	bhi.n	2577c <_malloc_r+0x4f4>
   2574c:	0beb      	lsrs	r3, r5, #15
   2574e:	f103 0078 	add.w	r0, r3, #120	@ 0x78
   25752:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
   25756:	00c3      	lsls	r3, r0, #3
   25758:	e5db      	b.n	25312 <_malloc_r+0x8a>
   2575a:	f8c2 a000 	str.w	sl, [r2]
   2575e:	e792      	b.n	25686 <_malloc_r+0x3fe>
   25760:	2301      	movs	r3, #1
   25762:	f8ca 3004 	str.w	r3, [sl, #4]
   25766:	e6a8      	b.n	254ba <_malloc_r+0x232>
   25768:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
   2576c:	d824      	bhi.n	257b8 <_malloc_r+0x530>
   2576e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
   25772:	f102 0378 	add.w	r3, r2, #120	@ 0x78
   25776:	00db      	lsls	r3, r3, #3
   25778:	3277      	adds	r2, #119	@ 0x77
   2577a:	e6cd      	b.n	25518 <_malloc_r+0x290>
   2577c:	f240 5254 	movw	r2, #1364	@ 0x554
   25780:	4293      	cmp	r3, r2
   25782:	d824      	bhi.n	257ce <_malloc_r+0x546>
   25784:	0cab      	lsrs	r3, r5, #18
   25786:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
   2578a:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
   2578e:	00c3      	lsls	r3, r0, #3
   25790:	e5bf      	b.n	25312 <_malloc_r+0x8a>
   25792:	9a00      	ldr	r2, [sp, #0]
   25794:	3a08      	subs	r2, #8
   25796:	4490      	add	r8, r2
   25798:	eba8 080a 	sub.w	r8, r8, sl
   2579c:	f04f 0b00 	mov.w	fp, #0
   257a0:	e78b      	b.n	256ba <_malloc_r+0x432>
   257a2:	4630      	mov	r0, r6
   257a4:	f104 0108 	add.w	r1, r4, #8
   257a8:	9300      	str	r3, [sp, #0]
   257aa:	f7ff f857 	bl	2485c <_free_r>
   257ae:	9b00      	ldr	r3, [sp, #0]
   257b0:	f8d7 a008 	ldr.w	sl, [r7, #8]
   257b4:	6818      	ldr	r0, [r3, #0]
   257b6:	e79f      	b.n	256f8 <_malloc_r+0x470>
   257b8:	f240 5354 	movw	r3, #1364	@ 0x554
   257bc:	429a      	cmp	r2, r3
   257be:	d80c      	bhi.n	257da <_malloc_r+0x552>
   257c0:	ea4f 429c 	mov.w	r2, ip, lsr #18
   257c4:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
   257c8:	00db      	lsls	r3, r3, #3
   257ca:	327c      	adds	r2, #124	@ 0x7c
   257cc:	e6a4      	b.n	25518 <_malloc_r+0x290>
   257ce:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   257d2:	207f      	movs	r0, #127	@ 0x7f
   257d4:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
   257d8:	e59b      	b.n	25312 <_malloc_r+0x8a>
   257da:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   257de:	227e      	movs	r2, #126	@ 0x7e
   257e0:	e69a      	b.n	25518 <_malloc_r+0x290>
   257e2:	687b      	ldr	r3, [r7, #4]
   257e4:	e72d      	b.n	25642 <_malloc_r+0x3ba>
   257e6:	bf00      	nop
   257e8:	10054c78 	.word	0x10054c78

000257ec <__ascii_mbtowc>:
   257ec:	b082      	sub	sp, #8
   257ee:	b149      	cbz	r1, 25804 <__ascii_mbtowc+0x18>
   257f0:	b15a      	cbz	r2, 2580a <__ascii_mbtowc+0x1e>
   257f2:	b16b      	cbz	r3, 25810 <__ascii_mbtowc+0x24>
   257f4:	7813      	ldrb	r3, [r2, #0]
   257f6:	600b      	str	r3, [r1, #0]
   257f8:	7812      	ldrb	r2, [r2, #0]
   257fa:	1e10      	subs	r0, r2, #0
   257fc:	bf18      	it	ne
   257fe:	2001      	movne	r0, #1
   25800:	b002      	add	sp, #8
   25802:	4770      	bx	lr
   25804:	a901      	add	r1, sp, #4
   25806:	2a00      	cmp	r2, #0
   25808:	d1f3      	bne.n	257f2 <__ascii_mbtowc+0x6>
   2580a:	4610      	mov	r0, r2
   2580c:	b002      	add	sp, #8
   2580e:	4770      	bx	lr
   25810:	f06f 0001 	mvn.w	r0, #1
   25814:	e7f4      	b.n	25800 <__ascii_mbtowc+0x14>
   25816:	bf00      	nop

00025818 <__malloc_lock>:
   25818:	4801      	ldr	r0, [pc, #4]	@ (25820 <__malloc_lock+0x8>)
   2581a:	f7fe bf4b 	b.w	246b4 <__retarget_lock_acquire_recursive>
   2581e:	bf00      	nop
   25820:	10054c70 	.word	0x10054c70

00025824 <__malloc_unlock>:
   25824:	4801      	ldr	r0, [pc, #4]	@ (2582c <__malloc_unlock+0x8>)
   25826:	f7fe bf47 	b.w	246b8 <__retarget_lock_release_recursive>
   2582a:	bf00      	nop
   2582c:	10054c70 	.word	0x10054c70

00025830 <_Balloc>:
   25830:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   25832:	b570      	push	{r4, r5, r6, lr}
   25834:	4605      	mov	r5, r0
   25836:	460c      	mov	r4, r1
   25838:	b14b      	cbz	r3, 2584e <_Balloc+0x1e>
   2583a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2583e:	b180      	cbz	r0, 25862 <_Balloc+0x32>
   25840:	6802      	ldr	r2, [r0, #0]
   25842:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   25846:	2300      	movs	r3, #0
   25848:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2584c:	bd70      	pop	{r4, r5, r6, pc}
   2584e:	2221      	movs	r2, #33	@ 0x21
   25850:	2104      	movs	r1, #4
   25852:	f002 fe63 	bl	2851c <_calloc_r>
   25856:	4603      	mov	r3, r0
   25858:	6468      	str	r0, [r5, #68]	@ 0x44
   2585a:	2800      	cmp	r0, #0
   2585c:	d1ed      	bne.n	2583a <_Balloc+0xa>
   2585e:	2000      	movs	r0, #0
   25860:	bd70      	pop	{r4, r5, r6, pc}
   25862:	2101      	movs	r1, #1
   25864:	fa01 f604 	lsl.w	r6, r1, r4
   25868:	1d72      	adds	r2, r6, #5
   2586a:	0092      	lsls	r2, r2, #2
   2586c:	4628      	mov	r0, r5
   2586e:	f002 fe55 	bl	2851c <_calloc_r>
   25872:	2800      	cmp	r0, #0
   25874:	d0f3      	beq.n	2585e <_Balloc+0x2e>
   25876:	e9c0 4601 	strd	r4, r6, [r0, #4]
   2587a:	e7e4      	b.n	25846 <_Balloc+0x16>

0002587c <_Bfree>:
   2587c:	b131      	cbz	r1, 2588c <_Bfree+0x10>
   2587e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   25880:	684a      	ldr	r2, [r1, #4]
   25882:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   25886:	6008      	str	r0, [r1, #0]
   25888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2588c:	4770      	bx	lr
   2588e:	bf00      	nop

00025890 <__multadd>:
   25890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25894:	690d      	ldr	r5, [r1, #16]
   25896:	4607      	mov	r7, r0
   25898:	460e      	mov	r6, r1
   2589a:	461c      	mov	r4, r3
   2589c:	f101 0e14 	add.w	lr, r1, #20
   258a0:	2000      	movs	r0, #0
   258a2:	f8de 1000 	ldr.w	r1, [lr]
   258a6:	b28b      	uxth	r3, r1
   258a8:	fb02 4303 	mla	r3, r2, r3, r4
   258ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   258b0:	0c09      	lsrs	r1, r1, #16
   258b2:	fb02 cc01 	mla	ip, r2, r1, ip
   258b6:	3001      	adds	r0, #1
   258b8:	b29b      	uxth	r3, r3
   258ba:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   258be:	4285      	cmp	r5, r0
   258c0:	f84e 3b04 	str.w	r3, [lr], #4
   258c4:	ea4f 441c 	mov.w	r4, ip, lsr #16
   258c8:	dceb      	bgt.n	258a2 <__multadd+0x12>
   258ca:	b13c      	cbz	r4, 258dc <__multadd+0x4c>
   258cc:	68b3      	ldr	r3, [r6, #8]
   258ce:	42ab      	cmp	r3, r5
   258d0:	dd07      	ble.n	258e2 <__multadd+0x52>
   258d2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   258d6:	3501      	adds	r5, #1
   258d8:	615c      	str	r4, [r3, #20]
   258da:	6135      	str	r5, [r6, #16]
   258dc:	4630      	mov	r0, r6
   258de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   258e2:	6871      	ldr	r1, [r6, #4]
   258e4:	4638      	mov	r0, r7
   258e6:	3101      	adds	r1, #1
   258e8:	f7ff ffa2 	bl	25830 <_Balloc>
   258ec:	4680      	mov	r8, r0
   258ee:	b1a8      	cbz	r0, 2591c <__multadd+0x8c>
   258f0:	6932      	ldr	r2, [r6, #16]
   258f2:	3202      	adds	r2, #2
   258f4:	f106 010c 	add.w	r1, r6, #12
   258f8:	0092      	lsls	r2, r2, #2
   258fa:	300c      	adds	r0, #12
   258fc:	f7e7 f918 	bl	cb30 <memcpy>
   25900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
   25902:	6872      	ldr	r2, [r6, #4]
   25904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   25908:	6031      	str	r1, [r6, #0]
   2590a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2590e:	4646      	mov	r6, r8
   25910:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   25914:	3501      	adds	r5, #1
   25916:	615c      	str	r4, [r3, #20]
   25918:	6135      	str	r5, [r6, #16]
   2591a:	e7df      	b.n	258dc <__multadd+0x4c>
   2591c:	4b02      	ldr	r3, [pc, #8]	@ (25928 <__multadd+0x98>)
   2591e:	4803      	ldr	r0, [pc, #12]	@ (2592c <__multadd+0x9c>)
   25920:	4642      	mov	r2, r8
   25922:	21ba      	movs	r1, #186	@ 0xba
   25924:	f7fc f882 	bl	21a2c <__assert_func>
   25928:	000309f4 	.word	0x000309f4
   2592c:	00030a94 	.word	0x00030a94

00025930 <__s2b>:
   25930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25934:	4617      	mov	r7, r2
   25936:	4a28      	ldr	r2, [pc, #160]	@ (259d8 <__s2b+0xa8>)
   25938:	461e      	mov	r6, r3
   2593a:	3308      	adds	r3, #8
   2593c:	460c      	mov	r4, r1
   2593e:	2e09      	cmp	r6, #9
   25940:	fb82 1203 	smull	r1, r2, r2, r3
   25944:	ea4f 73e3 	mov.w	r3, r3, asr #31
   25948:	4605      	mov	r5, r0
   2594a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   2594e:	dd3a      	ble.n	259c6 <__s2b+0x96>
   25950:	f04f 0c01 	mov.w	ip, #1
   25954:	2100      	movs	r1, #0
   25956:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2595a:	4563      	cmp	r3, ip
   2595c:	f101 0101 	add.w	r1, r1, #1
   25960:	dcf9      	bgt.n	25956 <__s2b+0x26>
   25962:	4628      	mov	r0, r5
   25964:	f7ff ff64 	bl	25830 <_Balloc>
   25968:	4601      	mov	r1, r0
   2596a:	b370      	cbz	r0, 259ca <__s2b+0x9a>
   2596c:	9b08      	ldr	r3, [sp, #32]
   2596e:	6143      	str	r3, [r0, #20]
   25970:	2f09      	cmp	r7, #9
   25972:	f04f 0301 	mov.w	r3, #1
   25976:	6103      	str	r3, [r0, #16]
   25978:	dc12      	bgt.n	259a0 <__s2b+0x70>
   2597a:	340a      	adds	r4, #10
   2597c:	2709      	movs	r7, #9
   2597e:	42be      	cmp	r6, r7
   25980:	dd0b      	ble.n	2599a <__s2b+0x6a>
   25982:	1bf6      	subs	r6, r6, r7
   25984:	4426      	add	r6, r4
   25986:	f814 3b01 	ldrb.w	r3, [r4], #1
   2598a:	220a      	movs	r2, #10
   2598c:	3b30      	subs	r3, #48	@ 0x30
   2598e:	4628      	mov	r0, r5
   25990:	f7ff ff7e 	bl	25890 <__multadd>
   25994:	42b4      	cmp	r4, r6
   25996:	4601      	mov	r1, r0
   25998:	d1f5      	bne.n	25986 <__s2b+0x56>
   2599a:	4608      	mov	r0, r1
   2599c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   259a0:	f104 0809 	add.w	r8, r4, #9
   259a4:	eb04 0907 	add.w	r9, r4, r7
   259a8:	4644      	mov	r4, r8
   259aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   259ae:	220a      	movs	r2, #10
   259b0:	3b30      	subs	r3, #48	@ 0x30
   259b2:	4628      	mov	r0, r5
   259b4:	f7ff ff6c 	bl	25890 <__multadd>
   259b8:	454c      	cmp	r4, r9
   259ba:	4601      	mov	r1, r0
   259bc:	d1f5      	bne.n	259aa <__s2b+0x7a>
   259be:	f1a7 0408 	sub.w	r4, r7, #8
   259c2:	4444      	add	r4, r8
   259c4:	e7db      	b.n	2597e <__s2b+0x4e>
   259c6:	2100      	movs	r1, #0
   259c8:	e7cb      	b.n	25962 <__s2b+0x32>
   259ca:	460a      	mov	r2, r1
   259cc:	4b03      	ldr	r3, [pc, #12]	@ (259dc <__s2b+0xac>)
   259ce:	4804      	ldr	r0, [pc, #16]	@ (259e0 <__s2b+0xb0>)
   259d0:	21d3      	movs	r1, #211	@ 0xd3
   259d2:	f7fc f82b 	bl	21a2c <__assert_func>
   259d6:	bf00      	nop
   259d8:	38e38e39 	.word	0x38e38e39
   259dc:	000309f4 	.word	0x000309f4
   259e0:	00030a94 	.word	0x00030a94

000259e4 <__hi0bits>:
   259e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
   259e8:	4603      	mov	r3, r0
   259ea:	bf36      	itet	cc
   259ec:	0403      	lslcc	r3, r0, #16
   259ee:	2000      	movcs	r0, #0
   259f0:	2010      	movcc	r0, #16
   259f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
   259f6:	bf3c      	itt	cc
   259f8:	021b      	lslcc	r3, r3, #8
   259fa:	3008      	addcc	r0, #8
   259fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
   25a00:	bf3c      	itt	cc
   25a02:	011b      	lslcc	r3, r3, #4
   25a04:	3004      	addcc	r0, #4
   25a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
   25a0a:	d303      	bcc.n	25a14 <__hi0bits+0x30>
   25a0c:	2b00      	cmp	r3, #0
   25a0e:	db06      	blt.n	25a1e <__hi0bits+0x3a>
   25a10:	3001      	adds	r0, #1
   25a12:	4770      	bx	lr
   25a14:	009b      	lsls	r3, r3, #2
   25a16:	d403      	bmi.n	25a20 <__hi0bits+0x3c>
   25a18:	005b      	lsls	r3, r3, #1
   25a1a:	d403      	bmi.n	25a24 <__hi0bits+0x40>
   25a1c:	2020      	movs	r0, #32
   25a1e:	4770      	bx	lr
   25a20:	3002      	adds	r0, #2
   25a22:	4770      	bx	lr
   25a24:	3003      	adds	r0, #3
   25a26:	4770      	bx	lr

00025a28 <__lo0bits>:
   25a28:	6803      	ldr	r3, [r0, #0]
   25a2a:	f013 0207 	ands.w	r2, r3, #7
   25a2e:	4601      	mov	r1, r0
   25a30:	d007      	beq.n	25a42 <__lo0bits+0x1a>
   25a32:	07da      	lsls	r2, r3, #31
   25a34:	d41f      	bmi.n	25a76 <__lo0bits+0x4e>
   25a36:	0798      	lsls	r0, r3, #30
   25a38:	d521      	bpl.n	25a7e <__lo0bits+0x56>
   25a3a:	085b      	lsrs	r3, r3, #1
   25a3c:	600b      	str	r3, [r1, #0]
   25a3e:	2001      	movs	r0, #1
   25a40:	4770      	bx	lr
   25a42:	b298      	uxth	r0, r3
   25a44:	b1a0      	cbz	r0, 25a70 <__lo0bits+0x48>
   25a46:	4610      	mov	r0, r2
   25a48:	b2da      	uxtb	r2, r3
   25a4a:	b90a      	cbnz	r2, 25a50 <__lo0bits+0x28>
   25a4c:	3008      	adds	r0, #8
   25a4e:	0a1b      	lsrs	r3, r3, #8
   25a50:	071a      	lsls	r2, r3, #28
   25a52:	bf04      	itt	eq
   25a54:	091b      	lsreq	r3, r3, #4
   25a56:	3004      	addeq	r0, #4
   25a58:	079a      	lsls	r2, r3, #30
   25a5a:	bf04      	itt	eq
   25a5c:	089b      	lsreq	r3, r3, #2
   25a5e:	3002      	addeq	r0, #2
   25a60:	07da      	lsls	r2, r3, #31
   25a62:	d403      	bmi.n	25a6c <__lo0bits+0x44>
   25a64:	085b      	lsrs	r3, r3, #1
   25a66:	f100 0001 	add.w	r0, r0, #1
   25a6a:	d006      	beq.n	25a7a <__lo0bits+0x52>
   25a6c:	600b      	str	r3, [r1, #0]
   25a6e:	4770      	bx	lr
   25a70:	0c1b      	lsrs	r3, r3, #16
   25a72:	2010      	movs	r0, #16
   25a74:	e7e8      	b.n	25a48 <__lo0bits+0x20>
   25a76:	2000      	movs	r0, #0
   25a78:	4770      	bx	lr
   25a7a:	2020      	movs	r0, #32
   25a7c:	4770      	bx	lr
   25a7e:	089b      	lsrs	r3, r3, #2
   25a80:	600b      	str	r3, [r1, #0]
   25a82:	2002      	movs	r0, #2
   25a84:	4770      	bx	lr
   25a86:	bf00      	nop

00025a88 <__i2b>:
   25a88:	b538      	push	{r3, r4, r5, lr}
   25a8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   25a8c:	4604      	mov	r4, r0
   25a8e:	460d      	mov	r5, r1
   25a90:	b14b      	cbz	r3, 25aa6 <__i2b+0x1e>
   25a92:	6858      	ldr	r0, [r3, #4]
   25a94:	b1b0      	cbz	r0, 25ac4 <__i2b+0x3c>
   25a96:	6802      	ldr	r2, [r0, #0]
   25a98:	605a      	str	r2, [r3, #4]
   25a9a:	2200      	movs	r2, #0
   25a9c:	2301      	movs	r3, #1
   25a9e:	e9c0 2303 	strd	r2, r3, [r0, #12]
   25aa2:	6145      	str	r5, [r0, #20]
   25aa4:	bd38      	pop	{r3, r4, r5, pc}
   25aa6:	2221      	movs	r2, #33	@ 0x21
   25aa8:	2104      	movs	r1, #4
   25aaa:	f002 fd37 	bl	2851c <_calloc_r>
   25aae:	4603      	mov	r3, r0
   25ab0:	6460      	str	r0, [r4, #68]	@ 0x44
   25ab2:	2800      	cmp	r0, #0
   25ab4:	d1ed      	bne.n	25a92 <__i2b+0xa>
   25ab6:	4b09      	ldr	r3, [pc, #36]	@ (25adc <__i2b+0x54>)
   25ab8:	4809      	ldr	r0, [pc, #36]	@ (25ae0 <__i2b+0x58>)
   25aba:	2200      	movs	r2, #0
   25abc:	f240 1145 	movw	r1, #325	@ 0x145
   25ac0:	f7fb ffb4 	bl	21a2c <__assert_func>
   25ac4:	221c      	movs	r2, #28
   25ac6:	2101      	movs	r1, #1
   25ac8:	4620      	mov	r0, r4
   25aca:	f002 fd27 	bl	2851c <_calloc_r>
   25ace:	2800      	cmp	r0, #0
   25ad0:	d0f1      	beq.n	25ab6 <__i2b+0x2e>
   25ad2:	2201      	movs	r2, #1
   25ad4:	2302      	movs	r3, #2
   25ad6:	e9c0 2301 	strd	r2, r3, [r0, #4]
   25ada:	e7de      	b.n	25a9a <__i2b+0x12>
   25adc:	000309f4 	.word	0x000309f4
   25ae0:	00030a94 	.word	0x00030a94

00025ae4 <__multiply>:
   25ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ae8:	f8d1 8010 	ldr.w	r8, [r1, #16]
   25aec:	6915      	ldr	r5, [r2, #16]
   25aee:	45a8      	cmp	r8, r5
   25af0:	b085      	sub	sp, #20
   25af2:	460e      	mov	r6, r1
   25af4:	4692      	mov	sl, r2
   25af6:	db05      	blt.n	25b04 <__multiply+0x20>
   25af8:	462a      	mov	r2, r5
   25afa:	4653      	mov	r3, sl
   25afc:	4645      	mov	r5, r8
   25afe:	468a      	mov	sl, r1
   25b00:	4690      	mov	r8, r2
   25b02:	461e      	mov	r6, r3
   25b04:	f8da 3008 	ldr.w	r3, [sl, #8]
   25b08:	f8da 1004 	ldr.w	r1, [sl, #4]
   25b0c:	eb05 0408 	add.w	r4, r5, r8
   25b10:	42a3      	cmp	r3, r4
   25b12:	bfb8      	it	lt
   25b14:	3101      	addlt	r1, #1
   25b16:	f7ff fe8b 	bl	25830 <_Balloc>
   25b1a:	4684      	mov	ip, r0
   25b1c:	2800      	cmp	r0, #0
   25b1e:	f000 808b 	beq.w	25c38 <__multiply+0x154>
   25b22:	f100 0714 	add.w	r7, r0, #20
   25b26:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
   25b2a:	4577      	cmp	r7, lr
   25b2c:	d205      	bcs.n	25b3a <__multiply+0x56>
   25b2e:	463b      	mov	r3, r7
   25b30:	2200      	movs	r2, #0
   25b32:	f843 2b04 	str.w	r2, [r3], #4
   25b36:	459e      	cmp	lr, r3
   25b38:	d8fb      	bhi.n	25b32 <__multiply+0x4e>
   25b3a:	3614      	adds	r6, #20
   25b3c:	eb06 0888 	add.w	r8, r6, r8, lsl #2
   25b40:	f10a 0914 	add.w	r9, sl, #20
   25b44:	4546      	cmp	r6, r8
   25b46:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   25b4a:	d266      	bcs.n	25c1a <__multiply+0x136>
   25b4c:	eba5 030a 	sub.w	r3, r5, sl
   25b50:	3b15      	subs	r3, #21
   25b52:	f023 0303 	bic.w	r3, r3, #3
   25b56:	f10a 0a15 	add.w	sl, sl, #21
   25b5a:	3304      	adds	r3, #4
   25b5c:	4555      	cmp	r5, sl
   25b5e:	bf2c      	ite	cs
   25b60:	469b      	movcs	fp, r3
   25b62:	f04f 0b04 	movcc.w	fp, #4
   25b66:	f8cd e008 	str.w	lr, [sp, #8]
   25b6a:	9403      	str	r4, [sp, #12]
   25b6c:	46ae      	mov	lr, r5
   25b6e:	46e2      	mov	sl, ip
   25b70:	e005      	b.n	25b7e <__multiply+0x9a>
   25b72:	0c09      	lsrs	r1, r1, #16
   25b74:	d12a      	bne.n	25bcc <__multiply+0xe8>
   25b76:	45b0      	cmp	r8, r6
   25b78:	f107 0704 	add.w	r7, r7, #4
   25b7c:	d94a      	bls.n	25c14 <__multiply+0x130>
   25b7e:	f856 1b04 	ldr.w	r1, [r6], #4
   25b82:	b28d      	uxth	r5, r1
   25b84:	2d00      	cmp	r5, #0
   25b86:	d0f4      	beq.n	25b72 <__multiply+0x8e>
   25b88:	46cc      	mov	ip, r9
   25b8a:	463c      	mov	r4, r7
   25b8c:	2300      	movs	r3, #0
   25b8e:	9601      	str	r6, [sp, #4]
   25b90:	f85c 0b04 	ldr.w	r0, [ip], #4
   25b94:	6821      	ldr	r1, [r4, #0]
   25b96:	b286      	uxth	r6, r0
   25b98:	b28a      	uxth	r2, r1
   25b9a:	0c00      	lsrs	r0, r0, #16
   25b9c:	fb05 2206 	mla	r2, r5, r6, r2
   25ba0:	0c09      	lsrs	r1, r1, #16
   25ba2:	441a      	add	r2, r3
   25ba4:	fb05 1100 	mla	r1, r5, r0, r1
   25ba8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   25bac:	b292      	uxth	r2, r2
   25bae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   25bb2:	45e6      	cmp	lr, ip
   25bb4:	f844 2b04 	str.w	r2, [r4], #4
   25bb8:	ea4f 4311 	mov.w	r3, r1, lsr #16
   25bbc:	d8e8      	bhi.n	25b90 <__multiply+0xac>
   25bbe:	9e01      	ldr	r6, [sp, #4]
   25bc0:	f847 300b 	str.w	r3, [r7, fp]
   25bc4:	f856 1c04 	ldr.w	r1, [r6, #-4]
   25bc8:	0c09      	lsrs	r1, r1, #16
   25bca:	d0d4      	beq.n	25b76 <__multiply+0x92>
   25bcc:	683b      	ldr	r3, [r7, #0]
   25bce:	2200      	movs	r2, #0
   25bd0:	4648      	mov	r0, r9
   25bd2:	461d      	mov	r5, r3
   25bd4:	463c      	mov	r4, r7
   25bd6:	4694      	mov	ip, r2
   25bd8:	8802      	ldrh	r2, [r0, #0]
   25bda:	fb01 c202 	mla	r2, r1, r2, ip
   25bde:	eb02 4215 	add.w	r2, r2, r5, lsr #16
   25be2:	b29b      	uxth	r3, r3
   25be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25be8:	f844 3b04 	str.w	r3, [r4], #4
   25bec:	f850 3b04 	ldr.w	r3, [r0], #4
   25bf0:	6825      	ldr	r5, [r4, #0]
   25bf2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   25bf6:	b2ab      	uxth	r3, r5
   25bf8:	fb01 330c 	mla	r3, r1, ip, r3
   25bfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   25c00:	4570      	cmp	r0, lr
   25c02:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   25c06:	d3e7      	bcc.n	25bd8 <__multiply+0xf4>
   25c08:	45b0      	cmp	r8, r6
   25c0a:	f847 300b 	str.w	r3, [r7, fp]
   25c0e:	f107 0704 	add.w	r7, r7, #4
   25c12:	d8b4      	bhi.n	25b7e <__multiply+0x9a>
   25c14:	e9dd e402 	ldrd	lr, r4, [sp, #8]
   25c18:	46d4      	mov	ip, sl
   25c1a:	2c00      	cmp	r4, #0
   25c1c:	dc02      	bgt.n	25c24 <__multiply+0x140>
   25c1e:	e005      	b.n	25c2c <__multiply+0x148>
   25c20:	3c01      	subs	r4, #1
   25c22:	d003      	beq.n	25c2c <__multiply+0x148>
   25c24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   25c28:	2b00      	cmp	r3, #0
   25c2a:	d0f9      	beq.n	25c20 <__multiply+0x13c>
   25c2c:	4660      	mov	r0, ip
   25c2e:	f8cc 4010 	str.w	r4, [ip, #16]
   25c32:	b005      	add	sp, #20
   25c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c38:	4b03      	ldr	r3, [pc, #12]	@ (25c48 <__multiply+0x164>)
   25c3a:	4804      	ldr	r0, [pc, #16]	@ (25c4c <__multiply+0x168>)
   25c3c:	4662      	mov	r2, ip
   25c3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
   25c42:	f7fb fef3 	bl	21a2c <__assert_func>
   25c46:	bf00      	nop
   25c48:	000309f4 	.word	0x000309f4
   25c4c:	00030a94 	.word	0x00030a94

00025c50 <__pow5mult>:
   25c50:	f012 0303 	ands.w	r3, r2, #3
   25c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c58:	4614      	mov	r4, r2
   25c5a:	4607      	mov	r7, r0
   25c5c:	d12c      	bne.n	25cb8 <__pow5mult+0x68>
   25c5e:	460d      	mov	r5, r1
   25c60:	10a4      	asrs	r4, r4, #2
   25c62:	d01c      	beq.n	25c9e <__pow5mult+0x4e>
   25c64:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
   25c66:	b386      	cbz	r6, 25cca <__pow5mult+0x7a>
   25c68:	07e3      	lsls	r3, r4, #31
   25c6a:	f04f 0800 	mov.w	r8, #0
   25c6e:	d406      	bmi.n	25c7e <__pow5mult+0x2e>
   25c70:	1064      	asrs	r4, r4, #1
   25c72:	d014      	beq.n	25c9e <__pow5mult+0x4e>
   25c74:	6830      	ldr	r0, [r6, #0]
   25c76:	b1a8      	cbz	r0, 25ca4 <__pow5mult+0x54>
   25c78:	4606      	mov	r6, r0
   25c7a:	07e3      	lsls	r3, r4, #31
   25c7c:	d5f8      	bpl.n	25c70 <__pow5mult+0x20>
   25c7e:	4632      	mov	r2, r6
   25c80:	4629      	mov	r1, r5
   25c82:	4638      	mov	r0, r7
   25c84:	f7ff ff2e 	bl	25ae4 <__multiply>
   25c88:	b135      	cbz	r5, 25c98 <__pow5mult+0x48>
   25c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
   25c8c:	6869      	ldr	r1, [r5, #4]
   25c8e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   25c92:	602a      	str	r2, [r5, #0]
   25c94:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   25c98:	1064      	asrs	r4, r4, #1
   25c9a:	4605      	mov	r5, r0
   25c9c:	d1ea      	bne.n	25c74 <__pow5mult+0x24>
   25c9e:	4628      	mov	r0, r5
   25ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25ca4:	4632      	mov	r2, r6
   25ca6:	4631      	mov	r1, r6
   25ca8:	4638      	mov	r0, r7
   25caa:	f7ff ff1b 	bl	25ae4 <__multiply>
   25cae:	6030      	str	r0, [r6, #0]
   25cb0:	f8c0 8000 	str.w	r8, [r0]
   25cb4:	4606      	mov	r6, r0
   25cb6:	e7e0      	b.n	25c7a <__pow5mult+0x2a>
   25cb8:	3b01      	subs	r3, #1
   25cba:	4a0f      	ldr	r2, [pc, #60]	@ (25cf8 <__pow5mult+0xa8>)
   25cbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   25cc0:	2300      	movs	r3, #0
   25cc2:	f7ff fde5 	bl	25890 <__multadd>
   25cc6:	4605      	mov	r5, r0
   25cc8:	e7ca      	b.n	25c60 <__pow5mult+0x10>
   25cca:	2101      	movs	r1, #1
   25ccc:	4638      	mov	r0, r7
   25cce:	f7ff fdaf 	bl	25830 <_Balloc>
   25cd2:	4606      	mov	r6, r0
   25cd4:	b140      	cbz	r0, 25ce8 <__pow5mult+0x98>
   25cd6:	2301      	movs	r3, #1
   25cd8:	f240 2271 	movw	r2, #625	@ 0x271
   25cdc:	e9c0 3204 	strd	r3, r2, [r0, #16]
   25ce0:	2300      	movs	r3, #0
   25ce2:	6438      	str	r0, [r7, #64]	@ 0x40
   25ce4:	6003      	str	r3, [r0, #0]
   25ce6:	e7bf      	b.n	25c68 <__pow5mult+0x18>
   25ce8:	4b04      	ldr	r3, [pc, #16]	@ (25cfc <__pow5mult+0xac>)
   25cea:	4805      	ldr	r0, [pc, #20]	@ (25d00 <__pow5mult+0xb0>)
   25cec:	4632      	mov	r2, r6
   25cee:	f240 1145 	movw	r1, #325	@ 0x145
   25cf2:	f7fb fe9b 	bl	21a2c <__assert_func>
   25cf6:	bf00      	nop
   25cf8:	00031520 	.word	0x00031520
   25cfc:	000309f4 	.word	0x000309f4
   25d00:	00030a94 	.word	0x00030a94

00025d04 <__lshift>:
   25d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d08:	460c      	mov	r4, r1
   25d0a:	4690      	mov	r8, r2
   25d0c:	6927      	ldr	r7, [r4, #16]
   25d0e:	68a3      	ldr	r3, [r4, #8]
   25d10:	6849      	ldr	r1, [r1, #4]
   25d12:	eb07 1762 	add.w	r7, r7, r2, asr #5
   25d16:	1c7d      	adds	r5, r7, #1
   25d18:	429d      	cmp	r5, r3
   25d1a:	4606      	mov	r6, r0
   25d1c:	ea4f 1962 	mov.w	r9, r2, asr #5
   25d20:	dd04      	ble.n	25d2c <__lshift+0x28>
   25d22:	005b      	lsls	r3, r3, #1
   25d24:	429d      	cmp	r5, r3
   25d26:	f101 0101 	add.w	r1, r1, #1
   25d2a:	dcfa      	bgt.n	25d22 <__lshift+0x1e>
   25d2c:	4630      	mov	r0, r6
   25d2e:	f7ff fd7f 	bl	25830 <_Balloc>
   25d32:	4684      	mov	ip, r0
   25d34:	2800      	cmp	r0, #0
   25d36:	d051      	beq.n	25ddc <__lshift+0xd8>
   25d38:	f1b9 0f00 	cmp.w	r9, #0
   25d3c:	f100 0014 	add.w	r0, r0, #20
   25d40:	dd0e      	ble.n	25d60 <__lshift+0x5c>
   25d42:	f109 0205 	add.w	r2, r9, #5
   25d46:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   25d4a:	4603      	mov	r3, r0
   25d4c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   25d50:	2100      	movs	r1, #0
   25d52:	f843 1b04 	str.w	r1, [r3], #4
   25d56:	4293      	cmp	r3, r2
   25d58:	d1fb      	bne.n	25d52 <__lshift+0x4e>
   25d5a:	f1ae 0314 	sub.w	r3, lr, #20
   25d5e:	4418      	add	r0, r3
   25d60:	6921      	ldr	r1, [r4, #16]
   25d62:	f104 0314 	add.w	r3, r4, #20
   25d66:	f018 081f 	ands.w	r8, r8, #31
   25d6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   25d6e:	d02d      	beq.n	25dcc <__lshift+0xc8>
   25d70:	f1c8 0920 	rsb	r9, r8, #32
   25d74:	4686      	mov	lr, r0
   25d76:	f04f 0a00 	mov.w	sl, #0
   25d7a:	681a      	ldr	r2, [r3, #0]
   25d7c:	fa02 f208 	lsl.w	r2, r2, r8
   25d80:	ea42 020a 	orr.w	r2, r2, sl
   25d84:	f84e 2b04 	str.w	r2, [lr], #4
   25d88:	f853 2b04 	ldr.w	r2, [r3], #4
   25d8c:	4299      	cmp	r1, r3
   25d8e:	fa22 fa09 	lsr.w	sl, r2, r9
   25d92:	d8f2      	bhi.n	25d7a <__lshift+0x76>
   25d94:	1b0b      	subs	r3, r1, r4
   25d96:	3b15      	subs	r3, #21
   25d98:	f023 0303 	bic.w	r3, r3, #3
   25d9c:	3304      	adds	r3, #4
   25d9e:	f104 0215 	add.w	r2, r4, #21
   25da2:	4291      	cmp	r1, r2
   25da4:	bf38      	it	cc
   25da6:	2304      	movcc	r3, #4
   25da8:	f840 a003 	str.w	sl, [r0, r3]
   25dac:	f1ba 0f00 	cmp.w	sl, #0
   25db0:	d100      	bne.n	25db4 <__lshift+0xb0>
   25db2:	463d      	mov	r5, r7
   25db4:	6c73      	ldr	r3, [r6, #68]	@ 0x44
   25db6:	6862      	ldr	r2, [r4, #4]
   25db8:	f8cc 5010 	str.w	r5, [ip, #16]
   25dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   25dc0:	6021      	str	r1, [r4, #0]
   25dc2:	4660      	mov	r0, ip
   25dc4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   25dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25dcc:	3804      	subs	r0, #4
   25dce:	f853 2b04 	ldr.w	r2, [r3], #4
   25dd2:	f840 2f04 	str.w	r2, [r0, #4]!
   25dd6:	4299      	cmp	r1, r3
   25dd8:	d8f9      	bhi.n	25dce <__lshift+0xca>
   25dda:	e7ea      	b.n	25db2 <__lshift+0xae>
   25ddc:	4b03      	ldr	r3, [pc, #12]	@ (25dec <__lshift+0xe8>)
   25dde:	4804      	ldr	r0, [pc, #16]	@ (25df0 <__lshift+0xec>)
   25de0:	4662      	mov	r2, ip
   25de2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
   25de6:	f7fb fe21 	bl	21a2c <__assert_func>
   25dea:	bf00      	nop
   25dec:	000309f4 	.word	0x000309f4
   25df0:	00030a94 	.word	0x00030a94

00025df4 <__mcmp>:
   25df4:	690b      	ldr	r3, [r1, #16]
   25df6:	4684      	mov	ip, r0
   25df8:	6900      	ldr	r0, [r0, #16]
   25dfa:	1ac0      	subs	r0, r0, r3
   25dfc:	d116      	bne.n	25e2c <__mcmp+0x38>
   25dfe:	f10c 0c14 	add.w	ip, ip, #20
   25e02:	3114      	adds	r1, #20
   25e04:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   25e08:	b410      	push	{r4}
   25e0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   25e0e:	e001      	b.n	25e14 <__mcmp+0x20>
   25e10:	4594      	cmp	ip, r2
   25e12:	d208      	bcs.n	25e26 <__mcmp+0x32>
   25e14:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   25e18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   25e1c:	428c      	cmp	r4, r1
   25e1e:	d0f7      	beq.n	25e10 <__mcmp+0x1c>
   25e20:	d205      	bcs.n	25e2e <__mcmp+0x3a>
   25e22:	f04f 30ff 	mov.w	r0, #4294967295
   25e26:	f85d 4b04 	ldr.w	r4, [sp], #4
   25e2a:	4770      	bx	lr
   25e2c:	4770      	bx	lr
   25e2e:	2001      	movs	r0, #1
   25e30:	f85d 4b04 	ldr.w	r4, [sp], #4
   25e34:	4770      	bx	lr
   25e36:	bf00      	nop

00025e38 <__mdiff>:
   25e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e3c:	4615      	mov	r5, r2
   25e3e:	690a      	ldr	r2, [r1, #16]
   25e40:	692b      	ldr	r3, [r5, #16]
   25e42:	1ad2      	subs	r2, r2, r3
   25e44:	2a00      	cmp	r2, #0
   25e46:	b083      	sub	sp, #12
   25e48:	4688      	mov	r8, r1
   25e4a:	f040 8087 	bne.w	25f5c <__mdiff+0x124>
   25e4e:	f101 0614 	add.w	r6, r1, #20
   25e52:	f105 0114 	add.w	r1, r5, #20
   25e56:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   25e5a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   25e5e:	e001      	b.n	25e64 <__mdiff+0x2c>
   25e60:	429e      	cmp	r6, r3
   25e62:	d27e      	bcs.n	25f62 <__mdiff+0x12a>
   25e64:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   25e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   25e6c:	4294      	cmp	r4, r2
   25e6e:	d0f7      	beq.n	25e60 <__mdiff+0x28>
   25e70:	d375      	bcc.n	25f5e <__mdiff+0x126>
   25e72:	462b      	mov	r3, r5
   25e74:	2400      	movs	r4, #0
   25e76:	4645      	mov	r5, r8
   25e78:	4698      	mov	r8, r3
   25e7a:	6869      	ldr	r1, [r5, #4]
   25e7c:	f7ff fcd8 	bl	25830 <_Balloc>
   25e80:	4681      	mov	r9, r0
   25e82:	2800      	cmp	r0, #0
   25e84:	f000 8089 	beq.w	25f9a <__mdiff+0x162>
   25e88:	692e      	ldr	r6, [r5, #16]
   25e8a:	60c4      	str	r4, [r0, #12]
   25e8c:	f8d8 0010 	ldr.w	r0, [r8, #16]
   25e90:	f105 0b14 	add.w	fp, r5, #20
   25e94:	f108 0e14 	add.w	lr, r8, #20
   25e98:	f109 0a14 	add.w	sl, r9, #20
   25e9c:	f105 0210 	add.w	r2, r5, #16
   25ea0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   25ea4:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
   25ea8:	4657      	mov	r7, sl
   25eaa:	f04f 0c00 	mov.w	ip, #0
   25eae:	f8cd b004 	str.w	fp, [sp, #4]
   25eb2:	f85e 4b04 	ldr.w	r4, [lr], #4
   25eb6:	f852 5f04 	ldr.w	r5, [r2, #4]!
   25eba:	fa1f fb84 	uxth.w	fp, r4
   25ebe:	b2ab      	uxth	r3, r5
   25ec0:	eba3 030b 	sub.w	r3, r3, fp
   25ec4:	0c24      	lsrs	r4, r4, #16
   25ec6:	4463      	add	r3, ip
   25ec8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   25ecc:	eb04 4423 	add.w	r4, r4, r3, asr #16
   25ed0:	b29b      	uxth	r3, r3
   25ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   25ed6:	4570      	cmp	r0, lr
   25ed8:	f847 3b04 	str.w	r3, [r7], #4
   25edc:	ea4f 4c24 	mov.w	ip, r4, asr #16
   25ee0:	d8e7      	bhi.n	25eb2 <__mdiff+0x7a>
   25ee2:	eba0 0208 	sub.w	r2, r0, r8
   25ee6:	f108 0815 	add.w	r8, r8, #21
   25eea:	4540      	cmp	r0, r8
   25eec:	f1a2 0215 	sub.w	r2, r2, #21
   25ef0:	bf34      	ite	cc
   25ef2:	2000      	movcc	r0, #0
   25ef4:	2001      	movcs	r0, #1
   25ef6:	0892      	lsrs	r2, r2, #2
   25ef8:	2800      	cmp	r0, #0
   25efa:	f8dd b004 	ldr.w	fp, [sp, #4]
   25efe:	f102 0401 	add.w	r4, r2, #1
   25f02:	ea4f 0484 	mov.w	r4, r4, lsl #2
   25f06:	bf08      	it	eq
   25f08:	2404      	moveq	r4, #4
   25f0a:	eb0b 0504 	add.w	r5, fp, r4
   25f0e:	42a9      	cmp	r1, r5
   25f10:	4454      	add	r4, sl
   25f12:	d933      	bls.n	25f7c <__mdiff+0x144>
   25f14:	4627      	mov	r7, r4
   25f16:	4628      	mov	r0, r5
   25f18:	f850 3b04 	ldr.w	r3, [r0], #4
   25f1c:	fa1c fe83 	uxtah	lr, ip, r3
   25f20:	0c1a      	lsrs	r2, r3, #16
   25f22:	4463      	add	r3, ip
   25f24:	eb02 422e 	add.w	r2, r2, lr, asr #16
   25f28:	b29b      	uxth	r3, r3
   25f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25f2e:	4281      	cmp	r1, r0
   25f30:	f847 3b04 	str.w	r3, [r7], #4
   25f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
   25f38:	d8ee      	bhi.n	25f18 <__mdiff+0xe0>
   25f3a:	3901      	subs	r1, #1
   25f3c:	1b49      	subs	r1, r1, r5
   25f3e:	f021 0103 	bic.w	r1, r1, #3
   25f42:	440c      	add	r4, r1
   25f44:	b923      	cbnz	r3, 25f50 <__mdiff+0x118>
   25f46:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   25f4a:	3e01      	subs	r6, #1
   25f4c:	2b00      	cmp	r3, #0
   25f4e:	d0fa      	beq.n	25f46 <__mdiff+0x10e>
   25f50:	4648      	mov	r0, r9
   25f52:	f8c9 6010 	str.w	r6, [r9, #16]
   25f56:	b003      	add	sp, #12
   25f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f5c:	da89      	bge.n	25e72 <__mdiff+0x3a>
   25f5e:	2401      	movs	r4, #1
   25f60:	e78b      	b.n	25e7a <__mdiff+0x42>
   25f62:	2100      	movs	r1, #0
   25f64:	f7ff fc64 	bl	25830 <_Balloc>
   25f68:	4681      	mov	r9, r0
   25f6a:	b178      	cbz	r0, 25f8c <__mdiff+0x154>
   25f6c:	2201      	movs	r2, #1
   25f6e:	2300      	movs	r3, #0
   25f70:	e9c0 2304 	strd	r2, r3, [r0, #16]
   25f74:	4648      	mov	r0, r9
   25f76:	b003      	add	sp, #12
   25f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f7c:	2800      	cmp	r0, #0
   25f7e:	ea4f 0282 	mov.w	r2, r2, lsl #2
   25f82:	bf08      	it	eq
   25f84:	2200      	moveq	r2, #0
   25f86:	eb0a 0402 	add.w	r4, sl, r2
   25f8a:	e7db      	b.n	25f44 <__mdiff+0x10c>
   25f8c:	4b06      	ldr	r3, [pc, #24]	@ (25fa8 <__mdiff+0x170>)
   25f8e:	4807      	ldr	r0, [pc, #28]	@ (25fac <__mdiff+0x174>)
   25f90:	464a      	mov	r2, r9
   25f92:	f240 2137 	movw	r1, #567	@ 0x237
   25f96:	f7fb fd49 	bl	21a2c <__assert_func>
   25f9a:	4b03      	ldr	r3, [pc, #12]	@ (25fa8 <__mdiff+0x170>)
   25f9c:	4803      	ldr	r0, [pc, #12]	@ (25fac <__mdiff+0x174>)
   25f9e:	464a      	mov	r2, r9
   25fa0:	f240 2145 	movw	r1, #581	@ 0x245
   25fa4:	f7fb fd42 	bl	21a2c <__assert_func>
   25fa8:	000309f4 	.word	0x000309f4
   25fac:	00030a94 	.word	0x00030a94

00025fb0 <__ulp>:
   25fb0:	b082      	sub	sp, #8
   25fb2:	ed8d 0b00 	vstr	d0, [sp]
   25fb6:	4b16      	ldr	r3, [pc, #88]	@ (26010 <__ulp+0x60>)
   25fb8:	9a01      	ldr	r2, [sp, #4]
   25fba:	4013      	ands	r3, r2
   25fbc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
   25fc0:	2b00      	cmp	r3, #0
   25fc2:	dd06      	ble.n	25fd2 <__ulp+0x22>
   25fc4:	2200      	movs	r2, #0
   25fc6:	4619      	mov	r1, r3
   25fc8:	4610      	mov	r0, r2
   25fca:	ec41 0b10 	vmov	d0, r0, r1
   25fce:	b002      	add	sp, #8
   25fd0:	4770      	bx	lr
   25fd2:	425b      	negs	r3, r3
   25fd4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
   25fd8:	ea4f 5223 	mov.w	r2, r3, asr #20
   25fdc:	da09      	bge.n	25ff2 <__ulp+0x42>
   25fde:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
   25fe2:	4113      	asrs	r3, r2
   25fe4:	2200      	movs	r2, #0
   25fe6:	4619      	mov	r1, r3
   25fe8:	4610      	mov	r0, r2
   25fea:	ec41 0b10 	vmov	d0, r0, r1
   25fee:	b002      	add	sp, #8
   25ff0:	4770      	bx	lr
   25ff2:	f1a2 0314 	sub.w	r3, r2, #20
   25ff6:	2b1e      	cmp	r3, #30
   25ff8:	bfda      	itte	le
   25ffa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
   25ffe:	40da      	lsrle	r2, r3
   26000:	2201      	movgt	r2, #1
   26002:	2300      	movs	r3, #0
   26004:	4619      	mov	r1, r3
   26006:	4610      	mov	r0, r2
   26008:	ec41 0b10 	vmov	d0, r0, r1
   2600c:	b002      	add	sp, #8
   2600e:	4770      	bx	lr
   26010:	7ff00000 	.word	0x7ff00000

00026014 <__b2d>:
   26014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26016:	6904      	ldr	r4, [r0, #16]
   26018:	f100 0614 	add.w	r6, r0, #20
   2601c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   26020:	1f27      	subs	r7, r4, #4
   26022:	f854 5c04 	ldr.w	r5, [r4, #-4]
   26026:	4628      	mov	r0, r5
   26028:	f7ff fcdc 	bl	259e4 <__hi0bits>
   2602c:	f1c0 0320 	rsb	r3, r0, #32
   26030:	280a      	cmp	r0, #10
   26032:	600b      	str	r3, [r1, #0]
   26034:	dd33      	ble.n	2609e <__b2d+0x8a>
   26036:	42be      	cmp	r6, r7
   26038:	f1a0 010b 	sub.w	r1, r0, #11
   2603c:	d219      	bcs.n	26072 <__b2d+0x5e>
   2603e:	f854 0c08 	ldr.w	r0, [r4, #-8]
   26042:	b321      	cbz	r1, 2608e <__b2d+0x7a>
   26044:	f1c1 0720 	rsb	r7, r1, #32
   26048:	408d      	lsls	r5, r1
   2604a:	fa20 f207 	lsr.w	r2, r0, r7
   2604e:	4315      	orrs	r5, r2
   26050:	4088      	lsls	r0, r1
   26052:	f1a4 0108 	sub.w	r1, r4, #8
   26056:	f045 537f 	orr.w	r3, r5, #1069547520	@ 0x3fc00000
   2605a:	428e      	cmp	r6, r1
   2605c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
   26060:	d219      	bcs.n	26096 <__b2d+0x82>
   26062:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   26066:	40f9      	lsrs	r1, r7
   26068:	4308      	orrs	r0, r1
   2606a:	4602      	mov	r2, r0
   2606c:	ec43 2b10 	vmov	d0, r2, r3
   26070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26072:	280b      	cmp	r0, #11
   26074:	d00a      	beq.n	2608c <__b2d+0x78>
   26076:	fa05 f101 	lsl.w	r1, r5, r1
   2607a:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
   2607e:	2000      	movs	r0, #0
   26080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
   26084:	4602      	mov	r2, r0
   26086:	ec43 2b10 	vmov	d0, r2, r3
   2608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2608c:	2000      	movs	r0, #0
   2608e:	f045 537f 	orr.w	r3, r5, #1069547520	@ 0x3fc00000
   26092:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
   26096:	4602      	mov	r2, r0
   26098:	ec43 2b10 	vmov	d0, r2, r3
   2609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2609e:	f1c0 0c0b 	rsb	ip, r0, #11
   260a2:	fa25 f10c 	lsr.w	r1, r5, ip
   260a6:	42be      	cmp	r6, r7
   260a8:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
   260ac:	bf38      	it	cc
   260ae:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   260b2:	f100 0015 	add.w	r0, r0, #21
   260b6:	bf34      	ite	cc
   260b8:	fa21 f10c 	lsrcc.w	r1, r1, ip
   260bc:	2100      	movcs	r1, #0
   260be:	fa05 f000 	lsl.w	r0, r5, r0
   260c2:	4308      	orrs	r0, r1
   260c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
   260c8:	4602      	mov	r2, r0
   260ca:	ec43 2b10 	vmov	d0, r2, r3
   260ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000260d0 <__d2b>:
   260d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   260d4:	460e      	mov	r6, r1
   260d6:	b083      	sub	sp, #12
   260d8:	2101      	movs	r1, #1
   260da:	ec59 8b10 	vmov	r8, r9, d0
   260de:	4615      	mov	r5, r2
   260e0:	f7ff fba6 	bl	25830 <_Balloc>
   260e4:	4604      	mov	r4, r0
   260e6:	2800      	cmp	r0, #0
   260e8:	d046      	beq.n	26178 <__d2b+0xa8>
   260ea:	f3c9 570a 	ubfx	r7, r9, #20, #11
   260ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
   260f2:	b10f      	cbz	r7, 260f8 <__d2b+0x28>
   260f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   260f8:	9301      	str	r3, [sp, #4]
   260fa:	f1b8 0300 	subs.w	r3, r8, #0
   260fe:	d113      	bne.n	26128 <__d2b+0x58>
   26100:	a801      	add	r0, sp, #4
   26102:	f7ff fc91 	bl	25a28 <__lo0bits>
   26106:	9b01      	ldr	r3, [sp, #4]
   26108:	6163      	str	r3, [r4, #20]
   2610a:	2201      	movs	r2, #1
   2610c:	3020      	adds	r0, #32
   2610e:	6122      	str	r2, [r4, #16]
   26110:	b30f      	cbz	r7, 26156 <__d2b+0x86>
   26112:	f2a7 4733 	subw	r7, r7, #1075	@ 0x433
   26116:	4407      	add	r7, r0
   26118:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
   2611c:	6037      	str	r7, [r6, #0]
   2611e:	6028      	str	r0, [r5, #0]
   26120:	4620      	mov	r0, r4
   26122:	b003      	add	sp, #12
   26124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26128:	4668      	mov	r0, sp
   2612a:	9300      	str	r3, [sp, #0]
   2612c:	f7ff fc7c 	bl	25a28 <__lo0bits>
   26130:	9b01      	ldr	r3, [sp, #4]
   26132:	b1f8      	cbz	r0, 26174 <__d2b+0xa4>
   26134:	9900      	ldr	r1, [sp, #0]
   26136:	f1c0 0220 	rsb	r2, r0, #32
   2613a:	fa03 f202 	lsl.w	r2, r3, r2
   2613e:	40c3      	lsrs	r3, r0
   26140:	430a      	orrs	r2, r1
   26142:	9301      	str	r3, [sp, #4]
   26144:	2b00      	cmp	r3, #0
   26146:	6162      	str	r2, [r4, #20]
   26148:	bf0c      	ite	eq
   2614a:	2201      	moveq	r2, #1
   2614c:	2202      	movne	r2, #2
   2614e:	61a3      	str	r3, [r4, #24]
   26150:	6122      	str	r2, [r4, #16]
   26152:	2f00      	cmp	r7, #0
   26154:	d1dd      	bne.n	26112 <__d2b+0x42>
   26156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2615a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
   2615e:	6030      	str	r0, [r6, #0]
   26160:	6918      	ldr	r0, [r3, #16]
   26162:	f7ff fc3f 	bl	259e4 <__hi0bits>
   26166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2616a:	6028      	str	r0, [r5, #0]
   2616c:	4620      	mov	r0, r4
   2616e:	b003      	add	sp, #12
   26170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26174:	9a00      	ldr	r2, [sp, #0]
   26176:	e7e5      	b.n	26144 <__d2b+0x74>
   26178:	4b03      	ldr	r3, [pc, #12]	@ (26188 <__d2b+0xb8>)
   2617a:	4804      	ldr	r0, [pc, #16]	@ (2618c <__d2b+0xbc>)
   2617c:	4622      	mov	r2, r4
   2617e:	f240 310f 	movw	r1, #783	@ 0x30f
   26182:	f7fb fc53 	bl	21a2c <__assert_func>
   26186:	bf00      	nop
   26188:	000309f4 	.word	0x000309f4
   2618c:	00030a94 	.word	0x00030a94

00026190 <__ratio>:
   26190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26194:	b083      	sub	sp, #12
   26196:	4688      	mov	r8, r1
   26198:	4669      	mov	r1, sp
   2619a:	4681      	mov	r9, r0
   2619c:	f7ff ff3a 	bl	26014 <__b2d>
   261a0:	a901      	add	r1, sp, #4
   261a2:	4640      	mov	r0, r8
   261a4:	ec55 4b10 	vmov	r4, r5, d0
   261a8:	f7ff ff34 	bl	26014 <__b2d>
   261ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   261b0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   261b4:	1ad2      	subs	r2, r2, r3
   261b6:	e9dd 3100 	ldrd	r3, r1, [sp]
   261ba:	1a5b      	subs	r3, r3, r1
   261bc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   261c0:	2b00      	cmp	r3, #0
   261c2:	ec59 8b10 	vmov	r8, r9, d0
   261c6:	dd0d      	ble.n	261e4 <__ratio+0x54>
   261c8:	eb05 5703 	add.w	r7, r5, r3, lsl #20
   261cc:	463d      	mov	r5, r7
   261ce:	4642      	mov	r2, r8
   261d0:	464b      	mov	r3, r9
   261d2:	4620      	mov	r0, r4
   261d4:	4629      	mov	r1, r5
   261d6:	f7e6 fa79 	bl	c6cc <__aeabi_ddiv>
   261da:	ec41 0b10 	vmov	d0, r0, r1
   261de:	b003      	add	sp, #12
   261e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   261e4:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   261e8:	eb09 5103 	add.w	r1, r9, r3, lsl #20
   261ec:	4689      	mov	r9, r1
   261ee:	e7ee      	b.n	261ce <__ratio+0x3e>

000261f0 <__copybits>:
   261f0:	3901      	subs	r1, #1
   261f2:	1149      	asrs	r1, r1, #5
   261f4:	f101 0c01 	add.w	ip, r1, #1
   261f8:	6911      	ldr	r1, [r2, #16]
   261fa:	f102 0314 	add.w	r3, r2, #20
   261fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   26202:	428b      	cmp	r3, r1
   26204:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   26208:	d216      	bcs.n	26238 <__copybits+0x48>
   2620a:	b510      	push	{r4, lr}
   2620c:	f1a0 0e04 	sub.w	lr, r0, #4
   26210:	f853 4b04 	ldr.w	r4, [r3], #4
   26214:	f84e 4f04 	str.w	r4, [lr, #4]!
   26218:	4299      	cmp	r1, r3
   2621a:	d8f9      	bhi.n	26210 <__copybits+0x20>
   2621c:	1a8b      	subs	r3, r1, r2
   2621e:	3b15      	subs	r3, #21
   26220:	f023 0303 	bic.w	r3, r3, #3
   26224:	3304      	adds	r3, #4
   26226:	4418      	add	r0, r3
   26228:	4584      	cmp	ip, r0
   2622a:	d904      	bls.n	26236 <__copybits+0x46>
   2622c:	2300      	movs	r3, #0
   2622e:	f840 3b04 	str.w	r3, [r0], #4
   26232:	4584      	cmp	ip, r0
   26234:	d8fb      	bhi.n	2622e <__copybits+0x3e>
   26236:	bd10      	pop	{r4, pc}
   26238:	4584      	cmp	ip, r0
   2623a:	d905      	bls.n	26248 <__copybits+0x58>
   2623c:	2300      	movs	r3, #0
   2623e:	f840 3b04 	str.w	r3, [r0], #4
   26242:	4584      	cmp	ip, r0
   26244:	d8fb      	bhi.n	2623e <__copybits+0x4e>
   26246:	4770      	bx	lr
   26248:	4770      	bx	lr
   2624a:	bf00      	nop

0002624c <__any_on>:
   2624c:	6903      	ldr	r3, [r0, #16]
   2624e:	114a      	asrs	r2, r1, #5
   26250:	4293      	cmp	r3, r2
   26252:	f100 0014 	add.w	r0, r0, #20
   26256:	da09      	bge.n	2626c <__any_on+0x20>
   26258:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2625c:	e002      	b.n	26264 <__any_on+0x18>
   2625e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   26262:	b9aa      	cbnz	r2, 26290 <__any_on+0x44>
   26264:	4283      	cmp	r3, r0
   26266:	d8fa      	bhi.n	2625e <__any_on+0x12>
   26268:	2000      	movs	r0, #0
   2626a:	4770      	bx	lr
   2626c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   26270:	ddf8      	ble.n	26264 <__any_on+0x18>
   26272:	f011 011f 	ands.w	r1, r1, #31
   26276:	d0f5      	beq.n	26264 <__any_on+0x18>
   26278:	b410      	push	{r4}
   2627a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2627e:	fa24 f201 	lsr.w	r2, r4, r1
   26282:	408a      	lsls	r2, r1
   26284:	4294      	cmp	r4, r2
   26286:	d009      	beq.n	2629c <__any_on+0x50>
   26288:	2001      	movs	r0, #1
   2628a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2628e:	4770      	bx	lr
   26290:	2001      	movs	r0, #1
   26292:	4770      	bx	lr
   26294:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   26298:	2a00      	cmp	r2, #0
   2629a:	d1f5      	bne.n	26288 <__any_on+0x3c>
   2629c:	4283      	cmp	r3, r0
   2629e:	d8f9      	bhi.n	26294 <__any_on+0x48>
   262a0:	2000      	movs	r0, #0
   262a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   262a6:	4770      	bx	lr

000262a8 <_realloc_r>:
   262a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262ac:	4616      	mov	r6, r2
   262ae:	2900      	cmp	r1, #0
   262b0:	f000 8096 	beq.w	263e0 <_realloc_r+0x138>
   262b4:	460c      	mov	r4, r1
   262b6:	4680      	mov	r8, r0
   262b8:	f106 050b 	add.w	r5, r6, #11
   262bc:	f7ff faac 	bl	25818 <__malloc_lock>
   262c0:	f854 1c04 	ldr.w	r1, [r4, #-4]
   262c4:	2d16      	cmp	r5, #22
   262c6:	f1a4 0908 	sub.w	r9, r4, #8
   262ca:	f021 0703 	bic.w	r7, r1, #3
   262ce:	d858      	bhi.n	26382 <_realloc_r+0xda>
   262d0:	2510      	movs	r5, #16
   262d2:	42ae      	cmp	r6, r5
   262d4:	d858      	bhi.n	26388 <_realloc_r+0xe0>
   262d6:	42af      	cmp	r7, r5
   262d8:	da60      	bge.n	2639c <_realloc_r+0xf4>
   262da:	4bbe      	ldr	r3, [pc, #760]	@ (265d4 <_realloc_r+0x32c>)
   262dc:	689a      	ldr	r2, [r3, #8]
   262de:	eb09 0c07 	add.w	ip, r9, r7
   262e2:	4562      	cmp	r2, ip
   262e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
   262e8:	f000 8090 	beq.w	2640c <_realloc_r+0x164>
   262ec:	f020 0301 	bic.w	r3, r0, #1
   262f0:	4463      	add	r3, ip
   262f2:	685b      	ldr	r3, [r3, #4]
   262f4:	07db      	lsls	r3, r3, #31
   262f6:	d468      	bmi.n	263ca <_realloc_r+0x122>
   262f8:	f020 0003 	bic.w	r0, r0, #3
   262fc:	183b      	adds	r3, r7, r0
   262fe:	429d      	cmp	r5, r3
   26300:	dd47      	ble.n	26392 <_realloc_r+0xea>
   26302:	07cb      	lsls	r3, r1, #31
   26304:	d412      	bmi.n	2632c <_realloc_r+0x84>
   26306:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2630a:	eba9 0b03 	sub.w	fp, r9, r3
   2630e:	f8db 3004 	ldr.w	r3, [fp, #4]
   26312:	f023 0203 	bic.w	r2, r3, #3
   26316:	4410      	add	r0, r2
   26318:	eb00 0a07 	add.w	sl, r0, r7
   2631c:	4555      	cmp	r5, sl
   2631e:	f340 80f6 	ble.w	2650e <_realloc_r+0x266>
   26322:	eb07 0a02 	add.w	sl, r7, r2
   26326:	4555      	cmp	r5, sl
   26328:	f340 80cc 	ble.w	264c4 <_realloc_r+0x21c>
   2632c:	4631      	mov	r1, r6
   2632e:	4640      	mov	r0, r8
   26330:	f7fe ffaa 	bl	25288 <_malloc_r>
   26334:	4606      	mov	r6, r0
   26336:	2800      	cmp	r0, #0
   26338:	f000 8120 	beq.w	2657c <_realloc_r+0x2d4>
   2633c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26340:	f023 0301 	bic.w	r3, r3, #1
   26344:	444b      	add	r3, r9
   26346:	f1a0 0208 	sub.w	r2, r0, #8
   2634a:	4293      	cmp	r3, r2
   2634c:	f000 80b4 	beq.w	264b8 <_realloc_r+0x210>
   26350:	1f3a      	subs	r2, r7, #4
   26352:	2a24      	cmp	r2, #36	@ 0x24
   26354:	f200 80d7 	bhi.w	26506 <_realloc_r+0x25e>
   26358:	2a13      	cmp	r2, #19
   2635a:	f200 80a2 	bhi.w	264a2 <_realloc_r+0x1fa>
   2635e:	4603      	mov	r3, r0
   26360:	4622      	mov	r2, r4
   26362:	6811      	ldr	r1, [r2, #0]
   26364:	6019      	str	r1, [r3, #0]
   26366:	6851      	ldr	r1, [r2, #4]
   26368:	6059      	str	r1, [r3, #4]
   2636a:	6892      	ldr	r2, [r2, #8]
   2636c:	609a      	str	r2, [r3, #8]
   2636e:	4621      	mov	r1, r4
   26370:	4640      	mov	r0, r8
   26372:	f7fe fa73 	bl	2485c <_free_r>
   26376:	4640      	mov	r0, r8
   26378:	f7ff fa54 	bl	25824 <__malloc_unlock>
   2637c:	4630      	mov	r0, r6
   2637e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26382:	f035 0507 	bics.w	r5, r5, #7
   26386:	d5a4      	bpl.n	262d2 <_realloc_r+0x2a>
   26388:	230c      	movs	r3, #12
   2638a:	f8c8 3000 	str.w	r3, [r8]
   2638e:	2600      	movs	r6, #0
   26390:	e018      	b.n	263c4 <_realloc_r+0x11c>
   26392:	461f      	mov	r7, r3
   26394:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   26398:	60d3      	str	r3, [r2, #12]
   2639a:	609a      	str	r2, [r3, #8]
   2639c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   263a0:	1b7a      	subs	r2, r7, r5
   263a2:	2a0f      	cmp	r2, #15
   263a4:	f003 0301 	and.w	r3, r3, #1
   263a8:	eb09 0007 	add.w	r0, r9, r7
   263ac:	d81d      	bhi.n	263ea <_realloc_r+0x142>
   263ae:	433b      	orrs	r3, r7
   263b0:	f8c9 3004 	str.w	r3, [r9, #4]
   263b4:	6843      	ldr	r3, [r0, #4]
   263b6:	f043 0301 	orr.w	r3, r3, #1
   263ba:	6043      	str	r3, [r0, #4]
   263bc:	4640      	mov	r0, r8
   263be:	f7ff fa31 	bl	25824 <__malloc_unlock>
   263c2:	4626      	mov	r6, r4
   263c4:	4630      	mov	r0, r6
   263c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263ca:	07c9      	lsls	r1, r1, #31
   263cc:	d4ae      	bmi.n	2632c <_realloc_r+0x84>
   263ce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   263d2:	eba9 0b03 	sub.w	fp, r9, r3
   263d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   263da:	f023 0203 	bic.w	r2, r3, #3
   263de:	e7a0      	b.n	26322 <_realloc_r+0x7a>
   263e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263e4:	4611      	mov	r1, r2
   263e6:	f7fe bf4f 	b.w	25288 <_malloc_r>
   263ea:	eb09 0105 	add.w	r1, r9, r5
   263ee:	432b      	orrs	r3, r5
   263f0:	f042 0201 	orr.w	r2, r2, #1
   263f4:	f8c9 3004 	str.w	r3, [r9, #4]
   263f8:	604a      	str	r2, [r1, #4]
   263fa:	6843      	ldr	r3, [r0, #4]
   263fc:	f043 0301 	orr.w	r3, r3, #1
   26400:	6043      	str	r3, [r0, #4]
   26402:	3108      	adds	r1, #8
   26404:	4640      	mov	r0, r8
   26406:	f7fe fa29 	bl	2485c <_free_r>
   2640a:	e7d7      	b.n	263bc <_realloc_r+0x114>
   2640c:	f020 0003 	bic.w	r0, r0, #3
   26410:	19c2      	adds	r2, r0, r7
   26412:	f105 0c10 	add.w	ip, r5, #16
   26416:	4562      	cmp	r2, ip
   26418:	f280 8091 	bge.w	2653e <_realloc_r+0x296>
   2641c:	07ca      	lsls	r2, r1, #31
   2641e:	d485      	bmi.n	2632c <_realloc_r+0x84>
   26420:	f854 2c08 	ldr.w	r2, [r4, #-8]
   26424:	eba9 0b02 	sub.w	fp, r9, r2
   26428:	f8db 2004 	ldr.w	r2, [fp, #4]
   2642c:	f022 0203 	bic.w	r2, r2, #3
   26430:	4410      	add	r0, r2
   26432:	eb00 0a07 	add.w	sl, r0, r7
   26436:	45d4      	cmp	ip, sl
   26438:	f73f af73 	bgt.w	26322 <_realloc_r+0x7a>
   2643c:	465e      	mov	r6, fp
   2643e:	f8db 100c 	ldr.w	r1, [fp, #12]
   26442:	f856 0f08 	ldr.w	r0, [r6, #8]!
   26446:	1f3a      	subs	r2, r7, #4
   26448:	2a24      	cmp	r2, #36	@ 0x24
   2644a:	60c1      	str	r1, [r0, #12]
   2644c:	6088      	str	r0, [r1, #8]
   2644e:	f200 80ae 	bhi.w	265ae <_realloc_r+0x306>
   26452:	2a13      	cmp	r2, #19
   26454:	f240 80a9 	bls.w	265aa <_realloc_r+0x302>
   26458:	6821      	ldr	r1, [r4, #0]
   2645a:	f8cb 1008 	str.w	r1, [fp, #8]
   2645e:	6861      	ldr	r1, [r4, #4]
   26460:	f8cb 100c 	str.w	r1, [fp, #12]
   26464:	2a1b      	cmp	r2, #27
   26466:	f200 80a8 	bhi.w	265ba <_realloc_r+0x312>
   2646a:	3408      	adds	r4, #8
   2646c:	f10b 0210 	add.w	r2, fp, #16
   26470:	6821      	ldr	r1, [r4, #0]
   26472:	6011      	str	r1, [r2, #0]
   26474:	6861      	ldr	r1, [r4, #4]
   26476:	6051      	str	r1, [r2, #4]
   26478:	68a1      	ldr	r1, [r4, #8]
   2647a:	6091      	str	r1, [r2, #8]
   2647c:	eb0b 0105 	add.w	r1, fp, r5
   26480:	ebaa 0205 	sub.w	r2, sl, r5
   26484:	f042 0201 	orr.w	r2, r2, #1
   26488:	6099      	str	r1, [r3, #8]
   2648a:	604a      	str	r2, [r1, #4]
   2648c:	f8db 3004 	ldr.w	r3, [fp, #4]
   26490:	f003 0301 	and.w	r3, r3, #1
   26494:	432b      	orrs	r3, r5
   26496:	4640      	mov	r0, r8
   26498:	f8cb 3004 	str.w	r3, [fp, #4]
   2649c:	f7ff f9c2 	bl	25824 <__malloc_unlock>
   264a0:	e790      	b.n	263c4 <_realloc_r+0x11c>
   264a2:	6823      	ldr	r3, [r4, #0]
   264a4:	6003      	str	r3, [r0, #0]
   264a6:	6863      	ldr	r3, [r4, #4]
   264a8:	6043      	str	r3, [r0, #4]
   264aa:	2a1b      	cmp	r2, #27
   264ac:	d83c      	bhi.n	26528 <_realloc_r+0x280>
   264ae:	f104 0208 	add.w	r2, r4, #8
   264b2:	f100 0308 	add.w	r3, r0, #8
   264b6:	e754      	b.n	26362 <_realloc_r+0xba>
   264b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   264bc:	f023 0303 	bic.w	r3, r3, #3
   264c0:	441f      	add	r7, r3
   264c2:	e76b      	b.n	2639c <_realloc_r+0xf4>
   264c4:	1f3a      	subs	r2, r7, #4
   264c6:	465e      	mov	r6, fp
   264c8:	f8db 300c 	ldr.w	r3, [fp, #12]
   264cc:	f856 1f08 	ldr.w	r1, [r6, #8]!
   264d0:	2a24      	cmp	r2, #36	@ 0x24
   264d2:	60cb      	str	r3, [r1, #12]
   264d4:	6099      	str	r1, [r3, #8]
   264d6:	d822      	bhi.n	2651e <_realloc_r+0x276>
   264d8:	2a13      	cmp	r2, #19
   264da:	d91e      	bls.n	2651a <_realloc_r+0x272>
   264dc:	6823      	ldr	r3, [r4, #0]
   264de:	f8cb 3008 	str.w	r3, [fp, #8]
   264e2:	6863      	ldr	r3, [r4, #4]
   264e4:	f8cb 300c 	str.w	r3, [fp, #12]
   264e8:	2a1b      	cmp	r2, #27
   264ea:	d83b      	bhi.n	26564 <_realloc_r+0x2bc>
   264ec:	3408      	adds	r4, #8
   264ee:	f10b 0310 	add.w	r3, fp, #16
   264f2:	6822      	ldr	r2, [r4, #0]
   264f4:	601a      	str	r2, [r3, #0]
   264f6:	6862      	ldr	r2, [r4, #4]
   264f8:	605a      	str	r2, [r3, #4]
   264fa:	68a2      	ldr	r2, [r4, #8]
   264fc:	609a      	str	r2, [r3, #8]
   264fe:	4634      	mov	r4, r6
   26500:	4657      	mov	r7, sl
   26502:	46d9      	mov	r9, fp
   26504:	e74a      	b.n	2639c <_realloc_r+0xf4>
   26506:	4621      	mov	r1, r4
   26508:	f7fd fec2 	bl	24290 <memmove>
   2650c:	e72f      	b.n	2636e <_realloc_r+0xc6>
   2650e:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
   26512:	1f3a      	subs	r2, r7, #4
   26514:	60cb      	str	r3, [r1, #12]
   26516:	6099      	str	r1, [r3, #8]
   26518:	e7d5      	b.n	264c6 <_realloc_r+0x21e>
   2651a:	4633      	mov	r3, r6
   2651c:	e7e9      	b.n	264f2 <_realloc_r+0x24a>
   2651e:	4621      	mov	r1, r4
   26520:	4630      	mov	r0, r6
   26522:	f7fd feb5 	bl	24290 <memmove>
   26526:	e7ea      	b.n	264fe <_realloc_r+0x256>
   26528:	68a3      	ldr	r3, [r4, #8]
   2652a:	6083      	str	r3, [r0, #8]
   2652c:	68e3      	ldr	r3, [r4, #12]
   2652e:	60c3      	str	r3, [r0, #12]
   26530:	2a24      	cmp	r2, #36	@ 0x24
   26532:	d027      	beq.n	26584 <_realloc_r+0x2dc>
   26534:	f104 0210 	add.w	r2, r4, #16
   26538:	f100 0310 	add.w	r3, r0, #16
   2653c:	e711      	b.n	26362 <_realloc_r+0xba>
   2653e:	eb09 0105 	add.w	r1, r9, r5
   26542:	6099      	str	r1, [r3, #8]
   26544:	1b53      	subs	r3, r2, r5
   26546:	f043 0301 	orr.w	r3, r3, #1
   2654a:	604b      	str	r3, [r1, #4]
   2654c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26550:	f003 0301 	and.w	r3, r3, #1
   26554:	432b      	orrs	r3, r5
   26556:	4640      	mov	r0, r8
   26558:	f844 3c04 	str.w	r3, [r4, #-4]
   2655c:	f7ff f962 	bl	25824 <__malloc_unlock>
   26560:	4626      	mov	r6, r4
   26562:	e72f      	b.n	263c4 <_realloc_r+0x11c>
   26564:	68a3      	ldr	r3, [r4, #8]
   26566:	f8cb 3010 	str.w	r3, [fp, #16]
   2656a:	68e3      	ldr	r3, [r4, #12]
   2656c:	f8cb 3014 	str.w	r3, [fp, #20]
   26570:	2a24      	cmp	r2, #36	@ 0x24
   26572:	d010      	beq.n	26596 <_realloc_r+0x2ee>
   26574:	3410      	adds	r4, #16
   26576:	f10b 0318 	add.w	r3, fp, #24
   2657a:	e7ba      	b.n	264f2 <_realloc_r+0x24a>
   2657c:	4640      	mov	r0, r8
   2657e:	f7ff f951 	bl	25824 <__malloc_unlock>
   26582:	e704      	b.n	2638e <_realloc_r+0xe6>
   26584:	6923      	ldr	r3, [r4, #16]
   26586:	6103      	str	r3, [r0, #16]
   26588:	6961      	ldr	r1, [r4, #20]
   2658a:	6141      	str	r1, [r0, #20]
   2658c:	f104 0218 	add.w	r2, r4, #24
   26590:	f100 0318 	add.w	r3, r0, #24
   26594:	e6e5      	b.n	26362 <_realloc_r+0xba>
   26596:	6923      	ldr	r3, [r4, #16]
   26598:	f8cb 3018 	str.w	r3, [fp, #24]
   2659c:	6963      	ldr	r3, [r4, #20]
   2659e:	f8cb 301c 	str.w	r3, [fp, #28]
   265a2:	3418      	adds	r4, #24
   265a4:	f10b 0320 	add.w	r3, fp, #32
   265a8:	e7a3      	b.n	264f2 <_realloc_r+0x24a>
   265aa:	4632      	mov	r2, r6
   265ac:	e760      	b.n	26470 <_realloc_r+0x1c8>
   265ae:	4621      	mov	r1, r4
   265b0:	4630      	mov	r0, r6
   265b2:	f7fd fe6d 	bl	24290 <memmove>
   265b6:	4b07      	ldr	r3, [pc, #28]	@ (265d4 <_realloc_r+0x32c>)
   265b8:	e760      	b.n	2647c <_realloc_r+0x1d4>
   265ba:	68a1      	ldr	r1, [r4, #8]
   265bc:	f8cb 1010 	str.w	r1, [fp, #16]
   265c0:	68e1      	ldr	r1, [r4, #12]
   265c2:	f8cb 1014 	str.w	r1, [fp, #20]
   265c6:	2a24      	cmp	r2, #36	@ 0x24
   265c8:	d006      	beq.n	265d8 <_realloc_r+0x330>
   265ca:	3410      	adds	r4, #16
   265cc:	f10b 0218 	add.w	r2, fp, #24
   265d0:	e74e      	b.n	26470 <_realloc_r+0x1c8>
   265d2:	bf00      	nop
   265d4:	100026f0 	.word	0x100026f0
   265d8:	6922      	ldr	r2, [r4, #16]
   265da:	f8cb 2018 	str.w	r2, [fp, #24]
   265de:	6962      	ldr	r2, [r4, #20]
   265e0:	f8cb 201c 	str.w	r2, [fp, #28]
   265e4:	3418      	adds	r4, #24
   265e6:	f10b 0220 	add.w	r2, fp, #32
   265ea:	e741      	b.n	26470 <_realloc_r+0x1c8>

000265ec <__ascii_wctomb>:
   265ec:	b149      	cbz	r1, 26602 <__ascii_wctomb+0x16>
   265ee:	2aff      	cmp	r2, #255	@ 0xff
   265f0:	d802      	bhi.n	265f8 <__ascii_wctomb+0xc>
   265f2:	700a      	strb	r2, [r1, #0]
   265f4:	2001      	movs	r0, #1
   265f6:	4770      	bx	lr
   265f8:	238a      	movs	r3, #138	@ 0x8a
   265fa:	6003      	str	r3, [r0, #0]
   265fc:	f04f 30ff 	mov.w	r0, #4294967295
   26600:	4770      	bx	lr
   26602:	4608      	mov	r0, r1
   26604:	4770      	bx	lr
   26606:	bf00      	nop

00026608 <_wcrtomb_r>:
   26608:	b570      	push	{r4, r5, r6, lr}
   2660a:	4605      	mov	r5, r0
   2660c:	b084      	sub	sp, #16
   2660e:	b15b      	cbz	r3, 26628 <_wcrtomb_r+0x20>
   26610:	461c      	mov	r4, r3
   26612:	4b0f      	ldr	r3, [pc, #60]	@ (26650 <_wcrtomb_r+0x48>)
   26614:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
   26618:	4623      	mov	r3, r4
   2661a:	b169      	cbz	r1, 26638 <_wcrtomb_r+0x30>
   2661c:	4628      	mov	r0, r5
   2661e:	47b0      	blx	r6
   26620:	1c43      	adds	r3, r0, #1
   26622:	d00f      	beq.n	26644 <_wcrtomb_r+0x3c>
   26624:	b004      	add	sp, #16
   26626:	bd70      	pop	{r4, r5, r6, pc}
   26628:	4b09      	ldr	r3, [pc, #36]	@ (26650 <_wcrtomb_r+0x48>)
   2662a:	f500 7482 	add.w	r4, r0, #260	@ 0x104
   2662e:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
   26632:	4623      	mov	r3, r4
   26634:	2900      	cmp	r1, #0
   26636:	d1f1      	bne.n	2661c <_wcrtomb_r+0x14>
   26638:	460a      	mov	r2, r1
   2663a:	4628      	mov	r0, r5
   2663c:	a901      	add	r1, sp, #4
   2663e:	47b0      	blx	r6
   26640:	1c43      	adds	r3, r0, #1
   26642:	d1ef      	bne.n	26624 <_wcrtomb_r+0x1c>
   26644:	2200      	movs	r2, #0
   26646:	238a      	movs	r3, #138	@ 0x8a
   26648:	6022      	str	r2, [r4, #0]
   2664a:	602b      	str	r3, [r5, #0]
   2664c:	b004      	add	sp, #16
   2664e:	bd70      	pop	{r4, r5, r6, pc}
   26650:	10002434 	.word	0x10002434

00026654 <_wcsrtombs_r>:
   26654:	b510      	push	{r4, lr}
   26656:	b082      	sub	sp, #8
   26658:	9c04      	ldr	r4, [sp, #16]
   2665a:	e9cd 3400 	strd	r3, r4, [sp]
   2665e:	f04f 33ff 	mov.w	r3, #4294967295
   26662:	f002 ffe7 	bl	29634 <_wcsnrtombs_r>
   26666:	b002      	add	sp, #8
   26668:	bd10      	pop	{r4, pc}
   2666a:	bf00      	nop
   2666c:	0000      	movs	r0, r0
	...

00026670 <_svfprintf_r>:
   26670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26674:	b0d9      	sub	sp, #356	@ 0x164
   26676:	460c      	mov	r4, r1
   26678:	9109      	str	r1, [sp, #36]	@ 0x24
   2667a:	4615      	mov	r5, r2
   2667c:	930b      	str	r3, [sp, #44]	@ 0x2c
   2667e:	4683      	mov	fp, r0
   26680:	f7fd ffb6 	bl	245f0 <_localeconv_r>
   26684:	6803      	ldr	r3, [r0, #0]
   26686:	9316      	str	r3, [sp, #88]	@ 0x58
   26688:	4618      	mov	r0, r3
   2668a:	f7e6 faf9 	bl	cc80 <strlen>
   2668e:	2100      	movs	r1, #0
   26690:	9014      	str	r0, [sp, #80]	@ 0x50
   26692:	2208      	movs	r2, #8
   26694:	a828      	add	r0, sp, #160	@ 0xa0
   26696:	f7fd fe7b 	bl	24390 <memset>
   2669a:	89a3      	ldrh	r3, [r4, #12]
   2669c:	0619      	lsls	r1, r3, #24
   2669e:	d503      	bpl.n	266a8 <_svfprintf_r+0x38>
   266a0:	6923      	ldr	r3, [r4, #16]
   266a2:	2b00      	cmp	r3, #0
   266a4:	f000 875e 	beq.w	27564 <_svfprintf_r+0xef4>
   266a8:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 268a8 <_svfprintf_r+0x238>
   266ac:	2300      	movs	r3, #0
   266ae:	e9cd 332d 	strd	r3, r3, [sp, #180]	@ 0xb4
   266b2:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
   266b6:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   266ba:	aa2f      	add	r2, sp, #188	@ 0xbc
   266bc:	930e      	str	r3, [sp, #56]	@ 0x38
   266be:	922c      	str	r2, [sp, #176]	@ 0xb0
   266c0:	4614      	mov	r4, r2
   266c2:	9315      	str	r3, [sp, #84]	@ 0x54
   266c4:	931c      	str	r3, [sp, #112]	@ 0x70
   266c6:	9319      	str	r3, [sp, #100]	@ 0x64
   266c8:	9306      	str	r3, [sp, #24]
   266ca:	462e      	mov	r6, r5
   266cc:	46b2      	mov	sl, r6
   266ce:	4b78      	ldr	r3, [pc, #480]	@ (268b0 <_svfprintf_r+0x240>)
   266d0:	f8d3 50e4 	ldr.w	r5, [r3, #228]	@ 0xe4
   266d4:	f7fd ff86 	bl	245e4 <__locale_mb_cur_max>
   266d8:	aa28      	add	r2, sp, #160	@ 0xa0
   266da:	4603      	mov	r3, r0
   266dc:	9200      	str	r2, [sp, #0]
   266de:	a924      	add	r1, sp, #144	@ 0x90
   266e0:	4652      	mov	r2, sl
   266e2:	4658      	mov	r0, fp
   266e4:	47a8      	blx	r5
   266e6:	2800      	cmp	r0, #0
   266e8:	f000 80b1 	beq.w	2684e <_svfprintf_r+0x1de>
   266ec:	f2c0 80a7 	blt.w	2683e <_svfprintf_r+0x1ce>
   266f0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
   266f2:	2a25      	cmp	r2, #37	@ 0x25
   266f4:	4603      	mov	r3, r0
   266f6:	d001      	beq.n	266fc <_svfprintf_r+0x8c>
   266f8:	449a      	add	sl, r3
   266fa:	e7e8      	b.n	266ce <_svfprintf_r+0x5e>
   266fc:	ebba 0706 	subs.w	r7, sl, r6
   26700:	4605      	mov	r5, r0
   26702:	f040 80a8 	bne.w	26856 <_svfprintf_r+0x1e6>
   26706:	2300      	movs	r3, #0
   26708:	4619      	mov	r1, r3
   2670a:	f04f 32ff 	mov.w	r2, #4294967295
   2670e:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   26712:	9307      	str	r3, [sp, #28]
   26714:	f10a 0a01 	add.w	sl, sl, #1
   26718:	f89a 3000 	ldrb.w	r3, [sl]
   2671c:	9205      	str	r2, [sp, #20]
   2671e:	9104      	str	r1, [sp, #16]
   26720:	f10a 0a01 	add.w	sl, sl, #1
   26724:	f1a3 0220 	sub.w	r2, r3, #32
   26728:	2a5a      	cmp	r2, #90	@ 0x5a
   2672a:	f200 80c3 	bhi.w	268b4 <_svfprintf_r+0x244>
   2672e:	e8df f012 	tbh	[pc, r2, lsl #1]
   26732:	02f4      	.short	0x02f4
   26734:	00c100c1 	.word	0x00c100c1
   26738:	00c102ed 	.word	0x00c102ed
   2673c:	00c100c1 	.word	0x00c100c1
   26740:	00c1006a 	.word	0x00c1006a
   26744:	023f00c1 	.word	0x023f00c1
   26748:	00c10251 	.word	0x00c10251
   2674c:	0306024a 	.word	0x0306024a
   26750:	02ff00c1 	.word	0x02ff00c1
   26754:	005b005b 	.word	0x005b005b
   26758:	005b005b 	.word	0x005b005b
   2675c:	005b005b 	.word	0x005b005b
   26760:	005b005b 	.word	0x005b005b
   26764:	00c1005b 	.word	0x00c1005b
   26768:	00c100c1 	.word	0x00c100c1
   2676c:	00c100c1 	.word	0x00c100c1
   26770:	00c100c1 	.word	0x00c100c1
   26774:	00c1013b 	.word	0x00c1013b
   26778:	02d301be 	.word	0x02d301be
   2677c:	013b013b 	.word	0x013b013b
   26780:	00c1013b 	.word	0x00c1013b
   26784:	00c100c1 	.word	0x00c100c1
   26788:	02cc00c1 	.word	0x02cc00c1
   2678c:	00c100c1 	.word	0x00c100c1
   26790:	00c10288 	.word	0x00c10288
   26794:	00c100c1 	.word	0x00c100c1
   26798:	00c101e8 	.word	0x00c101e8
   2679c:	00c10257 	.word	0x00c10257
   267a0:	06b200c1 	.word	0x06b200c1
   267a4:	00c100c1 	.word	0x00c100c1
   267a8:	00c100c1 	.word	0x00c100c1
   267ac:	00c100c1 	.word	0x00c100c1
   267b0:	00c100c1 	.word	0x00c100c1
   267b4:	00c1013b 	.word	0x00c1013b
   267b8:	021a01be 	.word	0x021a01be
   267bc:	013b013b 	.word	0x013b013b
   267c0:	02a0013b 	.word	0x02a0013b
   267c4:	007f021a 	.word	0x007f021a
   267c8:	02c200c1 	.word	0x02c200c1
   267cc:	02b300c1 	.word	0x02b300c1
   267d0:	032206d8 	.word	0x032206d8
   267d4:	00c1007f 	.word	0x00c1007f
   267d8:	007c01e8 	.word	0x007c01e8
   267dc:	00c106ae 	.word	0x00c106ae
   267e0:	06db00c1 	.word	0x06db00c1
   267e4:	007c00c1 	.word	0x007c00c1
   267e8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   267ec:	2100      	movs	r1, #0
   267ee:	f81a 3b01 	ldrb.w	r3, [sl], #1
   267f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   267f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   267fa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   267fe:	2a09      	cmp	r2, #9
   26800:	d9f5      	bls.n	267ee <_svfprintf_r+0x17e>
   26802:	9107      	str	r1, [sp, #28]
   26804:	e78e      	b.n	26724 <_svfprintf_r+0xb4>
   26806:	4658      	mov	r0, fp
   26808:	f7fd fef2 	bl	245f0 <_localeconv_r>
   2680c:	6843      	ldr	r3, [r0, #4]
   2680e:	9319      	str	r3, [sp, #100]	@ 0x64
   26810:	4618      	mov	r0, r3
   26812:	f7e6 fa35 	bl	cc80 <strlen>
   26816:	901c      	str	r0, [sp, #112]	@ 0x70
   26818:	4605      	mov	r5, r0
   2681a:	4658      	mov	r0, fp
   2681c:	f7fd fee8 	bl	245f0 <_localeconv_r>
   26820:	6883      	ldr	r3, [r0, #8]
   26822:	9317      	str	r3, [sp, #92]	@ 0x5c
   26824:	2d00      	cmp	r5, #0
   26826:	f040 85b7 	bne.w	27398 <_svfprintf_r+0xd28>
   2682a:	f89a 3000 	ldrb.w	r3, [sl]
   2682e:	e777      	b.n	26720 <_svfprintf_r+0xb0>
   26830:	9b04      	ldr	r3, [sp, #16]
   26832:	f043 0320 	orr.w	r3, r3, #32
   26836:	9304      	str	r3, [sp, #16]
   26838:	f89a 3000 	ldrb.w	r3, [sl]
   2683c:	e770      	b.n	26720 <_svfprintf_r+0xb0>
   2683e:	2208      	movs	r2, #8
   26840:	2100      	movs	r1, #0
   26842:	a828      	add	r0, sp, #160	@ 0xa0
   26844:	f7fd fda4 	bl	24390 <memset>
   26848:	2301      	movs	r3, #1
   2684a:	449a      	add	sl, r3
   2684c:	e73f      	b.n	266ce <_svfprintf_r+0x5e>
   2684e:	ebba 0706 	subs.w	r7, sl, r6
   26852:	4605      	mov	r5, r0
   26854:	d010      	beq.n	26878 <_svfprintf_r+0x208>
   26856:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   26858:	443b      	add	r3, r7
   2685a:	932e      	str	r3, [sp, #184]	@ 0xb8
   2685c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2685e:	3301      	adds	r3, #1
   26860:	2b07      	cmp	r3, #7
   26862:	e9c4 6700 	strd	r6, r7, [r4]
   26866:	932d      	str	r3, [sp, #180]	@ 0xb4
   26868:	dc15      	bgt.n	26896 <_svfprintf_r+0x226>
   2686a:	3408      	adds	r4, #8
   2686c:	9b06      	ldr	r3, [sp, #24]
   2686e:	443b      	add	r3, r7
   26870:	9306      	str	r3, [sp, #24]
   26872:	2d00      	cmp	r5, #0
   26874:	f47f af47 	bne.w	26706 <_svfprintf_r+0x96>
   26878:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   2687a:	2b00      	cmp	r3, #0
   2687c:	f041 8193 	bne.w	27ba6 <_svfprintf_r+0x1536>
   26880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   26882:	899b      	ldrh	r3, [r3, #12]
   26884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   26888:	2b00      	cmp	r3, #0
   2688a:	f041 8392 	bne.w	27fb2 <_svfprintf_r+0x1942>
   2688e:	9806      	ldr	r0, [sp, #24]
   26890:	b059      	add	sp, #356	@ 0x164
   26892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26896:	9909      	ldr	r1, [sp, #36]	@ 0x24
   26898:	aa2c      	add	r2, sp, #176	@ 0xb0
   2689a:	4658      	mov	r0, fp
   2689c:	f001 fc86 	bl	281ac <__ssprint_r>
   268a0:	2800      	cmp	r0, #0
   268a2:	d1ed      	bne.n	26880 <_svfprintf_r+0x210>
   268a4:	ac2f      	add	r4, sp, #188	@ 0xbc
   268a6:	e7e1      	b.n	2686c <_svfprintf_r+0x1fc>
	...
   268b0:	10002434 	.word	0x10002434
   268b4:	930c      	str	r3, [sp, #48]	@ 0x30
   268b6:	2b00      	cmp	r3, #0
   268b8:	d0de      	beq.n	26878 <_svfprintf_r+0x208>
   268ba:	2200      	movs	r2, #0
   268bc:	f88d 30fc 	strb.w	r3, [sp, #252]	@ 0xfc
   268c0:	2301      	movs	r3, #1
   268c2:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   268c6:	9302      	str	r3, [sp, #8]
   268c8:	920a      	str	r2, [sp, #40]	@ 0x28
   268ca:	9308      	str	r3, [sp, #32]
   268cc:	9205      	str	r2, [sp, #20]
   268ce:	9212      	str	r2, [sp, #72]	@ 0x48
   268d0:	920f      	str	r2, [sp, #60]	@ 0x3c
   268d2:	920d      	str	r2, [sp, #52]	@ 0x34
   268d4:	ae3f      	add	r6, sp, #252	@ 0xfc
   268d6:	9b04      	ldr	r3, [sp, #16]
   268d8:	f013 0302 	ands.w	r3, r3, #2
   268dc:	d002      	beq.n	268e4 <_svfprintf_r+0x274>
   268de:	9902      	ldr	r1, [sp, #8]
   268e0:	3102      	adds	r1, #2
   268e2:	9102      	str	r1, [sp, #8]
   268e4:	9904      	ldr	r1, [sp, #16]
   268e6:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   268e8:	f011 0884 	ands.w	r8, r1, #132	@ 0x84
   268ec:	d105      	bne.n	268fa <_svfprintf_r+0x28a>
   268ee:	9907      	ldr	r1, [sp, #28]
   268f0:	9802      	ldr	r0, [sp, #8]
   268f2:	1a0f      	subs	r7, r1, r0
   268f4:	2f00      	cmp	r7, #0
   268f6:	f300 80a1 	bgt.w	26a3c <_svfprintf_r+0x3cc>
   268fa:	b16a      	cbz	r2, 26918 <_svfprintf_r+0x2a8>
   268fc:	2201      	movs	r2, #1
   268fe:	6062      	str	r2, [r4, #4]
   26900:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   26902:	3201      	adds	r2, #1
   26904:	3501      	adds	r5, #1
   26906:	f10d 0187 	add.w	r1, sp, #135	@ 0x87
   2690a:	2a07      	cmp	r2, #7
   2690c:	952e      	str	r5, [sp, #184]	@ 0xb8
   2690e:	922d      	str	r2, [sp, #180]	@ 0xb4
   26910:	6021      	str	r1, [r4, #0]
   26912:	f300 83db 	bgt.w	270cc <_svfprintf_r+0xa5c>
   26916:	3408      	adds	r4, #8
   26918:	b16b      	cbz	r3, 26936 <_svfprintf_r+0x2c6>
   2691a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2691c:	aa22      	add	r2, sp, #136	@ 0x88
   2691e:	3301      	adds	r3, #1
   26920:	3502      	adds	r5, #2
   26922:	6022      	str	r2, [r4, #0]
   26924:	2b07      	cmp	r3, #7
   26926:	f04f 0202 	mov.w	r2, #2
   2692a:	952e      	str	r5, [sp, #184]	@ 0xb8
   2692c:	932d      	str	r3, [sp, #180]	@ 0xb4
   2692e:	6062      	str	r2, [r4, #4]
   26930:	f300 83c1 	bgt.w	270b6 <_svfprintf_r+0xa46>
   26934:	3408      	adds	r4, #8
   26936:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
   2693a:	f000 82c4 	beq.w	26ec6 <_svfprintf_r+0x856>
   2693e:	9b05      	ldr	r3, [sp, #20]
   26940:	9a08      	ldr	r2, [sp, #32]
   26942:	1a9f      	subs	r7, r3, r2
   26944:	2f00      	cmp	r7, #0
   26946:	f300 82fe 	bgt.w	26f46 <_svfprintf_r+0x8d6>
   2694a:	9b04      	ldr	r3, [sp, #16]
   2694c:	05da      	lsls	r2, r3, #23
   2694e:	f100 8224 	bmi.w	26d9a <_svfprintf_r+0x72a>
   26952:	9b08      	ldr	r3, [sp, #32]
   26954:	6063      	str	r3, [r4, #4]
   26956:	441d      	add	r5, r3
   26958:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2695a:	6026      	str	r6, [r4, #0]
   2695c:	3301      	adds	r3, #1
   2695e:	2b07      	cmp	r3, #7
   26960:	952e      	str	r5, [sp, #184]	@ 0xb8
   26962:	932d      	str	r3, [sp, #180]	@ 0xb4
   26964:	f300 833f 	bgt.w	26fe6 <_svfprintf_r+0x976>
   26968:	3408      	adds	r4, #8
   2696a:	9b04      	ldr	r3, [sp, #16]
   2696c:	075a      	lsls	r2, r3, #29
   2696e:	d505      	bpl.n	2697c <_svfprintf_r+0x30c>
   26970:	9b07      	ldr	r3, [sp, #28]
   26972:	9a02      	ldr	r2, [sp, #8]
   26974:	1a9e      	subs	r6, r3, r2
   26976:	2e00      	cmp	r6, #0
   26978:	f300 83b5 	bgt.w	270e6 <_svfprintf_r+0xa76>
   2697c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   26980:	9902      	ldr	r1, [sp, #8]
   26982:	428a      	cmp	r2, r1
   26984:	bfac      	ite	ge
   26986:	189b      	addge	r3, r3, r2
   26988:	185b      	addlt	r3, r3, r1
   2698a:	9306      	str	r3, [sp, #24]
   2698c:	2d00      	cmp	r5, #0
   2698e:	f040 830b 	bne.w	26fa8 <_svfprintf_r+0x938>
   26992:	2300      	movs	r3, #0
   26994:	932d      	str	r3, [sp, #180]	@ 0xb4
   26996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26998:	b11b      	cbz	r3, 269a2 <_svfprintf_r+0x332>
   2699a:	990a      	ldr	r1, [sp, #40]	@ 0x28
   2699c:	4658      	mov	r0, fp
   2699e:	f7fd ff5d 	bl	2485c <_free_r>
   269a2:	ac2f      	add	r4, sp, #188	@ 0xbc
   269a4:	4656      	mov	r6, sl
   269a6:	e691      	b.n	266cc <_svfprintf_r+0x5c>
   269a8:	930c      	str	r3, [sp, #48]	@ 0x30
   269aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   269ac:	3307      	adds	r3, #7
   269ae:	f023 0307 	bic.w	r3, r3, #7
   269b2:	ecb3 7b02 	vldmia	r3!, {d7}
   269b6:	ec58 7b17 	vmov	r7, r8, d7
   269ba:	930b      	str	r3, [sp, #44]	@ 0x2c
   269bc:	f028 4300 	bic.w	r3, r8, #2147483648	@ 0x80000000
   269c0:	931b      	str	r3, [sp, #108]	@ 0x6c
   269c2:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
   269c6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
   269ca:	4baf      	ldr	r3, [pc, #700]	@ (26c88 <_svfprintf_r+0x618>)
   269cc:	f04f 32ff 	mov.w	r2, #4294967295
   269d0:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   269d4:	f7e6 f9c0 	bl	cd58 <__aeabi_dcmpun>
   269d8:	2800      	cmp	r0, #0
   269da:	f040 8502 	bne.w	273e2 <_svfprintf_r+0xd72>
   269de:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
   269e2:	4ba9      	ldr	r3, [pc, #676]	@ (26c88 <_svfprintf_r+0x618>)
   269e4:	f04f 32ff 	mov.w	r2, #4294967295
   269e8:	f7e5 ffc2 	bl	c970 <__aeabi_dcmple>
   269ec:	2800      	cmp	r0, #0
   269ee:	f040 84f8 	bne.w	273e2 <_svfprintf_r+0xd72>
   269f2:	2200      	movs	r2, #0
   269f4:	2300      	movs	r3, #0
   269f6:	4638      	mov	r0, r7
   269f8:	4641      	mov	r1, r8
   269fa:	f7e5 ffaf 	bl	c95c <__aeabi_dcmplt>
   269fe:	2800      	cmp	r0, #0
   26a00:	f041 8021 	bne.w	27a46 <_svfprintf_r+0x13d6>
   26a04:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   26a08:	9b04      	ldr	r3, [sp, #16]
   26a0a:	4ea0      	ldr	r6, [pc, #640]	@ (26c8c <_svfprintf_r+0x61c>)
   26a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   26a10:	9304      	str	r3, [sp, #16]
   26a12:	4b9f      	ldr	r3, [pc, #636]	@ (26c90 <_svfprintf_r+0x620>)
   26a14:	990c      	ldr	r1, [sp, #48]	@ 0x30
   26a16:	2947      	cmp	r1, #71	@ 0x47
   26a18:	bfd8      	it	le
   26a1a:	461e      	movle	r6, r3
   26a1c:	2300      	movs	r3, #0
   26a1e:	2103      	movs	r1, #3
   26a20:	930a      	str	r3, [sp, #40]	@ 0x28
   26a22:	9102      	str	r1, [sp, #8]
   26a24:	9108      	str	r1, [sp, #32]
   26a26:	9305      	str	r3, [sp, #20]
   26a28:	9312      	str	r3, [sp, #72]	@ 0x48
   26a2a:	930f      	str	r3, [sp, #60]	@ 0x3c
   26a2c:	930d      	str	r3, [sp, #52]	@ 0x34
   26a2e:	2a00      	cmp	r2, #0
   26a30:	f43f af51 	beq.w	268d6 <_svfprintf_r+0x266>
   26a34:	9b02      	ldr	r3, [sp, #8]
   26a36:	3301      	adds	r3, #1
   26a38:	9302      	str	r3, [sp, #8]
   26a3a:	e74c      	b.n	268d6 <_svfprintf_r+0x266>
   26a3c:	4995      	ldr	r1, [pc, #596]	@ (26c94 <_svfprintf_r+0x624>)
   26a3e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   26a40:	9113      	str	r1, [sp, #76]	@ 0x4c
   26a42:	2f10      	cmp	r7, #16
   26a44:	dd25      	ble.n	26a92 <_svfprintf_r+0x422>
   26a46:	4621      	mov	r1, r4
   26a48:	4628      	mov	r0, r5
   26a4a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   26a4c:	4d91      	ldr	r5, [pc, #580]	@ (26c94 <_svfprintf_r+0x624>)
   26a4e:	931d      	str	r3, [sp, #116]	@ 0x74
   26a50:	f04f 0910 	mov.w	r9, #16
   26a54:	e004      	b.n	26a60 <_svfprintf_r+0x3f0>
   26a56:	3f10      	subs	r7, #16
   26a58:	2f10      	cmp	r7, #16
   26a5a:	f101 0108 	add.w	r1, r1, #8
   26a5e:	dd15      	ble.n	26a8c <_svfprintf_r+0x41c>
   26a60:	3201      	adds	r2, #1
   26a62:	3010      	adds	r0, #16
   26a64:	2a07      	cmp	r2, #7
   26a66:	e9c1 5900 	strd	r5, r9, [r1]
   26a6a:	e9cd 202d 	strd	r2, r0, [sp, #180]	@ 0xb4
   26a6e:	ddf2      	ble.n	26a56 <_svfprintf_r+0x3e6>
   26a70:	aa2c      	add	r2, sp, #176	@ 0xb0
   26a72:	4621      	mov	r1, r4
   26a74:	4658      	mov	r0, fp
   26a76:	f001 fb99 	bl	281ac <__ssprint_r>
   26a7a:	2800      	cmp	r0, #0
   26a7c:	f040 829c 	bne.w	26fb8 <_svfprintf_r+0x948>
   26a80:	3f10      	subs	r7, #16
   26a82:	2f10      	cmp	r7, #16
   26a84:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	@ 0xb4
   26a88:	a92f      	add	r1, sp, #188	@ 0xbc
   26a8a:	dce9      	bgt.n	26a60 <_svfprintf_r+0x3f0>
   26a8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   26a8e:	460c      	mov	r4, r1
   26a90:	4605      	mov	r5, r0
   26a92:	3201      	adds	r2, #1
   26a94:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   26a96:	6021      	str	r1, [r4, #0]
   26a98:	443d      	add	r5, r7
   26a9a:	2a07      	cmp	r2, #7
   26a9c:	e9cd 252d 	strd	r2, r5, [sp, #180]	@ 0xb4
   26aa0:	6067      	str	r7, [r4, #4]
   26aa2:	f300 86d4 	bgt.w	2784e <_svfprintf_r+0x11de>
   26aa6:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   26aaa:	3408      	adds	r4, #8
   26aac:	e725      	b.n	268fa <_svfprintf_r+0x28a>
   26aae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   26ab0:	930c      	str	r3, [sp, #48]	@ 0x30
   26ab2:	2b43      	cmp	r3, #67	@ 0x43
   26ab4:	f102 0504 	add.w	r5, r2, #4
   26ab8:	d003      	beq.n	26ac2 <_svfprintf_r+0x452>
   26aba:	9b04      	ldr	r3, [sp, #16]
   26abc:	06da      	lsls	r2, r3, #27
   26abe:	f140 8517 	bpl.w	274f0 <_svfprintf_r+0xe80>
   26ac2:	2208      	movs	r2, #8
   26ac4:	2100      	movs	r1, #0
   26ac6:	a82a      	add	r0, sp, #168	@ 0xa8
   26ac8:	f7fd fc62 	bl	24390 <memset>
   26acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26ace:	ae3f      	add	r6, sp, #252	@ 0xfc
   26ad0:	681a      	ldr	r2, [r3, #0]
   26ad2:	4631      	mov	r1, r6
   26ad4:	ab2a      	add	r3, sp, #168	@ 0xa8
   26ad6:	4658      	mov	r0, fp
   26ad8:	f7ff fd96 	bl	26608 <_wcrtomb_r>
   26adc:	4603      	mov	r3, r0
   26ade:	3301      	adds	r3, #1
   26ae0:	9008      	str	r0, [sp, #32]
   26ae2:	f001 8261 	beq.w	27fa8 <_svfprintf_r+0x1938>
   26ae6:	9b08      	ldr	r3, [sp, #32]
   26ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   26aec:	9302      	str	r3, [sp, #8]
   26aee:	2200      	movs	r2, #0
   26af0:	950b      	str	r5, [sp, #44]	@ 0x2c
   26af2:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   26af6:	920a      	str	r2, [sp, #40]	@ 0x28
   26af8:	9205      	str	r2, [sp, #20]
   26afa:	9212      	str	r2, [sp, #72]	@ 0x48
   26afc:	920f      	str	r2, [sp, #60]	@ 0x3c
   26afe:	920d      	str	r2, [sp, #52]	@ 0x34
   26b00:	e6e9      	b.n	268d6 <_svfprintf_r+0x266>
   26b02:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
   26b04:	930c      	str	r3, [sp, #48]	@ 0x30
   26b06:	f857 6b04 	ldr.w	r6, [r7], #4
   26b0a:	2300      	movs	r3, #0
   26b0c:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   26b10:	2e00      	cmp	r6, #0
   26b12:	f000 8516 	beq.w	27542 <_svfprintf_r+0xed2>
   26b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   26b18:	2b53      	cmp	r3, #83	@ 0x53
   26b1a:	f000 86bf 	beq.w	2789c <_svfprintf_r+0x122c>
   26b1e:	9b04      	ldr	r3, [sp, #16]
   26b20:	f013 0310 	ands.w	r3, r3, #16
   26b24:	930d      	str	r3, [sp, #52]	@ 0x34
   26b26:	f040 86b9 	bne.w	2789c <_svfprintf_r+0x122c>
   26b2a:	9b05      	ldr	r3, [sp, #20]
   26b2c:	2b00      	cmp	r3, #0
   26b2e:	f2c1 8045 	blt.w	27bbc <_svfprintf_r+0x154c>
   26b32:	990d      	ldr	r1, [sp, #52]	@ 0x34
   26b34:	461a      	mov	r2, r3
   26b36:	4630      	mov	r0, r6
   26b38:	f7e5 ffaa 	bl	ca90 <memchr>
   26b3c:	900a      	str	r0, [sp, #40]	@ 0x28
   26b3e:	2800      	cmp	r0, #0
   26b40:	f001 8266 	beq.w	28010 <_svfprintf_r+0x19a0>
   26b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26b46:	1b99      	subs	r1, r3, r6
   26b48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   26b4a:	9108      	str	r1, [sp, #32]
   26b4c:	9305      	str	r3, [sp, #20]
   26b4e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   26b52:	9312      	str	r3, [sp, #72]	@ 0x48
   26b54:	930f      	str	r3, [sp, #60]	@ 0x3c
   26b56:	930a      	str	r3, [sp, #40]	@ 0x28
   26b58:	2373      	movs	r3, #115	@ 0x73
   26b5a:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   26b5e:	970b      	str	r7, [sp, #44]	@ 0x2c
   26b60:	9102      	str	r1, [sp, #8]
   26b62:	930c      	str	r3, [sp, #48]	@ 0x30
   26b64:	e763      	b.n	26a2e <_svfprintf_r+0x3be>
   26b66:	930c      	str	r3, [sp, #48]	@ 0x30
   26b68:	9b04      	ldr	r3, [sp, #16]
   26b6a:	069b      	lsls	r3, r3, #26
   26b6c:	f140 80bd 	bpl.w	26cea <_svfprintf_r+0x67a>
   26b70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26b72:	3307      	adds	r3, #7
   26b74:	f023 0307 	bic.w	r3, r3, #7
   26b78:	461a      	mov	r2, r3
   26b7a:	6859      	ldr	r1, [r3, #4]
   26b7c:	f852 3b08 	ldr.w	r3, [r2], #8
   26b80:	920b      	str	r2, [sp, #44]	@ 0x2c
   26b82:	460a      	mov	r2, r1
   26b84:	2900      	cmp	r1, #0
   26b86:	f2c0 83ca 	blt.w	2731e <_svfprintf_r+0xcae>
   26b8a:	9905      	ldr	r1, [sp, #20]
   26b8c:	2900      	cmp	r1, #0
   26b8e:	f2c0 8283 	blt.w	27098 <_svfprintf_r+0xa28>
   26b92:	9904      	ldr	r1, [sp, #16]
   26b94:	f021 0580 	bic.w	r5, r1, #128	@ 0x80
   26b98:	ea53 0102 	orrs.w	r1, r3, r2
   26b9c:	f040 827d 	bne.w	2709a <_svfprintf_r+0xa2a>
   26ba0:	9a05      	ldr	r2, [sp, #20]
   26ba2:	2a00      	cmp	r2, #0
   26ba4:	f040 827e 	bne.w	270a4 <_svfprintf_r+0xa34>
   26ba8:	9504      	str	r5, [sp, #16]
   26baa:	9208      	str	r2, [sp, #32]
   26bac:	ae58      	add	r6, sp, #352	@ 0x160
   26bae:	e160      	b.n	26e72 <_svfprintf_r+0x802>
   26bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26bb2:	f853 2b04 	ldr.w	r2, [r3], #4
   26bb6:	9207      	str	r2, [sp, #28]
   26bb8:	2a00      	cmp	r2, #0
   26bba:	f280 83da 	bge.w	27372 <_svfprintf_r+0xd02>
   26bbe:	9a07      	ldr	r2, [sp, #28]
   26bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
   26bc2:	4252      	negs	r2, r2
   26bc4:	9207      	str	r2, [sp, #28]
   26bc6:	9b04      	ldr	r3, [sp, #16]
   26bc8:	f043 0304 	orr.w	r3, r3, #4
   26bcc:	9304      	str	r3, [sp, #16]
   26bce:	f89a 3000 	ldrb.w	r3, [sl]
   26bd2:	e5a5      	b.n	26720 <_svfprintf_r+0xb0>
   26bd4:	232b      	movs	r3, #43	@ 0x2b
   26bd6:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   26bda:	f89a 3000 	ldrb.w	r3, [sl]
   26bde:	e59f      	b.n	26720 <_svfprintf_r+0xb0>
   26be0:	930c      	str	r3, [sp, #48]	@ 0x30
   26be2:	9b04      	ldr	r3, [sp, #16]
   26be4:	f043 0510 	orr.w	r5, r3, #16
   26be8:	f015 0220 	ands.w	r2, r5, #32
   26bec:	f000 8372 	beq.w	272d4 <_svfprintf_r+0xc64>
   26bf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26bf2:	3307      	adds	r3, #7
   26bf4:	f023 0307 	bic.w	r3, r3, #7
   26bf8:	4619      	mov	r1, r3
   26bfa:	685a      	ldr	r2, [r3, #4]
   26bfc:	f851 3b08 	ldr.w	r3, [r1], #8
   26c00:	910b      	str	r1, [sp, #44]	@ 0x2c
   26c02:	2101      	movs	r1, #1
   26c04:	2000      	movs	r0, #0
   26c06:	9e05      	ldr	r6, [sp, #20]
   26c08:	f88d 0087 	strb.w	r0, [sp, #135]	@ 0x87
   26c0c:	2e00      	cmp	r6, #0
   26c0e:	f2c0 8119 	blt.w	26e44 <_svfprintf_r+0x7d4>
   26c12:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   26c16:	9004      	str	r0, [sp, #16]
   26c18:	ea53 0002 	orrs.w	r0, r3, r2
   26c1c:	f040 8111 	bne.w	26e42 <_svfprintf_r+0x7d2>
   26c20:	2e00      	cmp	r6, #0
   26c22:	f040 8624 	bne.w	2786e <_svfprintf_r+0x11fe>
   26c26:	2900      	cmp	r1, #0
   26c28:	f040 8380 	bne.w	2732c <_svfprintf_r+0xcbc>
   26c2c:	f015 0301 	ands.w	r3, r5, #1
   26c30:	9308      	str	r3, [sp, #32]
   26c32:	f000 83a3 	beq.w	2737c <_svfprintf_r+0xd0c>
   26c36:	2330      	movs	r3, #48	@ 0x30
   26c38:	f88d 315f 	strb.w	r3, [sp, #351]	@ 0x15f
   26c3c:	f20d 165f 	addw	r6, sp, #351	@ 0x15f
   26c40:	e117      	b.n	26e72 <_svfprintf_r+0x802>
   26c42:	930c      	str	r3, [sp, #48]	@ 0x30
   26c44:	9b04      	ldr	r3, [sp, #16]
   26c46:	f043 0310 	orr.w	r3, r3, #16
   26c4a:	9304      	str	r3, [sp, #16]
   26c4c:	9b04      	ldr	r3, [sp, #16]
   26c4e:	f013 0220 	ands.w	r2, r3, #32
   26c52:	f000 8355 	beq.w	27300 <_svfprintf_r+0xc90>
   26c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26c58:	3307      	adds	r3, #7
   26c5a:	f023 0307 	bic.w	r3, r3, #7
   26c5e:	4619      	mov	r1, r3
   26c60:	685a      	ldr	r2, [r3, #4]
   26c62:	f851 3b08 	ldr.w	r3, [r1], #8
   26c66:	910b      	str	r1, [sp, #44]	@ 0x2c
   26c68:	9904      	ldr	r1, [sp, #16]
   26c6a:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
   26c6e:	2100      	movs	r1, #0
   26c70:	e7c8      	b.n	26c04 <_svfprintf_r+0x594>
   26c72:	f89a 3000 	ldrb.w	r3, [sl]
   26c76:	2b68      	cmp	r3, #104	@ 0x68
   26c78:	f000 844e 	beq.w	27518 <_svfprintf_r+0xea8>
   26c7c:	9a04      	ldr	r2, [sp, #16]
   26c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   26c82:	9204      	str	r2, [sp, #16]
   26c84:	e54c      	b.n	26720 <_svfprintf_r+0xb0>
   26c86:	bf00      	nop
   26c88:	7fefffff 	.word	0x7fefffff
   26c8c:	00030b1c 	.word	0x00030b1c
   26c90:	00030b18 	.word	0x00030b18
   26c94:	00031734 	.word	0x00031734
   26c98:	9b04      	ldr	r3, [sp, #16]
   26c9a:	069d      	lsls	r5, r3, #26
   26c9c:	f140 8390 	bpl.w	273c0 <_svfprintf_r+0xd50>
   26ca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26ca2:	9a06      	ldr	r2, [sp, #24]
   26ca4:	681b      	ldr	r3, [r3, #0]
   26ca6:	601a      	str	r2, [r3, #0]
   26ca8:	17d2      	asrs	r2, r2, #31
   26caa:	605a      	str	r2, [r3, #4]
   26cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   26cae:	3304      	adds	r3, #4
   26cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
   26cb2:	4656      	mov	r6, sl
   26cb4:	e50a      	b.n	266cc <_svfprintf_r+0x5c>
   26cb6:	f89a 3000 	ldrb.w	r3, [sl]
   26cba:	2b6c      	cmp	r3, #108	@ 0x6c
   26cbc:	f000 8422 	beq.w	27504 <_svfprintf_r+0xe94>
   26cc0:	9a04      	ldr	r2, [sp, #16]
   26cc2:	f042 0210 	orr.w	r2, r2, #16
   26cc6:	9204      	str	r2, [sp, #16]
   26cc8:	e52a      	b.n	26720 <_svfprintf_r+0xb0>
   26cca:	9b04      	ldr	r3, [sp, #16]
   26ccc:	f043 0308 	orr.w	r3, r3, #8
   26cd0:	9304      	str	r3, [sp, #16]
   26cd2:	f89a 3000 	ldrb.w	r3, [sl]
   26cd6:	e523      	b.n	26720 <_svfprintf_r+0xb0>
   26cd8:	930c      	str	r3, [sp, #48]	@ 0x30
   26cda:	9b04      	ldr	r3, [sp, #16]
   26cdc:	f043 0310 	orr.w	r3, r3, #16
   26ce0:	9304      	str	r3, [sp, #16]
   26ce2:	9b04      	ldr	r3, [sp, #16]
   26ce4:	069b      	lsls	r3, r3, #26
   26ce6:	f53f af43 	bmi.w	26b70 <_svfprintf_r+0x500>
   26cea:	9904      	ldr	r1, [sp, #16]
   26cec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   26cee:	06cf      	lsls	r7, r1, #27
   26cf0:	f852 3b04 	ldr.w	r3, [r2], #4
   26cf4:	f100 834b 	bmi.w	2738e <_svfprintf_r+0xd1e>
   26cf8:	9904      	ldr	r1, [sp, #16]
   26cfa:	064e      	lsls	r6, r1, #25
   26cfc:	f140 8643 	bpl.w	27986 <_svfprintf_r+0x1316>
   26d00:	920b      	str	r2, [sp, #44]	@ 0x2c
   26d02:	f343 32c0 	sbfx	r2, r3, #15, #1
   26d06:	4611      	mov	r1, r2
   26d08:	b21b      	sxth	r3, r3
   26d0a:	e73b      	b.n	26b84 <_svfprintf_r+0x514>
   26d0c:	9b04      	ldr	r3, [sp, #16]
   26d0e:	f043 0301 	orr.w	r3, r3, #1
   26d12:	9304      	str	r3, [sp, #16]
   26d14:	f89a 3000 	ldrb.w	r3, [sl]
   26d18:	e502      	b.n	26720 <_svfprintf_r+0xb0>
   26d1a:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   26d1e:	f89a 3000 	ldrb.w	r3, [sl]
   26d22:	2a00      	cmp	r2, #0
   26d24:	f47f acfc 	bne.w	26720 <_svfprintf_r+0xb0>
   26d28:	2220      	movs	r2, #32
   26d2a:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   26d2e:	e4f7      	b.n	26720 <_svfprintf_r+0xb0>
   26d30:	9b04      	ldr	r3, [sp, #16]
   26d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   26d36:	9304      	str	r3, [sp, #16]
   26d38:	f89a 3000 	ldrb.w	r3, [sl]
   26d3c:	e4f0      	b.n	26720 <_svfprintf_r+0xb0>
   26d3e:	4650      	mov	r0, sl
   26d40:	f810 3b01 	ldrb.w	r3, [r0], #1
   26d44:	2b2a      	cmp	r3, #42	@ 0x2a
   26d46:	f001 81e5 	beq.w	28114 <_svfprintf_r+0x1aa4>
   26d4a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   26d4e:	2a09      	cmp	r2, #9
   26d50:	bf98      	it	ls
   26d52:	2100      	movls	r1, #0
   26d54:	f201 80e4 	bhi.w	27f20 <_svfprintf_r+0x18b0>
   26d58:	f810 3b01 	ldrb.w	r3, [r0], #1
   26d5c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   26d60:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   26d64:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   26d68:	2a09      	cmp	r2, #9
   26d6a:	d9f5      	bls.n	26d58 <_svfprintf_r+0x6e8>
   26d6c:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
   26d70:	9205      	str	r2, [sp, #20]
   26d72:	4682      	mov	sl, r0
   26d74:	e4d6      	b.n	26724 <_svfprintf_r+0xb4>
   26d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   26d78:	9b04      	ldr	r3, [sp, #16]
   26d7a:	f043 0502 	orr.w	r5, r3, #2
   26d7e:	f852 3b04 	ldr.w	r3, [r2], #4
   26d82:	920b      	str	r2, [sp, #44]	@ 0x2c
   26d84:	f647 0230 	movw	r2, #30768	@ 0x7830
   26d88:	f8ad 2088 	strh.w	r2, [sp, #136]	@ 0x88
   26d8c:	2078      	movs	r0, #120	@ 0x78
   26d8e:	4a9b      	ldr	r2, [pc, #620]	@ (26ffc <_svfprintf_r+0x98c>)
   26d90:	9215      	str	r2, [sp, #84]	@ 0x54
   26d92:	2102      	movs	r1, #2
   26d94:	2200      	movs	r2, #0
   26d96:	900c      	str	r0, [sp, #48]	@ 0x30
   26d98:	e734      	b.n	26c04 <_svfprintf_r+0x594>
   26d9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   26d9c:	2b65      	cmp	r3, #101	@ 0x65
   26d9e:	f340 8133 	ble.w	27008 <_svfprintf_r+0x998>
   26da2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   26da6:	2200      	movs	r2, #0
   26da8:	2300      	movs	r3, #0
   26daa:	f7e5 fdcd 	bl	c948 <__aeabi_dcmpeq>
   26dae:	2800      	cmp	r0, #0
   26db0:	f000 81d2 	beq.w	27158 <_svfprintf_r+0xae8>
   26db4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   26db6:	4a92      	ldr	r2, [pc, #584]	@ (27000 <_svfprintf_r+0x990>)
   26db8:	6022      	str	r2, [r4, #0]
   26dba:	3301      	adds	r3, #1
   26dbc:	3501      	adds	r5, #1
   26dbe:	2201      	movs	r2, #1
   26dc0:	2b07      	cmp	r3, #7
   26dc2:	952e      	str	r5, [sp, #184]	@ 0xb8
   26dc4:	932d      	str	r3, [sp, #180]	@ 0xb4
   26dc6:	6062      	str	r2, [r4, #4]
   26dc8:	f300 855c 	bgt.w	27884 <_svfprintf_r+0x1214>
   26dcc:	3408      	adds	r4, #8
   26dce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   26dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   26dd2:	4293      	cmp	r3, r2
   26dd4:	f280 82c8 	bge.w	27368 <_svfprintf_r+0xcf8>
   26dd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   26dda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   26ddc:	441d      	add	r5, r3
   26dde:	e9c4 2300 	strd	r2, r3, [r4]
   26de2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   26de4:	952e      	str	r5, [sp, #184]	@ 0xb8
   26de6:	3301      	adds	r3, #1
   26de8:	2b07      	cmp	r3, #7
   26dea:	932d      	str	r3, [sp, #180]	@ 0xb4
   26dec:	f300 839e 	bgt.w	2752c <_svfprintf_r+0xebc>
   26df0:	3408      	adds	r4, #8
   26df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   26df4:	1e5e      	subs	r6, r3, #1
   26df6:	2e00      	cmp	r6, #0
   26df8:	f77f adb7 	ble.w	2696a <_svfprintf_r+0x2fa>
   26dfc:	2e10      	cmp	r6, #16
   26dfe:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   26e00:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 27004 <_svfprintf_r+0x994>
   26e04:	f340 80e5 	ble.w	26fd2 <_svfprintf_r+0x962>
   26e08:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   26e0c:	2710      	movs	r7, #16
   26e0e:	e004      	b.n	26e1a <_svfprintf_r+0x7aa>
   26e10:	3408      	adds	r4, #8
   26e12:	3e10      	subs	r6, #16
   26e14:	2e10      	cmp	r6, #16
   26e16:	f340 80dc 	ble.w	26fd2 <_svfprintf_r+0x962>
   26e1a:	3301      	adds	r3, #1
   26e1c:	3510      	adds	r5, #16
   26e1e:	2b07      	cmp	r3, #7
   26e20:	e9c4 9700 	strd	r9, r7, [r4]
   26e24:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   26e28:	ddf2      	ble.n	26e10 <_svfprintf_r+0x7a0>
   26e2a:	aa2c      	add	r2, sp, #176	@ 0xb0
   26e2c:	4641      	mov	r1, r8
   26e2e:	4658      	mov	r0, fp
   26e30:	f001 f9bc 	bl	281ac <__ssprint_r>
   26e34:	2800      	cmp	r0, #0
   26e36:	f040 80bf 	bne.w	26fb8 <_svfprintf_r+0x948>
   26e3a:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   26e3e:	ac2f      	add	r4, sp, #188	@ 0xbc
   26e40:	e7e7      	b.n	26e12 <_svfprintf_r+0x7a2>
   26e42:	9d04      	ldr	r5, [sp, #16]
   26e44:	2901      	cmp	r1, #1
   26e46:	f000 8128 	beq.w	2709a <_svfprintf_r+0xa2a>
   26e4a:	2902      	cmp	r1, #2
   26e4c:	ae58      	add	r6, sp, #352	@ 0x160
   26e4e:	d11f      	bne.n	26e90 <_svfprintf_r+0x820>
   26e50:	9815      	ldr	r0, [sp, #84]	@ 0x54
   26e52:	f003 010f 	and.w	r1, r3, #15
   26e56:	091b      	lsrs	r3, r3, #4
   26e58:	5c41      	ldrb	r1, [r0, r1]
   26e5a:	f806 1d01 	strb.w	r1, [r6, #-1]!
   26e5e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   26e62:	0912      	lsrs	r2, r2, #4
   26e64:	ea53 0102 	orrs.w	r1, r3, r2
   26e68:	d1f3      	bne.n	26e52 <_svfprintf_r+0x7e2>
   26e6a:	ab58      	add	r3, sp, #352	@ 0x160
   26e6c:	1b9b      	subs	r3, r3, r6
   26e6e:	9504      	str	r5, [sp, #16]
   26e70:	9308      	str	r3, [sp, #32]
   26e72:	9905      	ldr	r1, [sp, #20]
   26e74:	9808      	ldr	r0, [sp, #32]
   26e76:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   26e7a:	4281      	cmp	r1, r0
   26e7c:	f04f 0300 	mov.w	r3, #0
   26e80:	bfb8      	it	lt
   26e82:	4601      	movlt	r1, r0
   26e84:	930a      	str	r3, [sp, #40]	@ 0x28
   26e86:	9102      	str	r1, [sp, #8]
   26e88:	9312      	str	r3, [sp, #72]	@ 0x48
   26e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
   26e8c:	930d      	str	r3, [sp, #52]	@ 0x34
   26e8e:	e5ce      	b.n	26a2e <_svfprintf_r+0x3be>
   26e90:	f003 0107 	and.w	r1, r3, #7
   26e94:	08db      	lsrs	r3, r3, #3
   26e96:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   26e9a:	08d2      	lsrs	r2, r2, #3
   26e9c:	3130      	adds	r1, #48	@ 0x30
   26e9e:	ea53 0702 	orrs.w	r7, r3, r2
   26ea2:	4630      	mov	r0, r6
   26ea4:	f806 1d01 	strb.w	r1, [r6, #-1]!
   26ea8:	d1f2      	bne.n	26e90 <_svfprintf_r+0x820>
   26eaa:	07ef      	lsls	r7, r5, #31
   26eac:	d5dd      	bpl.n	26e6a <_svfprintf_r+0x7fa>
   26eae:	2930      	cmp	r1, #48	@ 0x30
   26eb0:	d0db      	beq.n	26e6a <_svfprintf_r+0x7fa>
   26eb2:	2330      	movs	r3, #48	@ 0x30
   26eb4:	3802      	subs	r0, #2
   26eb6:	f806 3c01 	strb.w	r3, [r6, #-1]
   26eba:	ab58      	add	r3, sp, #352	@ 0x160
   26ebc:	1a1b      	subs	r3, r3, r0
   26ebe:	9504      	str	r5, [sp, #16]
   26ec0:	9308      	str	r3, [sp, #32]
   26ec2:	4606      	mov	r6, r0
   26ec4:	e7d5      	b.n	26e72 <_svfprintf_r+0x802>
   26ec6:	9b07      	ldr	r3, [sp, #28]
   26ec8:	9a02      	ldr	r2, [sp, #8]
   26eca:	1a9f      	subs	r7, r3, r2
   26ecc:	2f00      	cmp	r7, #0
   26ece:	f77f ad36 	ble.w	2693e <_svfprintf_r+0x2ce>
   26ed2:	2f10      	cmp	r7, #16
   26ed4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   26ed6:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 27004 <_svfprintf_r+0x994>
   26eda:	dd22      	ble.n	26f22 <_svfprintf_r+0x8b2>
   26edc:	462a      	mov	r2, r5
   26ede:	f04f 0810 	mov.w	r8, #16
   26ee2:	464d      	mov	r5, r9
   26ee4:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
   26ee8:	e004      	b.n	26ef4 <_svfprintf_r+0x884>
   26eea:	3f10      	subs	r7, #16
   26eec:	2f10      	cmp	r7, #16
   26eee:	f104 0408 	add.w	r4, r4, #8
   26ef2:	dd14      	ble.n	26f1e <_svfprintf_r+0x8ae>
   26ef4:	3301      	adds	r3, #1
   26ef6:	3210      	adds	r2, #16
   26ef8:	2b07      	cmp	r3, #7
   26efa:	e9c4 5800 	strd	r5, r8, [r4]
   26efe:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   26f02:	ddf2      	ble.n	26eea <_svfprintf_r+0x87a>
   26f04:	aa2c      	add	r2, sp, #176	@ 0xb0
   26f06:	4649      	mov	r1, r9
   26f08:	4658      	mov	r0, fp
   26f0a:	f001 f94f 	bl	281ac <__ssprint_r>
   26f0e:	2800      	cmp	r0, #0
   26f10:	d152      	bne.n	26fb8 <_svfprintf_r+0x948>
   26f12:	3f10      	subs	r7, #16
   26f14:	2f10      	cmp	r7, #16
   26f16:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   26f1a:	ac2f      	add	r4, sp, #188	@ 0xbc
   26f1c:	dcea      	bgt.n	26ef4 <_svfprintf_r+0x884>
   26f1e:	46a9      	mov	r9, r5
   26f20:	4615      	mov	r5, r2
   26f22:	3301      	adds	r3, #1
   26f24:	443d      	add	r5, r7
   26f26:	2b07      	cmp	r3, #7
   26f28:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   26f2c:	f8c4 9000 	str.w	r9, [r4]
   26f30:	6067      	str	r7, [r4, #4]
   26f32:	f300 84db 	bgt.w	278ec <_svfprintf_r+0x127c>
   26f36:	9b05      	ldr	r3, [sp, #20]
   26f38:	9a08      	ldr	r2, [sp, #32]
   26f3a:	1a9f      	subs	r7, r3, r2
   26f3c:	2f00      	cmp	r7, #0
   26f3e:	f104 0408 	add.w	r4, r4, #8
   26f42:	f77f ad02 	ble.w	2694a <_svfprintf_r+0x2da>
   26f46:	2f10      	cmp	r7, #16
   26f48:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   26f4a:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 27004 <_svfprintf_r+0x994>
   26f4e:	dd1f      	ble.n	26f90 <_svfprintf_r+0x920>
   26f50:	462a      	mov	r2, r5
   26f52:	f04f 0810 	mov.w	r8, #16
   26f56:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   26f58:	e004      	b.n	26f64 <_svfprintf_r+0x8f4>
   26f5a:	3f10      	subs	r7, #16
   26f5c:	2f10      	cmp	r7, #16
   26f5e:	f104 0408 	add.w	r4, r4, #8
   26f62:	dd14      	ble.n	26f8e <_svfprintf_r+0x91e>
   26f64:	3301      	adds	r3, #1
   26f66:	4927      	ldr	r1, [pc, #156]	@ (27004 <_svfprintf_r+0x994>)
   26f68:	3210      	adds	r2, #16
   26f6a:	2b07      	cmp	r3, #7
   26f6c:	e9c4 1800 	strd	r1, r8, [r4]
   26f70:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   26f74:	ddf1      	ble.n	26f5a <_svfprintf_r+0x8ea>
   26f76:	aa2c      	add	r2, sp, #176	@ 0xb0
   26f78:	4629      	mov	r1, r5
   26f7a:	4658      	mov	r0, fp
   26f7c:	f001 f916 	bl	281ac <__ssprint_r>
   26f80:	b9d0      	cbnz	r0, 26fb8 <_svfprintf_r+0x948>
   26f82:	3f10      	subs	r7, #16
   26f84:	2f10      	cmp	r7, #16
   26f86:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   26f8a:	ac2f      	add	r4, sp, #188	@ 0xbc
   26f8c:	dcea      	bgt.n	26f64 <_svfprintf_r+0x8f4>
   26f8e:	4615      	mov	r5, r2
   26f90:	3301      	adds	r3, #1
   26f92:	443d      	add	r5, r7
   26f94:	2b07      	cmp	r3, #7
   26f96:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   26f9a:	f8c4 9000 	str.w	r9, [r4]
   26f9e:	6067      	str	r7, [r4, #4]
   26fa0:	f300 818c 	bgt.w	272bc <_svfprintf_r+0xc4c>
   26fa4:	3408      	adds	r4, #8
   26fa6:	e4d0      	b.n	2694a <_svfprintf_r+0x2da>
   26fa8:	9909      	ldr	r1, [sp, #36]	@ 0x24
   26faa:	aa2c      	add	r2, sp, #176	@ 0xb0
   26fac:	4658      	mov	r0, fp
   26fae:	f001 f8fd 	bl	281ac <__ssprint_r>
   26fb2:	2800      	cmp	r0, #0
   26fb4:	f43f aced 	beq.w	26992 <_svfprintf_r+0x322>
   26fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26fba:	2b00      	cmp	r3, #0
   26fbc:	f43f ac60 	beq.w	26880 <_svfprintf_r+0x210>
   26fc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
   26fc2:	4658      	mov	r0, fp
   26fc4:	f7fd fc4a 	bl	2485c <_free_r>
   26fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   26fca:	899b      	ldrh	r3, [r3, #12]
   26fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   26fd0:	e45a      	b.n	26888 <_svfprintf_r+0x218>
   26fd2:	3301      	adds	r3, #1
   26fd4:	4435      	add	r5, r6
   26fd6:	2b07      	cmp	r3, #7
   26fd8:	f8c4 9000 	str.w	r9, [r4]
   26fdc:	6066      	str	r6, [r4, #4]
   26fde:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   26fe2:	f77f acc1 	ble.w	26968 <_svfprintf_r+0x2f8>
   26fe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
   26fe8:	aa2c      	add	r2, sp, #176	@ 0xb0
   26fea:	4658      	mov	r0, fp
   26fec:	f001 f8de 	bl	281ac <__ssprint_r>
   26ff0:	2800      	cmp	r0, #0
   26ff2:	d1e1      	bne.n	26fb8 <_svfprintf_r+0x948>
   26ff4:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   26ff6:	ac2f      	add	r4, sp, #188	@ 0xbc
   26ff8:	e4b7      	b.n	2696a <_svfprintf_r+0x2fa>
   26ffa:	bf00      	nop
   26ffc:	00030994 	.word	0x00030994
   27000:	0002b900 	.word	0x0002b900
   27004:	00031724 	.word	0x00031724
   27008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2700a:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
   2700c:	2b01      	cmp	r3, #1
   2700e:	f105 0501 	add.w	r5, r5, #1
   27012:	f107 0701 	add.w	r7, r7, #1
   27016:	f104 0808 	add.w	r8, r4, #8
   2701a:	f340 810b 	ble.w	27234 <_svfprintf_r+0xbc4>
   2701e:	2301      	movs	r3, #1
   27020:	2f07      	cmp	r7, #7
   27022:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   27026:	6026      	str	r6, [r4, #0]
   27028:	6063      	str	r3, [r4, #4]
   2702a:	f300 8183 	bgt.w	27334 <_svfprintf_r+0xcc4>
   2702e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   27030:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   27032:	3701      	adds	r7, #1
   27034:	441d      	add	r5, r3
   27036:	2f07      	cmp	r7, #7
   27038:	e9c8 2300 	strd	r2, r3, [r8]
   2703c:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   27040:	f300 8185 	bgt.w	2734e <_svfprintf_r+0xcde>
   27044:	f108 0808 	add.w	r8, r8, #8
   27048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2704a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   2704e:	1e5c      	subs	r4, r3, #1
   27050:	2200      	movs	r2, #0
   27052:	2300      	movs	r3, #0
   27054:	f7e5 fc78 	bl	c948 <__aeabi_dcmpeq>
   27058:	2800      	cmp	r0, #0
   2705a:	f040 8104 	bne.w	27266 <_svfprintf_r+0xbf6>
   2705e:	3701      	adds	r7, #1
   27060:	3601      	adds	r6, #1
   27062:	4425      	add	r5, r4
   27064:	2f07      	cmp	r7, #7
   27066:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   2706a:	f8c8 6000 	str.w	r6, [r8]
   2706e:	f8c8 4004 	str.w	r4, [r8, #4]
   27072:	f300 80eb 	bgt.w	2724c <_svfprintf_r+0xbdc>
   27076:	f108 0808 	add.w	r8, r8, #8
   2707a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   2707c:	f8c8 3004 	str.w	r3, [r8, #4]
   27080:	3701      	adds	r7, #1
   27082:	441d      	add	r5, r3
   27084:	2f07      	cmp	r7, #7
   27086:	ab26      	add	r3, sp, #152	@ 0x98
   27088:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   2708c:	f8c8 3000 	str.w	r3, [r8]
   27090:	dca9      	bgt.n	26fe6 <_svfprintf_r+0x976>
   27092:	f108 0408 	add.w	r4, r8, #8
   27096:	e468      	b.n	2696a <_svfprintf_r+0x2fa>
   27098:	9d04      	ldr	r5, [sp, #16]
   2709a:	2b0a      	cmp	r3, #10
   2709c:	f172 0100 	sbcs.w	r1, r2, #0
   270a0:	f080 835e 	bcs.w	27760 <_svfprintf_r+0x10f0>
   270a4:	3330      	adds	r3, #48	@ 0x30
   270a6:	f88d 315f 	strb.w	r3, [sp, #351]	@ 0x15f
   270aa:	2301      	movs	r3, #1
   270ac:	9504      	str	r5, [sp, #16]
   270ae:	9308      	str	r3, [sp, #32]
   270b0:	f20d 165f 	addw	r6, sp, #351	@ 0x15f
   270b4:	e6dd      	b.n	26e72 <_svfprintf_r+0x802>
   270b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
   270b8:	aa2c      	add	r2, sp, #176	@ 0xb0
   270ba:	4658      	mov	r0, fp
   270bc:	f001 f876 	bl	281ac <__ssprint_r>
   270c0:	2800      	cmp	r0, #0
   270c2:	f47f af79 	bne.w	26fb8 <_svfprintf_r+0x948>
   270c6:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   270c8:	ac2f      	add	r4, sp, #188	@ 0xbc
   270ca:	e434      	b.n	26936 <_svfprintf_r+0x2c6>
   270cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   270ce:	9313      	str	r3, [sp, #76]	@ 0x4c
   270d0:	aa2c      	add	r2, sp, #176	@ 0xb0
   270d2:	4658      	mov	r0, fp
   270d4:	f001 f86a 	bl	281ac <__ssprint_r>
   270d8:	2800      	cmp	r0, #0
   270da:	f47f af6d 	bne.w	26fb8 <_svfprintf_r+0x948>
   270de:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   270e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   270e2:	ac2f      	add	r4, sp, #188	@ 0xbc
   270e4:	e418      	b.n	26918 <_svfprintf_r+0x2a8>
   270e6:	4ab4      	ldr	r2, [pc, #720]	@ (273b8 <_svfprintf_r+0xd48>)
   270e8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   270ea:	9213      	str	r2, [sp, #76]	@ 0x4c
   270ec:	2e10      	cmp	r6, #16
   270ee:	dd1f      	ble.n	27130 <_svfprintf_r+0xac0>
   270f0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   270f4:	2710      	movs	r7, #16
   270f6:	4691      	mov	r9, r2
   270f8:	e004      	b.n	27104 <_svfprintf_r+0xa94>
   270fa:	3e10      	subs	r6, #16
   270fc:	2e10      	cmp	r6, #16
   270fe:	f104 0408 	add.w	r4, r4, #8
   27102:	dd15      	ble.n	27130 <_svfprintf_r+0xac0>
   27104:	3301      	adds	r3, #1
   27106:	3510      	adds	r5, #16
   27108:	2b07      	cmp	r3, #7
   2710a:	e9c4 9700 	strd	r9, r7, [r4]
   2710e:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   27112:	ddf2      	ble.n	270fa <_svfprintf_r+0xa8a>
   27114:	aa2c      	add	r2, sp, #176	@ 0xb0
   27116:	4641      	mov	r1, r8
   27118:	4658      	mov	r0, fp
   2711a:	f001 f847 	bl	281ac <__ssprint_r>
   2711e:	2800      	cmp	r0, #0
   27120:	f47f af4a 	bne.w	26fb8 <_svfprintf_r+0x948>
   27124:	3e10      	subs	r6, #16
   27126:	2e10      	cmp	r6, #16
   27128:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   2712c:	ac2f      	add	r4, sp, #188	@ 0xbc
   2712e:	dce9      	bgt.n	27104 <_svfprintf_r+0xa94>
   27130:	3301      	adds	r3, #1
   27132:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   27134:	4435      	add	r5, r6
   27136:	2b07      	cmp	r3, #7
   27138:	e9c4 2600 	strd	r2, r6, [r4]
   2713c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   27140:	f77f ac1c 	ble.w	2697c <_svfprintf_r+0x30c>
   27144:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27146:	aa2c      	add	r2, sp, #176	@ 0xb0
   27148:	4658      	mov	r0, fp
   2714a:	f001 f82f 	bl	281ac <__ssprint_r>
   2714e:	2800      	cmp	r0, #0
   27150:	f47f af32 	bne.w	26fb8 <_svfprintf_r+0x948>
   27154:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27156:	e411      	b.n	2697c <_svfprintf_r+0x30c>
   27158:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   2715a:	2900      	cmp	r1, #0
   2715c:	f340 8351 	ble.w	27802 <_svfprintf_r+0x1192>
   27160:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
   27164:	4293      	cmp	r3, r2
   27166:	bfa8      	it	ge
   27168:	4613      	movge	r3, r2
   2716a:	2b00      	cmp	r3, #0
   2716c:	4698      	mov	r8, r3
   2716e:	dd0a      	ble.n	27186 <_svfprintf_r+0xb16>
   27170:	441d      	add	r5, r3
   27172:	e9c4 6300 	strd	r6, r3, [r4]
   27176:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27178:	952e      	str	r5, [sp, #184]	@ 0xb8
   2717a:	3301      	adds	r3, #1
   2717c:	2b07      	cmp	r3, #7
   2717e:	932d      	str	r3, [sp, #180]	@ 0xb4
   27180:	f300 8661 	bgt.w	27e46 <_svfprintf_r+0x17d6>
   27184:	3408      	adds	r4, #8
   27186:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
   27188:	f1b8 0f00 	cmp.w	r8, #0
   2718c:	bfa8      	it	ge
   2718e:	eba7 0708 	subge.w	r7, r7, r8
   27192:	2f00      	cmp	r7, #0
   27194:	f300 81f5 	bgt.w	27582 <_svfprintf_r+0xf12>
   27198:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2719a:	4433      	add	r3, r6
   2719c:	9305      	str	r3, [sp, #20]
   2719e:	9b04      	ldr	r3, [sp, #16]
   271a0:	055f      	lsls	r7, r3, #21
   271a2:	f100 8215 	bmi.w	275d0 <_svfprintf_r+0xf60>
   271a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   271a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   271aa:	4293      	cmp	r3, r2
   271ac:	f2c0 82a0 	blt.w	276f0 <_svfprintf_r+0x1080>
   271b0:	9a04      	ldr	r2, [sp, #16]
   271b2:	07d0      	lsls	r0, r2, #31
   271b4:	f100 829c 	bmi.w	276f0 <_svfprintf_r+0x1080>
   271b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   271ba:	18b7      	adds	r7, r6, r2
   271bc:	1ad6      	subs	r6, r2, r3
   271be:	9b05      	ldr	r3, [sp, #20]
   271c0:	1aff      	subs	r7, r7, r3
   271c2:	42b7      	cmp	r7, r6
   271c4:	bfa8      	it	ge
   271c6:	4637      	movge	r7, r6
   271c8:	2f00      	cmp	r7, #0
   271ca:	dd0a      	ble.n	271e2 <_svfprintf_r+0xb72>
   271cc:	6023      	str	r3, [r4, #0]
   271ce:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   271d0:	6067      	str	r7, [r4, #4]
   271d2:	3301      	adds	r3, #1
   271d4:	443d      	add	r5, r7
   271d6:	2b07      	cmp	r3, #7
   271d8:	952e      	str	r5, [sp, #184]	@ 0xb8
   271da:	932d      	str	r3, [sp, #180]	@ 0xb4
   271dc:	f300 8665 	bgt.w	27eaa <_svfprintf_r+0x183a>
   271e0:	3408      	adds	r4, #8
   271e2:	2f00      	cmp	r7, #0
   271e4:	bfa8      	it	ge
   271e6:	1bf6      	subge	r6, r6, r7
   271e8:	2e00      	cmp	r6, #0
   271ea:	f77f abbe 	ble.w	2696a <_svfprintf_r+0x2fa>
   271ee:	2e10      	cmp	r6, #16
   271f0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   271f2:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 273bc <_svfprintf_r+0xd4c>
   271f6:	f77f aeec 	ble.w	26fd2 <_svfprintf_r+0x962>
   271fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   271fe:	2710      	movs	r7, #16
   27200:	e004      	b.n	2720c <_svfprintf_r+0xb9c>
   27202:	3408      	adds	r4, #8
   27204:	3e10      	subs	r6, #16
   27206:	2e10      	cmp	r6, #16
   27208:	f77f aee3 	ble.w	26fd2 <_svfprintf_r+0x962>
   2720c:	3301      	adds	r3, #1
   2720e:	3510      	adds	r5, #16
   27210:	2b07      	cmp	r3, #7
   27212:	e9c4 9700 	strd	r9, r7, [r4]
   27216:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   2721a:	ddf2      	ble.n	27202 <_svfprintf_r+0xb92>
   2721c:	aa2c      	add	r2, sp, #176	@ 0xb0
   2721e:	4641      	mov	r1, r8
   27220:	4658      	mov	r0, fp
   27222:	f000 ffc3 	bl	281ac <__ssprint_r>
   27226:	2800      	cmp	r0, #0
   27228:	f47f aec6 	bne.w	26fb8 <_svfprintf_r+0x948>
   2722c:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   27230:	ac2f      	add	r4, sp, #188	@ 0xbc
   27232:	e7e7      	b.n	27204 <_svfprintf_r+0xb94>
   27234:	9b04      	ldr	r3, [sp, #16]
   27236:	07d9      	lsls	r1, r3, #31
   27238:	f53f aef1 	bmi.w	2701e <_svfprintf_r+0x9ae>
   2723c:	2301      	movs	r3, #1
   2723e:	2f07      	cmp	r7, #7
   27240:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   27244:	6026      	str	r6, [r4, #0]
   27246:	6063      	str	r3, [r4, #4]
   27248:	f77f af17 	ble.w	2707a <_svfprintf_r+0xa0a>
   2724c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2724e:	aa2c      	add	r2, sp, #176	@ 0xb0
   27250:	4658      	mov	r0, fp
   27252:	f000 ffab 	bl	281ac <__ssprint_r>
   27256:	2800      	cmp	r0, #0
   27258:	f47f aeae 	bne.w	26fb8 <_svfprintf_r+0x948>
   2725c:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   27260:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   27264:	e709      	b.n	2707a <_svfprintf_r+0xa0a>
   27266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   27268:	2b01      	cmp	r3, #1
   2726a:	f77f af06 	ble.w	2707a <_svfprintf_r+0xa0a>
   2726e:	2b11      	cmp	r3, #17
   27270:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 273bc <_svfprintf_r+0xd4c>
   27274:	f340 835c 	ble.w	27930 <_svfprintf_r+0x12c0>
   27278:	f8cd a014 	str.w	sl, [sp, #20]
   2727c:	2610      	movs	r6, #16
   2727e:	46ca      	mov	sl, r9
   27280:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
   27284:	e005      	b.n	27292 <_svfprintf_r+0xc22>
   27286:	f108 0808 	add.w	r8, r8, #8
   2728a:	3c10      	subs	r4, #16
   2728c:	2c10      	cmp	r4, #16
   2728e:	f340 834c 	ble.w	2792a <_svfprintf_r+0x12ba>
   27292:	3701      	adds	r7, #1
   27294:	3510      	adds	r5, #16
   27296:	2f07      	cmp	r7, #7
   27298:	e9c8 a600 	strd	sl, r6, [r8]
   2729c:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   272a0:	ddf1      	ble.n	27286 <_svfprintf_r+0xc16>
   272a2:	aa2c      	add	r2, sp, #176	@ 0xb0
   272a4:	4649      	mov	r1, r9
   272a6:	4658      	mov	r0, fp
   272a8:	f000 ff80 	bl	281ac <__ssprint_r>
   272ac:	2800      	cmp	r0, #0
   272ae:	f47f ae83 	bne.w	26fb8 <_svfprintf_r+0x948>
   272b2:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   272b6:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   272ba:	e7e6      	b.n	2728a <_svfprintf_r+0xc1a>
   272bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   272be:	aa2c      	add	r2, sp, #176	@ 0xb0
   272c0:	4658      	mov	r0, fp
   272c2:	f000 ff73 	bl	281ac <__ssprint_r>
   272c6:	2800      	cmp	r0, #0
   272c8:	f47f ae76 	bne.w	26fb8 <_svfprintf_r+0x948>
   272cc:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   272ce:	ac2f      	add	r4, sp, #188	@ 0xbc
   272d0:	f7ff bb3b 	b.w	2694a <_svfprintf_r+0x2da>
   272d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   272d6:	f015 0010 	ands.w	r0, r5, #16
   272da:	f851 3b04 	ldr.w	r3, [r1], #4
   272de:	d10c      	bne.n	272fa <_svfprintf_r+0xc8a>
   272e0:	f015 0640 	ands.w	r6, r5, #64	@ 0x40
   272e4:	d004      	beq.n	272f0 <_svfprintf_r+0xc80>
   272e6:	910b      	str	r1, [sp, #44]	@ 0x2c
   272e8:	b29b      	uxth	r3, r3
   272ea:	4602      	mov	r2, r0
   272ec:	2101      	movs	r1, #1
   272ee:	e489      	b.n	26c04 <_svfprintf_r+0x594>
   272f0:	f415 7200 	ands.w	r2, r5, #512	@ 0x200
   272f4:	bf1c      	itt	ne
   272f6:	b2db      	uxtbne	r3, r3
   272f8:	4632      	movne	r2, r6
   272fa:	910b      	str	r1, [sp, #44]	@ 0x2c
   272fc:	2101      	movs	r1, #1
   272fe:	e481      	b.n	26c04 <_svfprintf_r+0x594>
   27300:	9804      	ldr	r0, [sp, #16]
   27302:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   27304:	f010 0010 	ands.w	r0, r0, #16
   27308:	f851 3b04 	ldr.w	r3, [r1], #4
   2730c:	d13d      	bne.n	2738a <_svfprintf_r+0xd1a>
   2730e:	9a04      	ldr	r2, [sp, #16]
   27310:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   27314:	d034      	beq.n	27380 <_svfprintf_r+0xd10>
   27316:	b29b      	uxth	r3, r3
   27318:	4602      	mov	r2, r0
   2731a:	910b      	str	r1, [sp, #44]	@ 0x2c
   2731c:	e4a4      	b.n	26c68 <_svfprintf_r+0x5f8>
   2731e:	425b      	negs	r3, r3
   27320:	9d04      	ldr	r5, [sp, #16]
   27322:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   27326:	202d      	movs	r0, #45	@ 0x2d
   27328:	2101      	movs	r1, #1
   2732a:	e46c      	b.n	26c06 <_svfprintf_r+0x596>
   2732c:	9b05      	ldr	r3, [sp, #20]
   2732e:	9308      	str	r3, [sp, #32]
   27330:	ae58      	add	r6, sp, #352	@ 0x160
   27332:	e59e      	b.n	26e72 <_svfprintf_r+0x802>
   27334:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27336:	aa2c      	add	r2, sp, #176	@ 0xb0
   27338:	4658      	mov	r0, fp
   2733a:	f000 ff37 	bl	281ac <__ssprint_r>
   2733e:	2800      	cmp	r0, #0
   27340:	f47f ae3a 	bne.w	26fb8 <_svfprintf_r+0x948>
   27344:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   27348:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   2734c:	e66f      	b.n	2702e <_svfprintf_r+0x9be>
   2734e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27350:	aa2c      	add	r2, sp, #176	@ 0xb0
   27352:	4658      	mov	r0, fp
   27354:	f000 ff2a 	bl	281ac <__ssprint_r>
   27358:	2800      	cmp	r0, #0
   2735a:	f47f ae2d 	bne.w	26fb8 <_svfprintf_r+0x948>
   2735e:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   27362:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   27366:	e66f      	b.n	27048 <_svfprintf_r+0x9d8>
   27368:	9b04      	ldr	r3, [sp, #16]
   2736a:	07db      	lsls	r3, r3, #31
   2736c:	f57f aafd 	bpl.w	2696a <_svfprintf_r+0x2fa>
   27370:	e532      	b.n	26dd8 <_svfprintf_r+0x768>
   27372:	930b      	str	r3, [sp, #44]	@ 0x2c
   27374:	f89a 3000 	ldrb.w	r3, [sl]
   27378:	f7ff b9d2 	b.w	26720 <_svfprintf_r+0xb0>
   2737c:	ae58      	add	r6, sp, #352	@ 0x160
   2737e:	e578      	b.n	26e72 <_svfprintf_r+0x802>
   27380:	9a04      	ldr	r2, [sp, #16]
   27382:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
   27386:	f040 8409 	bne.w	27b9c <_svfprintf_r+0x152c>
   2738a:	910b      	str	r1, [sp, #44]	@ 0x2c
   2738c:	e46c      	b.n	26c68 <_svfprintf_r+0x5f8>
   2738e:	920b      	str	r2, [sp, #44]	@ 0x2c
   27390:	17da      	asrs	r2, r3, #31
   27392:	4611      	mov	r1, r2
   27394:	f7ff bbf6 	b.w	26b84 <_svfprintf_r+0x514>
   27398:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   2739a:	f89a 3000 	ldrb.w	r3, [sl]
   2739e:	2a00      	cmp	r2, #0
   273a0:	f43f a9be 	beq.w	26720 <_svfprintf_r+0xb0>
   273a4:	7812      	ldrb	r2, [r2, #0]
   273a6:	2a00      	cmp	r2, #0
   273a8:	f43f a9ba 	beq.w	26720 <_svfprintf_r+0xb0>
   273ac:	9a04      	ldr	r2, [sp, #16]
   273ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
   273b2:	9204      	str	r2, [sp, #16]
   273b4:	f7ff b9b4 	b.w	26720 <_svfprintf_r+0xb0>
   273b8:	00031734 	.word	0x00031734
   273bc:	00031724 	.word	0x00031724
   273c0:	9b04      	ldr	r3, [sp, #16]
   273c2:	06d8      	lsls	r0, r3, #27
   273c4:	f100 82ab 	bmi.w	2791e <_svfprintf_r+0x12ae>
   273c8:	9b04      	ldr	r3, [sp, #16]
   273ca:	0659      	lsls	r1, r3, #25
   273cc:	f100 83e0 	bmi.w	27b90 <_svfprintf_r+0x1520>
   273d0:	9b04      	ldr	r3, [sp, #16]
   273d2:	059a      	lsls	r2, r3, #22
   273d4:	f140 82a3 	bpl.w	2791e <_svfprintf_r+0x12ae>
   273d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   273da:	9a06      	ldr	r2, [sp, #24]
   273dc:	681b      	ldr	r3, [r3, #0]
   273de:	701a      	strb	r2, [r3, #0]
   273e0:	e464      	b.n	26cac <_svfprintf_r+0x63c>
   273e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   273e6:	4602      	mov	r2, r0
   273e8:	460b      	mov	r3, r1
   273ea:	f7e5 fcb5 	bl	cd58 <__aeabi_dcmpun>
   273ee:	2800      	cmp	r0, #0
   273f0:	f040 861e 	bne.w	28030 <_svfprintf_r+0x19c0>
   273f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   273f6:	2b61      	cmp	r3, #97	@ 0x61
   273f8:	f000 8531 	beq.w	27e5e <_svfprintf_r+0x17ee>
   273fc:	2b41      	cmp	r3, #65	@ 0x41
   273fe:	f000 854e 	beq.w	27e9e <_svfprintf_r+0x182e>
   27402:	9b05      	ldr	r3, [sp, #20]
   27404:	3301      	adds	r3, #1
   27406:	f000 8402 	beq.w	27c0e <_svfprintf_r+0x159e>
   2740a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2740c:	f023 0320 	bic.w	r3, r3, #32
   27410:	2b47      	cmp	r3, #71	@ 0x47
   27412:	f000 85e1 	beq.w	27fd8 <_svfprintf_r+0x1968>
   27416:	900a      	str	r0, [sp, #40]	@ 0x28
   27418:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   2741c:	9a04      	ldr	r2, [sp, #16]
   2741e:	2900      	cmp	r1, #0
   27420:	f442 7980 	orr.w	r9, r2, #256	@ 0x100
   27424:	f2c0 84f9 	blt.w	27e1a <_svfprintf_r+0x17aa>
   27428:	ed9d 7b10 	vldr	d7, [sp, #64]	@ 0x40
   2742c:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
   27430:	2300      	movs	r3, #0
   27432:	9313      	str	r3, [sp, #76]	@ 0x4c
   27434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   27436:	3b41      	subs	r3, #65	@ 0x41
   27438:	2b25      	cmp	r3, #37	@ 0x25
   2743a:	f200 8325 	bhi.w	27a88 <_svfprintf_r+0x1418>
   2743e:	e8df f013 	tbh	[pc, r3, lsl #1]
   27442:	0429      	.short	0x0429
   27444:	03230323 	.word	0x03230323
   27448:	03ea0323 	.word	0x03ea0323
   2744c:	032304b5 	.word	0x032304b5
   27450:	03230323 	.word	0x03230323
   27454:	03230323 	.word	0x03230323
   27458:	03230323 	.word	0x03230323
   2745c:	03230323 	.word	0x03230323
   27460:	03230323 	.word	0x03230323
   27464:	03230323 	.word	0x03230323
   27468:	03230323 	.word	0x03230323
   2746c:	03230323 	.word	0x03230323
   27470:	03230323 	.word	0x03230323
   27474:	03230323 	.word	0x03230323
   27478:	03230323 	.word	0x03230323
   2747c:	03230323 	.word	0x03230323
   27480:	04290323 	.word	0x04290323
   27484:	03230323 	.word	0x03230323
   27488:	03ea0323 	.word	0x03ea0323
   2748c:	04b5      	.short	0x04b5
   2748e:	9d04      	ldr	r5, [sp, #16]
   27490:	930c      	str	r3, [sp, #48]	@ 0x30
   27492:	f7ff bba9 	b.w	26be8 <_svfprintf_r+0x578>
   27496:	930c      	str	r3, [sp, #48]	@ 0x30
   27498:	4bad      	ldr	r3, [pc, #692]	@ (27750 <_svfprintf_r+0x10e0>)
   2749a:	9315      	str	r3, [sp, #84]	@ 0x54
   2749c:	9b04      	ldr	r3, [sp, #16]
   2749e:	f013 0220 	ands.w	r2, r3, #32
   274a2:	f000 8133 	beq.w	2770c <_svfprintf_r+0x109c>
   274a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   274a8:	3307      	adds	r3, #7
   274aa:	f023 0307 	bic.w	r3, r3, #7
   274ae:	4619      	mov	r1, r3
   274b0:	685a      	ldr	r2, [r3, #4]
   274b2:	f851 3b08 	ldr.w	r3, [r1], #8
   274b6:	910b      	str	r1, [sp, #44]	@ 0x2c
   274b8:	9804      	ldr	r0, [sp, #16]
   274ba:	07c1      	lsls	r1, r0, #31
   274bc:	d50b      	bpl.n	274d6 <_svfprintf_r+0xe66>
   274be:	ea53 0102 	orrs.w	r1, r3, r2
   274c2:	d008      	beq.n	274d6 <_svfprintf_r+0xe66>
   274c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
   274c6:	f88d 1089 	strb.w	r1, [sp, #137]	@ 0x89
   274ca:	f040 0102 	orr.w	r1, r0, #2
   274ce:	9104      	str	r1, [sp, #16]
   274d0:	2130      	movs	r1, #48	@ 0x30
   274d2:	f88d 1088 	strb.w	r1, [sp, #136]	@ 0x88
   274d6:	9904      	ldr	r1, [sp, #16]
   274d8:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
   274dc:	2102      	movs	r1, #2
   274de:	f7ff bb91 	b.w	26c04 <_svfprintf_r+0x594>
   274e2:	930c      	str	r3, [sp, #48]	@ 0x30
   274e4:	f7ff bbb2 	b.w	26c4c <_svfprintf_r+0x5dc>
   274e8:	930c      	str	r3, [sp, #48]	@ 0x30
   274ea:	4b9a      	ldr	r3, [pc, #616]	@ (27754 <_svfprintf_r+0x10e4>)
   274ec:	9315      	str	r3, [sp, #84]	@ 0x54
   274ee:	e7d5      	b.n	2749c <_svfprintf_r+0xe2c>
   274f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   274f2:	681b      	ldr	r3, [r3, #0]
   274f4:	f88d 30fc 	strb.w	r3, [sp, #252]	@ 0xfc
   274f8:	2301      	movs	r3, #1
   274fa:	9302      	str	r3, [sp, #8]
   274fc:	9308      	str	r3, [sp, #32]
   274fe:	ae3f      	add	r6, sp, #252	@ 0xfc
   27500:	f7ff baf5 	b.w	26aee <_svfprintf_r+0x47e>
   27504:	9b04      	ldr	r3, [sp, #16]
   27506:	f043 0320 	orr.w	r3, r3, #32
   2750a:	9304      	str	r3, [sp, #16]
   2750c:	f10a 0a01 	add.w	sl, sl, #1
   27510:	f89a 3000 	ldrb.w	r3, [sl]
   27514:	f7ff b904 	b.w	26720 <_svfprintf_r+0xb0>
   27518:	9b04      	ldr	r3, [sp, #16]
   2751a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   2751e:	9304      	str	r3, [sp, #16]
   27520:	f10a 0a01 	add.w	sl, sl, #1
   27524:	f89a 3000 	ldrb.w	r3, [sl]
   27528:	f7ff b8fa 	b.w	26720 <_svfprintf_r+0xb0>
   2752c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2752e:	aa2c      	add	r2, sp, #176	@ 0xb0
   27530:	4658      	mov	r0, fp
   27532:	f000 fe3b 	bl	281ac <__ssprint_r>
   27536:	2800      	cmp	r0, #0
   27538:	f47f ad3e 	bne.w	26fb8 <_svfprintf_r+0x948>
   2753c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   2753e:	ac2f      	add	r4, sp, #188	@ 0xbc
   27540:	e457      	b.n	26df2 <_svfprintf_r+0x782>
   27542:	9b05      	ldr	r3, [sp, #20]
   27544:	960a      	str	r6, [sp, #40]	@ 0x28
   27546:	2b06      	cmp	r3, #6
   27548:	4631      	mov	r1, r6
   2754a:	bf28      	it	cs
   2754c:	2306      	movcs	r3, #6
   2754e:	9605      	str	r6, [sp, #20]
   27550:	4632      	mov	r2, r6
   27552:	9302      	str	r3, [sp, #8]
   27554:	4e80      	ldr	r6, [pc, #512]	@ (27758 <_svfprintf_r+0x10e8>)
   27556:	970b      	str	r7, [sp, #44]	@ 0x2c
   27558:	9308      	str	r3, [sp, #32]
   2755a:	9112      	str	r1, [sp, #72]	@ 0x48
   2755c:	910f      	str	r1, [sp, #60]	@ 0x3c
   2755e:	910d      	str	r1, [sp, #52]	@ 0x34
   27560:	f7ff ba65 	b.w	26a2e <_svfprintf_r+0x3be>
   27564:	2140      	movs	r1, #64	@ 0x40
   27566:	4658      	mov	r0, fp
   27568:	f7fd fe8e 	bl	25288 <_malloc_r>
   2756c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2756e:	6018      	str	r0, [r3, #0]
   27570:	6118      	str	r0, [r3, #16]
   27572:	2800      	cmp	r0, #0
   27574:	f000 8603 	beq.w	2817e <_svfprintf_r+0x1b0e>
   27578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2757a:	2340      	movs	r3, #64	@ 0x40
   2757c:	6153      	str	r3, [r2, #20]
   2757e:	f7ff b893 	b.w	266a8 <_svfprintf_r+0x38>
   27582:	2f10      	cmp	r7, #16
   27584:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27586:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 2775c <_svfprintf_r+0x10ec>
   2758a:	f340 820b 	ble.w	279a4 <_svfprintf_r+0x1334>
   2758e:	4649      	mov	r1, r9
   27590:	462a      	mov	r2, r5
   27592:	46b1      	mov	r9, r6
   27594:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   27596:	f04f 0810 	mov.w	r8, #16
   2759a:	460e      	mov	r6, r1
   2759c:	e004      	b.n	275a8 <_svfprintf_r+0xf38>
   2759e:	3408      	adds	r4, #8
   275a0:	3f10      	subs	r7, #16
   275a2:	2f10      	cmp	r7, #16
   275a4:	f340 81fa 	ble.w	2799c <_svfprintf_r+0x132c>
   275a8:	3301      	adds	r3, #1
   275aa:	3210      	adds	r2, #16
   275ac:	2b07      	cmp	r3, #7
   275ae:	e9c4 6800 	strd	r6, r8, [r4]
   275b2:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   275b6:	ddf2      	ble.n	2759e <_svfprintf_r+0xf2e>
   275b8:	aa2c      	add	r2, sp, #176	@ 0xb0
   275ba:	4629      	mov	r1, r5
   275bc:	4658      	mov	r0, fp
   275be:	f000 fdf5 	bl	281ac <__ssprint_r>
   275c2:	2800      	cmp	r0, #0
   275c4:	f47f acf8 	bne.w	26fb8 <_svfprintf_r+0x948>
   275c8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   275cc:	ac2f      	add	r4, sp, #188	@ 0xbc
   275ce:	e7e7      	b.n	275a0 <_svfprintf_r+0xf30>
   275d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   275d2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
   275d6:	eb06 0903 	add.w	r9, r6, r3
   275da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   275dc:	f8dd a05c 	ldr.w	sl, [sp, #92]	@ 0x5c
   275e0:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
   275e4:	960d      	str	r6, [sp, #52]	@ 0x34
   275e6:	2b00      	cmp	r3, #0
   275e8:	4622      	mov	r2, r4
   275ea:	4629      	mov	r1, r5
   275ec:	9c05      	ldr	r4, [sp, #20]
   275ee:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   275f0:	f8cd 9014 	str.w	r9, [sp, #20]
   275f4:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
   275f8:	dd31      	ble.n	2765e <_svfprintf_r+0xfee>
   275fa:	f1b8 0f00 	cmp.w	r8, #0
   275fe:	f340 813b 	ble.w	27878 <_svfprintf_r+0x1208>
   27602:	f108 38ff 	add.w	r8, r8, #4294967295
   27606:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   27608:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   2760a:	3001      	adds	r0, #1
   2760c:	4449      	add	r1, r9
   2760e:	2807      	cmp	r0, #7
   27610:	e9c2 3900 	strd	r3, r9, [r2]
   27614:	912e      	str	r1, [sp, #184]	@ 0xb8
   27616:	902d      	str	r0, [sp, #180]	@ 0xb4
   27618:	f300 8087 	bgt.w	2772a <_svfprintf_r+0x10ba>
   2761c:	3208      	adds	r2, #8
   2761e:	9b05      	ldr	r3, [sp, #20]
   27620:	f89a 0000 	ldrb.w	r0, [sl]
   27624:	1b1f      	subs	r7, r3, r4
   27626:	4287      	cmp	r7, r0
   27628:	bfa8      	it	ge
   2762a:	4607      	movge	r7, r0
   2762c:	2f00      	cmp	r7, #0
   2762e:	dd0c      	ble.n	2764a <_svfprintf_r+0xfda>
   27630:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   27632:	3001      	adds	r0, #1
   27634:	4439      	add	r1, r7
   27636:	2807      	cmp	r0, #7
   27638:	e9c2 4700 	strd	r4, r7, [r2]
   2763c:	912e      	str	r1, [sp, #184]	@ 0xb8
   2763e:	902d      	str	r0, [sp, #180]	@ 0xb4
   27640:	f300 8160 	bgt.w	27904 <_svfprintf_r+0x1294>
   27644:	f89a 0000 	ldrb.w	r0, [sl]
   27648:	3208      	adds	r2, #8
   2764a:	2f00      	cmp	r7, #0
   2764c:	bfac      	ite	ge
   2764e:	1bc6      	subge	r6, r0, r7
   27650:	4606      	movlt	r6, r0
   27652:	2e00      	cmp	r6, #0
   27654:	dc16      	bgt.n	27684 <_svfprintf_r+0x1014>
   27656:	4404      	add	r4, r0
   27658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   2765a:	2b00      	cmp	r3, #0
   2765c:	dccd      	bgt.n	275fa <_svfprintf_r+0xf8a>
   2765e:	f1b8 0f00 	cmp.w	r8, #0
   27662:	dcce      	bgt.n	27602 <_svfprintf_r+0xf92>
   27664:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	@ 0x34
   27668:	4620      	mov	r0, r4
   2766a:	18f3      	adds	r3, r6, r3
   2766c:	4298      	cmp	r0, r3
   2766e:	4614      	mov	r4, r2
   27670:	4602      	mov	r2, r0
   27672:	bf28      	it	cs
   27674:	461a      	movcs	r2, r3
   27676:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
   2767a:	460d      	mov	r5, r1
   2767c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
   27680:	9205      	str	r2, [sp, #20]
   27682:	e590      	b.n	271a6 <_svfprintf_r+0xb36>
   27684:	2e10      	cmp	r6, #16
   27686:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   27688:	4b34      	ldr	r3, [pc, #208]	@ (2775c <_svfprintf_r+0x10ec>)
   2768a:	dd23      	ble.n	276d4 <_svfprintf_r+0x1064>
   2768c:	9408      	str	r4, [sp, #32]
   2768e:	2710      	movs	r7, #16
   27690:	4634      	mov	r4, r6
   27692:	461e      	mov	r6, r3
   27694:	e004      	b.n	276a0 <_svfprintf_r+0x1030>
   27696:	3c10      	subs	r4, #16
   27698:	2c10      	cmp	r4, #16
   2769a:	f102 0208 	add.w	r2, r2, #8
   2769e:	dd16      	ble.n	276ce <_svfprintf_r+0x105e>
   276a0:	3001      	adds	r0, #1
   276a2:	4b2e      	ldr	r3, [pc, #184]	@ (2775c <_svfprintf_r+0x10ec>)
   276a4:	3110      	adds	r1, #16
   276a6:	2807      	cmp	r0, #7
   276a8:	e9c2 3700 	strd	r3, r7, [r2]
   276ac:	e9cd 012d 	strd	r0, r1, [sp, #180]	@ 0xb4
   276b0:	ddf1      	ble.n	27696 <_svfprintf_r+0x1026>
   276b2:	aa2c      	add	r2, sp, #176	@ 0xb0
   276b4:	4629      	mov	r1, r5
   276b6:	4658      	mov	r0, fp
   276b8:	f000 fd78 	bl	281ac <__ssprint_r>
   276bc:	2800      	cmp	r0, #0
   276be:	f47f ac7b 	bne.w	26fb8 <_svfprintf_r+0x948>
   276c2:	3c10      	subs	r4, #16
   276c4:	2c10      	cmp	r4, #16
   276c6:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	@ 0xb4
   276ca:	aa2f      	add	r2, sp, #188	@ 0xbc
   276cc:	dce8      	bgt.n	276a0 <_svfprintf_r+0x1030>
   276ce:	4633      	mov	r3, r6
   276d0:	4626      	mov	r6, r4
   276d2:	9c08      	ldr	r4, [sp, #32]
   276d4:	6013      	str	r3, [r2, #0]
   276d6:	3001      	adds	r0, #1
   276d8:	4431      	add	r1, r6
   276da:	2807      	cmp	r0, #7
   276dc:	e9cd 012d 	strd	r0, r1, [sp, #180]	@ 0xb4
   276e0:	6056      	str	r6, [r2, #4]
   276e2:	f300 83a2 	bgt.w	27e2a <_svfprintf_r+0x17ba>
   276e6:	f89a 0000 	ldrb.w	r0, [sl]
   276ea:	3208      	adds	r2, #8
   276ec:	4404      	add	r4, r0
   276ee:	e7b3      	b.n	27658 <_svfprintf_r+0xfe8>
   276f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   276f2:	9916      	ldr	r1, [sp, #88]	@ 0x58
   276f4:	4415      	add	r5, r2
   276f6:	e9c4 1200 	strd	r1, r2, [r4]
   276fa:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   276fc:	952e      	str	r5, [sp, #184]	@ 0xb8
   276fe:	3201      	adds	r2, #1
   27700:	2a07      	cmp	r2, #7
   27702:	922d      	str	r2, [sp, #180]	@ 0xb4
   27704:	f300 83be 	bgt.w	27e84 <_svfprintf_r+0x1814>
   27708:	3408      	adds	r4, #8
   2770a:	e555      	b.n	271b8 <_svfprintf_r+0xb48>
   2770c:	9804      	ldr	r0, [sp, #16]
   2770e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   27710:	f010 0010 	ands.w	r0, r0, #16
   27714:	f851 3b04 	ldr.w	r3, [r1], #4
   27718:	d117      	bne.n	2774a <_svfprintf_r+0x10da>
   2771a:	9a04      	ldr	r2, [sp, #16]
   2771c:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   27720:	d00e      	beq.n	27740 <_svfprintf_r+0x10d0>
   27722:	b29b      	uxth	r3, r3
   27724:	4602      	mov	r2, r0
   27726:	910b      	str	r1, [sp, #44]	@ 0x2c
   27728:	e6c6      	b.n	274b8 <_svfprintf_r+0xe48>
   2772a:	aa2c      	add	r2, sp, #176	@ 0xb0
   2772c:	4629      	mov	r1, r5
   2772e:	4658      	mov	r0, fp
   27730:	f000 fd3c 	bl	281ac <__ssprint_r>
   27734:	2800      	cmp	r0, #0
   27736:	f47f ac3f 	bne.w	26fb8 <_svfprintf_r+0x948>
   2773a:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   2773c:	aa2f      	add	r2, sp, #188	@ 0xbc
   2773e:	e76e      	b.n	2761e <_svfprintf_r+0xfae>
   27740:	9a04      	ldr	r2, [sp, #16]
   27742:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
   27746:	f040 821f 	bne.w	27b88 <_svfprintf_r+0x1518>
   2774a:	910b      	str	r1, [sp, #44]	@ 0x2c
   2774c:	e6b4      	b.n	274b8 <_svfprintf_r+0xe48>
   2774e:	bf00      	nop
   27750:	00030980 	.word	0x00030980
   27754:	00030994 	.word	0x00030994
   27758:	000309a8 	.word	0x000309a8
   2775c:	00031724 	.word	0x00031724
   27760:	2100      	movs	r1, #0
   27762:	9408      	str	r4, [sp, #32]
   27764:	f8df 931c 	ldr.w	r9, [pc, #796]	@ 27a84 <_svfprintf_r+0x1414>
   27768:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   2776a:	f8cd a010 	str.w	sl, [sp, #16]
   2776e:	f405 6780 	and.w	r7, r5, #1024	@ 0x400
   27772:	ae58      	add	r6, sp, #352	@ 0x160
   27774:	f04f 0805 	mov.w	r8, #5
   27778:	9502      	str	r5, [sp, #8]
   2777a:	468c      	mov	ip, r1
   2777c:	e005      	b.n	2778a <_svfprintf_r+0x111a>
   2777e:	2b0a      	cmp	r3, #10
   27780:	f172 0200 	sbcs.w	r2, r2, #0
   27784:	d334      	bcc.n	277f0 <_svfprintf_r+0x1180>
   27786:	4653      	mov	r3, sl
   27788:	462a      	mov	r2, r5
   2778a:	1899      	adds	r1, r3, r2
   2778c:	f141 0100 	adc.w	r1, r1, #0
   27790:	fba9 0501 	umull	r0, r5, r9, r1
   27794:	f025 0003 	bic.w	r0, r5, #3
   27798:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   2779c:	1a09      	subs	r1, r1, r0
   2779e:	1a58      	subs	r0, r3, r1
   277a0:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
   277a4:	f162 0e00 	sbc.w	lr, r2, #0
   277a8:	fb05 f500 	mul.w	r5, r5, r0
   277ac:	fba0 a009 	umull	sl, r0, r0, r9
   277b0:	fb09 550e 	mla	r5, r9, lr, r5
   277b4:	f00a 0e01 	and.w	lr, sl, #1
   277b8:	4405      	add	r5, r0
   277ba:	fbae 0e08 	umull	r0, lr, lr, r8
   277be:	1840      	adds	r0, r0, r1
   277c0:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
   277c4:	3030      	adds	r0, #48	@ 0x30
   277c6:	f806 0c01 	strb.w	r0, [r6, #-1]
   277ca:	ea4a 7ac5 	orr.w	sl, sl, r5, lsl #31
   277ce:	f10c 0c01 	add.w	ip, ip, #1
   277d2:	3e01      	subs	r6, #1
   277d4:	086d      	lsrs	r5, r5, #1
   277d6:	2f00      	cmp	r7, #0
   277d8:	d0d1      	beq.n	2777e <_svfprintf_r+0x110e>
   277da:	7821      	ldrb	r1, [r4, #0]
   277dc:	458c      	cmp	ip, r1
   277de:	d1ce      	bne.n	2777e <_svfprintf_r+0x110e>
   277e0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   277e4:	d0cb      	beq.n	2777e <_svfprintf_r+0x110e>
   277e6:	2b0a      	cmp	r3, #10
   277e8:	f172 0200 	sbcs.w	r2, r2, #0
   277ec:	f080 80e7 	bcs.w	279be <_svfprintf_r+0x134e>
   277f0:	9417      	str	r4, [sp, #92]	@ 0x5c
   277f2:	f8dd a010 	ldr.w	sl, [sp, #16]
   277f6:	9d02      	ldr	r5, [sp, #8]
   277f8:	9c08      	ldr	r4, [sp, #32]
   277fa:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
   277fe:	f7ff bb34 	b.w	26e6a <_svfprintf_r+0x7fa>
   27802:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27804:	4a9e      	ldr	r2, [pc, #632]	@ (27a80 <_svfprintf_r+0x1410>)
   27806:	6022      	str	r2, [r4, #0]
   27808:	3301      	adds	r3, #1
   2780a:	3501      	adds	r5, #1
   2780c:	2201      	movs	r2, #1
   2780e:	2b07      	cmp	r3, #7
   27810:	952e      	str	r5, [sp, #184]	@ 0xb8
   27812:	932d      	str	r3, [sp, #180]	@ 0xb4
   27814:	6062      	str	r2, [r4, #4]
   27816:	f300 811b 	bgt.w	27a50 <_svfprintf_r+0x13e0>
   2781a:	3408      	adds	r4, #8
   2781c:	2900      	cmp	r1, #0
   2781e:	f040 8093 	bne.w	27948 <_svfprintf_r+0x12d8>
   27822:	9b04      	ldr	r3, [sp, #16]
   27824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   27826:	f003 0301 	and.w	r3, r3, #1
   2782a:	4313      	orrs	r3, r2
   2782c:	f43f a89d 	beq.w	2696a <_svfprintf_r+0x2fa>
   27830:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   27832:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   27834:	441d      	add	r5, r3
   27836:	e9c4 2300 	strd	r2, r3, [r4]
   2783a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2783c:	952e      	str	r5, [sp, #184]	@ 0xb8
   2783e:	3301      	adds	r3, #1
   27840:	2b07      	cmp	r3, #7
   27842:	932d      	str	r3, [sp, #180]	@ 0xb4
   27844:	f300 81d6 	bgt.w	27bf4 <_svfprintf_r+0x1584>
   27848:	f104 0208 	add.w	r2, r4, #8
   2784c:	e08d      	b.n	2796a <_svfprintf_r+0x12fa>
   2784e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27850:	9313      	str	r3, [sp, #76]	@ 0x4c
   27852:	aa2c      	add	r2, sp, #176	@ 0xb0
   27854:	4658      	mov	r0, fp
   27856:	f000 fca9 	bl	281ac <__ssprint_r>
   2785a:	2800      	cmp	r0, #0
   2785c:	f47f abac 	bne.w	26fb8 <_svfprintf_r+0x948>
   27860:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27864:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27866:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   27868:	ac2f      	add	r4, sp, #188	@ 0xbc
   2786a:	f7ff b846 	b.w	268fa <_svfprintf_r+0x28a>
   2786e:	2901      	cmp	r1, #1
   27870:	9d04      	ldr	r5, [sp, #16]
   27872:	f47f aaea 	bne.w	26e4a <_svfprintf_r+0x7da>
   27876:	e415      	b.n	270a4 <_svfprintf_r+0xa34>
   27878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   2787a:	3b01      	subs	r3, #1
   2787c:	f10a 3aff 	add.w	sl, sl, #4294967295
   27880:	930f      	str	r3, [sp, #60]	@ 0x3c
   27882:	e6c0      	b.n	27606 <_svfprintf_r+0xf96>
   27884:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27886:	aa2c      	add	r2, sp, #176	@ 0xb0
   27888:	4658      	mov	r0, fp
   2788a:	f000 fc8f 	bl	281ac <__ssprint_r>
   2788e:	2800      	cmp	r0, #0
   27890:	f47f ab92 	bne.w	26fb8 <_svfprintf_r+0x948>
   27894:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27896:	ac2f      	add	r4, sp, #188	@ 0xbc
   27898:	f7ff ba99 	b.w	26dce <_svfprintf_r+0x75e>
   2789c:	f10d 08a8 	add.w	r8, sp, #168	@ 0xa8
   278a0:	2208      	movs	r2, #8
   278a2:	2100      	movs	r1, #0
   278a4:	4640      	mov	r0, r8
   278a6:	9625      	str	r6, [sp, #148]	@ 0x94
   278a8:	f7fc fd72 	bl	24390 <memset>
   278ac:	9b05      	ldr	r3, [sp, #20]
   278ae:	2b00      	cmp	r3, #0
   278b0:	f2c0 8092 	blt.w	279d8 <_svfprintf_r+0x1368>
   278b4:	2500      	movs	r5, #0
   278b6:	9702      	str	r7, [sp, #8]
   278b8:	4699      	mov	r9, r3
   278ba:	462f      	mov	r7, r5
   278bc:	e00e      	b.n	278dc <_svfprintf_r+0x126c>
   278be:	a93f      	add	r1, sp, #252	@ 0xfc
   278c0:	4658      	mov	r0, fp
   278c2:	f7fe fea1 	bl	26608 <_wcrtomb_r>
   278c6:	1c43      	adds	r3, r0, #1
   278c8:	4438      	add	r0, r7
   278ca:	f000 838f 	beq.w	27fec <_svfprintf_r+0x197c>
   278ce:	4548      	cmp	r0, r9
   278d0:	dc09      	bgt.n	278e6 <_svfprintf_r+0x1276>
   278d2:	f105 0504 	add.w	r5, r5, #4
   278d6:	f000 83bd 	beq.w	28054 <_svfprintf_r+0x19e4>
   278da:	4607      	mov	r7, r0
   278dc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   278de:	5952      	ldr	r2, [r2, r5]
   278e0:	4643      	mov	r3, r8
   278e2:	2a00      	cmp	r2, #0
   278e4:	d1eb      	bne.n	278be <_svfprintf_r+0x124e>
   278e6:	9708      	str	r7, [sp, #32]
   278e8:	9f02      	ldr	r7, [sp, #8]
   278ea:	e083      	b.n	279f4 <_svfprintf_r+0x1384>
   278ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
   278ee:	aa2c      	add	r2, sp, #176	@ 0xb0
   278f0:	4658      	mov	r0, fp
   278f2:	f000 fc5b 	bl	281ac <__ssprint_r>
   278f6:	2800      	cmp	r0, #0
   278f8:	f47f ab5e 	bne.w	26fb8 <_svfprintf_r+0x948>
   278fc:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   278fe:	ac2f      	add	r4, sp, #188	@ 0xbc
   27900:	f7ff b81d 	b.w	2693e <_svfprintf_r+0x2ce>
   27904:	aa2c      	add	r2, sp, #176	@ 0xb0
   27906:	4629      	mov	r1, r5
   27908:	4658      	mov	r0, fp
   2790a:	f000 fc4f 	bl	281ac <__ssprint_r>
   2790e:	2800      	cmp	r0, #0
   27910:	f47f ab52 	bne.w	26fb8 <_svfprintf_r+0x948>
   27914:	f89a 0000 	ldrb.w	r0, [sl]
   27918:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   2791a:	aa2f      	add	r2, sp, #188	@ 0xbc
   2791c:	e695      	b.n	2764a <_svfprintf_r+0xfda>
   2791e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27920:	9a06      	ldr	r2, [sp, #24]
   27922:	681b      	ldr	r3, [r3, #0]
   27924:	601a      	str	r2, [r3, #0]
   27926:	f7ff b9c1 	b.w	26cac <_svfprintf_r+0x63c>
   2792a:	46d1      	mov	r9, sl
   2792c:	f8dd a014 	ldr.w	sl, [sp, #20]
   27930:	f8c8 9000 	str.w	r9, [r8]
   27934:	3701      	adds	r7, #1
   27936:	4425      	add	r5, r4
   27938:	2f07      	cmp	r7, #7
   2793a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   2793e:	f8c8 4004 	str.w	r4, [r8, #4]
   27942:	f77f ab98 	ble.w	27076 <_svfprintf_r+0xa06>
   27946:	e481      	b.n	2724c <_svfprintf_r+0xbdc>
   27948:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   2794a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   2794c:	441d      	add	r5, r3
   2794e:	e9c4 2300 	strd	r2, r3, [r4]
   27952:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27954:	952e      	str	r5, [sp, #184]	@ 0xb8
   27956:	3301      	adds	r3, #1
   27958:	2b07      	cmp	r3, #7
   2795a:	932d      	str	r3, [sp, #180]	@ 0xb4
   2795c:	f300 814a 	bgt.w	27bf4 <_svfprintf_r+0x1584>
   27960:	f104 0208 	add.w	r2, r4, #8
   27964:	2900      	cmp	r1, #0
   27966:	f2c0 82e0 	blt.w	27f2a <_svfprintf_r+0x18ba>
   2796a:	990e      	ldr	r1, [sp, #56]	@ 0x38
   2796c:	6016      	str	r6, [r2, #0]
   2796e:	3301      	adds	r3, #1
   27970:	440d      	add	r5, r1
   27972:	2b07      	cmp	r3, #7
   27974:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   27978:	6051      	str	r1, [r2, #4]
   2797a:	f73f ab34 	bgt.w	26fe6 <_svfprintf_r+0x976>
   2797e:	f102 0408 	add.w	r4, r2, #8
   27982:	f7fe bff2 	b.w	2696a <_svfprintf_r+0x2fa>
   27986:	9904      	ldr	r1, [sp, #16]
   27988:	920b      	str	r2, [sp, #44]	@ 0x2c
   2798a:	058d      	lsls	r5, r1, #22
   2798c:	bf4a      	itet	mi
   2798e:	f343 12c0 	sbfxmi	r2, r3, #7, #1
   27992:	17da      	asrpl	r2, r3, #31
   27994:	b25b      	sxtbmi	r3, r3
   27996:	4611      	mov	r1, r2
   27998:	f7ff b8f4 	b.w	26b84 <_svfprintf_r+0x514>
   2799c:	4615      	mov	r5, r2
   2799e:	4632      	mov	r2, r6
   279a0:	464e      	mov	r6, r9
   279a2:	4691      	mov	r9, r2
   279a4:	3301      	adds	r3, #1
   279a6:	443d      	add	r5, r7
   279a8:	2b07      	cmp	r3, #7
   279aa:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   279ae:	f8c4 9000 	str.w	r9, [r4]
   279b2:	6067      	str	r7, [r4, #4]
   279b4:	f300 8112 	bgt.w	27bdc <_svfprintf_r+0x156c>
   279b8:	3408      	adds	r4, #8
   279ba:	f7ff bbed 	b.w	27198 <_svfprintf_r+0xb28>
   279be:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   279c0:	9919      	ldr	r1, [sp, #100]	@ 0x64
   279c2:	1af6      	subs	r6, r6, r3
   279c4:	461a      	mov	r2, r3
   279c6:	4630      	mov	r0, r6
   279c8:	f7fc fd9a 	bl	24500 <strncpy>
   279cc:	7863      	ldrb	r3, [r4, #1]
   279ce:	b103      	cbz	r3, 279d2 <_svfprintf_r+0x1362>
   279d0:	3401      	adds	r4, #1
   279d2:	f04f 0c00 	mov.w	ip, #0
   279d6:	e6d6      	b.n	27786 <_svfprintf_r+0x1116>
   279d8:	2300      	movs	r3, #0
   279da:	4619      	mov	r1, r3
   279dc:	f8cd 8000 	str.w	r8, [sp]
   279e0:	aa25      	add	r2, sp, #148	@ 0x94
   279e2:	4658      	mov	r0, fp
   279e4:	f7fe fe36 	bl	26654 <_wcsrtombs_r>
   279e8:	4603      	mov	r3, r0
   279ea:	3301      	adds	r3, #1
   279ec:	9008      	str	r0, [sp, #32]
   279ee:	f000 82fd 	beq.w	27fec <_svfprintf_r+0x197c>
   279f2:	9625      	str	r6, [sp, #148]	@ 0x94
   279f4:	9b08      	ldr	r3, [sp, #32]
   279f6:	2b00      	cmp	r3, #0
   279f8:	d036      	beq.n	27a68 <_svfprintf_r+0x13f8>
   279fa:	2b63      	cmp	r3, #99	@ 0x63
   279fc:	f300 80e4 	bgt.w	27bc8 <_svfprintf_r+0x1558>
   27a00:	2300      	movs	r3, #0
   27a02:	930a      	str	r3, [sp, #40]	@ 0x28
   27a04:	ae3f      	add	r6, sp, #252	@ 0xfc
   27a06:	2208      	movs	r2, #8
   27a08:	2100      	movs	r1, #0
   27a0a:	4640      	mov	r0, r8
   27a0c:	f7fc fcc0 	bl	24390 <memset>
   27a10:	9d08      	ldr	r5, [sp, #32]
   27a12:	f8cd 8000 	str.w	r8, [sp]
   27a16:	462b      	mov	r3, r5
   27a18:	aa25      	add	r2, sp, #148	@ 0x94
   27a1a:	4631      	mov	r1, r6
   27a1c:	4658      	mov	r0, fp
   27a1e:	f7fe fe19 	bl	26654 <_wcsrtombs_r>
   27a22:	4285      	cmp	r5, r0
   27a24:	f040 83a5 	bne.w	28172 <_svfprintf_r+0x1b02>
   27a28:	9908      	ldr	r1, [sp, #32]
   27a2a:	970b      	str	r7, [sp, #44]	@ 0x2c
   27a2c:	2300      	movs	r3, #0
   27a2e:	5473      	strb	r3, [r6, r1]
   27a30:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   27a34:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27a38:	9305      	str	r3, [sp, #20]
   27a3a:	9102      	str	r1, [sp, #8]
   27a3c:	9312      	str	r3, [sp, #72]	@ 0x48
   27a3e:	930f      	str	r3, [sp, #60]	@ 0x3c
   27a40:	930d      	str	r3, [sp, #52]	@ 0x34
   27a42:	f7fe bff4 	b.w	26a2e <_svfprintf_r+0x3be>
   27a46:	222d      	movs	r2, #45	@ 0x2d
   27a48:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27a4c:	f7fe bfdc 	b.w	26a08 <_svfprintf_r+0x398>
   27a50:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27a52:	aa2c      	add	r2, sp, #176	@ 0xb0
   27a54:	4658      	mov	r0, fp
   27a56:	f000 fba9 	bl	281ac <__ssprint_r>
   27a5a:	2800      	cmp	r0, #0
   27a5c:	f47f aaac 	bne.w	26fb8 <_svfprintf_r+0x948>
   27a60:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   27a62:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27a64:	ac2f      	add	r4, sp, #188	@ 0xbc
   27a66:	e6d9      	b.n	2781c <_svfprintf_r+0x11ac>
   27a68:	9b08      	ldr	r3, [sp, #32]
   27a6a:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27a6e:	970b      	str	r7, [sp, #44]	@ 0x2c
   27a70:	9302      	str	r3, [sp, #8]
   27a72:	9305      	str	r3, [sp, #20]
   27a74:	9312      	str	r3, [sp, #72]	@ 0x48
   27a76:	930f      	str	r3, [sp, #60]	@ 0x3c
   27a78:	930d      	str	r3, [sp, #52]	@ 0x34
   27a7a:	930a      	str	r3, [sp, #40]	@ 0x28
   27a7c:	f7fe bfd7 	b.w	26a2e <_svfprintf_r+0x3be>
   27a80:	0002b900 	.word	0x0002b900
   27a84:	cccccccd 	.word	0xcccccccd
   27a88:	ab2a      	add	r3, sp, #168	@ 0xa8
   27a8a:	9301      	str	r3, [sp, #4]
   27a8c:	ab25      	add	r3, sp, #148	@ 0x94
   27a8e:	9300      	str	r3, [sp, #0]
   27a90:	2102      	movs	r1, #2
   27a92:	ab23      	add	r3, sp, #140	@ 0x8c
   27a94:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   27a98:	9a05      	ldr	r2, [sp, #20]
   27a9a:	4658      	mov	r0, fp
   27a9c:	f000 fe0c 	bl	286b8 <_dtoa_r>
   27aa0:	9b04      	ldr	r3, [sp, #16]
   27aa2:	07d9      	lsls	r1, r3, #31
   27aa4:	4606      	mov	r6, r0
   27aa6:	f100 81fc 	bmi.w	27ea2 <_svfprintf_r+0x1832>
   27aaa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   27aac:	1a1b      	subs	r3, r3, r0
   27aae:	930e      	str	r3, [sp, #56]	@ 0x38
   27ab0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   27ab2:	930d      	str	r3, [sp, #52]	@ 0x34
   27ab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27ab6:	1cda      	adds	r2, r3, #3
   27ab8:	db03      	blt.n	27ac2 <_svfprintf_r+0x1452>
   27aba:	9a05      	ldr	r2, [sp, #20]
   27abc:	429a      	cmp	r2, r3
   27abe:	f280 818b 	bge.w	27dd8 <_svfprintf_r+0x1768>
   27ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   27ac4:	3b02      	subs	r3, #2
   27ac6:	930c      	str	r3, [sp, #48]	@ 0x30
   27ac8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27aca:	3b01      	subs	r3, #1
   27acc:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
   27ad0:	9323      	str	r3, [sp, #140]	@ 0x8c
   27ad2:	2100      	movs	r1, #0
   27ad4:	2b00      	cmp	r3, #0
   27ad6:	bfb8      	it	lt
   27ad8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
   27ada:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
   27ade:	bfba      	itte	lt
   27ae0:	f1c3 0301 	rsblt	r3, r3, #1
   27ae4:	222d      	movlt	r2, #45	@ 0x2d
   27ae6:	222b      	movge	r2, #43	@ 0x2b
   27ae8:	2b09      	cmp	r3, #9
   27aea:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
   27aee:	f340 8265 	ble.w	27fbc <_svfprintf_r+0x194c>
   27af2:	f10d 05af 	add.w	r5, sp, #175	@ 0xaf
   27af6:	4fb3      	ldr	r7, [pc, #716]	@ (27dc4 <_svfprintf_r+0x1754>)
   27af8:	462a      	mov	r2, r5
   27afa:	4610      	mov	r0, r2
   27afc:	fba7 1203 	umull	r1, r2, r7, r3
   27b00:	08d2      	lsrs	r2, r2, #3
   27b02:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   27b06:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   27b0a:	3130      	adds	r1, #48	@ 0x30
   27b0c:	f800 1c01 	strb.w	r1, [r0, #-1]
   27b10:	4619      	mov	r1, r3
   27b12:	2963      	cmp	r1, #99	@ 0x63
   27b14:	4613      	mov	r3, r2
   27b16:	f100 32ff 	add.w	r2, r0, #4294967295
   27b1a:	dcee      	bgt.n	27afa <_svfprintf_r+0x148a>
   27b1c:	3330      	adds	r3, #48	@ 0x30
   27b1e:	f802 3c01 	strb.w	r3, [r2, #-1]
   27b22:	1e83      	subs	r3, r0, #2
   27b24:	42ab      	cmp	r3, r5
   27b26:	f080 8321 	bcs.w	2816c <_svfprintf_r+0x1afc>
   27b2a:	f10d 0299 	add.w	r2, sp, #153	@ 0x99
   27b2e:	f813 1b01 	ldrb.w	r1, [r3], #1
   27b32:	f802 1f01 	strb.w	r1, [r2, #1]!
   27b36:	42ab      	cmp	r3, r5
   27b38:	d1f9      	bne.n	27b2e <_svfprintf_r+0x14be>
   27b3a:	ab58      	add	r3, sp, #352	@ 0x160
   27b3c:	1a18      	subs	r0, r3, r0
   27b3e:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
   27b42:	9318      	str	r3, [sp, #96]	@ 0x60
   27b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   27b46:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   27b48:	2b01      	cmp	r3, #1
   27b4a:	441a      	add	r2, r3
   27b4c:	9208      	str	r2, [sp, #32]
   27b4e:	f340 8258 	ble.w	28002 <_svfprintf_r+0x1992>
   27b52:	9b08      	ldr	r3, [sp, #32]
   27b54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   27b56:	4413      	add	r3, r2
   27b58:	9308      	str	r3, [sp, #32]
   27b5a:	9b04      	ldr	r3, [sp, #16]
   27b5c:	9a08      	ldr	r2, [sp, #32]
   27b5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
   27b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   27b66:	9304      	str	r3, [sp, #16]
   27b68:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   27b6c:	2300      	movs	r3, #0
   27b6e:	9312      	str	r3, [sp, #72]	@ 0x48
   27b70:	9202      	str	r2, [sp, #8]
   27b72:	930f      	str	r3, [sp, #60]	@ 0x3c
   27b74:	930d      	str	r3, [sp, #52]	@ 0x34
   27b76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   27b78:	2b00      	cmp	r3, #0
   27b7a:	f040 811b 	bne.w	27db4 <_svfprintf_r+0x1744>
   27b7e:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27b82:	9305      	str	r3, [sp, #20]
   27b84:	f7fe bf53 	b.w	26a2e <_svfprintf_r+0x3be>
   27b88:	b2db      	uxtb	r3, r3
   27b8a:	462a      	mov	r2, r5
   27b8c:	910b      	str	r1, [sp, #44]	@ 0x2c
   27b8e:	e493      	b.n	274b8 <_svfprintf_r+0xe48>
   27b90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27b92:	9a06      	ldr	r2, [sp, #24]
   27b94:	681b      	ldr	r3, [r3, #0]
   27b96:	801a      	strh	r2, [r3, #0]
   27b98:	f7ff b888 	b.w	26cac <_svfprintf_r+0x63c>
   27b9c:	b2db      	uxtb	r3, r3
   27b9e:	462a      	mov	r2, r5
   27ba0:	910b      	str	r1, [sp, #44]	@ 0x2c
   27ba2:	f7ff b861 	b.w	26c68 <_svfprintf_r+0x5f8>
   27ba6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   27ba8:	aa2c      	add	r2, sp, #176	@ 0xb0
   27baa:	4621      	mov	r1, r4
   27bac:	4658      	mov	r0, fp
   27bae:	f000 fafd 	bl	281ac <__ssprint_r>
   27bb2:	89a3      	ldrh	r3, [r4, #12]
   27bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   27bb8:	f7fe be66 	b.w	26888 <_svfprintf_r+0x218>
   27bbc:	4630      	mov	r0, r6
   27bbe:	f7e5 f85f 	bl	cc80 <strlen>
   27bc2:	4601      	mov	r1, r0
   27bc4:	f7fe bfc0 	b.w	26b48 <_svfprintf_r+0x4d8>
   27bc8:	1c59      	adds	r1, r3, #1
   27bca:	4658      	mov	r0, fp
   27bcc:	f7fd fb5c 	bl	25288 <_malloc_r>
   27bd0:	4606      	mov	r6, r0
   27bd2:	2800      	cmp	r0, #0
   27bd4:	f000 82db 	beq.w	2818e <_svfprintf_r+0x1b1e>
   27bd8:	900a      	str	r0, [sp, #40]	@ 0x28
   27bda:	e714      	b.n	27a06 <_svfprintf_r+0x1396>
   27bdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27bde:	aa2c      	add	r2, sp, #176	@ 0xb0
   27be0:	4658      	mov	r0, fp
   27be2:	f000 fae3 	bl	281ac <__ssprint_r>
   27be6:	2800      	cmp	r0, #0
   27be8:	f47f a9e6 	bne.w	26fb8 <_svfprintf_r+0x948>
   27bec:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27bee:	ac2f      	add	r4, sp, #188	@ 0xbc
   27bf0:	f7ff bad2 	b.w	27198 <_svfprintf_r+0xb28>
   27bf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27bf6:	aa2c      	add	r2, sp, #176	@ 0xb0
   27bf8:	4658      	mov	r0, fp
   27bfa:	f000 fad7 	bl	281ac <__ssprint_r>
   27bfe:	2800      	cmp	r0, #0
   27c00:	f47f a9da 	bne.w	26fb8 <_svfprintf_r+0x948>
   27c04:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   27c08:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   27c0a:	aa2f      	add	r2, sp, #188	@ 0xbc
   27c0c:	e6aa      	b.n	27964 <_svfprintf_r+0x12f4>
   27c0e:	2306      	movs	r3, #6
   27c10:	900a      	str	r0, [sp, #40]	@ 0x28
   27c12:	9305      	str	r3, [sp, #20]
   27c14:	e400      	b.n	27418 <_svfprintf_r+0xda8>
   27c16:	9b05      	ldr	r3, [sp, #20]
   27c18:	2102      	movs	r1, #2
   27c1a:	f103 0801 	add.w	r8, r3, #1
   27c1e:	ab2a      	add	r3, sp, #168	@ 0xa8
   27c20:	9301      	str	r3, [sp, #4]
   27c22:	ab25      	add	r3, sp, #148	@ 0x94
   27c24:	9300      	str	r3, [sp, #0]
   27c26:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   27c2a:	ab23      	add	r3, sp, #140	@ 0x8c
   27c2c:	4642      	mov	r2, r8
   27c2e:	4658      	mov	r0, fp
   27c30:	f000 fd42 	bl	286b8 <_dtoa_r>
   27c34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   27c36:	f023 0720 	bic.w	r7, r3, #32
   27c3a:	2f46      	cmp	r7, #70	@ 0x46
   27c3c:	4606      	mov	r6, r0
   27c3e:	eb00 0508 	add.w	r5, r0, r8
   27c42:	bf18      	it	ne
   27c44:	2745      	movne	r7, #69	@ 0x45
   27c46:	d105      	bne.n	27c54 <_svfprintf_r+0x15e4>
   27c48:	7833      	ldrb	r3, [r6, #0]
   27c4a:	2b30      	cmp	r3, #48	@ 0x30
   27c4c:	f000 813c 	beq.w	27ec8 <_svfprintf_r+0x1858>
   27c50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   27c52:	441d      	add	r5, r3
   27c54:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
   27c58:	2200      	movs	r2, #0
   27c5a:	2300      	movs	r3, #0
   27c5c:	f7e4 fe74 	bl	c948 <__aeabi_dcmpeq>
   27c60:	2800      	cmp	r0, #0
   27c62:	f040 8159 	bne.w	27f18 <_svfprintf_r+0x18a8>
   27c66:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   27c68:	42ab      	cmp	r3, r5
   27c6a:	d206      	bcs.n	27c7a <_svfprintf_r+0x160a>
   27c6c:	2130      	movs	r1, #48	@ 0x30
   27c6e:	1c5a      	adds	r2, r3, #1
   27c70:	922a      	str	r2, [sp, #168]	@ 0xa8
   27c72:	7019      	strb	r1, [r3, #0]
   27c74:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   27c76:	429d      	cmp	r5, r3
   27c78:	d8f9      	bhi.n	27c6e <_svfprintf_r+0x15fe>
   27c7a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   27c7c:	920d      	str	r2, [sp, #52]	@ 0x34
   27c7e:	1b9b      	subs	r3, r3, r6
   27c80:	2f47      	cmp	r7, #71	@ 0x47
   27c82:	930e      	str	r3, [sp, #56]	@ 0x38
   27c84:	f43f af16 	beq.w	27ab4 <_svfprintf_r+0x1444>
   27c88:	2f46      	cmp	r7, #70	@ 0x46
   27c8a:	f000 812b 	beq.w	27ee4 <_svfprintf_r+0x1874>
   27c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27c90:	3b01      	subs	r3, #1
   27c92:	e71b      	b.n	27acc <_svfprintf_r+0x145c>
   27c94:	a823      	add	r0, sp, #140	@ 0x8c
   27c96:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   27c9a:	f000 fc0d 	bl	284b8 <frexp>
   27c9e:	2200      	movs	r2, #0
   27ca0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
   27ca4:	ec51 0b10 	vmov	r0, r1, d0
   27ca8:	f7e4 fbe6 	bl	c478 <__aeabi_dmul>
   27cac:	4602      	mov	r2, r0
   27cae:	460b      	mov	r3, r1
   27cb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   27cb4:	2200      	movs	r2, #0
   27cb6:	2300      	movs	r3, #0
   27cb8:	f7e4 fe46 	bl	c948 <__aeabi_dcmpeq>
   27cbc:	b108      	cbz	r0, 27cc2 <_svfprintf_r+0x1652>
   27cbe:	2301      	movs	r3, #1
   27cc0:	9323      	str	r3, [sp, #140]	@ 0x8c
   27cc2:	9b05      	ldr	r3, [sp, #20]
   27cc4:	4a40      	ldr	r2, [pc, #256]	@ (27dc8 <_svfprintf_r+0x1758>)
   27cc6:	980c      	ldr	r0, [sp, #48]	@ 0x30
   27cc8:	f8cd a020 	str.w	sl, [sp, #32]
   27ccc:	1e59      	subs	r1, r3, #1
   27cce:	4b3f      	ldr	r3, [pc, #252]	@ (27dcc <_svfprintf_r+0x175c>)
   27cd0:	960d      	str	r6, [sp, #52]	@ 0x34
   27cd2:	2861      	cmp	r0, #97	@ 0x61
   27cd4:	bf08      	it	eq
   27cd6:	461a      	moveq	r2, r3
   27cd8:	4637      	mov	r7, r6
   27cda:	46a0      	mov	r8, r4
   27cdc:	9205      	str	r2, [sp, #20]
   27cde:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   27ce2:	468a      	mov	sl, r1
   27ce4:	4616      	mov	r6, r2
   27ce6:	e009      	b.n	27cfc <_svfprintf_r+0x168c>
   27ce8:	2200      	movs	r2, #0
   27cea:	2300      	movs	r3, #0
   27cec:	f10a 39ff 	add.w	r9, sl, #4294967295
   27cf0:	f7e4 fe2a 	bl	c948 <__aeabi_dcmpeq>
   27cf4:	2800      	cmp	r0, #0
   27cf6:	f040 81bb 	bne.w	28070 <_svfprintf_r+0x1a00>
   27cfa:	46ca      	mov	sl, r9
   27cfc:	4b34      	ldr	r3, [pc, #208]	@ (27dd0 <_svfprintf_r+0x1760>)
   27cfe:	2200      	movs	r2, #0
   27d00:	4620      	mov	r0, r4
   27d02:	4629      	mov	r1, r5
   27d04:	f7e4 fbb8 	bl	c478 <__aeabi_dmul>
   27d08:	460d      	mov	r5, r1
   27d0a:	4604      	mov	r4, r0
   27d0c:	f7e5 f83a 	bl	cd84 <__aeabi_d2iz>
   27d10:	4681      	mov	r9, r0
   27d12:	f7e4 fb47 	bl	c3a4 <__aeabi_i2d>
   27d16:	4602      	mov	r2, r0
   27d18:	460b      	mov	r3, r1
   27d1a:	4620      	mov	r0, r4
   27d1c:	4629      	mov	r1, r5
   27d1e:	f7e4 f9f3 	bl	c108 <__aeabi_dsub>
   27d22:	f816 3009 	ldrb.w	r3, [r6, r9]
   27d26:	f1ba 3fff 	cmp.w	sl, #4294967295
   27d2a:	463a      	mov	r2, r7
   27d2c:	4604      	mov	r4, r0
   27d2e:	f807 3b01 	strb.w	r3, [r7], #1
   27d32:	460d      	mov	r5, r1
   27d34:	d1d8      	bne.n	27ce8 <_svfprintf_r+0x1678>
   27d36:	e9cd 4502 	strd	r4, r5, [sp, #8]
   27d3a:	4b26      	ldr	r3, [pc, #152]	@ (27dd4 <_svfprintf_r+0x1764>)
   27d3c:	f8dd a020 	ldr.w	sl, [sp, #32]
   27d40:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   27d42:	4644      	mov	r4, r8
   27d44:	4690      	mov	r8, r2
   27d46:	2200      	movs	r2, #0
   27d48:	464d      	mov	r5, r9
   27d4a:	f7e4 fe25 	bl	c998 <__aeabi_dcmpgt>
   27d4e:	2800      	cmp	r0, #0
   27d50:	f000 81ff 	beq.w	28152 <_svfprintf_r+0x1ae2>
   27d54:	9b05      	ldr	r3, [sp, #20]
   27d56:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   27d5a:	7bd9      	ldrb	r1, [r3, #15]
   27d5c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   27d60:	4291      	cmp	r1, r2
   27d62:	463b      	mov	r3, r7
   27d64:	d109      	bne.n	27d7a <_svfprintf_r+0x170a>
   27d66:	2030      	movs	r0, #48	@ 0x30
   27d68:	f803 0c01 	strb.w	r0, [r3, #-1]
   27d6c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   27d6e:	1e5a      	subs	r2, r3, #1
   27d70:	922a      	str	r2, [sp, #168]	@ 0xa8
   27d72:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   27d76:	4291      	cmp	r1, r2
   27d78:	d0f6      	beq.n	27d68 <_svfprintf_r+0x16f8>
   27d7a:	2a39      	cmp	r2, #57	@ 0x39
   27d7c:	bf0b      	itete	eq
   27d7e:	9a05      	ldreq	r2, [sp, #20]
   27d80:	3201      	addne	r2, #1
   27d82:	7a92      	ldrbeq	r2, [r2, #10]
   27d84:	b2d2      	uxtbne	r2, r2
   27d86:	f803 2c01 	strb.w	r2, [r3, #-1]
   27d8a:	463b      	mov	r3, r7
   27d8c:	1b9b      	subs	r3, r3, r6
   27d8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   27d90:	930e      	str	r3, [sp, #56]	@ 0x38
   27d92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   27d94:	930d      	str	r3, [sp, #52]	@ 0x34
   27d96:	2a61      	cmp	r2, #97	@ 0x61
   27d98:	f103 33ff 	add.w	r3, r3, #4294967295
   27d9c:	9323      	str	r3, [sp, #140]	@ 0x8c
   27d9e:	f000 81b3 	beq.w	28108 <_svfprintf_r+0x1a98>
   27da2:	2141      	movs	r1, #65	@ 0x41
   27da4:	2250      	movs	r2, #80	@ 0x50
   27da6:	910c      	str	r1, [sp, #48]	@ 0x30
   27da8:	2101      	movs	r1, #1
   27daa:	e693      	b.n	27ad4 <_svfprintf_r+0x1464>
   27dac:	f8dd 8014 	ldr.w	r8, [sp, #20]
   27db0:	2103      	movs	r1, #3
   27db2:	e734      	b.n	27c1e <_svfprintf_r+0x15ae>
   27db4:	222d      	movs	r2, #45	@ 0x2d
   27db6:	2300      	movs	r3, #0
   27db8:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27dbc:	9305      	str	r3, [sp, #20]
   27dbe:	f7fe be39 	b.w	26a34 <_svfprintf_r+0x3c4>
   27dc2:	bf00      	nop
   27dc4:	cccccccd 	.word	0xcccccccd
   27dc8:	00030980 	.word	0x00030980
   27dcc:	00030994 	.word	0x00030994
   27dd0:	40300000 	.word	0x40300000
   27dd4:	3fe00000 	.word	0x3fe00000
   27dd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
   27ddc:	4293      	cmp	r3, r2
   27dde:	f300 80c4 	bgt.w	27f6a <_svfprintf_r+0x18fa>
   27de2:	9b04      	ldr	r3, [sp, #16]
   27de4:	f013 0f01 	tst.w	r3, #1
   27de8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27dea:	f000 810f 	beq.w	2800c <_svfprintf_r+0x199c>
   27dee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   27df0:	4413      	add	r3, r2
   27df2:	9308      	str	r3, [sp, #32]
   27df4:	9b04      	ldr	r3, [sp, #16]
   27df6:	055f      	lsls	r7, r3, #21
   27df8:	d503      	bpl.n	27e02 <_svfprintf_r+0x1792>
   27dfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27dfc:	2b00      	cmp	r3, #0
   27dfe:	f300 8147 	bgt.w	28090 <_svfprintf_r+0x1a20>
   27e02:	9b08      	ldr	r3, [sp, #32]
   27e04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27e08:	9302      	str	r3, [sp, #8]
   27e0a:	2367      	movs	r3, #103	@ 0x67
   27e0c:	930c      	str	r3, [sp, #48]	@ 0x30
   27e0e:	2300      	movs	r3, #0
   27e10:	f8cd 9010 	str.w	r9, [sp, #16]
   27e14:	9312      	str	r3, [sp, #72]	@ 0x48
   27e16:	930f      	str	r3, [sp, #60]	@ 0x3c
   27e18:	e6ad      	b.n	27b76 <_svfprintf_r+0x1506>
   27e1a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
   27e1e:	931f      	str	r3, [sp, #124]	@ 0x7c
   27e20:	232d      	movs	r3, #45	@ 0x2d
   27e22:	901e      	str	r0, [sp, #120]	@ 0x78
   27e24:	9313      	str	r3, [sp, #76]	@ 0x4c
   27e26:	f7ff bb05 	b.w	27434 <_svfprintf_r+0xdc4>
   27e2a:	aa2c      	add	r2, sp, #176	@ 0xb0
   27e2c:	4629      	mov	r1, r5
   27e2e:	4658      	mov	r0, fp
   27e30:	f000 f9bc 	bl	281ac <__ssprint_r>
   27e34:	2800      	cmp	r0, #0
   27e36:	f47f a8bf 	bne.w	26fb8 <_svfprintf_r+0x948>
   27e3a:	f89a 0000 	ldrb.w	r0, [sl]
   27e3e:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   27e40:	aa2f      	add	r2, sp, #188	@ 0xbc
   27e42:	4404      	add	r4, r0
   27e44:	e408      	b.n	27658 <_svfprintf_r+0xfe8>
   27e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27e48:	aa2c      	add	r2, sp, #176	@ 0xb0
   27e4a:	4658      	mov	r0, fp
   27e4c:	f000 f9ae 	bl	281ac <__ssprint_r>
   27e50:	2800      	cmp	r0, #0
   27e52:	f47f a8b1 	bne.w	26fb8 <_svfprintf_r+0x948>
   27e56:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27e58:	ac2f      	add	r4, sp, #188	@ 0xbc
   27e5a:	f7ff b994 	b.w	27186 <_svfprintf_r+0xb16>
   27e5e:	2378      	movs	r3, #120	@ 0x78
   27e60:	f88d 3089 	strb.w	r3, [sp, #137]	@ 0x89
   27e64:	9b04      	ldr	r3, [sp, #16]
   27e66:	f043 0302 	orr.w	r3, r3, #2
   27e6a:	9304      	str	r3, [sp, #16]
   27e6c:	2330      	movs	r3, #48	@ 0x30
   27e6e:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
   27e72:	9b05      	ldr	r3, [sp, #20]
   27e74:	2b63      	cmp	r3, #99	@ 0x63
   27e76:	f300 808e 	bgt.w	27f96 <_svfprintf_r+0x1926>
   27e7a:	2300      	movs	r3, #0
   27e7c:	930a      	str	r3, [sp, #40]	@ 0x28
   27e7e:	ae3f      	add	r6, sp, #252	@ 0xfc
   27e80:	f7ff baca 	b.w	27418 <_svfprintf_r+0xda8>
   27e84:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27e86:	aa2c      	add	r2, sp, #176	@ 0xb0
   27e88:	4658      	mov	r0, fp
   27e8a:	f000 f98f 	bl	281ac <__ssprint_r>
   27e8e:	2800      	cmp	r0, #0
   27e90:	f47f a892 	bne.w	26fb8 <_svfprintf_r+0x948>
   27e94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   27e96:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27e98:	ac2f      	add	r4, sp, #188	@ 0xbc
   27e9a:	f7ff b98d 	b.w	271b8 <_svfprintf_r+0xb48>
   27e9e:	2358      	movs	r3, #88	@ 0x58
   27ea0:	e7de      	b.n	27e60 <_svfprintf_r+0x17f0>
   27ea2:	9b05      	ldr	r3, [sp, #20]
   27ea4:	2747      	movs	r7, #71	@ 0x47
   27ea6:	18c5      	adds	r5, r0, r3
   27ea8:	e6d4      	b.n	27c54 <_svfprintf_r+0x15e4>
   27eaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27eac:	aa2c      	add	r2, sp, #176	@ 0xb0
   27eae:	4658      	mov	r0, fp
   27eb0:	f000 f97c 	bl	281ac <__ssprint_r>
   27eb4:	2800      	cmp	r0, #0
   27eb6:	f47f a87f 	bne.w	26fb8 <_svfprintf_r+0x948>
   27eba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
   27ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   27ebe:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27ec0:	1b9e      	subs	r6, r3, r6
   27ec2:	ac2f      	add	r4, sp, #188	@ 0xbc
   27ec4:	f7ff b98d 	b.w	271e2 <_svfprintf_r+0xb72>
   27ec8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
   27ecc:	2200      	movs	r2, #0
   27ece:	2300      	movs	r3, #0
   27ed0:	f7e4 fd3a 	bl	c948 <__aeabi_dcmpeq>
   27ed4:	2800      	cmp	r0, #0
   27ed6:	f000 8119 	beq.w	2810c <_svfprintf_r+0x1a9c>
   27eda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   27edc:	930d      	str	r3, [sp, #52]	@ 0x34
   27ede:	441d      	add	r5, r3
   27ee0:	1bab      	subs	r3, r5, r6
   27ee2:	930e      	str	r3, [sp, #56]	@ 0x38
   27ee4:	9b04      	ldr	r3, [sp, #16]
   27ee6:	990d      	ldr	r1, [sp, #52]	@ 0x34
   27ee8:	9a05      	ldr	r2, [sp, #20]
   27eea:	f003 0301 	and.w	r3, r3, #1
   27eee:	2900      	cmp	r1, #0
   27ef0:	ea43 0302 	orr.w	r3, r3, r2
   27ef4:	f340 811a 	ble.w	2812c <_svfprintf_r+0x1abc>
   27ef8:	2b00      	cmp	r3, #0
   27efa:	f040 80f2 	bne.w	280e2 <_svfprintf_r+0x1a72>
   27efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27f00:	9308      	str	r3, [sp, #32]
   27f02:	2366      	movs	r3, #102	@ 0x66
   27f04:	930c      	str	r3, [sp, #48]	@ 0x30
   27f06:	9b04      	ldr	r3, [sp, #16]
   27f08:	055b      	lsls	r3, r3, #21
   27f0a:	f100 80c3 	bmi.w	28094 <_svfprintf_r+0x1a24>
   27f0e:	9b08      	ldr	r3, [sp, #32]
   27f10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27f14:	9302      	str	r3, [sp, #8]
   27f16:	e77a      	b.n	27e0e <_svfprintf_r+0x179e>
   27f18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   27f1a:	920d      	str	r2, [sp, #52]	@ 0x34
   27f1c:	462b      	mov	r3, r5
   27f1e:	e6ae      	b.n	27c7e <_svfprintf_r+0x160e>
   27f20:	2200      	movs	r2, #0
   27f22:	4682      	mov	sl, r0
   27f24:	9205      	str	r2, [sp, #20]
   27f26:	f7fe bbfd 	b.w	26724 <_svfprintf_r+0xb4>
   27f2a:	424f      	negs	r7, r1
   27f2c:	3110      	adds	r1, #16
   27f2e:	f8df 9278 	ldr.w	r9, [pc, #632]	@ 281a8 <_svfprintf_r+0x1b38>
   27f32:	bfb8      	it	lt
   27f34:	2410      	movlt	r4, #16
   27f36:	db04      	blt.n	27f42 <_svfprintf_r+0x18d2>
   27f38:	e021      	b.n	27f7e <_svfprintf_r+0x190e>
   27f3a:	3208      	adds	r2, #8
   27f3c:	3f10      	subs	r7, #16
   27f3e:	2f10      	cmp	r7, #16
   27f40:	dd1d      	ble.n	27f7e <_svfprintf_r+0x190e>
   27f42:	3301      	adds	r3, #1
   27f44:	3510      	adds	r5, #16
   27f46:	2b07      	cmp	r3, #7
   27f48:	e9c2 9400 	strd	r9, r4, [r2]
   27f4c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   27f50:	ddf3      	ble.n	27f3a <_svfprintf_r+0x18ca>
   27f52:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27f54:	aa2c      	add	r2, sp, #176	@ 0xb0
   27f56:	4658      	mov	r0, fp
   27f58:	f000 f928 	bl	281ac <__ssprint_r>
   27f5c:	2800      	cmp	r0, #0
   27f5e:	f47f a82b 	bne.w	26fb8 <_svfprintf_r+0x948>
   27f62:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   27f66:	aa2f      	add	r2, sp, #188	@ 0xbc
   27f68:	e7e8      	b.n	27f3c <_svfprintf_r+0x18cc>
   27f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   27f6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   27f6e:	189a      	adds	r2, r3, r2
   27f70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27f72:	9208      	str	r2, [sp, #32]
   27f74:	2b00      	cmp	r3, #0
   27f76:	dd71      	ble.n	2805c <_svfprintf_r+0x19ec>
   27f78:	2367      	movs	r3, #103	@ 0x67
   27f7a:	930c      	str	r3, [sp, #48]	@ 0x30
   27f7c:	e7c3      	b.n	27f06 <_svfprintf_r+0x1896>
   27f7e:	3301      	adds	r3, #1
   27f80:	443d      	add	r5, r7
   27f82:	2b07      	cmp	r3, #7
   27f84:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   27f88:	f8c2 9000 	str.w	r9, [r2]
   27f8c:	6057      	str	r7, [r2, #4]
   27f8e:	f300 80af 	bgt.w	280f0 <_svfprintf_r+0x1a80>
   27f92:	3208      	adds	r2, #8
   27f94:	e4e9      	b.n	2796a <_svfprintf_r+0x12fa>
   27f96:	1c59      	adds	r1, r3, #1
   27f98:	4658      	mov	r0, fp
   27f9a:	f7fd f975 	bl	25288 <_malloc_r>
   27f9e:	4606      	mov	r6, r0
   27fa0:	b110      	cbz	r0, 27fa8 <_svfprintf_r+0x1938>
   27fa2:	900a      	str	r0, [sp, #40]	@ 0x28
   27fa4:	f7ff ba38 	b.w	27418 <_svfprintf_r+0xda8>
   27fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   27faa:	8993      	ldrh	r3, [r2, #12]
   27fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   27fb0:	8193      	strh	r3, [r2, #12]
   27fb2:	f04f 33ff 	mov.w	r3, #4294967295
   27fb6:	9306      	str	r3, [sp, #24]
   27fb8:	f7fe bc69 	b.w	2688e <_svfprintf_r+0x21e>
   27fbc:	2900      	cmp	r1, #0
   27fbe:	d134      	bne.n	2802a <_svfprintf_r+0x19ba>
   27fc0:	2230      	movs	r2, #48	@ 0x30
   27fc2:	f88d 209a 	strb.w	r2, [sp, #154]	@ 0x9a
   27fc6:	f10d 029b 	add.w	r2, sp, #155	@ 0x9b
   27fca:	3330      	adds	r3, #48	@ 0x30
   27fcc:	f802 3b01 	strb.w	r3, [r2], #1
   27fd0:	ab26      	add	r3, sp, #152	@ 0x98
   27fd2:	1ad3      	subs	r3, r2, r3
   27fd4:	9318      	str	r3, [sp, #96]	@ 0x60
   27fd6:	e5b5      	b.n	27b44 <_svfprintf_r+0x14d4>
   27fd8:	9b05      	ldr	r3, [sp, #20]
   27fda:	2b00      	cmp	r3, #0
   27fdc:	f47f aa1b 	bne.w	27416 <_svfprintf_r+0xda6>
   27fe0:	9b05      	ldr	r3, [sp, #20]
   27fe2:	930a      	str	r3, [sp, #40]	@ 0x28
   27fe4:	2301      	movs	r3, #1
   27fe6:	9305      	str	r3, [sp, #20]
   27fe8:	f7ff ba16 	b.w	27418 <_svfprintf_r+0xda8>
   27fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   27fee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   27ff2:	2200      	movs	r2, #0
   27ff4:	920a      	str	r2, [sp, #40]	@ 0x28
   27ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   27ffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   27ffc:	8193      	strh	r3, [r2, #12]
   27ffe:	f7fe bfdb 	b.w	26fb8 <_svfprintf_r+0x948>
   28002:	9b04      	ldr	r3, [sp, #16]
   28004:	07db      	lsls	r3, r3, #31
   28006:	f57f ada8 	bpl.w	27b5a <_svfprintf_r+0x14ea>
   2800a:	e5a2      	b.n	27b52 <_svfprintf_r+0x14e2>
   2800c:	9308      	str	r3, [sp, #32]
   2800e:	e6f1      	b.n	27df4 <_svfprintf_r+0x1784>
   28010:	9b05      	ldr	r3, [sp, #20]
   28012:	9302      	str	r3, [sp, #8]
   28014:	9308      	str	r3, [sp, #32]
   28016:	2373      	movs	r3, #115	@ 0x73
   28018:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   2801c:	970b      	str	r7, [sp, #44]	@ 0x2c
   2801e:	9005      	str	r0, [sp, #20]
   28020:	9012      	str	r0, [sp, #72]	@ 0x48
   28022:	900f      	str	r0, [sp, #60]	@ 0x3c
   28024:	930c      	str	r3, [sp, #48]	@ 0x30
   28026:	f7fe bd02 	b.w	26a2e <_svfprintf_r+0x3be>
   2802a:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
   2802e:	e7cc      	b.n	27fca <_svfprintf_r+0x195a>
   28030:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   28032:	4e5a      	ldr	r6, [pc, #360]	@ (2819c <_svfprintf_r+0x1b2c>)
   28034:	2b00      	cmp	r3, #0
   28036:	9b04      	ldr	r3, [sp, #16]
   28038:	bfa8      	it	ge
   2803a:	f89d 2087 	ldrbge.w	r2, [sp, #135]	@ 0x87
   2803e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   28042:	bfb8      	it	lt
   28044:	222d      	movlt	r2, #45	@ 0x2d
   28046:	9304      	str	r3, [sp, #16]
   28048:	bfb8      	it	lt
   2804a:	f88d 2087 	strblt.w	r2, [sp, #135]	@ 0x87
   2804e:	4b54      	ldr	r3, [pc, #336]	@ (281a0 <_svfprintf_r+0x1b30>)
   28050:	f7fe bce0 	b.w	26a14 <_svfprintf_r+0x3a4>
   28054:	9b05      	ldr	r3, [sp, #20]
   28056:	9f02      	ldr	r7, [sp, #8]
   28058:	9308      	str	r3, [sp, #32]
   2805a:	e4cb      	b.n	279f4 <_svfprintf_r+0x1384>
   2805c:	f1c3 0301 	rsb	r3, r3, #1
   28060:	441a      	add	r2, r3
   28062:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   28066:	9302      	str	r3, [sp, #8]
   28068:	2367      	movs	r3, #103	@ 0x67
   2806a:	9208      	str	r2, [sp, #32]
   2806c:	930c      	str	r3, [sp, #48]	@ 0x30
   2806e:	e6ce      	b.n	27e0e <_svfprintf_r+0x179e>
   28070:	4651      	mov	r1, sl
   28072:	2900      	cmp	r1, #0
   28074:	f8dd a020 	ldr.w	sl, [sp, #32]
   28078:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   2807a:	4644      	mov	r4, r8
   2807c:	f6ff ae85 	blt.w	27d8a <_svfprintf_r+0x171a>
   28080:	1c4b      	adds	r3, r1, #1
   28082:	443b      	add	r3, r7
   28084:	2230      	movs	r2, #48	@ 0x30
   28086:	f807 2b01 	strb.w	r2, [r7], #1
   2808a:	429f      	cmp	r7, r3
   2808c:	d1fb      	bne.n	28086 <_svfprintf_r+0x1a16>
   2808e:	e67d      	b.n	27d8c <_svfprintf_r+0x171c>
   28090:	2367      	movs	r3, #103	@ 0x67
   28092:	930c      	str	r3, [sp, #48]	@ 0x30
   28094:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   28096:	780b      	ldrb	r3, [r1, #0]
   28098:	2bff      	cmp	r3, #255	@ 0xff
   2809a:	d074      	beq.n	28186 <_svfprintf_r+0x1b16>
   2809c:	2500      	movs	r5, #0
   2809e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   280a0:	4628      	mov	r0, r5
   280a2:	e003      	b.n	280ac <_svfprintf_r+0x1a3c>
   280a4:	3001      	adds	r0, #1
   280a6:	3101      	adds	r1, #1
   280a8:	2bff      	cmp	r3, #255	@ 0xff
   280aa:	d008      	beq.n	280be <_svfprintf_r+0x1a4e>
   280ac:	4293      	cmp	r3, r2
   280ae:	da06      	bge.n	280be <_svfprintf_r+0x1a4e>
   280b0:	1ad2      	subs	r2, r2, r3
   280b2:	784b      	ldrb	r3, [r1, #1]
   280b4:	2b00      	cmp	r3, #0
   280b6:	d1f5      	bne.n	280a4 <_svfprintf_r+0x1a34>
   280b8:	780b      	ldrb	r3, [r1, #0]
   280ba:	3501      	adds	r5, #1
   280bc:	e7f4      	b.n	280a8 <_svfprintf_r+0x1a38>
   280be:	9117      	str	r1, [sp, #92]	@ 0x5c
   280c0:	920d      	str	r2, [sp, #52]	@ 0x34
   280c2:	900f      	str	r0, [sp, #60]	@ 0x3c
   280c4:	9512      	str	r5, [sp, #72]	@ 0x48
   280c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   280c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   280ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
   280cc:	f8cd 9010 	str.w	r9, [sp, #16]
   280d0:	4413      	add	r3, r2
   280d2:	9a08      	ldr	r2, [sp, #32]
   280d4:	fb01 2303 	mla	r3, r1, r3, r2
   280d8:	9308      	str	r3, [sp, #32]
   280da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   280de:	9302      	str	r3, [sp, #8]
   280e0:	e549      	b.n	27b76 <_svfprintf_r+0x1506>
   280e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   280e4:	441a      	add	r2, r3
   280e6:	1853      	adds	r3, r2, r1
   280e8:	9308      	str	r3, [sp, #32]
   280ea:	2366      	movs	r3, #102	@ 0x66
   280ec:	930c      	str	r3, [sp, #48]	@ 0x30
   280ee:	e70a      	b.n	27f06 <_svfprintf_r+0x1896>
   280f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
   280f2:	aa2c      	add	r2, sp, #176	@ 0xb0
   280f4:	4658      	mov	r0, fp
   280f6:	f000 f859 	bl	281ac <__ssprint_r>
   280fa:	2800      	cmp	r0, #0
   280fc:	f47e af5c 	bne.w	26fb8 <_svfprintf_r+0x948>
   28100:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   28104:	aa2f      	add	r2, sp, #188	@ 0xbc
   28106:	e430      	b.n	2796a <_svfprintf_r+0x12fa>
   28108:	2270      	movs	r2, #112	@ 0x70
   2810a:	e64d      	b.n	27da8 <_svfprintf_r+0x1738>
   2810c:	f1c8 0301 	rsb	r3, r8, #1
   28110:	9323      	str	r3, [sp, #140]	@ 0x8c
   28112:	e59e      	b.n	27c52 <_svfprintf_r+0x15e2>
   28114:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   28116:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2811a:	f852 1b04 	ldr.w	r1, [r2], #4
   2811e:	920b      	str	r2, [sp, #44]	@ 0x2c
   28120:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   28124:	4682      	mov	sl, r0
   28126:	9105      	str	r1, [sp, #20]
   28128:	f7fe bafa 	b.w	26720 <_svfprintf_r+0xb0>
   2812c:	b92b      	cbnz	r3, 2813a <_svfprintf_r+0x1aca>
   2812e:	2301      	movs	r3, #1
   28130:	2266      	movs	r2, #102	@ 0x66
   28132:	9302      	str	r3, [sp, #8]
   28134:	920c      	str	r2, [sp, #48]	@ 0x30
   28136:	9308      	str	r3, [sp, #32]
   28138:	e669      	b.n	27e0e <_svfprintf_r+0x179e>
   2813a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   2813c:	f103 0801 	add.w	r8, r3, #1
   28140:	9b05      	ldr	r3, [sp, #20]
   28142:	4443      	add	r3, r8
   28144:	9308      	str	r3, [sp, #32]
   28146:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2814a:	9302      	str	r3, [sp, #8]
   2814c:	2366      	movs	r3, #102	@ 0x66
   2814e:	930c      	str	r3, [sp, #48]	@ 0x30
   28150:	e65d      	b.n	27e0e <_svfprintf_r+0x179e>
   28152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   28156:	4b13      	ldr	r3, [pc, #76]	@ (281a4 <_svfprintf_r+0x1b34>)
   28158:	2200      	movs	r2, #0
   2815a:	f7e4 fbf5 	bl	c948 <__aeabi_dcmpeq>
   2815e:	2800      	cmp	r0, #0
   28160:	f43f ae13 	beq.w	27d8a <_svfprintf_r+0x171a>
   28164:	07e8      	lsls	r0, r5, #31
   28166:	f57f ae10 	bpl.w	27d8a <_svfprintf_r+0x171a>
   2816a:	e5f3      	b.n	27d54 <_svfprintf_r+0x16e4>
   2816c:	2302      	movs	r3, #2
   2816e:	9318      	str	r3, [sp, #96]	@ 0x60
   28170:	e4e8      	b.n	27b44 <_svfprintf_r+0x14d4>
   28172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28174:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   28178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2817c:	e73d      	b.n	27ffa <_svfprintf_r+0x198a>
   2817e:	230c      	movs	r3, #12
   28180:	f8cb 3000 	str.w	r3, [fp]
   28184:	e715      	b.n	27fb2 <_svfprintf_r+0x1942>
   28186:	2300      	movs	r3, #0
   28188:	9312      	str	r3, [sp, #72]	@ 0x48
   2818a:	930f      	str	r3, [sp, #60]	@ 0x3c
   2818c:	e79b      	b.n	280c6 <_svfprintf_r+0x1a56>
   2818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28190:	900a      	str	r0, [sp, #40]	@ 0x28
   28192:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   28196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2819a:	e72e      	b.n	27ffa <_svfprintf_r+0x198a>
   2819c:	00030b24 	.word	0x00030b24
   281a0:	00030b20 	.word	0x00030b20
   281a4:	3fe00000 	.word	0x3fe00000
   281a8:	00031724 	.word	0x00031724

000281ac <__ssprint_r>:
   281ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   281b0:	4615      	mov	r5, r2
   281b2:	6892      	ldr	r2, [r2, #8]
   281b4:	682c      	ldr	r4, [r5, #0]
   281b6:	b1fa      	cbz	r2, 281f8 <__ssprint_r+0x4c>
   281b8:	4680      	mov	r8, r0
   281ba:	4689      	mov	r9, r1
   281bc:	3408      	adds	r4, #8
   281be:	e001      	b.n	281c4 <__ssprint_r+0x18>
   281c0:	3408      	adds	r4, #8
   281c2:	b1cf      	cbz	r7, 281f8 <__ssprint_r+0x4c>
   281c4:	686b      	ldr	r3, [r5, #4]
   281c6:	1e59      	subs	r1, r3, #1
   281c8:	2b00      	cmp	r3, #0
   281ca:	4617      	mov	r7, r2
   281cc:	6069      	str	r1, [r5, #4]
   281ce:	dd13      	ble.n	281f8 <__ssprint_r+0x4c>
   281d0:	f854 6c04 	ldr.w	r6, [r4, #-4]
   281d4:	2e00      	cmp	r6, #0
   281d6:	d0f3      	beq.n	281c0 <__ssprint_r+0x14>
   281d8:	4633      	mov	r3, r6
   281da:	f854 2c08 	ldr.w	r2, [r4, #-8]
   281de:	4649      	mov	r1, r9
   281e0:	4640      	mov	r0, r8
   281e2:	f001 fa39 	bl	29658 <__ssputs_r>
   281e6:	1c43      	adds	r3, r0, #1
   281e8:	d007      	beq.n	281fa <__ssprint_r+0x4e>
   281ea:	68aa      	ldr	r2, [r5, #8]
   281ec:	1b92      	subs	r2, r2, r6
   281ee:	4617      	mov	r7, r2
   281f0:	60aa      	str	r2, [r5, #8]
   281f2:	3408      	adds	r4, #8
   281f4:	2f00      	cmp	r7, #0
   281f6:	d1e5      	bne.n	281c4 <__ssprint_r+0x18>
   281f8:	2000      	movs	r0, #0
   281fa:	2300      	movs	r3, #0
   281fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
   28200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028204 <_fclose_r>:
   28204:	b570      	push	{r4, r5, r6, lr}
   28206:	2900      	cmp	r1, #0
   28208:	d03f      	beq.n	2828a <_fclose_r+0x86>
   2820a:	4606      	mov	r6, r0
   2820c:	460c      	mov	r4, r1
   2820e:	b110      	cbz	r0, 28216 <_fclose_r+0x12>
   28210:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   28212:	2b00      	cmp	r3, #0
   28214:	d03c      	beq.n	28290 <_fclose_r+0x8c>
   28216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   28218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2821c:	07dd      	lsls	r5, r3, #31
   2821e:	d432      	bmi.n	28286 <_fclose_r+0x82>
   28220:	0590      	lsls	r0, r2, #22
   28222:	d538      	bpl.n	28296 <_fclose_r+0x92>
   28224:	4621      	mov	r1, r4
   28226:	4630      	mov	r0, r6
   28228:	f7fb fc30 	bl	23a8c <__sflush_r>
   2822c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   2822e:	4605      	mov	r5, r0
   28230:	b133      	cbz	r3, 28240 <_fclose_r+0x3c>
   28232:	69e1      	ldr	r1, [r4, #28]
   28234:	4630      	mov	r0, r6
   28236:	4798      	blx	r3
   28238:	2800      	cmp	r0, #0
   2823a:	bfb8      	it	lt
   2823c:	f04f 35ff 	movlt.w	r5, #4294967295
   28240:	89a3      	ldrh	r3, [r4, #12]
   28242:	061a      	lsls	r2, r3, #24
   28244:	d439      	bmi.n	282ba <_fclose_r+0xb6>
   28246:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   28248:	b141      	cbz	r1, 2825c <_fclose_r+0x58>
   2824a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
   2824e:	4299      	cmp	r1, r3
   28250:	d002      	beq.n	28258 <_fclose_r+0x54>
   28252:	4630      	mov	r0, r6
   28254:	f7fc fb02 	bl	2485c <_free_r>
   28258:	2300      	movs	r3, #0
   2825a:	6323      	str	r3, [r4, #48]	@ 0x30
   2825c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
   2825e:	b121      	cbz	r1, 2826a <_fclose_r+0x66>
   28260:	4630      	mov	r0, r6
   28262:	f7fc fafb 	bl	2485c <_free_r>
   28266:	2300      	movs	r3, #0
   28268:	6463      	str	r3, [r4, #68]	@ 0x44
   2826a:	f7fb fd97 	bl	23d9c <__sfp_lock_acquire>
   2826e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   28270:	2200      	movs	r2, #0
   28272:	07db      	lsls	r3, r3, #31
   28274:	81a2      	strh	r2, [r4, #12]
   28276:	d51c      	bpl.n	282b2 <_fclose_r+0xae>
   28278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   2827a:	f7fc fa19 	bl	246b0 <__retarget_lock_close_recursive>
   2827e:	f7fb fd93 	bl	23da8 <__sfp_lock_release>
   28282:	4628      	mov	r0, r5
   28284:	bd70      	pop	{r4, r5, r6, pc}
   28286:	2a00      	cmp	r2, #0
   28288:	d1cc      	bne.n	28224 <_fclose_r+0x20>
   2828a:	2500      	movs	r5, #0
   2828c:	4628      	mov	r0, r5
   2828e:	bd70      	pop	{r4, r5, r6, pc}
   28290:	f7fb fd66 	bl	23d60 <__sinit>
   28294:	e7bf      	b.n	28216 <_fclose_r+0x12>
   28296:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   28298:	f7fc fa0c 	bl	246b4 <__retarget_lock_acquire_recursive>
   2829c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   282a0:	2b00      	cmp	r3, #0
   282a2:	d1bf      	bne.n	28224 <_fclose_r+0x20>
   282a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   282a6:	07d9      	lsls	r1, r3, #31
   282a8:	d4ef      	bmi.n	2828a <_fclose_r+0x86>
   282aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   282ac:	f7fc fa04 	bl	246b8 <__retarget_lock_release_recursive>
   282b0:	e7eb      	b.n	2828a <_fclose_r+0x86>
   282b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   282b4:	f7fc fa00 	bl	246b8 <__retarget_lock_release_recursive>
   282b8:	e7de      	b.n	28278 <_fclose_r+0x74>
   282ba:	6921      	ldr	r1, [r4, #16]
   282bc:	4630      	mov	r0, r6
   282be:	f7fc facd 	bl	2485c <_free_r>
   282c2:	e7c0      	b.n	28246 <_fclose_r+0x42>

000282c4 <__smakebuf_r>:
   282c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   282c8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   282cc:	460c      	mov	r4, r1
   282ce:	0799      	lsls	r1, r3, #30
   282d0:	b096      	sub	sp, #88	@ 0x58
   282d2:	d508      	bpl.n	282e6 <__smakebuf_r+0x22>
   282d4:	f104 0343 	add.w	r3, r4, #67	@ 0x43
   282d8:	2201      	movs	r2, #1
   282da:	e9c4 3204 	strd	r3, r2, [r4, #16]
   282de:	6023      	str	r3, [r4, #0]
   282e0:	b016      	add	sp, #88	@ 0x58
   282e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   282e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   282ea:	2900      	cmp	r1, #0
   282ec:	4606      	mov	r6, r0
   282ee:	db26      	blt.n	2833e <__smakebuf_r+0x7a>
   282f0:	466a      	mov	r2, sp
   282f2:	f000 f881 	bl	283f8 <_fstat_r>
   282f6:	2800      	cmp	r0, #0
   282f8:	db1f      	blt.n	2833a <__smakebuf_r+0x76>
   282fa:	9d01      	ldr	r5, [sp, #4]
   282fc:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
   28300:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
   28304:	fab5 f585 	clz	r5, r5
   28308:	f44f 6880 	mov.w	r8, #1024	@ 0x400
   2830c:	096d      	lsrs	r5, r5, #5
   2830e:	f44f 6700 	mov.w	r7, #2048	@ 0x800
   28312:	4641      	mov	r1, r8
   28314:	4630      	mov	r0, r6
   28316:	f7fc ffb7 	bl	25288 <_malloc_r>
   2831a:	b1e8      	cbz	r0, 28358 <__smakebuf_r+0x94>
   2831c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28320:	f8c4 8014 	str.w	r8, [r4, #20]
   28324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   28328:	6020      	str	r0, [r4, #0]
   2832a:	6120      	str	r0, [r4, #16]
   2832c:	81a3      	strh	r3, [r4, #12]
   2832e:	bb3d      	cbnz	r5, 28380 <__smakebuf_r+0xbc>
   28330:	433b      	orrs	r3, r7
   28332:	81a3      	strh	r3, [r4, #12]
   28334:	b016      	add	sp, #88	@ 0x58
   28336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2833a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2833e:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
   28342:	d019      	beq.n	28378 <__smakebuf_r+0xb4>
   28344:	f04f 0840 	mov.w	r8, #64	@ 0x40
   28348:	2500      	movs	r5, #0
   2834a:	4641      	mov	r1, r8
   2834c:	4630      	mov	r0, r6
   2834e:	462f      	mov	r7, r5
   28350:	f7fc ff9a 	bl	25288 <_malloc_r>
   28354:	2800      	cmp	r0, #0
   28356:	d1e1      	bne.n	2831c <__smakebuf_r+0x58>
   28358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2835c:	059a      	lsls	r2, r3, #22
   2835e:	d4bf      	bmi.n	282e0 <__smakebuf_r+0x1c>
   28360:	f023 0303 	bic.w	r3, r3, #3
   28364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
   28368:	f043 0302 	orr.w	r3, r3, #2
   2836c:	2101      	movs	r1, #1
   2836e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   28372:	81a3      	strh	r3, [r4, #12]
   28374:	6022      	str	r2, [r4, #0]
   28376:	e7b3      	b.n	282e0 <__smakebuf_r+0x1c>
   28378:	f44f 6880 	mov.w	r8, #1024	@ 0x400
   2837c:	462f      	mov	r7, r5
   2837e:	e7c8      	b.n	28312 <__smakebuf_r+0x4e>
   28380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   28384:	4630      	mov	r0, r6
   28386:	f000 f84d 	bl	28424 <_isatty_r>
   2838a:	b910      	cbnz	r0, 28392 <__smakebuf_r+0xce>
   2838c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28390:	e7ce      	b.n	28330 <__smakebuf_r+0x6c>
   28392:	89a3      	ldrh	r3, [r4, #12]
   28394:	f023 0303 	bic.w	r3, r3, #3
   28398:	f043 0301 	orr.w	r3, r3, #1
   2839c:	b21b      	sxth	r3, r3
   2839e:	e7c7      	b.n	28330 <__smakebuf_r+0x6c>

000283a0 <raise>:
   283a0:	b538      	push	{r3, r4, r5, lr}
   283a2:	4b14      	ldr	r3, [pc, #80]	@ (283f4 <raise+0x54>)
   283a4:	281f      	cmp	r0, #31
   283a6:	681d      	ldr	r5, [r3, #0]
   283a8:	d81e      	bhi.n	283e8 <raise+0x48>
   283aa:	f8d5 2138 	ldr.w	r2, [r5, #312]	@ 0x138
   283ae:	4604      	mov	r4, r0
   283b0:	b162      	cbz	r2, 283cc <raise+0x2c>
   283b2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   283b6:	b14b      	cbz	r3, 283cc <raise+0x2c>
   283b8:	2b01      	cmp	r3, #1
   283ba:	d005      	beq.n	283c8 <raise+0x28>
   283bc:	1c59      	adds	r1, r3, #1
   283be:	d00f      	beq.n	283e0 <raise+0x40>
   283c0:	2100      	movs	r1, #0
   283c2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   283c6:	4798      	blx	r3
   283c8:	2000      	movs	r0, #0
   283ca:	bd38      	pop	{r3, r4, r5, pc}
   283cc:	4628      	mov	r0, r5
   283ce:	f000 f851 	bl	28474 <_getpid_r>
   283d2:	4622      	mov	r2, r4
   283d4:	4601      	mov	r1, r0
   283d6:	4628      	mov	r0, r5
   283d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   283dc:	f000 b834 	b.w	28448 <_kill_r>
   283e0:	2316      	movs	r3, #22
   283e2:	602b      	str	r3, [r5, #0]
   283e4:	2001      	movs	r0, #1
   283e6:	bd38      	pop	{r3, r4, r5, pc}
   283e8:	2316      	movs	r3, #22
   283ea:	602b      	str	r3, [r5, #0]
   283ec:	f04f 30ff 	mov.w	r0, #4294967295
   283f0:	bd38      	pop	{r3, r4, r5, pc}
   283f2:	bf00      	nop
   283f4:	100025a0 	.word	0x100025a0

000283f8 <_fstat_r>:
   283f8:	b570      	push	{r4, r5, r6, lr}
   283fa:	460c      	mov	r4, r1
   283fc:	4d08      	ldr	r5, [pc, #32]	@ (28420 <_fstat_r+0x28>)
   283fe:	4603      	mov	r3, r0
   28400:	2600      	movs	r6, #0
   28402:	4620      	mov	r0, r4
   28404:	4611      	mov	r1, r2
   28406:	461c      	mov	r4, r3
   28408:	602e      	str	r6, [r5, #0]
   2840a:	f001 fd59 	bl	29ec0 <_fstat>
   2840e:	1c43      	adds	r3, r0, #1
   28410:	d000      	beq.n	28414 <_fstat_r+0x1c>
   28412:	bd70      	pop	{r4, r5, r6, pc}
   28414:	682b      	ldr	r3, [r5, #0]
   28416:	2b00      	cmp	r3, #0
   28418:	d0fb      	beq.n	28412 <_fstat_r+0x1a>
   2841a:	6023      	str	r3, [r4, #0]
   2841c:	bd70      	pop	{r4, r5, r6, pc}
   2841e:	bf00      	nop
   28420:	10054c6c 	.word	0x10054c6c

00028424 <_isatty_r>:
   28424:	b538      	push	{r3, r4, r5, lr}
   28426:	4d07      	ldr	r5, [pc, #28]	@ (28444 <_isatty_r+0x20>)
   28428:	2200      	movs	r2, #0
   2842a:	4604      	mov	r4, r0
   2842c:	4608      	mov	r0, r1
   2842e:	602a      	str	r2, [r5, #0]
   28430:	f001 fe7c 	bl	2a12c <_isatty>
   28434:	1c43      	adds	r3, r0, #1
   28436:	d000      	beq.n	2843a <_isatty_r+0x16>
   28438:	bd38      	pop	{r3, r4, r5, pc}
   2843a:	682b      	ldr	r3, [r5, #0]
   2843c:	2b00      	cmp	r3, #0
   2843e:	d0fb      	beq.n	28438 <_isatty_r+0x14>
   28440:	6023      	str	r3, [r4, #0]
   28442:	bd38      	pop	{r3, r4, r5, pc}
   28444:	10054c6c 	.word	0x10054c6c

00028448 <_kill_r>:
   28448:	b570      	push	{r4, r5, r6, lr}
   2844a:	460c      	mov	r4, r1
   2844c:	4d08      	ldr	r5, [pc, #32]	@ (28470 <_kill_r+0x28>)
   2844e:	4603      	mov	r3, r0
   28450:	2600      	movs	r6, #0
   28452:	4620      	mov	r0, r4
   28454:	4611      	mov	r1, r2
   28456:	461c      	mov	r4, r3
   28458:	602e      	str	r6, [r5, #0]
   2845a:	f001 fb7b 	bl	29b54 <_kill>
   2845e:	1c43      	adds	r3, r0, #1
   28460:	d000      	beq.n	28464 <_kill_r+0x1c>
   28462:	bd70      	pop	{r4, r5, r6, pc}
   28464:	682b      	ldr	r3, [r5, #0]
   28466:	2b00      	cmp	r3, #0
   28468:	d0fb      	beq.n	28462 <_kill_r+0x1a>
   2846a:	6023      	str	r3, [r4, #0]
   2846c:	bd70      	pop	{r4, r5, r6, pc}
   2846e:	bf00      	nop
   28470:	10054c6c 	.word	0x10054c6c

00028474 <_getpid_r>:
   28474:	f001 bcc0 	b.w	29df8 <_getpid>

00028478 <_sbrk_r>:
   28478:	b538      	push	{r3, r4, r5, lr}
   2847a:	4d07      	ldr	r5, [pc, #28]	@ (28498 <_sbrk_r+0x20>)
   2847c:	2200      	movs	r2, #0
   2847e:	4604      	mov	r4, r0
   28480:	4608      	mov	r0, r1
   28482:	602a      	str	r2, [r5, #0]
   28484:	f001 fcba 	bl	29dfc <_sbrk>
   28488:	1c43      	adds	r3, r0, #1
   2848a:	d000      	beq.n	2848e <_sbrk_r+0x16>
   2848c:	bd38      	pop	{r3, r4, r5, pc}
   2848e:	682b      	ldr	r3, [r5, #0]
   28490:	2b00      	cmp	r3, #0
   28492:	d0fb      	beq.n	2848c <_sbrk_r+0x14>
   28494:	6023      	str	r3, [r4, #0]
   28496:	bd38      	pop	{r3, r4, r5, pc}
   28498:	10054c6c 	.word	0x10054c6c

0002849c <sysconf>:
   2849c:	2808      	cmp	r0, #8
   2849e:	d102      	bne.n	284a6 <sysconf+0xa>
   284a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
   284a4:	4770      	bx	lr
   284a6:	b508      	push	{r3, lr}
   284a8:	f7fc f8fa 	bl	246a0 <__errno>
   284ac:	2316      	movs	r3, #22
   284ae:	6003      	str	r3, [r0, #0]
   284b0:	f04f 30ff 	mov.w	r0, #4294967295
   284b4:	bd08      	pop	{r3, pc}
   284b6:	bf00      	nop

000284b8 <frexp>:
   284b8:	b570      	push	{r4, r5, r6, lr}
   284ba:	ec55 4b10 	vmov	r4, r5, d0
   284be:	4606      	mov	r6, r0
   284c0:	4813      	ldr	r0, [pc, #76]	@ (28510 <frexp+0x58>)
   284c2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
   284c6:	2100      	movs	r1, #0
   284c8:	4283      	cmp	r3, r0
   284ca:	6031      	str	r1, [r6, #0]
   284cc:	d81d      	bhi.n	2850a <frexp+0x52>
   284ce:	4620      	mov	r0, r4
   284d0:	4318      	orrs	r0, r3
   284d2:	d01a      	beq.n	2850a <frexp+0x52>
   284d4:	480f      	ldr	r0, [pc, #60]	@ (28514 <frexp+0x5c>)
   284d6:	4028      	ands	r0, r5
   284d8:	462a      	mov	r2, r5
   284da:	b958      	cbnz	r0, 284f4 <frexp+0x3c>
   284dc:	4b0e      	ldr	r3, [pc, #56]	@ (28518 <frexp+0x60>)
   284de:	2200      	movs	r2, #0
   284e0:	4620      	mov	r0, r4
   284e2:	4629      	mov	r1, r5
   284e4:	f7e3 ffc8 	bl	c478 <__aeabi_dmul>
   284e8:	460a      	mov	r2, r1
   284ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
   284ee:	4604      	mov	r4, r0
   284f0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
   284f4:	151b      	asrs	r3, r3, #20
   284f6:	f36f 521e 	bfc	r2, #20, #11
   284fa:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
   284fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
   28502:	440b      	add	r3, r1
   28504:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
   28508:	6033      	str	r3, [r6, #0]
   2850a:	ec45 4b10 	vmov	d0, r4, r5
   2850e:	bd70      	pop	{r4, r5, r6, pc}
   28510:	7fefffff 	.word	0x7fefffff
   28514:	7ff00000 	.word	0x7ff00000
   28518:	43500000 	.word	0x43500000

0002851c <_calloc_r>:
   2851c:	b538      	push	{r3, r4, r5, lr}
   2851e:	fba1 1402 	umull	r1, r4, r1, r2
   28522:	bb54      	cbnz	r4, 2857a <_calloc_r+0x5e>
   28524:	f7fc feb0 	bl	25288 <_malloc_r>
   28528:	4605      	mov	r5, r0
   2852a:	b350      	cbz	r0, 28582 <_calloc_r+0x66>
   2852c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   28530:	f022 0203 	bic.w	r2, r2, #3
   28534:	3a04      	subs	r2, #4
   28536:	2a24      	cmp	r2, #36	@ 0x24
   28538:	d810      	bhi.n	2855c <_calloc_r+0x40>
   2853a:	2a13      	cmp	r2, #19
   2853c:	d913      	bls.n	28566 <_calloc_r+0x4a>
   2853e:	2a1b      	cmp	r2, #27
   28540:	e9c0 4400 	strd	r4, r4, [r0]
   28544:	d916      	bls.n	28574 <_calloc_r+0x58>
   28546:	2a24      	cmp	r2, #36	@ 0x24
   28548:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2854c:	bf0a      	itet	eq
   2854e:	e9c0 4404 	strdeq	r4, r4, [r0, #16]
   28552:	f100 0210 	addne.w	r2, r0, #16
   28556:	f100 0218 	addeq.w	r2, r0, #24
   2855a:	e005      	b.n	28568 <_calloc_r+0x4c>
   2855c:	4621      	mov	r1, r4
   2855e:	f7fb ff17 	bl	24390 <memset>
   28562:	4628      	mov	r0, r5
   28564:	bd38      	pop	{r3, r4, r5, pc}
   28566:	4602      	mov	r2, r0
   28568:	2300      	movs	r3, #0
   2856a:	e9c2 3300 	strd	r3, r3, [r2]
   2856e:	6093      	str	r3, [r2, #8]
   28570:	4628      	mov	r0, r5
   28572:	bd38      	pop	{r3, r4, r5, pc}
   28574:	f100 0208 	add.w	r2, r0, #8
   28578:	e7f6      	b.n	28568 <_calloc_r+0x4c>
   2857a:	f7fc f891 	bl	246a0 <__errno>
   2857e:	230c      	movs	r3, #12
   28580:	6003      	str	r3, [r0, #0]
   28582:	2500      	movs	r5, #0
   28584:	4628      	mov	r0, r5
   28586:	bd38      	pop	{r3, r4, r5, pc}

00028588 <quorem>:
   28588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2858c:	6903      	ldr	r3, [r0, #16]
   2858e:	690c      	ldr	r4, [r1, #16]
   28590:	42a3      	cmp	r3, r4
   28592:	b083      	sub	sp, #12
   28594:	f2c0 808a 	blt.w	286ac <quorem+0x124>
   28598:	3c01      	subs	r4, #1
   2859a:	f101 0514 	add.w	r5, r1, #20
   2859e:	f100 0814 	add.w	r8, r0, #20
   285a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   285a6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   285aa:	3301      	adds	r3, #1
   285ac:	429a      	cmp	r2, r3
   285ae:	468e      	mov	lr, r1
   285b0:	4681      	mov	r9, r0
   285b2:	ea4f 0184 	mov.w	r1, r4, lsl #2
   285b6:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   285ba:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
   285be:	fbb2 f6f3 	udiv	r6, r2, r3
   285c2:	d33a      	bcc.n	2863a <quorem+0xb2>
   285c4:	e9cd 1500 	strd	r1, r5, [sp]
   285c8:	2200      	movs	r2, #0
   285ca:	46ac      	mov	ip, r5
   285cc:	4640      	mov	r0, r8
   285ce:	4613      	mov	r3, r2
   285d0:	f85c 1b04 	ldr.w	r1, [ip], #4
   285d4:	6805      	ldr	r5, [r0, #0]
   285d6:	fa1f fb81 	uxth.w	fp, r1
   285da:	fb06 220b 	mla	r2, r6, fp, r2
   285de:	0c09      	lsrs	r1, r1, #16
   285e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   285e4:	fb06 bb01 	mla	fp, r6, r1, fp
   285e8:	b292      	uxth	r2, r2
   285ea:	b2a9      	uxth	r1, r5
   285ec:	1a89      	subs	r1, r1, r2
   285ee:	4419      	add	r1, r3
   285f0:	fa1f f38b 	uxth.w	r3, fp
   285f4:	ebc3 4321 	rsb	r3, r3, r1, asr #16
   285f8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
   285fc:	b289      	uxth	r1, r1
   285fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   28602:	4567      	cmp	r7, ip
   28604:	f840 1b04 	str.w	r1, [r0], #4
   28608:	ea4f 421b 	mov.w	r2, fp, lsr #16
   2860c:	ea4f 4323 	mov.w	r3, r3, asr #16
   28610:	d2de      	bcs.n	285d0 <quorem+0x48>
   28612:	e9dd 1500 	ldrd	r1, r5, [sp]
   28616:	f858 3001 	ldr.w	r3, [r8, r1]
   2861a:	b973      	cbnz	r3, 2863a <quorem+0xb2>
   2861c:	f1aa 0a04 	sub.w	sl, sl, #4
   28620:	45d0      	cmp	r8, sl
   28622:	d304      	bcc.n	2862e <quorem+0xa6>
   28624:	e007      	b.n	28636 <quorem+0xae>
   28626:	45d0      	cmp	r8, sl
   28628:	f104 34ff 	add.w	r4, r4, #4294967295
   2862c:	d203      	bcs.n	28636 <quorem+0xae>
   2862e:	f85a 3904 	ldr.w	r3, [sl], #-4
   28632:	2b00      	cmp	r3, #0
   28634:	d0f7      	beq.n	28626 <quorem+0x9e>
   28636:	f8c9 4010 	str.w	r4, [r9, #16]
   2863a:	4671      	mov	r1, lr
   2863c:	4648      	mov	r0, r9
   2863e:	f7fd fbd9 	bl	25df4 <__mcmp>
   28642:	2800      	cmp	r0, #0
   28644:	db2e      	blt.n	286a4 <quorem+0x11c>
   28646:	4641      	mov	r1, r8
   28648:	2200      	movs	r2, #0
   2864a:	f855 0b04 	ldr.w	r0, [r5], #4
   2864e:	f8d1 c000 	ldr.w	ip, [r1]
   28652:	fa1f fe80 	uxth.w	lr, r0
   28656:	fa1f f38c 	uxth.w	r3, ip
   2865a:	eba3 030e 	sub.w	r3, r3, lr
   2865e:	4413      	add	r3, r2
   28660:	0c02      	lsrs	r2, r0, #16
   28662:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   28666:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2866a:	b29b      	uxth	r3, r3
   2866c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   28670:	42af      	cmp	r7, r5
   28672:	f841 3b04 	str.w	r3, [r1], #4
   28676:	ea4f 4222 	mov.w	r2, r2, asr #16
   2867a:	d2e6      	bcs.n	2864a <quorem+0xc2>
   2867c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   28680:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   28684:	b96a      	cbnz	r2, 286a2 <quorem+0x11a>
   28686:	3b04      	subs	r3, #4
   28688:	4543      	cmp	r3, r8
   2868a:	d804      	bhi.n	28696 <quorem+0x10e>
   2868c:	e007      	b.n	2869e <quorem+0x116>
   2868e:	4598      	cmp	r8, r3
   28690:	f104 34ff 	add.w	r4, r4, #4294967295
   28694:	d203      	bcs.n	2869e <quorem+0x116>
   28696:	f853 2904 	ldr.w	r2, [r3], #-4
   2869a:	2a00      	cmp	r2, #0
   2869c:	d0f7      	beq.n	2868e <quorem+0x106>
   2869e:	f8c9 4010 	str.w	r4, [r9, #16]
   286a2:	3601      	adds	r6, #1
   286a4:	4630      	mov	r0, r6
   286a6:	b003      	add	sp, #12
   286a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286ac:	2000      	movs	r0, #0
   286ae:	b003      	add	sp, #12
   286b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286b4:	0000      	movs	r0, r0
	...

000286b8 <_dtoa_r>:
   286b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286bc:	b09d      	sub	sp, #116	@ 0x74
   286be:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
   286c2:	9102      	str	r1, [sp, #8]
   286c4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
   286c6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
   286c8:	9004      	str	r0, [sp, #16]
   286ca:	ed8d 0b06 	vstr	d0, [sp, #24]
   286ce:	ec57 6b10 	vmov	r6, r7, d0
   286d2:	b149      	cbz	r1, 286e8 <_dtoa_r+0x30>
   286d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
   286d6:	604a      	str	r2, [r1, #4]
   286d8:	2301      	movs	r3, #1
   286da:	4093      	lsls	r3, r2
   286dc:	4604      	mov	r4, r0
   286de:	608b      	str	r3, [r1, #8]
   286e0:	f7fd f8cc 	bl	2587c <_Bfree>
   286e4:	2300      	movs	r3, #0
   286e6:	63a3      	str	r3, [r4, #56]	@ 0x38
   286e8:	f1b7 0900 	subs.w	r9, r7, #0
   286ec:	bfb4      	ite	lt
   286ee:	2301      	movlt	r3, #1
   286f0:	2300      	movge	r3, #0
   286f2:	602b      	str	r3, [r5, #0]
   286f4:	4b76      	ldr	r3, [pc, #472]	@ (288d0 <_dtoa_r+0x218>)
   286f6:	bfbc      	itt	lt
   286f8:	f029 4900 	biclt.w	r9, r9, #2147483648	@ 0x80000000
   286fc:	f8cd 901c 	strlt.w	r9, [sp, #28]
   28700:	ea33 0309 	bics.w	r3, r3, r9
   28704:	f000 80aa 	beq.w	2885c <_dtoa_r+0x1a4>
   28708:	ed9d 7b06 	vldr	d7, [sp, #24]
   2870c:	2200      	movs	r2, #0
   2870e:	ec51 0b17 	vmov	r0, r1, d7
   28712:	2300      	movs	r3, #0
   28714:	ed8d 7b00 	vstr	d7, [sp]
   28718:	f7e4 f916 	bl	c948 <__aeabi_dcmpeq>
   2871c:	4680      	mov	r8, r0
   2871e:	b168      	cbz	r0, 2873c <_dtoa_r+0x84>
   28720:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   28722:	2301      	movs	r3, #1
   28724:	6013      	str	r3, [r2, #0]
   28726:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   28728:	b113      	cbz	r3, 28730 <_dtoa_r+0x78>
   2872a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   2872c:	4b69      	ldr	r3, [pc, #420]	@ (288d4 <_dtoa_r+0x21c>)
   2872e:	6013      	str	r3, [r2, #0]
   28730:	4b69      	ldr	r3, [pc, #420]	@ (288d8 <_dtoa_r+0x220>)
   28732:	9305      	str	r3, [sp, #20]
   28734:	9805      	ldr	r0, [sp, #20]
   28736:	b01d      	add	sp, #116	@ 0x74
   28738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2873c:	ed9d 0b00 	vldr	d0, [sp]
   28740:	9804      	ldr	r0, [sp, #16]
   28742:	aa1a      	add	r2, sp, #104	@ 0x68
   28744:	a91b      	add	r1, sp, #108	@ 0x6c
   28746:	f7fd fcc3 	bl	260d0 <__d2b>
   2874a:	ea5f 5519 	movs.w	r5, r9, lsr #20
   2874e:	4682      	mov	sl, r0
   28750:	f040 809a 	bne.w	28888 <_dtoa_r+0x1d0>
   28754:	e9dd 851a 	ldrd	r8, r5, [sp, #104]	@ 0x68
   28758:	4445      	add	r5, r8
   2875a:	f205 4332 	addw	r3, r5, #1074	@ 0x432
   2875e:	2b20      	cmp	r3, #32
   28760:	f340 838a 	ble.w	28e78 <_dtoa_r+0x7c0>
   28764:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
   28768:	fa09 f903 	lsl.w	r9, r9, r3
   2876c:	f205 4312 	addw	r3, r5, #1042	@ 0x412
   28770:	fa26 f303 	lsr.w	r3, r6, r3
   28774:	ea49 0003 	orr.w	r0, r9, r3
   28778:	f7e3 fe04 	bl	c384 <__aeabi_ui2d>
   2877c:	2301      	movs	r3, #1
   2877e:	3d01      	subs	r5, #1
   28780:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
   28784:	9312      	str	r3, [sp, #72]	@ 0x48
   28786:	4b55      	ldr	r3, [pc, #340]	@ (288dc <_dtoa_r+0x224>)
   28788:	2200      	movs	r2, #0
   2878a:	f7e3 fcbd 	bl	c108 <__aeabi_dsub>
   2878e:	a34a      	add	r3, pc, #296	@ (adr r3, 288b8 <_dtoa_r+0x200>)
   28790:	e9d3 2300 	ldrd	r2, r3, [r3]
   28794:	f7e3 fe70 	bl	c478 <__aeabi_dmul>
   28798:	a349      	add	r3, pc, #292	@ (adr r3, 288c0 <_dtoa_r+0x208>)
   2879a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2879e:	f7e3 fcb5 	bl	c10c <__adddf3>
   287a2:	4606      	mov	r6, r0
   287a4:	4628      	mov	r0, r5
   287a6:	460f      	mov	r7, r1
   287a8:	f7e3 fdfc 	bl	c3a4 <__aeabi_i2d>
   287ac:	a346      	add	r3, pc, #280	@ (adr r3, 288c8 <_dtoa_r+0x210>)
   287ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   287b2:	f7e3 fe61 	bl	c478 <__aeabi_dmul>
   287b6:	4602      	mov	r2, r0
   287b8:	460b      	mov	r3, r1
   287ba:	4630      	mov	r0, r6
   287bc:	4639      	mov	r1, r7
   287be:	f7e3 fca5 	bl	c10c <__adddf3>
   287c2:	4606      	mov	r6, r0
   287c4:	460f      	mov	r7, r1
   287c6:	f7e4 fadd 	bl	cd84 <__aeabi_d2iz>
   287ca:	2200      	movs	r2, #0
   287cc:	4604      	mov	r4, r0
   287ce:	9009      	str	r0, [sp, #36]	@ 0x24
   287d0:	2300      	movs	r3, #0
   287d2:	4630      	mov	r0, r6
   287d4:	4639      	mov	r1, r7
   287d6:	f7e4 f8c1 	bl	c95c <__aeabi_dcmplt>
   287da:	2800      	cmp	r0, #0
   287dc:	f040 8322 	bne.w	28e24 <_dtoa_r+0x76c>
   287e0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   287e2:	eba8 0805 	sub.w	r8, r8, r5
   287e6:	f108 33ff 	add.w	r3, r8, #4294967295
   287ea:	2c16      	cmp	r4, #22
   287ec:	9308      	str	r3, [sp, #32]
   287ee:	f200 818a 	bhi.w	28b06 <_dtoa_r+0x44e>
   287f2:	4b3b      	ldr	r3, [pc, #236]	@ (288e0 <_dtoa_r+0x228>)
   287f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   287f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   287fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   28800:	f7e4 f8ac 	bl	c95c <__aeabi_dcmplt>
   28804:	2800      	cmp	r0, #0
   28806:	d071      	beq.n	288ec <_dtoa_r+0x234>
   28808:	1e63      	subs	r3, r4, #1
   2880a:	9309      	str	r3, [sp, #36]	@ 0x24
   2880c:	2300      	movs	r3, #0
   2880e:	9311      	str	r3, [sp, #68]	@ 0x44
   28810:	9b08      	ldr	r3, [sp, #32]
   28812:	2b00      	cmp	r3, #0
   28814:	f2c0 817d 	blt.w	28b12 <_dtoa_r+0x45a>
   28818:	2300      	movs	r3, #0
   2881a:	930c      	str	r3, [sp, #48]	@ 0x30
   2881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2881e:	2b00      	cmp	r3, #0
   28820:	da6a      	bge.n	288f8 <_dtoa_r+0x240>
   28822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28824:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   28826:	930d      	str	r3, [sp, #52]	@ 0x34
   28828:	1ad2      	subs	r2, r2, r3
   2882a:	920c      	str	r2, [sp, #48]	@ 0x30
   2882c:	425a      	negs	r2, r3
   2882e:	2300      	movs	r3, #0
   28830:	9309      	str	r3, [sp, #36]	@ 0x24
   28832:	9b02      	ldr	r3, [sp, #8]
   28834:	9210      	str	r2, [sp, #64]	@ 0x40
   28836:	2b09      	cmp	r3, #9
   28838:	d868      	bhi.n	2890c <_dtoa_r+0x254>
   2883a:	2b05      	cmp	r3, #5
   2883c:	f340 8321 	ble.w	28e82 <_dtoa_r+0x7ca>
   28840:	3b04      	subs	r3, #4
   28842:	9302      	str	r3, [sp, #8]
   28844:	2500      	movs	r5, #0
   28846:	9b02      	ldr	r3, [sp, #8]
   28848:	3b02      	subs	r3, #2
   2884a:	2b03      	cmp	r3, #3
   2884c:	f200 8636 	bhi.w	294bc <_dtoa_r+0xe04>
   28850:	e8df f013 	tbh	[pc, r3, lsl #1]
   28854:	046b046e 	.word	0x046b046e
   28858:	04470463 	.word	0x04470463
   2885c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   2885e:	f3c9 0913 	ubfx	r9, r9, #0, #20
   28862:	f242 730f 	movw	r3, #9999	@ 0x270f
   28866:	ea59 0906 	orrs.w	r9, r9, r6
   2886a:	6013      	str	r3, [r2, #0]
   2886c:	d11c      	bne.n	288a8 <_dtoa_r+0x1f0>
   2886e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   28870:	2b00      	cmp	r3, #0
   28872:	f000 8643 	beq.w	294fc <_dtoa_r+0xe44>
   28876:	4b1b      	ldr	r3, [pc, #108]	@ (288e4 <_dtoa_r+0x22c>)
   28878:	9305      	str	r3, [sp, #20]
   2887a:	3308      	adds	r3, #8
   2887c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   2887e:	9805      	ldr	r0, [sp, #20]
   28880:	6013      	str	r3, [r2, #0]
   28882:	b01d      	add	sp, #116	@ 0x74
   28884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28888:	e9dd 1200 	ldrd	r1, r2, [sp]
   2888c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   28890:	4608      	mov	r0, r1
   28892:	f043 517f 	orr.w	r1, r3, #1069547520	@ 0x3fc00000
   28896:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
   2889a:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
   2889e:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
   288a2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
   288a6:	e76e      	b.n	28786 <_dtoa_r+0xce>
   288a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   288aa:	2b00      	cmp	r3, #0
   288ac:	f040 83f4 	bne.w	29098 <_dtoa_r+0x9e0>
   288b0:	4b0d      	ldr	r3, [pc, #52]	@ (288e8 <_dtoa_r+0x230>)
   288b2:	9305      	str	r3, [sp, #20]
   288b4:	e73e      	b.n	28734 <_dtoa_r+0x7c>
   288b6:	bf00      	nop
   288b8:	636f4361 	.word	0x636f4361
   288bc:	3fd287a7 	.word	0x3fd287a7
   288c0:	8b60c8b3 	.word	0x8b60c8b3
   288c4:	3fc68a28 	.word	0x3fc68a28
   288c8:	509f79fb 	.word	0x509f79fb
   288cc:	3fd34413 	.word	0x3fd34413
   288d0:	7ff00000 	.word	0x7ff00000
   288d4:	0002b901 	.word	0x0002b901
   288d8:	0002b900 	.word	0x0002b900
   288dc:	3ff80000 	.word	0x3ff80000
   288e0:	00031558 	.word	0x00031558
   288e4:	00030b28 	.word	0x00030b28
   288e8:	00030b34 	.word	0x00030b34
   288ec:	f1b8 0f00 	cmp.w	r8, #0
   288f0:	f340 84a3 	ble.w	2923a <_dtoa_r+0xb82>
   288f4:	9011      	str	r0, [sp, #68]	@ 0x44
   288f6:	900c      	str	r0, [sp, #48]	@ 0x30
   288f8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   288fc:	4413      	add	r3, r2
   288fe:	9308      	str	r3, [sp, #32]
   28900:	2300      	movs	r3, #0
   28902:	9310      	str	r3, [sp, #64]	@ 0x40
   28904:	9b02      	ldr	r3, [sp, #8]
   28906:	920d      	str	r2, [sp, #52]	@ 0x34
   28908:	2b09      	cmp	r3, #9
   2890a:	d996      	bls.n	2883a <_dtoa_r+0x182>
   2890c:	2300      	movs	r3, #0
   2890e:	2501      	movs	r5, #1
   28910:	9302      	str	r3, [sp, #8]
   28912:	950e      	str	r5, [sp, #56]	@ 0x38
   28914:	f04f 3bff 	mov.w	fp, #4294967295
   28918:	930b      	str	r3, [sp, #44]	@ 0x2c
   2891a:	9b04      	ldr	r3, [sp, #16]
   2891c:	f8cd b04c 	str.w	fp, [sp, #76]	@ 0x4c
   28920:	2100      	movs	r1, #0
   28922:	63d9      	str	r1, [r3, #60]	@ 0x3c
   28924:	9804      	ldr	r0, [sp, #16]
   28926:	f7fc ff83 	bl	25830 <_Balloc>
   2892a:	9005      	str	r0, [sp, #20]
   2892c:	2800      	cmp	r0, #0
   2892e:	f000 85ce 	beq.w	294ce <_dtoa_r+0xe16>
   28932:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   28936:	f1bb 0f0e 	cmp.w	fp, #14
   2893a:	639a      	str	r2, [r3, #56]	@ 0x38
   2893c:	f200 8118 	bhi.w	28b70 <_dtoa_r+0x4b8>
   28940:	2d00      	cmp	r5, #0
   28942:	f000 8115 	beq.w	28b70 <_dtoa_r+0x4b8>
   28946:	990d      	ldr	r1, [sp, #52]	@ 0x34
   28948:	2900      	cmp	r1, #0
   2894a:	f340 8446 	ble.w	291da <_dtoa_r+0xb22>
   2894e:	4bb3      	ldr	r3, [pc, #716]	@ (28c1c <_dtoa_r+0x564>)
   28950:	f001 020f 	and.w	r2, r1, #15
   28954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   28958:	05c8      	lsls	r0, r1, #23
   2895a:	e9d3 8900 	ldrd	r8, r9, [r3]
   2895e:	ea4f 1521 	mov.w	r5, r1, asr #4
   28962:	f140 8408 	bpl.w	29176 <_dtoa_r+0xabe>
   28966:	4bae      	ldr	r3, [pc, #696]	@ (28c20 <_dtoa_r+0x568>)
   28968:	e9dd 0100 	ldrd	r0, r1, [sp]
   2896c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   28970:	f7e3 feac 	bl	c6cc <__aeabi_ddiv>
   28974:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   28978:	f005 050f 	and.w	r5, r5, #15
   2897c:	2703      	movs	r7, #3
   2897e:	b17d      	cbz	r5, 289a0 <_dtoa_r+0x2e8>
   28980:	4ea7      	ldr	r6, [pc, #668]	@ (28c20 <_dtoa_r+0x568>)
   28982:	07e9      	lsls	r1, r5, #31
   28984:	d508      	bpl.n	28998 <_dtoa_r+0x2e0>
   28986:	4640      	mov	r0, r8
   28988:	4649      	mov	r1, r9
   2898a:	e9d6 2300 	ldrd	r2, r3, [r6]
   2898e:	f7e3 fd73 	bl	c478 <__aeabi_dmul>
   28992:	3701      	adds	r7, #1
   28994:	4680      	mov	r8, r0
   28996:	4689      	mov	r9, r1
   28998:	106d      	asrs	r5, r5, #1
   2899a:	f106 0608 	add.w	r6, r6, #8
   2899e:	d1f0      	bne.n	28982 <_dtoa_r+0x2ca>
   289a0:	4642      	mov	r2, r8
   289a2:	464b      	mov	r3, r9
   289a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   289a8:	f7e3 fe90 	bl	c6cc <__aeabi_ddiv>
   289ac:	4680      	mov	r8, r0
   289ae:	4689      	mov	r9, r1
   289b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   289b2:	b143      	cbz	r3, 289c6 <_dtoa_r+0x30e>
   289b4:	4b9b      	ldr	r3, [pc, #620]	@ (28c24 <_dtoa_r+0x56c>)
   289b6:	2200      	movs	r2, #0
   289b8:	4640      	mov	r0, r8
   289ba:	4649      	mov	r1, r9
   289bc:	f7e3 ffce 	bl	c95c <__aeabi_dcmplt>
   289c0:	2800      	cmp	r0, #0
   289c2:	f040 850b 	bne.w	293dc <_dtoa_r+0xd24>
   289c6:	4638      	mov	r0, r7
   289c8:	f7e3 fcec 	bl	c3a4 <__aeabi_i2d>
   289cc:	4642      	mov	r2, r8
   289ce:	464b      	mov	r3, r9
   289d0:	f7e3 fd52 	bl	c478 <__aeabi_dmul>
   289d4:	4b94      	ldr	r3, [pc, #592]	@ (28c28 <_dtoa_r+0x570>)
   289d6:	2200      	movs	r2, #0
   289d8:	f7e3 fb98 	bl	c10c <__adddf3>
   289dc:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   289e0:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   289e4:	9315      	str	r3, [sp, #84]	@ 0x54
   289e6:	f1bb 0f00 	cmp.w	fp, #0
   289ea:	f000 80a8 	beq.w	28b3e <_dtoa_r+0x486>
   289ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   289f0:	e9cd b318 	strd	fp, r3, [sp, #96]	@ 0x60
   289f4:	4649      	mov	r1, r9
   289f6:	4640      	mov	r0, r8
   289f8:	f7e4 f9c4 	bl	cd84 <__aeabi_d2iz>
   289fc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   289fe:	4b87      	ldr	r3, [pc, #540]	@ (28c1c <_dtoa_r+0x564>)
   28a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   28a04:	ed13 7b02 	vldr	d7, [r3, #-8]
   28a08:	4605      	mov	r5, r0
   28a0a:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
   28a0e:	f7e3 fcc9 	bl	c3a4 <__aeabi_i2d>
   28a12:	460b      	mov	r3, r1
   28a14:	4602      	mov	r2, r0
   28a16:	4649      	mov	r1, r9
   28a18:	4640      	mov	r0, r8
   28a1a:	f7e3 fb75 	bl	c108 <__aeabi_dsub>
   28a1e:	9f05      	ldr	r7, [sp, #20]
   28a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28a22:	3530      	adds	r5, #48	@ 0x30
   28a24:	1c7e      	adds	r6, r7, #1
   28a26:	b2ec      	uxtb	r4, r5
   28a28:	4680      	mov	r8, r0
   28a2a:	4689      	mov	r9, r1
   28a2c:	4635      	mov	r5, r6
   28a2e:	2b00      	cmp	r3, #0
   28a30:	f000 846c 	beq.w	2930c <_dtoa_r+0xc54>
   28a34:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
   28a38:	497c      	ldr	r1, [pc, #496]	@ (28c2c <_dtoa_r+0x574>)
   28a3a:	2000      	movs	r0, #0
   28a3c:	f7e3 fe46 	bl	c6cc <__aeabi_ddiv>
   28a40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
   28a44:	f7e3 fb60 	bl	c108 <__aeabi_dsub>
   28a48:	703c      	strb	r4, [r7, #0]
   28a4a:	4642      	mov	r2, r8
   28a4c:	464b      	mov	r3, r9
   28a4e:	4604      	mov	r4, r0
   28a50:	460d      	mov	r5, r1
   28a52:	f7e3 ffa1 	bl	c998 <__aeabi_dcmpgt>
   28a56:	2800      	cmp	r0, #0
   28a58:	f040 84b8 	bne.w	293cc <_dtoa_r+0xd14>
   28a5c:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
   28a60:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
   28a64:	2700      	movs	r7, #0
   28a66:	46ab      	mov	fp, r5
   28a68:	46a2      	mov	sl, r4
   28a6a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   28a6c:	e02a      	b.n	28ac4 <_dtoa_r+0x40c>
   28a6e:	3701      	adds	r7, #1
   28a70:	42af      	cmp	r7, r5
   28a72:	f280 84fd 	bge.w	29470 <_dtoa_r+0xdb8>
   28a76:	4b6e      	ldr	r3, [pc, #440]	@ (28c30 <_dtoa_r+0x578>)
   28a78:	4650      	mov	r0, sl
   28a7a:	4659      	mov	r1, fp
   28a7c:	2200      	movs	r2, #0
   28a7e:	f7e3 fcfb 	bl	c478 <__aeabi_dmul>
   28a82:	4b6b      	ldr	r3, [pc, #428]	@ (28c30 <_dtoa_r+0x578>)
   28a84:	2200      	movs	r2, #0
   28a86:	4682      	mov	sl, r0
   28a88:	468b      	mov	fp, r1
   28a8a:	4640      	mov	r0, r8
   28a8c:	4649      	mov	r1, r9
   28a8e:	f7e3 fcf3 	bl	c478 <__aeabi_dmul>
   28a92:	4689      	mov	r9, r1
   28a94:	4680      	mov	r8, r0
   28a96:	f7e4 f975 	bl	cd84 <__aeabi_d2iz>
   28a9a:	4604      	mov	r4, r0
   28a9c:	f7e3 fc82 	bl	c3a4 <__aeabi_i2d>
   28aa0:	4602      	mov	r2, r0
   28aa2:	460b      	mov	r3, r1
   28aa4:	4640      	mov	r0, r8
   28aa6:	4649      	mov	r1, r9
   28aa8:	f7e3 fb2e 	bl	c108 <__aeabi_dsub>
   28aac:	3430      	adds	r4, #48	@ 0x30
   28aae:	f806 4b01 	strb.w	r4, [r6], #1
   28ab2:	4652      	mov	r2, sl
   28ab4:	465b      	mov	r3, fp
   28ab6:	4680      	mov	r8, r0
   28ab8:	4689      	mov	r9, r1
   28aba:	f7e3 ff4f 	bl	c95c <__aeabi_dcmplt>
   28abe:	2800      	cmp	r0, #0
   28ac0:	f040 84d3 	bne.w	2946a <_dtoa_r+0xdb2>
   28ac4:	4642      	mov	r2, r8
   28ac6:	464b      	mov	r3, r9
   28ac8:	4956      	ldr	r1, [pc, #344]	@ (28c24 <_dtoa_r+0x56c>)
   28aca:	2000      	movs	r0, #0
   28acc:	f7e3 fb1c 	bl	c108 <__aeabi_dsub>
   28ad0:	4652      	mov	r2, sl
   28ad2:	465b      	mov	r3, fp
   28ad4:	f7e3 ff42 	bl	c95c <__aeabi_dcmplt>
   28ad8:	2800      	cmp	r0, #0
   28ada:	d0c8      	beq.n	28a6e <_dtoa_r+0x3b6>
   28adc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   28ade:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   28ae2:	9a05      	ldr	r2, [sp, #20]
   28ae4:	4637      	mov	r7, r6
   28ae6:	f103 0801 	add.w	r8, r3, #1
   28aea:	e002      	b.n	28af2 <_dtoa_r+0x43a>
   28aec:	4297      	cmp	r7, r2
   28aee:	f000 849b 	beq.w	29428 <_dtoa_r+0xd70>
   28af2:	463e      	mov	r6, r7
   28af4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   28af8:	2b39      	cmp	r3, #57	@ 0x39
   28afa:	d0f7      	beq.n	28aec <_dtoa_r+0x434>
   28afc:	3301      	adds	r3, #1
   28afe:	b2db      	uxtb	r3, r3
   28b00:	703b      	strb	r3, [r7, #0]
   28b02:	4645      	mov	r5, r8
   28b04:	e17d      	b.n	28e02 <_dtoa_r+0x74a>
   28b06:	2301      	movs	r3, #1
   28b08:	9311      	str	r3, [sp, #68]	@ 0x44
   28b0a:	9b08      	ldr	r3, [sp, #32]
   28b0c:	2b00      	cmp	r3, #0
   28b0e:	f6bf ae83 	bge.w	28818 <_dtoa_r+0x160>
   28b12:	f1c8 0301 	rsb	r3, r8, #1
   28b16:	930c      	str	r3, [sp, #48]	@ 0x30
   28b18:	2300      	movs	r3, #0
   28b1a:	9308      	str	r3, [sp, #32]
   28b1c:	e67e      	b.n	2881c <_dtoa_r+0x164>
   28b1e:	4638      	mov	r0, r7
   28b20:	f7e3 fc40 	bl	c3a4 <__aeabi_i2d>
   28b24:	4642      	mov	r2, r8
   28b26:	464b      	mov	r3, r9
   28b28:	f7e3 fca6 	bl	c478 <__aeabi_dmul>
   28b2c:	4b3e      	ldr	r3, [pc, #248]	@ (28c28 <_dtoa_r+0x570>)
   28b2e:	2200      	movs	r2, #0
   28b30:	f7e3 faec 	bl	c10c <__adddf3>
   28b34:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   28b38:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   28b3c:	9315      	str	r3, [sp, #84]	@ 0x54
   28b3e:	4b3d      	ldr	r3, [pc, #244]	@ (28c34 <_dtoa_r+0x57c>)
   28b40:	2200      	movs	r2, #0
   28b42:	4640      	mov	r0, r8
   28b44:	4649      	mov	r1, r9
   28b46:	f7e3 fadf 	bl	c108 <__aeabi_dsub>
   28b4a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
   28b4e:	4622      	mov	r2, r4
   28b50:	462b      	mov	r3, r5
   28b52:	4606      	mov	r6, r0
   28b54:	460f      	mov	r7, r1
   28b56:	f7e3 ff1f 	bl	c998 <__aeabi_dcmpgt>
   28b5a:	2800      	cmp	r0, #0
   28b5c:	f040 8473 	bne.w	29446 <_dtoa_r+0xd8e>
   28b60:	4630      	mov	r0, r6
   28b62:	4639      	mov	r1, r7
   28b64:	4622      	mov	r2, r4
   28b66:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
   28b6a:	f7e3 fef7 	bl	c95c <__aeabi_dcmplt>
   28b6e:	bb28      	cbnz	r0, 28bbc <_dtoa_r+0x504>
   28b70:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   28b72:	2b00      	cmp	r3, #0
   28b74:	f2c0 8090 	blt.w	28c98 <_dtoa_r+0x5e0>
   28b78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   28b7a:	2a0e      	cmp	r2, #14
   28b7c:	f300 808c 	bgt.w	28c98 <_dtoa_r+0x5e0>
   28b80:	4b26      	ldr	r3, [pc, #152]	@ (28c1c <_dtoa_r+0x564>)
   28b82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   28b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   28b88:	ed93 7b00 	vldr	d7, [r3]
   28b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28b8e:	2b00      	cmp	r3, #0
   28b90:	ed8d 7b02 	vstr	d7, [sp, #8]
   28b94:	da19      	bge.n	28bca <_dtoa_r+0x512>
   28b96:	f1bb 0f00 	cmp.w	fp, #0
   28b9a:	dc16      	bgt.n	28bca <_dtoa_r+0x512>
   28b9c:	d10e      	bne.n	28bbc <_dtoa_r+0x504>
   28b9e:	4b25      	ldr	r3, [pc, #148]	@ (28c34 <_dtoa_r+0x57c>)
   28ba0:	2200      	movs	r2, #0
   28ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   28ba6:	f7e3 fc67 	bl	c478 <__aeabi_dmul>
   28baa:	4602      	mov	r2, r0
   28bac:	460b      	mov	r3, r1
   28bae:	e9dd 0100 	ldrd	r0, r1, [sp]
   28bb2:	f7e3 fedd 	bl	c970 <__aeabi_dcmple>
   28bb6:	2800      	cmp	r0, #0
   28bb8:	f000 8445 	beq.w	29446 <_dtoa_r+0xd8e>
   28bbc:	2300      	movs	r3, #0
   28bbe:	9e05      	ldr	r6, [sp, #20]
   28bc0:	9300      	str	r3, [sp, #0]
   28bc2:	461f      	mov	r7, r3
   28bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28bc6:	43dd      	mvns	r5, r3
   28bc8:	e22d      	b.n	29026 <_dtoa_r+0x96e>
   28bca:	9b05      	ldr	r3, [sp, #20]
   28bcc:	1c5d      	adds	r5, r3, #1
   28bce:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
   28bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
   28bd6:	463a      	mov	r2, r7
   28bd8:	4643      	mov	r3, r8
   28bda:	f7e3 fd77 	bl	c6cc <__aeabi_ddiv>
   28bde:	f7e4 f8d1 	bl	cd84 <__aeabi_d2iz>
   28be2:	4606      	mov	r6, r0
   28be4:	f7e3 fbde 	bl	c3a4 <__aeabi_i2d>
   28be8:	463a      	mov	r2, r7
   28bea:	4643      	mov	r3, r8
   28bec:	f7e3 fc44 	bl	c478 <__aeabi_dmul>
   28bf0:	4602      	mov	r2, r0
   28bf2:	460b      	mov	r3, r1
   28bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
   28bf8:	f7e3 fa86 	bl	c108 <__aeabi_dsub>
   28bfc:	9a05      	ldr	r2, [sp, #20]
   28bfe:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   28c02:	f1bb 0f01 	cmp.w	fp, #1
   28c06:	462f      	mov	r7, r5
   28c08:	7013      	strb	r3, [r2, #0]
   28c0a:	f000 8321 	beq.w	29250 <_dtoa_r+0xb98>
   28c0e:	2501      	movs	r5, #1
   28c10:	f8cd a000 	str.w	sl, [sp]
   28c14:	46a8      	mov	r8, r5
   28c16:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
   28c1a:	e02b      	b.n	28c74 <_dtoa_r+0x5bc>
   28c1c:	00031558 	.word	0x00031558
   28c20:	00031530 	.word	0x00031530
   28c24:	3ff00000 	.word	0x3ff00000
   28c28:	401c0000 	.word	0x401c0000
   28c2c:	3fe00000 	.word	0x3fe00000
   28c30:	40240000 	.word	0x40240000
   28c34:	40140000 	.word	0x40140000
   28c38:	464a      	mov	r2, r9
   28c3a:	4653      	mov	r3, sl
   28c3c:	4620      	mov	r0, r4
   28c3e:	4629      	mov	r1, r5
   28c40:	f7e3 fd44 	bl	c6cc <__aeabi_ddiv>
   28c44:	f7e4 f89e 	bl	cd84 <__aeabi_d2iz>
   28c48:	4606      	mov	r6, r0
   28c4a:	f7e3 fbab 	bl	c3a4 <__aeabi_i2d>
   28c4e:	464a      	mov	r2, r9
   28c50:	4653      	mov	r3, sl
   28c52:	f7e3 fc11 	bl	c478 <__aeabi_dmul>
   28c56:	f108 0801 	add.w	r8, r8, #1
   28c5a:	460b      	mov	r3, r1
   28c5c:	4602      	mov	r2, r0
   28c5e:	4629      	mov	r1, r5
   28c60:	4620      	mov	r0, r4
   28c62:	f7e3 fa51 	bl	c108 <__aeabi_dsub>
   28c66:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   28c6a:	45d8      	cmp	r8, fp
   28c6c:	f807 3b01 	strb.w	r3, [r7], #1
   28c70:	f000 82ec 	beq.w	2924c <_dtoa_r+0xb94>
   28c74:	4b84      	ldr	r3, [pc, #528]	@ (28e88 <_dtoa_r+0x7d0>)
   28c76:	2200      	movs	r2, #0
   28c78:	f7e3 fbfe 	bl	c478 <__aeabi_dmul>
   28c7c:	2200      	movs	r2, #0
   28c7e:	2300      	movs	r3, #0
   28c80:	4604      	mov	r4, r0
   28c82:	460d      	mov	r5, r1
   28c84:	f7e3 fe60 	bl	c948 <__aeabi_dcmpeq>
   28c88:	2800      	cmp	r0, #0
   28c8a:	d0d5      	beq.n	28c38 <_dtoa_r+0x580>
   28c8c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   28c8e:	f8dd a000 	ldr.w	sl, [sp]
   28c92:	3501      	adds	r5, #1
   28c94:	463e      	mov	r6, r7
   28c96:	e0b4      	b.n	28e02 <_dtoa_r+0x74a>
   28c98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   28c9a:	2a00      	cmp	r2, #0
   28c9c:	f040 80d8 	bne.w	28e50 <_dtoa_r+0x798>
   28ca0:	2300      	movs	r3, #0
   28ca2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   28ca4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
   28ca6:	930e      	str	r3, [sp, #56]	@ 0x38
   28ca8:	461f      	mov	r7, r3
   28caa:	b165      	cbz	r5, 28cc6 <_dtoa_r+0x60e>
   28cac:	9a08      	ldr	r2, [sp, #32]
   28cae:	2a00      	cmp	r2, #0
   28cb0:	dd09      	ble.n	28cc6 <_dtoa_r+0x60e>
   28cb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
   28cb4:	42aa      	cmp	r2, r5
   28cb6:	4613      	mov	r3, r2
   28cb8:	bfa8      	it	ge
   28cba:	462b      	movge	r3, r5
   28cbc:	1ac9      	subs	r1, r1, r3
   28cbe:	1aed      	subs	r5, r5, r3
   28cc0:	1ad3      	subs	r3, r2, r3
   28cc2:	910c      	str	r1, [sp, #48]	@ 0x30
   28cc4:	9308      	str	r3, [sp, #32]
   28cc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   28cc8:	b153      	cbz	r3, 28ce0 <_dtoa_r+0x628>
   28cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28ccc:	b113      	cbz	r3, 28cd4 <_dtoa_r+0x61c>
   28cce:	2e00      	cmp	r6, #0
   28cd0:	f040 82f7 	bne.w	292c2 <_dtoa_r+0xc0a>
   28cd4:	4651      	mov	r1, sl
   28cd6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   28cd8:	9804      	ldr	r0, [sp, #16]
   28cda:	f7fc ffb9 	bl	25c50 <__pow5mult>
   28cde:	4682      	mov	sl, r0
   28ce0:	9804      	ldr	r0, [sp, #16]
   28ce2:	2101      	movs	r1, #1
   28ce4:	f7fc fed0 	bl	25a88 <__i2b>
   28ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28cea:	9000      	str	r0, [sp, #0]
   28cec:	2b00      	cmp	r3, #0
   28cee:	f040 81be 	bne.w	2906e <_dtoa_r+0x9b6>
   28cf2:	9b02      	ldr	r3, [sp, #8]
   28cf4:	2b01      	cmp	r3, #1
   28cf6:	f340 81d4 	ble.w	290a2 <_dtoa_r+0x9ea>
   28cfa:	2001      	movs	r0, #1
   28cfc:	9a08      	ldr	r2, [sp, #32]
   28cfe:	4410      	add	r0, r2
   28d00:	f010 001f 	ands.w	r0, r0, #31
   28d04:	f000 809b 	beq.w	28e3e <_dtoa_r+0x786>
   28d08:	f1c0 0320 	rsb	r3, r0, #32
   28d0c:	2b04      	cmp	r3, #4
   28d0e:	f340 81e3 	ble.w	290d8 <_dtoa_r+0xa20>
   28d12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28d14:	f1c0 001c 	rsb	r0, r0, #28
   28d18:	4403      	add	r3, r0
   28d1a:	4402      	add	r2, r0
   28d1c:	930c      	str	r3, [sp, #48]	@ 0x30
   28d1e:	4405      	add	r5, r0
   28d20:	9208      	str	r2, [sp, #32]
   28d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28d24:	2b00      	cmp	r3, #0
   28d26:	dd05      	ble.n	28d34 <_dtoa_r+0x67c>
   28d28:	4651      	mov	r1, sl
   28d2a:	9804      	ldr	r0, [sp, #16]
   28d2c:	461a      	mov	r2, r3
   28d2e:	f7fc ffe9 	bl	25d04 <__lshift>
   28d32:	4682      	mov	sl, r0
   28d34:	9b08      	ldr	r3, [sp, #32]
   28d36:	2b00      	cmp	r3, #0
   28d38:	dd05      	ble.n	28d46 <_dtoa_r+0x68e>
   28d3a:	9900      	ldr	r1, [sp, #0]
   28d3c:	9804      	ldr	r0, [sp, #16]
   28d3e:	461a      	mov	r2, r3
   28d40:	f7fc ffe0 	bl	25d04 <__lshift>
   28d44:	9000      	str	r0, [sp, #0]
   28d46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   28d48:	2b00      	cmp	r3, #0
   28d4a:	f040 8175 	bne.w	29038 <_dtoa_r+0x980>
   28d4e:	f1bb 0f00 	cmp.w	fp, #0
   28d52:	f340 814c 	ble.w	28fee <_dtoa_r+0x936>
   28d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28d58:	2b00      	cmp	r3, #0
   28d5a:	f040 80a4 	bne.w	28ea6 <_dtoa_r+0x7ee>
   28d5e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   28d60:	3501      	adds	r5, #1
   28d62:	f8dd 8014 	ldr.w	r8, [sp, #20]
   28d66:	9c00      	ldr	r4, [sp, #0]
   28d68:	f8dd 9010 	ldr.w	r9, [sp, #16]
   28d6c:	2601      	movs	r6, #1
   28d6e:	e007      	b.n	28d80 <_dtoa_r+0x6c8>
   28d70:	4651      	mov	r1, sl
   28d72:	2300      	movs	r3, #0
   28d74:	220a      	movs	r2, #10
   28d76:	4648      	mov	r0, r9
   28d78:	f7fc fd8a 	bl	25890 <__multadd>
   28d7c:	3601      	adds	r6, #1
   28d7e:	4682      	mov	sl, r0
   28d80:	4621      	mov	r1, r4
   28d82:	4650      	mov	r0, sl
   28d84:	f7ff fc00 	bl	28588 <quorem>
   28d88:	45b3      	cmp	fp, r6
   28d8a:	f100 0030 	add.w	r0, r0, #48	@ 0x30
   28d8e:	f808 0b01 	strb.w	r0, [r8], #1
   28d92:	dced      	bgt.n	28d70 <_dtoa_r+0x6b8>
   28d94:	f1bb 0f00 	cmp.w	fp, #0
   28d98:	9b05      	ldr	r3, [sp, #20]
   28d9a:	bfcc      	ite	gt
   28d9c:	465e      	movgt	r6, fp
   28d9e:	2601      	movle	r6, #1
   28da0:	4681      	mov	r9, r0
   28da2:	eb03 0b06 	add.w	fp, r3, r6
   28da6:	2400      	movs	r4, #0
   28da8:	4651      	mov	r1, sl
   28daa:	2201      	movs	r2, #1
   28dac:	9804      	ldr	r0, [sp, #16]
   28dae:	f7fc ffa9 	bl	25d04 <__lshift>
   28db2:	9900      	ldr	r1, [sp, #0]
   28db4:	4682      	mov	sl, r0
   28db6:	f7fd f81d 	bl	25df4 <__mcmp>
   28dba:	2800      	cmp	r0, #0
   28dbc:	f340 81ee 	ble.w	2919c <_dtoa_r+0xae4>
   28dc0:	9a05      	ldr	r2, [sp, #20]
   28dc2:	e002      	b.n	28dca <_dtoa_r+0x712>
   28dc4:	4593      	cmp	fp, r2
   28dc6:	f000 8203 	beq.w	291d0 <_dtoa_r+0xb18>
   28dca:	465e      	mov	r6, fp
   28dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
   28dd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   28dd4:	2b39      	cmp	r3, #57	@ 0x39
   28dd6:	d0f5      	beq.n	28dc4 <_dtoa_r+0x70c>
   28dd8:	3301      	adds	r3, #1
   28dda:	f88b 3000 	strb.w	r3, [fp]
   28dde:	f8dd 8010 	ldr.w	r8, [sp, #16]
   28de2:	9900      	ldr	r1, [sp, #0]
   28de4:	4640      	mov	r0, r8
   28de6:	f7fc fd49 	bl	2587c <_Bfree>
   28dea:	b157      	cbz	r7, 28e02 <_dtoa_r+0x74a>
   28dec:	b12c      	cbz	r4, 28dfa <_dtoa_r+0x742>
   28dee:	42bc      	cmp	r4, r7
   28df0:	d003      	beq.n	28dfa <_dtoa_r+0x742>
   28df2:	4621      	mov	r1, r4
   28df4:	4640      	mov	r0, r8
   28df6:	f7fc fd41 	bl	2587c <_Bfree>
   28dfa:	9804      	ldr	r0, [sp, #16]
   28dfc:	4639      	mov	r1, r7
   28dfe:	f7fc fd3d 	bl	2587c <_Bfree>
   28e02:	9804      	ldr	r0, [sp, #16]
   28e04:	4651      	mov	r1, sl
   28e06:	f7fc fd39 	bl	2587c <_Bfree>
   28e0a:	2300      	movs	r3, #0
   28e0c:	7033      	strb	r3, [r6, #0]
   28e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   28e10:	601d      	str	r5, [r3, #0]
   28e12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   28e14:	2b00      	cmp	r3, #0
   28e16:	f43f ac8d 	beq.w	28734 <_dtoa_r+0x7c>
   28e1a:	9805      	ldr	r0, [sp, #20]
   28e1c:	601e      	str	r6, [r3, #0]
   28e1e:	b01d      	add	sp, #116	@ 0x74
   28e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e24:	4620      	mov	r0, r4
   28e26:	f7e3 fabd 	bl	c3a4 <__aeabi_i2d>
   28e2a:	4632      	mov	r2, r6
   28e2c:	463b      	mov	r3, r7
   28e2e:	f7e3 fd8b 	bl	c948 <__aeabi_dcmpeq>
   28e32:	2800      	cmp	r0, #0
   28e34:	f47f acd4 	bne.w	287e0 <_dtoa_r+0x128>
   28e38:	1e63      	subs	r3, r4, #1
   28e3a:	9309      	str	r3, [sp, #36]	@ 0x24
   28e3c:	e4d0      	b.n	287e0 <_dtoa_r+0x128>
   28e3e:	231c      	movs	r3, #28
   28e40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   28e42:	441a      	add	r2, r3
   28e44:	920c      	str	r2, [sp, #48]	@ 0x30
   28e46:	9a08      	ldr	r2, [sp, #32]
   28e48:	441a      	add	r2, r3
   28e4a:	441d      	add	r5, r3
   28e4c:	9208      	str	r2, [sp, #32]
   28e4e:	e768      	b.n	28d22 <_dtoa_r+0x66a>
   28e50:	9a02      	ldr	r2, [sp, #8]
   28e52:	2a01      	cmp	r2, #1
   28e54:	f340 81ad 	ble.w	291b2 <_dtoa_r+0xafa>
   28e58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   28e5a:	f10b 36ff 	add.w	r6, fp, #4294967295
   28e5e:	42b3      	cmp	r3, r6
   28e60:	f2c0 8169 	blt.w	29136 <_dtoa_r+0xa7e>
   28e64:	f1bb 0f00 	cmp.w	fp, #0
   28e68:	eba3 0606 	sub.w	r6, r3, r6
   28e6c:	f280 82ef 	bge.w	2944e <_dtoa_r+0xd96>
   28e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28e72:	eba3 050b 	sub.w	r5, r3, fp
   28e76:	e16c      	b.n	29152 <_dtoa_r+0xa9a>
   28e78:	f1c3 0320 	rsb	r3, r3, #32
   28e7c:	fa06 f003 	lsl.w	r0, r6, r3
   28e80:	e47a      	b.n	28778 <_dtoa_r+0xc0>
   28e82:	2501      	movs	r5, #1
   28e84:	e4df      	b.n	28846 <_dtoa_r+0x18e>
   28e86:	bf00      	nop
   28e88:	40240000 	.word	0x40240000
   28e8c:	4639      	mov	r1, r7
   28e8e:	2300      	movs	r3, #0
   28e90:	9804      	ldr	r0, [sp, #16]
   28e92:	220a      	movs	r2, #10
   28e94:	f7fc fcfc 	bl	25890 <__multadd>
   28e98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   28e9a:	2b00      	cmp	r3, #0
   28e9c:	4607      	mov	r7, r0
   28e9e:	f340 82ff 	ble.w	294a0 <_dtoa_r+0xde8>
   28ea2:	960d      	str	r6, [sp, #52]	@ 0x34
   28ea4:	469b      	mov	fp, r3
   28ea6:	2d00      	cmp	r5, #0
   28ea8:	dd05      	ble.n	28eb6 <_dtoa_r+0x7fe>
   28eaa:	4639      	mov	r1, r7
   28eac:	9804      	ldr	r0, [sp, #16]
   28eae:	462a      	mov	r2, r5
   28eb0:	f7fc ff28 	bl	25d04 <__lshift>
   28eb4:	4607      	mov	r7, r0
   28eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28eb8:	2b00      	cmp	r3, #0
   28eba:	f040 81e6 	bne.w	2928a <_dtoa_r+0xbd2>
   28ebe:	46b8      	mov	r8, r7
   28ec0:	9e05      	ldr	r6, [sp, #20]
   28ec2:	1e73      	subs	r3, r6, #1
   28ec4:	eb03 040b 	add.w	r4, r3, fp
   28ec8:	9b06      	ldr	r3, [sp, #24]
   28eca:	f003 0301 	and.w	r3, r3, #1
   28ece:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
   28ed2:	9c04      	ldr	r4, [sp, #16]
   28ed4:	9900      	ldr	r1, [sp, #0]
   28ed6:	4650      	mov	r0, sl
   28ed8:	f7ff fb56 	bl	28588 <quorem>
   28edc:	4639      	mov	r1, r7
   28ede:	4683      	mov	fp, r0
   28ee0:	4650      	mov	r0, sl
   28ee2:	f7fc ff87 	bl	25df4 <__mcmp>
   28ee6:	9900      	ldr	r1, [sp, #0]
   28ee8:	4605      	mov	r5, r0
   28eea:	4642      	mov	r2, r8
   28eec:	4620      	mov	r0, r4
   28eee:	f7fc ffa3 	bl	25e38 <__mdiff>
   28ef2:	68c3      	ldr	r3, [r0, #12]
   28ef4:	f10b 0930 	add.w	r9, fp, #48	@ 0x30
   28ef8:	4601      	mov	r1, r0
   28efa:	bbab      	cbnz	r3, 28f68 <_dtoa_r+0x8b0>
   28efc:	9009      	str	r0, [sp, #36]	@ 0x24
   28efe:	4650      	mov	r0, sl
   28f00:	f7fc ff78 	bl	25df4 <__mcmp>
   28f04:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28f06:	9008      	str	r0, [sp, #32]
   28f08:	4620      	mov	r0, r4
   28f0a:	f7fc fcb7 	bl	2587c <_Bfree>
   28f0e:	9a08      	ldr	r2, [sp, #32]
   28f10:	2a00      	cmp	r2, #0
   28f12:	d154      	bne.n	28fbe <_dtoa_r+0x906>
   28f14:	9b02      	ldr	r3, [sp, #8]
   28f16:	b91b      	cbnz	r3, 28f20 <_dtoa_r+0x868>
   28f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28f1a:	2b00      	cmp	r3, #0
   28f1c:	f000 82ae 	beq.w	2947c <_dtoa_r+0xdc4>
   28f20:	2d00      	cmp	r5, #0
   28f22:	db3f      	blt.n	28fa4 <_dtoa_r+0x8ec>
   28f24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28f26:	46b3      	mov	fp, r6
   28f28:	429e      	cmp	r6, r3
   28f2a:	f80b 9b01 	strb.w	r9, [fp], #1
   28f2e:	f000 81c3 	beq.w	292b8 <_dtoa_r+0xc00>
   28f32:	4651      	mov	r1, sl
   28f34:	2300      	movs	r3, #0
   28f36:	220a      	movs	r2, #10
   28f38:	4620      	mov	r0, r4
   28f3a:	f7fc fca9 	bl	25890 <__multadd>
   28f3e:	4547      	cmp	r7, r8
   28f40:	4682      	mov	sl, r0
   28f42:	4639      	mov	r1, r7
   28f44:	f04f 0300 	mov.w	r3, #0
   28f48:	f04f 020a 	mov.w	r2, #10
   28f4c:	4620      	mov	r0, r4
   28f4e:	d030      	beq.n	28fb2 <_dtoa_r+0x8fa>
   28f50:	f7fc fc9e 	bl	25890 <__multadd>
   28f54:	4641      	mov	r1, r8
   28f56:	4607      	mov	r7, r0
   28f58:	2300      	movs	r3, #0
   28f5a:	220a      	movs	r2, #10
   28f5c:	4620      	mov	r0, r4
   28f5e:	f7fc fc97 	bl	25890 <__multadd>
   28f62:	465e      	mov	r6, fp
   28f64:	4680      	mov	r8, r0
   28f66:	e7b5      	b.n	28ed4 <_dtoa_r+0x81c>
   28f68:	9804      	ldr	r0, [sp, #16]
   28f6a:	f7fc fc87 	bl	2587c <_Bfree>
   28f6e:	2d00      	cmp	r5, #0
   28f70:	db06      	blt.n	28f80 <_dtoa_r+0x8c8>
   28f72:	9b06      	ldr	r3, [sp, #24]
   28f74:	f003 0201 	and.w	r2, r3, #1
   28f78:	9b02      	ldr	r3, [sp, #8]
   28f7a:	431d      	orrs	r5, r3
   28f7c:	432a      	orrs	r2, r5
   28f7e:	d129      	bne.n	28fd4 <_dtoa_r+0x91c>
   28f80:	4651      	mov	r1, sl
   28f82:	2201      	movs	r2, #1
   28f84:	9804      	ldr	r0, [sp, #16]
   28f86:	f7fc febd 	bl	25d04 <__lshift>
   28f8a:	9900      	ldr	r1, [sp, #0]
   28f8c:	4682      	mov	sl, r0
   28f8e:	f7fc ff31 	bl	25df4 <__mcmp>
   28f92:	2800      	cmp	r0, #0
   28f94:	f340 80f6 	ble.w	29184 <_dtoa_r+0xacc>
   28f98:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   28f9c:	f000 8249 	beq.w	29432 <_dtoa_r+0xd7a>
   28fa0:	f10b 0931 	add.w	r9, fp, #49	@ 0x31
   28fa4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   28fa6:	f806 9b01 	strb.w	r9, [r6], #1
   28faa:	463c      	mov	r4, r7
   28fac:	3501      	adds	r5, #1
   28fae:	4647      	mov	r7, r8
   28fb0:	e715      	b.n	28dde <_dtoa_r+0x726>
   28fb2:	f7fc fc6d 	bl	25890 <__multadd>
   28fb6:	465e      	mov	r6, fp
   28fb8:	4607      	mov	r7, r0
   28fba:	4680      	mov	r8, r0
   28fbc:	e78a      	b.n	28ed4 <_dtoa_r+0x81c>
   28fbe:	2d00      	cmp	r5, #0
   28fc0:	f2c0 8293 	blt.w	294ea <_dtoa_r+0xe32>
   28fc4:	9b02      	ldr	r3, [sp, #8]
   28fc6:	431d      	orrs	r5, r3
   28fc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28fca:	431d      	orrs	r5, r3
   28fcc:	f000 828d 	beq.w	294ea <_dtoa_r+0xe32>
   28fd0:	2a00      	cmp	r2, #0
   28fd2:	dda7      	ble.n	28f24 <_dtoa_r+0x86c>
   28fd4:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   28fd8:	f000 822b 	beq.w	29432 <_dtoa_r+0xd7a>
   28fdc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   28fde:	f109 0301 	add.w	r3, r9, #1
   28fe2:	463c      	mov	r4, r7
   28fe4:	f806 3b01 	strb.w	r3, [r6], #1
   28fe8:	3501      	adds	r5, #1
   28fea:	4647      	mov	r7, r8
   28fec:	e6f7      	b.n	28dde <_dtoa_r+0x726>
   28fee:	9b02      	ldr	r3, [sp, #8]
   28ff0:	2b02      	cmp	r3, #2
   28ff2:	f77f aeb0 	ble.w	28d56 <_dtoa_r+0x69e>
   28ff6:	f1bb 0f00 	cmp.w	fp, #0
   28ffa:	f040 8125 	bne.w	29248 <_dtoa_r+0xb90>
   28ffe:	9900      	ldr	r1, [sp, #0]
   29000:	9804      	ldr	r0, [sp, #16]
   29002:	465b      	mov	r3, fp
   29004:	2205      	movs	r2, #5
   29006:	f7fc fc43 	bl	25890 <__multadd>
   2900a:	4601      	mov	r1, r0
   2900c:	9000      	str	r0, [sp, #0]
   2900e:	4650      	mov	r0, sl
   29010:	f7fc fef0 	bl	25df4 <__mcmp>
   29014:	2800      	cmp	r0, #0
   29016:	f340 8117 	ble.w	29248 <_dtoa_r+0xb90>
   2901a:	9e05      	ldr	r6, [sp, #20]
   2901c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2901e:	2331      	movs	r3, #49	@ 0x31
   29020:	f806 3b01 	strb.w	r3, [r6], #1
   29024:	3501      	adds	r5, #1
   29026:	9900      	ldr	r1, [sp, #0]
   29028:	9804      	ldr	r0, [sp, #16]
   2902a:	f7fc fc27 	bl	2587c <_Bfree>
   2902e:	3501      	adds	r5, #1
   29030:	2f00      	cmp	r7, #0
   29032:	f47f aee2 	bne.w	28dfa <_dtoa_r+0x742>
   29036:	e6e4      	b.n	28e02 <_dtoa_r+0x74a>
   29038:	9900      	ldr	r1, [sp, #0]
   2903a:	4650      	mov	r0, sl
   2903c:	f7fc feda 	bl	25df4 <__mcmp>
   29040:	2800      	cmp	r0, #0
   29042:	f6bf ae84 	bge.w	28d4e <_dtoa_r+0x696>
   29046:	4651      	mov	r1, sl
   29048:	2300      	movs	r3, #0
   2904a:	9804      	ldr	r0, [sp, #16]
   2904c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
   2904e:	220a      	movs	r2, #10
   29050:	f7fc fc1e 	bl	25890 <__multadd>
   29054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   29056:	1e66      	subs	r6, r4, #1
   29058:	4682      	mov	sl, r0
   2905a:	2b00      	cmp	r3, #0
   2905c:	f47f af16 	bne.w	28e8c <_dtoa_r+0x7d4>
   29060:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   29062:	2b00      	cmp	r3, #0
   29064:	f340 8211 	ble.w	2948a <_dtoa_r+0xdd2>
   29068:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2906a:	469b      	mov	fp, r3
   2906c:	e679      	b.n	28d62 <_dtoa_r+0x6aa>
   2906e:	4601      	mov	r1, r0
   29070:	461a      	mov	r2, r3
   29072:	9804      	ldr	r0, [sp, #16]
   29074:	f7fc fdec 	bl	25c50 <__pow5mult>
   29078:	9b02      	ldr	r3, [sp, #8]
   2907a:	9000      	str	r0, [sp, #0]
   2907c:	2b01      	cmp	r3, #1
   2907e:	dd6e      	ble.n	2915e <_dtoa_r+0xaa6>
   29080:	2300      	movs	r3, #0
   29082:	9309      	str	r3, [sp, #36]	@ 0x24
   29084:	9a00      	ldr	r2, [sp, #0]
   29086:	6913      	ldr	r3, [r2, #16]
   29088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2908c:	6918      	ldr	r0, [r3, #16]
   2908e:	f7fc fca9 	bl	259e4 <__hi0bits>
   29092:	f1c0 0020 	rsb	r0, r0, #32
   29096:	e631      	b.n	28cfc <_dtoa_r+0x644>
   29098:	4b98      	ldr	r3, [pc, #608]	@ (292fc <_dtoa_r+0xc44>)
   2909a:	9305      	str	r3, [sp, #20]
   2909c:	3303      	adds	r3, #3
   2909e:	f7ff bbed 	b.w	2887c <_dtoa_r+0x1c4>
   290a2:	9b06      	ldr	r3, [sp, #24]
   290a4:	2b00      	cmp	r3, #0
   290a6:	f47f ae28 	bne.w	28cfa <_dtoa_r+0x642>
   290aa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   290ae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   290b2:	2b00      	cmp	r3, #0
   290b4:	f47f ae21 	bne.w	28cfa <_dtoa_r+0x642>
   290b8:	4b91      	ldr	r3, [pc, #580]	@ (29300 <_dtoa_r+0xc48>)
   290ba:	4013      	ands	r3, r2
   290bc:	b133      	cbz	r3, 290cc <_dtoa_r+0xa14>
   290be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   290c0:	3301      	adds	r3, #1
   290c2:	930c      	str	r3, [sp, #48]	@ 0x30
   290c4:	9b08      	ldr	r3, [sp, #32]
   290c6:	3301      	adds	r3, #1
   290c8:	9308      	str	r3, [sp, #32]
   290ca:	2301      	movs	r3, #1
   290cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   290ce:	9309      	str	r3, [sp, #36]	@ 0x24
   290d0:	2a00      	cmp	r2, #0
   290d2:	f43f ae12 	beq.w	28cfa <_dtoa_r+0x642>
   290d6:	e7d5      	b.n	29084 <_dtoa_r+0x9cc>
   290d8:	f43f ae23 	beq.w	28d22 <_dtoa_r+0x66a>
   290dc:	f1c0 033c 	rsb	r3, r0, #60	@ 0x3c
   290e0:	e6ae      	b.n	28e40 <_dtoa_r+0x788>
   290e2:	2301      	movs	r3, #1
   290e4:	930e      	str	r3, [sp, #56]	@ 0x38
   290e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   290e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   290ea:	4413      	add	r3, r2
   290ec:	f103 0b01 	add.w	fp, r3, #1
   290f0:	465e      	mov	r6, fp
   290f2:	2e01      	cmp	r6, #1
   290f4:	9313      	str	r3, [sp, #76]	@ 0x4c
   290f6:	bfb8      	it	lt
   290f8:	2601      	movlt	r6, #1
   290fa:	2e17      	cmp	r6, #23
   290fc:	f340 81f9 	ble.w	294f2 <_dtoa_r+0xe3a>
   29100:	2201      	movs	r2, #1
   29102:	2304      	movs	r3, #4
   29104:	005b      	lsls	r3, r3, #1
   29106:	f103 0014 	add.w	r0, r3, #20
   2910a:	42b0      	cmp	r0, r6
   2910c:	4611      	mov	r1, r2
   2910e:	f102 0201 	add.w	r2, r2, #1
   29112:	d9f7      	bls.n	29104 <_dtoa_r+0xa4c>
   29114:	9b04      	ldr	r3, [sp, #16]
   29116:	63d9      	str	r1, [r3, #60]	@ 0x3c
   29118:	e404      	b.n	28924 <_dtoa_r+0x26c>
   2911a:	2301      	movs	r3, #1
   2911c:	930e      	str	r3, [sp, #56]	@ 0x38
   2911e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   29120:	2e00      	cmp	r6, #0
   29122:	dd36      	ble.n	29192 <_dtoa_r+0xada>
   29124:	9613      	str	r6, [sp, #76]	@ 0x4c
   29126:	46b3      	mov	fp, r6
   29128:	e7e7      	b.n	290fa <_dtoa_r+0xa42>
   2912a:	2300      	movs	r3, #0
   2912c:	930e      	str	r3, [sp, #56]	@ 0x38
   2912e:	e7da      	b.n	290e6 <_dtoa_r+0xa2e>
   29130:	2300      	movs	r3, #0
   29132:	930e      	str	r3, [sp, #56]	@ 0x38
   29134:	e7f3      	b.n	2911e <_dtoa_r+0xa66>
   29136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   29138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2913a:	9610      	str	r6, [sp, #64]	@ 0x40
   2913c:	1af3      	subs	r3, r6, r3
   2913e:	441a      	add	r2, r3
   29140:	9b08      	ldr	r3, [sp, #32]
   29142:	9209      	str	r2, [sp, #36]	@ 0x24
   29144:	445b      	add	r3, fp
   29146:	9308      	str	r3, [sp, #32]
   29148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2914a:	461d      	mov	r5, r3
   2914c:	445b      	add	r3, fp
   2914e:	930c      	str	r3, [sp, #48]	@ 0x30
   29150:	2600      	movs	r6, #0
   29152:	9804      	ldr	r0, [sp, #16]
   29154:	2101      	movs	r1, #1
   29156:	f7fc fc97 	bl	25a88 <__i2b>
   2915a:	4607      	mov	r7, r0
   2915c:	e5a5      	b.n	28caa <_dtoa_r+0x5f2>
   2915e:	9b06      	ldr	r3, [sp, #24]
   29160:	2b00      	cmp	r3, #0
   29162:	d18d      	bne.n	29080 <_dtoa_r+0x9c8>
   29164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   29168:	f3c1 0313 	ubfx	r3, r1, #0, #20
   2916c:	460a      	mov	r2, r1
   2916e:	2b00      	cmp	r3, #0
   29170:	d0a2      	beq.n	290b8 <_dtoa_r+0xa00>
   29172:	9009      	str	r0, [sp, #36]	@ 0x24
   29174:	e786      	b.n	29084 <_dtoa_r+0x9cc>
   29176:	ed9d 7b00 	vldr	d7, [sp]
   2917a:	2702      	movs	r7, #2
   2917c:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
   29180:	f7ff bbfd 	b.w	2897e <_dtoa_r+0x2c6>
   29184:	f47f af0e 	bne.w	28fa4 <_dtoa_r+0x8ec>
   29188:	f019 0f01 	tst.w	r9, #1
   2918c:	f47f af04 	bne.w	28f98 <_dtoa_r+0x8e0>
   29190:	e708      	b.n	28fa4 <_dtoa_r+0x8ec>
   29192:	2301      	movs	r3, #1
   29194:	930b      	str	r3, [sp, #44]	@ 0x2c
   29196:	469b      	mov	fp, r3
   29198:	f7ff bbbf 	b.w	2891a <_dtoa_r+0x262>
   2919c:	d103      	bne.n	291a6 <_dtoa_r+0xaee>
   2919e:	f019 0f01 	tst.w	r9, #1
   291a2:	f47f ae0d 	bne.w	28dc0 <_dtoa_r+0x708>
   291a6:	465e      	mov	r6, fp
   291a8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   291ac:	2b30      	cmp	r3, #48	@ 0x30
   291ae:	d0fa      	beq.n	291a6 <_dtoa_r+0xaee>
   291b0:	e615      	b.n	28dde <_dtoa_r+0x726>
   291b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   291b4:	2a00      	cmp	r2, #0
   291b6:	f000 809c 	beq.w	292f2 <_dtoa_r+0xc3a>
   291ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
   291be:	9a08      	ldr	r2, [sp, #32]
   291c0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   291c2:	441a      	add	r2, r3
   291c4:	9208      	str	r2, [sp, #32]
   291c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   291c8:	4615      	mov	r5, r2
   291ca:	441a      	add	r2, r3
   291cc:	920c      	str	r2, [sp, #48]	@ 0x30
   291ce:	e7c0      	b.n	29152 <_dtoa_r+0xa9a>
   291d0:	9a05      	ldr	r2, [sp, #20]
   291d2:	2331      	movs	r3, #49	@ 0x31
   291d4:	3501      	adds	r5, #1
   291d6:	7013      	strb	r3, [r2, #0]
   291d8:	e601      	b.n	28dde <_dtoa_r+0x726>
   291da:	f000 80fa 	beq.w	293d2 <_dtoa_r+0xd1a>
   291de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   291e0:	4b48      	ldr	r3, [pc, #288]	@ (29304 <_dtoa_r+0xc4c>)
   291e2:	4255      	negs	r5, r2
   291e4:	f005 020f 	and.w	r2, r5, #15
   291e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   291ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   291f0:	e9dd 0100 	ldrd	r0, r1, [sp]
   291f4:	f7e3 f940 	bl	c478 <__aeabi_dmul>
   291f8:	112d      	asrs	r5, r5, #4
   291fa:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   291fe:	f000 8158 	beq.w	294b2 <_dtoa_r+0xdfa>
   29202:	4e41      	ldr	r6, [pc, #260]	@ (29308 <_dtoa_r+0xc50>)
   29204:	2300      	movs	r3, #0
   29206:	2702      	movs	r7, #2
   29208:	4680      	mov	r8, r0
   2920a:	4689      	mov	r9, r1
   2920c:	07ea      	lsls	r2, r5, #31
   2920e:	d509      	bpl.n	29224 <_dtoa_r+0xb6c>
   29210:	e9d6 2300 	ldrd	r2, r3, [r6]
   29214:	4640      	mov	r0, r8
   29216:	4649      	mov	r1, r9
   29218:	f7e3 f92e 	bl	c478 <__aeabi_dmul>
   2921c:	3701      	adds	r7, #1
   2921e:	4680      	mov	r8, r0
   29220:	4689      	mov	r9, r1
   29222:	2301      	movs	r3, #1
   29224:	106d      	asrs	r5, r5, #1
   29226:	f106 0608 	add.w	r6, r6, #8
   2922a:	d1ef      	bne.n	2920c <_dtoa_r+0xb54>
   2922c:	2b00      	cmp	r3, #0
   2922e:	f47f abbf 	bne.w	289b0 <_dtoa_r+0x2f8>
   29232:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	@ 0x50
   29236:	f7ff bbbb 	b.w	289b0 <_dtoa_r+0x2f8>
   2923a:	f1c8 0301 	rsb	r3, r8, #1
   2923e:	9008      	str	r0, [sp, #32]
   29240:	930c      	str	r3, [sp, #48]	@ 0x30
   29242:	9011      	str	r0, [sp, #68]	@ 0x44
   29244:	f7ff bb58 	b.w	288f8 <_dtoa_r+0x240>
   29248:	9e05      	ldr	r6, [sp, #20]
   2924a:	e4bb      	b.n	28bc4 <_dtoa_r+0x50c>
   2924c:	f8dd a000 	ldr.w	sl, [sp]
   29250:	4602      	mov	r2, r0
   29252:	460b      	mov	r3, r1
   29254:	f7e2 ff5a 	bl	c10c <__adddf3>
   29258:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2925a:	e9cd 0100 	strd	r0, r1, [sp]
   2925e:	3501      	adds	r5, #1
   29260:	4602      	mov	r2, r0
   29262:	460b      	mov	r3, r1
   29264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29268:	46a8      	mov	r8, r5
   2926a:	f7e3 fb77 	bl	c95c <__aeabi_dcmplt>
   2926e:	b940      	cbnz	r0, 29282 <_dtoa_r+0xbca>
   29270:	e9dd 2300 	ldrd	r2, r3, [sp]
   29274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29278:	f7e3 fb66 	bl	c948 <__aeabi_dcmpeq>
   2927c:	b118      	cbz	r0, 29286 <_dtoa_r+0xbce>
   2927e:	07f3      	lsls	r3, r6, #31
   29280:	d501      	bpl.n	29286 <_dtoa_r+0xbce>
   29282:	9a05      	ldr	r2, [sp, #20]
   29284:	e435      	b.n	28af2 <_dtoa_r+0x43a>
   29286:	463e      	mov	r6, r7
   29288:	e5bb      	b.n	28e02 <_dtoa_r+0x74a>
   2928a:	6879      	ldr	r1, [r7, #4]
   2928c:	9804      	ldr	r0, [sp, #16]
   2928e:	f7fc facf 	bl	25830 <_Balloc>
   29292:	4605      	mov	r5, r0
   29294:	2800      	cmp	r0, #0
   29296:	f000 8121 	beq.w	294dc <_dtoa_r+0xe24>
   2929a:	693b      	ldr	r3, [r7, #16]
   2929c:	3302      	adds	r3, #2
   2929e:	009a      	lsls	r2, r3, #2
   292a0:	f107 010c 	add.w	r1, r7, #12
   292a4:	300c      	adds	r0, #12
   292a6:	f7e3 fc43 	bl	cb30 <memcpy>
   292aa:	9804      	ldr	r0, [sp, #16]
   292ac:	4629      	mov	r1, r5
   292ae:	2201      	movs	r2, #1
   292b0:	f7fc fd28 	bl	25d04 <__lshift>
   292b4:	4680      	mov	r8, r0
   292b6:	e603      	b.n	28ec0 <_dtoa_r+0x808>
   292b8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   292ba:	463c      	mov	r4, r7
   292bc:	3501      	adds	r5, #1
   292be:	4647      	mov	r7, r8
   292c0:	e572      	b.n	28da8 <_dtoa_r+0x6f0>
   292c2:	9c04      	ldr	r4, [sp, #16]
   292c4:	4639      	mov	r1, r7
   292c6:	4632      	mov	r2, r6
   292c8:	4620      	mov	r0, r4
   292ca:	f7fc fcc1 	bl	25c50 <__pow5mult>
   292ce:	4652      	mov	r2, sl
   292d0:	4601      	mov	r1, r0
   292d2:	4607      	mov	r7, r0
   292d4:	4620      	mov	r0, r4
   292d6:	f7fc fc05 	bl	25ae4 <__multiply>
   292da:	4651      	mov	r1, sl
   292dc:	4680      	mov	r8, r0
   292de:	4620      	mov	r0, r4
   292e0:	f7fc facc 	bl	2587c <_Bfree>
   292e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   292e6:	1b9b      	subs	r3, r3, r6
   292e8:	46c2      	mov	sl, r8
   292ea:	9310      	str	r3, [sp, #64]	@ 0x40
   292ec:	f43f acf8 	beq.w	28ce0 <_dtoa_r+0x628>
   292f0:	e4f0      	b.n	28cd4 <_dtoa_r+0x61c>
   292f2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   292f4:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
   292f8:	e761      	b.n	291be <_dtoa_r+0xb06>
   292fa:	bf00      	nop
   292fc:	00030b34 	.word	0x00030b34
   29300:	7ff00000 	.word	0x7ff00000
   29304:	00031558 	.word	0x00031558
   29308:	00031530 	.word	0x00031530
   2930c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
   29310:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   29314:	f7e3 f8b0 	bl	c478 <__aeabi_dmul>
   29318:	9b05      	ldr	r3, [sp, #20]
   2931a:	701c      	strb	r4, [r3, #0]
   2931c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   2931e:	2b01      	cmp	r3, #1
   29320:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   29324:	f000 80c3 	beq.w	294ae <_dtoa_r+0xdf6>
   29328:	9f18      	ldr	r7, [sp, #96]	@ 0x60
   2932a:	9b05      	ldr	r3, [sp, #20]
   2932c:	9612      	str	r6, [sp, #72]	@ 0x48
   2932e:	441f      	add	r7, r3
   29330:	4b7a      	ldr	r3, [pc, #488]	@ (2951c <_dtoa_r+0xe64>)
   29332:	2200      	movs	r2, #0
   29334:	4640      	mov	r0, r8
   29336:	4649      	mov	r1, r9
   29338:	f7e3 f89e 	bl	c478 <__aeabi_dmul>
   2933c:	460d      	mov	r5, r1
   2933e:	4604      	mov	r4, r0
   29340:	f7e3 fd20 	bl	cd84 <__aeabi_d2iz>
   29344:	4681      	mov	r9, r0
   29346:	f7e3 f82d 	bl	c3a4 <__aeabi_i2d>
   2934a:	f109 0930 	add.w	r9, r9, #48	@ 0x30
   2934e:	4602      	mov	r2, r0
   29350:	460b      	mov	r3, r1
   29352:	4620      	mov	r0, r4
   29354:	4629      	mov	r1, r5
   29356:	f7e2 fed7 	bl	c108 <__aeabi_dsub>
   2935a:	f806 9b01 	strb.w	r9, [r6], #1
   2935e:	42be      	cmp	r6, r7
   29360:	4680      	mov	r8, r0
   29362:	4689      	mov	r9, r1
   29364:	d1e4      	bne.n	29330 <_dtoa_r+0xc78>
   29366:	9d12      	ldr	r5, [sp, #72]	@ 0x48
   29368:	4b6d      	ldr	r3, [pc, #436]	@ (29520 <_dtoa_r+0xe68>)
   2936a:	2200      	movs	r2, #0
   2936c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
   29370:	f7e2 fecc 	bl	c10c <__adddf3>
   29374:	4602      	mov	r2, r0
   29376:	460b      	mov	r3, r1
   29378:	4640      	mov	r0, r8
   2937a:	4649      	mov	r1, r9
   2937c:	f7e3 fb0c 	bl	c998 <__aeabi_dcmpgt>
   29380:	2800      	cmp	r0, #0
   29382:	d16c      	bne.n	2945e <_dtoa_r+0xda6>
   29384:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   29388:	4965      	ldr	r1, [pc, #404]	@ (29520 <_dtoa_r+0xe68>)
   2938a:	2000      	movs	r0, #0
   2938c:	f7e2 febc 	bl	c108 <__aeabi_dsub>
   29390:	4602      	mov	r2, r0
   29392:	460b      	mov	r3, r1
   29394:	4640      	mov	r0, r8
   29396:	4649      	mov	r1, r9
   29398:	f7e3 fae0 	bl	c95c <__aeabi_dcmplt>
   2939c:	b980      	cbnz	r0, 293c0 <_dtoa_r+0xd08>
   2939e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   293a0:	2b00      	cmp	r3, #0
   293a2:	f6ff ac7d 	blt.w	28ca0 <_dtoa_r+0x5e8>
   293a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   293a8:	2b0e      	cmp	r3, #14
   293aa:	f73f ac79 	bgt.w	28ca0 <_dtoa_r+0x5e8>
   293ae:	4b5d      	ldr	r3, [pc, #372]	@ (29524 <_dtoa_r+0xe6c>)
   293b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   293b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   293b6:	ed93 7b00 	vldr	d7, [r3]
   293ba:	ed8d 7b02 	vstr	d7, [sp, #8]
   293be:	e406      	b.n	28bce <_dtoa_r+0x516>
   293c0:	463e      	mov	r6, r7
   293c2:	3f01      	subs	r7, #1
   293c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   293c8:	2b30      	cmp	r3, #48	@ 0x30
   293ca:	d0f9      	beq.n	293c0 <_dtoa_r+0xd08>
   293cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
   293ce:	3501      	adds	r5, #1
   293d0:	e517      	b.n	28e02 <_dtoa_r+0x74a>
   293d2:	e9dd 8900 	ldrd	r8, r9, [sp]
   293d6:	2702      	movs	r7, #2
   293d8:	f7ff baea 	b.w	289b0 <_dtoa_r+0x2f8>
   293dc:	f1bb 0f00 	cmp.w	fp, #0
   293e0:	f43f ab9d 	beq.w	28b1e <_dtoa_r+0x466>
   293e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
   293e6:	2c00      	cmp	r4, #0
   293e8:	f77f abc2 	ble.w	28b70 <_dtoa_r+0x4b8>
   293ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   293ee:	3b01      	subs	r3, #1
   293f0:	2200      	movs	r2, #0
   293f2:	4640      	mov	r0, r8
   293f4:	4649      	mov	r1, r9
   293f6:	9319      	str	r3, [sp, #100]	@ 0x64
   293f8:	4b48      	ldr	r3, [pc, #288]	@ (2951c <_dtoa_r+0xe64>)
   293fa:	f7e3 f83d 	bl	c478 <__aeabi_dmul>
   293fe:	4680      	mov	r8, r0
   29400:	4689      	mov	r9, r1
   29402:	1c78      	adds	r0, r7, #1
   29404:	f7e2 ffce 	bl	c3a4 <__aeabi_i2d>
   29408:	4642      	mov	r2, r8
   2940a:	464b      	mov	r3, r9
   2940c:	f7e3 f834 	bl	c478 <__aeabi_dmul>
   29410:	4b45      	ldr	r3, [pc, #276]	@ (29528 <_dtoa_r+0xe70>)
   29412:	2200      	movs	r2, #0
   29414:	f7e2 fe7a 	bl	c10c <__adddf3>
   29418:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2941c:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   29420:	9418      	str	r4, [sp, #96]	@ 0x60
   29422:	9315      	str	r3, [sp, #84]	@ 0x54
   29424:	f7ff bae6 	b.w	289f4 <_dtoa_r+0x33c>
   29428:	f108 0801 	add.w	r8, r8, #1
   2942c:	2331      	movs	r3, #49	@ 0x31
   2942e:	f7ff bb67 	b.w	28b00 <_dtoa_r+0x448>
   29432:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   29434:	9a05      	ldr	r2, [sp, #20]
   29436:	46b3      	mov	fp, r6
   29438:	2339      	movs	r3, #57	@ 0x39
   2943a:	463c      	mov	r4, r7
   2943c:	f80b 3b01 	strb.w	r3, [fp], #1
   29440:	3501      	adds	r5, #1
   29442:	4647      	mov	r7, r8
   29444:	e4c1      	b.n	28dca <_dtoa_r+0x712>
   29446:	2300      	movs	r3, #0
   29448:	9300      	str	r3, [sp, #0]
   2944a:	461f      	mov	r7, r3
   2944c:	e5e5      	b.n	2901a <_dtoa_r+0x962>
   2944e:	9b08      	ldr	r3, [sp, #32]
   29450:	445b      	add	r3, fp
   29452:	9308      	str	r3, [sp, #32]
   29454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   29456:	461d      	mov	r5, r3
   29458:	445b      	add	r3, fp
   2945a:	930c      	str	r3, [sp, #48]	@ 0x30
   2945c:	e679      	b.n	29152 <_dtoa_r+0xa9a>
   2945e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   29460:	9a05      	ldr	r2, [sp, #20]
   29462:	f103 0801 	add.w	r8, r3, #1
   29466:	f7ff bb44 	b.w	28af2 <_dtoa_r+0x43a>
   2946a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2946e:	e7ad      	b.n	293cc <_dtoa_r+0xd14>
   29470:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   29474:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
   29478:	f7ff bb7a 	b.w	28b70 <_dtoa_r+0x4b8>
   2947c:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   29480:	d0d7      	beq.n	29432 <_dtoa_r+0xd7a>
   29482:	2d00      	cmp	r5, #0
   29484:	f73f ad8c 	bgt.w	28fa0 <_dtoa_r+0x8e8>
   29488:	e58c      	b.n	28fa4 <_dtoa_r+0x8ec>
   2948a:	9b02      	ldr	r3, [sp, #8]
   2948c:	2b02      	cmp	r3, #2
   2948e:	dc03      	bgt.n	29498 <_dtoa_r+0xde0>
   29490:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   29492:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   29496:	e464      	b.n	28d62 <_dtoa_r+0x6aa>
   29498:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2949c:	960d      	str	r6, [sp, #52]	@ 0x34
   2949e:	e5aa      	b.n	28ff6 <_dtoa_r+0x93e>
   294a0:	9b02      	ldr	r3, [sp, #8]
   294a2:	2b02      	cmp	r3, #2
   294a4:	dcf8      	bgt.n	29498 <_dtoa_r+0xde0>
   294a6:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   294aa:	960d      	str	r6, [sp, #52]	@ 0x34
   294ac:	e4fb      	b.n	28ea6 <_dtoa_r+0x7ee>
   294ae:	4637      	mov	r7, r6
   294b0:	e75a      	b.n	29368 <_dtoa_r+0xcb0>
   294b2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	@ 0x50
   294b6:	2702      	movs	r7, #2
   294b8:	f7ff ba7a 	b.w	289b0 <_dtoa_r+0x2f8>
   294bc:	9b04      	ldr	r3, [sp, #16]
   294be:	2500      	movs	r5, #0
   294c0:	63dd      	str	r5, [r3, #60]	@ 0x3c
   294c2:	4629      	mov	r1, r5
   294c4:	4618      	mov	r0, r3
   294c6:	f7fc f9b3 	bl	25830 <_Balloc>
   294ca:	9005      	str	r0, [sp, #20]
   294cc:	b9d0      	cbnz	r0, 29504 <_dtoa_r+0xe4c>
   294ce:	4b17      	ldr	r3, [pc, #92]	@ (2952c <_dtoa_r+0xe74>)
   294d0:	4817      	ldr	r0, [pc, #92]	@ (29530 <_dtoa_r+0xe78>)
   294d2:	2200      	movs	r2, #0
   294d4:	f240 11af 	movw	r1, #431	@ 0x1af
   294d8:	f7f8 faa8 	bl	21a2c <__assert_func>
   294dc:	4b13      	ldr	r3, [pc, #76]	@ (2952c <_dtoa_r+0xe74>)
   294de:	4814      	ldr	r0, [pc, #80]	@ (29530 <_dtoa_r+0xe78>)
   294e0:	462a      	mov	r2, r5
   294e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
   294e6:	f7f8 faa1 	bl	21a2c <__assert_func>
   294ea:	2a00      	cmp	r2, #0
   294ec:	f73f ad48 	bgt.w	28f80 <_dtoa_r+0x8c8>
   294f0:	e558      	b.n	28fa4 <_dtoa_r+0x8ec>
   294f2:	9b04      	ldr	r3, [sp, #16]
   294f4:	2100      	movs	r1, #0
   294f6:	63d9      	str	r1, [r3, #60]	@ 0x3c
   294f8:	f7ff ba14 	b.w	28924 <_dtoa_r+0x26c>
   294fc:	4b0d      	ldr	r3, [pc, #52]	@ (29534 <_dtoa_r+0xe7c>)
   294fe:	9305      	str	r3, [sp, #20]
   29500:	f7ff b918 	b.w	28734 <_dtoa_r+0x7c>
   29504:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   29508:	639a      	str	r2, [r3, #56]	@ 0x38
   2950a:	f04f 33ff 	mov.w	r3, #4294967295
   2950e:	2201      	movs	r2, #1
   29510:	950b      	str	r5, [sp, #44]	@ 0x2c
   29512:	9313      	str	r3, [sp, #76]	@ 0x4c
   29514:	920e      	str	r2, [sp, #56]	@ 0x38
   29516:	469b      	mov	fp, r3
   29518:	f7ff bb2a 	b.w	28b70 <_dtoa_r+0x4b8>
   2951c:	40240000 	.word	0x40240000
   29520:	3fe00000 	.word	0x3fe00000
   29524:	00031558 	.word	0x00031558
   29528:	401c0000 	.word	0x401c0000
   2952c:	000309f4 	.word	0x000309f4
   29530:	00030b38 	.word	0x00030b38
   29534:	00030b28 	.word	0x00030b28

00029538 <_wcsnrtombs_l>:
   29538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2953c:	b08b      	sub	sp, #44	@ 0x2c
   2953e:	e9dd 7a15 	ldrd	r7, sl, [sp, #84]	@ 0x54
   29542:	4686      	mov	lr, r0
   29544:	461e      	mov	r6, r3
   29546:	2f00      	cmp	r7, #0
   29548:	d05a      	beq.n	29600 <_wcsnrtombs_l+0xc8>
   2954a:	6815      	ldr	r5, [r2, #0]
   2954c:	2900      	cmp	r1, #0
   2954e:	d05c      	beq.n	2960a <_wcsnrtombs_l+0xd2>
   29550:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   29552:	2b00      	cmp	r3, #0
   29554:	d069      	beq.n	2962a <_wcsnrtombs_l+0xf2>
   29556:	1e74      	subs	r4, r6, #1
   29558:	b34e      	cbz	r6, 295ae <_wcsnrtombs_l+0x76>
   2955a:	3d04      	subs	r5, #4
   2955c:	e9cd 5e01 	strd	r5, lr, [sp, #4]
   29560:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
   29564:	9104      	str	r1, [sp, #16]
   29566:	2600      	movs	r6, #0
   29568:	9103      	str	r1, [sp, #12]
   2956a:	9205      	str	r2, [sp, #20]
   2956c:	e00b      	b.n	29586 <_wcsnrtombs_l+0x4e>
   2956e:	9b03      	ldr	r3, [sp, #12]
   29570:	bb0b      	cbnz	r3, 295b6 <_wcsnrtombs_l+0x7e>
   29572:	9b01      	ldr	r3, [sp, #4]
   29574:	6818      	ldr	r0, [r3, #0]
   29576:	2800      	cmp	r0, #0
   29578:	d036      	beq.n	295e8 <_wcsnrtombs_l+0xb0>
   2957a:	45dc      	cmp	ip, fp
   2957c:	d257      	bcs.n	2962e <_wcsnrtombs_l+0xf6>
   2957e:	3c01      	subs	r4, #1
   29580:	1c63      	adds	r3, r4, #1
   29582:	4666      	mov	r6, ip
   29584:	d013      	beq.n	295ae <_wcsnrtombs_l+0x76>
   29586:	9b01      	ldr	r3, [sp, #4]
   29588:	9802      	ldr	r0, [sp, #8]
   2958a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2958e:	9301      	str	r3, [sp, #4]
   29590:	f8da 50e0 	ldr.w	r5, [sl, #224]	@ 0xe0
   29594:	463b      	mov	r3, r7
   29596:	a907      	add	r1, sp, #28
   29598:	e9d7 9800 	ldrd	r9, r8, [r7]
   2959c:	47a8      	blx	r5
   2959e:	1c42      	adds	r2, r0, #1
   295a0:	d037      	beq.n	29612 <_wcsnrtombs_l+0xda>
   295a2:	eb00 0c06 	add.w	ip, r0, r6
   295a6:	45dc      	cmp	ip, fp
   295a8:	d9e1      	bls.n	2956e <_wcsnrtombs_l+0x36>
   295aa:	e9c7 9800 	strd	r9, r8, [r7]
   295ae:	4630      	mov	r0, r6
   295b0:	b00b      	add	sp, #44	@ 0x2c
   295b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295b6:	2800      	cmp	r0, #0
   295b8:	dd0e      	ble.n	295d8 <_wcsnrtombs_l+0xa0>
   295ba:	9b04      	ldr	r3, [sp, #16]
   295bc:	9d01      	ldr	r5, [sp, #4]
   295be:	4418      	add	r0, r3
   295c0:	1e5a      	subs	r2, r3, #1
   295c2:	a907      	add	r1, sp, #28
   295c4:	f100 3eff 	add.w	lr, r0, #4294967295
   295c8:	f811 3b01 	ldrb.w	r3, [r1], #1
   295cc:	f802 3f01 	strb.w	r3, [r2, #1]!
   295d0:	4572      	cmp	r2, lr
   295d2:	d1f9      	bne.n	295c8 <_wcsnrtombs_l+0x90>
   295d4:	9501      	str	r5, [sp, #4]
   295d6:	9004      	str	r0, [sp, #16]
   295d8:	9b05      	ldr	r3, [sp, #20]
   295da:	681a      	ldr	r2, [r3, #0]
   295dc:	3204      	adds	r2, #4
   295de:	601a      	str	r2, [r3, #0]
   295e0:	9b01      	ldr	r3, [sp, #4]
   295e2:	6818      	ldr	r0, [r3, #0]
   295e4:	2800      	cmp	r0, #0
   295e6:	d1c8      	bne.n	2957a <_wcsnrtombs_l+0x42>
   295e8:	9903      	ldr	r1, [sp, #12]
   295ea:	9a05      	ldr	r2, [sp, #20]
   295ec:	b101      	cbz	r1, 295f0 <_wcsnrtombs_l+0xb8>
   295ee:	6010      	str	r0, [r2, #0]
   295f0:	f10c 36ff 	add.w	r6, ip, #4294967295
   295f4:	2200      	movs	r2, #0
   295f6:	4630      	mov	r0, r6
   295f8:	603a      	str	r2, [r7, #0]
   295fa:	b00b      	add	sp, #44	@ 0x2c
   295fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29600:	6815      	ldr	r5, [r2, #0]
   29602:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
   29606:	2900      	cmp	r1, #0
   29608:	d1a2      	bne.n	29550 <_wcsnrtombs_l+0x18>
   2960a:	f04f 33ff 	mov.w	r3, #4294967295
   2960e:	9314      	str	r3, [sp, #80]	@ 0x50
   29610:	e7a1      	b.n	29556 <_wcsnrtombs_l+0x1e>
   29612:	f8dd e008 	ldr.w	lr, [sp, #8]
   29616:	4606      	mov	r6, r0
   29618:	218a      	movs	r1, #138	@ 0x8a
   2961a:	2200      	movs	r2, #0
   2961c:	4630      	mov	r0, r6
   2961e:	f8ce 1000 	str.w	r1, [lr]
   29622:	603a      	str	r2, [r7, #0]
   29624:	b00b      	add	sp, #44	@ 0x2c
   29626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2962a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
   2962c:	e7bf      	b.n	295ae <_wcsnrtombs_l+0x76>
   2962e:	4666      	mov	r6, ip
   29630:	e7bd      	b.n	295ae <_wcsnrtombs_l+0x76>
   29632:	bf00      	nop

00029634 <_wcsnrtombs_r>:
   29634:	b510      	push	{r4, lr}
   29636:	b084      	sub	sp, #16
   29638:	4c05      	ldr	r4, [pc, #20]	@ (29650 <_wcsnrtombs_r+0x1c>)
   2963a:	9806      	ldr	r0, [sp, #24]
   2963c:	9000      	str	r0, [sp, #0]
   2963e:	9807      	ldr	r0, [sp, #28]
   29640:	9001      	str	r0, [sp, #4]
   29642:	4804      	ldr	r0, [pc, #16]	@ (29654 <_wcsnrtombs_r+0x20>)
   29644:	6800      	ldr	r0, [r0, #0]
   29646:	9402      	str	r4, [sp, #8]
   29648:	f7ff ff76 	bl	29538 <_wcsnrtombs_l>
   2964c:	b004      	add	sp, #16
   2964e:	bd10      	pop	{r4, pc}
   29650:	10002434 	.word	0x10002434
   29654:	100025a0 	.word	0x100025a0

00029658 <__ssputs_r>:
   29658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2965c:	688f      	ldr	r7, [r1, #8]
   2965e:	461d      	mov	r5, r3
   29660:	42af      	cmp	r7, r5
   29662:	680b      	ldr	r3, [r1, #0]
   29664:	460c      	mov	r4, r1
   29666:	4616      	mov	r6, r2
   29668:	d836      	bhi.n	296d8 <__ssputs_r+0x80>
   2966a:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   2966e:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
   29672:	d10e      	bne.n	29692 <__ssputs_r+0x3a>
   29674:	463d      	mov	r5, r7
   29676:	4618      	mov	r0, r3
   29678:	4631      	mov	r1, r6
   2967a:	462a      	mov	r2, r5
   2967c:	f7fa fe08 	bl	24290 <memmove>
   29680:	68a3      	ldr	r3, [r4, #8]
   29682:	1bdf      	subs	r7, r3, r7
   29684:	6823      	ldr	r3, [r4, #0]
   29686:	60a7      	str	r7, [r4, #8]
   29688:	442b      	add	r3, r5
   2968a:	2000      	movs	r0, #0
   2968c:	6023      	str	r3, [r4, #0]
   2968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29692:	694a      	ldr	r2, [r1, #20]
   29694:	6909      	ldr	r1, [r1, #16]
   29696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2969a:	1a5f      	subs	r7, r3, r1
   2969c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   296a0:	1c6b      	adds	r3, r5, #1
   296a2:	1052      	asrs	r2, r2, #1
   296a4:	443b      	add	r3, r7
   296a6:	4293      	cmp	r3, r2
   296a8:	bf92      	itee	ls
   296aa:	4691      	movls	r9, r2
   296ac:	4699      	movhi	r9, r3
   296ae:	461a      	movhi	r2, r3
   296b0:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
   296b4:	4680      	mov	r8, r0
   296b6:	d011      	beq.n	296dc <__ssputs_r+0x84>
   296b8:	4611      	mov	r1, r2
   296ba:	f7fb fde5 	bl	25288 <_malloc_r>
   296be:	4682      	mov	sl, r0
   296c0:	b300      	cbz	r0, 29704 <__ssputs_r+0xac>
   296c2:	6921      	ldr	r1, [r4, #16]
   296c4:	463a      	mov	r2, r7
   296c6:	f7e3 fa33 	bl	cb30 <memcpy>
   296ca:	89a3      	ldrh	r3, [r4, #12]
   296cc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
   296d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   296d4:	81a3      	strh	r3, [r4, #12]
   296d6:	e005      	b.n	296e4 <__ssputs_r+0x8c>
   296d8:	462f      	mov	r7, r5
   296da:	e7cc      	b.n	29676 <__ssputs_r+0x1e>
   296dc:	f7fc fde4 	bl	262a8 <_realloc_r>
   296e0:	4682      	mov	sl, r0
   296e2:	b158      	cbz	r0, 296fc <__ssputs_r+0xa4>
   296e4:	eb0a 0307 	add.w	r3, sl, r7
   296e8:	eba9 0707 	sub.w	r7, r9, r7
   296ec:	60a7      	str	r7, [r4, #8]
   296ee:	f8c4 a010 	str.w	sl, [r4, #16]
   296f2:	f8c4 9014 	str.w	r9, [r4, #20]
   296f6:	6023      	str	r3, [r4, #0]
   296f8:	462f      	mov	r7, r5
   296fa:	e7bc      	b.n	29676 <__ssputs_r+0x1e>
   296fc:	6921      	ldr	r1, [r4, #16]
   296fe:	4640      	mov	r0, r8
   29700:	f7fb f8ac 	bl	2485c <_free_r>
   29704:	89a3      	ldrh	r3, [r4, #12]
   29706:	220c      	movs	r2, #12
   29708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2970c:	f8c8 2000 	str.w	r2, [r8]
   29710:	f04f 30ff 	mov.w	r0, #4294967295
   29714:	81a3      	strh	r3, [r4, #12]
   29716:	e7ba      	b.n	2968e <__ssputs_r+0x36>

00029718 <sqrt>:
   29718:	b538      	push	{r3, r4, r5, lr}
   2971a:	ed2d 8b02 	vpush	{d8}
   2971e:	ec55 4b10 	vmov	r4, r5, d0
   29722:	f000 f82d 	bl	29780 <__ieee754_sqrt>
   29726:	4622      	mov	r2, r4
   29728:	462b      	mov	r3, r5
   2972a:	4620      	mov	r0, r4
   2972c:	4629      	mov	r1, r5
   2972e:	eeb0 8a40 	vmov.f32	s16, s0
   29732:	eef0 8a60 	vmov.f32	s17, s1
   29736:	f7e3 fb0f 	bl	cd58 <__aeabi_dcmpun>
   2973a:	b930      	cbnz	r0, 2974a <sqrt+0x32>
   2973c:	2200      	movs	r2, #0
   2973e:	2300      	movs	r3, #0
   29740:	4620      	mov	r0, r4
   29742:	4629      	mov	r1, r5
   29744:	f7e3 f90a 	bl	c95c <__aeabi_dcmplt>
   29748:	b930      	cbnz	r0, 29758 <sqrt+0x40>
   2974a:	eeb0 0a48 	vmov.f32	s0, s16
   2974e:	eef0 0a68 	vmov.f32	s1, s17
   29752:	ecbd 8b02 	vpop	{d8}
   29756:	bd38      	pop	{r3, r4, r5, pc}
   29758:	f7fa ffa2 	bl	246a0 <__errno>
   2975c:	2200      	movs	r2, #0
   2975e:	2300      	movs	r3, #0
   29760:	2121      	movs	r1, #33	@ 0x21
   29762:	6001      	str	r1, [r0, #0]
   29764:	4610      	mov	r0, r2
   29766:	4619      	mov	r1, r3
   29768:	f7e2 ffb0 	bl	c6cc <__aeabi_ddiv>
   2976c:	ec41 0b18 	vmov	d8, r0, r1
   29770:	eeb0 0a48 	vmov.f32	s0, s16
   29774:	eef0 0a68 	vmov.f32	s1, s17
   29778:	ecbd 8b02 	vpop	{d8}
   2977c:	bd38      	pop	{r3, r4, r5, pc}
   2977e:	bf00      	nop

00029780 <__ieee754_sqrt>:
   29780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29784:	4976      	ldr	r1, [pc, #472]	@ (29960 <__ieee754_sqrt+0x1e0>)
   29786:	ec55 4b10 	vmov	r4, r5, d0
   2978a:	43a9      	bics	r1, r5
   2978c:	f000 80ab 	beq.w	298e6 <__ieee754_sqrt+0x166>
   29790:	2d00      	cmp	r5, #0
   29792:	462a      	mov	r2, r5
   29794:	4623      	mov	r3, r4
   29796:	dd55      	ble.n	29844 <__ieee754_sqrt+0xc4>
   29798:	152c      	asrs	r4, r5, #20
   2979a:	d062      	beq.n	29862 <__ieee754_sqrt+0xe2>
   2979c:	f3c2 0213 	ubfx	r2, r2, #0, #20
   297a0:	07e1      	lsls	r1, r4, #31
   297a2:	f2a4 37ff 	subw	r7, r4, #1023	@ 0x3ff
   297a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
   297aa:	d403      	bmi.n	297b4 <__ieee754_sqrt+0x34>
   297ac:	0fd9      	lsrs	r1, r3, #31
   297ae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   297b2:	005b      	lsls	r3, r3, #1
   297b4:	0052      	lsls	r2, r2, #1
   297b6:	2600      	movs	r6, #0
   297b8:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
   297bc:	107f      	asrs	r7, r7, #1
   297be:	005b      	lsls	r3, r3, #1
   297c0:	2416      	movs	r4, #22
   297c2:	46b4      	mov	ip, r6
   297c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
   297c8:	eb0c 0001 	add.w	r0, ip, r1
   297cc:	4290      	cmp	r0, r2
   297ce:	ea4f 75d3 	mov.w	r5, r3, lsr #31
   297d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   297d6:	dc03      	bgt.n	297e0 <__ieee754_sqrt+0x60>
   297d8:	eb00 0c01 	add.w	ip, r0, r1
   297dc:	1a12      	subs	r2, r2, r0
   297de:	440e      	add	r6, r1
   297e0:	3c01      	subs	r4, #1
   297e2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   297e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
   297ea:	d1ed      	bne.n	297c8 <__ieee754_sqrt+0x48>
   297ec:	46a0      	mov	r8, r4
   297ee:	2520      	movs	r5, #32
   297f0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
   297f4:	e00a      	b.n	2980c <__ieee754_sqrt+0x8c>
   297f6:	d043      	beq.n	29880 <__ieee754_sqrt+0x100>
   297f8:	0051      	lsls	r1, r2, #1
   297fa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
   297fe:	3d01      	subs	r5, #1
   29800:	460a      	mov	r2, r1
   29802:	ea4f 0343 	mov.w	r3, r3, lsl #1
   29806:	ea4f 0050 	mov.w	r0, r0, lsr #1
   2980a:	d045      	beq.n	29898 <__ieee754_sqrt+0x118>
   2980c:	4594      	cmp	ip, r2
   2980e:	eb08 0e00 	add.w	lr, r8, r0
   29812:	daf0      	bge.n	297f6 <__ieee754_sqrt+0x76>
   29814:	f1be 0f00 	cmp.w	lr, #0
   29818:	eb0e 0800 	add.w	r8, lr, r0
   2981c:	db0c      	blt.n	29838 <__ieee754_sqrt+0xb8>
   2981e:	46e1      	mov	r9, ip
   29820:	eba2 010c 	sub.w	r1, r2, ip
   29824:	459e      	cmp	lr, r3
   29826:	bf88      	it	hi
   29828:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2982c:	0049      	lsls	r1, r1, #1
   2982e:	46cc      	mov	ip, r9
   29830:	eba3 030e 	sub.w	r3, r3, lr
   29834:	4404      	add	r4, r0
   29836:	e7e0      	b.n	297fa <__ieee754_sqrt+0x7a>
   29838:	f1b8 0f00 	cmp.w	r8, #0
   2983c:	dbef      	blt.n	2981e <__ieee754_sqrt+0x9e>
   2983e:	f10c 0901 	add.w	r9, ip, #1
   29842:	e7ed      	b.n	29820 <__ieee754_sqrt+0xa0>
   29844:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
   29848:	4321      	orrs	r1, r4
   2984a:	d046      	beq.n	298da <__ieee754_sqrt+0x15a>
   2984c:	2d00      	cmp	r5, #0
   2984e:	d171      	bne.n	29934 <__ieee754_sqrt+0x1b4>
   29850:	0ad9      	lsrs	r1, r3, #11
   29852:	3a15      	subs	r2, #21
   29854:	055b      	lsls	r3, r3, #21
   29856:	2900      	cmp	r1, #0
   29858:	d0fa      	beq.n	29850 <__ieee754_sqrt+0xd0>
   2985a:	02ce      	lsls	r6, r1, #11
   2985c:	4614      	mov	r4, r2
   2985e:	d476      	bmi.n	2994e <__ieee754_sqrt+0x1ce>
   29860:	460a      	mov	r2, r1
   29862:	2100      	movs	r1, #0
   29864:	0052      	lsls	r2, r2, #1
   29866:	02d5      	lsls	r5, r2, #11
   29868:	4608      	mov	r0, r1
   2986a:	f101 0101 	add.w	r1, r1, #1
   2986e:	d5f9      	bpl.n	29864 <__ieee754_sqrt+0xe4>
   29870:	f1c1 0520 	rsb	r5, r1, #32
   29874:	fa23 f505 	lsr.w	r5, r3, r5
   29878:	432a      	orrs	r2, r5
   2987a:	408b      	lsls	r3, r1
   2987c:	1a24      	subs	r4, r4, r0
   2987e:	e78d      	b.n	2979c <__ieee754_sqrt+0x1c>
   29880:	459e      	cmp	lr, r3
   29882:	d902      	bls.n	2988a <__ieee754_sqrt+0x10a>
   29884:	ea4f 014c 	mov.w	r1, ip, lsl #1
   29888:	e7b7      	b.n	297fa <__ieee754_sqrt+0x7a>
   2988a:	f1be 0f00 	cmp.w	lr, #0
   2988e:	eb0e 0800 	add.w	r8, lr, r0
   29892:	db24      	blt.n	298de <__ieee754_sqrt+0x15e>
   29894:	2100      	movs	r1, #0
   29896:	e7cb      	b.n	29830 <__ieee754_sqrt+0xb0>
   29898:	4319      	orrs	r1, r3
   2989a:	d012      	beq.n	298c2 <__ieee754_sqrt+0x142>
   2989c:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 29964 <__ieee754_sqrt+0x1e4>
   298a0:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 29968 <__ieee754_sqrt+0x1e8>
   298a4:	e9da 0100 	ldrd	r0, r1, [sl]
   298a8:	e9db 2300 	ldrd	r2, r3, [fp]
   298ac:	f7e2 fc2c 	bl	c108 <__aeabi_dsub>
   298b0:	e9da 8900 	ldrd	r8, r9, [sl]
   298b4:	4602      	mov	r2, r0
   298b6:	460b      	mov	r3, r1
   298b8:	4640      	mov	r0, r8
   298ba:	4649      	mov	r1, r9
   298bc:	f7e3 f858 	bl	c970 <__aeabi_dcmple>
   298c0:	b9f8      	cbnz	r0, 29902 <__ieee754_sqrt+0x182>
   298c2:	0865      	lsrs	r5, r4, #1
   298c4:	1071      	asrs	r1, r6, #1
   298c6:	f101 517f 	add.w	r1, r1, #1069547520	@ 0x3fc00000
   298ca:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
   298ce:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   298d2:	ea45 72c6 	orr.w	r2, r5, r6, lsl #31
   298d6:	ec43 2b10 	vmov	d0, r2, r3
   298da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298de:	f1b8 0f00 	cmp.w	r8, #0
   298e2:	daac      	bge.n	2983e <__ieee754_sqrt+0xbe>
   298e4:	e7d6      	b.n	29894 <__ieee754_sqrt+0x114>
   298e6:	4622      	mov	r2, r4
   298e8:	462b      	mov	r3, r5
   298ea:	4620      	mov	r0, r4
   298ec:	4629      	mov	r1, r5
   298ee:	f7e2 fdc3 	bl	c478 <__aeabi_dmul>
   298f2:	4622      	mov	r2, r4
   298f4:	462b      	mov	r3, r5
   298f6:	f7e2 fc09 	bl	c10c <__adddf3>
   298fa:	ec41 0b10 	vmov	d0, r0, r1
   298fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29902:	f1b4 3fff 	cmp.w	r4, #4294967295
   29906:	e9da 0100 	ldrd	r0, r1, [sl]
   2990a:	e9db 2300 	ldrd	r2, r3, [fp]
   2990e:	d022      	beq.n	29956 <__ieee754_sqrt+0x1d6>
   29910:	f7e2 fbfc 	bl	c10c <__adddf3>
   29914:	e9da 8900 	ldrd	r8, r9, [sl]
   29918:	4602      	mov	r2, r0
   2991a:	460b      	mov	r3, r1
   2991c:	4640      	mov	r0, r8
   2991e:	4649      	mov	r1, r9
   29920:	f7e3 f81c 	bl	c95c <__aeabi_dcmplt>
   29924:	b1c8      	cbz	r0, 2995a <__ieee754_sqrt+0x1da>
   29926:	1ca3      	adds	r3, r4, #2
   29928:	f104 0502 	add.w	r5, r4, #2
   2992c:	bf08      	it	eq
   2992e:	3601      	addeq	r6, #1
   29930:	086d      	lsrs	r5, r5, #1
   29932:	e7c7      	b.n	298c4 <__ieee754_sqrt+0x144>
   29934:	4622      	mov	r2, r4
   29936:	462b      	mov	r3, r5
   29938:	4620      	mov	r0, r4
   2993a:	4629      	mov	r1, r5
   2993c:	f7e2 fbe4 	bl	c108 <__aeabi_dsub>
   29940:	4602      	mov	r2, r0
   29942:	460b      	mov	r3, r1
   29944:	f7e2 fec2 	bl	c6cc <__aeabi_ddiv>
   29948:	ec41 0b10 	vmov	d0, r0, r1
   2994c:	e7c5      	b.n	298da <__ieee754_sqrt+0x15a>
   2994e:	f04f 30ff 	mov.w	r0, #4294967295
   29952:	460a      	mov	r2, r1
   29954:	e792      	b.n	2987c <__ieee754_sqrt+0xfc>
   29956:	3601      	adds	r6, #1
   29958:	e7b4      	b.n	298c4 <__ieee754_sqrt+0x144>
   2995a:	3401      	adds	r4, #1
   2995c:	e7b1      	b.n	298c2 <__ieee754_sqrt+0x142>
   2995e:	bf00      	nop
   29960:	7ff00000 	.word	0x7ff00000
   29964:	00031750 	.word	0x00031750
   29968:	00031748 	.word	0x00031748
   2996c:	00000000 	.word	0x00000000

00029970 <ceil>:
   29970:	ec51 0b10 	vmov	r0, r1, d0
   29974:	f3c1 530a 	ubfx	r3, r1, #20, #11
   29978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2997c:	f2a3 35ff 	subw	r5, r3, #1023	@ 0x3ff
   29980:	2d13      	cmp	r5, #19
   29982:	460c      	mov	r4, r1
   29984:	4606      	mov	r6, r0
   29986:	dc34      	bgt.n	299f2 <ceil+0x82>
   29988:	2d00      	cmp	r5, #0
   2998a:	db20      	blt.n	299ce <ceil+0x5e>
   2998c:	4b36      	ldr	r3, [pc, #216]	@ (29a68 <ceil+0xf8>)
   2998e:	fa43 f805 	asr.w	r8, r3, r5
   29992:	ea01 0308 	and.w	r3, r1, r8
   29996:	4303      	orrs	r3, r0
   29998:	460f      	mov	r7, r1
   2999a:	d02f      	beq.n	299fc <ceil+0x8c>
   2999c:	a330      	add	r3, pc, #192	@ (adr r3, 29a60 <ceil+0xf0>)
   2999e:	e9d3 2300 	ldrd	r2, r3, [r3]
   299a2:	f7e2 fbb3 	bl	c10c <__adddf3>
   299a6:	2200      	movs	r2, #0
   299a8:	2300      	movs	r3, #0
   299aa:	f7e2 fff5 	bl	c998 <__aeabi_dcmpgt>
   299ae:	b140      	cbz	r0, 299c2 <ceil+0x52>
   299b0:	2c00      	cmp	r4, #0
   299b2:	dd03      	ble.n	299bc <ceil+0x4c>
   299b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
   299b8:	412b      	asrs	r3, r5
   299ba:	441f      	add	r7, r3
   299bc:	ea27 0408 	bic.w	r4, r7, r8
   299c0:	2600      	movs	r6, #0
   299c2:	4623      	mov	r3, r4
   299c4:	4632      	mov	r2, r6
   299c6:	ec43 2b10 	vmov	d0, r2, r3
   299ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   299ce:	a324      	add	r3, pc, #144	@ (adr r3, 29a60 <ceil+0xf0>)
   299d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   299d4:	f7e2 fb9a 	bl	c10c <__adddf3>
   299d8:	2200      	movs	r2, #0
   299da:	2300      	movs	r3, #0
   299dc:	f7e2 ffdc 	bl	c998 <__aeabi_dcmpgt>
   299e0:	2800      	cmp	r0, #0
   299e2:	d0ee      	beq.n	299c2 <ceil+0x52>
   299e4:	2c00      	cmp	r4, #0
   299e6:	db36      	blt.n	29a56 <ceil+0xe6>
   299e8:	4334      	orrs	r4, r6
   299ea:	d000      	beq.n	299ee <ceil+0x7e>
   299ec:	4c1f      	ldr	r4, [pc, #124]	@ (29a6c <ceil+0xfc>)
   299ee:	2600      	movs	r6, #0
   299f0:	e7e7      	b.n	299c2 <ceil+0x52>
   299f2:	2d33      	cmp	r5, #51	@ 0x33
   299f4:	dd06      	ble.n	29a04 <ceil+0x94>
   299f6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
   299fa:	d025      	beq.n	29a48 <ceil+0xd8>
   299fc:	ec41 0b10 	vmov	d0, r0, r1
   29a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29a04:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
   29a08:	f04f 37ff 	mov.w	r7, #4294967295
   29a0c:	40df      	lsrs	r7, r3
   29a0e:	4238      	tst	r0, r7
   29a10:	d0f4      	beq.n	299fc <ceil+0x8c>
   29a12:	a313      	add	r3, pc, #76	@ (adr r3, 29a60 <ceil+0xf0>)
   29a14:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a18:	f7e2 fb78 	bl	c10c <__adddf3>
   29a1c:	2200      	movs	r2, #0
   29a1e:	2300      	movs	r3, #0
   29a20:	f7e2 ffba 	bl	c998 <__aeabi_dcmpgt>
   29a24:	2800      	cmp	r0, #0
   29a26:	d0cc      	beq.n	299c2 <ceil+0x52>
   29a28:	2c00      	cmp	r4, #0
   29a2a:	4633      	mov	r3, r6
   29a2c:	dd09      	ble.n	29a42 <ceil+0xd2>
   29a2e:	2d14      	cmp	r5, #20
   29a30:	d006      	beq.n	29a40 <ceil+0xd0>
   29a32:	f1c5 0534 	rsb	r5, r5, #52	@ 0x34
   29a36:	2201      	movs	r2, #1
   29a38:	40aa      	lsls	r2, r5
   29a3a:	4413      	add	r3, r2
   29a3c:	429e      	cmp	r6, r3
   29a3e:	d900      	bls.n	29a42 <ceil+0xd2>
   29a40:	3401      	adds	r4, #1
   29a42:	ea23 0607 	bic.w	r6, r3, r7
   29a46:	e7bc      	b.n	299c2 <ceil+0x52>
   29a48:	4602      	mov	r2, r0
   29a4a:	460b      	mov	r3, r1
   29a4c:	f7e2 fb5e 	bl	c10c <__adddf3>
   29a50:	ec41 0b10 	vmov	d0, r0, r1
   29a54:	e7d4      	b.n	29a00 <ceil+0x90>
   29a56:	2600      	movs	r6, #0
   29a58:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
   29a5c:	e7b1      	b.n	299c2 <ceil+0x52>
   29a5e:	bf00      	nop
   29a60:	8800759c 	.word	0x8800759c
   29a64:	7e37e43c 	.word	0x7e37e43c
   29a68:	000fffff 	.word	0x000fffff
   29a6c:	3ff00000 	.word	0x3ff00000

00029a70 <round>:
   29a70:	ec53 2b10 	vmov	r2, r3, d0
   29a74:	f3c3 500a 	ubfx	r0, r3, #20, #11
   29a78:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
   29a7c:	2913      	cmp	r1, #19
   29a7e:	b510      	push	{r4, lr}
   29a80:	469c      	mov	ip, r3
   29a82:	4696      	mov	lr, r2
   29a84:	dc19      	bgt.n	29aba <round+0x4a>
   29a86:	2900      	cmp	r1, #0
   29a88:	db11      	blt.n	29aae <round+0x3e>
   29a8a:	4820      	ldr	r0, [pc, #128]	@ (29b0c <round+0x9c>)
   29a8c:	4108      	asrs	r0, r1
   29a8e:	ea00 0403 	and.w	r4, r0, r3
   29a92:	4314      	orrs	r4, r2
   29a94:	d016      	beq.n	29ac4 <round+0x54>
   29a96:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
   29a9a:	410b      	asrs	r3, r1
   29a9c:	4463      	add	r3, ip
   29a9e:	ea23 0c00 	bic.w	ip, r3, r0
   29aa2:	2100      	movs	r1, #0
   29aa4:	4663      	mov	r3, ip
   29aa6:	460a      	mov	r2, r1
   29aa8:	ec43 2b10 	vmov	d0, r2, r3
   29aac:	bd10      	pop	{r4, pc}
   29aae:	3101      	adds	r1, #1
   29ab0:	f003 4c00 	and.w	ip, r3, #2147483648	@ 0x80000000
   29ab4:	d024      	beq.n	29b00 <round+0x90>
   29ab6:	2100      	movs	r1, #0
   29ab8:	e7f4      	b.n	29aa4 <round+0x34>
   29aba:	2933      	cmp	r1, #51	@ 0x33
   29abc:	dd05      	ble.n	29aca <round+0x5a>
   29abe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
   29ac2:	d016      	beq.n	29af2 <round+0x82>
   29ac4:	ec43 2b10 	vmov	d0, r2, r3
   29ac8:	bd10      	pop	{r4, pc}
   29aca:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
   29ace:	f04f 34ff 	mov.w	r4, #4294967295
   29ad2:	fa24 f000 	lsr.w	r0, r4, r0
   29ad6:	4210      	tst	r0, r2
   29ad8:	d0f4      	beq.n	29ac4 <round+0x54>
   29ada:	2301      	movs	r3, #1
   29adc:	f1c1 0133 	rsb	r1, r1, #51	@ 0x33
   29ae0:	fa03 f101 	lsl.w	r1, r3, r1
   29ae4:	eb11 010e 	adds.w	r1, r1, lr
   29ae8:	bf28      	it	cs
   29aea:	449c      	addcs	ip, r3
   29aec:	ea21 0100 	bic.w	r1, r1, r0
   29af0:	e7d8      	b.n	29aa4 <round+0x34>
   29af2:	4610      	mov	r0, r2
   29af4:	4619      	mov	r1, r3
   29af6:	f7e2 fb09 	bl	c10c <__adddf3>
   29afa:	ec41 0b10 	vmov	d0, r0, r1
   29afe:	bd10      	pop	{r4, pc}
   29b00:	f04c 5c7f 	orr.w	ip, ip, #1069547520	@ 0x3fc00000
   29b04:	f44c 1c40 	orr.w	ip, ip, #3145728	@ 0x300000
   29b08:	2100      	movs	r1, #0
   29b0a:	e7cb      	b.n	29aa4 <round+0x34>
   29b0c:	000fffff 	.word	0x000fffff

00029b10 <_exit>:
   29b10:	4601      	mov	r1, r0
   29b12:	b508      	push	{r3, lr}
   29b14:	4a02      	ldr	r2, [pc, #8]	@ (29b20 <_exit+0x10>)
   29b16:	f04f 30ff 	mov.w	r0, #4294967295
   29b1a:	f000 f803 	bl	29b24 <_kill_shared>
   29b1e:	bf00      	nop
   29b20:	00020026 	.word	0x00020026

00029b24 <_kill_shared>:
   29b24:	b500      	push	{lr}
   29b26:	b083      	sub	sp, #12
   29b28:	e9cd 2100 	strd	r2, r1, [sp]
   29b2c:	f000 fada 	bl	2a0e4 <_has_ext_exit_extended>
   29b30:	2800      	cmp	r0, #0
   29b32:	bf0c      	ite	eq
   29b34:	2418      	moveq	r4, #24
   29b36:	2420      	movne	r4, #32
   29b38:	f000 fad4 	bl	2a0e4 <_has_ext_exit_extended>
   29b3c:	b120      	cbz	r0, 29b48 <_kill_shared+0x24>
   29b3e:	466d      	mov	r5, sp
   29b40:	4620      	mov	r0, r4
   29b42:	4629      	mov	r1, r5
   29b44:	beab      	bkpt	0x00ab
   29b46:	4604      	mov	r4, r0
   29b48:	9d00      	ldr	r5, [sp, #0]
   29b4a:	4620      	mov	r0, r4
   29b4c:	4629      	mov	r1, r5
   29b4e:	beab      	bkpt	0x00ab
   29b50:	4604      	mov	r4, r0
   29b52:	bf00      	nop

00029b54 <_kill>:
   29b54:	2906      	cmp	r1, #6
   29b56:	b508      	push	{r3, lr}
   29b58:	d002      	beq.n	29b60 <_kill+0xc>
   29b5a:	4a03      	ldr	r2, [pc, #12]	@ (29b68 <_kill+0x14>)
   29b5c:	f7ff ffe2 	bl	29b24 <_kill_shared>
   29b60:	4a02      	ldr	r2, [pc, #8]	@ (29b6c <_kill+0x18>)
   29b62:	f7ff ffdf 	bl	29b24 <_kill_shared>
   29b66:	bf00      	nop
   29b68:	00020026 	.word	0x00020026
   29b6c:	00020023 	.word	0x00020023

00029b70 <_read>:
   29b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b74:	4b1f      	ldr	r3, [pc, #124]	@ (29bf4 <_read+0x84>)
   29b76:	681b      	ldr	r3, [r3, #0]
   29b78:	b084      	sub	sp, #16
   29b7a:	4605      	mov	r5, r0
   29b7c:	460f      	mov	r7, r1
   29b7e:	4614      	mov	r4, r2
   29b80:	b10b      	cbz	r3, 29b86 <_read+0x16>
   29b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   29b84:	b1e2      	cbz	r2, 29bc0 <_read+0x50>
   29b86:	2d13      	cmp	r5, #19
   29b88:	d81f      	bhi.n	29bca <_read+0x5a>
   29b8a:	4e1b      	ldr	r6, [pc, #108]	@ (29bf8 <_read+0x88>)
   29b8c:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
   29b90:	1c5a      	adds	r2, r3, #1
   29b92:	d01a      	beq.n	29bca <_read+0x5a>
   29b94:	e9cd 3701 	strd	r3, r7, [sp, #4]
   29b98:	9403      	str	r4, [sp, #12]
   29b9a:	2706      	movs	r7, #6
   29b9c:	f10d 0804 	add.w	r8, sp, #4
   29ba0:	4638      	mov	r0, r7
   29ba2:	4641      	mov	r1, r8
   29ba4:	beab      	bkpt	0x00ab
   29ba6:	4607      	mov	r7, r0
   29ba8:	1c7b      	adds	r3, r7, #1
   29baa:	d013      	beq.n	29bd4 <_read+0x64>
   29bac:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   29bb0:	1be4      	subs	r4, r4, r7
   29bb2:	685a      	ldr	r2, [r3, #4]
   29bb4:	4620      	mov	r0, r4
   29bb6:	4422      	add	r2, r4
   29bb8:	605a      	str	r2, [r3, #4]
   29bba:	b004      	add	sp, #16
   29bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29bc0:	4618      	mov	r0, r3
   29bc2:	f7fa f8cd 	bl	23d60 <__sinit>
   29bc6:	2d13      	cmp	r5, #19
   29bc8:	d9df      	bls.n	29b8a <_read+0x1a>
   29bca:	f7fa fd69 	bl	246a0 <__errno>
   29bce:	2309      	movs	r3, #9
   29bd0:	6003      	str	r3, [r0, #0]
   29bd2:	e009      	b.n	29be8 <_read+0x78>
   29bd4:	f7fa fd64 	bl	246a0 <__errno>
   29bd8:	2513      	movs	r5, #19
   29bda:	4604      	mov	r4, r0
   29bdc:	2600      	movs	r6, #0
   29bde:	4628      	mov	r0, r5
   29be0:	4631      	mov	r1, r6
   29be2:	beab      	bkpt	0x00ab
   29be4:	4605      	mov	r5, r0
   29be6:	6025      	str	r5, [r4, #0]
   29be8:	f04f 30ff 	mov.w	r0, #4294967295
   29bec:	b004      	add	sp, #16
   29bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29bf2:	bf00      	nop
   29bf4:	100025a0 	.word	0x100025a0
   29bf8:	10054cb0 	.word	0x10054cb0

00029bfc <_swilseek>:
   29bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c00:	4b2b      	ldr	r3, [pc, #172]	@ (29cb0 <_swilseek+0xb4>)
   29c02:	681b      	ldr	r3, [r3, #0]
   29c04:	b082      	sub	sp, #8
   29c06:	4605      	mov	r5, r0
   29c08:	460c      	mov	r4, r1
   29c0a:	4616      	mov	r6, r2
   29c0c:	b113      	cbz	r3, 29c14 <_swilseek+0x18>
   29c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   29c10:	2a00      	cmp	r2, #0
   29c12:	d043      	beq.n	29c9c <_swilseek+0xa0>
   29c14:	2d13      	cmp	r5, #19
   29c16:	d846      	bhi.n	29ca6 <_swilseek+0xaa>
   29c18:	4f26      	ldr	r7, [pc, #152]	@ (29cb4 <_swilseek+0xb8>)
   29c1a:	f857 3035 	ldr.w	r3, [r7, r5, lsl #3]
   29c1e:	1c59      	adds	r1, r3, #1
   29c20:	d041      	beq.n	29ca6 <_swilseek+0xaa>
   29c22:	2e02      	cmp	r6, #2
   29c24:	d828      	bhi.n	29c78 <_swilseek+0x7c>
   29c26:	2e01      	cmp	r6, #1
   29c28:	d021      	beq.n	29c6e <_swilseek+0x72>
   29c2a:	2e02      	cmp	r6, #2
   29c2c:	d012      	beq.n	29c54 <_swilseek+0x58>
   29c2e:	46e8      	mov	r8, sp
   29c30:	e9cd 3400 	strd	r3, r4, [sp]
   29c34:	260a      	movs	r6, #10
   29c36:	4630      	mov	r0, r6
   29c38:	4641      	mov	r1, r8
   29c3a:	beab      	bkpt	0x00ab
   29c3c:	4606      	mov	r6, r0
   29c3e:	1c73      	adds	r3, r6, #1
   29c40:	d01f      	beq.n	29c82 <_swilseek+0x86>
   29c42:	2e00      	cmp	r6, #0
   29c44:	db27      	blt.n	29c96 <_swilseek+0x9a>
   29c46:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
   29c4a:	607c      	str	r4, [r7, #4]
   29c4c:	4620      	mov	r0, r4
   29c4e:	b002      	add	sp, #8
   29c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29c54:	9300      	str	r3, [sp, #0]
   29c56:	260c      	movs	r6, #12
   29c58:	46e8      	mov	r8, sp
   29c5a:	4630      	mov	r0, r6
   29c5c:	4641      	mov	r1, r8
   29c5e:	beab      	bkpt	0x00ab
   29c60:	4606      	mov	r6, r0
   29c62:	1c72      	adds	r2, r6, #1
   29c64:	d00d      	beq.n	29c82 <_swilseek+0x86>
   29c66:	f857 3035 	ldr.w	r3, [r7, r5, lsl #3]
   29c6a:	4434      	add	r4, r6
   29c6c:	e7e0      	b.n	29c30 <_swilseek+0x34>
   29c6e:	eb07 02c5 	add.w	r2, r7, r5, lsl #3
   29c72:	6852      	ldr	r2, [r2, #4]
   29c74:	18a4      	adds	r4, r4, r2
   29c76:	d5da      	bpl.n	29c2e <_swilseek+0x32>
   29c78:	f7fa fd12 	bl	246a0 <__errno>
   29c7c:	2316      	movs	r3, #22
   29c7e:	6003      	str	r3, [r0, #0]
   29c80:	e009      	b.n	29c96 <_swilseek+0x9a>
   29c82:	f7fa fd0d 	bl	246a0 <__errno>
   29c86:	2513      	movs	r5, #19
   29c88:	4604      	mov	r4, r0
   29c8a:	2600      	movs	r6, #0
   29c8c:	4628      	mov	r0, r5
   29c8e:	4631      	mov	r1, r6
   29c90:	beab      	bkpt	0x00ab
   29c92:	4605      	mov	r5, r0
   29c94:	6025      	str	r5, [r4, #0]
   29c96:	f04f 34ff 	mov.w	r4, #4294967295
   29c9a:	e7d7      	b.n	29c4c <_swilseek+0x50>
   29c9c:	4618      	mov	r0, r3
   29c9e:	f7fa f85f 	bl	23d60 <__sinit>
   29ca2:	2d13      	cmp	r5, #19
   29ca4:	d9b8      	bls.n	29c18 <_swilseek+0x1c>
   29ca6:	f7fa fcfb 	bl	246a0 <__errno>
   29caa:	2309      	movs	r3, #9
   29cac:	6003      	str	r3, [r0, #0]
   29cae:	e7f2      	b.n	29c96 <_swilseek+0x9a>
   29cb0:	100025a0 	.word	0x100025a0
   29cb4:	10054cb0 	.word	0x10054cb0

00029cb8 <_lseek>:
   29cb8:	f7ff bfa0 	b.w	29bfc <_swilseek>

00029cbc <_write>:
   29cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29cc0:	4b26      	ldr	r3, [pc, #152]	@ (29d5c <_write+0xa0>)
   29cc2:	681b      	ldr	r3, [r3, #0]
   29cc4:	b084      	sub	sp, #16
   29cc6:	4606      	mov	r6, r0
   29cc8:	460c      	mov	r4, r1
   29cca:	4615      	mov	r5, r2
   29ccc:	b10b      	cbz	r3, 29cd2 <_write+0x16>
   29cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   29cd0:	b1fa      	cbz	r2, 29d12 <_write+0x56>
   29cd2:	2e13      	cmp	r6, #19
   29cd4:	d822      	bhi.n	29d1c <_write+0x60>
   29cd6:	4f22      	ldr	r7, [pc, #136]	@ (29d60 <_write+0xa4>)
   29cd8:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
   29cdc:	1c5a      	adds	r2, r3, #1
   29cde:	d01d      	beq.n	29d1c <_write+0x60>
   29ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
   29ce4:	9503      	str	r5, [sp, #12]
   29ce6:	2405      	movs	r4, #5
   29ce8:	f10d 0804 	add.w	r8, sp, #4
   29cec:	4620      	mov	r0, r4
   29cee:	4641      	mov	r1, r8
   29cf0:	beab      	bkpt	0x00ab
   29cf2:	4604      	mov	r4, r0
   29cf4:	1c63      	adds	r3, r4, #1
   29cf6:	d016      	beq.n	29d26 <_write+0x6a>
   29cf8:	2c00      	cmp	r4, #0
   29cfa:	db1e      	blt.n	29d3a <_write+0x7e>
   29cfc:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   29d00:	1b28      	subs	r0, r5, r4
   29d02:	685a      	ldr	r2, [r3, #4]
   29d04:	42ac      	cmp	r4, r5
   29d06:	4402      	add	r2, r0
   29d08:	605a      	str	r2, [r3, #4]
   29d0a:	d019      	beq.n	29d40 <_write+0x84>
   29d0c:	b004      	add	sp, #16
   29d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d12:	4618      	mov	r0, r3
   29d14:	f7fa f824 	bl	23d60 <__sinit>
   29d18:	2e13      	cmp	r6, #19
   29d1a:	d9dc      	bls.n	29cd6 <_write+0x1a>
   29d1c:	f7fa fcc0 	bl	246a0 <__errno>
   29d20:	2309      	movs	r3, #9
   29d22:	6003      	str	r3, [r0, #0]
   29d24:	e009      	b.n	29d3a <_write+0x7e>
   29d26:	f7fa fcbb 	bl	246a0 <__errno>
   29d2a:	2513      	movs	r5, #19
   29d2c:	4604      	mov	r4, r0
   29d2e:	2600      	movs	r6, #0
   29d30:	4628      	mov	r0, r5
   29d32:	4631      	mov	r1, r6
   29d34:	beab      	bkpt	0x00ab
   29d36:	4605      	mov	r5, r0
   29d38:	6025      	str	r5, [r4, #0]
   29d3a:	f04f 30ff 	mov.w	r0, #4294967295
   29d3e:	e7e5      	b.n	29d0c <_write+0x50>
   29d40:	f7fa fcae 	bl	246a0 <__errno>
   29d44:	2613      	movs	r6, #19
   29d46:	4605      	mov	r5, r0
   29d48:	2400      	movs	r4, #0
   29d4a:	4630      	mov	r0, r6
   29d4c:	4621      	mov	r1, r4
   29d4e:	beab      	bkpt	0x00ab
   29d50:	4606      	mov	r6, r0
   29d52:	4620      	mov	r0, r4
   29d54:	602e      	str	r6, [r5, #0]
   29d56:	b004      	add	sp, #16
   29d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d5c:	100025a0 	.word	0x100025a0
   29d60:	10054cb0 	.word	0x10054cb0

00029d64 <_close>:
   29d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d66:	4b22      	ldr	r3, [pc, #136]	@ (29df0 <_close+0x8c>)
   29d68:	681b      	ldr	r3, [r3, #0]
   29d6a:	b083      	sub	sp, #12
   29d6c:	4605      	mov	r5, r0
   29d6e:	b10b      	cbz	r3, 29d74 <_close+0x10>
   29d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   29d72:	b32a      	cbz	r2, 29dc0 <_close+0x5c>
   29d74:	2d13      	cmp	r5, #19
   29d76:	d828      	bhi.n	29dca <_close+0x66>
   29d78:	4e1e      	ldr	r6, [pc, #120]	@ (29df4 <_close+0x90>)
   29d7a:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
   29d7e:	1c5a      	adds	r2, r3, #1
   29d80:	d023      	beq.n	29dca <_close+0x66>
   29d82:	1e6a      	subs	r2, r5, #1
   29d84:	2a01      	cmp	r2, #1
   29d86:	d803      	bhi.n	29d90 <_close+0x2c>
   29d88:	68b1      	ldr	r1, [r6, #8]
   29d8a:	6932      	ldr	r2, [r6, #16]
   29d8c:	4291      	cmp	r1, r2
   29d8e:	d010      	beq.n	29db2 <_close+0x4e>
   29d90:	9301      	str	r3, [sp, #4]
   29d92:	2402      	movs	r4, #2
   29d94:	af01      	add	r7, sp, #4
   29d96:	4620      	mov	r0, r4
   29d98:	4639      	mov	r1, r7
   29d9a:	beab      	bkpt	0x00ab
   29d9c:	4604      	mov	r4, r0
   29d9e:	1c63      	adds	r3, r4, #1
   29da0:	4620      	mov	r0, r4
   29da2:	d017      	beq.n	29dd4 <_close+0x70>
   29da4:	b91c      	cbnz	r4, 29dae <_close+0x4a>
   29da6:	f04f 33ff 	mov.w	r3, #4294967295
   29daa:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
   29dae:	b003      	add	sp, #12
   29db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29db2:	f04f 33ff 	mov.w	r3, #4294967295
   29db6:	2000      	movs	r0, #0
   29db8:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
   29dbc:	b003      	add	sp, #12
   29dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29dc0:	4618      	mov	r0, r3
   29dc2:	f7f9 ffcd 	bl	23d60 <__sinit>
   29dc6:	2d13      	cmp	r5, #19
   29dc8:	d9d6      	bls.n	29d78 <_close+0x14>
   29dca:	f7fa fc69 	bl	246a0 <__errno>
   29dce:	2309      	movs	r3, #9
   29dd0:	6003      	str	r3, [r0, #0]
   29dd2:	e009      	b.n	29de8 <_close+0x84>
   29dd4:	f7fa fc64 	bl	246a0 <__errno>
   29dd8:	2513      	movs	r5, #19
   29dda:	4604      	mov	r4, r0
   29ddc:	2600      	movs	r6, #0
   29dde:	4628      	mov	r0, r5
   29de0:	4631      	mov	r1, r6
   29de2:	beab      	bkpt	0x00ab
   29de4:	4605      	mov	r5, r0
   29de6:	6025      	str	r5, [r4, #0]
   29de8:	f04f 30ff 	mov.w	r0, #4294967295
   29dec:	e7df      	b.n	29dae <_close+0x4a>
   29dee:	bf00      	nop
   29df0:	100025a0 	.word	0x100025a0
   29df4:	10054cb0 	.word	0x10054cb0

00029df8 <_getpid>:
   29df8:	2001      	movs	r0, #1
   29dfa:	4770      	bx	lr

00029dfc <_sbrk>:
   29dfc:	4a0d      	ldr	r2, [pc, #52]	@ (29e34 <_sbrk+0x38>)
   29dfe:	4603      	mov	r3, r0
   29e00:	6810      	ldr	r0, [r2, #0]
   29e02:	b510      	push	{r4, lr}
   29e04:	b198      	cbz	r0, 29e2e <_sbrk+0x32>
   29e06:	4403      	add	r3, r0
   29e08:	4669      	mov	r1, sp
   29e0a:	428b      	cmp	r3, r1
   29e0c:	d808      	bhi.n	29e20 <_sbrk+0x24>
   29e0e:	490a      	ldr	r1, [pc, #40]	@ (29e38 <_sbrk+0x3c>)
   29e10:	4c0a      	ldr	r4, [pc, #40]	@ (29e3c <_sbrk+0x40>)
   29e12:	6809      	ldr	r1, [r1, #0]
   29e14:	42a1      	cmp	r1, r4
   29e16:	d001      	beq.n	29e1c <_sbrk+0x20>
   29e18:	428b      	cmp	r3, r1
   29e1a:	d801      	bhi.n	29e20 <_sbrk+0x24>
   29e1c:	6013      	str	r3, [r2, #0]
   29e1e:	bd10      	pop	{r4, pc}
   29e20:	f7fa fc3e 	bl	246a0 <__errno>
   29e24:	230c      	movs	r3, #12
   29e26:	6003      	str	r3, [r0, #0]
   29e28:	f04f 30ff 	mov.w	r0, #4294967295
   29e2c:	bd10      	pop	{r4, pc}
   29e2e:	4804      	ldr	r0, [pc, #16]	@ (29e40 <_sbrk+0x44>)
   29e30:	6010      	str	r0, [r2, #0]
   29e32:	e7e8      	b.n	29e06 <_sbrk+0xa>
   29e34:	10054cac 	.word	0x10054cac
   29e38:	10002af8 	.word	0x10002af8
   29e3c:	cafedead 	.word	0xcafedead
   29e40:	100581f0 	.word	0x100581f0

00029e44 <_swistat>:
   29e44:	4b1c      	ldr	r3, [pc, #112]	@ (29eb8 <_swistat+0x74>)
   29e46:	681b      	ldr	r3, [r3, #0]
   29e48:	b570      	push	{r4, r5, r6, lr}
   29e4a:	4605      	mov	r5, r0
   29e4c:	460c      	mov	r4, r1
   29e4e:	b10b      	cbz	r3, 29e54 <_swistat+0x10>
   29e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   29e52:	b1ca      	cbz	r2, 29e88 <_swistat+0x44>
   29e54:	2d13      	cmp	r5, #19
   29e56:	d81c      	bhi.n	29e92 <_swistat+0x4e>
   29e58:	4b18      	ldr	r3, [pc, #96]	@ (29ebc <_swistat+0x78>)
   29e5a:	f853 2035 	ldr.w	r2, [r3, r5, lsl #3]
   29e5e:	3201      	adds	r2, #1
   29e60:	d017      	beq.n	29e92 <_swistat+0x4e>
   29e62:	6862      	ldr	r2, [r4, #4]
   29e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
   29e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   29e6c:	6062      	str	r2, [r4, #4]
   29e6e:	64a1      	str	r1, [r4, #72]	@ 0x48
   29e70:	260c      	movs	r6, #12
   29e72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   29e76:	4630      	mov	r0, r6
   29e78:	4629      	mov	r1, r5
   29e7a:	beab      	bkpt	0x00ab
   29e7c:	4605      	mov	r5, r0
   29e7e:	1c6b      	adds	r3, r5, #1
   29e80:	d00c      	beq.n	29e9c <_swistat+0x58>
   29e82:	6125      	str	r5, [r4, #16]
   29e84:	2000      	movs	r0, #0
   29e86:	bd70      	pop	{r4, r5, r6, pc}
   29e88:	4618      	mov	r0, r3
   29e8a:	f7f9 ff69 	bl	23d60 <__sinit>
   29e8e:	2d13      	cmp	r5, #19
   29e90:	d9e2      	bls.n	29e58 <_swistat+0x14>
   29e92:	f7fa fc05 	bl	246a0 <__errno>
   29e96:	2309      	movs	r3, #9
   29e98:	6003      	str	r3, [r0, #0]
   29e9a:	e009      	b.n	29eb0 <_swistat+0x6c>
   29e9c:	f7fa fc00 	bl	246a0 <__errno>
   29ea0:	2513      	movs	r5, #19
   29ea2:	4604      	mov	r4, r0
   29ea4:	2600      	movs	r6, #0
   29ea6:	4628      	mov	r0, r5
   29ea8:	4631      	mov	r1, r6
   29eaa:	beab      	bkpt	0x00ab
   29eac:	4605      	mov	r5, r0
   29eae:	6025      	str	r5, [r4, #0]
   29eb0:	f04f 30ff 	mov.w	r0, #4294967295
   29eb4:	bd70      	pop	{r4, r5, r6, pc}
   29eb6:	bf00      	nop
   29eb8:	100025a0 	.word	0x100025a0
   29ebc:	10054cb0 	.word	0x10054cb0

00029ec0 <_fstat>:
   29ec0:	460b      	mov	r3, r1
   29ec2:	b510      	push	{r4, lr}
   29ec4:	2100      	movs	r1, #0
   29ec6:	4604      	mov	r4, r0
   29ec8:	2258      	movs	r2, #88	@ 0x58
   29eca:	4618      	mov	r0, r3
   29ecc:	f7fa fa60 	bl	24390 <memset>
   29ed0:	4601      	mov	r1, r0
   29ed2:	4620      	mov	r0, r4
   29ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29ed8:	f7ff bfb4 	b.w	29e44 <_swistat>

00029edc <_stat>:
   29edc:	b538      	push	{r3, r4, r5, lr}
   29ede:	460c      	mov	r4, r1
   29ee0:	4605      	mov	r5, r0
   29ee2:	2258      	movs	r2, #88	@ 0x58
   29ee4:	2100      	movs	r1, #0
   29ee6:	4620      	mov	r0, r4
   29ee8:	f7fa fa52 	bl	24390 <memset>
   29eec:	4628      	mov	r0, r5
   29eee:	2100      	movs	r1, #0
   29ef0:	f000 f812 	bl	29f18 <_swiopen>
   29ef4:	1c43      	adds	r3, r0, #1
   29ef6:	4605      	mov	r5, r0
   29ef8:	d00c      	beq.n	29f14 <_stat+0x38>
   29efa:	6863      	ldr	r3, [r4, #4]
   29efc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
   29f00:	4621      	mov	r1, r4
   29f02:	6063      	str	r3, [r4, #4]
   29f04:	f7ff ff9e 	bl	29e44 <_swistat>
   29f08:	4604      	mov	r4, r0
   29f0a:	4628      	mov	r0, r5
   29f0c:	f7ff ff2a 	bl	29d64 <_close>
   29f10:	4620      	mov	r0, r4
   29f12:	bd38      	pop	{r3, r4, r5, pc}
   29f14:	4604      	mov	r4, r0
   29f16:	e7fb      	b.n	29f10 <_stat+0x34>

00029f18 <_swiopen>:
   29f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29f1c:	4d2f      	ldr	r5, [pc, #188]	@ (29fdc <_swiopen+0xc4>)
   29f1e:	b096      	sub	sp, #88	@ 0x58
   29f20:	4681      	mov	r9, r0
   29f22:	460f      	mov	r7, r1
   29f24:	2400      	movs	r4, #0
   29f26:	e002      	b.n	29f2e <_swiopen+0x16>
   29f28:	3401      	adds	r4, #1
   29f2a:	2c14      	cmp	r4, #20
   29f2c:	d051      	beq.n	29fd2 <_swiopen+0xba>
   29f2e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
   29f32:	3301      	adds	r3, #1
   29f34:	ea4f 06c4 	mov.w	r6, r4, lsl #3
   29f38:	d1f6      	bne.n	29f28 <_swiopen+0x10>
   29f3a:	f407 6320 	and.w	r3, r7, #2560	@ 0xa00
   29f3e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
   29f42:	46ea      	mov	sl, sp
   29f44:	d038      	beq.n	29fb8 <_swiopen+0xa0>
   29f46:	f3c7 4800 	ubfx	r8, r7, #16, #1
   29f4a:	07ba      	lsls	r2, r7, #30
   29f4c:	f240 6301 	movw	r3, #1537	@ 0x601
   29f50:	bf48      	it	mi
   29f52:	f048 0802 	orrmi.w	r8, r8, #2
   29f56:	421f      	tst	r7, r3
   29f58:	bf18      	it	ne
   29f5a:	f048 0804 	orrne.w	r8, r8, #4
   29f5e:	073b      	lsls	r3, r7, #28
   29f60:	bf48      	it	mi
   29f62:	f028 0804 	bicmi.w	r8, r8, #4
   29f66:	4648      	mov	r0, r9
   29f68:	bf48      	it	mi
   29f6a:	f048 0808 	orrmi.w	r8, r8, #8
   29f6e:	f8cd 9000 	str.w	r9, [sp]
   29f72:	f7e2 fe85 	bl	cc80 <strlen>
   29f76:	2701      	movs	r7, #1
   29f78:	e9cd 8001 	strd	r8, r0, [sp, #4]
   29f7c:	4638      	mov	r0, r7
   29f7e:	4651      	mov	r1, sl
   29f80:	beab      	bkpt	0x00ab
   29f82:	4607      	mov	r7, r0
   29f84:	2f00      	cmp	r7, #0
   29f86:	db08      	blt.n	29f9a <_swiopen+0x82>
   29f88:	442e      	add	r6, r5
   29f8a:	2300      	movs	r3, #0
   29f8c:	f845 7034 	str.w	r7, [r5, r4, lsl #3]
   29f90:	6073      	str	r3, [r6, #4]
   29f92:	4620      	mov	r0, r4
   29f94:	b016      	add	sp, #88	@ 0x58
   29f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f9a:	f7fa fb81 	bl	246a0 <__errno>
   29f9e:	2513      	movs	r5, #19
   29fa0:	4604      	mov	r4, r0
   29fa2:	2600      	movs	r6, #0
   29fa4:	4628      	mov	r0, r5
   29fa6:	4631      	mov	r1, r6
   29fa8:	beab      	bkpt	0x00ab
   29faa:	4605      	mov	r5, r0
   29fac:	6025      	str	r5, [r4, #0]
   29fae:	463c      	mov	r4, r7
   29fb0:	4620      	mov	r0, r4
   29fb2:	b016      	add	sp, #88	@ 0x58
   29fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29fb8:	4651      	mov	r1, sl
   29fba:	4648      	mov	r0, r9
   29fbc:	f7ff ff8e 	bl	29edc <_stat>
   29fc0:	3001      	adds	r0, #1
   29fc2:	d0c0      	beq.n	29f46 <_swiopen+0x2e>
   29fc4:	f7fa fb6c 	bl	246a0 <__errno>
   29fc8:	2311      	movs	r3, #17
   29fca:	6003      	str	r3, [r0, #0]
   29fcc:	f04f 34ff 	mov.w	r4, #4294967295
   29fd0:	e7df      	b.n	29f92 <_swiopen+0x7a>
   29fd2:	f7fa fb65 	bl	246a0 <__errno>
   29fd6:	2318      	movs	r3, #24
   29fd8:	6003      	str	r3, [r0, #0]
   29fda:	e7f7      	b.n	29fcc <_swiopen+0xb4>
   29fdc:	10054cb0 	.word	0x10054cb0

00029fe0 <_get_semihosting_exts>:
   29fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29fe4:	4607      	mov	r7, r0
   29fe6:	b083      	sub	sp, #12
   29fe8:	483b      	ldr	r0, [pc, #236]	@ (2a0d8 <_get_semihosting_exts+0xf8>)
   29fea:	4688      	mov	r8, r1
   29fec:	2100      	movs	r1, #0
   29fee:	4616      	mov	r6, r2
   29ff0:	f7ff ff92 	bl	29f18 <_swiopen>
   29ff4:	2100      	movs	r1, #0
   29ff6:	4604      	mov	r4, r0
   29ff8:	4632      	mov	r2, r6
   29ffa:	4638      	mov	r0, r7
   29ffc:	f7fa f9c8 	bl	24390 <memset>
   2a000:	1c61      	adds	r1, r4, #1
   2a002:	d058      	beq.n	2a0b6 <_get_semihosting_exts+0xd6>
   2a004:	4b35      	ldr	r3, [pc, #212]	@ (2a0dc <_get_semihosting_exts+0xfc>)
   2a006:	6818      	ldr	r0, [r3, #0]
   2a008:	b110      	cbz	r0, 2a010 <_get_semihosting_exts+0x30>
   2a00a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2a00c:	2b00      	cmp	r3, #0
   2a00e:	d055      	beq.n	2a0bc <_get_semihosting_exts+0xdc>
   2a010:	2c13      	cmp	r4, #19
   2a012:	d840      	bhi.n	2a096 <_get_semihosting_exts+0xb6>
   2a014:	4b32      	ldr	r3, [pc, #200]	@ (2a0e0 <_get_semihosting_exts+0x100>)
   2a016:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   2a01a:	3201      	adds	r2, #1
   2a01c:	d03b      	beq.n	2a096 <_get_semihosting_exts+0xb6>
   2a01e:	eb03 09c4 	add.w	r9, r3, r4, lsl #3
   2a022:	250c      	movs	r5, #12
   2a024:	4628      	mov	r0, r5
   2a026:	4649      	mov	r1, r9
   2a028:	beab      	bkpt	0x00ab
   2a02a:	4605      	mov	r5, r0
   2a02c:	1c6a      	adds	r2, r5, #1
   2a02e:	d035      	beq.n	2a09c <_get_semihosting_exts+0xbc>
   2a030:	2d03      	cmp	r5, #3
   2a032:	dd3d      	ble.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a034:	3d03      	subs	r5, #3
   2a036:	42b5      	cmp	r5, r6
   2a038:	dd3a      	ble.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a03a:	2204      	movs	r2, #4
   2a03c:	eb0d 0102 	add.w	r1, sp, r2
   2a040:	4620      	mov	r0, r4
   2a042:	f7ff fd95 	bl	29b70 <_read>
   2a046:	2803      	cmp	r0, #3
   2a048:	dd32      	ble.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a04a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2a04e:	2b53      	cmp	r3, #83	@ 0x53
   2a050:	d12e      	bne.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a052:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2a056:	2b48      	cmp	r3, #72	@ 0x48
   2a058:	d12a      	bne.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a05a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2a05e:	2b46      	cmp	r3, #70	@ 0x46
   2a060:	d126      	bne.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a062:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a066:	2b42      	cmp	r3, #66	@ 0x42
   2a068:	d122      	bne.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a06a:	2201      	movs	r2, #1
   2a06c:	4641      	mov	r1, r8
   2a06e:	4620      	mov	r0, r4
   2a070:	f7ff fdc4 	bl	29bfc <_swilseek>
   2a074:	2800      	cmp	r0, #0
   2a076:	db1b      	blt.n	2a0b0 <_get_semihosting_exts+0xd0>
   2a078:	4632      	mov	r2, r6
   2a07a:	4639      	mov	r1, r7
   2a07c:	4620      	mov	r0, r4
   2a07e:	f7ff fd77 	bl	29b70 <_read>
   2a082:	4605      	mov	r5, r0
   2a084:	4620      	mov	r0, r4
   2a086:	f7ff fe6d 	bl	29d64 <_close>
   2a08a:	1c6b      	adds	r3, r5, #1
   2a08c:	d019      	beq.n	2a0c2 <_get_semihosting_exts+0xe2>
   2a08e:	4628      	mov	r0, r5
   2a090:	b003      	add	sp, #12
   2a092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a096:	f04f 0900 	mov.w	r9, #0
   2a09a:	e7c2      	b.n	2a022 <_get_semihosting_exts+0x42>
   2a09c:	f7fa fb00 	bl	246a0 <__errno>
   2a0a0:	2613      	movs	r6, #19
   2a0a2:	4605      	mov	r5, r0
   2a0a4:	2700      	movs	r7, #0
   2a0a6:	4630      	mov	r0, r6
   2a0a8:	4639      	mov	r1, r7
   2a0aa:	beab      	bkpt	0x00ab
   2a0ac:	4606      	mov	r6, r0
   2a0ae:	602e      	str	r6, [r5, #0]
   2a0b0:	4620      	mov	r0, r4
   2a0b2:	f7ff fe57 	bl	29d64 <_close>
   2a0b6:	f04f 35ff 	mov.w	r5, #4294967295
   2a0ba:	e7e8      	b.n	2a08e <_get_semihosting_exts+0xae>
   2a0bc:	f7f9 fe50 	bl	23d60 <__sinit>
   2a0c0:	e7a6      	b.n	2a010 <_get_semihosting_exts+0x30>
   2a0c2:	f7fa faed 	bl	246a0 <__errno>
   2a0c6:	2613      	movs	r6, #19
   2a0c8:	4604      	mov	r4, r0
   2a0ca:	2700      	movs	r7, #0
   2a0cc:	4630      	mov	r0, r6
   2a0ce:	4639      	mov	r1, r7
   2a0d0:	beab      	bkpt	0x00ab
   2a0d2:	4606      	mov	r6, r0
   2a0d4:	6026      	str	r6, [r4, #0]
   2a0d6:	e7da      	b.n	2a08e <_get_semihosting_exts+0xae>
   2a0d8:	00030bbc 	.word	0x00030bbc
   2a0dc:	100025a0 	.word	0x100025a0
   2a0e0:	10054cb0 	.word	0x10054cb0

0002a0e4 <_has_ext_exit_extended>:
   2a0e4:	b530      	push	{r4, r5, lr}
   2a0e6:	4c0f      	ldr	r4, [pc, #60]	@ (2a124 <_has_ext_exit_extended+0x40>)
   2a0e8:	6820      	ldr	r0, [r4, #0]
   2a0ea:	2800      	cmp	r0, #0
   2a0ec:	b083      	sub	sp, #12
   2a0ee:	db01      	blt.n	2a0f4 <_has_ext_exit_extended+0x10>
   2a0f0:	b003      	add	sp, #12
   2a0f2:	bd30      	pop	{r4, r5, pc}
   2a0f4:	4d0c      	ldr	r5, [pc, #48]	@ (2a128 <_has_ext_exit_extended+0x44>)
   2a0f6:	2100      	movs	r1, #0
   2a0f8:	2201      	movs	r2, #1
   2a0fa:	a801      	add	r0, sp, #4
   2a0fc:	6021      	str	r1, [r4, #0]
   2a0fe:	602a      	str	r2, [r5, #0]
   2a100:	f7ff ff6e 	bl	29fe0 <_get_semihosting_exts>
   2a104:	2800      	cmp	r0, #0
   2a106:	dd09      	ble.n	2a11c <_has_ext_exit_extended+0x38>
   2a108:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2a10c:	f003 0001 	and.w	r0, r3, #1
   2a110:	f003 0302 	and.w	r3, r3, #2
   2a114:	6020      	str	r0, [r4, #0]
   2a116:	602b      	str	r3, [r5, #0]
   2a118:	b003      	add	sp, #12
   2a11a:	bd30      	pop	{r4, r5, pc}
   2a11c:	6820      	ldr	r0, [r4, #0]
   2a11e:	b003      	add	sp, #12
   2a120:	bd30      	pop	{r4, r5, pc}
   2a122:	bf00      	nop
   2a124:	10002b00 	.word	0x10002b00
   2a128:	10002afc 	.word	0x10002afc

0002a12c <_isatty>:
   2a12c:	4b16      	ldr	r3, [pc, #88]	@ (2a188 <_isatty+0x5c>)
   2a12e:	681b      	ldr	r3, [r3, #0]
   2a130:	b570      	push	{r4, r5, r6, lr}
   2a132:	4605      	mov	r5, r0
   2a134:	b10b      	cbz	r3, 2a13a <_isatty+0xe>
   2a136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   2a138:	b1e2      	cbz	r2, 2a174 <_isatty+0x48>
   2a13a:	2d13      	cmp	r5, #19
   2a13c:	d81f      	bhi.n	2a17e <_isatty+0x52>
   2a13e:	4b13      	ldr	r3, [pc, #76]	@ (2a18c <_isatty+0x60>)
   2a140:	f853 2035 	ldr.w	r2, [r3, r5, lsl #3]
   2a144:	3201      	adds	r2, #1
   2a146:	d01a      	beq.n	2a17e <_isatty+0x52>
   2a148:	2409      	movs	r4, #9
   2a14a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a14e:	4620      	mov	r0, r4
   2a150:	4629      	mov	r1, r5
   2a152:	beab      	bkpt	0x00ab
   2a154:	4604      	mov	r4, r0
   2a156:	2c01      	cmp	r4, #1
   2a158:	4620      	mov	r0, r4
   2a15a:	d00a      	beq.n	2a172 <_isatty+0x46>
   2a15c:	f7fa faa0 	bl	246a0 <__errno>
   2a160:	2513      	movs	r5, #19
   2a162:	4604      	mov	r4, r0
   2a164:	2600      	movs	r6, #0
   2a166:	4628      	mov	r0, r5
   2a168:	4631      	mov	r1, r6
   2a16a:	beab      	bkpt	0x00ab
   2a16c:	4605      	mov	r5, r0
   2a16e:	6025      	str	r5, [r4, #0]
   2a170:	2000      	movs	r0, #0
   2a172:	bd70      	pop	{r4, r5, r6, pc}
   2a174:	4618      	mov	r0, r3
   2a176:	f7f9 fdf3 	bl	23d60 <__sinit>
   2a17a:	2d13      	cmp	r5, #19
   2a17c:	d9df      	bls.n	2a13e <_isatty+0x12>
   2a17e:	f7fa fa8f 	bl	246a0 <__errno>
   2a182:	2309      	movs	r3, #9
   2a184:	6003      	str	r3, [r0, #0]
   2a186:	e7f3      	b.n	2a170 <_isatty+0x44>
   2a188:	100025a0 	.word	0x100025a0
   2a18c:	10054cb0 	.word	0x10054cb0

0002a190 <__aeabi_d2lz>:
   2a190:	b538      	push	{r3, r4, r5, lr}
   2a192:	2200      	movs	r2, #0
   2a194:	2300      	movs	r3, #0
   2a196:	4604      	mov	r4, r0
   2a198:	460d      	mov	r5, r1
   2a19a:	f7e2 fbdf 	bl	c95c <__aeabi_dcmplt>
   2a19e:	b928      	cbnz	r0, 2a1ac <__aeabi_d2lz+0x1c>
   2a1a0:	4620      	mov	r0, r4
   2a1a2:	4629      	mov	r1, r5
   2a1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a1a8:	f000 b80a 	b.w	2a1c0 <__aeabi_d2ulz>
   2a1ac:	4620      	mov	r0, r4
   2a1ae:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
   2a1b2:	f000 f805 	bl	2a1c0 <__aeabi_d2ulz>
   2a1b6:	4240      	negs	r0, r0
   2a1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2a1bc:	bd38      	pop	{r3, r4, r5, pc}
   2a1be:	bf00      	nop

0002a1c0 <__aeabi_d2ulz>:
   2a1c0:	b5d0      	push	{r4, r6, r7, lr}
   2a1c2:	4b0c      	ldr	r3, [pc, #48]	@ (2a1f4 <__aeabi_d2ulz+0x34>)
   2a1c4:	2200      	movs	r2, #0
   2a1c6:	4606      	mov	r6, r0
   2a1c8:	460f      	mov	r7, r1
   2a1ca:	f7e2 f955 	bl	c478 <__aeabi_dmul>
   2a1ce:	f7e2 fbed 	bl	c9ac <__aeabi_d2uiz>
   2a1d2:	4604      	mov	r4, r0
   2a1d4:	f7e2 f8d6 	bl	c384 <__aeabi_ui2d>
   2a1d8:	4b07      	ldr	r3, [pc, #28]	@ (2a1f8 <__aeabi_d2ulz+0x38>)
   2a1da:	2200      	movs	r2, #0
   2a1dc:	f7e2 f94c 	bl	c478 <__aeabi_dmul>
   2a1e0:	4602      	mov	r2, r0
   2a1e2:	460b      	mov	r3, r1
   2a1e4:	4630      	mov	r0, r6
   2a1e6:	4639      	mov	r1, r7
   2a1e8:	f7e1 ff8e 	bl	c108 <__aeabi_dsub>
   2a1ec:	f7e2 fbde 	bl	c9ac <__aeabi_d2uiz>
   2a1f0:	4621      	mov	r1, r4
   2a1f2:	bdd0      	pop	{r4, r6, r7, pc}
   2a1f4:	3df00000 	.word	0x3df00000
   2a1f8:	41f00000 	.word	0x41f00000
   2a1fc:	001f0000 	.word	0x001f0000
   2a200:	005a003b 	.word	0x005a003b
   2a204:	00970078 	.word	0x00970078
   2a208:	00d300b5 	.word	0x00d300b5
   2a20c:	011000f2 	.word	0x011000f2
   2a210:	014d012f 	.word	0x014d012f
   2a214:	2a2a2a0a 	.word	0x2a2a2a0a
   2a218:	2a2a2a2a 	.word	0x2a2a2a2a
   2a21c:	2a2a2a2a 	.word	0x2a2a2a2a
   2a220:	2a2a2a2a 	.word	0x2a2a2a2a
   2a224:	2a2a2a2a 	.word	0x2a2a2a2a
   2a228:	2a2a2a2a 	.word	0x2a2a2a2a
   2a22c:	2a2a2a2a 	.word	0x2a2a2a2a
   2a230:	000a2a2a 	.word	0x000a2a2a
   2a234:	55424544 	.word	0x55424544
   2a238:	3a3a2047 	.word	0x3a3a2047
   2a23c:	50434c20 	.word	0x50434c20
   2a240:	6e6f4320 	.word	0x6e6f4320
   2a244:	6c6f7274 	.word	0x6c6f7274
   2a248:	72616f62 	.word	0x72616f62
   2a24c:	00000064 	.word	0x00000064
   2a250:	44657250 	.word	0x44657250
   2a254:	6f6c7065 	.word	0x6f6c7065
   2a258:	61745f79 	.word	0x61745f79
   2a25c:	00006b73 	.word	0x00006b73
   2a260:	6e69616d 	.word	0x6e69616d
   2a264:	0000632e 	.word	0x0000632e
   2a268:	5252450a 	.word	0x5252450a
   2a26c:	3a3a524f 	.word	0x3a3a524f
   2a270:	2c732520 	.word	0x2c732520
   2a274:	0a642520 	.word	0x0a642520
   2a278:	00000000 	.word	0x00000000
   2a27c:	666f7250 	.word	0x666f7250
   2a280:	72656c69 	.word	0x72656c69
   2a284:	7361745f 	.word	0x7361745f
   2a288:	0000006b 	.word	0x0000006b
   2a28c:	75706f50 	.word	0x75706f50
   2a290:	61745f70 	.word	0x61745f70
   2a294:	00006b73 	.word	0x00006b73
   2a298:	65657246 	.word	0x65657246
   2a29c:	534f5452 	.word	0x534f5452
   2a2a0:	72656820 	.word	0x72656820
   2a2a4:	00000a65 	.word	0x00000a65
   2a2a8:	65686373 	.word	0x65686373
   2a2ac:	656c7564 	.word	0x656c7564
   2a2b0:	73692072 	.word	0x73692072
   2a2b4:	696f6720 	.word	0x696f6720
   2a2b8:	7420676e 	.word	0x7420676e
   2a2bc:	7473206f 	.word	0x7473206f
   2a2c0:	0a747261 	.word	0x0a747261
   2a2c4:	00000000 	.word	0x00000000
   2a2c8:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2cc:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2d0:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2d4:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2d8:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2dc:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2e0:	2a2a2a2a 	.word	0x2a2a2a2a
   2a2e4:	000a0a2a 	.word	0x000a0a2a
   2a2e8:	6e206f44 	.word	0x6e206f44
   2a2ec:	6720746f 	.word	0x6720746f
   2a2f0:	68207465 	.word	0x68207465
   2a2f4:	0a657265 	.word	0x0a657265
   2a2f8:	00000000 	.word	0x00000000
   2a2fc:	6e206f64 	.word	0x6e206f64
   2a300:	6720746f 	.word	0x6720746f
   2a304:	68207465 	.word	0x68207465
   2a308:	20657265 	.word	0x20657265
   2a30c:	63206e69 	.word	0x63206e69
   2a310:	20657361 	.word	0x20657361
   2a314:	5220666f 	.word	0x5220666f
   2a318:	0a534f54 	.word	0x0a534f54
   2a31c:	00000000 	.word	0x00000000
   2a320:	552f3a43 	.word	0x552f3a43
   2a324:	73726573 	.word	0x73726573
   2a328:	72756b2f 	.word	0x72756b2f
   2a32c:	2f616e69 	.word	0x2f616e69
   2a330:	75636f44 	.word	0x75636f44
   2a334:	746e656d 	.word	0x746e656d
   2a338:	69472f73 	.word	0x69472f73
   2a33c:	62754874 	.word	0x62754874
   2a340:	626d412f 	.word	0x626d412f
   2a344:	75537169 	.word	0x75537169
   2a348:	53657469 	.word	0x53657469
   2a34c:	742f4b44 	.word	0x742f4b44
   2a350:	64726968 	.word	0x64726968
   2a354:	7261705f 	.word	0x7261705f
   2a358:	462f7974 	.word	0x462f7974
   2a35c:	52656572 	.word	0x52656572
   2a360:	76534f54 	.word	0x76534f54
   2a364:	312e3031 	.word	0x312e3031
   2a368:	532f312e 	.word	0x532f312e
   2a36c:	6372756f 	.word	0x6372756f
   2a370:	6f702f65 	.word	0x6f702f65
   2a374:	62617472 	.word	0x62617472
   2a378:	472f656c 	.word	0x472f656c
   2a37c:	412f4343 	.word	0x412f4343
   2a380:	6f70614d 	.word	0x6f70614d
   2a384:	326f6c6c 	.word	0x326f6c6c
   2a388:	726f702f 	.word	0x726f702f
   2a38c:	00632e74 	.word	0x00632e74
   2a390:	552f3a43 	.word	0x552f3a43
   2a394:	73726573 	.word	0x73726573
   2a398:	72756b2f 	.word	0x72756b2f
   2a39c:	2f616e69 	.word	0x2f616e69
   2a3a0:	75636f44 	.word	0x75636f44
   2a3a4:	746e656d 	.word	0x746e656d
   2a3a8:	69472f73 	.word	0x69472f73
   2a3ac:	62754874 	.word	0x62754874
   2a3b0:	626d412f 	.word	0x626d412f
   2a3b4:	75537169 	.word	0x75537169
   2a3b8:	53657469 	.word	0x53657469
   2a3bc:	742f4b44 	.word	0x742f4b44
   2a3c0:	64726968 	.word	0x64726968
   2a3c4:	7261705f 	.word	0x7261705f
   2a3c8:	462f7974 	.word	0x462f7974
   2a3cc:	52656572 	.word	0x52656572
   2a3d0:	76534f54 	.word	0x76534f54
   2a3d4:	312e3031 	.word	0x312e3031
   2a3d8:	532f312e 	.word	0x532f312e
   2a3dc:	6372756f 	.word	0x6372756f
   2a3e0:	6f702f65 	.word	0x6f702f65
   2a3e4:	62617472 	.word	0x62617472
   2a3e8:	4d2f656c 	.word	0x4d2f656c
   2a3ec:	614d6d65 	.word	0x614d6d65
   2a3f0:	682f676e 	.word	0x682f676e
   2a3f4:	5f706165 	.word	0x5f706165
   2a3f8:	00632e34 	.word	0x00632e34
   2a3fc:	552f3a43 	.word	0x552f3a43
   2a400:	73726573 	.word	0x73726573
   2a404:	72756b2f 	.word	0x72756b2f
   2a408:	2f616e69 	.word	0x2f616e69
   2a40c:	75636f44 	.word	0x75636f44
   2a410:	746e656d 	.word	0x746e656d
   2a414:	69472f73 	.word	0x69472f73
   2a418:	62754874 	.word	0x62754874
   2a41c:	626d412f 	.word	0x626d412f
   2a420:	75537169 	.word	0x75537169
   2a424:	53657469 	.word	0x53657469
   2a428:	742f4b44 	.word	0x742f4b44
   2a42c:	64726968 	.word	0x64726968
   2a430:	7261705f 	.word	0x7261705f
   2a434:	462f7974 	.word	0x462f7974
   2a438:	52656572 	.word	0x52656572
   2a43c:	76534f54 	.word	0x76534f54
   2a440:	312e3031 	.word	0x312e3031
   2a444:	532f312e 	.word	0x532f312e
   2a448:	6372756f 	.word	0x6372756f
   2a44c:	76652f65 	.word	0x76652f65
   2a450:	5f746e65 	.word	0x5f746e65
   2a454:	756f7267 	.word	0x756f7267
   2a458:	632e7370 	.word	0x632e7370
   2a45c:	00000000 	.word	0x00000000
   2a460:	552f3a43 	.word	0x552f3a43
   2a464:	73726573 	.word	0x73726573
   2a468:	72756b2f 	.word	0x72756b2f
   2a46c:	2f616e69 	.word	0x2f616e69
   2a470:	75636f44 	.word	0x75636f44
   2a474:	746e656d 	.word	0x746e656d
   2a478:	69472f73 	.word	0x69472f73
   2a47c:	62754874 	.word	0x62754874
   2a480:	626d412f 	.word	0x626d412f
   2a484:	75537169 	.word	0x75537169
   2a488:	53657469 	.word	0x53657469
   2a48c:	742f4b44 	.word	0x742f4b44
   2a490:	64726968 	.word	0x64726968
   2a494:	7261705f 	.word	0x7261705f
   2a498:	462f7974 	.word	0x462f7974
   2a49c:	52656572 	.word	0x52656572
   2a4a0:	76534f54 	.word	0x76534f54
   2a4a4:	312e3031 	.word	0x312e3031
   2a4a8:	532f312e 	.word	0x532f312e
   2a4ac:	6372756f 	.word	0x6372756f
   2a4b0:	75712f65 	.word	0x75712f65
   2a4b4:	2e657565 	.word	0x2e657565
   2a4b8:	00000063 	.word	0x00000063
   2a4bc:	552f3a43 	.word	0x552f3a43
   2a4c0:	73726573 	.word	0x73726573
   2a4c4:	72756b2f 	.word	0x72756b2f
   2a4c8:	2f616e69 	.word	0x2f616e69
   2a4cc:	75636f44 	.word	0x75636f44
   2a4d0:	746e656d 	.word	0x746e656d
   2a4d4:	69472f73 	.word	0x69472f73
   2a4d8:	62754874 	.word	0x62754874
   2a4dc:	626d412f 	.word	0x626d412f
   2a4e0:	75537169 	.word	0x75537169
   2a4e4:	53657469 	.word	0x53657469
   2a4e8:	742f4b44 	.word	0x742f4b44
   2a4ec:	64726968 	.word	0x64726968
   2a4f0:	7261705f 	.word	0x7261705f
   2a4f4:	462f7974 	.word	0x462f7974
   2a4f8:	52656572 	.word	0x52656572
   2a4fc:	76534f54 	.word	0x76534f54
   2a500:	312e3031 	.word	0x312e3031
   2a504:	532f312e 	.word	0x532f312e
   2a508:	6372756f 	.word	0x6372756f
   2a50c:	61742f65 	.word	0x61742f65
   2a510:	2e736b73 	.word	0x2e736b73
   2a514:	00000063 	.word	0x00000063
   2a518:	454c4449 	.word	0x454c4449
   2a51c:	00000000 	.word	0x00000000
   2a520:	552f3a43 	.word	0x552f3a43
   2a524:	73726573 	.word	0x73726573
   2a528:	72756b2f 	.word	0x72756b2f
   2a52c:	2f616e69 	.word	0x2f616e69
   2a530:	75636f44 	.word	0x75636f44
   2a534:	746e656d 	.word	0x746e656d
   2a538:	69472f73 	.word	0x69472f73
   2a53c:	62754874 	.word	0x62754874
   2a540:	626d412f 	.word	0x626d412f
   2a544:	75537169 	.word	0x75537169
   2a548:	53657469 	.word	0x53657469
   2a54c:	742f4b44 	.word	0x742f4b44
   2a550:	64726968 	.word	0x64726968
   2a554:	7261705f 	.word	0x7261705f
   2a558:	462f7974 	.word	0x462f7974
   2a55c:	52656572 	.word	0x52656572
   2a560:	76534f54 	.word	0x76534f54
   2a564:	312e3031 	.word	0x312e3031
   2a568:	532f312e 	.word	0x532f312e
   2a56c:	6372756f 	.word	0x6372756f
   2a570:	69742f65 	.word	0x69742f65
   2a574:	7372656d 	.word	0x7372656d
   2a578:	0000632e 	.word	0x0000632e
   2a57c:	20726d54 	.word	0x20726d54
   2a580:	00637653 	.word	0x00637653
   2a584:	64726148 	.word	0x64726148
   2a588:	75614620 	.word	0x75614620
   2a58c:	7320746c 	.word	0x7320746c
   2a590:	6b636174 	.word	0x6b636174
   2a594:	64206465 	.word	0x64206465
   2a598:	3a617461 	.word	0x3a617461
   2a59c:	0000000a 	.word	0x0000000a
   2a5a0:	20202020 	.word	0x20202020
   2a5a4:	20203052 	.word	0x20203052
   2a5a8:	7830203d 	.word	0x7830203d
   2a5ac:	58383025 	.word	0x58383025
   2a5b0:	0000000a 	.word	0x0000000a
   2a5b4:	20202020 	.word	0x20202020
   2a5b8:	20203152 	.word	0x20203152
   2a5bc:	7830203d 	.word	0x7830203d
   2a5c0:	58383025 	.word	0x58383025
   2a5c4:	0000000a 	.word	0x0000000a
   2a5c8:	20202020 	.word	0x20202020
   2a5cc:	20203252 	.word	0x20203252
   2a5d0:	7830203d 	.word	0x7830203d
   2a5d4:	58383025 	.word	0x58383025
   2a5d8:	0000000a 	.word	0x0000000a
   2a5dc:	20202020 	.word	0x20202020
   2a5e0:	20203352 	.word	0x20203352
   2a5e4:	7830203d 	.word	0x7830203d
   2a5e8:	58383025 	.word	0x58383025
   2a5ec:	0000000a 	.word	0x0000000a
   2a5f0:	20202020 	.word	0x20202020
   2a5f4:	20323152 	.word	0x20323152
   2a5f8:	7830203d 	.word	0x7830203d
   2a5fc:	58383025 	.word	0x58383025
   2a600:	0000000a 	.word	0x0000000a
   2a604:	20202020 	.word	0x20202020
   2a608:	2020524c 	.word	0x2020524c
   2a60c:	7830203d 	.word	0x7830203d
   2a610:	58383025 	.word	0x58383025
   2a614:	0000000a 	.word	0x0000000a
   2a618:	20202020 	.word	0x20202020
   2a61c:	20204350 	.word	0x20204350
   2a620:	7830203d 	.word	0x7830203d
   2a624:	58383025 	.word	0x58383025
   2a628:	0000000a 	.word	0x0000000a
   2a62c:	20202020 	.word	0x20202020
   2a630:	20525350 	.word	0x20525350
   2a634:	7830203d 	.word	0x7830203d
   2a638:	58383025 	.word	0x58383025
   2a63c:	0000000a 	.word	0x0000000a
   2a640:	6568744f 	.word	0x6568744f
   2a644:	61482072 	.word	0x61482072
   2a648:	46206472 	.word	0x46206472
   2a64c:	746c7561 	.word	0x746c7561
   2a650:	74616420 	.word	0x74616420
   2a654:	000a3a61 	.word	0x000a3a61
   2a658:	20202020 	.word	0x20202020
   2a65c:	6c756146 	.word	0x6c756146
   2a660:	64612074 	.word	0x64612074
   2a664:	73657264 	.word	0x73657264
   2a668:	203d2073 	.word	0x203d2073
   2a66c:	30257830 	.word	0x30257830
   2a670:	000a5838 	.word	0x000a5838
   2a674:	20202020 	.word	0x20202020
   2a678:	52414642 	.word	0x52414642
   2a67c:	75422820 	.word	0x75422820
   2a680:	61462073 	.word	0x61462073
   2a684:	20746c75 	.word	0x20746c75
   2a688:	72646441 	.word	0x72646441
   2a68c:	67655220 	.word	0x67655220
   2a690:	203d2029 	.word	0x203d2029
   2a694:	30257830 	.word	0x30257830
   2a698:	000a5838 	.word	0x000a5838
   2a69c:	20202020 	.word	0x20202020
   2a6a0:	52534d4d 	.word	0x52534d4d
   2a6a4:	654d2820 	.word	0x654d2820
   2a6a8:	674d206d 	.word	0x674d206d
   2a6ac:	4620746d 	.word	0x4620746d
   2a6b0:	746c7561 	.word	0x746c7561
   2a6b4:	61745320 	.word	0x61745320
   2a6b8:	20737574 	.word	0x20737574
   2a6bc:	29676552 	.word	0x29676552
   2a6c0:	30203d20 	.word	0x30203d20
   2a6c4:	32302578 	.word	0x32302578
   2a6c8:	00000a58 	.word	0x00000a58
   2a6cc:	20202020 	.word	0x20202020
   2a6d0:	52534642 	.word	0x52534642
   2a6d4:	75422820 	.word	0x75422820
   2a6d8:	61462073 	.word	0x61462073
   2a6dc:	20746c75 	.word	0x20746c75
   2a6e0:	74617453 	.word	0x74617453
   2a6e4:	52207375 	.word	0x52207375
   2a6e8:	20296765 	.word	0x20296765
   2a6ec:	7830203d 	.word	0x7830203d
   2a6f0:	58323025 	.word	0x58323025
   2a6f4:	0000000a 	.word	0x0000000a
   2a6f8:	20202020 	.word	0x20202020
   2a6fc:	52534655 	.word	0x52534655
   2a700:	73552820 	.word	0x73552820
   2a704:	20656761 	.word	0x20656761
   2a708:	6c756146 	.word	0x6c756146
   2a70c:	74532074 	.word	0x74532074
   2a710:	73757461 	.word	0x73757461
   2a714:	67655220 	.word	0x67655220
   2a718:	203d2029 	.word	0x203d2029
   2a71c:	30257830 	.word	0x30257830
   2a720:	000a5834 	.word	0x000a5834
   2a724:	20202020 	.word	0x20202020
   2a728:	20202020 	.word	0x20202020
   2a72c:	52534642 	.word	0x52534642
   2a730:	74696220 	.word	0x74696220
   2a734:	42203a37 	.word	0x42203a37
   2a738:	56524146 	.word	0x56524146
   2a73c:	44494c41 	.word	0x44494c41
   2a740:	0000000a 	.word	0x0000000a
   2a744:	20202020 	.word	0x20202020
   2a748:	20202020 	.word	0x20202020
   2a74c:	52534642 	.word	0x52534642
   2a750:	74696220 	.word	0x74696220
   2a754:	52203a36 	.word	0x52203a36
   2a758:	52455345 	.word	0x52455345
   2a75c:	0a444556 	.word	0x0a444556
   2a760:	00000000 	.word	0x00000000
   2a764:	20202020 	.word	0x20202020
   2a768:	20202020 	.word	0x20202020
   2a76c:	52534642 	.word	0x52534642
   2a770:	74696220 	.word	0x74696220
   2a774:	4c203a35 	.word	0x4c203a35
   2a778:	52455053 	.word	0x52455053
   2a77c:	00000a52 	.word	0x00000a52
   2a780:	20202020 	.word	0x20202020
   2a784:	20202020 	.word	0x20202020
   2a788:	52534642 	.word	0x52534642
   2a78c:	74696220 	.word	0x74696220
   2a790:	53203a34 	.word	0x53203a34
   2a794:	52454b54 	.word	0x52454b54
   2a798:	00000a52 	.word	0x00000a52
   2a79c:	20202020 	.word	0x20202020
   2a7a0:	20202020 	.word	0x20202020
   2a7a4:	52534642 	.word	0x52534642
   2a7a8:	74696220 	.word	0x74696220
   2a7ac:	55203a33 	.word	0x55203a33
   2a7b0:	4b54534e 	.word	0x4b54534e
   2a7b4:	0a525245 	.word	0x0a525245
   2a7b8:	00000000 	.word	0x00000000
   2a7bc:	20202020 	.word	0x20202020
   2a7c0:	20202020 	.word	0x20202020
   2a7c4:	52534642 	.word	0x52534642
   2a7c8:	74696220 	.word	0x74696220
   2a7cc:	49203a32 	.word	0x49203a32
   2a7d0:	4552504d 	.word	0x4552504d
   2a7d4:	45534943 	.word	0x45534943
   2a7d8:	000a5252 	.word	0x000a5252
   2a7dc:	20202020 	.word	0x20202020
   2a7e0:	20202020 	.word	0x20202020
   2a7e4:	52534642 	.word	0x52534642
   2a7e8:	74696220 	.word	0x74696220
   2a7ec:	50203a31 	.word	0x50203a31
   2a7f0:	49434552 	.word	0x49434552
   2a7f4:	52454553 	.word	0x52454553
   2a7f8:	00000a52 	.word	0x00000a52
   2a7fc:	20202020 	.word	0x20202020
   2a800:	20202020 	.word	0x20202020
   2a804:	52534642 	.word	0x52534642
   2a808:	74696220 	.word	0x74696220
   2a80c:	49203a30 	.word	0x49203a30
   2a810:	45535542 	.word	0x45535542
   2a814:	000a5252 	.word	0x000a5252
   2a818:	2055434d 	.word	0x2055434d
   2a81c:	6c756146 	.word	0x6c756146
   2a820:	61642074 	.word	0x61642074
   2a824:	0a3a6174 	.word	0x0a3a6174
   2a828:	00000000 	.word	0x00000000
   2a82c:	49202020 	.word	0x49202020
   2a830:	45444f43 	.word	0x45444f43
   2a834:	75614620 	.word	0x75614620
   2a838:	4120746c 	.word	0x4120746c
   2a83c:	65726464 	.word	0x65726464
   2a840:	203a7373 	.word	0x203a7373
   2a844:	30257830 	.word	0x30257830
   2a848:	000a5838 	.word	0x000a5838
   2a84c:	44202020 	.word	0x44202020
   2a850:	45444f43 	.word	0x45444f43
   2a854:	75614620 	.word	0x75614620
   2a858:	4120746c 	.word	0x4120746c
   2a85c:	65726464 	.word	0x65726464
   2a860:	203a7373 	.word	0x203a7373
   2a864:	30257830 	.word	0x30257830
   2a868:	000a5838 	.word	0x000a5838
   2a86c:	53202020 	.word	0x53202020
   2a870:	46205359 	.word	0x46205359
   2a874:	746c7561 	.word	0x746c7561
   2a878:	64644120 	.word	0x64644120
   2a87c:	73736572 	.word	0x73736572
   2a880:	7830203a 	.word	0x7830203a
   2a884:	58383025 	.word	0x58383025
   2a888:	0000000a 	.word	0x0000000a
   2a88c:	64697249 	.word	0x64697249
   2a890:	206d7569 	.word	0x206d7569
   2a894:	53203a3a 	.word	0x53203a3a
   2a898:	6c657461 	.word	0x6c657461
   2a89c:	6574696c 	.word	0x6574696c
   2a8a0:	6c656420 	.word	0x6c656420
   2a8a4:	50207961 	.word	0x50207961
   2a8a8:	4f495245 	.word	0x4f495245
   2a8ac:	64253d44 	.word	0x64253d44
   2a8b0:	202c736d 	.word	0x202c736d
   2a8b4:	65736925 	.word	0x65736925
   2a8b8:	00000a63 	.word	0x00000a63
   2a8bc:	64697249 	.word	0x64697249
   2a8c0:	206d7569 	.word	0x206d7569
   2a8c4:	53203a3a 	.word	0x53203a3a
   2a8c8:	6c657461 	.word	0x6c657461
   2a8cc:	6574696c 	.word	0x6574696c
   2a8d0:	73697620 	.word	0x73697620
   2a8d4:	6c696269 	.word	0x6c696269
   2a8d8:	20797469 	.word	0x20797469
   2a8dc:	63656863 	.word	0x63656863
   2a8e0:	69253d6b 	.word	0x69253d6b
   2a8e4:	0000000a 	.word	0x0000000a
   2a8e8:	0000003a 	.word	0x0000003a
   2a8ec:	44524148 	.word	0x44524148
   2a8f0:	45524157 	.word	0x45524157
   2a8f4:	49414620 	.word	0x49414620
   2a8f8:	4552554c 	.word	0x4552554c
   2a8fc:	00000a0d 	.word	0x00000a0d
   2a900:	6b736174 	.word	0x6b736174
   2a904:	6972495f 	.word	0x6972495f
   2a908:	6d756964 	.word	0x6d756964
   2a90c:	7461735f 	.word	0x7461735f
   2a910:	696c6c65 	.word	0x696c6c65
   2a914:	00006574 	.word	0x00006574
   2a918:	72732f2e 	.word	0x72732f2e
   2a91c:	39692f63 	.word	0x39692f63
   2a920:	6e333036 	.word	0x6e333036
   2a924:	0000632e 	.word	0x0000632e
   2a928:	6b736174 	.word	0x6b736174
   2a92c:	6972495f 	.word	0x6972495f
   2a930:	6d756964 	.word	0x6d756964
   2a934:	6172745f 	.word	0x6172745f
   2a938:	6566736e 	.word	0x6566736e
   2a93c:	00000072 	.word	0x00000072
   2a940:	64697249 	.word	0x64697249
   2a944:	206d7569 	.word	0x206d7569
   2a948:	53203a3a 	.word	0x53203a3a
   2a94c:	69747465 	.word	0x69747465
   2a950:	4920676e 	.word	0x4920676e
   2a954:	69646972 	.word	0x69646972
   2a958:	64206d75 	.word	0x64206d75
   2a95c:	79616c65 	.word	0x79616c65
   2a960:	74617220 	.word	0x74617220
   2a964:	203d2065 	.word	0x203d2065
   2a968:	66332e25 	.word	0x66332e25
   2a96c:	000a7a48 	.word	0x000a7a48
   2a970:	64697249 	.word	0x64697249
   2a974:	206d7569 	.word	0x206d7569
   2a978:	6c203a3a 	.word	0x6c203a3a
   2a97c:	74696d69 	.word	0x74696d69
   2a980:	20666f20 	.word	0x20666f20
   2a984:	20646d63 	.word	0x20646d63
   2a988:	657a6973 	.word	0x657a6973
   2a98c:	20736920 	.word	0x20736920
   2a990:	20303231 	.word	0x20303231
   2a994:	65747962 	.word	0x65747962
   2a998:	2c212073 	.word	0x2c212073
   2a99c:	0a752520 	.word	0x0a752520
   2a9a0:	00000000 	.word	0x00000000
   2a9a4:	4b265441 	.word	0x4b265441
   2a9a8:	00000d30 	.word	0x00000d30
   2a9ac:	00006325 	.word	0x00006325
   2a9b0:	64697249 	.word	0x64697249
   2a9b4:	206d7569 	.word	0x206d7569
   2a9b8:	44203a3a 	.word	0x44203a3a
   2a9bc:	79616c65 	.word	0x79616c65
   2a9c0:	52455020 	.word	0x52455020
   2a9c4:	3d444f49 	.word	0x3d444f49
   2a9c8:	736d7525 	.word	0x736d7525
   2a9cc:	614d202c 	.word	0x614d202c
   2a9d0:	72542078 	.word	0x72542078
   2a9d4:	3d736569 	.word	0x3d736569
   2a9d8:	000a7525 	.word	0x000a7525
   2a9dc:	64697249 	.word	0x64697249
   2a9e0:	206d7569 	.word	0x206d7569
   2a9e4:	54203a3a 	.word	0x54203a3a
   2a9e8:	736e6172 	.word	0x736e6172
   2a9ec:	20726566 	.word	0x20726566
   2a9f0:	74617473 	.word	0x74617473
   2a9f4:	3a207375 	.word	0x3a207375
   2a9f8:	00000020 	.word	0x00000020
   2a9fc:	00207525 	.word	0x00207525
   2aa00:	64697249 	.word	0x64697249
   2aa04:	206d7569 	.word	0x206d7569
   2aa08:	54203a3a 	.word	0x54203a3a
   2aa0c:	736e6172 	.word	0x736e6172
   2aa10:	20726566 	.word	0x20726566
   2aa14:	63637553 	.word	0x63637553
   2aa18:	66737365 	.word	0x66737365
   2aa1c:	202c6c75 	.word	0x202c6c75
   2aa20:	61656c63 	.word	0x61656c63
   2aa24:	676e6972 	.word	0x676e6972
   2aa28:	66756220 	.word	0x66756220
   2aa2c:	0a726566 	.word	0x0a726566
   2aa30:	00000000 	.word	0x00000000
   2aa34:	64697249 	.word	0x64697249
   2aa38:	206d7569 	.word	0x206d7569
   2aa3c:	43203a3a 	.word	0x43203a3a
   2aa40:	7261656c 	.word	0x7261656c
   2aa44:	20676e69 	.word	0x20676e69
   2aa48:	20656874 	.word	0x20656874
   2aa4c:	6769724f 	.word	0x6769724f
   2aa50:	74616e69 	.word	0x74616e69
   2aa54:	62206465 	.word	0x62206465
   2aa58:	65666675 	.word	0x65666675
   2aa5c:	000a3a72 	.word	0x000a3a72
   2aa60:	532b5441 	.word	0x532b5441
   2aa64:	30444442 	.word	0x30444442
   2aa68:	0000000d 	.word	0x0000000d
   2aa6c:	64697249 	.word	0x64697249
   2aa70:	206d7569 	.word	0x206d7569
   2aa74:	4f203a3a 	.word	0x4f203a3a
   2aa78:	69676972 	.word	0x69676972
   2aa7c:	6574616e 	.word	0x6574616e
   2aa80:	75622064 	.word	0x75622064
   2aa84:	72656666 	.word	0x72656666
   2aa88:	20736920 	.word	0x20736920
   2aa8c:	61656c63 	.word	0x61656c63
   2aa90:	0a646572 	.word	0x0a646572
   2aa94:	00000000 	.word	0x00000000
   2aa98:	64697249 	.word	0x64697249
   2aa9c:	206d7569 	.word	0x206d7569
   2aaa0:	4e203a3a 	.word	0x4e203a3a
   2aaa4:	654e206f 	.word	0x654e206f
   2aaa8:	726f7774 	.word	0x726f7774
   2aaac:	6553206b 	.word	0x6553206b
   2aab0:	63697672 	.word	0x63697672
   2aab4:	00000a65 	.word	0x00000a65
   2aab8:	64697249 	.word	0x64697249
   2aabc:	206d7569 	.word	0x206d7569
   2aac0:	43203a3a 	.word	0x43203a3a
   2aac4:	656e6e6f 	.word	0x656e6e6f
   2aac8:	6f697463 	.word	0x6f697463
   2aacc:	6f4c206e 	.word	0x6f4c206e
   2aad0:	28207473 	.word	0x28207473
   2aad4:	64204652 	.word	0x64204652
   2aad8:	29706f72 	.word	0x29706f72
   2aadc:	00000a2e 	.word	0x00000a2e
   2aae0:	64697249 	.word	0x64697249
   2aae4:	206d7569 	.word	0x206d7569
   2aae8:	53203a3a 	.word	0x53203a3a
   2aaec:	73204442 	.word	0x73204442
   2aaf0:	69767265 	.word	0x69767265
   2aaf4:	69206563 	.word	0x69206563
   2aaf8:	65742073 	.word	0x65742073
   2aafc:	726f706d 	.word	0x726f706d
   2ab00:	6c697261 	.word	0x6c697261
   2ab04:	69642079 	.word	0x69642079
   2ab08:	6c626173 	.word	0x6c626173
   2ab0c:	0a2e6465 	.word	0x0a2e6465
   2ab10:	00000000 	.word	0x00000000
   2ab14:	64697249 	.word	0x64697249
   2ab18:	206d7569 	.word	0x206d7569
   2ab1c:	54203a3a 	.word	0x54203a3a
   2ab20:	6c207972 	.word	0x6c207972
   2ab24:	72657461 	.word	0x72657461
   2ab28:	7254202c 	.word	0x7254202c
   2ab2c:	69666661 	.word	0x69666661
   2ab30:	616d2063 	.word	0x616d2063
   2ab34:	6567616e 	.word	0x6567616e
   2ab38:	746e656d 	.word	0x746e656d
   2ab3c:	72657020 	.word	0x72657020
   2ab40:	2e646f69 	.word	0x2e646f69
   2ab44:	0000000a 	.word	0x0000000a
   2ab48:	64697249 	.word	0x64697249
   2ab4c:	206d7569 	.word	0x206d7569
   2ab50:	52203a3a 	.word	0x52203a3a
   2ab54:	68636165 	.word	0x68636165
   2ab58:	4d206465 	.word	0x4d206465
   2ab5c:	54207861 	.word	0x54207861
   2ab60:	73656972 	.word	0x73656972
   2ab64:	0000000a 	.word	0x0000000a
   2ab68:	64697249 	.word	0x64697249
   2ab6c:	206d7569 	.word	0x206d7569
   2ab70:	4f203a3a 	.word	0x4f203a3a
   2ab74:	69676972 	.word	0x69676972
   2ab78:	6574616e 	.word	0x6574616e
   2ab7c:	75622064 	.word	0x75622064
   2ab80:	72656666 	.word	0x72656666
   2ab84:	73617720 	.word	0x73617720
   2ab88:	746f6e20 	.word	0x746f6e20
   2ab8c:	656c6320 	.word	0x656c6320
   2ab90:	64657261 	.word	0x64657261
   2ab94:	0000000a 	.word	0x0000000a
   2ab98:	64697249 	.word	0x64697249
   2ab9c:	206d7569 	.word	0x206d7569
   2aba0:	54203a3a 	.word	0x54203a3a
   2aba4:	206b7361 	.word	0x206b7361
   2aba8:	656c6544 	.word	0x656c6544
   2abac:	0a646574 	.word	0x0a646574
   2abb0:	00000000 	.word	0x00000000
   2abb4:	532b5441 	.word	0x532b5441
   2abb8:	58494442 	.word	0x58494442
   2abbc:	0000000d 	.word	0x0000000d
   2abc0:	64697249 	.word	0x64697249
   2abc4:	206d7569 	.word	0x206d7569
   2abc8:	6c203a3a 	.word	0x6c203a3a
   2abcc:	74676e65 	.word	0x74676e65
   2abd0:	78652068 	.word	0x78652068
   2abd4:	64656563 	.word	0x64656563
   2abd8:	34332073 	.word	0x34332073
   2abdc:	79622030 	.word	0x79622030
   2abe0:	20736574 	.word	0x20736574
   2abe4:	28202c21 	.word	0x28202c21
   2abe8:	21207525 	.word	0x21207525
   2abec:	0a292121 	.word	0x0a292121
   2abf0:	00000000 	.word	0x00000000
   2abf4:	532b5441 	.word	0x532b5441
   2abf8:	42574442 	.word	0x42574442
   2abfc:	0d75253d 	.word	0x0d75253d
   2ac00:	00000000 	.word	0x00000000
   2ac04:	64697249 	.word	0x64697249
   2ac08:	206d7569 	.word	0x206d7569
   2ac0c:	52203a3a 	.word	0x52203a3a
   2ac10:	6c757365 	.word	0x6c757365
   2ac14:	73692074 	.word	0x73692074
   2ac18:	41455220 	.word	0x41455220
   2ac1c:	0a205944 	.word	0x0a205944
   2ac20:	00000000 	.word	0x00000000
   2ac24:	64697249 	.word	0x64697249
   2ac28:	206d7569 	.word	0x206d7569
   2ac2c:	52203a3a 	.word	0x52203a3a
   2ac30:	6c757365 	.word	0x6c757365
   2ac34:	73692074 	.word	0x73692074
   2ac38:	544f4e20 	.word	0x544f4e20
   2ac3c:	41455220 	.word	0x41455220
   2ac40:	0a205944 	.word	0x0a205944
   2ac44:	00000000 	.word	0x00000000
   2ac48:	532b5441 	.word	0x532b5441
   2ac4c:	4f4c4442 	.word	0x4f4c4442
   2ac50:	00000d45 	.word	0x00000d45
   2ac54:	72732f2e 	.word	0x72732f2e
   2ac58:	414d2f63 	.word	0x414d2f63
   2ac5c:	38343158 	.word	0x38343158
   2ac60:	632e3033 	.word	0x632e3033
   2ac64:	00000000 	.word	0x00000000
   2ac68:	685f6d61 	.word	0x685f6d61
   2ac6c:	695f6c61 	.word	0x695f6c61
   2ac70:	695f6d6f 	.word	0x695f6d6f
   2ac74:	6974696e 	.word	0x6974696e
   2ac78:	7a696c61 	.word	0x7a696c61
   2ac7c:	2c332865 	.word	0x2c332865
   2ac80:	49702620 	.word	0x49702620
   2ac84:	61486d6f 	.word	0x61486d6f
   2ac88:	656c646e 	.word	0x656c646e
   2ac8c:	00000029 	.word	0x00000029
   2ac90:	685f6d61 	.word	0x685f6d61
   2ac94:	695f6c61 	.word	0x695f6c61
   2ac98:	705f6d6f 	.word	0x705f6d6f
   2ac9c:	7265776f 	.word	0x7265776f
   2aca0:	7274635f 	.word	0x7274635f
   2aca4:	4970286c 	.word	0x4970286c
   2aca8:	61486d6f 	.word	0x61486d6f
   2acac:	656c646e 	.word	0x656c646e
   2acb0:	4d41202c 	.word	0x4d41202c
   2acb4:	4c41485f 	.word	0x4c41485f
   2acb8:	5359535f 	.word	0x5359535f
   2acbc:	4c525443 	.word	0x4c525443
   2acc0:	4b41575f 	.word	0x4b41575f
   2acc4:	66202c45 	.word	0x66202c45
   2acc8:	65736c61 	.word	0x65736c61
   2accc:	00000029 	.word	0x00000029
   2acd0:	685f6d61 	.word	0x685f6d61
   2acd4:	695f6c61 	.word	0x695f6c61
   2acd8:	635f6d6f 	.word	0x635f6d6f
   2acdc:	69666e6f 	.word	0x69666e6f
   2ace0:	65727567 	.word	0x65727567
   2ace4:	6f497028 	.word	0x6f497028
   2ace8:	6e61486d 	.word	0x6e61486d
   2acec:	2c656c64 	.word	0x2c656c64
   2acf0:	6f492620 	.word	0x6f492620
   2acf4:	6e6f436d 	.word	0x6e6f436d
   2acf8:	29676966 	.word	0x29676966
   2acfc:	00000000 	.word	0x00000000
   2ad00:	685f6d61 	.word	0x685f6d61
   2ad04:	695f6c61 	.word	0x695f6c61
   2ad08:	655f6d6f 	.word	0x655f6d6f
   2ad0c:	6c62616e 	.word	0x6c62616e
   2ad10:	49702865 	.word	0x49702865
   2ad14:	61486d6f 	.word	0x61486d6f
   2ad18:	656c646e 	.word	0x656c646e
   2ad1c:	00000029 	.word	0x00000029
   2ad20:	685f6d61 	.word	0x685f6d61
   2ad24:	675f6c61 	.word	0x675f6c61
   2ad28:	5f6f6970 	.word	0x5f6f6970
   2ad2c:	636e6970 	.word	0x636e6970
   2ad30:	69666e6f 	.word	0x69666e6f
   2ad34:	4d412867 	.word	0x4d412867
   2ad38:	5053425f 	.word	0x5053425f
   2ad3c:	4950475f 	.word	0x4950475f
   2ad40:	4f495f4f 	.word	0x4f495f4f
   2ad44:	535f334d 	.word	0x535f334d
   2ad48:	202c4b43 	.word	0x202c4b43
   2ad4c:	4d415f67 	.word	0x4d415f67
   2ad50:	5053425f 	.word	0x5053425f
   2ad54:	4950475f 	.word	0x4950475f
   2ad58:	4f495f4f 	.word	0x4f495f4f
   2ad5c:	535f334d 	.word	0x535f334d
   2ad60:	00294b43 	.word	0x00294b43
   2ad64:	685f6d61 	.word	0x685f6d61
   2ad68:	675f6c61 	.word	0x675f6c61
   2ad6c:	5f6f6970 	.word	0x5f6f6970
   2ad70:	636e6970 	.word	0x636e6970
   2ad74:	69666e6f 	.word	0x69666e6f
   2ad78:	4d412867 	.word	0x4d412867
   2ad7c:	5053425f 	.word	0x5053425f
   2ad80:	4950475f 	.word	0x4950475f
   2ad84:	4f495f4f 	.word	0x4f495f4f
   2ad88:	4d5f334d 	.word	0x4d5f334d
   2ad8c:	2c4f5349 	.word	0x2c4f5349
   2ad90:	415f6720 	.word	0x415f6720
   2ad94:	53425f4d 	.word	0x53425f4d
   2ad98:	50475f50 	.word	0x50475f50
   2ad9c:	495f4f49 	.word	0x495f4f49
   2ada0:	5f334d4f 	.word	0x5f334d4f
   2ada4:	4f53494d 	.word	0x4f53494d
   2ada8:	00000029 	.word	0x00000029
   2adac:	685f6d61 	.word	0x685f6d61
   2adb0:	675f6c61 	.word	0x675f6c61
   2adb4:	5f6f6970 	.word	0x5f6f6970
   2adb8:	636e6970 	.word	0x636e6970
   2adbc:	69666e6f 	.word	0x69666e6f
   2adc0:	4d412867 	.word	0x4d412867
   2adc4:	5053425f 	.word	0x5053425f
   2adc8:	4950475f 	.word	0x4950475f
   2adcc:	4f495f4f 	.word	0x4f495f4f
   2add0:	4d5f334d 	.word	0x4d5f334d
   2add4:	2c49534f 	.word	0x2c49534f
   2add8:	415f6720 	.word	0x415f6720
   2addc:	53425f4d 	.word	0x53425f4d
   2ade0:	50475f50 	.word	0x50475f50
   2ade4:	495f4f49 	.word	0x495f4f49
   2ade8:	5f334d4f 	.word	0x5f334d4f
   2adec:	49534f4d 	.word	0x49534f4d
   2adf0:	00000029 	.word	0x00000029
   2adf4:	685f6d61 	.word	0x685f6d61
   2adf8:	675f6c61 	.word	0x675f6c61
   2adfc:	5f6f6970 	.word	0x5f6f6970
   2ae00:	636e6970 	.word	0x636e6970
   2ae04:	69666e6f 	.word	0x69666e6f
   2ae08:	4d412867 	.word	0x4d412867
   2ae0c:	5053425f 	.word	0x5053425f
   2ae10:	4950475f 	.word	0x4950475f
   2ae14:	4f495f4f 	.word	0x4f495f4f
   2ae18:	435f334d 	.word	0x435f334d
   2ae1c:	67202c53 	.word	0x67202c53
   2ae20:	5f4d415f 	.word	0x5f4d415f
   2ae24:	5f505342 	.word	0x5f505342
   2ae28:	4f495047 	.word	0x4f495047
   2ae2c:	4d4f495f 	.word	0x4d4f495f
   2ae30:	53435f33 	.word	0x53435f33
   2ae34:	00000029 	.word	0x00000029
   2ae38:	685f6d61 	.word	0x685f6d61
   2ae3c:	675f6c61 	.word	0x675f6c61
   2ae40:	5f6f6970 	.word	0x5f6f6970
   2ae44:	636e6970 	.word	0x636e6970
   2ae48:	69666e6f 	.word	0x69666e6f
   2ae4c:	4d412867 	.word	0x4d412867
   2ae50:	5053425f 	.word	0x5053425f
   2ae54:	4950475f 	.word	0x4950475f
   2ae58:	32535f4f 	.word	0x32535f4f
   2ae5c:	494e5f55 	.word	0x494e5f55
   2ae60:	202c5152 	.word	0x202c5152
   2ae64:	4d415f67 	.word	0x4d415f67
   2ae68:	5053425f 	.word	0x5053425f
   2ae6c:	4950475f 	.word	0x4950475f
   2ae70:	32535f4f 	.word	0x32535f4f
   2ae74:	494e5f55 	.word	0x494e5f55
   2ae78:	00295152 	.word	0x00295152
   2ae7c:	685f6d61 	.word	0x685f6d61
   2ae80:	675f6c61 	.word	0x675f6c61
   2ae84:	5f6f6970 	.word	0x5f6f6970
   2ae88:	636e6970 	.word	0x636e6970
   2ae8c:	69666e6f 	.word	0x69666e6f
   2ae90:	4d412867 	.word	0x4d412867
   2ae94:	5053425f 	.word	0x5053425f
   2ae98:	4950475f 	.word	0x4950475f
   2ae9c:	32535f4f 	.word	0x32535f4f
   2aea0:	524e5f55 	.word	0x524e5f55
   2aea4:	54455345 	.word	0x54455345
   2aea8:	5f67202c 	.word	0x5f67202c
   2aeac:	425f4d41 	.word	0x425f4d41
   2aeb0:	475f5053 	.word	0x475f5053
   2aeb4:	5f4f4950 	.word	0x5f4f4950
   2aeb8:	5f553253 	.word	0x5f553253
   2aebc:	5345524e 	.word	0x5345524e
   2aec0:	00295445 	.word	0x00295445
   2aec4:	685f6d61 	.word	0x685f6d61
   2aec8:	675f6c61 	.word	0x675f6c61
   2aecc:	5f6f6970 	.word	0x5f6f6970
   2aed0:	636e6970 	.word	0x636e6970
   2aed4:	69666e6f 	.word	0x69666e6f
   2aed8:	4d412867 	.word	0x4d412867
   2aedc:	5053425f 	.word	0x5053425f
   2aee0:	4950475f 	.word	0x4950475f
   2aee4:	32535f4f 	.word	0x32535f4f
   2aee8:	4e4f5f55 	.word	0x4e4f5f55
   2aeec:	5f67202c 	.word	0x5f67202c
   2aef0:	425f4d41 	.word	0x425f4d41
   2aef4:	475f5053 	.word	0x475f5053
   2aef8:	5f4f4950 	.word	0x5f4f4950
   2aefc:	5f553253 	.word	0x5f553253
   2af00:	00294e4f 	.word	0x00294e4f
   2af04:	685f6d61 	.word	0x685f6d61
   2af08:	695f6c61 	.word	0x695f6c61
   2af0c:	645f6d6f 	.word	0x645f6d6f
   2af10:	62617369 	.word	0x62617369
   2af14:	7028656c 	.word	0x7028656c
   2af18:	486d6f49 	.word	0x486d6f49
   2af1c:	6c646e61 	.word	0x6c646e61
   2af20:	00002965 	.word	0x00002965
   2af24:	685f6d61 	.word	0x685f6d61
   2af28:	695f6c61 	.word	0x695f6c61
   2af2c:	705f6d6f 	.word	0x705f6d6f
   2af30:	7265776f 	.word	0x7265776f
   2af34:	7274635f 	.word	0x7274635f
   2af38:	4970286c 	.word	0x4970286c
   2af3c:	61486d6f 	.word	0x61486d6f
   2af40:	656c646e 	.word	0x656c646e
   2af44:	4d41202c 	.word	0x4d41202c
   2af48:	4c41485f 	.word	0x4c41485f
   2af4c:	5359535f 	.word	0x5359535f
   2af50:	4c525443 	.word	0x4c525443
   2af54:	4545445f 	.word	0x4545445f
   2af58:	454c5350 	.word	0x454c5350
   2af5c:	202c5045 	.word	0x202c5045
   2af60:	736c6166 	.word	0x736c6166
   2af64:	00002965 	.word	0x00002965
   2af68:	685f6d61 	.word	0x685f6d61
   2af6c:	695f6c61 	.word	0x695f6c61
   2af70:	755f6d6f 	.word	0x755f6d6f
   2af74:	696e696e 	.word	0x696e696e
   2af78:	6c616974 	.word	0x6c616974
   2af7c:	28657a69 	.word	0x28657a69
   2af80:	6d6f4970 	.word	0x6d6f4970
   2af84:	646e6148 	.word	0x646e6148
   2af88:	0029656c 	.word	0x0029656c
   2af8c:	3158414d 	.word	0x3158414d
   2af90:	30333834 	.word	0x30333834
   2af94:	203a3a20 	.word	0x203a3a20
   2af98:	65764567 	.word	0x65764567
   2af9c:	6148746e 	.word	0x6148746e
   2afa0:	656c646e 	.word	0x656c646e
   2afa4:	6c61202c 	.word	0x6c61202c
   2afa8:	0a657669 	.word	0x0a657669
   2afac:	00000000 	.word	0x00000000
   2afb0:	3158414d 	.word	0x3158414d
   2afb4:	30333834 	.word	0x30333834
   2afb8:	203a3a20 	.word	0x203a3a20
   2afbc:	65764567 	.word	0x65764567
   2afc0:	6148746e 	.word	0x6148746e
   2afc4:	656c646e 	.word	0x656c646e
   2afc8:	7263202c 	.word	0x7263202c
   2afcc:	65746165 	.word	0x65746165
   2afd0:	00000a64 	.word	0x00000a64
   2afd4:	3158414d 	.word	0x3158414d
   2afd8:	30333834 	.word	0x30333834
   2afdc:	203a3a20 	.word	0x203a3a20
   2afe0:	69705378 	.word	0x69705378
   2afe4:	6574754d 	.word	0x6574754d
   2afe8:	61202c78 	.word	0x61202c78
   2afec:	6576696c 	.word	0x6576696c
   2aff0:	0000000a 	.word	0x0000000a
   2aff4:	3158414d 	.word	0x3158414d
   2aff8:	30333834 	.word	0x30333834
   2affc:	203a3a20 	.word	0x203a3a20
   2b000:	69705378 	.word	0x69705378
   2b004:	6574754d 	.word	0x6574754d
   2b008:	63202c78 	.word	0x63202c78
   2b00c:	74616572 	.word	0x74616572
   2b010:	000a6465 	.word	0x000a6465
   2b014:	3158414d 	.word	0x3158414d
   2b018:	30333834 	.word	0x30333834
   2b01c:	203a3a20 	.word	0x203a3a20
   2b020:	65776f50 	.word	0x65776f50
   2b024:	4e4f2072 	.word	0x4e4f2072
   2b028:	0000000a 	.word	0x0000000a
   2b02c:	3158414d 	.word	0x3158414d
   2b030:	30333834 	.word	0x30333834
   2b034:	203a3a20 	.word	0x203a3a20
   2b038:	65776f50 	.word	0x65776f50
   2b03c:	464f2072 	.word	0x464f2072
   2b040:	00000a46 	.word	0x00000a46
   2b044:	3158414d 	.word	0x3158414d
   2b048:	30333834 	.word	0x30333834
   2b04c:	203a3a20 	.word	0x203a3a20
   2b050:	5245564f 	.word	0x5245564f
   2b054:	776f6c46 	.word	0x776f6c46
   2b058:	70616820 	.word	0x70616820
   2b05c:	656e6570 	.word	0x656e6570
   2b060:	00000a64 	.word	0x00000a64
   2b064:	3158414d 	.word	0x3158414d
   2b068:	30333834 	.word	0x30333834
   2b06c:	203a3a20 	.word	0x203a3a20
   2b070:	45545942 	.word	0x45545942
   2b074:	52524520 	.word	0x52524520
   2b078:	202c524f 	.word	0x202c524f
   2b07c:	5f72736c 	.word	0x5f72736c
   2b080:	74617473 	.word	0x74617473
   2b084:	3d207375 	.word	0x3d207375
   2b088:	25783020 	.word	0x25783020
   2b08c:	0a583230 	.word	0x0a583230
   2b090:	00000000 	.word	0x00000000
   2b094:	20553253 	.word	0x20553253
   2b098:	74697257 	.word	0x74697257
   2b09c:	48432065 	.word	0x48432065
   2b0a0:	00007525 	.word	0x00007525
   2b0a4:	74736970 	.word	0x74736970
   2b0a8:	722e6e6f 	.word	0x722e6e6f
   2b0ac:	2e736f74 	.word	0x2e736f74
   2b0b0:	65746172 	.word	0x65746172
   2b0b4:	203d2120 	.word	0x203d2120
   2b0b8:	00000030 	.word	0x00000030
   2b0bc:	72732f2e 	.word	0x72732f2e
   2b0c0:	69702f63 	.word	0x69702f63
   2b0c4:	6e6f7473 	.word	0x6e6f7473
   2b0c8:	0000632e 	.word	0x0000632e
   2b0cc:	54534950 	.word	0x54534950
   2b0d0:	3a204e4f 	.word	0x3a204e4f
   2b0d4:	5245203a 	.word	0x5245203a
   2b0d8:	2c524f52 	.word	0x2c524f52
   2b0dc:	766f6d20 	.word	0x766f6d20
   2b0e0:	20676e69 	.word	0x20676e69
   2b0e4:	65726c61 	.word	0x65726c61
   2b0e8:	0a796461 	.word	0x0a796461
   2b0ec:	00000000 	.word	0x00000000
   2b0f0:	54534950 	.word	0x54534950
   2b0f4:	3a204e4f 	.word	0x3a204e4f
   2b0f8:	654c203a 	.word	0x654c203a
   2b0fc:	6874676e 	.word	0x6874676e
   2b100:	25203d20 	.word	0x25203d20
   2b104:	66352e30 	.word	0x66352e30
   2b108:	0000000a 	.word	0x0000000a
   2b10c:	54534950 	.word	0x54534950
   2b110:	3a204e4f 	.word	0x3a204e4f
   2b114:	654c203a 	.word	0x654c203a
   2b118:	6874676e 	.word	0x6874676e
   2b11c:	61657220 	.word	0x61657220
   2b120:	64656863 	.word	0x64656863
   2b124:	0000000a 	.word	0x0000000a
   2b128:	54534950 	.word	0x54534950
   2b12c:	3a204e4f 	.word	0x3a204e4f
   2b130:	6f42203a 	.word	0x6f42203a
   2b134:	20647261 	.word	0x20647261
   2b138:	65736572 	.word	0x65736572
   2b13c:	6e697474 	.word	0x6e697474
   2b140:	00000a67 	.word	0x00000a67
   2b144:	54534950 	.word	0x54534950
   2b148:	3a204e4f 	.word	0x3a204e4f
   2b14c:	6553203a 	.word	0x6553203a
   2b150:	6e697474 	.word	0x6e697474
   2b154:	656c2067 	.word	0x656c2067
   2b158:	6874676e 	.word	0x6874676e
   2b15c:	25203d20 	.word	0x25203d20
   2b160:	66352e30 	.word	0x66352e30
   2b164:	0000000a 	.word	0x0000000a
   2b168:	54534950 	.word	0x54534950
   2b16c:	3a204e4f 	.word	0x3a204e4f
   2b170:	654c203a 	.word	0x654c203a
   2b174:	6874676e 	.word	0x6874676e
   2b178:	206e6920 	.word	0x206e6920
   2b17c:	69766f6d 	.word	0x69766f6d
   2b180:	3d20676e 	.word	0x3d20676e
   2b184:	2e302520 	.word	0x2e302520
   2b188:	000a6635 	.word	0x000a6635
   2b18c:	54534950 	.word	0x54534950
   2b190:	3a204e4f 	.word	0x3a204e4f
   2b194:	654c203a 	.word	0x654c203a
   2b198:	6874676e 	.word	0x6874676e
   2b19c:	64707520 	.word	0x64707520
   2b1a0:	64657461 	.word	0x64657461
   2b1a4:	25203d20 	.word	0x25203d20
   2b1a8:	66352e30 	.word	0x66352e30
   2b1ac:	0000000a 	.word	0x0000000a
   2b1b0:	54534950 	.word	0x54534950
   2b1b4:	3a204e4f 	.word	0x3a204e4f
   2b1b8:	5245203a 	.word	0x5245203a
   2b1bc:	2c524f52 	.word	0x2c524f52
   2b1c0:	6e654c20 	.word	0x6e654c20
   2b1c4:	20687467 	.word	0x20687467
   2b1c8:	66666964 	.word	0x66666964
   2b1cc:	25203d20 	.word	0x25203d20
   2b1d0:	66352e30 	.word	0x66352e30
   2b1d4:	0000000a 	.word	0x0000000a
   2b1d8:	54534950 	.word	0x54534950
   2b1dc:	3a204e4f 	.word	0x3a204e4f
   2b1e0:	5553203a 	.word	0x5553203a
   2b1e4:	53454343 	.word	0x53454343
   2b1e8:	4c202c53 	.word	0x4c202c53
   2b1ec:	74676e65 	.word	0x74676e65
   2b1f0:	203d2068 	.word	0x203d2068
   2b1f4:	352e3025 	.word	0x352e3025
   2b1f8:	64202c66 	.word	0x64202c66
   2b1fc:	20666669 	.word	0x20666669
   2b200:	3025203d 	.word	0x3025203d
   2b204:	2c66352e 	.word	0x2c66352e
   2b208:	78616d20 	.word	0x78616d20
   2b20c:	6669645f 	.word	0x6669645f
   2b210:	203d2066 	.word	0x203d2066
   2b214:	352e3025 	.word	0x352e3025
   2b218:	00000a66 	.word	0x00000a66
   2b21c:	54534950 	.word	0x54534950
   2b220:	3a204e4f 	.word	0x3a204e4f
   2b224:	6f42203a 	.word	0x6f42203a
   2b228:	20647261 	.word	0x20647261
   2b22c:	65736552 	.word	0x65736552
   2b230:	6e697474 	.word	0x6e697474
   2b234:	00000a67 	.word	0x00000a67
   2b238:	54534950 	.word	0x54534950
   2b23c:	3a204e4f 	.word	0x3a204e4f
   2b240:	6f56203a 	.word	0x6f56203a
   2b244:	656d756c 	.word	0x656d756c
   2b248:	25203d20 	.word	0x25203d20
   2b24c:	6966332e 	.word	0x6966332e
   2b250:	0ab3c26e 	.word	0x0ab3c26e
   2b254:	00000000 	.word	0x00000000
   2b258:	54534950 	.word	0x54534950
   2b25c:	3a204e4f 	.word	0x3a204e4f
   2b260:	6f56203a 	.word	0x6f56203a
   2b264:	656d756c 	.word	0x656d756c
   2b268:	61657220 	.word	0x61657220
   2b26c:	64656863 	.word	0x64656863
   2b270:	0000000a 	.word	0x0000000a
   2b274:	54534950 	.word	0x54534950
   2b278:	3a204e4f 	.word	0x3a204e4f
   2b27c:	6f56203a 	.word	0x6f56203a
   2b280:	656d756c 	.word	0x656d756c
   2b284:	206e6920 	.word	0x206e6920
   2b288:	69766f6d 	.word	0x69766f6d
   2b28c:	3d20676e 	.word	0x3d20676e
   2b290:	332e2520 	.word	0x332e2520
   2b294:	c26e6966 	.word	0xc26e6966
   2b298:	00000ab3 	.word	0x00000ab3
   2b29c:	54534950 	.word	0x54534950
   2b2a0:	3a204e4f 	.word	0x3a204e4f
   2b2a4:	6f56203a 	.word	0x6f56203a
   2b2a8:	656d756c 	.word	0x656d756c
   2b2ac:	64707520 	.word	0x64707520
   2b2b0:	64657461 	.word	0x64657461
   2b2b4:	25203d20 	.word	0x25203d20
   2b2b8:	6966332e 	.word	0x6966332e
   2b2bc:	0ab3c26e 	.word	0x0ab3c26e
   2b2c0:	00000000 	.word	0x00000000
   2b2c4:	54534950 	.word	0x54534950
   2b2c8:	3a204e4f 	.word	0x3a204e4f
   2b2cc:	5245203a 	.word	0x5245203a
   2b2d0:	2c524f52 	.word	0x2c524f52
   2b2d4:	6c6f5620 	.word	0x6c6f5620
   2b2d8:	20656d75 	.word	0x20656d75
   2b2dc:	66666964 	.word	0x66666964
   2b2e0:	25203d20 	.word	0x25203d20
   2b2e4:	66332e30 	.word	0x66332e30
   2b2e8:	0000000a 	.word	0x0000000a
   2b2ec:	54534950 	.word	0x54534950
   2b2f0:	3a204e4f 	.word	0x3a204e4f
   2b2f4:	5553203a 	.word	0x5553203a
   2b2f8:	53454343 	.word	0x53454343
   2b2fc:	56202e53 	.word	0x56202e53
   2b300:	6d756c6f 	.word	0x6d756c6f
   2b304:	203d2065 	.word	0x203d2065
   2b308:	332e3025 	.word	0x332e3025
   2b30c:	64202c66 	.word	0x64202c66
   2b310:	20666669 	.word	0x20666669
   2b314:	3025203d 	.word	0x3025203d
   2b318:	2c66332e 	.word	0x2c66332e
   2b31c:	78616d20 	.word	0x78616d20
   2b320:	6669645f 	.word	0x6669645f
   2b324:	203d2066 	.word	0x203d2066
   2b328:	332e3025 	.word	0x332e3025
   2b32c:	00000a66 	.word	0x00000a66
   2b330:	7369500a 	.word	0x7369500a
   2b334:	206e6f74 	.word	0x206e6f74
   2b338:	72616f42 	.word	0x72616f42
   2b33c:	6e492064 	.word	0x6e492064
   2b340:	6d726f66 	.word	0x6d726f66
   2b344:	6f697461 	.word	0x6f697461
   2b348:	00000a6e 	.word	0x00000a6e
   2b34c:	2a2a2a2a 	.word	0x2a2a2a2a
   2b350:	2a2a2a2a 	.word	0x2a2a2a2a
   2b354:	2a2a2a2a 	.word	0x2a2a2a2a
   2b358:	2a2a2a2a 	.word	0x2a2a2a2a
   2b35c:	2a2a2a2a 	.word	0x2a2a2a2a
   2b360:	2a2a2a2a 	.word	0x2a2a2a2a
   2b364:	2a2a2a2a 	.word	0x2a2a2a2a
   2b368:	2a2a2a2a 	.word	0x2a2a2a2a
   2b36c:	2a2a2a2a 	.word	0x2a2a2a2a
   2b370:	000a2a2a 	.word	0x000a2a2a
   2b374:	74737953 	.word	0x74737953
   2b378:	49206d65 	.word	0x49206d65
   2b37c:	746e6564 	.word	0x746e6564
   2b380:	63696669 	.word	0x63696669
   2b384:	6f697461 	.word	0x6f697461
   2b388:	203a096e 	.word	0x203a096e
   2b38c:	00000000 	.word	0x00000000
   2b390:	6d726946 	.word	0x6d726946
   2b394:	65726177 	.word	0x65726177
   2b398:	69756220 	.word	0x69756220
   2b39c:	7920646c 	.word	0x7920646c
   2b3a0:	09726165 	.word	0x09726165
   2b3a4:	7525203a 	.word	0x7525203a
   2b3a8:	0000000a 	.word	0x0000000a
   2b3ac:	6d726946 	.word	0x6d726946
   2b3b0:	65726177 	.word	0x65726177
   2b3b4:	72657620 	.word	0x72657620
   2b3b8:	6e6f6973 	.word	0x6e6f6973
   2b3bc:	09202020 	.word	0x09202020
   2b3c0:	2576203a 	.word	0x2576203a
   2b3c4:	75252e75 	.word	0x75252e75
   2b3c8:	0a75252e 	.word	0x0a75252e
   2b3cc:	00000000 	.word	0x00000000
   2b3d0:	74736950 	.word	0x74736950
   2b3d4:	545f6e6f 	.word	0x545f6e6f
   2b3d8:	5f6b7361 	.word	0x5f6b7361
   2b3dc:	65766f6d 	.word	0x65766f6d
   2b3e0:	6e656c5f 	.word	0x6e656c5f
   2b3e4:	00687467 	.word	0x00687467
   2b3e8:	74736950 	.word	0x74736950
   2b3ec:	545f6e6f 	.word	0x545f6e6f
   2b3f0:	5f6b7361 	.word	0x5f6b7361
   2b3f4:	65766f6d 	.word	0x65766f6d
   2b3f8:	6c6f765f 	.word	0x6c6f765f
   2b3fc:	00656d75 	.word	0x00656d75
   2b400:	74736950 	.word	0x74736950
   2b404:	545f6e6f 	.word	0x545f6e6f
   2b408:	5f6b7361 	.word	0x5f6b7361
   2b40c:	65766f6d 	.word	0x65766f6d
   2b410:	6c75665f 	.word	0x6c75665f
   2b414:	0000006c 	.word	0x0000006c
   2b418:	74736950 	.word	0x74736950
   2b41c:	545f6e6f 	.word	0x545f6e6f
   2b420:	5f6b7361 	.word	0x5f6b7361
   2b424:	65766f6d 	.word	0x65766f6d
   2b428:	72657a5f 	.word	0x72657a5f
   2b42c:	0000006f 	.word	0x0000006f
   2b430:	54534950 	.word	0x54534950
   2b434:	3a204e4f 	.word	0x3a204e4f
   2b438:	6154203a 	.word	0x6154203a
   2b43c:	69206b73 	.word	0x69206b73
   2b440:	6e692073 	.word	0x6e692073
   2b444:	75526520 	.word	0x75526520
   2b448:	6e696e6e 	.word	0x6e696e6e
   2b44c:	74732067 	.word	0x74732067
   2b450:	2c657461 	.word	0x2c657461
   2b454:	69617720 	.word	0x69617720
   2b458:	00000a74 	.word	0x00000a74
   2b45c:	54534950 	.word	0x54534950
   2b460:	3a204e4f 	.word	0x3a204e4f
   2b464:	6154203a 	.word	0x6154203a
   2b468:	69206b73 	.word	0x69206b73
   2b46c:	75532073 	.word	0x75532073
   2b470:	6e657073 	.word	0x6e657073
   2b474:	0a646564 	.word	0x0a646564
   2b478:	00000000 	.word	0x00000000
   2b47c:	54534950 	.word	0x54534950
   2b480:	3a204e4f 	.word	0x3a204e4f
   2b484:	6154203a 	.word	0x6154203a
   2b488:	69206b73 	.word	0x69206b73
   2b48c:	65442073 	.word	0x65442073
   2b490:	6574656c 	.word	0x6574656c
   2b494:	00000a64 	.word	0x00000a64
   2b498:	54534950 	.word	0x54534950
   2b49c:	3a204e4f 	.word	0x3a204e4f
   2b4a0:	6553203a 	.word	0x6553203a
   2b4a4:	6e697474 	.word	0x6e697474
   2b4a8:	61722067 	.word	0x61722067
   2b4ac:	3d206574 	.word	0x3d206574
   2b4b0:	48752520 	.word	0x48752520
   2b4b4:	00000a7a 	.word	0x00000a7a
   2b4b8:	54534950 	.word	0x54534950
   2b4bc:	3a204e4f 	.word	0x3a204e4f
   2b4c0:	6f56203a 	.word	0x6f56203a
   2b4c4:	656d756c 	.word	0x656d756c
   2b4c8:	6573202c 	.word	0x6573202c
   2b4cc:	6f702d74 	.word	0x6f702d74
   2b4d0:	20746e69 	.word	0x20746e69
   2b4d4:	3025203d 	.word	0x3025203d
   2b4d8:	0a66342e 	.word	0x0a66342e
   2b4dc:	00000000 	.word	0x00000000
   2b4e0:	54534950 	.word	0x54534950
   2b4e4:	3a204e4f 	.word	0x3a204e4f
   2b4e8:	654c203a 	.word	0x654c203a
   2b4ec:	6874676e 	.word	0x6874676e
   2b4f0:	6573202c 	.word	0x6573202c
   2b4f4:	6f702d74 	.word	0x6f702d74
   2b4f8:	20746e69 	.word	0x20746e69
   2b4fc:	3025203d 	.word	0x3025203d
   2b500:	0a66342e 	.word	0x0a66342e
   2b504:	00000000 	.word	0x00000000
   2b508:	2050434c 	.word	0x2050434c
   2b50c:	74736950 	.word	0x74736950
   2b510:	6d206e6f 	.word	0x6d206e6f
   2b514:	6d696e69 	.word	0x6d696e69
   2b518:	76206d75 	.word	0x76206d75
   2b51c:	6d756c6f 	.word	0x6d756c6f
   2b520:	203d2065 	.word	0x203d2065
   2b524:	342e3025 	.word	0x342e3025
   2b528:	676b2066 	.word	0x676b2066
   2b52c:	b3c26d2f 	.word	0xb3c26d2f
   2b530:	0000000a 	.word	0x0000000a
   2b534:	2050434c 	.word	0x2050434c
   2b538:	74736950 	.word	0x74736950
   2b53c:	76206e6f 	.word	0x76206e6f
   2b540:	6d756c6f 	.word	0x6d756c6f
   2b544:	68632065 	.word	0x68632065
   2b548:	65676e61 	.word	0x65676e61
   2b54c:	25203d20 	.word	0x25203d20
   2b550:	66342e30 	.word	0x66342e30
   2b554:	2f676b20 	.word	0x2f676b20
   2b558:	0ab3c26d 	.word	0x0ab3c26d
   2b55c:	00000000 	.word	0x00000000
   2b560:	2050434c 	.word	0x2050434c
   2b564:	74736950 	.word	0x74736950
   2b568:	70206e6f 	.word	0x70206e6f
   2b56c:	7469736f 	.word	0x7469736f
   2b570:	206e6f69 	.word	0x206e6f69
   2b574:	6e616863 	.word	0x6e616863
   2b578:	3d206567 	.word	0x3d206567
   2b57c:	2e302520 	.word	0x2e302520
   2b580:	69206634 	.word	0x69206634
   2b584:	00000a6e 	.word	0x00000a6e
   2b588:	2050434c 	.word	0x2050434c
   2b58c:	756c6f56 	.word	0x756c6f56
   2b590:	3d20656d 	.word	0x3d20656d
   2b594:	2e302520 	.word	0x2e302520
   2b598:	202c6634 	.word	0x202c6634
   2b59c:	73756f48 	.word	0x73756f48
   2b5a0:	20676e69 	.word	0x20676e69
   2b5a4:	756c6f76 	.word	0x756c6f76
   2b5a8:	3d20656d 	.word	0x3d20656d
   2b5ac:	342e2520 	.word	0x342e2520
   2b5b0:	00000a66 	.word	0x00000a66
   2b5b4:	2050434c 	.word	0x2050434c
   2b5b8:	756c6f56 	.word	0x756c6f56
   2b5bc:	7420656d 	.word	0x7420656d
   2b5c0:	654c206f 	.word	0x654c206f
   2b5c4:	6874676e 	.word	0x6874676e
   2b5c8:	25203d20 	.word	0x25203d20
   2b5cc:	66342e30 	.word	0x66342e30
   2b5d0:	0000000a 	.word	0x0000000a
   2b5d4:	74746553 	.word	0x74746553
   2b5d8:	20676e69 	.word	0x20676e69
   2b5dc:	65746172 	.word	0x65746172
   2b5e0:	25203d20 	.word	0x25203d20
   2b5e4:	66332e30 	.word	0x66332e30
   2b5e8:	6166202c 	.word	0x6166202c
   2b5ec:	6e696c6c 	.word	0x6e696c6c
   2b5f0:	203d2067 	.word	0x203d2067
   2b5f4:	000a6925 	.word	0x000a6925
   2b5f8:	6c6c6166 	.word	0x6c6c6166
   2b5fc:	2c676e69 	.word	0x2c676e69
   2b600:	6f756220 	.word	0x6f756220
   2b604:	636e6179 	.word	0x636e6179
   2b608:	203d2079 	.word	0x203d2079
   2b60c:	332e3025 	.word	0x332e3025
   2b610:	76202c66 	.word	0x76202c66
   2b614:	6d756c6f 	.word	0x6d756c6f
   2b618:	30253d65 	.word	0x30253d65
   2b61c:	0a66332e 	.word	0x0a66332e
   2b620:	00000000 	.word	0x00000000
   2b624:	69736972 	.word	0x69736972
   2b628:	202c676e 	.word	0x202c676e
   2b62c:	796f7562 	.word	0x796f7562
   2b630:	79636e61 	.word	0x79636e61
   2b634:	25203d20 	.word	0x25203d20
   2b638:	66332e30 	.word	0x66332e30
   2b63c:	6f76202c 	.word	0x6f76202c
   2b640:	656d756c 	.word	0x656d756c
   2b644:	2e30253d 	.word	0x2e30253d
   2b648:	000a6633 	.word	0x000a6633
   2b64c:	41544144 	.word	0x41544144
   2b650:	203a3a20 	.word	0x203a3a20
   2b654:	2c544553 	.word	0x2c544553
   2b658:	69614d20 	.word	0x69614d20
   2b65c:	6d756d78 	.word	0x6d756d78
   2b660:	61654d20 	.word	0x61654d20
   2b664:	65727573 	.word	0x65727573
   2b668:	746e656d 	.word	0x746e656d
   2b66c:	25282073 	.word	0x25282073
   2b670:	000a2975 	.word	0x000a2975
   2b674:	41544144 	.word	0x41544144
   2b678:	203a3a20 	.word	0x203a3a20
   2b67c:	20535047 	.word	0x20535047
   2b680:	65786966 	.word	0x65786966
   2b684:	50202c64 	.word	0x50202c64
   2b688:	69666f72 	.word	0x69666f72
   2b68c:	724e656c 	.word	0x724e656c
   2b690:	2c75253d 	.word	0x2c75253d
   2b694:	74614c20 	.word	0x74614c20
   2b698:	64757469 	.word	0x64757469
   2b69c:	2e253d65 	.word	0x2e253d65
   2b6a0:	202c6637 	.word	0x202c6637
   2b6a4:	676e6f4c 	.word	0x676e6f4c
   2b6a8:	64757469 	.word	0x64757469
   2b6ac:	2e253d65 	.word	0x2e253d65
   2b6b0:	000a6637 	.word	0x000a6637
   2b6b4:	41544144 	.word	0x41544144
   2b6b8:	203a3a20 	.word	0x203a3a20
   2b6bc:	4f525245 	.word	0x4f525245
   2b6c0:	50202c52 	.word	0x50202c52
   2b6c4:	69666f72 	.word	0x69666f72
   2b6c8:	6920656c 	.word	0x6920656c
   2b6cc:	6f6e2073 	.word	0x6f6e2073
   2b6d0:	657a2074 	.word	0x657a2074
   2b6d4:	000a6f72 	.word	0x000a6f72
   2b6d8:	41544144 	.word	0x41544144
   2b6dc:	203a3a20 	.word	0x203a3a20
   2b6e0:	4f525245 	.word	0x4f525245
   2b6e4:	4d202c52 	.word	0x4d202c52
   2b6e8:	6d697861 	.word	0x6d697861
   2b6ec:	6c206d75 	.word	0x6c206d75
   2b6f0:	74676e65 	.word	0x74676e65
   2b6f4:	766f2068 	.word	0x766f2068
   2b6f8:	6c667265 	.word	0x6c667265
   2b6fc:	0a73776f 	.word	0x0a73776f
   2b700:	00000000 	.word	0x00000000
   2b704:	5441440a 	.word	0x5441440a
   2b708:	3a3a2041 	.word	0x3a3a2041
   2b70c:	41455220 	.word	0x41455220
   2b710:	50202c44 	.word	0x50202c44
   2b714:	69666f72 	.word	0x69666f72
   2b718:	2528656c 	.word	0x2528656c
   2b71c:	6c202975 	.word	0x6c202975
   2b720:	74676e65 	.word	0x74676e65
   2b724:	25282068 	.word	0x25282068
   2b728:	72202975 	.word	0x72202975
   2b72c:	68636165 	.word	0x68636165
   2b730:	000a6465 	.word	0x000a6465
   2b734:	41544144 	.word	0x41544144
   2b738:	203a3a20 	.word	0x203a3a20
   2b73c:	44414552 	.word	0x44414552
   2b740:	45203a20 	.word	0x45203a20
   2b744:	524f5252 	.word	0x524f5252
   2b748:	6572202c 	.word	0x6572202c
   2b74c:	25286461 	.word	0x25286461
   2b750:	6f202975 	.word	0x6f202975
   2b754:	66726576 	.word	0x66726576
   2b758:	73776f6c 	.word	0x73776f6c
   2b75c:	0000000a 	.word	0x0000000a
   2b760:	41440a0a 	.word	0x41440a0a
   2b764:	3a204154 	.word	0x3a204154
   2b768:	4552203a 	.word	0x4552203a
   2b76c:	202c4441 	.word	0x202c4441
   2b770:	666f7250 	.word	0x666f7250
   2b774:	28656c69 	.word	0x28656c69
   2b778:	20297525 	.word	0x20297525
   2b77c:	676e656c 	.word	0x676e656c
   2b780:	28206874 	.word	0x28206874
   2b784:	20297525 	.word	0x20297525
   2b788:	63616572 	.word	0x63616572
   2b78c:	0a646568 	.word	0x0a646568
   2b790:	00000000 	.word	0x00000000
   2b794:	41544144 	.word	0x41544144
   2b798:	203a3a20 	.word	0x203a3a20
   2b79c:	29752528 	.word	0x29752528
   2b7a0:	61656d20 	.word	0x61656d20
   2b7a4:	65727573 	.word	0x65727573
   2b7a8:	746e656d 	.word	0x746e656d
   2b7ac:	65722073 	.word	0x65722073
   2b7b0:	72697571 	.word	0x72697571
   2b7b4:	25282065 	.word	0x25282065
   2b7b8:	62202975 	.word	0x62202975
   2b7bc:	73657479 	.word	0x73657479
   2b7c0:	0000000a 	.word	0x0000000a
   2b7c4:	41544144 	.word	0x41544144
   2b7c8:	203a3a20 	.word	0x203a3a20
   2b7cc:	55544552 	.word	0x55544552
   2b7d0:	49204e52 	.word	0x49204e52
   2b7d4:	3a646972 	.word	0x3a646972
   2b7d8:	746f7420 	.word	0x746f7420
   2b7dc:	62206c61 	.word	0x62206c61
   2b7e0:	73657479 	.word	0x73657479
   2b7e4:	28203d20 	.word	0x28203d20
   2b7e8:	0a297525 	.word	0x0a297525
   2b7ec:	00000000 	.word	0x00000000
   2b7f0:	41544144 	.word	0x41544144
   2b7f4:	203a3a20 	.word	0x203a3a20
   2b7f8:	4f525245 	.word	0x4f525245
   2b7fc:	203a2052 	.word	0x203a2052
   2b800:	65747962 	.word	0x65747962
   2b804:	656c5f73 	.word	0x656c5f73
   2b808:	6874676e 	.word	0x6874676e
   2b80c:	29752528 	.word	0x29752528
   2b810:	63786520 	.word	0x63786520
   2b814:	73646565 	.word	0x73646565
   2b818:	49524920 	.word	0x49524920
   2b81c:	41445f44 	.word	0x41445f44
   2b820:	4f5f4154 	.word	0x4f5f4154
   2b824:	28205455 	.word	0x28205455
   2b828:	20297525 	.word	0x20297525
   2b82c:	65747962 	.word	0x65747962
   2b830:	00000a73 	.word	0x00000a73
   2b834:	534e4553 	.word	0x534e4553
   2b838:	2053524f 	.word	0x2053524f
   2b83c:	47203a3a 	.word	0x47203a3a
   2b840:	202c5350 	.word	0x202c5350
   2b844:	656d6954 	.word	0x656d6954
   2b848:	61682072 	.word	0x61682072
   2b84c:	78652073 	.word	0x78652073
   2b850:	65726970 	.word	0x65726970
   2b854:	00000a64 	.word	0x00000a64
   2b858:	736e6573 	.word	0x736e6573
   2b85c:	645f726f 	.word	0x645f726f
   2b860:	2e617461 	.word	0x2e617461
   2b864:	74706564 	.word	0x74706564
   2b868:	61722e68 	.word	0x61722e68
   2b86c:	21206574 	.word	0x21206574
   2b870:	0030203d 	.word	0x0030203d
   2b874:	72732f2e 	.word	0x72732f2e
   2b878:	70612f63 	.word	0x70612f63
   2b87c:	65732f70 	.word	0x65732f70
   2b880:	726f736e 	.word	0x726f736e
   2b884:	00632e73 	.word	0x00632e73
   2b888:	534e4553 	.word	0x534e4553
   2b88c:	2053524f 	.word	0x2053524f
   2b890:	44203a3a 	.word	0x44203a3a
   2b894:	68747065 	.word	0x68747065
   2b898:	6553202c 	.word	0x6553202c
   2b89c:	6e697474 	.word	0x6e697474
   2b8a0:	65702067 	.word	0x65702067
   2b8a4:	646f6972 	.word	0x646f6972
   2b8a8:	25203d20 	.word	0x25203d20
   2b8ac:	0a736d75 	.word	0x0a736d75
   2b8b0:	00000000 	.word	0x00000000
   2b8b4:	534e4553 	.word	0x534e4553
   2b8b8:	2053524f 	.word	0x2053524f
   2b8bc:	44203a3a 	.word	0x44203a3a
   2b8c0:	68747065 	.word	0x68747065
   2b8c4:	6573202c 	.word	0x6573202c
   2b8c8:	6870616d 	.word	0x6870616d
   2b8cc:	2065726f 	.word	0x2065726f
   2b8d0:	20746f6e 	.word	0x20746f6e
   2b8d4:	69617661 	.word	0x69617661
   2b8d8:	6c62616c 	.word	0x6c62616c
   2b8dc:	00000a65 	.word	0x00000a65
   2b8e0:	736e6573 	.word	0x736e6573
   2b8e4:	645f726f 	.word	0x645f726f
   2b8e8:	2e617461 	.word	0x2e617461
   2b8ec:	706d6574 	.word	0x706d6574
   2b8f0:	74617265 	.word	0x74617265
   2b8f4:	2e657275 	.word	0x2e657275
   2b8f8:	65746172 	.word	0x65746172
   2b8fc:	203d2120 	.word	0x203d2120
   2b900:	00000030 	.word	0x00000030
   2b904:	534e4553 	.word	0x534e4553
   2b908:	2053524f 	.word	0x2053524f
   2b90c:	54203a3a 	.word	0x54203a3a
   2b910:	65706d65 	.word	0x65706d65
   2b914:	75746172 	.word	0x75746172
   2b918:	202c6572 	.word	0x202c6572
   2b91c:	74746553 	.word	0x74746553
   2b920:	20676e69 	.word	0x20676e69
   2b924:	69726570 	.word	0x69726570
   2b928:	3d20646f 	.word	0x3d20646f
   2b92c:	6d752520 	.word	0x6d752520
   2b930:	00000a73 	.word	0x00000a73
   2b934:	534e4553 	.word	0x534e4553
   2b938:	2053524f 	.word	0x2053524f
   2b93c:	54203a3a 	.word	0x54203a3a
   2b940:	65706d65 	.word	0x65706d65
   2b944:	75746172 	.word	0x75746172
   2b948:	202c6572 	.word	0x202c6572
   2b94c:	616d6573 	.word	0x616d6573
   2b950:	726f6870 	.word	0x726f6870
   2b954:	6f6e2065 	.word	0x6f6e2065
   2b958:	76612074 	.word	0x76612074
   2b95c:	616c6961 	.word	0x616c6961
   2b960:	0a656c62 	.word	0x0a656c62
   2b964:	00000000 	.word	0x00000000
   2b968:	736e6573 	.word	0x736e6573
   2b96c:	645f726f 	.word	0x645f726f
   2b970:	2e617461 	.word	0x2e617461
   2b974:	2e737067 	.word	0x2e737067
   2b978:	65746172 	.word	0x65746172
   2b97c:	203d2120 	.word	0x203d2120
   2b980:	00000030 	.word	0x00000030
   2b984:	534e4553 	.word	0x534e4553
   2b988:	2053524f 	.word	0x2053524f
   2b98c:	47203a3a 	.word	0x47203a3a
   2b990:	202c5350 	.word	0x202c5350
   2b994:	74746553 	.word	0x74746553
   2b998:	20676e69 	.word	0x20676e69
   2b99c:	69726570 	.word	0x69726570
   2b9a0:	3d20646f 	.word	0x3d20646f
   2b9a4:	6d752520 	.word	0x6d752520
   2b9a8:	00000a73 	.word	0x00000a73
   2b9ac:	5f535047 	.word	0x5f535047
   2b9b0:	656d6954 	.word	0x656d6954
   2b9b4:	00000072 	.word	0x00000072
   2b9b8:	534e4553 	.word	0x534e4553
   2b9bc:	2053524f 	.word	0x2053524f
   2b9c0:	47203a3a 	.word	0x47203a3a
   2b9c4:	202c5350 	.word	0x202c5350
   2b9c8:	656d6954 	.word	0x656d6954
   2b9cc:	61682072 	.word	0x61682072
   2b9d0:	74732073 	.word	0x74732073
   2b9d4:	65747261 	.word	0x65747261
   2b9d8:	6f662064 	.word	0x6f662064
   2b9dc:	66252072 	.word	0x66252072
   2b9e0:	6e694d20 	.word	0x6e694d20
   2b9e4:	73657475 	.word	0x73657475
   2b9e8:	0000000a 	.word	0x0000000a
   2b9ec:	534e4553 	.word	0x534e4553
   2b9f0:	2053524f 	.word	0x2053524f
   2b9f4:	47203a3a 	.word	0x47203a3a
   2b9f8:	202c5350 	.word	0x202c5350
   2b9fc:	656d6954 	.word	0x656d6954
   2ba00:	69642072 	.word	0x69642072
   2ba04:	6f6e2064 	.word	0x6f6e2064
   2ba08:	74732074 	.word	0x74732074
   2ba0c:	0a747261 	.word	0x0a747261
   2ba10:	00000000 	.word	0x00000000
   2ba14:	534e4553 	.word	0x534e4553
   2ba18:	2053524f 	.word	0x2053524f
   2ba1c:	45203a3a 	.word	0x45203a3a
   2ba20:	524f5252 	.word	0x524f5252
   2ba24:	5478202c 	.word	0x5478202c
   2ba28:	6d655344 	.word	0x6d655344
   2ba2c:	6f687061 	.word	0x6f687061
   2ba30:	69206572 	.word	0x69206572
   2ba34:	554e2073 	.word	0x554e2073
   2ba38:	000a4c4c 	.word	0x000a4c4c
   2ba3c:	534e4553 	.word	0x534e4553
   2ba40:	2053524f 	.word	0x2053524f
   2ba44:	45203a3a 	.word	0x45203a3a
   2ba48:	524f5252 	.word	0x524f5252
   2ba4c:	6573202c 	.word	0x6573202c
   2ba50:	726f736e 	.word	0x726f736e
   2ba54:	7461645f 	.word	0x7461645f
   2ba58:	70672e61 	.word	0x70672e61
   2ba5c:	65732e73 	.word	0x65732e73
   2ba60:	6870616d 	.word	0x6870616d
   2ba64:	2065726f 	.word	0x2065726f
   2ba68:	4e207369 	.word	0x4e207369
   2ba6c:	0a4c4c55 	.word	0x0a4c4c55
   2ba70:	00000000 	.word	0x00000000
   2ba74:	534e4553 	.word	0x534e4553
   2ba78:	2053524f 	.word	0x2053524f
   2ba7c:	45203a3a 	.word	0x45203a3a
   2ba80:	524f5252 	.word	0x524f5252
   2ba84:	6554202c 	.word	0x6554202c
   2ba88:	442d706d 	.word	0x442d706d
   2ba8c:	68747065 	.word	0x68747065
   2ba90:	65764520 	.word	0x65764520
   2ba94:	2073746e 	.word	0x2073746e
   2ba98:	4e207369 	.word	0x4e207369
   2ba9c:	0a4c4c55 	.word	0x0a4c4c55
   2baa0:	00000000 	.word	0x00000000
   2baa4:	534e4553 	.word	0x534e4553
   2baa8:	2053524f 	.word	0x2053524f
   2baac:	53203a3a 	.word	0x53203a3a
   2bab0:	6f736e65 	.word	0x6f736e65
   2bab4:	61207372 	.word	0x61207372
   2bab8:	69206572 	.word	0x69206572
   2babc:	6974696e 	.word	0x6974696e
   2bac0:	7a696c61 	.word	0x7a696c61
   2bac4:	0a0a6465 	.word	0x0a0a6465
   2bac8:	00000000 	.word	0x00000000
   2bacc:	534e4553 	.word	0x534e4553
   2bad0:	2053524f 	.word	0x2053524f
   2bad4:	53203a3a 	.word	0x53203a3a
   2bad8:	6f736e65 	.word	0x6f736e65
   2badc:	61207372 	.word	0x61207372
   2bae0:	75206572 	.word	0x75206572
   2bae4:	696e696e 	.word	0x696e696e
   2bae8:	6c616974 	.word	0x6c616974
   2baec:	64657a69 	.word	0x64657a69
   2baf0:	00000a0a 	.word	0x00000a0a
   2baf4:	534e4553 	.word	0x534e4553
   2baf8:	2053524f 	.word	0x2053524f
   2bafc:	25203a3a 	.word	0x25203a3a
   2bb00:	6e692073 	.word	0x6e692073
   2bb04:	6c426520 	.word	0x6c426520
   2bb08:	656b636f 	.word	0x656b636f
   2bb0c:	74732064 	.word	0x74732064
   2bb10:	0a657461 	.word	0x0a657461
   2bb14:	00000000 	.word	0x00000000
   2bb18:	74706544 	.word	0x74706544
   2bb1c:	61545f68 	.word	0x61545f68
   2bb20:	00006b73 	.word	0x00006b73
   2bb24:	534e4553 	.word	0x534e4553
   2bb28:	2053524f 	.word	0x2053524f
   2bb2c:	45203a3a 	.word	0x45203a3a
   2bb30:	7974706d 	.word	0x7974706d
   2bb34:	6e657645 	.word	0x6e657645
   2bb38:	65755174 	.word	0x65755174
   2bb3c:	3a206575 	.word	0x3a206575
   2bb40:	706d6520 	.word	0x706d6520
   2bb44:	6e697974 	.word	0x6e697974
   2bb48:	00000a67 	.word	0x00000a67
   2bb4c:	534e4553 	.word	0x534e4553
   2bb50:	2053524f 	.word	0x2053524f
   2bb54:	45203a3a 	.word	0x45203a3a
   2bb58:	7974706d 	.word	0x7974706d
   2bb5c:	6e657645 	.word	0x6e657645
   2bb60:	65755174 	.word	0x65755174
   2bb64:	3a206575 	.word	0x3a206575
   2bb68:	706d6520 	.word	0x706d6520
   2bb6c:	64656974 	.word	0x64656974
   2bb70:	0000000a 	.word	0x0000000a
   2bb74:	706d6554 	.word	0x706d6554
   2bb78:	74617265 	.word	0x74617265
   2bb7c:	5f657275 	.word	0x5f657275
   2bb80:	6b736154 	.word	0x6b736154
   2bb84:	00000000 	.word	0x00000000
   2bb88:	534e4553 	.word	0x534e4553
   2bb8c:	2053524f 	.word	0x2053524f
   2bb90:	25203a3a 	.word	0x25203a3a
   2bb94:	73692073 	.word	0x73692073
   2bb98:	6b6e7520 	.word	0x6b6e7520
   2bb9c:	776e6f6e 	.word	0x776e6f6e
   2bba0:	00000a6e 	.word	0x00000a6e
   2bba4:	534e4553 	.word	0x534e4553
   2bba8:	2053524f 	.word	0x2053524f
   2bbac:	25203a3a 	.word	0x25203a3a
   2bbb0:	6e692073 	.word	0x6e692073
   2bbb4:	65526520 	.word	0x65526520
   2bbb8:	20796461 	.word	0x20796461
   2bbbc:	74617473 	.word	0x74617473
   2bbc0:	00000a65 	.word	0x00000a65
   2bbc4:	534e4553 	.word	0x534e4553
   2bbc8:	2053524f 	.word	0x2053524f
   2bbcc:	25203a3a 	.word	0x25203a3a
   2bbd0:	6e692073 	.word	0x6e692073
   2bbd4:	75526520 	.word	0x75526520
   2bbd8:	6e696e6e 	.word	0x6e696e6e
   2bbdc:	74732067 	.word	0x74732067
   2bbe0:	2c657461 	.word	0x2c657461
   2bbe4:	69617720 	.word	0x69617720
   2bbe8:	00000a74 	.word	0x00000a74
   2bbec:	534e4553 	.word	0x534e4553
   2bbf0:	2053524f 	.word	0x2053524f
   2bbf4:	25203a3a 	.word	0x25203a3a
   2bbf8:	443e2d73 	.word	0x443e2d73
   2bbfc:	74656c65 	.word	0x74656c65
   2bc00:	000a6465 	.word	0x000a6465
   2bc04:	534e4553 	.word	0x534e4553
   2bc08:	2053524f 	.word	0x2053524f
   2bc0c:	25203a3a 	.word	0x25203a3a
   2bc10:	78202c73 	.word	0x78202c73
   2bc14:	65734454 	.word	0x65734454
   2bc18:	6870616d 	.word	0x6870616d
   2bc1c:	2d65726f 	.word	0x2d65726f
   2bc20:	6176613e 	.word	0x6176613e
   2bc24:	62616c69 	.word	0x62616c69
   2bc28:	000a656c 	.word	0x000a656c
   2bc2c:	534e4553 	.word	0x534e4553
   2bc30:	2053524f 	.word	0x2053524f
   2bc34:	25203a3a 	.word	0x25203a3a
   2bc38:	78202c73 	.word	0x78202c73
   2bc3c:	65734454 	.word	0x65734454
   2bc40:	6870616d 	.word	0x6870616d
   2bc44:	2d65726f 	.word	0x2d65726f
   2bc48:	746f6e3e 	.word	0x746f6e3e
   2bc4c:	61766120 	.word	0x61766120
   2bc50:	62616c69 	.word	0x62616c69
   2bc54:	000a656c 	.word	0x000a656c
   2bc58:	534e4553 	.word	0x534e4553
   2bc5c:	2053524f 	.word	0x2053524f
   2bc60:	25203a3a 	.word	0x25203a3a
   2bc64:	73692073 	.word	0x73692073
   2bc68:	206e6920 	.word	0x206e6920
   2bc6c:	6e6b6e75 	.word	0x6e6b6e75
   2bc70:	206e776f 	.word	0x206e776f
   2bc74:	74617473 	.word	0x74617473
   2bc78:	00000a65 	.word	0x00000a65
   2bc7c:	5f535047 	.word	0x5f535047
   2bc80:	6b736154 	.word	0x6b736154
   2bc84:	00000000 	.word	0x00000000
   2bc88:	534e4553 	.word	0x534e4553
   2bc8c:	2053524f 	.word	0x2053524f
   2bc90:	44203a3a 	.word	0x44203a3a
   2bc94:	68747065 	.word	0x68747065
   2bc98:	6553202c 	.word	0x6553202c
   2bc9c:	6e697474 	.word	0x6e697474
   2bca0:	61722067 	.word	0x61722067
   2bca4:	3d206574 	.word	0x3d206574
   2bca8:	332e2520 	.word	0x332e2520
   2bcac:	0a7a4866 	.word	0x0a7a4866
   2bcb0:	00000000 	.word	0x00000000
   2bcb4:	534e4553 	.word	0x534e4553
   2bcb8:	2053524f 	.word	0x2053524f
   2bcbc:	54203a3a 	.word	0x54203a3a
   2bcc0:	65706d65 	.word	0x65706d65
   2bcc4:	75746172 	.word	0x75746172
   2bcc8:	202c6572 	.word	0x202c6572
   2bccc:	74746553 	.word	0x74746553
   2bcd0:	20676e69 	.word	0x20676e69
   2bcd4:	65746172 	.word	0x65746172
   2bcd8:	25203d20 	.word	0x25203d20
   2bcdc:	4866332e 	.word	0x4866332e
   2bce0:	00000a7a 	.word	0x00000a7a
   2bce4:	534e4553 	.word	0x534e4553
   2bce8:	2053524f 	.word	0x2053524f
   2bcec:	47203a3a 	.word	0x47203a3a
   2bcf0:	202c5350 	.word	0x202c5350
   2bcf4:	74746553 	.word	0x74746553
   2bcf8:	20676e69 	.word	0x20676e69
   2bcfc:	65746172 	.word	0x65746172
   2bd00:	25203d20 	.word	0x25203d20
   2bd04:	0a7a4875 	.word	0x0a7a4875
   2bd08:	00000000 	.word	0x00000000
   2bd0c:	55500a0a 	.word	0x55500a0a
   2bd10:	3a3a2053 	.word	0x3a3a2053
   2bd14:	6c644920 	.word	0x6c644920
   2bd18:	67202c65 	.word	0x67202c65
   2bd1c:	676e696f 	.word	0x676e696f
   2bd20:	206f7420 	.word	0x206f7420
   2bd24:	70656564 	.word	0x70656564
   2bd28:	656c7320 	.word	0x656c7320
   2bd2c:	000a7065 	.word	0x000a7065
   2bd30:	20535550 	.word	0x20535550
   2bd34:	49203a3a 	.word	0x49203a3a
   2bd38:	2c656c64 	.word	0x2c656c64
   2bd3c:	203c3c20 	.word	0x203c3c20
   2bd40:	454e4f44 	.word	0x454e4f44
   2bd44:	52454820 	.word	0x52454820
   2bd48:	3e3e2045 	.word	0x3e3e2045
   2bd4c:	00000a0a 	.word	0x00000a0a
   2bd50:	5355500a 	.word	0x5355500a
   2bd54:	203a3a20 	.word	0x203a3a20
   2bd58:	656c6449 	.word	0x656c6449
   2bd5c:	7246202c 	.word	0x7246202c
   2bd60:	54526565 	.word	0x54526565
   2bd64:	4820534f 	.word	0x4820534f
   2bd68:	20504145 	.word	0x20504145
   2bd6c:	455a4953 	.word	0x455a4953
   2bd70:	25203d20 	.word	0x25203d20
   2bd74:	79422075 	.word	0x79422075
   2bd78:	0a736574 	.word	0x0a736574
   2bd7c:	0000000a 	.word	0x0000000a
   2bd80:	20535550 	.word	0x20535550
   2bd84:	73203a3a 	.word	0x73203a3a
   2bd88:	61667275 	.word	0x61667275
   2bd8c:	665f6563 	.word	0x665f6563
   2bd90:	74616f6c 	.word	0x74616f6c
   2bd94:	6544202c 	.word	0x6544202c
   2bd98:	7469736e 	.word	0x7469736e
   2bd9c:	2e253d79 	.word	0x2e253d79
   2bda0:	676b6633 	.word	0x676b6633
   2bda4:	b3c26d2f 	.word	0xb3c26d2f
   2bda8:	6f56202c 	.word	0x6f56202c
   2bdac:	656d756c 	.word	0x656d756c
   2bdb0:	332e253d 	.word	0x332e253d
   2bdb4:	c26e6966 	.word	0xc26e6966
   2bdb8:	4c202cb3 	.word	0x4c202cb3
   2bdbc:	74676e65 	.word	0x74676e65
   2bdc0:	2e253d68 	.word	0x2e253d68
   2bdc4:	6e696634 	.word	0x6e696634
   2bdc8:	0000000a 	.word	0x0000000a
   2bdcc:	20535550 	.word	0x20535550
   2bdd0:	73203a3a 	.word	0x73203a3a
   2bdd4:	61667275 	.word	0x61667275
   2bdd8:	665f6563 	.word	0x665f6563
   2bddc:	74616f6c 	.word	0x74616f6c
   2bde0:	6950202c 	.word	0x6950202c
   2bde4:	6e6f7473 	.word	0x6e6f7473
   2bde8:	6d697420 	.word	0x6d697420
   2bdec:	756f2d65 	.word	0x756f2d65
   2bdf0:	74202c74 	.word	0x74202c74
   2bdf4:	2d6b7361 	.word	0x2d6b7361
   2bdf8:	6e69663e 	.word	0x6e69663e
   2bdfc:	65687369 	.word	0x65687369
   2be00:	00000a64 	.word	0x00000a64
   2be04:	20535550 	.word	0x20535550
   2be08:	73203a3a 	.word	0x73203a3a
   2be0c:	61667275 	.word	0x61667275
   2be10:	665f6563 	.word	0x665f6563
   2be14:	74616f6c 	.word	0x74616f6c
   2be18:	7250202c 	.word	0x7250202c
   2be1c:	75737365 	.word	0x75737365
   2be20:	3d206572 	.word	0x3d206572
   2be24:	2e302520 	.word	0x2e302520
   2be28:	62206634 	.word	0x62206634
   2be2c:	000a7261 	.word	0x000a7261
   2be30:	20535550 	.word	0x20535550
   2be34:	73203a3a 	.word	0x73203a3a
   2be38:	61667275 	.word	0x61667275
   2be3c:	665f6563 	.word	0x665f6563
   2be40:	74616f6c 	.word	0x74616f6c
   2be44:	6544202c 	.word	0x6544202c
   2be48:	20687470 	.word	0x20687470
   2be4c:	3d202020 	.word	0x3d202020
   2be50:	2e302520 	.word	0x2e302520
   2be54:	6d206634 	.word	0x6d206634
   2be58:	6172202c 	.word	0x6172202c
   2be5c:	3d206574 	.word	0x3d206574
   2be60:	2e302520 	.word	0x2e302520
   2be64:	2f6d6634 	.word	0x2f6d6634
   2be68:	66312e25 	.word	0x66312e25
   2be6c:	00000a73 	.word	0x00000a73
   2be70:	20535550 	.word	0x20535550
   2be74:	73203a3a 	.word	0x73203a3a
   2be78:	61667275 	.word	0x61667275
   2be7c:	665f6563 	.word	0x665f6563
   2be80:	74616f6c 	.word	0x74616f6c
   2be84:	7045202c 	.word	0x7045202c
   2be88:	2068636f 	.word	0x2068636f
   2be8c:	3d202020 	.word	0x3d202020
   2be90:	646c2520 	.word	0x646c2520
   2be94:	0000000a 	.word	0x0000000a
   2be98:	20535550 	.word	0x20535550
   2be9c:	73203a3a 	.word	0x73203a3a
   2bea0:	61667275 	.word	0x61667275
   2bea4:	665f6563 	.word	0x665f6563
   2bea8:	74616f6c 	.word	0x74616f6c
   2beac:	7250202c 	.word	0x7250202c
   2beb0:	75737365 	.word	0x75737365
   2beb4:	72206572 	.word	0x72206572
   2beb8:	68636165 	.word	0x68636165
   2bebc:	3d206465 	.word	0x3d206465
   2bec0:	2e302520 	.word	0x2e302520
   2bec4:	62206634 	.word	0x62206634
   2bec8:	000a7261 	.word	0x000a7261
   2becc:	20535550 	.word	0x20535550
   2bed0:	73203a3a 	.word	0x73203a3a
   2bed4:	61667275 	.word	0x61667275
   2bed8:	665f6563 	.word	0x665f6563
   2bedc:	74616f6c 	.word	0x74616f6c
   2bee0:	6544202c 	.word	0x6544202c
   2bee4:	20687470 	.word	0x20687470
   2bee8:	63616572 	.word	0x63616572
   2beec:	20646568 	.word	0x20646568
   2bef0:	3d202020 	.word	0x3d202020
   2bef4:	2e302520 	.word	0x2e302520
   2bef8:	6d206634 	.word	0x6d206634
   2befc:	0000000a 	.word	0x0000000a
   2bf00:	20535550 	.word	0x20535550
   2bf04:	73203a3a 	.word	0x73203a3a
   2bf08:	61667275 	.word	0x61667275
   2bf0c:	665f6563 	.word	0x665f6563
   2bf10:	74616f6c 	.word	0x74616f6c
   2bf14:	6544202c 	.word	0x6544202c
   2bf18:	20687470 	.word	0x20687470
   2bf1c:	65746152 	.word	0x65746152
   2bf20:	20736920 	.word	0x20736920
   2bf24:	6167656e 	.word	0x6167656e
   2bf28:	65766974 	.word	0x65766974
   2bf2c:	6f64202c 	.word	0x6f64202c
   2bf30:	746f6e20 	.word	0x746f6e20
   2bf34:	676e6968 	.word	0x676e6968
   2bf38:	0000000a 	.word	0x0000000a
   2bf3c:	20535550 	.word	0x20535550
   2bf40:	73203a3a 	.word	0x73203a3a
   2bf44:	61667275 	.word	0x61667275
   2bf48:	665f6563 	.word	0x665f6563
   2bf4c:	74616f6c 	.word	0x74616f6c
   2bf50:	6544202c 	.word	0x6544202c
   2bf54:	20687470 	.word	0x20687470
   2bf58:	65746152 	.word	0x65746152
   2bf5c:	20736920 	.word	0x20736920
   2bf60:	69736f70 	.word	0x69736f70
   2bf64:	65766974 	.word	0x65766974
   2bf68:	6e69202c 	.word	0x6e69202c
   2bf6c:	61657263 	.word	0x61657263
   2bf70:	25206573 	.word	0x25206573
   2bf74:	0a6e6966 	.word	0x0a6e6966
   2bf78:	00000000 	.word	0x00000000
   2bf7c:	203c3c0a 	.word	0x203c3c0a
   2bf80:	20535550 	.word	0x20535550
   2bf84:	73203a3a 	.word	0x73203a3a
   2bf88:	61667275 	.word	0x61667275
   2bf8c:	665f6563 	.word	0x665f6563
   2bf90:	74616f6c 	.word	0x74616f6c
   2bf94:	6544202c 	.word	0x6544202c
   2bf98:	20687470 	.word	0x20687470
   2bf9c:	2e25203d 	.word	0x2e25203d
   2bfa0:	69206634 	.word	0x69206634
   2bfa4:	63402073 	.word	0x63402073
   2bfa8:	69746972 	.word	0x69746972
   2bfac:	70206c61 	.word	0x70206c61
   2bfb0:	6f747369 	.word	0x6f747369
   2bfb4:	6f70206e 	.word	0x6f70206e
   2bfb8:	69746973 	.word	0x69746973
   2bfbc:	3e206e6f 	.word	0x3e206e6f
   2bfc0:	00000a3e 	.word	0x00000a3e
   2bfc4:	20535550 	.word	0x20535550
   2bfc8:	73203a3a 	.word	0x73203a3a
   2bfcc:	61667275 	.word	0x61667275
   2bfd0:	665f6563 	.word	0x665f6563
   2bfd4:	74616f6c 	.word	0x74616f6c
   2bfd8:	6544202c 	.word	0x6544202c
   2bfdc:	20687470 	.word	0x20687470
   2bfe0:	65746152 	.word	0x65746152
   2bfe4:	20736920 	.word	0x20736920
   2bfe8:	62617473 	.word	0x62617473
   2bfec:	202c656c 	.word	0x202c656c
   2bff0:	72636e69 	.word	0x72636e69
   2bff4:	65736165 	.word	0x65736165
   2bff8:	69662520 	.word	0x69662520
   2bffc:	00000a6e 	.word	0x00000a6e
   2c000:	203c3c0a 	.word	0x203c3c0a
   2c004:	20535550 	.word	0x20535550
   2c008:	73203a3a 	.word	0x73203a3a
   2c00c:	61667275 	.word	0x61667275
   2c010:	665f6563 	.word	0x665f6563
   2c014:	74616f6c 	.word	0x74616f6c
   2c018:	6544202c 	.word	0x6544202c
   2c01c:	3d687470 	.word	0x3d687470
   2c020:	66342e25 	.word	0x66342e25
   2c024:	20736920 	.word	0x20736920
   2c028:	69726340 	.word	0x69726340
   2c02c:	6c616974 	.word	0x6c616974
   2c030:	73697020 	.word	0x73697020
   2c034:	206e6f74 	.word	0x206e6f74
   2c038:	69736f70 	.word	0x69736f70
   2c03c:	6e6f6974 	.word	0x6e6f6974
   2c040:	0a3e3e20 	.word	0x0a3e3e20
   2c044:	00000000 	.word	0x00000000
   2c048:	20535550 	.word	0x20535550
   2c04c:	73203a3a 	.word	0x73203a3a
   2c050:	61667275 	.word	0x61667275
   2c054:	665f6563 	.word	0x665f6563
   2c058:	74616f6c 	.word	0x74616f6c
   2c05c:	6950202c 	.word	0x6950202c
   2c060:	6e6f7473 	.word	0x6e6f7473
   2c064:	73617420 	.word	0x73617420
   2c068:	613e2d6b 	.word	0x613e2d6b
   2c06c:	76697463 	.word	0x76697463
   2c070:	00000a65 	.word	0x00000a65
   2c074:	20535550 	.word	0x20535550
   2c078:	73203a3a 	.word	0x73203a3a
   2c07c:	61667275 	.word	0x61667275
   2c080:	665f6563 	.word	0x665f6563
   2c084:	74616f6c 	.word	0x74616f6c
   2c088:	6950202c 	.word	0x6950202c
   2c08c:	6e6f7473 	.word	0x6e6f7473
   2c090:	73617420 	.word	0x73617420
   2c094:	733e2d6b 	.word	0x733e2d6b
   2c098:	65707375 	.word	0x65707375
   2c09c:	6465646e 	.word	0x6465646e
   2c0a0:	0000000a 	.word	0x0000000a
   2c0a4:	20535550 	.word	0x20535550
   2c0a8:	73203a3a 	.word	0x73203a3a
   2c0ac:	61667275 	.word	0x61667275
   2c0b0:	665f6563 	.word	0x665f6563
   2c0b4:	74616f6c 	.word	0x74616f6c
   2c0b8:	6950202c 	.word	0x6950202c
   2c0bc:	6e6f7473 	.word	0x6e6f7473
   2c0c0:	73617420 	.word	0x73617420
   2c0c4:	663e2d6b 	.word	0x663e2d6b
   2c0c8:	73696e69 	.word	0x73696e69
   2c0cc:	0a646568 	.word	0x0a646568
   2c0d0:	00000000 	.word	0x00000000
   2c0d4:	5355500a 	.word	0x5355500a
   2c0d8:	203a3a20 	.word	0x203a3a20
   2c0dc:	66727573 	.word	0x66727573
   2c0e0:	5f656361 	.word	0x5f656361
   2c0e4:	616f6c66 	.word	0x616f6c66
   2c0e8:	46202c74 	.word	0x46202c74
   2c0ec:	52656572 	.word	0x52656572
   2c0f0:	20534f54 	.word	0x20534f54
   2c0f4:	50414548 	.word	0x50414548
   2c0f8:	5a495320 	.word	0x5a495320
   2c0fc:	203d2045 	.word	0x203d2045
   2c100:	42207525 	.word	0x42207525
   2c104:	73657479 	.word	0x73657479
   2c108:	00000a0a 	.word	0x00000a0a
   2c10c:	20535053 	.word	0x20535053
   2c110:	49203a3a 	.word	0x49203a3a
   2c114:	2c656c64 	.word	0x2c656c64
   2c118:	20752520 	.word	0x20752520
   2c11c:	20636573 	.word	0x20636573
   2c120:	74696177 	.word	0x74696177
   2c124:	0000000a 	.word	0x0000000a
   2c128:	20535053 	.word	0x20535053
   2c12c:	49203a3a 	.word	0x49203a3a
   2c130:	2c656c64 	.word	0x2c656c64
   2c134:	73615420 	.word	0x73615420
   2c138:	663e2d6b 	.word	0x663e2d6b
   2c13c:	73696e69 	.word	0x73696e69
   2c140:	0a646568 	.word	0x0a646568
   2c144:	00000000 	.word	0x00000000
   2c148:	3c3c3c0a 	.word	0x3c3c3c0a
   2c14c:	61745320 	.word	0x61745320
   2c150:	6e697472 	.word	0x6e697472
   2c154:	72502067 	.word	0x72502067
   2c158:	6c69666f 	.word	0x6c69666f
   2c15c:	75252065 	.word	0x75252065
   2c160:	3e3e3e20 	.word	0x3e3e3e20
   2c164:	00000a0a 	.word	0x00000a0a
   2c168:	20535053 	.word	0x20535053
   2c16c:	49203a3a 	.word	0x49203a3a
   2c170:	2c656c64 	.word	0x2c656c64
   2c174:	65724620 	.word	0x65724620
   2c178:	4f545265 	.word	0x4f545265
   2c17c:	45482053 	.word	0x45482053
   2c180:	53205041 	.word	0x53205041
   2c184:	20455a49 	.word	0x20455a49
   2c188:	7525203d 	.word	0x7525203d
   2c18c:	74794220 	.word	0x74794220
   2c190:	000a7365 	.word	0x000a7365
   2c194:	5344500a 	.word	0x5344500a
   2c198:	203a3a20 	.word	0x203a3a20
   2c19c:	656c6449 	.word	0x656c6449
   2c1a0:	6970202c 	.word	0x6970202c
   2c1a4:	6e6f7473 	.word	0x6e6f7473
   2c1a8:	766f6d20 	.word	0x766f6d20
   2c1ac:	6f742065 	.word	0x6f742065
   2c1b0:	72617020 	.word	0x72617020
   2c1b4:	6564206b 	.word	0x6564206b
   2c1b8:	7469736e 	.word	0x7469736e
   2c1bc:	2e253d79 	.word	0x2e253d79
   2c1c0:	6b206633 	.word	0x6b206633
   2c1c4:	c26d2f67 	.word	0xc26d2f67
   2c1c8:	00000ab3 	.word	0x00000ab3
   2c1cc:	20534450 	.word	0x20534450
   2c1d0:	49203a3a 	.word	0x49203a3a
   2c1d4:	2c656c64 	.word	0x2c656c64
   2c1d8:	74655320 	.word	0x74655320
   2c1dc:	676e6974 	.word	0x676e6974
   2c1e0:	203e2d20 	.word	0x203e2d20
   2c1e4:	736e6564 	.word	0x736e6564
   2c1e8:	3d797469 	.word	0x3d797469
   2c1ec:	66332e25 	.word	0x66332e25
   2c1f0:	2f676b20 	.word	0x2f676b20
   2c1f4:	2cb3c26d 	.word	0x2cb3c26d
   2c1f8:	6c6f7620 	.word	0x6c6f7620
   2c1fc:	3d656d75 	.word	0x3d656d75
   2c200:	66332e25 	.word	0x66332e25
   2c204:	b3c26e69 	.word	0xb3c26e69
   2c208:	656c202c 	.word	0x656c202c
   2c20c:	6874676e 	.word	0x6874676e
   2c210:	342e253d 	.word	0x342e253d
   2c214:	0a6e6966 	.word	0x0a6e6966
   2c218:	0000000a 	.word	0x0000000a
   2c21c:	20534450 	.word	0x20534450
   2c220:	49203a3a 	.word	0x49203a3a
   2c224:	2c656c64 	.word	0x2c656c64
   2c228:	73695020 	.word	0x73695020
   2c22c:	206e6f74 	.word	0x206e6f74
   2c230:	6b736174 	.word	0x6b736174
   2c234:	63613e2d 	.word	0x63613e2d
   2c238:	65766974 	.word	0x65766974
   2c23c:	0000000a 	.word	0x0000000a
   2c240:	20534450 	.word	0x20534450
   2c244:	49203a3a 	.word	0x49203a3a
   2c248:	2c656c64 	.word	0x2c656c64
   2c24c:	73695020 	.word	0x73695020
   2c250:	206e6f74 	.word	0x206e6f74
   2c254:	656d6974 	.word	0x656d6974
   2c258:	74756f2d 	.word	0x74756f2d
   2c25c:	6174202c 	.word	0x6174202c
   2c260:	3e2d6b73 	.word	0x3e2d6b73
   2c264:	696e6966 	.word	0x696e6966
   2c268:	64656873 	.word	0x64656873
   2c26c:	0000000a 	.word	0x0000000a
   2c270:	20534450 	.word	0x20534450
   2c274:	49203a3a 	.word	0x49203a3a
   2c278:	2c656c64 	.word	0x2c656c64
   2c27c:	73695020 	.word	0x73695020
   2c280:	206e6f74 	.word	0x206e6f74
   2c284:	6b736174 	.word	0x6b736174
   2c288:	75733e2d 	.word	0x75733e2d
   2c28c:	6e657073 	.word	0x6e657073
   2c290:	0a646564 	.word	0x0a646564
   2c294:	00000000 	.word	0x00000000
   2c298:	20534450 	.word	0x20534450
   2c29c:	49203a3a 	.word	0x49203a3a
   2c2a0:	2c656c64 	.word	0x2c656c64
   2c2a4:	6e656420 	.word	0x6e656420
   2c2a8:	79746973 	.word	0x79746973
   2c2ac:	332e253d 	.word	0x332e253d
   2c2b0:	676b2066 	.word	0x676b2066
   2c2b4:	b3c26d2f 	.word	0xb3c26d2f
   2c2b8:	6f76202c 	.word	0x6f76202c
   2c2bc:	656d756c 	.word	0x656d756c
   2c2c0:	332e253d 	.word	0x332e253d
   2c2c4:	c26e6966 	.word	0xc26e6966
   2c2c8:	6c202cb3 	.word	0x6c202cb3
   2c2cc:	74676e65 	.word	0x74676e65
   2c2d0:	2e253d68 	.word	0x2e253d68
   2c2d4:	6e696634 	.word	0x6e696634
   2c2d8:	0000000a 	.word	0x0000000a
   2c2dc:	20534450 	.word	0x20534450
   2c2e0:	49203a3a 	.word	0x49203a3a
   2c2e4:	2c656c64 	.word	0x2c656c64
   2c2e8:	73695020 	.word	0x73695020
   2c2ec:	206e6f74 	.word	0x206e6f74
   2c2f0:	6b736174 	.word	0x6b736174
   2c2f4:	69663e2d 	.word	0x69663e2d
   2c2f8:	6873696e 	.word	0x6873696e
   2c2fc:	000a6465 	.word	0x000a6465
   2c300:	20534450 	.word	0x20534450
   2c304:	49203a3a 	.word	0x49203a3a
   2c308:	2c656c64 	.word	0x2c656c64
   2c30c:	65725020 	.word	0x65725020
   2c310:	72757373 	.word	0x72757373
   2c314:	203d2065 	.word	0x203d2065
   2c318:	342e3025 	.word	0x342e3025
   2c31c:	61622066 	.word	0x61622066
   2c320:	00000a72 	.word	0x00000a72
   2c324:	20534450 	.word	0x20534450
   2c328:	49203a3a 	.word	0x49203a3a
   2c32c:	2c656c64 	.word	0x2c656c64
   2c330:	70654420 	.word	0x70654420
   2c334:	20206874 	.word	0x20206874
   2c338:	203d2020 	.word	0x203d2020
   2c33c:	342e3025 	.word	0x342e3025
   2c340:	2c6d2066 	.word	0x2c6d2066
   2c344:	74617220 	.word	0x74617220
   2c348:	203d2065 	.word	0x203d2065
   2c34c:	342e3025 	.word	0x342e3025
   2c350:	252f6d66 	.word	0x252f6d66
   2c354:	7366312e 	.word	0x7366312e
   2c358:	0000000a 	.word	0x0000000a
   2c35c:	20534450 	.word	0x20534450
   2c360:	49203a3a 	.word	0x49203a3a
   2c364:	2c656c64 	.word	0x2c656c64
   2c368:	6f704520 	.word	0x6f704520
   2c36c:	20206863 	.word	0x20206863
   2c370:	203d2020 	.word	0x203d2020
   2c374:	0a646c25 	.word	0x0a646c25
   2c378:	00000000 	.word	0x00000000
   2c37c:	20534450 	.word	0x20534450
   2c380:	49203a3a 	.word	0x49203a3a
   2c384:	2c656c64 	.word	0x2c656c64
   2c388:	65725020 	.word	0x65725020
   2c38c:	72757373 	.word	0x72757373
   2c390:	65722065 	.word	0x65722065
   2c394:	65686361 	.word	0x65686361
   2c398:	203d2064 	.word	0x203d2064
   2c39c:	342e3025 	.word	0x342e3025
   2c3a0:	61622066 	.word	0x61622066
   2c3a4:	00000a72 	.word	0x00000a72
   2c3a8:	20534450 	.word	0x20534450
   2c3ac:	49203a3a 	.word	0x49203a3a
   2c3b0:	2c656c64 	.word	0x2c656c64
   2c3b4:	70654420 	.word	0x70654420
   2c3b8:	72206874 	.word	0x72206874
   2c3bc:	68636165 	.word	0x68636165
   2c3c0:	20206465 	.word	0x20206465
   2c3c4:	203d2020 	.word	0x203d2020
   2c3c8:	342e3025 	.word	0x342e3025
   2c3cc:	0a6d2066 	.word	0x0a6d2066
   2c3d0:	00000000 	.word	0x00000000
   2c3d4:	5344500a 	.word	0x5344500a
   2c3d8:	203a3a20 	.word	0x203a3a20
   2c3dc:	656c6449 	.word	0x656c6449
   2c3e0:	7246202c 	.word	0x7246202c
   2c3e4:	54526565 	.word	0x54526565
   2c3e8:	4820534f 	.word	0x4820534f
   2c3ec:	20504145 	.word	0x20504145
   2c3f0:	455a4953 	.word	0x455a4953
   2c3f4:	25203d20 	.word	0x25203d20
   2c3f8:	79422075 	.word	0x79422075
   2c3fc:	0a736574 	.word	0x0a736574
   2c400:	0000000a 	.word	0x0000000a
   2c404:	20534450 	.word	0x20534450
   2c408:	73203a3a 	.word	0x73203a3a
   2c40c:	65747379 	.word	0x65747379
   2c410:	6568636d 	.word	0x6568636d
   2c414:	202c6b63 	.word	0x202c6b63
   2c418:	20535047 	.word	0x20535047
   2c41c:	6966203a 	.word	0x6966203a
   2c420:	2c646578 	.word	0x2c646578
   2c424:	74616c20 	.word	0x74616c20
   2c428:	64757469 	.word	0x64757469
   2c42c:	30253d65 	.word	0x30253d65
   2c430:	2c66372e 	.word	0x2c66372e
   2c434:	6e6f6c20 	.word	0x6e6f6c20
   2c438:	75746967 	.word	0x75746967
   2c43c:	253d6564 	.word	0x253d6564
   2c440:	66372e30 	.word	0x66372e30
   2c444:	6c61202c 	.word	0x6c61202c
   2c448:	75746974 	.word	0x75746974
   2c44c:	253d6564 	.word	0x253d6564
   2c450:	66372e30 	.word	0x66372e30
   2c454:	0000000a 	.word	0x0000000a
   2c458:	20534450 	.word	0x20534450
   2c45c:	73203a3a 	.word	0x73203a3a
   2c460:	65747379 	.word	0x65747379
   2c464:	6568636d 	.word	0x6568636d
   2c468:	202c6b63 	.word	0x202c6b63
   2c46c:	20435452 	.word	0x20435452
   2c470:	473c203a 	.word	0x473c203a
   2c474:	54205350 	.word	0x54205350
   2c478:	20656d69 	.word	0x20656d69
   2c47c:	3e746553 	.word	0x3e746553
   2c480:	0000000a 	.word	0x0000000a
   2c484:	20534450 	.word	0x20534450
   2c488:	73203a3a 	.word	0x73203a3a
   2c48c:	65747379 	.word	0x65747379
   2c490:	6568636d 	.word	0x6568636d
   2c494:	202c6b63 	.word	0x202c6b63
   2c498:	20535047 	.word	0x20535047
   2c49c:	6b736174 	.word	0x6b736174
   2c4a0:	63613e2d 	.word	0x63613e2d
   2c4a4:	65766974 	.word	0x65766974
   2c4a8:	4e203a20 	.word	0x4e203a20
   2c4ac:	6966206f 	.word	0x6966206f
   2c4b0:	00000a78 	.word	0x00000a78
   2c4b4:	20534450 	.word	0x20534450
   2c4b8:	73203a3a 	.word	0x73203a3a
   2c4bc:	65747379 	.word	0x65747379
   2c4c0:	6568636d 	.word	0x6568636d
   2c4c4:	202c6b63 	.word	0x202c6b63
   2c4c8:	20535047 	.word	0x20535047
   2c4cc:	6b736174 	.word	0x6b736174
   2c4d0:	75733e2d 	.word	0x75733e2d
   2c4d4:	6e657073 	.word	0x6e657073
   2c4d8:	0a646564 	.word	0x0a646564
   2c4dc:	00000000 	.word	0x00000000
   2c4e0:	20534450 	.word	0x20534450
   2c4e4:	73203a3a 	.word	0x73203a3a
   2c4e8:	65747379 	.word	0x65747379
   2c4ec:	6568636d 	.word	0x6568636d
   2c4f0:	202c6b63 	.word	0x202c6b63
   2c4f4:	20535047 	.word	0x20535047
   2c4f8:	6b736174 	.word	0x6b736174
   2c4fc:	69663e2d 	.word	0x69663e2d
   2c500:	6873696e 	.word	0x6873696e
   2c504:	000a6465 	.word	0x000a6465
   2c508:	20534450 	.word	0x20534450
   2c50c:	73203a3a 	.word	0x73203a3a
   2c510:	65747379 	.word	0x65747379
   2c514:	6568636d 	.word	0x6568636d
   2c518:	202c6b63 	.word	0x202c6b63
   2c51c:	3e3e3e2d 	.word	0x3e3e3e2d
   2c520:	52524520 	.word	0x52524520
   2c524:	2120524f 	.word	0x2120524f
   2c528:	00000a21 	.word	0x00000a21
   2c52c:	20534450 	.word	0x20534450
   2c530:	73203a3a 	.word	0x73203a3a
   2c534:	65747379 	.word	0x65747379
   2c538:	6568636d 	.word	0x6568636d
   2c53c:	202c6b63 	.word	0x202c6b63
   2c540:	20435452 	.word	0x20435452
   2c544:	6954203a 	.word	0x6954203a
   2c548:	7453656d 	.word	0x7453656d
   2c54c:	2c706d61 	.word	0x2c706d61
   2c550:	32302520 	.word	0x32302520
   2c554:	30252e64 	.word	0x30252e64
   2c558:	322e6432 	.word	0x322e6432
   2c55c:	32302530 	.word	0x32302530
   2c560:	25202c64 	.word	0x25202c64
   2c564:	3a643230 	.word	0x3a643230
   2c568:	64323025 	.word	0x64323025
   2c56c:	3230253a 	.word	0x3230253a
   2c570:	55282064 	.word	0x55282064
   2c574:	0a294354 	.word	0x0a294354
   2c578:	00000000 	.word	0x00000000
   2c57c:	20534450 	.word	0x20534450
   2c580:	73203a3a 	.word	0x73203a3a
   2c584:	65747379 	.word	0x65747379
   2c588:	6568636d 	.word	0x6568636d
   2c58c:	202c6b63 	.word	0x202c6b63
   2c590:	20435452 	.word	0x20435452
   2c594:	6954203a 	.word	0x6954203a
   2c598:	7453656d 	.word	0x7453656d
   2c59c:	2c706d61 	.word	0x2c706d61
   2c5a0:	32302520 	.word	0x32302520
   2c5a4:	30252e64 	.word	0x30252e64
   2c5a8:	322e6432 	.word	0x322e6432
   2c5ac:	32302530 	.word	0x32302530
   2c5b0:	25202c64 	.word	0x25202c64
   2c5b4:	3a643230 	.word	0x3a643230
   2c5b8:	64323025 	.word	0x64323025
   2c5bc:	3230253a 	.word	0x3230253a
   2c5c0:	6c282064 	.word	0x6c282064
   2c5c4:	6c61636f 	.word	0x6c61636f
   2c5c8:	00000a29 	.word	0x00000a29
   2c5cc:	5344500a 	.word	0x5344500a
   2c5d0:	203a3a20 	.word	0x203a3a20
   2c5d4:	74737973 	.word	0x74737973
   2c5d8:	68636d65 	.word	0x68636d65
   2c5dc:	2c6b6365 	.word	0x2c6b6365
   2c5e0:	65724620 	.word	0x65724620
   2c5e4:	4f545265 	.word	0x4f545265
   2c5e8:	45482053 	.word	0x45482053
   2c5ec:	53205041 	.word	0x53205041
   2c5f0:	20455a49 	.word	0x20455a49
   2c5f4:	7525203d 	.word	0x7525203d
   2c5f8:	74794220 	.word	0x74794220
   2c5fc:	0a0a7365 	.word	0x0a0a7365
   2c600:	00000000 	.word	0x00000000
   2c604:	203c3c0a 	.word	0x203c3c0a
   2c608:	20535053 	.word	0x20535053
   2c60c:	6d203a3a 	.word	0x6d203a3a
   2c610:	5f65766f 	.word	0x5f65766f
   2c614:	705f6f74 	.word	0x705f6f74
   2c618:	2c6b7261 	.word	0x2c6b7261
   2c61c:	74655320 	.word	0x74655320
   2c620:	676e6974 	.word	0x676e6974
   2c624:	203e2d20 	.word	0x203e2d20
   2c628:	74736950 	.word	0x74736950
   2c62c:	65206e6f 	.word	0x65206e6f
   2c630:	646f636e 	.word	0x646f636e
   2c634:	76207265 	.word	0x76207265
   2c638:	65756c61 	.word	0x65756c61
   2c63c:	206f7420 	.word	0x206f7420
   2c640:	6f72657a 	.word	0x6f72657a
   2c644:	7525202c 	.word	0x7525202c
   2c648:	6f727020 	.word	0x6f727020
   2c64c:	656c6966 	.word	0x656c6966
   2c650:	65722073 	.word	0x65722073
   2c654:	65686361 	.word	0x65686361
   2c658:	69732064 	.word	0x69732064
   2c65c:	2065636e 	.word	0x2065636e
   2c660:	7473616c 	.word	0x7473616c
   2c664:	6c616320 	.word	0x6c616320
   2c668:	0a3e3e20 	.word	0x0a3e3e20
   2c66c:	0000000a 	.word	0x0000000a
   2c670:	20535053 	.word	0x20535053
   2c674:	6d203a3a 	.word	0x6d203a3a
   2c678:	5f65766f 	.word	0x5f65766f
   2c67c:	705f6f74 	.word	0x705f6f74
   2c680:	2c6b7261 	.word	0x2c6b7261
   2c684:	73695020 	.word	0x73695020
   2c688:	206e6f74 	.word	0x206e6f74
   2c68c:	6f72657a 	.word	0x6f72657a
   2c690:	73617420 	.word	0x73617420
   2c694:	613e2d6b 	.word	0x613e2d6b
   2c698:	76697463 	.word	0x76697463
   2c69c:	00000a65 	.word	0x00000a65
   2c6a0:	20535053 	.word	0x20535053
   2c6a4:	6d203a3a 	.word	0x6d203a3a
   2c6a8:	5f65766f 	.word	0x5f65766f
   2c6ac:	705f6f74 	.word	0x705f6f74
   2c6b0:	2c6b7261 	.word	0x2c6b7261
   2c6b4:	73695020 	.word	0x73695020
   2c6b8:	206e6f74 	.word	0x206e6f74
   2c6bc:	6f72657a 	.word	0x6f72657a
   2c6c0:	6d697420 	.word	0x6d697420
   2c6c4:	756f2d65 	.word	0x756f2d65
   2c6c8:	74202c74 	.word	0x74202c74
   2c6cc:	2d6b7361 	.word	0x2d6b7361
   2c6d0:	6e69663e 	.word	0x6e69663e
   2c6d4:	65687369 	.word	0x65687369
   2c6d8:	00000a64 	.word	0x00000a64
   2c6dc:	20535053 	.word	0x20535053
   2c6e0:	6d203a3a 	.word	0x6d203a3a
   2c6e4:	5f65766f 	.word	0x5f65766f
   2c6e8:	705f6f74 	.word	0x705f6f74
   2c6ec:	2c6b7261 	.word	0x2c6b7261
   2c6f0:	73695020 	.word	0x73695020
   2c6f4:	206e6f74 	.word	0x206e6f74
   2c6f8:	6f72657a 	.word	0x6f72657a
   2c6fc:	73617420 	.word	0x73617420
   2c700:	733e2d6b 	.word	0x733e2d6b
   2c704:	65707375 	.word	0x65707375
   2c708:	6465646e 	.word	0x6465646e
   2c70c:	0000000a 	.word	0x0000000a
   2c710:	20535053 	.word	0x20535053
   2c714:	6d203a3a 	.word	0x6d203a3a
   2c718:	5f65766f 	.word	0x5f65766f
   2c71c:	705f6f74 	.word	0x705f6f74
   2c720:	2c6b7261 	.word	0x2c6b7261
   2c724:	73695020 	.word	0x73695020
   2c728:	206e6f74 	.word	0x206e6f74
   2c72c:	6f72655a 	.word	0x6f72655a
   2c730:	6c614320 	.word	0x6c614320
   2c734:	6e654c20 	.word	0x6e654c20
   2c738:	3d687467 	.word	0x3d687467
   2c73c:	66342e25 	.word	0x66342e25
   2c740:	000a6e69 	.word	0x000a6e69
   2c744:	20535053 	.word	0x20535053
   2c748:	6d203a3a 	.word	0x6d203a3a
   2c74c:	5f65766f 	.word	0x5f65766f
   2c750:	705f6f74 	.word	0x705f6f74
   2c754:	2c6b7261 	.word	0x2c6b7261
   2c758:	73695020 	.word	0x73695020
   2c75c:	206e6f74 	.word	0x206e6f74
   2c760:	6f72655a 	.word	0x6f72655a
   2c764:	6c614320 	.word	0x6c614320
   2c768:	73615420 	.word	0x73615420
   2c76c:	463e2d6b 	.word	0x463e2d6b
   2c770:	73696e69 	.word	0x73696e69
   2c774:	0a646568 	.word	0x0a646568
   2c778:	00000000 	.word	0x00000000
   2c77c:	203c3c0a 	.word	0x203c3c0a
   2c780:	20535053 	.word	0x20535053
   2c784:	6d203a3a 	.word	0x6d203a3a
   2c788:	5f65766f 	.word	0x5f65766f
   2c78c:	705f6f74 	.word	0x705f6f74
   2c790:	2c6b7261 	.word	0x2c6b7261
   2c794:	74655320 	.word	0x74655320
   2c798:	676e6974 	.word	0x676e6974
   2c79c:	203e2d20 	.word	0x203e2d20
   2c7a0:	73726966 	.word	0x73726966
   2c7a4:	69742074 	.word	0x69742074
   2c7a8:	7020656d 	.word	0x7020656d
   2c7ac:	5f6b7261 	.word	0x5f6b7261
   2c7b0:	74736970 	.word	0x74736970
   2c7b4:	6c5f6e6f 	.word	0x6c5f6e6f
   2c7b8:	74676e65 	.word	0x74676e65
   2c7bc:	2e253d68 	.word	0x2e253d68
   2c7c0:	6e696634 	.word	0x6e696634
   2c7c4:	0a3e3e20 	.word	0x0a3e3e20
   2c7c8:	00000000 	.word	0x00000000
   2c7cc:	203c3c0a 	.word	0x203c3c0a
   2c7d0:	20535053 	.word	0x20535053
   2c7d4:	6d203a3a 	.word	0x6d203a3a
   2c7d8:	5f65766f 	.word	0x5f65766f
   2c7dc:	705f6f74 	.word	0x705f6f74
   2c7e0:	2c6b7261 	.word	0x2c6b7261
   2c7e4:	6e656c20 	.word	0x6e656c20
   2c7e8:	5f687467 	.word	0x5f687467
   2c7ec:	61647075 	.word	0x61647075
   2c7f0:	253d6574 	.word	0x253d6574
   2c7f4:	6966342e 	.word	0x6966342e
   2c7f8:	203c206e 	.word	0x203c206e
   2c7fc:	74736970 	.word	0x74736970
   2c800:	70206e6f 	.word	0x70206e6f
   2c804:	7469736f 	.word	0x7469736f
   2c808:	206e6f69 	.word	0x206e6f69
   2c80c:	696e696d 	.word	0x696e696d
   2c810:	206d756d 	.word	0x206d756d
   2c814:	000a3e3e 	.word	0x000a3e3e
   2c818:	533c3c0a 	.word	0x533c3c0a
   2c81c:	3a205350 	.word	0x3a205350
   2c820:	6f6d203a 	.word	0x6f6d203a
   2c824:	745f6576 	.word	0x745f6576
   2c828:	61705f6f 	.word	0x61705f6f
   2c82c:	202c6b72 	.word	0x202c6b72
   2c830:	74746553 	.word	0x74746553
   2c834:	20676e69 	.word	0x20676e69
   2c838:	61203e2d 	.word	0x61203e2d
   2c83c:	73756a64 	.word	0x73756a64
   2c840:	20646574 	.word	0x20646574
   2c844:	6b726170 	.word	0x6b726170
   2c848:	7369705f 	.word	0x7369705f
   2c84c:	5f6e6f74 	.word	0x5f6e6f74
   2c850:	676e656c 	.word	0x676e656c
   2c854:	253d6874 	.word	0x253d6874
   2c858:	6966342e 	.word	0x6966342e
   2c85c:	3e3e206e 	.word	0x3e3e206e
   2c860:	0000000a 	.word	0x0000000a
   2c864:	20535053 	.word	0x20535053
   2c868:	6d203a3a 	.word	0x6d203a3a
   2c86c:	5f65766f 	.word	0x5f65766f
   2c870:	705f6f74 	.word	0x705f6f74
   2c874:	2c6b7261 	.word	0x2c6b7261
   2c878:	74655320 	.word	0x74655320
   2c87c:	676e6974 	.word	0x676e6974
   2c880:	203e2d20 	.word	0x203e2d20
   2c884:	736e6544 	.word	0x736e6544
   2c888:	3d797469 	.word	0x3d797469
   2c88c:	66332e25 	.word	0x66332e25
   2c890:	2f676b20 	.word	0x2f676b20
   2c894:	2cb3c26d 	.word	0x2cb3c26d
   2c898:	6c6f5620 	.word	0x6c6f5620
   2c89c:	3d656d75 	.word	0x3d656d75
   2c8a0:	66332e25 	.word	0x66332e25
   2c8a4:	b3c26e69 	.word	0xb3c26e69
   2c8a8:	654c202c 	.word	0x654c202c
   2c8ac:	6874676e 	.word	0x6874676e
   2c8b0:	342e253d 	.word	0x342e253d
   2c8b4:	0a6e6966 	.word	0x0a6e6966
   2c8b8:	0000000a 	.word	0x0000000a
   2c8bc:	20535053 	.word	0x20535053
   2c8c0:	6d203a3a 	.word	0x6d203a3a
   2c8c4:	5f65766f 	.word	0x5f65766f
   2c8c8:	705f6f74 	.word	0x705f6f74
   2c8cc:	2c6b7261 	.word	0x2c6b7261
   2c8d0:	73695020 	.word	0x73695020
   2c8d4:	206e6f74 	.word	0x206e6f74
   2c8d8:	6b736174 	.word	0x6b736174
   2c8dc:	63613e2d 	.word	0x63613e2d
   2c8e0:	65766974 	.word	0x65766974
   2c8e4:	0000000a 	.word	0x0000000a
   2c8e8:	20535053 	.word	0x20535053
   2c8ec:	6d203a3a 	.word	0x6d203a3a
   2c8f0:	5f65766f 	.word	0x5f65766f
   2c8f4:	705f6f74 	.word	0x705f6f74
   2c8f8:	2c6b7261 	.word	0x2c6b7261
   2c8fc:	73695020 	.word	0x73695020
   2c900:	206e6f74 	.word	0x206e6f74
   2c904:	656d6974 	.word	0x656d6974
   2c908:	74756f2d 	.word	0x74756f2d
   2c90c:	6174202c 	.word	0x6174202c
   2c910:	3e2d6b73 	.word	0x3e2d6b73
   2c914:	696e6966 	.word	0x696e6966
   2c918:	64656873 	.word	0x64656873
   2c91c:	0000000a 	.word	0x0000000a
   2c920:	20535053 	.word	0x20535053
   2c924:	6d203a3a 	.word	0x6d203a3a
   2c928:	5f65766f 	.word	0x5f65766f
   2c92c:	705f6f74 	.word	0x705f6f74
   2c930:	2c6b7261 	.word	0x2c6b7261
   2c934:	73695020 	.word	0x73695020
   2c938:	206e6f74 	.word	0x206e6f74
   2c93c:	6b736174 	.word	0x6b736174
   2c940:	75733e2d 	.word	0x75733e2d
   2c944:	6e657073 	.word	0x6e657073
   2c948:	0a646564 	.word	0x0a646564
   2c94c:	00000000 	.word	0x00000000
   2c950:	20535053 	.word	0x20535053
   2c954:	6d203a3a 	.word	0x6d203a3a
   2c958:	5f65766f 	.word	0x5f65766f
   2c95c:	705f6f74 	.word	0x705f6f74
   2c960:	2c6b7261 	.word	0x2c6b7261
   2c964:	6e654420 	.word	0x6e654420
   2c968:	79746973 	.word	0x79746973
   2c96c:	332e253d 	.word	0x332e253d
   2c970:	676b2066 	.word	0x676b2066
   2c974:	b3c26d2f 	.word	0xb3c26d2f
   2c978:	6f56202c 	.word	0x6f56202c
   2c97c:	656d756c 	.word	0x656d756c
   2c980:	332e253d 	.word	0x332e253d
   2c984:	c26e6966 	.word	0xc26e6966
   2c988:	4c202cb3 	.word	0x4c202cb3
   2c98c:	74676e65 	.word	0x74676e65
   2c990:	2e253d68 	.word	0x2e253d68
   2c994:	6e696634 	.word	0x6e696634
   2c998:	0000000a 	.word	0x0000000a
   2c99c:	20535053 	.word	0x20535053
   2c9a0:	6d203a3a 	.word	0x6d203a3a
   2c9a4:	5f65766f 	.word	0x5f65766f
   2c9a8:	705f6f74 	.word	0x705f6f74
   2c9ac:	2c6b7261 	.word	0x2c6b7261
   2c9b0:	73695020 	.word	0x73695020
   2c9b4:	206e6f74 	.word	0x206e6f74
   2c9b8:	6b736174 	.word	0x6b736174
   2c9bc:	69663e2d 	.word	0x69663e2d
   2c9c0:	6873696e 	.word	0x6873696e
   2c9c4:	000a6465 	.word	0x000a6465
   2c9c8:	5350530a 	.word	0x5350530a
   2c9cc:	203a3a20 	.word	0x203a3a20
   2c9d0:	65766f6d 	.word	0x65766f6d
   2c9d4:	5f6f745f 	.word	0x5f6f745f
   2c9d8:	6b726170 	.word	0x6b726170
   2c9dc:	3c3c202c 	.word	0x3c3c202c
   2c9e0:	74655320 	.word	0x74655320
   2c9e4:	676e6974 	.word	0x676e6974
   2c9e8:	6e654c20 	.word	0x6e654c20
   2c9ec:	20687467 	.word	0x20687467
   2c9f0:	66342e25 	.word	0x66342e25
   2c9f4:	74206e69 	.word	0x74206e69
   2c9f8:	6970206f 	.word	0x6970206f
   2c9fc:	6e6f7473 	.word	0x6e6f7473
   2ca00:	5f6e6f5f 	.word	0x5f6e6f5f
   2ca04:	74746f62 	.word	0x74746f62
   2ca08:	6c5f6d6f 	.word	0x6c5f6d6f
   2ca0c:	74676e65 	.word	0x74676e65
   2ca10:	61762068 	.word	0x61762068
   2ca14:	62616972 	.word	0x62616972
   2ca18:	3e20656c 	.word	0x3e20656c
   2ca1c:	000a0a3e 	.word	0x000a0a3e
   2ca20:	20535053 	.word	0x20535053
   2ca24:	6d203a3a 	.word	0x6d203a3a
   2ca28:	5f65766f 	.word	0x5f65766f
   2ca2c:	705f6f74 	.word	0x705f6f74
   2ca30:	2c6b7261 	.word	0x2c6b7261
   2ca34:	65725020 	.word	0x65725020
   2ca38:	72757373 	.word	0x72757373
   2ca3c:	3d202065 	.word	0x3d202065
   2ca40:	342e2520 	.word	0x342e2520
   2ca44:	61622066 	.word	0x61622066
   2ca48:	00000a72 	.word	0x00000a72
   2ca4c:	20535053 	.word	0x20535053
   2ca50:	6d203a3a 	.word	0x6d203a3a
   2ca54:	5f65766f 	.word	0x5f65766f
   2ca58:	705f6f74 	.word	0x705f6f74
   2ca5c:	2c6b7261 	.word	0x2c6b7261
   2ca60:	70654420 	.word	0x70654420
   2ca64:	20206874 	.word	0x20206874
   2ca68:	3d202020 	.word	0x3d202020
   2ca6c:	342e2520 	.word	0x342e2520
   2ca70:	2c6d2066 	.word	0x2c6d2066
   2ca74:	74617220 	.word	0x74617220
   2ca78:	203d2065 	.word	0x203d2065
   2ca7c:	66342e25 	.word	0x66342e25
   2ca80:	2e252f6d 	.word	0x2e252f6d
   2ca84:	0a736631 	.word	0x0a736631
   2ca88:	00000000 	.word	0x00000000
   2ca8c:	20535053 	.word	0x20535053
   2ca90:	6d203a3a 	.word	0x6d203a3a
   2ca94:	5f65766f 	.word	0x5f65766f
   2ca98:	705f6f74 	.word	0x705f6f74
   2ca9c:	2c6b7261 	.word	0x2c6b7261
   2caa0:	70654420 	.word	0x70654420
   2caa4:	52206874 	.word	0x52206874
   2caa8:	20657461 	.word	0x20657461
   2caac:	6e207369 	.word	0x6e207369
   2cab0:	74616765 	.word	0x74616765
   2cab4:	2c657669 	.word	0x2c657669
   2cab8:	63656420 	.word	0x63656420
   2cabc:	73616572 	.word	0x73616572
   2cac0:	66252065 	.word	0x66252065
   2cac4:	000a6e69 	.word	0x000a6e69
   2cac8:	5350530a 	.word	0x5350530a
   2cacc:	203a3a20 	.word	0x203a3a20
   2cad0:	65766f6d 	.word	0x65766f6d
   2cad4:	5f6f745f 	.word	0x5f6f745f
   2cad8:	6b726170 	.word	0x6b726170
   2cadc:	434c202c 	.word	0x434c202c
   2cae0:	73692050 	.word	0x73692050
   2cae4:	746f6e20 	.word	0x746f6e20
   2cae8:	74696820 	.word	0x74696820
   2caec:	676e6974 	.word	0x676e6974
   2caf0:	65687420 	.word	0x65687420
   2caf4:	746f6220 	.word	0x746f6220
   2caf8:	0a6d6f74 	.word	0x0a6d6f74
   2cafc:	0000000a 	.word	0x0000000a
   2cb00:	203c3c0a 	.word	0x203c3c0a
   2cb04:	20535053 	.word	0x20535053
   2cb08:	6d203a3a 	.word	0x6d203a3a
   2cb0c:	5f65766f 	.word	0x5f65766f
   2cb10:	705f6f74 	.word	0x705f6f74
   2cb14:	2c6b7261 	.word	0x2c6b7261
   2cb18:	50434c20 	.word	0x50434c20
   2cb1c:	65727020 	.word	0x65727020
   2cb20:	616d7573 	.word	0x616d7573
   2cb24:	20796c62 	.word	0x20796c62
   2cb28:	74746968 	.word	0x74746968
   2cb2c:	20676e69 	.word	0x20676e69
   2cb30:	20656874 	.word	0x20656874
   2cb34:	74746f62 	.word	0x74746f62
   2cb38:	3e206d6f 	.word	0x3e206d6f
   2cb3c:	000a0a3e 	.word	0x000a0a3e
   2cb40:	53203c3c 	.word	0x53203c3c
   2cb44:	3a205350 	.word	0x3a205350
   2cb48:	6f6d203a 	.word	0x6f6d203a
   2cb4c:	745f6576 	.word	0x745f6576
   2cb50:	61705f6f 	.word	0x61705f6f
   2cb54:	202c6b72 	.word	0x202c6b72
   2cb58:	74697263 	.word	0x74697263
   2cb5c:	6c616369 	.word	0x6c616369
   2cb60:	73697020 	.word	0x73697020
   2cb64:	206e6f74 	.word	0x206e6f74
   2cb68:	696e696d 	.word	0x696e696d
   2cb6c:	206d756d 	.word	0x206d756d
   2cb70:	69736f70 	.word	0x69736f70
   2cb74:	6e6f6974 	.word	0x6e6f6974
   2cb78:	6d697420 	.word	0x6d697420
   2cb7c:	203d2065 	.word	0x203d2065
   2cb80:	66322e25 	.word	0x66322e25
   2cb84:	63657320 	.word	0x63657320
   2cb88:	73646e6f 	.word	0x73646e6f
   2cb8c:	0a3e3e20 	.word	0x0a3e3e20
   2cb90:	00000000 	.word	0x00000000
   2cb94:	53203c3c 	.word	0x53203c3c
   2cb98:	3a205350 	.word	0x3a205350
   2cb9c:	6f6d203a 	.word	0x6f6d203a
   2cba0:	745f6576 	.word	0x745f6576
   2cba4:	61705f6f 	.word	0x61705f6f
   2cba8:	202c6b72 	.word	0x202c6b72
   2cbac:	74697263 	.word	0x74697263
   2cbb0:	6c616369 	.word	0x6c616369
   2cbb4:	73697020 	.word	0x73697020
   2cbb8:	206e6f74 	.word	0x206e6f74
   2cbbc:	696e696d 	.word	0x696e696d
   2cbc0:	206d756d 	.word	0x206d756d
   2cbc4:	69736f70 	.word	0x69736f70
   2cbc8:	6e6f6974 	.word	0x6e6f6974
   2cbcc:	6d697420 	.word	0x6d697420
   2cbd0:	756f2065 	.word	0x756f2065
   2cbd4:	203d2074 	.word	0x203d2074
   2cbd8:	66322e25 	.word	0x66322e25
   2cbdc:	6e696d20 	.word	0x6e696d20
   2cbe0:	3e3e2073 	.word	0x3e3e2073
   2cbe4:	0000000a 	.word	0x0000000a
   2cbe8:	203c3c0a 	.word	0x203c3c0a
   2cbec:	20535053 	.word	0x20535053
   2cbf0:	6d203a3a 	.word	0x6d203a3a
   2cbf4:	5f65766f 	.word	0x5f65766f
   2cbf8:	705f6f74 	.word	0x705f6f74
   2cbfc:	2c6b7261 	.word	0x2c6b7261
   2cc00:	70654420 	.word	0x70654420
   2cc04:	3d206874 	.word	0x3d206874
   2cc08:	342e2520 	.word	0x342e2520
   2cc0c:	73692066 	.word	0x73692066
   2cc10:	72634020 	.word	0x72634020
   2cc14:	61697469 	.word	0x61697469
   2cc18:	6970206c 	.word	0x6970206c
   2cc1c:	6e6f7473 	.word	0x6e6f7473
   2cc20:	736f7020 	.word	0x736f7020
   2cc24:	6f697469 	.word	0x6f697469
   2cc28:	3e3e206e 	.word	0x3e3e206e
   2cc2c:	0000000a 	.word	0x0000000a
   2cc30:	20535053 	.word	0x20535053
   2cc34:	6d203a3a 	.word	0x6d203a3a
   2cc38:	5f65766f 	.word	0x5f65766f
   2cc3c:	705f6f74 	.word	0x705f6f74
   2cc40:	2c6b7261 	.word	0x2c6b7261
   2cc44:	65725020 	.word	0x65725020
   2cc48:	72757373 	.word	0x72757373
   2cc4c:	65522065 	.word	0x65522065
   2cc50:	65686361 	.word	0x65686361
   2cc54:	203d2064 	.word	0x203d2064
   2cc58:	342e3025 	.word	0x342e3025
   2cc5c:	61622066 	.word	0x61622066
   2cc60:	00000a72 	.word	0x00000a72
   2cc64:	20535053 	.word	0x20535053
   2cc68:	6d203a3a 	.word	0x6d203a3a
   2cc6c:	5f65766f 	.word	0x5f65766f
   2cc70:	705f6f74 	.word	0x705f6f74
   2cc74:	2c6b7261 	.word	0x2c6b7261
   2cc78:	70654420 	.word	0x70654420
   2cc7c:	52206874 	.word	0x52206874
   2cc80:	68636165 	.word	0x68636165
   2cc84:	20206465 	.word	0x20206465
   2cc88:	203d2020 	.word	0x203d2020
   2cc8c:	342e3025 	.word	0x342e3025
   2cc90:	2c6d2066 	.word	0x2c6d2066
   2cc94:	74617220 	.word	0x74617220
   2cc98:	203d2065 	.word	0x203d2065
   2cc9c:	342e3025 	.word	0x342e3025
   2cca0:	252f6d66 	.word	0x252f6d66
   2cca4:	7366312e 	.word	0x7366312e
   2cca8:	0000000a 	.word	0x0000000a
   2ccac:	20535053 	.word	0x20535053
   2ccb0:	6d203a3a 	.word	0x6d203a3a
   2ccb4:	5f65766f 	.word	0x5f65766f
   2ccb8:	705f6f74 	.word	0x705f6f74
   2ccbc:	2c6b7261 	.word	0x2c6b7261
   2ccc0:	61655220 	.word	0x61655220
   2ccc4:	50206863 	.word	0x50206863
   2ccc8:	204b5241 	.word	0x204b5241
   2cccc:	74706544 	.word	0x74706544
   2ccd0:	00000a68 	.word	0x00000a68
   2ccd4:	20535053 	.word	0x20535053
   2ccd8:	6d203a3a 	.word	0x6d203a3a
   2ccdc:	5f65766f 	.word	0x5f65766f
   2cce0:	705f6f74 	.word	0x705f6f74
   2cce4:	2c6b7261 	.word	0x2c6b7261
   2cce8:	6c656420 	.word	0x6c656420
   2ccec:	72656269 	.word	0x72656269
   2ccf0:	6c657461 	.word	0x6c657461
   2ccf4:	74732079 	.word	0x74732079
   2ccf8:	6970706f 	.word	0x6970706f
   2ccfc:	7420676e 	.word	0x7420676e
   2cd00:	50206568 	.word	0x50206568
   2cd04:	6f747369 	.word	0x6f747369
   2cd08:	00000a6e 	.word	0x00000a6e
   2cd0c:	20535053 	.word	0x20535053
   2cd10:	6d203a3a 	.word	0x6d203a3a
   2cd14:	5f65766f 	.word	0x5f65766f
   2cd18:	705f6f74 	.word	0x705f6f74
   2cd1c:	2c6b7261 	.word	0x2c6b7261
   2cd20:	73695020 	.word	0x73695020
   2cd24:	206e6f74 	.word	0x206e6f74
   2cd28:	53555243 	.word	0x53555243
   2cd2c:	45445f48 	.word	0x45445f48
   2cd30:	20485450 	.word	0x20485450
   2cd34:	656d6974 	.word	0x656d6974
   2cd38:	74756f2d 	.word	0x74756f2d
   2cd3c:	6174202c 	.word	0x6174202c
   2cd40:	3e2d6b73 	.word	0x3e2d6b73
   2cd44:	696e6966 	.word	0x696e6966
   2cd48:	64656873 	.word	0x64656873
   2cd4c:	0000000a 	.word	0x0000000a
   2cd50:	20535053 	.word	0x20535053
   2cd54:	6d203a3a 	.word	0x6d203a3a
   2cd58:	5f65766f 	.word	0x5f65766f
   2cd5c:	705f6f74 	.word	0x705f6f74
   2cd60:	2c6b7261 	.word	0x2c6b7261
   2cd64:	73695020 	.word	0x73695020
   2cd68:	206e6f74 	.word	0x206e6f74
   2cd6c:	6b736174 	.word	0x6b736174
   2cd70:	65523e2d 	.word	0x65523e2d
   2cd74:	0a796461 	.word	0x0a796461
   2cd78:	00000000 	.word	0x00000000
   2cd7c:	530a0a0a 	.word	0x530a0a0a
   2cd80:	3a205350 	.word	0x3a205350
   2cd84:	6f6d203a 	.word	0x6f6d203a
   2cd88:	745f6576 	.word	0x745f6576
   2cd8c:	61705f6f 	.word	0x61705f6f
   2cd90:	202c6b72 	.word	0x202c6b72
   2cd94:	203c3c3c 	.word	0x203c3c3c
   2cd98:	53555243 	.word	0x53555243
   2cd9c:	45442048 	.word	0x45442048
   2cda0:	20485450 	.word	0x20485450
   2cda4:	69746361 	.word	0x69746361
   2cda8:	65746176 	.word	0x65746176
   2cdac:	3e3e2064 	.word	0x3e3e2064
   2cdb0:	0a0a0a3e 	.word	0x0a0a0a3e
   2cdb4:	00000000 	.word	0x00000000
   2cdb8:	20535053 	.word	0x20535053
   2cdbc:	6d203a3a 	.word	0x6d203a3a
   2cdc0:	5f65766f 	.word	0x5f65766f
   2cdc4:	705f6f74 	.word	0x705f6f74
   2cdc8:	2c6b7261 	.word	0x2c6b7261
   2cdcc:	65724620 	.word	0x65724620
   2cdd0:	4f545265 	.word	0x4f545265
   2cdd4:	45482053 	.word	0x45482053
   2cdd8:	53205041 	.word	0x53205041
   2cddc:	20455a49 	.word	0x20455a49
   2cde0:	7525203d 	.word	0x7525203d
   2cde4:	74794220 	.word	0x74794220
   2cde8:	0a0a7365 	.word	0x0a0a7365
   2cdec:	00000000 	.word	0x00000000
   2cdf0:	20535053 	.word	0x20535053
   2cdf4:	6d203a3a 	.word	0x6d203a3a
   2cdf8:	5f65766f 	.word	0x5f65766f
   2cdfc:	705f6f74 	.word	0x705f6f74
   2ce00:	2c6b7261 	.word	0x2c6b7261
   2ce04:	73615420 	.word	0x73615420
   2ce08:	663e2d6b 	.word	0x663e2d6b
   2ce0c:	73696e69 	.word	0x73696e69
   2ce10:	0a646568 	.word	0x0a646568
   2ce14:	0000000a 	.word	0x0000000a
   2ce18:	203c3c0a 	.word	0x203c3c0a
   2ce1c:	20535053 	.word	0x20535053
   2ce20:	6d203a3a 	.word	0x6d203a3a
   2ce24:	5f65766f 	.word	0x5f65766f
   2ce28:	705f6f74 	.word	0x705f6f74
   2ce2c:	69666f72 	.word	0x69666f72
   2ce30:	202c656c 	.word	0x202c656c
   2ce34:	74746553 	.word	0x74746553
   2ce38:	20676e69 	.word	0x20676e69
   2ce3c:	66203e2d 	.word	0x66203e2d
   2ce40:	74737269 	.word	0x74737269
   2ce44:	6d697420 	.word	0x6d697420
   2ce48:	6f742065 	.word	0x6f742065
   2ce4c:	6f72705f 	.word	0x6f72705f
   2ce50:	69705f66 	.word	0x69705f66
   2ce54:	6e6f7473 	.word	0x6e6f7473
   2ce58:	6e656c5f 	.word	0x6e656c5f
   2ce5c:	3d687467 	.word	0x3d687467
   2ce60:	66342e25 	.word	0x66342e25
   2ce64:	3e206e69 	.word	0x3e206e69
   2ce68:	00000a3e 	.word	0x00000a3e
   2ce6c:	203c3c0a 	.word	0x203c3c0a
   2ce70:	20535053 	.word	0x20535053
   2ce74:	6d203a3a 	.word	0x6d203a3a
   2ce78:	5f65766f 	.word	0x5f65766f
   2ce7c:	705f6f74 	.word	0x705f6f74
   2ce80:	69666f72 	.word	0x69666f72
   2ce84:	202c656c 	.word	0x202c656c
   2ce88:	676e656c 	.word	0x676e656c
   2ce8c:	755f6874 	.word	0x755f6874
   2ce90:	74616470 	.word	0x74616470
   2ce94:	2e253d65 	.word	0x2e253d65
   2ce98:	6e696634 	.word	0x6e696634
   2ce9c:	70203c20 	.word	0x70203c20
   2cea0:	6f747369 	.word	0x6f747369
   2cea4:	6f70206e 	.word	0x6f70206e
   2cea8:	69746973 	.word	0x69746973
   2ceac:	6d206e6f 	.word	0x6d206e6f
   2ceb0:	6d696e69 	.word	0x6d696e69
   2ceb4:	3e206d75 	.word	0x3e206d75
   2ceb8:	00000a3e 	.word	0x00000a3e
   2cebc:	203c3c0a 	.word	0x203c3c0a
   2cec0:	20535053 	.word	0x20535053
   2cec4:	6d203a3a 	.word	0x6d203a3a
   2cec8:	5f65766f 	.word	0x5f65766f
   2cecc:	705f6f74 	.word	0x705f6f74
   2ced0:	69666f72 	.word	0x69666f72
   2ced4:	202c656c 	.word	0x202c656c
   2ced8:	74746553 	.word	0x74746553
   2cedc:	20676e69 	.word	0x20676e69
   2cee0:	70203e2d 	.word	0x70203e2d
   2cee4:	5f6b7261 	.word	0x5f6b7261
   2cee8:	74736970 	.word	0x74736970
   2ceec:	6c5f6e6f 	.word	0x6c5f6e6f
   2cef0:	74676e65 	.word	0x74676e65
   2cef4:	25282068 	.word	0x25282068
   2cef8:	6966342e 	.word	0x6966342e
   2cefc:	7420296e 	.word	0x7420296e
   2cf00:	6f74206f 	.word	0x6f74206f
   2cf04:	6f72705f 	.word	0x6f72705f
   2cf08:	69705f66 	.word	0x69705f66
   2cf0c:	6e6f7473 	.word	0x6e6f7473
   2cf10:	6e656c5f 	.word	0x6e656c5f
   2cf14:	20687467 	.word	0x20687467
   2cf18:	000a3e3e 	.word	0x000a3e3e
   2cf1c:	203c3c0a 	.word	0x203c3c0a
   2cf20:	20535053 	.word	0x20535053
   2cf24:	6d203a3a 	.word	0x6d203a3a
   2cf28:	5f65766f 	.word	0x5f65766f
   2cf2c:	705f6f74 	.word	0x705f6f74
   2cf30:	69666f72 	.word	0x69666f72
   2cf34:	202c656c 	.word	0x202c656c
   2cf38:	74746553 	.word	0x74746553
   2cf3c:	20676e69 	.word	0x20676e69
   2cf40:	61203e2d 	.word	0x61203e2d
   2cf44:	73756a64 	.word	0x73756a64
   2cf48:	20646574 	.word	0x20646574
   2cf4c:	705f6f74 	.word	0x705f6f74
   2cf50:	5f666f72 	.word	0x5f666f72
   2cf54:	74736970 	.word	0x74736970
   2cf58:	6c5f6e6f 	.word	0x6c5f6e6f
   2cf5c:	74676e65 	.word	0x74676e65
   2cf60:	2e253d68 	.word	0x2e253d68
   2cf64:	6e696634 	.word	0x6e696634
   2cf68:	0a3e3e20 	.word	0x0a3e3e20
   2cf6c:	00000000 	.word	0x00000000
   2cf70:	20535053 	.word	0x20535053
   2cf74:	6d203a3a 	.word	0x6d203a3a
   2cf78:	5f65766f 	.word	0x5f65766f
   2cf7c:	705f6f74 	.word	0x705f6f74
   2cf80:	69666f72 	.word	0x69666f72
   2cf84:	202c656c 	.word	0x202c656c
   2cf88:	74746553 	.word	0x74746553
   2cf8c:	20676e69 	.word	0x20676e69
   2cf90:	44203e2d 	.word	0x44203e2d
   2cf94:	69736e65 	.word	0x69736e65
   2cf98:	253d7974 	.word	0x253d7974
   2cf9c:	2066332e 	.word	0x2066332e
   2cfa0:	6d2f676b 	.word	0x6d2f676b
   2cfa4:	202cb3c2 	.word	0x202cb3c2
   2cfa8:	756c6f56 	.word	0x756c6f56
   2cfac:	253d656d 	.word	0x253d656d
   2cfb0:	6966332e 	.word	0x6966332e
   2cfb4:	2cb3c26e 	.word	0x2cb3c26e
   2cfb8:	6e654c20 	.word	0x6e654c20
   2cfbc:	3d687467 	.word	0x3d687467
   2cfc0:	66342e25 	.word	0x66342e25
   2cfc4:	0a0a6e69 	.word	0x0a0a6e69
   2cfc8:	00000000 	.word	0x00000000
   2cfcc:	20535053 	.word	0x20535053
   2cfd0:	6d203a3a 	.word	0x6d203a3a
   2cfd4:	5f65766f 	.word	0x5f65766f
   2cfd8:	705f6f74 	.word	0x705f6f74
   2cfdc:	69666f72 	.word	0x69666f72
   2cfe0:	202c656c 	.word	0x202c656c
   2cfe4:	74736950 	.word	0x74736950
   2cfe8:	74206e6f 	.word	0x74206e6f
   2cfec:	2d6b7361 	.word	0x2d6b7361
   2cff0:	7463613e 	.word	0x7463613e
   2cff4:	0a657669 	.word	0x0a657669
   2cff8:	00000000 	.word	0x00000000
   2cffc:	20535053 	.word	0x20535053
   2d000:	6d203a3a 	.word	0x6d203a3a
   2d004:	5f65766f 	.word	0x5f65766f
   2d008:	705f6f74 	.word	0x705f6f74
   2d00c:	69666f72 	.word	0x69666f72
   2d010:	202c656c 	.word	0x202c656c
   2d014:	74736950 	.word	0x74736950
   2d018:	74206e6f 	.word	0x74206e6f
   2d01c:	2d656d69 	.word	0x2d656d69
   2d020:	2c74756f 	.word	0x2c74756f
   2d024:	73617420 	.word	0x73617420
   2d028:	663e2d6b 	.word	0x663e2d6b
   2d02c:	73696e69 	.word	0x73696e69
   2d030:	0a646568 	.word	0x0a646568
   2d034:	00000000 	.word	0x00000000
   2d038:	20535053 	.word	0x20535053
   2d03c:	6d203a3a 	.word	0x6d203a3a
   2d040:	5f65766f 	.word	0x5f65766f
   2d044:	705f6f74 	.word	0x705f6f74
   2d048:	69666f72 	.word	0x69666f72
   2d04c:	202c656c 	.word	0x202c656c
   2d050:	74736950 	.word	0x74736950
   2d054:	74206e6f 	.word	0x74206e6f
   2d058:	2d6b7361 	.word	0x2d6b7361
   2d05c:	7375733e 	.word	0x7375733e
   2d060:	646e6570 	.word	0x646e6570
   2d064:	000a6465 	.word	0x000a6465
   2d068:	20535053 	.word	0x20535053
   2d06c:	6d203a3a 	.word	0x6d203a3a
   2d070:	5f65766f 	.word	0x5f65766f
   2d074:	705f6f74 	.word	0x705f6f74
   2d078:	69666f72 	.word	0x69666f72
   2d07c:	202c656c 	.word	0x202c656c
   2d080:	736e6544 	.word	0x736e6544
   2d084:	3d797469 	.word	0x3d797469
   2d088:	66332e25 	.word	0x66332e25
   2d08c:	2f676b20 	.word	0x2f676b20
   2d090:	2cb3c26d 	.word	0x2cb3c26d
   2d094:	6c6f5620 	.word	0x6c6f5620
   2d098:	3d656d75 	.word	0x3d656d75
   2d09c:	66332e25 	.word	0x66332e25
   2d0a0:	b3c26e69 	.word	0xb3c26e69
   2d0a4:	654c202c 	.word	0x654c202c
   2d0a8:	6874676e 	.word	0x6874676e
   2d0ac:	342e253d 	.word	0x342e253d
   2d0b0:	0a6e6966 	.word	0x0a6e6966
   2d0b4:	00000000 	.word	0x00000000
   2d0b8:	20535053 	.word	0x20535053
   2d0bc:	6d203a3a 	.word	0x6d203a3a
   2d0c0:	5f65766f 	.word	0x5f65766f
   2d0c4:	705f6f74 	.word	0x705f6f74
   2d0c8:	69666f72 	.word	0x69666f72
   2d0cc:	202c656c 	.word	0x202c656c
   2d0d0:	74736950 	.word	0x74736950
   2d0d4:	74206e6f 	.word	0x74206e6f
   2d0d8:	2d6b7361 	.word	0x2d6b7361
   2d0dc:	6e69663e 	.word	0x6e69663e
   2d0e0:	65687369 	.word	0x65687369
   2d0e4:	00000a64 	.word	0x00000a64
   2d0e8:	5350530a 	.word	0x5350530a
   2d0ec:	203a3a20 	.word	0x203a3a20
   2d0f0:	65766f6d 	.word	0x65766f6d
   2d0f4:	5f6f745f 	.word	0x5f6f745f
   2d0f8:	666f7270 	.word	0x666f7270
   2d0fc:	2c656c69 	.word	0x2c656c69
   2d100:	203c3c20 	.word	0x203c3c20
   2d104:	74746553 	.word	0x74746553
   2d108:	20676e69 	.word	0x20676e69
   2d10c:	676e654c 	.word	0x676e654c
   2d110:	25206874 	.word	0x25206874
   2d114:	6966342e 	.word	0x6966342e
   2d118:	6f74206e 	.word	0x6f74206e
   2d11c:	73697020 	.word	0x73697020
   2d120:	5f6e6f74 	.word	0x5f6e6f74
   2d124:	625f6e6f 	.word	0x625f6e6f
   2d128:	6f74746f 	.word	0x6f74746f
   2d12c:	656c5f6d 	.word	0x656c5f6d
   2d130:	6874676e 	.word	0x6874676e
   2d134:	72617620 	.word	0x72617620
   2d138:	6c626169 	.word	0x6c626169
   2d13c:	3e3e2065 	.word	0x3e3e2065
   2d140:	00000a0a 	.word	0x00000a0a
   2d144:	20535053 	.word	0x20535053
   2d148:	6d203a3a 	.word	0x6d203a3a
   2d14c:	5f65766f 	.word	0x5f65766f
   2d150:	705f6f74 	.word	0x705f6f74
   2d154:	69666f72 	.word	0x69666f72
   2d158:	202c656c 	.word	0x202c656c
   2d15c:	73657250 	.word	0x73657250
   2d160:	65727573 	.word	0x65727573
   2d164:	25203d20 	.word	0x25203d20
   2d168:	66342e30 	.word	0x66342e30
   2d16c:	72616220 	.word	0x72616220
   2d170:	0000000a 	.word	0x0000000a
   2d174:	20535053 	.word	0x20535053
   2d178:	6d203a3a 	.word	0x6d203a3a
   2d17c:	5f65766f 	.word	0x5f65766f
   2d180:	705f6f74 	.word	0x705f6f74
   2d184:	69666f72 	.word	0x69666f72
   2d188:	202c656c 	.word	0x202c656c
   2d18c:	74706544 	.word	0x74706544
   2d190:	20202068 	.word	0x20202068
   2d194:	25203d20 	.word	0x25203d20
   2d198:	66342e30 	.word	0x66342e30
   2d19c:	202c6d20 	.word	0x202c6d20
   2d1a0:	65746172 	.word	0x65746172
   2d1a4:	25203d20 	.word	0x25203d20
   2d1a8:	66342e30 	.word	0x66342e30
   2d1ac:	2e252f6d 	.word	0x2e252f6d
   2d1b0:	0a736631 	.word	0x0a736631
   2d1b4:	00000000 	.word	0x00000000
   2d1b8:	20535053 	.word	0x20535053
   2d1bc:	6d203a3a 	.word	0x6d203a3a
   2d1c0:	5f65766f 	.word	0x5f65766f
   2d1c4:	705f6f74 	.word	0x705f6f74
   2d1c8:	69666f72 	.word	0x69666f72
   2d1cc:	202c656c 	.word	0x202c656c
   2d1d0:	74706544 	.word	0x74706544
   2d1d4:	76612068 	.word	0x76612068
   2d1d8:	67617265 	.word	0x67617265
   2d1dc:	725f6465 	.word	0x725f6465
   2d1e0:	20657461 	.word	0x20657461
   2d1e4:	6625203d 	.word	0x6625203d
   2d1e8:	6564202c 	.word	0x6564202c
   2d1ec:	61657263 	.word	0x61657263
   2d1f0:	25206573 	.word	0x25206573
   2d1f4:	0a6e6966 	.word	0x0a6e6966
   2d1f8:	00000000 	.word	0x00000000
   2d1fc:	5350530a 	.word	0x5350530a
   2d200:	203a3a20 	.word	0x203a3a20
   2d204:	65766f6d 	.word	0x65766f6d
   2d208:	5f6f745f 	.word	0x5f6f745f
   2d20c:	666f7270 	.word	0x666f7270
   2d210:	2c656c69 	.word	0x2c656c69
   2d214:	50434c20 	.word	0x50434c20
   2d218:	20736920 	.word	0x20736920
   2d21c:	20746f6e 	.word	0x20746f6e
   2d220:	74746968 	.word	0x74746968
   2d224:	20676e69 	.word	0x20676e69
   2d228:	20656874 	.word	0x20656874
   2d22c:	74746f62 	.word	0x74746f62
   2d230:	0a0a6d6f 	.word	0x0a0a6d6f
   2d234:	00000000 	.word	0x00000000
   2d238:	203c3c0a 	.word	0x203c3c0a
   2d23c:	20535053 	.word	0x20535053
   2d240:	6d203a3a 	.word	0x6d203a3a
   2d244:	5f65766f 	.word	0x5f65766f
   2d248:	705f6f74 	.word	0x705f6f74
   2d24c:	69666f72 	.word	0x69666f72
   2d250:	202c656c 	.word	0x202c656c
   2d254:	2050434c 	.word	0x2050434c
   2d258:	73657270 	.word	0x73657270
   2d25c:	62616d75 	.word	0x62616d75
   2d260:	6820796c 	.word	0x6820796c
   2d264:	69747469 	.word	0x69747469
   2d268:	7420676e 	.word	0x7420676e
   2d26c:	62206568 	.word	0x62206568
   2d270:	6f74746f 	.word	0x6f74746f
   2d274:	3e3e206d 	.word	0x3e3e206d
   2d278:	00000a0a 	.word	0x00000a0a
   2d27c:	53203c3c 	.word	0x53203c3c
   2d280:	3a205350 	.word	0x3a205350
   2d284:	6f6d203a 	.word	0x6f6d203a
   2d288:	745f6576 	.word	0x745f6576
   2d28c:	72705f6f 	.word	0x72705f6f
   2d290:	6c69666f 	.word	0x6c69666f
   2d294:	63202c65 	.word	0x63202c65
   2d298:	69746972 	.word	0x69746972
   2d29c:	206c6163 	.word	0x206c6163
   2d2a0:	74736970 	.word	0x74736970
   2d2a4:	6d206e6f 	.word	0x6d206e6f
   2d2a8:	6d696e69 	.word	0x6d696e69
   2d2ac:	70206d75 	.word	0x70206d75
   2d2b0:	7469736f 	.word	0x7469736f
   2d2b4:	206e6f69 	.word	0x206e6f69
   2d2b8:	656d6974 	.word	0x656d6974
   2d2bc:	25203d20 	.word	0x25203d20
   2d2c0:	2066322e 	.word	0x2066322e
   2d2c4:	6f636573 	.word	0x6f636573
   2d2c8:	2073646e 	.word	0x2073646e
   2d2cc:	000a3e3e 	.word	0x000a3e3e
   2d2d0:	53203c3c 	.word	0x53203c3c
   2d2d4:	3a205350 	.word	0x3a205350
   2d2d8:	6f6d203a 	.word	0x6f6d203a
   2d2dc:	745f6576 	.word	0x745f6576
   2d2e0:	72705f6f 	.word	0x72705f6f
   2d2e4:	6c69666f 	.word	0x6c69666f
   2d2e8:	63202c65 	.word	0x63202c65
   2d2ec:	69746972 	.word	0x69746972
   2d2f0:	206c6163 	.word	0x206c6163
   2d2f4:	74736970 	.word	0x74736970
   2d2f8:	6d206e6f 	.word	0x6d206e6f
   2d2fc:	6d696e69 	.word	0x6d696e69
   2d300:	70206d75 	.word	0x70206d75
   2d304:	7469736f 	.word	0x7469736f
   2d308:	206e6f69 	.word	0x206e6f69
   2d30c:	656d6974 	.word	0x656d6974
   2d310:	74756f20 	.word	0x74756f20
   2d314:	25203d20 	.word	0x25203d20
   2d318:	2066322e 	.word	0x2066322e
   2d31c:	736e696d 	.word	0x736e696d
   2d320:	0a3e3e20 	.word	0x0a3e3e20
   2d324:	00000000 	.word	0x00000000
   2d328:	203c3c0a 	.word	0x203c3c0a
   2d32c:	20535053 	.word	0x20535053
   2d330:	6d203a3a 	.word	0x6d203a3a
   2d334:	5f65766f 	.word	0x5f65766f
   2d338:	705f6f74 	.word	0x705f6f74
   2d33c:	69666f72 	.word	0x69666f72
   2d340:	202c656c 	.word	0x202c656c
   2d344:	74706544 	.word	0x74706544
   2d348:	2e253d68 	.word	0x2e253d68
   2d34c:	6d206634 	.word	0x6d206634
   2d350:	20736920 	.word	0x20736920
   2d354:	69726340 	.word	0x69726340
   2d358:	6c616974 	.word	0x6c616974
   2d35c:	73697020 	.word	0x73697020
   2d360:	206e6f74 	.word	0x206e6f74
   2d364:	69736f70 	.word	0x69736f70
   2d368:	6e6f6974 	.word	0x6e6f6974
   2d36c:	0a3e3e20 	.word	0x0a3e3e20
   2d370:	00000000 	.word	0x00000000
   2d374:	20535053 	.word	0x20535053
   2d378:	6d203a3a 	.word	0x6d203a3a
   2d37c:	5f65766f 	.word	0x5f65766f
   2d380:	705f6f74 	.word	0x705f6f74
   2d384:	69666f72 	.word	0x69666f72
   2d388:	202c656c 	.word	0x202c656c
   2d38c:	73657250 	.word	0x73657250
   2d390:	65727573 	.word	0x65727573
   2d394:	61655220 	.word	0x61655220
   2d398:	64656863 	.word	0x64656863
   2d39c:	25203d20 	.word	0x25203d20
   2d3a0:	66342e30 	.word	0x66342e30
   2d3a4:	72616220 	.word	0x72616220
   2d3a8:	0000000a 	.word	0x0000000a
   2d3ac:	20535053 	.word	0x20535053
   2d3b0:	6d203a3a 	.word	0x6d203a3a
   2d3b4:	5f65766f 	.word	0x5f65766f
   2d3b8:	705f6f74 	.word	0x705f6f74
   2d3bc:	69666f72 	.word	0x69666f72
   2d3c0:	202c656c 	.word	0x202c656c
   2d3c4:	74706544 	.word	0x74706544
   2d3c8:	65522068 	.word	0x65522068
   2d3cc:	65686361 	.word	0x65686361
   2d3d0:	20202064 	.word	0x20202064
   2d3d4:	25203d20 	.word	0x25203d20
   2d3d8:	66342e30 	.word	0x66342e30
   2d3dc:	202c6d20 	.word	0x202c6d20
   2d3e0:	65746172 	.word	0x65746172
   2d3e4:	25203d20 	.word	0x25203d20
   2d3e8:	66342e30 	.word	0x66342e30
   2d3ec:	2e252f6d 	.word	0x2e252f6d
   2d3f0:	0a736631 	.word	0x0a736631
   2d3f4:	00000000 	.word	0x00000000
   2d3f8:	20535053 	.word	0x20535053
   2d3fc:	6d203a3a 	.word	0x6d203a3a
   2d400:	5f65766f 	.word	0x5f65766f
   2d404:	705f6f74 	.word	0x705f6f74
   2d408:	69666f72 	.word	0x69666f72
   2d40c:	202c656c 	.word	0x202c656c
   2d410:	63616552 	.word	0x63616552
   2d414:	6f502068 	.word	0x6f502068
   2d418:	6c696672 	.word	0x6c696672
   2d41c:	65442065 	.word	0x65442065
   2d420:	0a687470 	.word	0x0a687470
   2d424:	00000000 	.word	0x00000000
   2d428:	20535053 	.word	0x20535053
   2d42c:	6d203a3a 	.word	0x6d203a3a
   2d430:	5f65766f 	.word	0x5f65766f
   2d434:	705f6f74 	.word	0x705f6f74
   2d438:	69666f72 	.word	0x69666f72
   2d43c:	202c656c 	.word	0x202c656c
   2d440:	696c6564 	.word	0x696c6564
   2d444:	61726562 	.word	0x61726562
   2d448:	796c6574 	.word	0x796c6574
   2d44c:	6f747320 	.word	0x6f747320
   2d450:	6e697070 	.word	0x6e697070
   2d454:	68742067 	.word	0x68742067
   2d458:	69502065 	.word	0x69502065
   2d45c:	6e6f7473 	.word	0x6e6f7473
   2d460:	0000000a 	.word	0x0000000a
   2d464:	20535053 	.word	0x20535053
   2d468:	6d203a3a 	.word	0x6d203a3a
   2d46c:	5f65766f 	.word	0x5f65766f
   2d470:	705f6f74 	.word	0x705f6f74
   2d474:	6966726f 	.word	0x6966726f
   2d478:	202c656c 	.word	0x202c656c
   2d47c:	74736950 	.word	0x74736950
   2d480:	74206e6f 	.word	0x74206e6f
   2d484:	2d6b7361 	.word	0x2d6b7361
   2d488:	7463613e 	.word	0x7463613e
   2d48c:	0a657669 	.word	0x0a657669
   2d490:	00000000 	.word	0x00000000
   2d494:	20535053 	.word	0x20535053
   2d498:	6d203a3a 	.word	0x6d203a3a
   2d49c:	5f65766f 	.word	0x5f65766f
   2d4a0:	705f6f74 	.word	0x705f6f74
   2d4a4:	69666f72 	.word	0x69666f72
   2d4a8:	202c656c 	.word	0x202c656c
   2d4ac:	74736950 	.word	0x74736950
   2d4b0:	43206e6f 	.word	0x43206e6f
   2d4b4:	48535552 	.word	0x48535552
   2d4b8:	5045445f 	.word	0x5045445f
   2d4bc:	74204854 	.word	0x74204854
   2d4c0:	2d656d69 	.word	0x2d656d69
   2d4c4:	2c74756f 	.word	0x2c74756f
   2d4c8:	73617420 	.word	0x73617420
   2d4cc:	663e2d6b 	.word	0x663e2d6b
   2d4d0:	73696e69 	.word	0x73696e69
   2d4d4:	0a646568 	.word	0x0a646568
   2d4d8:	00000000 	.word	0x00000000
   2d4dc:	20535053 	.word	0x20535053
   2d4e0:	6d203a3a 	.word	0x6d203a3a
   2d4e4:	5f65766f 	.word	0x5f65766f
   2d4e8:	705f6f74 	.word	0x705f6f74
   2d4ec:	69666f72 	.word	0x69666f72
   2d4f0:	202c656c 	.word	0x202c656c
   2d4f4:	74736950 	.word	0x74736950
   2d4f8:	74206e6f 	.word	0x74206e6f
   2d4fc:	2d6b7361 	.word	0x2d6b7361
   2d500:	6165723e 	.word	0x6165723e
   2d504:	000a7964 	.word	0x000a7964
   2d508:	20535053 	.word	0x20535053
   2d50c:	6d203a3a 	.word	0x6d203a3a
   2d510:	5f65766f 	.word	0x5f65766f
   2d514:	705f6f74 	.word	0x705f6f74
   2d518:	6966726f 	.word	0x6966726f
   2d51c:	202c656c 	.word	0x202c656c
   2d520:	74736950 	.word	0x74736950
   2d524:	74206e6f 	.word	0x74206e6f
   2d528:	2d6b7361 	.word	0x2d6b7361
   2d52c:	7375733e 	.word	0x7375733e
   2d530:	646e6570 	.word	0x646e6570
   2d534:	000a6465 	.word	0x000a6465
   2d538:	20535053 	.word	0x20535053
   2d53c:	6d203a3a 	.word	0x6d203a3a
   2d540:	5f65766f 	.word	0x5f65766f
   2d544:	705f6f74 	.word	0x705f6f74
   2d548:	6966726f 	.word	0x6966726f
   2d54c:	202c656c 	.word	0x202c656c
   2d550:	736e6544 	.word	0x736e6544
   2d554:	3d797469 	.word	0x3d797469
   2d558:	66332e25 	.word	0x66332e25
   2d55c:	2f676b20 	.word	0x2f676b20
   2d560:	2cb3c26d 	.word	0x2cb3c26d
   2d564:	6c6f5620 	.word	0x6c6f5620
   2d568:	3d656d75 	.word	0x3d656d75
   2d56c:	66332e25 	.word	0x66332e25
   2d570:	b3c26e69 	.word	0xb3c26e69
   2d574:	654c202c 	.word	0x654c202c
   2d578:	6874676e 	.word	0x6874676e
   2d57c:	342e253d 	.word	0x342e253d
   2d580:	0a6e6966 	.word	0x0a6e6966
   2d584:	00000000 	.word	0x00000000
   2d588:	50530a0a 	.word	0x50530a0a
   2d58c:	3a3a2053 	.word	0x3a3a2053
   2d590:	766f6d20 	.word	0x766f6d20
   2d594:	6f745f65 	.word	0x6f745f65
   2d598:	6f72705f 	.word	0x6f72705f
   2d59c:	656c6966 	.word	0x656c6966
   2d5a0:	3c3c202c 	.word	0x3c3c202c
   2d5a4:	5243203c 	.word	0x5243203c
   2d5a8:	20485355 	.word	0x20485355
   2d5ac:	54504544 	.word	0x54504544
   2d5b0:	63612048 	.word	0x63612048
   2d5b4:	61766974 	.word	0x61766974
   2d5b8:	20646574 	.word	0x20646574
   2d5bc:	0a3e3e3e 	.word	0x0a3e3e3e
   2d5c0:	0000000a 	.word	0x0000000a
   2d5c4:	5350530a 	.word	0x5350530a
   2d5c8:	203a3a20 	.word	0x203a3a20
   2d5cc:	65766f6d 	.word	0x65766f6d
   2d5d0:	5f6f745f 	.word	0x5f6f745f
   2d5d4:	666f7270 	.word	0x666f7270
   2d5d8:	2c656c69 	.word	0x2c656c69
   2d5dc:	65724620 	.word	0x65724620
   2d5e0:	4f545265 	.word	0x4f545265
   2d5e4:	45482053 	.word	0x45482053
   2d5e8:	53205041 	.word	0x53205041
   2d5ec:	20455a49 	.word	0x20455a49
   2d5f0:	7525203d 	.word	0x7525203d
   2d5f4:	74794220 	.word	0x74794220
   2d5f8:	0a0a7365 	.word	0x0a0a7365
   2d5fc:	00000000 	.word	0x00000000
   2d600:	20535053 	.word	0x20535053
   2d604:	6d203a3a 	.word	0x6d203a3a
   2d608:	5f65766f 	.word	0x5f65766f
   2d60c:	705f6f74 	.word	0x705f6f74
   2d610:	69666f72 	.word	0x69666f72
   2d614:	202c656c 	.word	0x202c656c
   2d618:	6b736154 	.word	0x6b736154
   2d61c:	69663e2d 	.word	0x69663e2d
   2d620:	6873696e 	.word	0x6873696e
   2d624:	0a0a6465 	.word	0x0a0a6465
   2d628:	00000000 	.word	0x00000000
   2d62c:	5350530a 	.word	0x5350530a
   2d630:	203a3a20 	.word	0x203a3a20
   2d634:	6b726170 	.word	0x6b726170
   2d638:	203c202c 	.word	0x203c202c
   2d63c:	4b524150 	.word	0x4b524150
   2d640:	4d49545f 	.word	0x4d49545f
   2d644:	49465f45 	.word	0x49465f45
   2d648:	20545352 	.word	0x20545352
   2d64c:	2e25203d 	.word	0x2e25203d
   2d650:	6d206632 	.word	0x6d206632
   2d654:	20736e69 	.word	0x20736e69
   2d658:	000a0a3e 	.word	0x000a0a3e
   2d65c:	5350530a 	.word	0x5350530a
   2d660:	203a3a20 	.word	0x203a3a20
   2d664:	6b726170 	.word	0x6b726170
   2d668:	203c202c 	.word	0x203c202c
   2d66c:	4b524150 	.word	0x4b524150
   2d670:	4d49545f 	.word	0x4d49545f
   2d674:	203d2045 	.word	0x203d2045
   2d678:	66322e25 	.word	0x66322e25
   2d67c:	6e696d20 	.word	0x6e696d20
   2d680:	0a3e2073 	.word	0x0a3e2073
   2d684:	0000000a 	.word	0x0000000a
   2d688:	20535053 	.word	0x20535053
   2d68c:	70203a3a 	.word	0x70203a3a
   2d690:	2c6b7261 	.word	0x2c6b7261
   2d694:	65725020 	.word	0x65725020
   2d698:	72757373 	.word	0x72757373
   2d69c:	20202065 	.word	0x20202065
   2d6a0:	25203d20 	.word	0x25203d20
   2d6a4:	66342e30 	.word	0x66342e30
   2d6a8:	72616220 	.word	0x72616220
   2d6ac:	0000000a 	.word	0x0000000a
   2d6b0:	20535053 	.word	0x20535053
   2d6b4:	70203a3a 	.word	0x70203a3a
   2d6b8:	2c6b7261 	.word	0x2c6b7261
   2d6bc:	70654420 	.word	0x70654420
   2d6c0:	20206874 	.word	0x20206874
   2d6c4:	20202020 	.word	0x20202020
   2d6c8:	25203d20 	.word	0x25203d20
   2d6cc:	66342e30 	.word	0x66342e30
   2d6d0:	202c6d20 	.word	0x202c6d20
   2d6d4:	65746172 	.word	0x65746172
   2d6d8:	25203d20 	.word	0x25203d20
   2d6dc:	66342e30 	.word	0x66342e30
   2d6e0:	2e252f6d 	.word	0x2e252f6d
   2d6e4:	0a736631 	.word	0x0a736631
   2d6e8:	00000000 	.word	0x00000000
   2d6ec:	20535053 	.word	0x20535053
   2d6f0:	70203a3a 	.word	0x70203a3a
   2d6f4:	2c6b7261 	.word	0x2c6b7261
   2d6f8:	6d655420 	.word	0x6d655420
   2d6fc:	61726570 	.word	0x61726570
   2d700:	65727574 	.word	0x65727574
   2d704:	25203d20 	.word	0x25203d20
   2d708:	66342e30 	.word	0x66342e30
   2d70c:	43b0c220 	.word	0x43b0c220
   2d710:	0000000a 	.word	0x0000000a
   2d714:	20535053 	.word	0x20535053
   2d718:	70203a3a 	.word	0x70203a3a
   2d71c:	2c6b7261 	.word	0x2c6b7261
   2d720:	6f704520 	.word	0x6f704520
   2d724:	20206863 	.word	0x20206863
   2d728:	20202020 	.word	0x20202020
   2d72c:	25203d20 	.word	0x25203d20
   2d730:	000a646c 	.word	0x000a646c
   2d734:	20535053 	.word	0x20535053
   2d738:	70203a3a 	.word	0x70203a3a
   2d73c:	2c6b7261 	.word	0x2c6b7261
   2d740:	65725020 	.word	0x65725020
   2d744:	72757373 	.word	0x72757373
   2d748:	61562065 	.word	0x61562065
   2d74c:	6e616972 	.word	0x6e616972
   2d750:	3d206563 	.word	0x3d206563
   2d754:	2e302520 	.word	0x2e302520
   2d758:	202c6634 	.word	0x202c6634
   2d75c:	5f647453 	.word	0x5f647453
   2d760:	20766944 	.word	0x20766944
   2d764:	3025203d 	.word	0x3025203d
   2d768:	0a66342e 	.word	0x0a66342e
   2d76c:	00000000 	.word	0x00000000
   2d770:	20535053 	.word	0x20535053
   2d774:	70203a3a 	.word	0x70203a3a
   2d778:	2c6b7261 	.word	0x2c6b7261
   2d77c:	6d655420 	.word	0x6d655420
   2d780:	61726570 	.word	0x61726570
   2d784:	65727574 	.word	0x65727574
   2d788:	72615620 	.word	0x72615620
   2d78c:	636e6169 	.word	0x636e6169
   2d790:	203d2065 	.word	0x203d2065
   2d794:	342e3025 	.word	0x342e3025
   2d798:	53202c66 	.word	0x53202c66
   2d79c:	445f6474 	.word	0x445f6474
   2d7a0:	3d207669 	.word	0x3d207669
   2d7a4:	2e302520 	.word	0x2e302520
   2d7a8:	000a6634 	.word	0x000a6634
   2d7ac:	20535053 	.word	0x20535053
   2d7b0:	70203a3a 	.word	0x70203a3a
   2d7b4:	2c6b7261 	.word	0x2c6b7261
   2d7b8:	70654420 	.word	0x70654420
   2d7bc:	52206874 	.word	0x52206874
   2d7c0:	20657461 	.word	0x20657461
   2d7c4:	69736f50 	.word	0x69736f50
   2d7c8:	65766974 	.word	0x65766974
   2d7cc:	7661202c 	.word	0x7661202c
   2d7d0:	67617265 	.word	0x67617265
   2d7d4:	725f6465 	.word	0x725f6465
   2d7d8:	3d657461 	.word	0x3d657461
   2d7dc:	202c6625 	.word	0x202c6625
   2d7e0:	72636e69 	.word	0x72636e69
   2d7e4:	65736165 	.word	0x65736165
   2d7e8:	69662520 	.word	0x69662520
   2d7ec:	6c202c6e 	.word	0x6c202c6e
   2d7f0:	74676e65 	.word	0x74676e65
   2d7f4:	70755f68 	.word	0x70755f68
   2d7f8:	65746164 	.word	0x65746164
   2d7fc:	342e253d 	.word	0x342e253d
   2d800:	0a6e6966 	.word	0x0a6e6966
   2d804:	00000000 	.word	0x00000000
   2d808:	203c3c0a 	.word	0x203c3c0a
   2d80c:	20535053 	.word	0x20535053
   2d810:	70203a3a 	.word	0x70203a3a
   2d814:	2c6b7261 	.word	0x2c6b7261
   2d818:	70654420 	.word	0x70654420
   2d81c:	253d6874 	.word	0x253d6874
   2d820:	2066342e 	.word	0x2066342e
   2d824:	40207369 	.word	0x40207369
   2d828:	74697263 	.word	0x74697263
   2d82c:	206c6169 	.word	0x206c6169
   2d830:	74736970 	.word	0x74736970
   2d834:	70206e6f 	.word	0x70206e6f
   2d838:	7469736f 	.word	0x7469736f
   2d83c:	206e6f69 	.word	0x206e6f69
   2d840:	000a3e3e 	.word	0x000a3e3e
   2d844:	20535053 	.word	0x20535053
   2d848:	70203a3a 	.word	0x70203a3a
   2d84c:	2c6b7261 	.word	0x2c6b7261
   2d850:	70654420 	.word	0x70654420
   2d854:	52206874 	.word	0x52206874
   2d858:	20657461 	.word	0x20657461
   2d85c:	6167654e 	.word	0x6167654e
   2d860:	65766974 	.word	0x65766974
   2d864:	7661202c 	.word	0x7661202c
   2d868:	67617265 	.word	0x67617265
   2d86c:	725f6465 	.word	0x725f6465
   2d870:	3d657461 	.word	0x3d657461
   2d874:	202c6625 	.word	0x202c6625
   2d878:	72636564 	.word	0x72636564
   2d87c:	65736165 	.word	0x65736165
   2d880:	69662520 	.word	0x69662520
   2d884:	6c202c6e 	.word	0x6c202c6e
   2d888:	74676e65 	.word	0x74676e65
   2d88c:	70755f68 	.word	0x70755f68
   2d890:	65746164 	.word	0x65746164
   2d894:	342e253d 	.word	0x342e253d
   2d898:	0a6e6966 	.word	0x0a6e6966
   2d89c:	00000000 	.word	0x00000000
   2d8a0:	203c3c0a 	.word	0x203c3c0a
   2d8a4:	20535053 	.word	0x20535053
   2d8a8:	70203a3a 	.word	0x70203a3a
   2d8ac:	2c6b7261 	.word	0x2c6b7261
   2d8b0:	6e656c20 	.word	0x6e656c20
   2d8b4:	5f687467 	.word	0x5f687467
   2d8b8:	61647075 	.word	0x61647075
   2d8bc:	253d6574 	.word	0x253d6574
   2d8c0:	6966342e 	.word	0x6966342e
   2d8c4:	203c206e 	.word	0x203c206e
   2d8c8:	74736970 	.word	0x74736970
   2d8cc:	70206e6f 	.word	0x70206e6f
   2d8d0:	7469736f 	.word	0x7469736f
   2d8d4:	206e6f69 	.word	0x206e6f69
   2d8d8:	696e696d 	.word	0x696e696d
   2d8dc:	206d756d 	.word	0x206d756d
   2d8e0:	000a3e3e 	.word	0x000a3e3e
   2d8e4:	20535053 	.word	0x20535053
   2d8e8:	70203a3a 	.word	0x70203a3a
   2d8ec:	2c6b7261 	.word	0x2c6b7261
   2d8f0:	70654420 	.word	0x70654420
   2d8f4:	52206874 	.word	0x52206874
   2d8f8:	20657461 	.word	0x20657461
   2d8fc:	69736f50 	.word	0x69736f50
   2d900:	65766974 	.word	0x65766974
   2d904:	7661202c 	.word	0x7661202c
   2d908:	67617265 	.word	0x67617265
   2d90c:	725f6465 	.word	0x725f6465
   2d910:	3d657461 	.word	0x3d657461
   2d914:	202c6625 	.word	0x202c6625
   2d918:	72636564 	.word	0x72636564
   2d91c:	65736165 	.word	0x65736165
   2d920:	69662520 	.word	0x69662520
   2d924:	6c202c6e 	.word	0x6c202c6e
   2d928:	74676e65 	.word	0x74676e65
   2d92c:	70755f68 	.word	0x70755f68
   2d930:	65746164 	.word	0x65746164
   2d934:	342e253d 	.word	0x342e253d
   2d938:	0a6e6966 	.word	0x0a6e6966
   2d93c:	00000000 	.word	0x00000000
   2d940:	20535053 	.word	0x20535053
   2d944:	70203a3a 	.word	0x70203a3a
   2d948:	2c6b7261 	.word	0x2c6b7261
   2d94c:	73695020 	.word	0x73695020
   2d950:	206e6f74 	.word	0x206e6f74
   2d954:	6b736174 	.word	0x6b736174
   2d958:	63613e2d 	.word	0x63613e2d
   2d95c:	65766974 	.word	0x65766974
   2d960:	0000000a 	.word	0x0000000a
   2d964:	20535053 	.word	0x20535053
   2d968:	70203a3a 	.word	0x70203a3a
   2d96c:	2c6b7261 	.word	0x2c6b7261
   2d970:	73695020 	.word	0x73695020
   2d974:	206e6f74 	.word	0x206e6f74
   2d978:	656d6974 	.word	0x656d6974
   2d97c:	74756f2d 	.word	0x74756f2d
   2d980:	6174202c 	.word	0x6174202c
   2d984:	3e2d6b73 	.word	0x3e2d6b73
   2d988:	696e6966 	.word	0x696e6966
   2d98c:	64656873 	.word	0x64656873
   2d990:	0000000a 	.word	0x0000000a
   2d994:	20535053 	.word	0x20535053
   2d998:	70203a3a 	.word	0x70203a3a
   2d99c:	2c6b7261 	.word	0x2c6b7261
   2d9a0:	73695020 	.word	0x73695020
   2d9a4:	206e6f74 	.word	0x206e6f74
   2d9a8:	6b736174 	.word	0x6b736174
   2d9ac:	75733e2d 	.word	0x75733e2d
   2d9b0:	6e657073 	.word	0x6e657073
   2d9b4:	0a646564 	.word	0x0a646564
   2d9b8:	00000000 	.word	0x00000000
   2d9bc:	20535053 	.word	0x20535053
   2d9c0:	70203a3a 	.word	0x70203a3a
   2d9c4:	2c6b7261 	.word	0x2c6b7261
   2d9c8:	73695020 	.word	0x73695020
   2d9cc:	206e6f74 	.word	0x206e6f74
   2d9d0:	53555243 	.word	0x53555243
   2d9d4:	45445f48 	.word	0x45445f48
   2d9d8:	20485450 	.word	0x20485450
   2d9dc:	656d6974 	.word	0x656d6974
   2d9e0:	74756f2d 	.word	0x74756f2d
   2d9e4:	6174202c 	.word	0x6174202c
   2d9e8:	3e2d6b73 	.word	0x3e2d6b73
   2d9ec:	696e6966 	.word	0x696e6966
   2d9f0:	64656873 	.word	0x64656873
   2d9f4:	0000000a 	.word	0x0000000a
   2d9f8:	20535053 	.word	0x20535053
   2d9fc:	70203a3a 	.word	0x70203a3a
   2da00:	2c6b7261 	.word	0x2c6b7261
   2da04:	73695020 	.word	0x73695020
   2da08:	206e6f74 	.word	0x206e6f74
   2da0c:	6b736174 	.word	0x6b736174
   2da10:	65523e2d 	.word	0x65523e2d
   2da14:	0a796461 	.word	0x0a796461
   2da18:	00000000 	.word	0x00000000
   2da1c:	20535053 	.word	0x20535053
   2da20:	70203a3a 	.word	0x70203a3a
   2da24:	2c6b7261 	.word	0x2c6b7261
   2da28:	6e654420 	.word	0x6e654420
   2da2c:	79746973 	.word	0x79746973
   2da30:	332e253d 	.word	0x332e253d
   2da34:	676b2066 	.word	0x676b2066
   2da38:	b3c26d2f 	.word	0xb3c26d2f
   2da3c:	6f56202c 	.word	0x6f56202c
   2da40:	656d756c 	.word	0x656d756c
   2da44:	332e253d 	.word	0x332e253d
   2da48:	c26e6966 	.word	0xc26e6966
   2da4c:	4c202cb3 	.word	0x4c202cb3
   2da50:	74676e65 	.word	0x74676e65
   2da54:	2e253d68 	.word	0x2e253d68
   2da58:	6e696634 	.word	0x6e696634
   2da5c:	0000000a 	.word	0x0000000a
   2da60:	20535053 	.word	0x20535053
   2da64:	70203a3a 	.word	0x70203a3a
   2da68:	2c6b7261 	.word	0x2c6b7261
   2da6c:	73695020 	.word	0x73695020
   2da70:	206e6f74 	.word	0x206e6f74
   2da74:	6b736174 	.word	0x6b736174
   2da78:	69663e2d 	.word	0x69663e2d
   2da7c:	6873696e 	.word	0x6873696e
   2da80:	000a6465 	.word	0x000a6465
   2da84:	20535053 	.word	0x20535053
   2da88:	70203a3a 	.word	0x70203a3a
   2da8c:	2c6b7261 	.word	0x2c6b7261
   2da90:	6c656420 	.word	0x6c656420
   2da94:	72656269 	.word	0x72656269
   2da98:	6c657461 	.word	0x6c657461
   2da9c:	74732079 	.word	0x74732079
   2daa0:	6970706f 	.word	0x6970706f
   2daa4:	7420676e 	.word	0x7420676e
   2daa8:	50206568 	.word	0x50206568
   2daac:	6f747369 	.word	0x6f747369
   2dab0:	00000a6e 	.word	0x00000a6e
   2dab4:	530a0a0a 	.word	0x530a0a0a
   2dab8:	3a205350 	.word	0x3a205350
   2dabc:	6170203a 	.word	0x6170203a
   2dac0:	202c6b72 	.word	0x202c6b72
   2dac4:	203c3c3c 	.word	0x203c3c3c
   2dac8:	53555243 	.word	0x53555243
   2dacc:	45442048 	.word	0x45442048
   2dad0:	20485450 	.word	0x20485450
   2dad4:	69746361 	.word	0x69746361
   2dad8:	65746176 	.word	0x65746176
   2dadc:	3e3e2064 	.word	0x3e3e2064
   2dae0:	0a0a0a3e 	.word	0x0a0a0a3e
   2dae4:	00000000 	.word	0x00000000
   2dae8:	50530a0a 	.word	0x50530a0a
   2daec:	3a3a2053 	.word	0x3a3a2053
   2daf0:	72617020 	.word	0x72617020
   2daf4:	3c202c6b 	.word	0x3c202c6b
   2daf8:	6552203c 	.word	0x6552203c
   2dafc:	65686361 	.word	0x65686361
   2db00:	616d2064 	.word	0x616d2064
   2db04:	756d6978 	.word	0x756d6978
   2db08:	6150206d 	.word	0x6150206d
   2db0c:	44206b72 	.word	0x44206b72
   2db10:	68747065 	.word	0x68747065
   2db14:	0a3e3e20 	.word	0x0a3e3e20
   2db18:	0000000a 	.word	0x0000000a
   2db1c:	50530a0a 	.word	0x50530a0a
   2db20:	3a3a2053 	.word	0x3a3a2053
   2db24:	72617020 	.word	0x72617020
   2db28:	3c202c6b 	.word	0x3c202c6b
   2db2c:	6954203c 	.word	0x6954203c
   2db30:	2072656d 	.word	0x2072656d
   2db34:	2074756f 	.word	0x2074756f
   2db38:	6d206625 	.word	0x6d206625
   2db3c:	20736e69 	.word	0x20736e69
   2db40:	0a0a3e3e 	.word	0x0a0a3e3e
   2db44:	00000000 	.word	0x00000000
   2db48:	5350530a 	.word	0x5350530a
   2db4c:	203a3a20 	.word	0x203a3a20
   2db50:	6b726170 	.word	0x6b726170
   2db54:	7246202c 	.word	0x7246202c
   2db58:	54526565 	.word	0x54526565
   2db5c:	4820534f 	.word	0x4820534f
   2db60:	20504145 	.word	0x20504145
   2db64:	455a4953 	.word	0x455a4953
   2db68:	25203d20 	.word	0x25203d20
   2db6c:	79422075 	.word	0x79422075
   2db70:	0a736574 	.word	0x0a736574
   2db74:	0000000a 	.word	0x0000000a
   2db78:	20535053 	.word	0x20535053
   2db7c:	70203a3a 	.word	0x70203a3a
   2db80:	2c6b7261 	.word	0x2c6b7261
   2db84:	73615420 	.word	0x73615420
   2db88:	663e2d6b 	.word	0x663e2d6b
   2db8c:	73696e69 	.word	0x73696e69
   2db90:	0a646568 	.word	0x0a646568
   2db94:	0000000a 	.word	0x0000000a
   2db98:	203c3c0a 	.word	0x203c3c0a
   2db9c:	20535053 	.word	0x20535053
   2dba0:	70203a3a 	.word	0x70203a3a
   2dba4:	69666f72 	.word	0x69666f72
   2dba8:	202c656c 	.word	0x202c656c
   2dbac:	74746553 	.word	0x74746553
   2dbb0:	20676e69 	.word	0x20676e69
   2dbb4:	66203e2d 	.word	0x66203e2d
   2dbb8:	74737269 	.word	0x74737269
   2dbbc:	6d697420 	.word	0x6d697420
   2dbc0:	72702065 	.word	0x72702065
   2dbc4:	705f666f 	.word	0x705f666f
   2dbc8:	6f747369 	.word	0x6f747369
   2dbcc:	656c5f6e 	.word	0x656c5f6e
   2dbd0:	6874676e 	.word	0x6874676e
   2dbd4:	342e253d 	.word	0x342e253d
   2dbd8:	3e3e2066 	.word	0x3e3e2066
   2dbdc:	0000000a 	.word	0x0000000a
   2dbe0:	203c3c0a 	.word	0x203c3c0a
   2dbe4:	20535053 	.word	0x20535053
   2dbe8:	70203a3a 	.word	0x70203a3a
   2dbec:	69666f72 	.word	0x69666f72
   2dbf0:	202c656c 	.word	0x202c656c
   2dbf4:	676e656c 	.word	0x676e656c
   2dbf8:	755f6874 	.word	0x755f6874
   2dbfc:	74616470 	.word	0x74616470
   2dc00:	2e253d65 	.word	0x2e253d65
   2dc04:	6e696634 	.word	0x6e696634
   2dc08:	70203c20 	.word	0x70203c20
   2dc0c:	6f747369 	.word	0x6f747369
   2dc10:	6f70206e 	.word	0x6f70206e
   2dc14:	69746973 	.word	0x69746973
   2dc18:	6d206e6f 	.word	0x6d206e6f
   2dc1c:	6d696e69 	.word	0x6d696e69
   2dc20:	3e206d75 	.word	0x3e206d75
   2dc24:	00000a3e 	.word	0x00000a3e
   2dc28:	203c3c0a 	.word	0x203c3c0a
   2dc2c:	20535053 	.word	0x20535053
   2dc30:	70203a3a 	.word	0x70203a3a
   2dc34:	69666f72 	.word	0x69666f72
   2dc38:	202c656c 	.word	0x202c656c
   2dc3c:	74746553 	.word	0x74746553
   2dc40:	20676e69 	.word	0x20676e69
   2dc44:	61203e2d 	.word	0x61203e2d
   2dc48:	73756a64 	.word	0x73756a64
   2dc4c:	20646574 	.word	0x20646574
   2dc50:	666f7270 	.word	0x666f7270
   2dc54:	7369705f 	.word	0x7369705f
   2dc58:	5f6e6f74 	.word	0x5f6e6f74
   2dc5c:	676e656c 	.word	0x676e656c
   2dc60:	253d6874 	.word	0x253d6874
   2dc64:	2066342e 	.word	0x2066342e
   2dc68:	000a3e3e 	.word	0x000a3e3e
   2dc6c:	20535053 	.word	0x20535053
   2dc70:	70203a3a 	.word	0x70203a3a
   2dc74:	69666f72 	.word	0x69666f72
   2dc78:	202c656c 	.word	0x202c656c
   2dc7c:	74746553 	.word	0x74746553
   2dc80:	20676e69 	.word	0x20676e69
   2dc84:	44203e2d 	.word	0x44203e2d
   2dc88:	69736e65 	.word	0x69736e65
   2dc8c:	253d7974 	.word	0x253d7974
   2dc90:	2066332e 	.word	0x2066332e
   2dc94:	6d2f676b 	.word	0x6d2f676b
   2dc98:	202cb3c2 	.word	0x202cb3c2
   2dc9c:	756c6f56 	.word	0x756c6f56
   2dca0:	253d656d 	.word	0x253d656d
   2dca4:	6966332e 	.word	0x6966332e
   2dca8:	2cb3c26e 	.word	0x2cb3c26e
   2dcac:	6e654c20 	.word	0x6e654c20
   2dcb0:	3d687467 	.word	0x3d687467
   2dcb4:	66342e25 	.word	0x66342e25
   2dcb8:	0a0a6e69 	.word	0x0a0a6e69
   2dcbc:	00000000 	.word	0x00000000
   2dcc0:	20535053 	.word	0x20535053
   2dcc4:	70203a3a 	.word	0x70203a3a
   2dcc8:	69666f72 	.word	0x69666f72
   2dccc:	202c656c 	.word	0x202c656c
   2dcd0:	74736950 	.word	0x74736950
   2dcd4:	74206e6f 	.word	0x74206e6f
   2dcd8:	2d6b7361 	.word	0x2d6b7361
   2dcdc:	7463613e 	.word	0x7463613e
   2dce0:	0a657669 	.word	0x0a657669
   2dce4:	00000000 	.word	0x00000000
   2dce8:	20535053 	.word	0x20535053
   2dcec:	70203a3a 	.word	0x70203a3a
   2dcf0:	69666f72 	.word	0x69666f72
   2dcf4:	202c656c 	.word	0x202c656c
   2dcf8:	74736950 	.word	0x74736950
   2dcfc:	74206e6f 	.word	0x74206e6f
   2dd00:	2d656d69 	.word	0x2d656d69
   2dd04:	2c74756f 	.word	0x2c74756f
   2dd08:	73617420 	.word	0x73617420
   2dd0c:	663e2d6b 	.word	0x663e2d6b
   2dd10:	73696e69 	.word	0x73696e69
   2dd14:	0a646568 	.word	0x0a646568
   2dd18:	00000000 	.word	0x00000000
   2dd1c:	20535053 	.word	0x20535053
   2dd20:	70203a3a 	.word	0x70203a3a
   2dd24:	69666f72 	.word	0x69666f72
   2dd28:	202c656c 	.word	0x202c656c
   2dd2c:	74736950 	.word	0x74736950
   2dd30:	74206e6f 	.word	0x74206e6f
   2dd34:	2d6b7361 	.word	0x2d6b7361
   2dd38:	7375733e 	.word	0x7375733e
   2dd3c:	646e6570 	.word	0x646e6570
   2dd40:	000a6465 	.word	0x000a6465
   2dd44:	20535053 	.word	0x20535053
   2dd48:	70203a3a 	.word	0x70203a3a
   2dd4c:	69666f72 	.word	0x69666f72
   2dd50:	202c656c 	.word	0x202c656c
   2dd54:	74736950 	.word	0x74736950
   2dd58:	74206e6f 	.word	0x74206e6f
   2dd5c:	2d6b7361 	.word	0x2d6b7361
   2dd60:	6e69663e 	.word	0x6e69663e
   2dd64:	65687369 	.word	0x65687369
   2dd68:	00000a64 	.word	0x00000a64
   2dd6c:	20535053 	.word	0x20535053
   2dd70:	70203a3a 	.word	0x70203a3a
   2dd74:	69666f72 	.word	0x69666f72
   2dd78:	202c656c 	.word	0x202c656c
   2dd7c:	736e6544 	.word	0x736e6544
   2dd80:	3d797469 	.word	0x3d797469
   2dd84:	66332e25 	.word	0x66332e25
   2dd88:	2f676b20 	.word	0x2f676b20
   2dd8c:	2cb3c26d 	.word	0x2cb3c26d
   2dd90:	6c6f5620 	.word	0x6c6f5620
   2dd94:	3d656d75 	.word	0x3d656d75
   2dd98:	66332e25 	.word	0x66332e25
   2dd9c:	b3c26e69 	.word	0xb3c26e69
   2dda0:	654c202c 	.word	0x654c202c
   2dda4:	6874676e 	.word	0x6874676e
   2dda8:	342e253d 	.word	0x342e253d
   2ddac:	0a6e6966 	.word	0x0a6e6966
   2ddb0:	00000000 	.word	0x00000000
   2ddb4:	20535053 	.word	0x20535053
   2ddb8:	70203a3a 	.word	0x70203a3a
   2ddbc:	69666f72 	.word	0x69666f72
   2ddc0:	202c656c 	.word	0x202c656c
   2ddc4:	73657250 	.word	0x73657250
   2ddc8:	65727573 	.word	0x65727573
   2ddcc:	20202020 	.word	0x20202020
   2ddd0:	3025203d 	.word	0x3025203d
   2ddd4:	2066342e 	.word	0x2066342e
   2ddd8:	0a726162 	.word	0x0a726162
   2dddc:	00000000 	.word	0x00000000
   2dde0:	20535053 	.word	0x20535053
   2dde4:	70203a3a 	.word	0x70203a3a
   2dde8:	69666f72 	.word	0x69666f72
   2ddec:	202c656c 	.word	0x202c656c
   2ddf0:	74706544 	.word	0x74706544
   2ddf4:	20202068 	.word	0x20202068
   2ddf8:	20202020 	.word	0x20202020
   2ddfc:	3025203d 	.word	0x3025203d
   2de00:	2066342e 	.word	0x2066342e
   2de04:	72202c6d 	.word	0x72202c6d
   2de08:	20657461 	.word	0x20657461
   2de0c:	3025203d 	.word	0x3025203d
   2de10:	6d66342e 	.word	0x6d66342e
   2de14:	312e252f 	.word	0x312e252f
   2de18:	000a7366 	.word	0x000a7366
   2de1c:	20535053 	.word	0x20535053
   2de20:	70203a3a 	.word	0x70203a3a
   2de24:	69666f72 	.word	0x69666f72
   2de28:	202c656c 	.word	0x202c656c
   2de2c:	706d6554 	.word	0x706d6554
   2de30:	74617265 	.word	0x74617265
   2de34:	20657275 	.word	0x20657275
   2de38:	3025203d 	.word	0x3025203d
   2de3c:	2066342e 	.word	0x2066342e
   2de40:	0a43b0c2 	.word	0x0a43b0c2
   2de44:	00000000 	.word	0x00000000
   2de48:	20535053 	.word	0x20535053
   2de4c:	70203a3a 	.word	0x70203a3a
   2de50:	69666f72 	.word	0x69666f72
   2de54:	202c656c 	.word	0x202c656c
   2de58:	636f7045 	.word	0x636f7045
   2de5c:	20202068 	.word	0x20202068
   2de60:	20202020 	.word	0x20202020
   2de64:	6c25203d 	.word	0x6c25203d
   2de68:	000a2064 	.word	0x000a2064
   2de6c:	20535053 	.word	0x20535053
   2de70:	70203a3a 	.word	0x70203a3a
   2de74:	69666f72 	.word	0x69666f72
   2de78:	202c656c 	.word	0x202c656c
   2de7c:	666f7270 	.word	0x666f7270
   2de80:	20656c69 	.word	0x20656c69
   2de84:	72617473 	.word	0x72617473
   2de88:	69622074 	.word	0x69622074
   2de8c:	203d206e 	.word	0x203d206e
   2de90:	342e3025 	.word	0x342e3025
   2de94:	61622066 	.word	0x61622066
   2de98:	00000a72 	.word	0x00000a72
   2de9c:	20535053 	.word	0x20535053
   2dea0:	70203a3a 	.word	0x70203a3a
   2dea4:	69666f72 	.word	0x69666f72
   2dea8:	202c656c 	.word	0x202c656c
   2deac:	706d6554 	.word	0x706d6554
   2deb0:	74617265 	.word	0x74617265
   2deb4:	20657275 	.word	0x20657275
   2deb8:	20646e61 	.word	0x20646e61
   2debc:	73657250 	.word	0x73657250
   2dec0:	65727573 	.word	0x65727573
   2dec4:	203e2d20 	.word	0x203e2d20
   2dec8:	626d756e 	.word	0x626d756e
   2decc:	6f207265 	.word	0x6f207265
   2ded0:	61732066 	.word	0x61732066
   2ded4:	656c706d 	.word	0x656c706d
   2ded8:	203d2073 	.word	0x203d2073
   2dedc:	000a7525 	.word	0x000a7525
   2dee0:	20535053 	.word	0x20535053
   2dee4:	70203a3a 	.word	0x70203a3a
   2dee8:	69666f72 	.word	0x69666f72
   2deec:	202c656c 	.word	0x202c656c
   2def0:	74706544 	.word	0x74706544
   2def4:	61522068 	.word	0x61522068
   2def8:	3d206574 	.word	0x3d206574
   2defc:	342e2520 	.word	0x342e2520
   2df00:	69202c66 	.word	0x69202c66
   2df04:	6572636e 	.word	0x6572636e
   2df08:	20657361 	.word	0x20657361
   2df0c:	6e696625 	.word	0x6e696625
   2df10:	0000000a 	.word	0x0000000a
   2df14:	203c3c0a 	.word	0x203c3c0a
   2df18:	20535053 	.word	0x20535053
   2df1c:	70203a3a 	.word	0x70203a3a
   2df20:	69666f72 	.word	0x69666f72
   2df24:	202c656c 	.word	0x202c656c
   2df28:	74706544 	.word	0x74706544
   2df2c:	2e253d68 	.word	0x2e253d68
   2df30:	69206634 	.word	0x69206634
   2df34:	63402073 	.word	0x63402073
   2df38:	69746972 	.word	0x69746972
   2df3c:	206c6163 	.word	0x206c6163
   2df40:	74736970 	.word	0x74736970
   2df44:	70206e6f 	.word	0x70206e6f
   2df48:	7469736f 	.word	0x7469736f
   2df4c:	206e6f69 	.word	0x206e6f69
   2df50:	000a3e3e 	.word	0x000a3e3e
   2df54:	203c3c0a 	.word	0x203c3c0a
   2df58:	20535053 	.word	0x20535053
   2df5c:	70203a3a 	.word	0x70203a3a
   2df60:	69666f72 	.word	0x69666f72
   2df64:	202c656c 	.word	0x202c656c
   2df68:	74697243 	.word	0x74697243
   2df6c:	6c616369 	.word	0x6c616369
   2df70:	70654420 	.word	0x70654420
   2df74:	50206874 	.word	0x50206874
   2df78:	6f747369 	.word	0x6f747369
   2df7c:	6f50206e 	.word	0x6f50206e
   2df80:	69746973 	.word	0x69746973
   2df84:	54206e6f 	.word	0x54206e6f
   2df88:	72656d69 	.word	0x72656d69
   2df8c:	25203d20 	.word	0x25203d20
   2df90:	65732066 	.word	0x65732066
   2df94:	646e6f63 	.word	0x646e6f63
   2df98:	3e3e2073 	.word	0x3e3e2073
   2df9c:	0000000a 	.word	0x0000000a
   2dfa0:	203c3c0a 	.word	0x203c3c0a
   2dfa4:	20535053 	.word	0x20535053
   2dfa8:	70203a3a 	.word	0x70203a3a
   2dfac:	69666f72 	.word	0x69666f72
   2dfb0:	202c656c 	.word	0x202c656c
   2dfb4:	74697243 	.word	0x74697243
   2dfb8:	6c616369 	.word	0x6c616369
   2dfbc:	70654420 	.word	0x70654420
   2dfc0:	50206874 	.word	0x50206874
   2dfc4:	6f747369 	.word	0x6f747369
   2dfc8:	6f50206e 	.word	0x6f50206e
   2dfcc:	69746973 	.word	0x69746973
   2dfd0:	54206e6f 	.word	0x54206e6f
   2dfd4:	20656d69 	.word	0x20656d69
   2dfd8:	2074756f 	.word	0x2074756f
   2dfdc:	6d206625 	.word	0x6d206625
   2dfe0:	20736e69 	.word	0x20736e69
   2dfe4:	000a3e3e 	.word	0x000a3e3e
   2dfe8:	203c3c0a 	.word	0x203c3c0a
   2dfec:	20535053 	.word	0x20535053
   2dff0:	70203a3a 	.word	0x70203a3a
   2dff4:	69666f72 	.word	0x69666f72
   2dff8:	202c656c 	.word	0x202c656c
   2dffc:	74706544 	.word	0x74706544
   2e000:	2e253d68 	.word	0x2e253d68
   2e004:	69206634 	.word	0x69206634
   2e008:	4d402073 	.word	0x4d402073
   2e00c:	6d697861 	.word	0x6d697861
   2e010:	70206d75 	.word	0x70206d75
   2e014:	6f747369 	.word	0x6f747369
   2e018:	6f70206e 	.word	0x6f70206e
   2e01c:	69746973 	.word	0x69746973
   2e020:	3e206e6f 	.word	0x3e206e6f
   2e024:	00000a3e 	.word	0x00000a3e
   2e028:	20535053 	.word	0x20535053
   2e02c:	70203a3a 	.word	0x70203a3a
   2e030:	69666f72 	.word	0x69666f72
   2e034:	202c656c 	.word	0x202c656c
   2e038:	74706544 	.word	0x74706544
   2e03c:	61522068 	.word	0x61522068
   2e040:	3d206574 	.word	0x3d206574
   2e044:	342e2520 	.word	0x342e2520
   2e048:	64202c66 	.word	0x64202c66
   2e04c:	65726365 	.word	0x65726365
   2e050:	20657361 	.word	0x20657361
   2e054:	6e696625 	.word	0x6e696625
   2e058:	0000000a 	.word	0x0000000a
   2e05c:	203c3c0a 	.word	0x203c3c0a
   2e060:	20535053 	.word	0x20535053
   2e064:	70203a3a 	.word	0x70203a3a
   2e068:	69666f72 	.word	0x69666f72
   2e06c:	202c656c 	.word	0x202c656c
   2e070:	74706544 	.word	0x74706544
   2e074:	2e253d68 	.word	0x2e253d68
   2e078:	69206634 	.word	0x69206634
   2e07c:	63402073 	.word	0x63402073
   2e080:	69746972 	.word	0x69746972
   2e084:	70206c61 	.word	0x70206c61
   2e088:	6f747369 	.word	0x6f747369
   2e08c:	6f70206e 	.word	0x6f70206e
   2e090:	69746973 	.word	0x69746973
   2e094:	3e206e6f 	.word	0x3e206e6f
   2e098:	00000a3e 	.word	0x00000a3e
   2e09c:	20535053 	.word	0x20535053
   2e0a0:	70203a3a 	.word	0x70203a3a
   2e0a4:	6966726f 	.word	0x6966726f
   2e0a8:	202c656c 	.word	0x202c656c
   2e0ac:	74736950 	.word	0x74736950
   2e0b0:	74206e6f 	.word	0x74206e6f
   2e0b4:	2d6b7361 	.word	0x2d6b7361
   2e0b8:	7463613e 	.word	0x7463613e
   2e0bc:	0a657669 	.word	0x0a657669
   2e0c0:	00000000 	.word	0x00000000
   2e0c4:	20535053 	.word	0x20535053
   2e0c8:	70203a3a 	.word	0x70203a3a
   2e0cc:	69666f72 	.word	0x69666f72
   2e0d0:	202c656c 	.word	0x202c656c
   2e0d4:	74736950 	.word	0x74736950
   2e0d8:	43206e6f 	.word	0x43206e6f
   2e0dc:	48535552 	.word	0x48535552
   2e0e0:	5045445f 	.word	0x5045445f
   2e0e4:	74204854 	.word	0x74204854
   2e0e8:	2d656d69 	.word	0x2d656d69
   2e0ec:	2c74756f 	.word	0x2c74756f
   2e0f0:	73617420 	.word	0x73617420
   2e0f4:	663e2d6b 	.word	0x663e2d6b
   2e0f8:	73696e69 	.word	0x73696e69
   2e0fc:	0a646568 	.word	0x0a646568
   2e100:	00000000 	.word	0x00000000
   2e104:	20535053 	.word	0x20535053
   2e108:	70203a3a 	.word	0x70203a3a
   2e10c:	69666f72 	.word	0x69666f72
   2e110:	202c656c 	.word	0x202c656c
   2e114:	74736950 	.word	0x74736950
   2e118:	74206e6f 	.word	0x74206e6f
   2e11c:	2d6b7361 	.word	0x2d6b7361
   2e120:	6165723e 	.word	0x6165723e
   2e124:	000a7964 	.word	0x000a7964
   2e128:	20535053 	.word	0x20535053
   2e12c:	70203a3a 	.word	0x70203a3a
   2e130:	6966726f 	.word	0x6966726f
   2e134:	202c656c 	.word	0x202c656c
   2e138:	74736950 	.word	0x74736950
   2e13c:	74206e6f 	.word	0x74206e6f
   2e140:	2d6b7361 	.word	0x2d6b7361
   2e144:	7375733e 	.word	0x7375733e
   2e148:	646e6570 	.word	0x646e6570
   2e14c:	000a6465 	.word	0x000a6465
   2e150:	20535053 	.word	0x20535053
   2e154:	70203a3a 	.word	0x70203a3a
   2e158:	6966726f 	.word	0x6966726f
   2e15c:	202c656c 	.word	0x202c656c
   2e160:	736e6544 	.word	0x736e6544
   2e164:	3d797469 	.word	0x3d797469
   2e168:	66332e25 	.word	0x66332e25
   2e16c:	2f676b20 	.word	0x2f676b20
   2e170:	2cb3c26d 	.word	0x2cb3c26d
   2e174:	6c6f5620 	.word	0x6c6f5620
   2e178:	3d656d75 	.word	0x3d656d75
   2e17c:	66332e25 	.word	0x66332e25
   2e180:	b3c26e69 	.word	0xb3c26e69
   2e184:	654c202c 	.word	0x654c202c
   2e188:	6874676e 	.word	0x6874676e
   2e18c:	342e253d 	.word	0x342e253d
   2e190:	0a6e6966 	.word	0x0a6e6966
   2e194:	00000000 	.word	0x00000000
   2e198:	20535053 	.word	0x20535053
   2e19c:	70203a3a 	.word	0x70203a3a
   2e1a0:	69666f72 	.word	0x69666f72
   2e1a4:	202c656c 	.word	0x202c656c
   2e1a8:	696c6564 	.word	0x696c6564
   2e1ac:	61726562 	.word	0x61726562
   2e1b0:	796c6574 	.word	0x796c6574
   2e1b4:	6f747320 	.word	0x6f747320
   2e1b8:	6e697070 	.word	0x6e697070
   2e1bc:	68742067 	.word	0x68742067
   2e1c0:	69502065 	.word	0x69502065
   2e1c4:	6e6f7473 	.word	0x6e6f7473
   2e1c8:	0000000a 	.word	0x0000000a
   2e1cc:	530a0a0a 	.word	0x530a0a0a
   2e1d0:	3a205350 	.word	0x3a205350
   2e1d4:	7270203a 	.word	0x7270203a
   2e1d8:	6c69666f 	.word	0x6c69666f
   2e1dc:	3c202c65 	.word	0x3c202c65
   2e1e0:	43203c3c 	.word	0x43203c3c
   2e1e4:	48535552 	.word	0x48535552
   2e1e8:	50454420 	.word	0x50454420
   2e1ec:	61204854 	.word	0x61204854
   2e1f0:	76697463 	.word	0x76697463
   2e1f4:	64657461 	.word	0x64657461
   2e1f8:	3e3e3e20 	.word	0x3e3e3e20
   2e1fc:	000a0a0a 	.word	0x000a0a0a
   2e200:	5350530a 	.word	0x5350530a
   2e204:	203a3a20 	.word	0x203a3a20
   2e208:	666f7270 	.word	0x666f7270
   2e20c:	2c656c69 	.word	0x2c656c69
   2e210:	65724620 	.word	0x65724620
   2e214:	4f545265 	.word	0x4f545265
   2e218:	45482053 	.word	0x45482053
   2e21c:	53205041 	.word	0x53205041
   2e220:	20455a49 	.word	0x20455a49
   2e224:	7525203d 	.word	0x7525203d
   2e228:	74794220 	.word	0x74794220
   2e22c:	0a0a7365 	.word	0x0a0a7365
   2e230:	00000000 	.word	0x00000000
   2e234:	20535053 	.word	0x20535053
   2e238:	70203a3a 	.word	0x70203a3a
   2e23c:	69666f72 	.word	0x69666f72
   2e240:	202c656c 	.word	0x202c656c
   2e244:	6b736154 	.word	0x6b736154
   2e248:	69663e2d 	.word	0x69663e2d
   2e24c:	6873696e 	.word	0x6873696e
   2e250:	000a6465 	.word	0x000a6465
   2e254:	20535053 	.word	0x20535053
   2e258:	6d203a3a 	.word	0x6d203a3a
   2e25c:	5f65766f 	.word	0x5f65766f
   2e260:	735f6f74 	.word	0x735f6f74
   2e264:	61667275 	.word	0x61667275
   2e268:	202c6563 	.word	0x202c6563
   2e26c:	74736950 	.word	0x74736950
   2e270:	74206e6f 	.word	0x74206e6f
   2e274:	2d6b7361 	.word	0x2d6b7361
   2e278:	7463613e 	.word	0x7463613e
   2e27c:	0a657669 	.word	0x0a657669
   2e280:	00000000 	.word	0x00000000
   2e284:	20535053 	.word	0x20535053
   2e288:	6d203a3a 	.word	0x6d203a3a
   2e28c:	5f65766f 	.word	0x5f65766f
   2e290:	735f6f74 	.word	0x735f6f74
   2e294:	61667275 	.word	0x61667275
   2e298:	202c6563 	.word	0x202c6563
   2e29c:	74736950 	.word	0x74736950
   2e2a0:	74206e6f 	.word	0x74206e6f
   2e2a4:	2d656d69 	.word	0x2d656d69
   2e2a8:	2c74756f 	.word	0x2c74756f
   2e2ac:	73617420 	.word	0x73617420
   2e2b0:	663e2d6b 	.word	0x663e2d6b
   2e2b4:	73696e69 	.word	0x73696e69
   2e2b8:	0a646568 	.word	0x0a646568
   2e2bc:	00000000 	.word	0x00000000
   2e2c0:	20535053 	.word	0x20535053
   2e2c4:	6d203a3a 	.word	0x6d203a3a
   2e2c8:	5f65766f 	.word	0x5f65766f
   2e2cc:	735f6f74 	.word	0x735f6f74
   2e2d0:	61667275 	.word	0x61667275
   2e2d4:	202c6563 	.word	0x202c6563
   2e2d8:	736e6544 	.word	0x736e6544
   2e2dc:	3d797469 	.word	0x3d797469
   2e2e0:	66332e25 	.word	0x66332e25
   2e2e4:	2f676b20 	.word	0x2f676b20
   2e2e8:	2cb3c26d 	.word	0x2cb3c26d
   2e2ec:	6c6f5620 	.word	0x6c6f5620
   2e2f0:	3d656d75 	.word	0x3d656d75
   2e2f4:	66332e25 	.word	0x66332e25
   2e2f8:	b3c26e69 	.word	0xb3c26e69
   2e2fc:	654c202c 	.word	0x654c202c
   2e300:	6874676e 	.word	0x6874676e
   2e304:	342e253d 	.word	0x342e253d
   2e308:	0a6e6966 	.word	0x0a6e6966
   2e30c:	00000000 	.word	0x00000000
   2e310:	20535053 	.word	0x20535053
   2e314:	6d203a3a 	.word	0x6d203a3a
   2e318:	5f65766f 	.word	0x5f65766f
   2e31c:	735f6f74 	.word	0x735f6f74
   2e320:	61667275 	.word	0x61667275
   2e324:	202c6563 	.word	0x202c6563
   2e328:	74736950 	.word	0x74736950
   2e32c:	74206e6f 	.word	0x74206e6f
   2e330:	2d6b7361 	.word	0x2d6b7361
   2e334:	7375733e 	.word	0x7375733e
   2e338:	646e6570 	.word	0x646e6570
   2e33c:	000a6465 	.word	0x000a6465
   2e340:	20535053 	.word	0x20535053
   2e344:	6d203a3a 	.word	0x6d203a3a
   2e348:	5f65766f 	.word	0x5f65766f
   2e34c:	735f6f74 	.word	0x735f6f74
   2e350:	61667275 	.word	0x61667275
   2e354:	202c6563 	.word	0x202c6563
   2e358:	74736950 	.word	0x74736950
   2e35c:	74206e6f 	.word	0x74206e6f
   2e360:	2d6b7361 	.word	0x2d6b7361
   2e364:	6e69663e 	.word	0x6e69663e
   2e368:	65687369 	.word	0x65687369
   2e36c:	00000a64 	.word	0x00000a64
   2e370:	20535053 	.word	0x20535053
   2e374:	6d203a3a 	.word	0x6d203a3a
   2e378:	5f65766f 	.word	0x5f65766f
   2e37c:	735f6f74 	.word	0x735f6f74
   2e380:	61667275 	.word	0x61667275
   2e384:	202c6563 	.word	0x202c6563
   2e388:	20535047 	.word	0x20535047
   2e38c:	6b736174 	.word	0x6b736174
   2e390:	63613e2d 	.word	0x63613e2d
   2e394:	65766974 	.word	0x65766974
   2e398:	66203a20 	.word	0x66203a20
   2e39c:	64657869 	.word	0x64657869
   2e3a0:	616c202c 	.word	0x616c202c
   2e3a4:	75746974 	.word	0x75746974
   2e3a8:	253d6564 	.word	0x253d6564
   2e3ac:	66372e30 	.word	0x66372e30
   2e3b0:	6f6c202c 	.word	0x6f6c202c
   2e3b4:	7469676e 	.word	0x7469676e
   2e3b8:	3d656475 	.word	0x3d656475
   2e3bc:	372e3025 	.word	0x372e3025
   2e3c0:	61202c66 	.word	0x61202c66
   2e3c4:	7469746c 	.word	0x7469746c
   2e3c8:	3d656475 	.word	0x3d656475
   2e3cc:	372e3025 	.word	0x372e3025
   2e3d0:	00000a66 	.word	0x00000a66
   2e3d4:	20535053 	.word	0x20535053
   2e3d8:	6d203a3a 	.word	0x6d203a3a
   2e3dc:	5f65766f 	.word	0x5f65766f
   2e3e0:	735f6f74 	.word	0x735f6f74
   2e3e4:	61667275 	.word	0x61667275
   2e3e8:	202c6563 	.word	0x202c6563
   2e3ec:	20435452 	.word	0x20435452
   2e3f0:	473c203a 	.word	0x473c203a
   2e3f4:	54205350 	.word	0x54205350
   2e3f8:	20656d69 	.word	0x20656d69
   2e3fc:	3e746553 	.word	0x3e746553
   2e400:	0000000a 	.word	0x0000000a
   2e404:	20535053 	.word	0x20535053
   2e408:	6d203a3a 	.word	0x6d203a3a
   2e40c:	5f65766f 	.word	0x5f65766f
   2e410:	735f6f74 	.word	0x735f6f74
   2e414:	61667275 	.word	0x61667275
   2e418:	202c6563 	.word	0x202c6563
   2e41c:	20535047 	.word	0x20535047
   2e420:	6b736174 	.word	0x6b736174
   2e424:	63613e2d 	.word	0x63613e2d
   2e428:	65766974 	.word	0x65766974
   2e42c:	4e203a20 	.word	0x4e203a20
   2e430:	6966206f 	.word	0x6966206f
   2e434:	00000a78 	.word	0x00000a78
   2e438:	20535053 	.word	0x20535053
   2e43c:	6d203a3a 	.word	0x6d203a3a
   2e440:	5f65766f 	.word	0x5f65766f
   2e444:	735f6f74 	.word	0x735f6f74
   2e448:	61667275 	.word	0x61667275
   2e44c:	202c6563 	.word	0x202c6563
   2e450:	20535047 	.word	0x20535047
   2e454:	6b736174 	.word	0x6b736174
   2e458:	75733e2d 	.word	0x75733e2d
   2e45c:	6e657073 	.word	0x6e657073
   2e460:	0a646564 	.word	0x0a646564
   2e464:	00000000 	.word	0x00000000
   2e468:	20535053 	.word	0x20535053
   2e46c:	6d203a3a 	.word	0x6d203a3a
   2e470:	5f65766f 	.word	0x5f65766f
   2e474:	735f6f74 	.word	0x735f6f74
   2e478:	61667275 	.word	0x61667275
   2e47c:	202c6563 	.word	0x202c6563
   2e480:	20535047 	.word	0x20535047
   2e484:	6b736174 	.word	0x6b736174
   2e488:	69663e2d 	.word	0x69663e2d
   2e48c:	6873696e 	.word	0x6873696e
   2e490:	000a6465 	.word	0x000a6465
   2e494:	20535053 	.word	0x20535053
   2e498:	6d203a3a 	.word	0x6d203a3a
   2e49c:	5f65766f 	.word	0x5f65766f
   2e4a0:	735f6f74 	.word	0x735f6f74
   2e4a4:	61667275 	.word	0x61667275
   2e4a8:	202c6563 	.word	0x202c6563
   2e4ac:	6b736174 	.word	0x6b736174
   2e4b0:	69663e2d 	.word	0x69663e2d
   2e4b4:	6873696e 	.word	0x6873696e
   2e4b8:	000a6465 	.word	0x000a6465
   2e4bc:	20535053 	.word	0x20535053
   2e4c0:	6d203a3a 	.word	0x6d203a3a
   2e4c4:	5f65766f 	.word	0x5f65766f
   2e4c8:	735f6f74 	.word	0x735f6f74
   2e4cc:	61667275 	.word	0x61667275
   2e4d0:	202c6563 	.word	0x202c6563
   2e4d4:	20435452 	.word	0x20435452
   2e4d8:	6954203a 	.word	0x6954203a
   2e4dc:	7453656d 	.word	0x7453656d
   2e4e0:	2c706d61 	.word	0x2c706d61
   2e4e4:	32302520 	.word	0x32302520
   2e4e8:	30252e64 	.word	0x30252e64
   2e4ec:	322e6432 	.word	0x322e6432
   2e4f0:	32302530 	.word	0x32302530
   2e4f4:	25202c64 	.word	0x25202c64
   2e4f8:	3a643230 	.word	0x3a643230
   2e4fc:	64323025 	.word	0x64323025
   2e500:	3230253a 	.word	0x3230253a
   2e504:	55282064 	.word	0x55282064
   2e508:	0a294354 	.word	0x0a294354
   2e50c:	00000000 	.word	0x00000000
   2e510:	20535053 	.word	0x20535053
   2e514:	6d203a3a 	.word	0x6d203a3a
   2e518:	5f65766f 	.word	0x5f65766f
   2e51c:	735f6f74 	.word	0x735f6f74
   2e520:	61667275 	.word	0x61667275
   2e524:	202c6563 	.word	0x202c6563
   2e528:	20435452 	.word	0x20435452
   2e52c:	6954203a 	.word	0x6954203a
   2e530:	7453656d 	.word	0x7453656d
   2e534:	2c706d61 	.word	0x2c706d61
   2e538:	32302520 	.word	0x32302520
   2e53c:	30252e64 	.word	0x30252e64
   2e540:	322e6432 	.word	0x322e6432
   2e544:	32302530 	.word	0x32302530
   2e548:	25202c64 	.word	0x25202c64
   2e54c:	3a643230 	.word	0x3a643230
   2e550:	64323025 	.word	0x64323025
   2e554:	3230253a 	.word	0x3230253a
   2e558:	6c282064 	.word	0x6c282064
   2e55c:	6c61636f 	.word	0x6c61636f
   2e560:	00000a29 	.word	0x00000a29
   2e564:	5350530a 	.word	0x5350530a
   2e568:	203a3a20 	.word	0x203a3a20
   2e56c:	65766f6d 	.word	0x65766f6d
   2e570:	5f6f745f 	.word	0x5f6f745f
   2e574:	66727573 	.word	0x66727573
   2e578:	2c656361 	.word	0x2c656361
   2e57c:	65724620 	.word	0x65724620
   2e580:	4f545265 	.word	0x4f545265
   2e584:	45482053 	.word	0x45482053
   2e588:	53205041 	.word	0x53205041
   2e58c:	20455a49 	.word	0x20455a49
   2e590:	7525203d 	.word	0x7525203d
   2e594:	74794220 	.word	0x74794220
   2e598:	0a0a7365 	.word	0x0a0a7365
   2e59c:	00000000 	.word	0x00000000
   2e5a0:	20535053 	.word	0x20535053
   2e5a4:	6d203a3a 	.word	0x6d203a3a
   2e5a8:	5f65766f 	.word	0x5f65766f
   2e5ac:	735f6f74 	.word	0x735f6f74
   2e5b0:	61667275 	.word	0x61667275
   2e5b4:	202c6563 	.word	0x202c6563
   2e5b8:	6b736154 	.word	0x6b736154
   2e5bc:	69663e2d 	.word	0x69663e2d
   2e5c0:	6873696e 	.word	0x6873696e
   2e5c4:	0a0a6465 	.word	0x0a0a6465
   2e5c8:	00000000 	.word	0x00000000
   2e5cc:	20535053 	.word	0x20535053
   2e5d0:	74203a3a 	.word	0x74203a3a
   2e5d4:	49202c78 	.word	0x49202c78
   2e5d8:	69646972 	.word	0x69646972
   2e5dc:	6c206d75 	.word	0x6c206d75
   2e5e0:	736b6f6f 	.word	0x736b6f6f
   2e5e4:	6e696620 	.word	0x6e696620
   2e5e8:	00000a65 	.word	0x00000a65
   2e5ec:	20535053 	.word	0x20535053
   2e5f0:	74203a3a 	.word	0x74203a3a
   2e5f4:	49202c78 	.word	0x49202c78
   2e5f8:	69646972 	.word	0x69646972
   2e5fc:	6e206d75 	.word	0x6e206d75
   2e600:	6320746f 	.word	0x6320746f
   2e604:	67726168 	.word	0x67726168
   2e608:	202c6465 	.word	0x202c6465
   2e60c:	20797274 	.word	0x20797274
   2e610:	69616761 	.word	0x69616761
   2e614:	00000a6e 	.word	0x00000a6e
   2e618:	20535053 	.word	0x20535053
   2e61c:	74203a3a 	.word	0x74203a3a
   2e620:	54202c78 	.word	0x54202c78
   2e624:	2d6b7361 	.word	0x2d6b7361
   2e628:	6e69663e 	.word	0x6e69663e
   2e62c:	65687369 	.word	0x65687369
   2e630:	62612064 	.word	0x62612064
   2e634:	74707572 	.word	0x74707572
   2e638:	202c796c 	.word	0x202c796c
   2e63c:	20544f4e 	.word	0x20544f4e
   2e640:	6e617274 	.word	0x6e617274
   2e644:	74696d73 	.word	0x74696d73
   2e648:	676e6974 	.word	0x676e6974
   2e64c:	646f7420 	.word	0x646f7420
   2e650:	000a7961 	.word	0x000a7961
   2e654:	20535053 	.word	0x20535053
   2e658:	74203a3a 	.word	0x74203a3a
   2e65c:	50202c78 	.word	0x50202c78
   2e660:	2c6b7261 	.word	0x2c6b7261
   2e664:	74615320 	.word	0x74615320
   2e668:	696c6c65 	.word	0x696c6c65
   2e66c:	202c6574 	.word	0x202c6574
   2e670:	6b736174 	.word	0x6b736174
   2e674:	63613e2d 	.word	0x63613e2d
   2e678:	65766974 	.word	0x65766974
   2e67c:	0000000a 	.word	0x0000000a
   2e680:	20535053 	.word	0x20535053
   2e684:	74203a3a 	.word	0x74203a3a
   2e688:	50202c78 	.word	0x50202c78
   2e68c:	2c6b7261 	.word	0x2c6b7261
   2e690:	74615320 	.word	0x74615320
   2e694:	696c6c65 	.word	0x696c6c65
   2e698:	202c6574 	.word	0x202c6574
   2e69c:	6b736174 	.word	0x6b736174
   2e6a0:	75733e2d 	.word	0x75733e2d
   2e6a4:	6e657073 	.word	0x6e657073
   2e6a8:	0a646564 	.word	0x0a646564
   2e6ac:	00000000 	.word	0x00000000
   2e6b0:	20535053 	.word	0x20535053
   2e6b4:	74203a3a 	.word	0x74203a3a
   2e6b8:	50202c78 	.word	0x50202c78
   2e6bc:	2c6b7261 	.word	0x2c6b7261
   2e6c0:	74615320 	.word	0x74615320
   2e6c4:	696c6c65 	.word	0x696c6c65
   2e6c8:	74206574 	.word	0x74206574
   2e6cc:	2d6b7361 	.word	0x2d6b7361
   2e6d0:	6e69663e 	.word	0x6e69663e
   2e6d4:	65687369 	.word	0x65687369
   2e6d8:	00000a64 	.word	0x00000a64
   2e6dc:	20535053 	.word	0x20535053
   2e6e0:	74203a3a 	.word	0x74203a3a
   2e6e4:	50202c78 	.word	0x50202c78
   2e6e8:	2c6b7261 	.word	0x2c6b7261
   2e6ec:	74615320 	.word	0x74615320
   2e6f0:	696c6c65 	.word	0x696c6c65
   2e6f4:	3c206574 	.word	0x3c206574
   2e6f8:	69736956 	.word	0x69736956
   2e6fc:	3e656c62 	.word	0x3e656c62
   2e700:	0000000a 	.word	0x0000000a
   2e704:	20535053 	.word	0x20535053
   2e708:	74203a3a 	.word	0x74203a3a
   2e70c:	50202c78 	.word	0x50202c78
   2e710:	2c6b7261 	.word	0x2c6b7261
   2e714:	74615320 	.word	0x74615320
   2e718:	696c6c65 	.word	0x696c6c65
   2e71c:	3c206574 	.word	0x3c206574
   2e720:	20544f4e 	.word	0x20544f4e
   2e724:	69736956 	.word	0x69736956
   2e728:	3e656c62 	.word	0x3e656c62
   2e72c:	6177202c 	.word	0x6177202c
   2e730:	6e697469 	.word	0x6e697469
   2e734:	6f662067 	.word	0x6f662067
   2e738:	75252072 	.word	0x75252072
   2e73c:	63657320 	.word	0x63657320
   2e740:	73646e6f 	.word	0x73646e6f
   2e744:	00000a0a 	.word	0x00000a0a
   2e748:	20535053 	.word	0x20535053
   2e74c:	74203a3a 	.word	0x74203a3a
   2e750:	50202c78 	.word	0x50202c78
   2e754:	2c6b7261 	.word	0x2c6b7261
   2e758:	61654d20 	.word	0x61654d20
   2e75c:	65727573 	.word	0x65727573
   2e760:	746e656d 	.word	0x746e656d
   2e764:	72772073 	.word	0x72772073
   2e768:	65747469 	.word	0x65747469
   2e76c:	75253d6e 	.word	0x75253d6e
   2e770:	6572202c 	.word	0x6572202c
   2e774:	253d6461 	.word	0x253d6461
   2e778:	000a0a75 	.word	0x000a0a75
   2e77c:	20535053 	.word	0x20535053
   2e780:	74203a3a 	.word	0x74203a3a
   2e784:	50202c78 	.word	0x50202c78
   2e788:	2c6b7261 	.word	0x2c6b7261
   2e78c:	206f4e20 	.word	0x206f4e20
   2e790:	65726f6d 	.word	0x65726f6d
   2e794:	61656d20 	.word	0x61656d20
   2e798:	65727573 	.word	0x65727573
   2e79c:	746e656d 	.word	0x746e656d
   2e7a0:	76612073 	.word	0x76612073
   2e7a4:	616c6961 	.word	0x616c6961
   2e7a8:	20656c62 	.word	0x20656c62
   2e7ac:	61705f6d 	.word	0x61705f6d
   2e7b0:	6e5f6b72 	.word	0x6e5f6b72
   2e7b4:	65626d75 	.word	0x65626d75
   2e7b8:	75253d72 	.word	0x75253d72
   2e7bc:	6170202c 	.word	0x6170202c
   2e7c0:	6e5f6b72 	.word	0x6e5f6b72
   2e7c4:	65626d75 	.word	0x65626d75
   2e7c8:	75253d72 	.word	0x75253d72
   2e7cc:	0000000a 	.word	0x0000000a
   2e7d0:	20535053 	.word	0x20535053
   2e7d4:	74203a3a 	.word	0x74203a3a
   2e7d8:	50202c78 	.word	0x50202c78
   2e7dc:	2c6b7261 	.word	0x2c6b7261
   2e7e0:	6f727020 	.word	0x6f727020
   2e7e4:	656c6966 	.word	0x656c6966
   2e7e8:	6d756e5f 	.word	0x6d756e5f
   2e7ec:	3d726562 	.word	0x3d726562
   2e7f0:	202c7525 	.word	0x202c7525
   2e7f4:	65676170 	.word	0x65676170
   2e7f8:	626d754e 	.word	0x626d754e
   2e7fc:	253d7265 	.word	0x253d7265
   2e800:	6d202c75 	.word	0x6d202c75
   2e804:	75736165 	.word	0x75736165
   2e808:	656d6572 	.word	0x656d6572
   2e80c:	6c5f746e 	.word	0x6c5f746e
   2e810:	74676e65 	.word	0x74676e65
   2e814:	75253d68 	.word	0x75253d68
   2e818:	0000000a 	.word	0x0000000a
   2e81c:	20535053 	.word	0x20535053
   2e820:	74203a3a 	.word	0x74203a3a
   2e824:	57202c78 	.word	0x57202c78
   2e828:	494e5241 	.word	0x494e5241
   2e82c:	3a20474e 	.word	0x3a20474e
   2e830:	72615020 	.word	0x72615020
   2e834:	70202c6b 	.word	0x70202c6b
   2e838:	69666f72 	.word	0x69666f72
   2e83c:	6e5f656c 	.word	0x6e5f656c
   2e840:	65626d75 	.word	0x65626d75
   2e844:	75253d72 	.word	0x75253d72
   2e848:	63786520 	.word	0x63786520
   2e84c:	69646565 	.word	0x69646565
   2e850:	2820676e 	.word	0x2820676e
   2e854:	20297525 	.word	0x20297525
   2e858:	676e656c 	.word	0x676e656c
   2e85c:	6f206874 	.word	0x6f206874
   2e860:	656d2066 	.word	0x656d2066
   2e864:	72757361 	.word	0x72757361
   2e868:	6e656d65 	.word	0x6e656d65
   2e86c:	202c7374 	.word	0x202c7374
   2e870:	61657263 	.word	0x61657263
   2e874:	676e6974 	.word	0x676e6974
   2e878:	67617020 	.word	0x67617020
   2e87c:	0a217365 	.word	0x0a217365
   2e880:	00000000 	.word	0x00000000
   2e884:	20535053 	.word	0x20535053
   2e888:	74203a3a 	.word	0x74203a3a
   2e88c:	50202c78 	.word	0x50202c78
   2e890:	2c6b7261 	.word	0x2c6b7261
   2e894:	6f727020 	.word	0x6f727020
   2e898:	656c6966 	.word	0x656c6966
   2e89c:	6d756e5f 	.word	0x6d756e5f
   2e8a0:	3d726562 	.word	0x3d726562
   2e8a4:	6c207525 	.word	0x6c207525
   2e8a8:	74676e65 	.word	0x74676e65
   2e8ac:	666f2068 	.word	0x666f2068
   2e8b0:	61656d20 	.word	0x61656d20
   2e8b4:	65727573 	.word	0x65727573
   2e8b8:	746e656d 	.word	0x746e656d
   2e8bc:	75253d73 	.word	0x75253d73
   2e8c0:	74696620 	.word	0x74696620
   2e8c4:	676e6974 	.word	0x676e6974
   2e8c8:	206e6920 	.word	0x206e6920
   2e8cc:	20656e6f 	.word	0x20656e6f
   2e8d0:	65676170 	.word	0x65676170
   2e8d4:	00000a21 	.word	0x00000a21
   2e8d8:	20535053 	.word	0x20535053
   2e8dc:	74203a3a 	.word	0x74203a3a
   2e8e0:	50202c78 	.word	0x50202c78
   2e8e4:	2c6b7261 	.word	0x2c6b7261
   2e8e8:	6f727020 	.word	0x6f727020
   2e8ec:	656c6966 	.word	0x656c6966
   2e8f0:	6d756e5f 	.word	0x6d756e5f
   2e8f4:	3d726562 	.word	0x3d726562
   2e8f8:	6d207525 	.word	0x6d207525
   2e8fc:	75736165 	.word	0x75736165
   2e900:	656d6572 	.word	0x656d6572
   2e904:	6c5f746e 	.word	0x6c5f746e
   2e908:	74676e65 	.word	0x74676e65
   2e90c:	75253d68 	.word	0x75253d68
   2e910:	0000000a 	.word	0x0000000a
   2e914:	20535053 	.word	0x20535053
   2e918:	74203a3a 	.word	0x74203a3a
   2e91c:	50202c78 	.word	0x50202c78
   2e920:	206b7261 	.word	0x206b7261
   2e924:	7270203a 	.word	0x7270203a
   2e928:	6c69666f 	.word	0x6c69666f
   2e92c:	756e5f65 	.word	0x756e5f65
   2e930:	7265626d 	.word	0x7265626d
   2e934:	2c75253d 	.word	0x2c75253d
   2e938:	67617020 	.word	0x67617020
   2e93c:	6d754e65 	.word	0x6d754e65
   2e940:	3d726562 	.word	0x3d726562
   2e944:	202c7525 	.word	0x202c7525
   2e948:	61705f6d 	.word	0x61705f6d
   2e94c:	6e5f6b72 	.word	0x6e5f6b72
   2e950:	65626d75 	.word	0x65626d75
   2e954:	75253d72 	.word	0x75253d72
   2e958:	6f74202c 	.word	0x6f74202c
   2e95c:	5f6c6174 	.word	0x5f6c6174
   2e960:	65747962 	.word	0x65747962
   2e964:	75253d73 	.word	0x75253d73
   2e968:	0000000a 	.word	0x0000000a
   2e96c:	20535053 	.word	0x20535053
   2e970:	74203a3a 	.word	0x74203a3a
   2e974:	50202c78 	.word	0x50202c78
   2e978:	206b7261 	.word	0x206b7261
   2e97c:	7361656d 	.word	0x7361656d
   2e980:	6d657275 	.word	0x6d657275
   2e984:	73746e65 	.word	0x73746e65
   2e988:	2c75253d 	.word	0x2c75253d
   2e98c:	74796220 	.word	0x74796220
   2e990:	253d7365 	.word	0x253d7365
   2e994:	72612075 	.word	0x72612075
   2e998:	65622065 	.word	0x65622065
   2e99c:	20676e69 	.word	0x20676e69
   2e9a0:	6e617274 	.word	0x6e617274
   2e9a4:	74696d73 	.word	0x74696d73
   2e9a8:	0a646574 	.word	0x0a646574
   2e9ac:	00000000 	.word	0x00000000
   2e9b0:	20535053 	.word	0x20535053
   2e9b4:	74203a3a 	.word	0x74203a3a
   2e9b8:	50202c78 	.word	0x50202c78
   2e9bc:	206b7261 	.word	0x206b7261
   2e9c0:	75746572 	.word	0x75746572
   2e9c4:	64656e72 	.word	0x64656e72
   2e9c8:	6c616620 	.word	0x6c616620
   2e9cc:	000a6573 	.word	0x000a6573
   2e9d0:	20535053 	.word	0x20535053
   2e9d4:	74203a3a 	.word	0x74203a3a
   2e9d8:	50202c78 	.word	0x50202c78
   2e9dc:	206b7261 	.word	0x206b7261
   2e9e0:	63656863 	.word	0x63656863
   2e9e4:	676e696b 	.word	0x676e696b
   2e9e8:	73617420 	.word	0x73617420
   2e9ec:	5365206b 	.word	0x5365206b
   2e9f0:	65746174 	.word	0x65746174
   2e9f4:	0000000a 	.word	0x0000000a
   2e9f8:	20535053 	.word	0x20535053
   2e9fc:	74203a3a 	.word	0x74203a3a
   2ea00:	50202c78 	.word	0x50202c78
   2ea04:	206b7261 	.word	0x206b7261
   2ea08:	6b736174 	.word	0x6b736174
   2ea0c:	63613e2d 	.word	0x63613e2d
   2ea10:	65766974 	.word	0x65766974
   2ea14:	0000000a 	.word	0x0000000a
   2ea18:	20535053 	.word	0x20535053
   2ea1c:	74203a3a 	.word	0x74203a3a
   2ea20:	50202c78 	.word	0x50202c78
   2ea24:	206b7261 	.word	0x206b7261
   2ea28:	6b736174 	.word	0x6b736174
   2ea2c:	75733e2d 	.word	0x75733e2d
   2ea30:	6e657073 	.word	0x6e657073
   2ea34:	0a646564 	.word	0x0a646564
   2ea38:	00000000 	.word	0x00000000
   2ea3c:	20535053 	.word	0x20535053
   2ea40:	74203a3a 	.word	0x74203a3a
   2ea44:	50202c78 	.word	0x50202c78
   2ea48:	206b7261 	.word	0x206b7261
   2ea4c:	6b736174 	.word	0x6b736174
   2ea50:	69663e2d 	.word	0x69663e2d
   2ea54:	6873696e 	.word	0x6873696e
   2ea58:	000a6465 	.word	0x000a6465
   2ea5c:	20535053 	.word	0x20535053
   2ea60:	74203a3a 	.word	0x74203a3a
   2ea64:	50202c78 	.word	0x50202c78
   2ea68:	206b7261 	.word	0x206b7261
   2ea6c:	6e617274 	.word	0x6e617274
   2ea70:	74696d73 	.word	0x74696d73
   2ea74:	75533c20 	.word	0x75533c20
   2ea78:	73656363 	.word	0x73656363
   2ea7c:	6c756673 	.word	0x6c756673
   2ea80:	000a0a3e 	.word	0x000a0a3e
   2ea84:	20535053 	.word	0x20535053
   2ea88:	74203a3a 	.word	0x74203a3a
   2ea8c:	50202c78 	.word	0x50202c78
   2ea90:	2c6b7261 	.word	0x2c6b7261
   2ea94:	61727420 	.word	0x61727420
   2ea98:	63696666 	.word	0x63696666
   2ea9c:	6e616d20 	.word	0x6e616d20
   2eaa0:	6d656761 	.word	0x6d656761
   2eaa4:	20746e65 	.word	0x20746e65
   2eaa8:	656d6974 	.word	0x656d6974
   2eaac:	20736920 	.word	0x20736920
   2eab0:	696c6176 	.word	0x696c6176
   2eab4:	25202c64 	.word	0x25202c64
   2eab8:	65732075 	.word	0x65732075
   2eabc:	646e6f63 	.word	0x646e6f63
   2eac0:	00000a73 	.word	0x00000a73
   2eac4:	20535053 	.word	0x20535053
   2eac8:	74203a3a 	.word	0x74203a3a
   2eacc:	50202c78 	.word	0x50202c78
   2ead0:	2c6b7261 	.word	0x2c6b7261
   2ead4:	69617720 	.word	0x69617720
   2ead8:	676e6974 	.word	0x676e6974
   2eadc:	726f6620 	.word	0x726f6620
   2eae0:	20303120 	.word	0x20303120
   2eae4:	6f636573 	.word	0x6f636573
   2eae8:	2073646e 	.word	0x2073646e
   2eaec:	74736e69 	.word	0x74736e69
   2eaf0:	0a646165 	.word	0x0a646165
   2eaf4:	00000000 	.word	0x00000000
   2eaf8:	20535053 	.word	0x20535053
   2eafc:	74203a3a 	.word	0x74203a3a
   2eb00:	50202c78 	.word	0x50202c78
   2eb04:	2c6b7261 	.word	0x2c6b7261
   2eb08:	61727420 	.word	0x61727420
   2eb0c:	63696666 	.word	0x63696666
   2eb10:	6e616d20 	.word	0x6e616d20
   2eb14:	6d656761 	.word	0x6d656761
   2eb18:	20746e65 	.word	0x20746e65
   2eb1c:	656d6974 	.word	0x656d6974
   2eb20:	20736920 	.word	0x20736920
   2eb24:	20746f6e 	.word	0x20746f6e
   2eb28:	696c6176 	.word	0x696c6176
   2eb2c:	00000a64 	.word	0x00000a64
   2eb30:	20535053 	.word	0x20535053
   2eb34:	74203a3a 	.word	0x74203a3a
   2eb38:	50202c78 	.word	0x50202c78
   2eb3c:	2c6b7261 	.word	0x2c6b7261
   2eb40:	69617720 	.word	0x69617720
   2eb44:	6f662074 	.word	0x6f662074
   2eb48:	75252072 	.word	0x75252072
   2eb4c:	63657320 	.word	0x63657320
   2eb50:	73646e6f 	.word	0x73646e6f
   2eb54:	0000000a 	.word	0x0000000a
   2eb58:	20535053 	.word	0x20535053
   2eb5c:	74203a3a 	.word	0x74203a3a
   2eb60:	50202c78 	.word	0x50202c78
   2eb64:	206b7261 	.word	0x206b7261
   2eb68:	65746661 	.word	0x65746661
   2eb6c:	65722072 	.word	0x65722072
   2eb70:	20746573 	.word	0x20746573
   2eb74:	64616572 	.word	0x64616572
   2eb78:	2c75253d 	.word	0x2c75253d
   2eb7c:	705f6d20 	.word	0x705f6d20
   2eb80:	5f6b7261 	.word	0x5f6b7261
   2eb84:	676e656c 	.word	0x676e656c
   2eb88:	253d6874 	.word	0x253d6874
   2eb8c:	6e202c75 	.word	0x6e202c75
   2eb90:	61705f72 	.word	0x61705f72
   2eb94:	253d6b72 	.word	0x253d6b72
   2eb98:	000a0a75 	.word	0x000a0a75
   2eb9c:	20535053 	.word	0x20535053
   2eba0:	74203a3a 	.word	0x74203a3a
   2eba4:	50202c78 	.word	0x50202c78
   2eba8:	2c6b7261 	.word	0x2c6b7261
   2ebac:	69617720 	.word	0x69617720
   2ebb0:	676e6974 	.word	0x676e6974
   2ebb4:	726f6620 	.word	0x726f6620
   2ebb8:	20752520 	.word	0x20752520
   2ebbc:	6f636573 	.word	0x6f636573
   2ebc0:	0a73646e 	.word	0x0a73646e
   2ebc4:	00000000 	.word	0x00000000
   2ebc8:	20535053 	.word	0x20535053
   2ebcc:	74203a3a 	.word	0x74203a3a
   2ebd0:	50202c78 	.word	0x50202c78
   2ebd4:	206b7261 	.word	0x206b7261
   2ebd8:	6e617274 	.word	0x6e617274
   2ebdc:	74696d73 	.word	0x74696d73
   2ebe0:	4f4e3c20 	.word	0x4f4e3c20
   2ebe4:	75532054 	.word	0x75532054
   2ebe8:	73656363 	.word	0x73656363
   2ebec:	6c756673 	.word	0x6c756673
   2ebf0:	000a0a3e 	.word	0x000a0a3e
   2ebf4:	20535053 	.word	0x20535053
   2ebf8:	74203a3a 	.word	0x74203a3a
   2ebfc:	50202c78 	.word	0x50202c78
   2ec00:	206b7261 	.word	0x206b7261
   2ec04:	4f525245 	.word	0x4f525245
   2ec08:	3a3a2052 	.word	0x3a3a2052
   2ec0c:	74656720 	.word	0x74656720
   2ec10:	676e6974 	.word	0x676e6974
   2ec14:	61727420 	.word	0x61727420
   2ec18:	696d736e 	.word	0x696d736e
   2ec1c:	74732074 	.word	0x74732074
   2ec20:	73757461 	.word	0x73757461
   2ec24:	0000000a 	.word	0x0000000a
   2ec28:	20535053 	.word	0x20535053
   2ec2c:	74203a3a 	.word	0x74203a3a
   2ec30:	50202c78 	.word	0x50202c78
   2ec34:	69666f72 	.word	0x69666f72
   2ec38:	202c656c 	.word	0x202c656c
   2ec3c:	65746153 	.word	0x65746153
   2ec40:	74696c6c 	.word	0x74696c6c
   2ec44:	74202c65 	.word	0x74202c65
   2ec48:	2d6b7361 	.word	0x2d6b7361
   2ec4c:	7463613e 	.word	0x7463613e
   2ec50:	0a657669 	.word	0x0a657669
   2ec54:	00000000 	.word	0x00000000
   2ec58:	20535053 	.word	0x20535053
   2ec5c:	74203a3a 	.word	0x74203a3a
   2ec60:	50202c78 	.word	0x50202c78
   2ec64:	69666f72 	.word	0x69666f72
   2ec68:	202c656c 	.word	0x202c656c
   2ec6c:	65746153 	.word	0x65746153
   2ec70:	74696c6c 	.word	0x74696c6c
   2ec74:	74202c65 	.word	0x74202c65
   2ec78:	2d6b7361 	.word	0x2d6b7361
   2ec7c:	7375733e 	.word	0x7375733e
   2ec80:	646e6570 	.word	0x646e6570
   2ec84:	000a6465 	.word	0x000a6465
   2ec88:	20535053 	.word	0x20535053
   2ec8c:	74203a3a 	.word	0x74203a3a
   2ec90:	50202c78 	.word	0x50202c78
   2ec94:	69666f72 	.word	0x69666f72
   2ec98:	202c656c 	.word	0x202c656c
   2ec9c:	65746153 	.word	0x65746153
   2eca0:	74696c6c 	.word	0x74696c6c
   2eca4:	74202c65 	.word	0x74202c65
   2eca8:	2d6b7361 	.word	0x2d6b7361
   2ecac:	6e69663e 	.word	0x6e69663e
   2ecb0:	65687369 	.word	0x65687369
   2ecb4:	00000a64 	.word	0x00000a64
   2ecb8:	20535053 	.word	0x20535053
   2ecbc:	74203a3a 	.word	0x74203a3a
   2ecc0:	50202c78 	.word	0x50202c78
   2ecc4:	69666f72 	.word	0x69666f72
   2ecc8:	202c656c 	.word	0x202c656c
   2eccc:	65746153 	.word	0x65746153
   2ecd0:	74696c6c 	.word	0x74696c6c
   2ecd4:	3c202c65 	.word	0x3c202c65
   2ecd8:	69736956 	.word	0x69736956
   2ecdc:	3e656c62 	.word	0x3e656c62
   2ece0:	0000000a 	.word	0x0000000a
   2ece4:	20535053 	.word	0x20535053
   2ece8:	74203a3a 	.word	0x74203a3a
   2ecec:	50202c78 	.word	0x50202c78
   2ecf0:	69666f72 	.word	0x69666f72
   2ecf4:	202c656c 	.word	0x202c656c
   2ecf8:	65746153 	.word	0x65746153
   2ecfc:	74696c6c 	.word	0x74696c6c
   2ed00:	3c202c65 	.word	0x3c202c65
   2ed04:	20544f4e 	.word	0x20544f4e
   2ed08:	69736956 	.word	0x69736956
   2ed0c:	3e656c62 	.word	0x3e656c62
   2ed10:	6177202c 	.word	0x6177202c
   2ed14:	6e697469 	.word	0x6e697469
   2ed18:	6f662067 	.word	0x6f662067
   2ed1c:	75252072 	.word	0x75252072
   2ed20:	63657320 	.word	0x63657320
   2ed24:	73646e6f 	.word	0x73646e6f
   2ed28:	00000a0a 	.word	0x00000a0a
   2ed2c:	20535053 	.word	0x20535053
   2ed30:	74203a3a 	.word	0x74203a3a
   2ed34:	50202c78 	.word	0x50202c78
   2ed38:	69666f72 	.word	0x69666f72
   2ed3c:	202c656c 	.word	0x202c656c
   2ed40:	7361654d 	.word	0x7361654d
   2ed44:	6d657275 	.word	0x6d657275
   2ed48:	73746e65 	.word	0x73746e65
   2ed4c:	69727720 	.word	0x69727720
   2ed50:	6e657474 	.word	0x6e657474
   2ed54:	2c75253d 	.word	0x2c75253d
   2ed58:	61657220 	.word	0x61657220
   2ed5c:	75253d64 	.word	0x75253d64
   2ed60:	0000000a 	.word	0x0000000a
   2ed64:	20535053 	.word	0x20535053
   2ed68:	74203a3a 	.word	0x74203a3a
   2ed6c:	50202c78 	.word	0x50202c78
   2ed70:	69666f72 	.word	0x69666f72
   2ed74:	202c656c 	.word	0x202c656c
   2ed78:	6d206f4e 	.word	0x6d206f4e
   2ed7c:	2065726f 	.word	0x2065726f
   2ed80:	7361656d 	.word	0x7361656d
   2ed84:	6d657275 	.word	0x6d657275
   2ed88:	73746e65 	.word	0x73746e65
   2ed8c:	61766120 	.word	0x61766120
   2ed90:	62616c69 	.word	0x62616c69
   2ed94:	6d20656c 	.word	0x6d20656c
   2ed98:	6f72705f 	.word	0x6f72705f
   2ed9c:	756e5f66 	.word	0x756e5f66
   2eda0:	7265626d 	.word	0x7265626d
   2eda4:	2c75253d 	.word	0x2c75253d
   2eda8:	6f727020 	.word	0x6f727020
   2edac:	756e5f66 	.word	0x756e5f66
   2edb0:	7265626d 	.word	0x7265626d
   2edb4:	0a75253d 	.word	0x0a75253d
   2edb8:	00000000 	.word	0x00000000
   2edbc:	20535053 	.word	0x20535053
   2edc0:	74203a3a 	.word	0x74203a3a
   2edc4:	50202c78 	.word	0x50202c78
   2edc8:	69666f72 	.word	0x69666f72
   2edcc:	202c656c 	.word	0x202c656c
   2edd0:	666f7270 	.word	0x666f7270
   2edd4:	5f656c69 	.word	0x5f656c69
   2edd8:	626d756e 	.word	0x626d756e
   2eddc:	253d7265 	.word	0x253d7265
   2ede0:	70202c75 	.word	0x70202c75
   2ede4:	4e656761 	.word	0x4e656761
   2ede8:	65626d75 	.word	0x65626d75
   2edec:	75253d72 	.word	0x75253d72
   2edf0:	656d202c 	.word	0x656d202c
   2edf4:	72757361 	.word	0x72757361
   2edf8:	6e656d65 	.word	0x6e656d65
   2edfc:	656c5f74 	.word	0x656c5f74
   2ee00:	6874676e 	.word	0x6874676e
   2ee04:	0a75253d 	.word	0x0a75253d
   2ee08:	00000000 	.word	0x00000000
   2ee0c:	20535053 	.word	0x20535053
   2ee10:	74203a3a 	.word	0x74203a3a
   2ee14:	57202c78 	.word	0x57202c78
   2ee18:	494e5241 	.word	0x494e5241
   2ee1c:	3a20474e 	.word	0x3a20474e
   2ee20:	6f725020 	.word	0x6f725020
   2ee24:	656c6966 	.word	0x656c6966
   2ee28:	7270202c 	.word	0x7270202c
   2ee2c:	6c69666f 	.word	0x6c69666f
   2ee30:	756e5f65 	.word	0x756e5f65
   2ee34:	7265626d 	.word	0x7265626d
   2ee38:	2075253d 	.word	0x2075253d
   2ee3c:	65637865 	.word	0x65637865
   2ee40:	6e696465 	.word	0x6e696465
   2ee44:	25282067 	.word	0x25282067
   2ee48:	6c202975 	.word	0x6c202975
   2ee4c:	74676e65 	.word	0x74676e65
   2ee50:	666f2068 	.word	0x666f2068
   2ee54:	61656d20 	.word	0x61656d20
   2ee58:	65727573 	.word	0x65727573
   2ee5c:	746e656d 	.word	0x746e656d
   2ee60:	63202c73 	.word	0x63202c73
   2ee64:	74616572 	.word	0x74616572
   2ee68:	20676e69 	.word	0x20676e69
   2ee6c:	65676170 	.word	0x65676170
   2ee70:	000a2173 	.word	0x000a2173
   2ee74:	20535053 	.word	0x20535053
   2ee78:	74203a3a 	.word	0x74203a3a
   2ee7c:	50202c78 	.word	0x50202c78
   2ee80:	69666f72 	.word	0x69666f72
   2ee84:	202c656c 	.word	0x202c656c
   2ee88:	666f7270 	.word	0x666f7270
   2ee8c:	5f656c69 	.word	0x5f656c69
   2ee90:	626d756e 	.word	0x626d756e
   2ee94:	253d7265 	.word	0x253d7265
   2ee98:	656c2075 	.word	0x656c2075
   2ee9c:	6874676e 	.word	0x6874676e
   2eea0:	20666f20 	.word	0x20666f20
   2eea4:	7361656d 	.word	0x7361656d
   2eea8:	6d657275 	.word	0x6d657275
   2eeac:	73746e65 	.word	0x73746e65
   2eeb0:	2075253d 	.word	0x2075253d
   2eeb4:	74746966 	.word	0x74746966
   2eeb8:	20676e69 	.word	0x20676e69
   2eebc:	6f206e69 	.word	0x6f206e69
   2eec0:	7020656e 	.word	0x7020656e
   2eec4:	21656761 	.word	0x21656761
   2eec8:	0000000a 	.word	0x0000000a
   2eecc:	20535053 	.word	0x20535053
   2eed0:	74203a3a 	.word	0x74203a3a
   2eed4:	50202c78 	.word	0x50202c78
   2eed8:	69666f72 	.word	0x69666f72
   2eedc:	202c656c 	.word	0x202c656c
   2eee0:	666f7270 	.word	0x666f7270
   2eee4:	5f656c69 	.word	0x5f656c69
   2eee8:	626d756e 	.word	0x626d756e
   2eeec:	253d7265 	.word	0x253d7265
   2eef0:	656d2075 	.word	0x656d2075
   2eef4:	72757361 	.word	0x72757361
   2eef8:	6e656d65 	.word	0x6e656d65
   2eefc:	656c5f74 	.word	0x656c5f74
   2ef00:	6874676e 	.word	0x6874676e
   2ef04:	0a75253d 	.word	0x0a75253d
   2ef08:	00000000 	.word	0x00000000
   2ef0c:	20535053 	.word	0x20535053
   2ef10:	74203a3a 	.word	0x74203a3a
   2ef14:	50202c78 	.word	0x50202c78
   2ef18:	69666f72 	.word	0x69666f72
   2ef1c:	3a20656c 	.word	0x3a20656c
   2ef20:	6f727020 	.word	0x6f727020
   2ef24:	656c6966 	.word	0x656c6966
   2ef28:	6d756e5f 	.word	0x6d756e5f
   2ef2c:	3d726562 	.word	0x3d726562
   2ef30:	202c7525 	.word	0x202c7525
   2ef34:	65676170 	.word	0x65676170
   2ef38:	626d754e 	.word	0x626d754e
   2ef3c:	253d7265 	.word	0x253d7265
   2ef40:	6d202c75 	.word	0x6d202c75
   2ef44:	6f72705f 	.word	0x6f72705f
   2ef48:	756e5f66 	.word	0x756e5f66
   2ef4c:	7265626d 	.word	0x7265626d
   2ef50:	2c75253d 	.word	0x2c75253d
   2ef54:	746f7420 	.word	0x746f7420
   2ef58:	625f6c61 	.word	0x625f6c61
   2ef5c:	73657479 	.word	0x73657479
   2ef60:	0a75253d 	.word	0x0a75253d
   2ef64:	00000000 	.word	0x00000000
   2ef68:	20535053 	.word	0x20535053
   2ef6c:	74203a3a 	.word	0x74203a3a
   2ef70:	50202c78 	.word	0x50202c78
   2ef74:	69666f72 	.word	0x69666f72
   2ef78:	6d20656c 	.word	0x6d20656c
   2ef7c:	75736165 	.word	0x75736165
   2ef80:	656d6572 	.word	0x656d6572
   2ef84:	3d73746e 	.word	0x3d73746e
   2ef88:	202c7525 	.word	0x202c7525
   2ef8c:	65747962 	.word	0x65747962
   2ef90:	75253d73 	.word	0x75253d73
   2ef94:	65726120 	.word	0x65726120
   2ef98:	69656220 	.word	0x69656220
   2ef9c:	7420676e 	.word	0x7420676e
   2efa0:	736e6172 	.word	0x736e6172
   2efa4:	7474696d 	.word	0x7474696d
   2efa8:	000a6465 	.word	0x000a6465
   2efac:	20535053 	.word	0x20535053
   2efb0:	74203a3a 	.word	0x74203a3a
   2efb4:	50202c78 	.word	0x50202c78
   2efb8:	69666f72 	.word	0x69666f72
   2efbc:	7220656c 	.word	0x7220656c
   2efc0:	72757465 	.word	0x72757465
   2efc4:	2064656e 	.word	0x2064656e
   2efc8:	736c6166 	.word	0x736c6166
   2efcc:	00000a65 	.word	0x00000a65
   2efd0:	20535053 	.word	0x20535053
   2efd4:	74203a3a 	.word	0x74203a3a
   2efd8:	50202c78 	.word	0x50202c78
   2efdc:	20666f72 	.word	0x20666f72
   2efe0:	63656863 	.word	0x63656863
   2efe4:	676e696b 	.word	0x676e696b
   2efe8:	73617420 	.word	0x73617420
   2efec:	5365206b 	.word	0x5365206b
   2eff0:	65746174 	.word	0x65746174
   2eff4:	0000000a 	.word	0x0000000a
   2eff8:	20535053 	.word	0x20535053
   2effc:	74203a3a 	.word	0x74203a3a
   2f000:	50202c78 	.word	0x50202c78
   2f004:	69666f72 	.word	0x69666f72
   2f008:	7420656c 	.word	0x7420656c
   2f00c:	2d6b7361 	.word	0x2d6b7361
   2f010:	7463613e 	.word	0x7463613e
   2f014:	0a657669 	.word	0x0a657669
   2f018:	00000000 	.word	0x00000000
   2f01c:	20535053 	.word	0x20535053
   2f020:	74203a3a 	.word	0x74203a3a
   2f024:	50202c78 	.word	0x50202c78
   2f028:	69666f72 	.word	0x69666f72
   2f02c:	7420656c 	.word	0x7420656c
   2f030:	2d6b7361 	.word	0x2d6b7361
   2f034:	7375733e 	.word	0x7375733e
   2f038:	646e6570 	.word	0x646e6570
   2f03c:	000a6465 	.word	0x000a6465
   2f040:	20535053 	.word	0x20535053
   2f044:	74203a3a 	.word	0x74203a3a
   2f048:	50202c78 	.word	0x50202c78
   2f04c:	69666f72 	.word	0x69666f72
   2f050:	7420656c 	.word	0x7420656c
   2f054:	2d6b7361 	.word	0x2d6b7361
   2f058:	6e69663e 	.word	0x6e69663e
   2f05c:	65687369 	.word	0x65687369
   2f060:	00000a64 	.word	0x00000a64
   2f064:	20535053 	.word	0x20535053
   2f068:	74203a3a 	.word	0x74203a3a
   2f06c:	50202c78 	.word	0x50202c78
   2f070:	69666f72 	.word	0x69666f72
   2f074:	7420656c 	.word	0x7420656c
   2f078:	736e6172 	.word	0x736e6172
   2f07c:	2074696d 	.word	0x2074696d
   2f080:	6375533c 	.word	0x6375533c
   2f084:	73736563 	.word	0x73736563
   2f088:	3e6c7566 	.word	0x3e6c7566
   2f08c:	00000a0a 	.word	0x00000a0a
   2f090:	20535053 	.word	0x20535053
   2f094:	74203a3a 	.word	0x74203a3a
   2f098:	50202c78 	.word	0x50202c78
   2f09c:	69666f72 	.word	0x69666f72
   2f0a0:	202c656c 	.word	0x202c656c
   2f0a4:	66617274 	.word	0x66617274
   2f0a8:	20636966 	.word	0x20636966
   2f0ac:	616e616d 	.word	0x616e616d
   2f0b0:	656d6567 	.word	0x656d6567
   2f0b4:	7420746e 	.word	0x7420746e
   2f0b8:	20656d69 	.word	0x20656d69
   2f0bc:	76207369 	.word	0x76207369
   2f0c0:	64696c61 	.word	0x64696c61
   2f0c4:	7525202c 	.word	0x7525202c
   2f0c8:	63657320 	.word	0x63657320
   2f0cc:	73646e6f 	.word	0x73646e6f
   2f0d0:	0000000a 	.word	0x0000000a
   2f0d4:	20535053 	.word	0x20535053
   2f0d8:	74203a3a 	.word	0x74203a3a
   2f0dc:	50202c78 	.word	0x50202c78
   2f0e0:	69666f72 	.word	0x69666f72
   2f0e4:	202c656c 	.word	0x202c656c
   2f0e8:	74696177 	.word	0x74696177
   2f0ec:	20676e69 	.word	0x20676e69
   2f0f0:	20726f66 	.word	0x20726f66
   2f0f4:	73203031 	.word	0x73203031
   2f0f8:	6e6f6365 	.word	0x6e6f6365
   2f0fc:	69207364 	.word	0x69207364
   2f100:	6574736e 	.word	0x6574736e
   2f104:	000a6461 	.word	0x000a6461
   2f108:	20535053 	.word	0x20535053
   2f10c:	74203a3a 	.word	0x74203a3a
   2f110:	50202c78 	.word	0x50202c78
   2f114:	69666f72 	.word	0x69666f72
   2f118:	202c656c 	.word	0x202c656c
   2f11c:	66617274 	.word	0x66617274
   2f120:	20636966 	.word	0x20636966
   2f124:	616e616d 	.word	0x616e616d
   2f128:	656d6567 	.word	0x656d6567
   2f12c:	7420746e 	.word	0x7420746e
   2f130:	20656d69 	.word	0x20656d69
   2f134:	6e207369 	.word	0x6e207369
   2f138:	7620746f 	.word	0x7620746f
   2f13c:	64696c61 	.word	0x64696c61
   2f140:	0000000a 	.word	0x0000000a
   2f144:	20535053 	.word	0x20535053
   2f148:	74203a3a 	.word	0x74203a3a
   2f14c:	50202c78 	.word	0x50202c78
   2f150:	69666f72 	.word	0x69666f72
   2f154:	202c656c 	.word	0x202c656c
   2f158:	74696177 	.word	0x74696177
   2f15c:	726f6620 	.word	0x726f6620
   2f160:	20752520 	.word	0x20752520
   2f164:	6f636573 	.word	0x6f636573
   2f168:	0a73646e 	.word	0x0a73646e
   2f16c:	00000000 	.word	0x00000000
   2f170:	20535053 	.word	0x20535053
   2f174:	74203a3a 	.word	0x74203a3a
   2f178:	50202c78 	.word	0x50202c78
   2f17c:	69666f72 	.word	0x69666f72
   2f180:	6120656c 	.word	0x6120656c
   2f184:	72657466 	.word	0x72657466
   2f188:	73657220 	.word	0x73657220
   2f18c:	72207465 	.word	0x72207465
   2f190:	3d646165 	.word	0x3d646165
   2f194:	202c7525 	.word	0x202c7525
   2f198:	72705f6d 	.word	0x72705f6d
   2f19c:	6c5f666f 	.word	0x6c5f666f
   2f1a0:	74676e65 	.word	0x74676e65
   2f1a4:	75253d68 	.word	0x75253d68
   2f1a8:	726e202c 	.word	0x726e202c
   2f1ac:	6f72705f 	.word	0x6f72705f
   2f1b0:	75253d66 	.word	0x75253d66
   2f1b4:	00000a0a 	.word	0x00000a0a
   2f1b8:	20535053 	.word	0x20535053
   2f1bc:	74203a3a 	.word	0x74203a3a
   2f1c0:	50202c78 	.word	0x50202c78
   2f1c4:	69666f72 	.word	0x69666f72
   2f1c8:	202c656c 	.word	0x202c656c
   2f1cc:	74696177 	.word	0x74696177
   2f1d0:	20676e69 	.word	0x20676e69
   2f1d4:	20726f66 	.word	0x20726f66
   2f1d8:	73207525 	.word	0x73207525
   2f1dc:	6e6f6365 	.word	0x6e6f6365
   2f1e0:	000a7364 	.word	0x000a7364
   2f1e4:	20535053 	.word	0x20535053
   2f1e8:	74203a3a 	.word	0x74203a3a
   2f1ec:	50202c78 	.word	0x50202c78
   2f1f0:	69666f72 	.word	0x69666f72
   2f1f4:	7420656c 	.word	0x7420656c
   2f1f8:	736e6172 	.word	0x736e6172
   2f1fc:	2074696d 	.word	0x2074696d
   2f200:	544f4e3c 	.word	0x544f4e3c
   2f204:	63755320 	.word	0x63755320
   2f208:	73736563 	.word	0x73736563
   2f20c:	3e6c7566 	.word	0x3e6c7566
   2f210:	00000a0a 	.word	0x00000a0a
   2f214:	20535053 	.word	0x20535053
   2f218:	74203a3a 	.word	0x74203a3a
   2f21c:	50202c78 	.word	0x50202c78
   2f220:	69666f72 	.word	0x69666f72
   2f224:	4520656c 	.word	0x4520656c
   2f228:	524f5252 	.word	0x524f5252
   2f22c:	203a3a20 	.word	0x203a3a20
   2f230:	74746567 	.word	0x74746567
   2f234:	20676e69 	.word	0x20676e69
   2f238:	6e617274 	.word	0x6e617274
   2f23c:	74696d73 	.word	0x74696d73
   2f240:	61747320 	.word	0x61747320
   2f244:	0a737574 	.word	0x0a737574
   2f248:	00000000 	.word	0x00000000
   2f24c:	5350530a 	.word	0x5350530a
   2f250:	203a3a20 	.word	0x203a3a20
   2f254:	202c7874 	.word	0x202c7874
   2f258:	25203c3c 	.word	0x25203c3c
   2f25c:	72502075 	.word	0x72502075
   2f260:	6c69666f 	.word	0x6c69666f
   2f264:	68207365 	.word	0x68207365
   2f268:	20657661 	.word	0x20657661
   2f26c:	6e656562 	.word	0x6e656562
   2f270:	61657220 	.word	0x61657220
   2f274:	64656863 	.word	0x64656863
   2f278:	0a3e3e20 	.word	0x0a3e3e20
   2f27c:	0000000a 	.word	0x0000000a
   2f280:	5350530a 	.word	0x5350530a
   2f284:	203a3a20 	.word	0x203a3a20
   2f288:	202c7874 	.word	0x202c7874
   2f28c:	65657246 	.word	0x65657246
   2f290:	534f5452 	.word	0x534f5452
   2f294:	41454820 	.word	0x41454820
   2f298:	49532050 	.word	0x49532050
   2f29c:	3d20455a 	.word	0x3d20455a
   2f2a0:	20752520 	.word	0x20752520
   2f2a4:	65747942 	.word	0x65747942
   2f2a8:	000a0a73 	.word	0x000a0a73
   2f2ac:	20535053 	.word	0x20535053
   2f2b0:	74203a3a 	.word	0x74203a3a
   2f2b4:	54202c78 	.word	0x54202c78
   2f2b8:	2d6b7361 	.word	0x2d6b7361
   2f2bc:	6e69663e 	.word	0x6e69663e
   2f2c0:	65687369 	.word	0x65687369
   2f2c4:	000a0a64 	.word	0x000a0a64
   2f2c8:	20535550 	.word	0x20535550
   2f2cc:	50203a3a 	.word	0x50203a3a
   2f2d0:	7075706f 	.word	0x7075706f
   2f2d4:	6f6c6720 	.word	0x6f6c6720
   2f2d8:	206c6162 	.word	0x206c6162
   2f2dc:	6e657665 	.word	0x6e657665
   2f2e0:	61772074 	.word	0x61772074
   2f2e4:	000a7469 	.word	0x000a7469
   2f2e8:	20535550 	.word	0x20535550
   2f2ec:	50203a3a 	.word	0x50203a3a
   2f2f0:	7075706f 	.word	0x7075706f
   2f2f4:	6f6c6720 	.word	0x6f6c6720
   2f2f8:	206c6162 	.word	0x206c6162
   2f2fc:	6e657665 	.word	0x6e657665
   2f300:	65722074 	.word	0x65722074
   2f304:	76696563 	.word	0x76696563
   2f308:	000a6465 	.word	0x000a6465
   2f30c:	75706f70 	.word	0x75706f70
   2f310:	64695f70 	.word	0x64695f70
   2f314:	0000656c 	.word	0x0000656c
   2f318:	72732f2e 	.word	0x72732f2e
   2f31c:	70612f63 	.word	0x70612f63
   2f320:	74532f70 	.word	0x74532f70
   2f324:	4d657461 	.word	0x4d657461
   2f328:	69686361 	.word	0x69686361
   2f32c:	632e656e 	.word	0x632e656e
   2f330:	00000000 	.word	0x00000000
   2f334:	75706f70 	.word	0x75706f70
   2f338:	75735f70 	.word	0x75735f70
   2f33c:	63616672 	.word	0x63616672
   2f340:	6c665f65 	.word	0x6c665f65
   2f344:	0074616f 	.word	0x0074616f
   2f348:	20535550 	.word	0x20535550
   2f34c:	50203a3a 	.word	0x50203a3a
   2f350:	7075706f 	.word	0x7075706f
   2f354:	72755320 	.word	0x72755320
   2f358:	65636166 	.word	0x65636166
   2f35c:	6e6f6420 	.word	0x6e6f6420
   2f360:	67202c65 	.word	0x67202c65
   2f364:	676e696f 	.word	0x676e696f
   2f368:	206f7420 	.word	0x206f7420
   2f36c:	656c6449 	.word	0x656c6449
   2f370:	0000000a 	.word	0x0000000a
   2f374:	20535550 	.word	0x20535550
   2f378:	50203a3a 	.word	0x50203a3a
   2f37c:	7075706f 	.word	0x7075706f
   2f380:	646f6d20 	.word	0x646f6d20
   2f384:	45202c65 	.word	0x45202c65
   2f388:	524f5252 	.word	0x524f5252
   2f38c:	6f73203a 	.word	0x6f73203a
   2f390:	6874656d 	.word	0x6874656d
   2f394:	20676e69 	.word	0x20676e69
   2f398:	746e6577 	.word	0x746e6577
   2f39c:	6f727720 	.word	0x6f727720
   2f3a0:	000a676e 	.word	0x000a676e
   2f3a4:	64657270 	.word	0x64657270
   2f3a8:	6f6c7065 	.word	0x6f6c7065
   2f3ac:	64695f79 	.word	0x64695f79
   2f3b0:	0000656c 	.word	0x0000656c
   2f3b4:	64657270 	.word	0x64657270
   2f3b8:	6f6c7065 	.word	0x6f6c7065
   2f3bc:	79735f79 	.word	0x79735f79
   2f3c0:	6d657473 	.word	0x6d657473
   2f3c4:	63656863 	.word	0x63656863
   2f3c8:	0000006b 	.word	0x0000006b
   2f3cc:	20534450 	.word	0x20534450
   2f3d0:	54203a3a 	.word	0x54203a3a
   2f3d4:	736e6172 	.word	0x736e6172
   2f3d8:	6f697469 	.word	0x6f697469
   2f3dc:	20676e6e 	.word	0x20676e6e
   2f3e0:	49206f74 	.word	0x49206f74
   2f3e4:	20656c64 	.word	0x20656c64
   2f3e8:	74617453 	.word	0x74617453
   2f3ec:	00000a65 	.word	0x00000a65
   2f3f0:	20534450 	.word	0x20534450
   2f3f4:	53203a3a 	.word	0x53203a3a
   2f3f8:	63746977 	.word	0x63746977
   2f3fc:	676e6968 	.word	0x676e6968
   2f400:	206f7420 	.word	0x206f7420
   2f404:	666f7250 	.word	0x666f7250
   2f408:	20656c69 	.word	0x20656c69
   2f40c:	65646f4d 	.word	0x65646f4d
   2f410:	50532820 	.word	0x50532820
   2f414:	000a2953 	.word	0x000a2953
   2f418:	20535053 	.word	0x20535053
   2f41c:	50203a3a 	.word	0x50203a3a
   2f420:	69666f72 	.word	0x69666f72
   2f424:	6720656c 	.word	0x6720656c
   2f428:	61626f6c 	.word	0x61626f6c
   2f42c:	7665206c 	.word	0x7665206c
   2f430:	20746e65 	.word	0x20746e65
   2f434:	74696177 	.word	0x74696177
   2f438:	0000000a 	.word	0x0000000a
   2f43c:	20535053 	.word	0x20535053
   2f440:	50203a3a 	.word	0x50203a3a
   2f444:	69666f72 	.word	0x69666f72
   2f448:	6720656c 	.word	0x6720656c
   2f44c:	61626f6c 	.word	0x61626f6c
   2f450:	7665206c 	.word	0x7665206c
   2f454:	20746e65 	.word	0x20746e65
   2f458:	65636572 	.word	0x65636572
   2f45c:	64657669 	.word	0x64657669
   2f460:	0000000a 	.word	0x0000000a
   2f464:	5f737073 	.word	0x5f737073
   2f468:	656c6469 	.word	0x656c6469
   2f46c:	00000000 	.word	0x00000000
   2f470:	5f737073 	.word	0x5f737073
   2f474:	65766f6d 	.word	0x65766f6d
   2f478:	5f6f745f 	.word	0x5f6f745f
   2f47c:	6b726170 	.word	0x6b726170
   2f480:	00000000 	.word	0x00000000
   2f484:	5f737073 	.word	0x5f737073
   2f488:	6b726170 	.word	0x6b726170
   2f48c:	00000000 	.word	0x00000000
   2f490:	5f737073 	.word	0x5f737073
   2f494:	65766f6d 	.word	0x65766f6d
   2f498:	5f6f745f 	.word	0x5f6f745f
   2f49c:	666f7270 	.word	0x666f7270
   2f4a0:	00656c69 	.word	0x00656c69
   2f4a4:	5f737073 	.word	0x5f737073
   2f4a8:	666f7270 	.word	0x666f7270
   2f4ac:	00656c69 	.word	0x00656c69
   2f4b0:	5f737073 	.word	0x5f737073
   2f4b4:	65766f6d 	.word	0x65766f6d
   2f4b8:	5f6f745f 	.word	0x5f6f745f
   2f4bc:	66727573 	.word	0x66727573
   2f4c0:	00656361 	.word	0x00656361
   2f4c4:	5f737073 	.word	0x5f737073
   2f4c8:	00747874 	.word	0x00747874
   2f4cc:	20535053 	.word	0x20535053
   2f4d0:	54203a3a 	.word	0x54203a3a
   2f4d4:	736e6172 	.word	0x736e6172
   2f4d8:	6f697469 	.word	0x6f697469
   2f4dc:	20676e6e 	.word	0x20676e6e
   2f4e0:	6e206f74 	.word	0x6e206f74
   2f4e4:	20747865 	.word	0x20747865
   2f4e8:	74617473 	.word	0x74617473
   2f4ec:	00000a65 	.word	0x00000a65
   2f4f0:	20535053 	.word	0x20535053
   2f4f4:	50203a3a 	.word	0x50203a3a
   2f4f8:	69666f72 	.word	0x69666f72
   2f4fc:	676e696c 	.word	0x676e696c
   2f500:	6e6f6420 	.word	0x6e6f6420
   2f504:	67202c65 	.word	0x67202c65
   2f508:	676e696f 	.word	0x676e696f
   2f50c:	206f7420 	.word	0x206f7420
   2f510:	656c6449 	.word	0x656c6449
   2f514:	0000000a 	.word	0x0000000a
   2f518:	20535053 	.word	0x20535053
   2f51c:	53203a3a 	.word	0x53203a3a
   2f520:	63746977 	.word	0x63746977
   2f524:	676e6968 	.word	0x676e6968
   2f528:	206f7420 	.word	0x206f7420
   2f52c:	75706f50 	.word	0x75706f50
   2f530:	6f4d2070 	.word	0x6f4d2070
   2f534:	000a6564 	.word	0x000a6564
   2f538:	5350530a 	.word	0x5350530a
   2f53c:	203a3a20 	.word	0x203a3a20
   2f540:	74697753 	.word	0x74697753
   2f544:	6e696863 	.word	0x6e696863
   2f548:	6f742067 	.word	0x6f742067
   2f54c:	766f6d20 	.word	0x766f6d20
   2f550:	6f745f65 	.word	0x6f745f65
   2f554:	7261705f 	.word	0x7261705f
   2f558:	7453206b 	.word	0x7453206b
   2f55c:	20657461 	.word	0x20657461
   2f560:	3c202121 	.word	0x3c202121
   2f564:	43203c3c 	.word	0x43203c3c
   2f568:	69746972 	.word	0x69746972
   2f56c:	206c6163 	.word	0x206c6163
   2f570:	74706544 	.word	0x74706544
   2f574:	69502068 	.word	0x69502068
   2f578:	6e6f7473 	.word	0x6e6f7473
   2f57c:	736f5020 	.word	0x736f5020
   2f580:	6f697469 	.word	0x6f697469
   2f584:	3e3e206e 	.word	0x3e3e206e
   2f588:	000a0a3e 	.word	0x000a0a3e
   2f58c:	54524155 	.word	0x54524155
   2f590:	414e4520 	.word	0x414e4520
   2f594:	44454c42 	.word	0x44454c42
   2f598:	0000000a 	.word	0x0000000a
   2f59c:	41544144 	.word	0x41544144
   2f5a0:	5f474f4c 	.word	0x5f474f4c
   2f5a4:	55424544 	.word	0x55424544
   2f5a8:	73692047 	.word	0x73692047
   2f5ac:	616e6520 	.word	0x616e6520
   2f5b0:	64656c62 	.word	0x64656c62
   2f5b4:	0000000a 	.word	0x0000000a
   2f5b8:	3c3c3c0a 	.word	0x3c3c3c0a
   2f5bc:	53455420 	.word	0x53455420
   2f5c0:	52505f54 	.word	0x52505f54
   2f5c4:	4c49464f 	.word	0x4c49464f
   2f5c8:	20325f45 	.word	0x20325f45
   2f5cc:	666f7250 	.word	0x666f7250
   2f5d0:	20656c69 	.word	0x20656c69
   2f5d4:	656c6573 	.word	0x656c6573
   2f5d8:	64657463 	.word	0x64657463
   2f5dc:	3e3e3e20 	.word	0x3e3e3e20
   2f5e0:	00000a0a 	.word	0x00000a0a
   2f5e4:	5441440a 	.word	0x5441440a
   2f5e8:	474f4c41 	.word	0x474f4c41
   2f5ec:	20524547 	.word	0x20524547
   2f5f0:	45203a3a 	.word	0x45203a3a
   2f5f4:	524f5252 	.word	0x524f5252
   2f5f8:	3c203a20 	.word	0x3c203a20
   2f5fc:	4453203c 	.word	0x4453203c
   2f600:	72614320 	.word	0x72614320
   2f604:	73692064 	.word	0x73692064
   2f608:	73696d20 	.word	0x73696d20
   2f60c:	676e6973 	.word	0x676e6973
   2f610:	003e3e20 	.word	0x003e3e20
   2f614:	5441440a 	.word	0x5441440a
   2f618:	474f4c41 	.word	0x474f4c41
   2f61c:	20524547 	.word	0x20524547
   2f620:	45203a3a 	.word	0x45203a3a
   2f624:	524f5252 	.word	0x524f5252
   2f628:	3c203a20 	.word	0x3c203a20
   2f62c:	434c203c 	.word	0x434c203c
   2f630:	6f4c2050 	.word	0x6f4c2050
   2f634:	69462067 	.word	0x69462067
   2f638:	7720656c 	.word	0x7720656c
   2f63c:	6e207361 	.word	0x6e207361
   2f640:	6320746f 	.word	0x6320746f
   2f644:	74616572 	.word	0x74616572
   2f648:	3e206465 	.word	0x3e206465
   2f64c:	000a0a3e 	.word	0x000a0a3e
   2f650:	45535341 	.word	0x45535341
   2f654:	46205452 	.word	0x46205452
   2f658:	454c4941 	.word	0x454c4941
   2f65c:	7b203a44 	.word	0x7b203a44
   2f660:	0000000a 	.word	0x0000000a
   2f664:	70786509 	.word	0x70786509
   2f668:	25093a72 	.word	0x25093a72
   2f66c:	00000a73 	.word	0x00000a73
   2f670:	6e756609 	.word	0x6e756609
   2f674:	25093a63 	.word	0x25093a63
   2f678:	00000a73 	.word	0x00000a73
   2f67c:	6c696609 	.word	0x6c696609
   2f680:	25093a65 	.word	0x25093a65
   2f684:	00000a73 	.word	0x00000a73
   2f688:	6e696c09 	.word	0x6e696c09
   2f68c:	25093a65 	.word	0x25093a65
   2f690:	00000a75 	.word	0x00000a75
   2f694:	00000a7d 	.word	0x00000a7d
   2f698:	48204d41 	.word	0x48204d41
   2f69c:	45204c41 	.word	0x45204c41
   2f6a0:	524f5252 	.word	0x524f5252
   2f6a4:	0a7b203a 	.word	0x0a7b203a
   2f6a8:	00000000 	.word	0x00000000
   2f6ac:	75666809 	.word	0x75666809
   2f6b0:	093a636e 	.word	0x093a636e
   2f6b4:	000a7325 	.word	0x000a7325
   2f6b8:	72726509 	.word	0x72726509
   2f6bc:	093a726f 	.word	0x093a726f
   2f6c0:	000a7525 	.word	0x000a7525
   2f6c4:	20433249 	.word	0x20433249
   2f6c8:	53203a3a 	.word	0x53203a3a
   2f6cc:	20444e45 	.word	0x20444e45
   2f6d0:	4f525245 	.word	0x4f525245
   2f6d4:	00000a52 	.word	0x00000a52
   2f6d8:	20433249 	.word	0x20433249
   2f6dc:	52203a3a 	.word	0x52203a3a
   2f6e0:	49454345 	.word	0x49454345
   2f6e4:	45204556 	.word	0x45204556
   2f6e8:	524f5252 	.word	0x524f5252
   2f6ec:	0000000a 	.word	0x0000000a
   2f6f0:	72732f2e 	.word	0x72732f2e
   2f6f4:	72612f63 	.word	0x72612f63
   2f6f8:	696d6574 	.word	0x696d6574
   2f6fc:	72612f73 	.word	0x72612f73
   2f700:	696d6574 	.word	0x696d6574
   2f704:	39695f73 	.word	0x39695f73
   2f708:	6e333036 	.word	0x6e333036
   2f70c:	0000632e 	.word	0x0000632e
   2f710:	685f6d61 	.word	0x685f6d61
   2f714:	675f6c61 	.word	0x675f6c61
   2f718:	5f6f6970 	.word	0x5f6f6970
   2f71c:	636e6970 	.word	0x636e6970
   2f720:	69666e6f 	.word	0x69666e6f
   2f724:	4d412867 	.word	0x4d412867
   2f728:	5053425f 	.word	0x5053425f
   2f72c:	4950475f 	.word	0x4950475f
   2f730:	52495f4f 	.word	0x52495f4f
   2f734:	55494449 	.word	0x55494449
   2f738:	4e4f5f4d 	.word	0x4e4f5f4d
   2f73c:	5f67202c 	.word	0x5f67202c
   2f740:	425f4d41 	.word	0x425f4d41
   2f744:	475f5053 	.word	0x475f5053
   2f748:	5f4f4950 	.word	0x5f4f4950
   2f74c:	44495249 	.word	0x44495249
   2f750:	5f4d5549 	.word	0x5f4d5549
   2f754:	00294e4f 	.word	0x00294e4f
   2f758:	685f6d61 	.word	0x685f6d61
   2f75c:	675f6c61 	.word	0x675f6c61
   2f760:	5f6f6970 	.word	0x5f6f6970
   2f764:	636e6970 	.word	0x636e6970
   2f768:	69666e6f 	.word	0x69666e6f
   2f76c:	4d412867 	.word	0x4d412867
   2f770:	5053425f 	.word	0x5053425f
   2f774:	4950475f 	.word	0x4950475f
   2f778:	52495f4f 	.word	0x52495f4f
   2f77c:	55494449 	.word	0x55494449
   2f780:	41555f4d 	.word	0x41555f4d
   2f784:	525f5452 	.word	0x525f5452
   2f788:	67202c58 	.word	0x67202c58
   2f78c:	5f4d415f 	.word	0x5f4d415f
   2f790:	5f505342 	.word	0x5f505342
   2f794:	4f495047 	.word	0x4f495047
   2f798:	4952495f 	.word	0x4952495f
   2f79c:	4d554944 	.word	0x4d554944
   2f7a0:	5241555f 	.word	0x5241555f
   2f7a4:	58525f54 	.word	0x58525f54
   2f7a8:	00000029 	.word	0x00000029
   2f7ac:	685f6d61 	.word	0x685f6d61
   2f7b0:	675f6c61 	.word	0x675f6c61
   2f7b4:	5f6f6970 	.word	0x5f6f6970
   2f7b8:	636e6970 	.word	0x636e6970
   2f7bc:	69666e6f 	.word	0x69666e6f
   2f7c0:	4d412867 	.word	0x4d412867
   2f7c4:	5053425f 	.word	0x5053425f
   2f7c8:	4950475f 	.word	0x4950475f
   2f7cc:	52495f4f 	.word	0x52495f4f
   2f7d0:	55494449 	.word	0x55494449
   2f7d4:	41555f4d 	.word	0x41555f4d
   2f7d8:	545f5452 	.word	0x545f5452
   2f7dc:	67202c58 	.word	0x67202c58
   2f7e0:	5f4d415f 	.word	0x5f4d415f
   2f7e4:	5f505342 	.word	0x5f505342
   2f7e8:	4f495047 	.word	0x4f495047
   2f7ec:	4952495f 	.word	0x4952495f
   2f7f0:	4d554944 	.word	0x4d554944
   2f7f4:	5241555f 	.word	0x5241555f
   2f7f8:	58545f54 	.word	0x58545f54
   2f7fc:	00000029 	.word	0x00000029
   2f800:	685f6d61 	.word	0x685f6d61
   2f804:	675f6c61 	.word	0x675f6c61
   2f808:	5f6f6970 	.word	0x5f6f6970
   2f80c:	636e6970 	.word	0x636e6970
   2f810:	69666e6f 	.word	0x69666e6f
   2f814:	4d412867 	.word	0x4d412867
   2f818:	5053425f 	.word	0x5053425f
   2f81c:	4950475f 	.word	0x4950475f
   2f820:	52495f4f 	.word	0x52495f4f
   2f824:	55494449 	.word	0x55494449
   2f828:	49525f4d 	.word	0x49525f4d
   2f82c:	495f474e 	.word	0x495f474e
   2f830:	202c444e 	.word	0x202c444e
   2f834:	4d415f67 	.word	0x4d415f67
   2f838:	5053425f 	.word	0x5053425f
   2f83c:	4950475f 	.word	0x4950475f
   2f840:	52495f4f 	.word	0x52495f4f
   2f844:	55494449 	.word	0x55494449
   2f848:	49525f4d 	.word	0x49525f4d
   2f84c:	495f474e 	.word	0x495f474e
   2f850:	0029444e 	.word	0x0029444e
   2f854:	685f6d61 	.word	0x685f6d61
   2f858:	675f6c61 	.word	0x675f6c61
   2f85c:	5f6f6970 	.word	0x5f6f6970
   2f860:	636e6970 	.word	0x636e6970
   2f864:	69666e6f 	.word	0x69666e6f
   2f868:	4d412867 	.word	0x4d412867
   2f86c:	5053425f 	.word	0x5053425f
   2f870:	4950475f 	.word	0x4950475f
   2f874:	52495f4f 	.word	0x52495f4f
   2f878:	55494449 	.word	0x55494449
   2f87c:	454e5f4d 	.word	0x454e5f4d
   2f880:	56415f54 	.word	0x56415f54
   2f884:	2c4c4941 	.word	0x2c4c4941
   2f888:	415f6720 	.word	0x415f6720
   2f88c:	53425f4d 	.word	0x53425f4d
   2f890:	50475f50 	.word	0x50475f50
   2f894:	495f4f49 	.word	0x495f4f49
   2f898:	49444952 	.word	0x49444952
   2f89c:	4e5f4d55 	.word	0x4e5f4d55
   2f8a0:	415f5445 	.word	0x415f5445
   2f8a4:	4c494156 	.word	0x4c494156
   2f8a8:	00000029 	.word	0x00000029
   2f8ac:	72732f2e 	.word	0x72732f2e
   2f8b0:	72612f63 	.word	0x72612f63
   2f8b4:	696d6574 	.word	0x696d6574
   2f8b8:	72612f73 	.word	0x72612f73
   2f8bc:	696d6574 	.word	0x696d6574
   2f8c0:	6f695f73 	.word	0x6f695f73
   2f8c4:	00632e6d 	.word	0x00632e6d
   2f8c8:	685f6d61 	.word	0x685f6d61
   2f8cc:	695f6c61 	.word	0x695f6c61
   2f8d0:	695f6d6f 	.word	0x695f6d6f
   2f8d4:	6974696e 	.word	0x6974696e
   2f8d8:	7a696c61 	.word	0x7a696c61
   2f8dc:	6f692865 	.word	0x6f692865
   2f8e0:	6d3e2d6d 	.word	0x6d3e2d6d
   2f8e4:	6c75646f 	.word	0x6c75646f
   2f8e8:	26202c65 	.word	0x26202c65
   2f8ec:	2d6d6f69 	.word	0x2d6d6f69
   2f8f0:	6e61683e 	.word	0x6e61683e
   2f8f4:	29656c64 	.word	0x29656c64
   2f8f8:	00000000 	.word	0x00000000
   2f8fc:	685f6d61 	.word	0x685f6d61
   2f900:	695f6c61 	.word	0x695f6c61
   2f904:	705f6d6f 	.word	0x705f6d6f
   2f908:	7265776f 	.word	0x7265776f
   2f90c:	7274635f 	.word	0x7274635f
   2f910:	6f69286c 	.word	0x6f69286c
   2f914:	683e2d6d 	.word	0x683e2d6d
   2f918:	6c646e61 	.word	0x6c646e61
   2f91c:	41202c65 	.word	0x41202c65
   2f920:	41485f4d 	.word	0x41485f4d
   2f924:	59535f4c 	.word	0x59535f4c
   2f928:	52544353 	.word	0x52544353
   2f92c:	41575f4c 	.word	0x41575f4c
   2f930:	202c454b 	.word	0x202c454b
   2f934:	736c6166 	.word	0x736c6166
   2f938:	00002965 	.word	0x00002965
   2f93c:	685f6d61 	.word	0x685f6d61
   2f940:	695f6c61 	.word	0x695f6c61
   2f944:	635f6d6f 	.word	0x635f6d6f
   2f948:	69666e6f 	.word	0x69666e6f
   2f94c:	65727567 	.word	0x65727567
   2f950:	6d6f6928 	.word	0x6d6f6928
   2f954:	61683e2d 	.word	0x61683e2d
   2f958:	656c646e 	.word	0x656c646e
   2f95c:	6926202c 	.word	0x6926202c
   2f960:	3e2d6d6f 	.word	0x3e2d6d6f
   2f964:	666e6f63 	.word	0x666e6f63
   2f968:	00296769 	.word	0x00296769
   2f96c:	685f6d61 	.word	0x685f6d61
   2f970:	695f6c61 	.word	0x695f6c61
   2f974:	655f6d6f 	.word	0x655f6d6f
   2f978:	6c62616e 	.word	0x6c62616e
   2f97c:	6f692865 	.word	0x6f692865
   2f980:	683e2d6d 	.word	0x683e2d6d
   2f984:	6c646e61 	.word	0x6c646e61
   2f988:	00002965 	.word	0x00002965
   2f98c:	685f6d61 	.word	0x685f6d61
   2f990:	695f6c61 	.word	0x695f6c61
   2f994:	645f6d6f 	.word	0x645f6d6f
   2f998:	62617369 	.word	0x62617369
   2f99c:	6928656c 	.word	0x6928656c
   2f9a0:	3e2d6d6f 	.word	0x3e2d6d6f
   2f9a4:	646e6168 	.word	0x646e6168
   2f9a8:	0029656c 	.word	0x0029656c
   2f9ac:	685f6d61 	.word	0x685f6d61
   2f9b0:	695f6c61 	.word	0x695f6c61
   2f9b4:	705f6d6f 	.word	0x705f6d6f
   2f9b8:	7265776f 	.word	0x7265776f
   2f9bc:	7274635f 	.word	0x7274635f
   2f9c0:	6f69286c 	.word	0x6f69286c
   2f9c4:	683e2d6d 	.word	0x683e2d6d
   2f9c8:	6c646e61 	.word	0x6c646e61
   2f9cc:	41202c65 	.word	0x41202c65
   2f9d0:	41485f4d 	.word	0x41485f4d
   2f9d4:	59535f4c 	.word	0x59535f4c
   2f9d8:	52544353 	.word	0x52544353
   2f9dc:	45445f4c 	.word	0x45445f4c
   2f9e0:	4c535045 	.word	0x4c535045
   2f9e4:	2c504545 	.word	0x2c504545
   2f9e8:	6c616620 	.word	0x6c616620
   2f9ec:	00296573 	.word	0x00296573
   2f9f0:	685f6d61 	.word	0x685f6d61
   2f9f4:	695f6c61 	.word	0x695f6c61
   2f9f8:	755f6d6f 	.word	0x755f6d6f
   2f9fc:	696e696e 	.word	0x696e696e
   2fa00:	6c616974 	.word	0x6c616974
   2fa04:	28657a69 	.word	0x28657a69
   2fa08:	2d6d6f69 	.word	0x2d6d6f69
   2fa0c:	6e61683e 	.word	0x6e61683e
   2fa10:	29656c64 	.word	0x29656c64
   2fa14:	00000000 	.word	0x00000000
   2fa18:	72732f2e 	.word	0x72732f2e
   2fa1c:	72612f63 	.word	0x72612f63
   2fa20:	696d6574 	.word	0x696d6574
   2fa24:	72612f73 	.word	0x72612f73
   2fa28:	696d6574 	.word	0x696d6574
   2fa2c:	636d5f73 	.word	0x636d5f73
   2fa30:	00632e75 	.word	0x00632e75
   2fa34:	685f6d61 	.word	0x685f6d61
   2fa38:	635f6c61 	.word	0x635f6c61
   2fa3c:	65676b6c 	.word	0x65676b6c
   2fa40:	6f635f6e 	.word	0x6f635f6e
   2fa44:	6f72746e 	.word	0x6f72746e
   2fa48:	4d41286c 	.word	0x4d41286c
   2fa4c:	4c41485f 	.word	0x4c41485f
   2fa50:	4b4c435f 	.word	0x4b4c435f
   2fa54:	5f4e4547 	.word	0x5f4e4547
   2fa58:	544e4f43 	.word	0x544e4f43
   2fa5c:	5f4c4f52 	.word	0x5f4c4f52
   2fa60:	43535953 	.word	0x43535953
   2fa64:	4d5f4b4c 	.word	0x4d5f4b4c
   2fa68:	202c5841 	.word	0x202c5841
   2fa6c:	00002930 	.word	0x00002930
   2fa70:	685f6d61 	.word	0x685f6d61
   2fa74:	635f6c61 	.word	0x635f6c61
   2fa78:	65686361 	.word	0x65686361
   2fa7c:	6c727463 	.word	0x6c727463
   2fa80:	6e6f635f 	.word	0x6e6f635f
   2fa84:	28676966 	.word	0x28676966
   2fa88:	5f6d6126 	.word	0x5f6d6126
   2fa8c:	5f6c6168 	.word	0x5f6c6168
   2fa90:	68636163 	.word	0x68636163
   2fa94:	72746365 	.word	0x72746365
   2fa98:	65645f6c 	.word	0x65645f6c
   2fa9c:	6c756166 	.word	0x6c756166
   2faa0:	00297374 	.word	0x00297374
   2faa4:	685f6d61 	.word	0x685f6d61
   2faa8:	635f6c61 	.word	0x635f6c61
   2faac:	65686361 	.word	0x65686361
   2fab0:	6c727463 	.word	0x6c727463
   2fab4:	616e655f 	.word	0x616e655f
   2fab8:	28656c62 	.word	0x28656c62
   2fabc:	00000029 	.word	0x00000029
   2fac0:	685f6d61 	.word	0x685f6d61
   2fac4:	625f6c61 	.word	0x625f6c61
   2fac8:	74737275 	.word	0x74737275
   2facc:	646f6d5f 	.word	0x646f6d5f
   2fad0:	6e695f65 	.word	0x6e695f65
   2fad4:	61697469 	.word	0x61697469
   2fad8:	657a696c 	.word	0x657a696c
   2fadc:	75622628 	.word	0x75622628
   2fae0:	5f747372 	.word	0x5f747372
   2fae4:	69617661 	.word	0x69617661
   2fae8:	0000296c 	.word	0x0000296c
   2faec:	72732f2e 	.word	0x72732f2e
   2faf0:	72612f63 	.word	0x72612f63
   2faf4:	696d6574 	.word	0x696d6574
   2faf8:	72612f73 	.word	0x72612f73
   2fafc:	696d6574 	.word	0x696d6574
   2fb00:	69705f73 	.word	0x69705f73
   2fb04:	6e6f7473 	.word	0x6e6f7473
   2fb08:	0000632e 	.word	0x0000632e
   2fb0c:	685f6d61 	.word	0x685f6d61
   2fb10:	675f6c61 	.word	0x675f6c61
   2fb14:	5f6f6970 	.word	0x5f6f6970
   2fb18:	636e6970 	.word	0x636e6970
   2fb1c:	69666e6f 	.word	0x69666e6f
   2fb20:	4d412867 	.word	0x4d412867
   2fb24:	5053425f 	.word	0x5053425f
   2fb28:	4950475f 	.word	0x4950475f
   2fb2c:	4f495f4f 	.word	0x4f495f4f
   2fb30:	535f324d 	.word	0x535f324d
   2fb34:	202c4c43 	.word	0x202c4c43
   2fb38:	4d415f67 	.word	0x4d415f67
   2fb3c:	5053425f 	.word	0x5053425f
   2fb40:	4950475f 	.word	0x4950475f
   2fb44:	4f495f4f 	.word	0x4f495f4f
   2fb48:	535f324d 	.word	0x535f324d
   2fb4c:	00294c43 	.word	0x00294c43
   2fb50:	685f6d61 	.word	0x685f6d61
   2fb54:	675f6c61 	.word	0x675f6c61
   2fb58:	5f6f6970 	.word	0x5f6f6970
   2fb5c:	636e6970 	.word	0x636e6970
   2fb60:	69666e6f 	.word	0x69666e6f
   2fb64:	4d412867 	.word	0x4d412867
   2fb68:	5053425f 	.word	0x5053425f
   2fb6c:	4950475f 	.word	0x4950475f
   2fb70:	4f495f4f 	.word	0x4f495f4f
   2fb74:	535f324d 	.word	0x535f324d
   2fb78:	202c4144 	.word	0x202c4144
   2fb7c:	4d415f67 	.word	0x4d415f67
   2fb80:	5053425f 	.word	0x5053425f
   2fb84:	4950475f 	.word	0x4950475f
   2fb88:	4f495f4f 	.word	0x4f495f4f
   2fb8c:	535f324d 	.word	0x535f324d
   2fb90:	00294144 	.word	0x00294144
   2fb94:	685f6d61 	.word	0x685f6d61
   2fb98:	675f6c61 	.word	0x675f6c61
   2fb9c:	5f6f6970 	.word	0x5f6f6970
   2fba0:	636e6970 	.word	0x636e6970
   2fba4:	69666e6f 	.word	0x69666e6f
   2fba8:	6f6d2867 	.word	0x6f6d2867
   2fbac:	656c7564 	.word	0x656c7564
   2fbb0:	776f702e 	.word	0x776f702e
   2fbb4:	702e7265 	.word	0x702e7265
   2fbb8:	202c6e69 	.word	0x202c6e69
   2fbbc:	646f6d2a 	.word	0x646f6d2a
   2fbc0:	2e656c75 	.word	0x2e656c75
   2fbc4:	65776f70 	.word	0x65776f70
   2fbc8:	69702e72 	.word	0x69702e72
   2fbcc:	6e6f436e 	.word	0x6e6f436e
   2fbd0:	29676966 	.word	0x29676966
   2fbd4:	00000000 	.word	0x00000000
   2fbd8:	72732f2e 	.word	0x72732f2e
   2fbdc:	72612f63 	.word	0x72612f63
   2fbe0:	696d6574 	.word	0x696d6574
   2fbe4:	72612f73 	.word	0x72612f73
   2fbe8:	696d6574 	.word	0x696d6574
   2fbec:	75735f73 	.word	0x75735f73
   2fbf0:	63726570 	.word	0x63726570
   2fbf4:	632e7061 	.word	0x632e7061
   2fbf8:	00000000 	.word	0x00000000
   2fbfc:	685f6d61 	.word	0x685f6d61
   2fc00:	675f6c61 	.word	0x675f6c61
   2fc04:	5f6f6970 	.word	0x5f6f6970
   2fc08:	636e6970 	.word	0x636e6970
   2fc0c:	69666e6f 	.word	0x69666e6f
   2fc10:	6f6d2867 	.word	0x6f6d2867
   2fc14:	656c7564 	.word	0x656c7564
   2fc18:	7568732e 	.word	0x7568732e
   2fc1c:	776f6474 	.word	0x776f6474
   2fc20:	69702e6e 	.word	0x69702e6e
   2fc24:	2a202c6e 	.word	0x2a202c6e
   2fc28:	75646f6d 	.word	0x75646f6d
   2fc2c:	732e656c 	.word	0x732e656c
   2fc30:	64747568 	.word	0x64747568
   2fc34:	2e6e776f 	.word	0x2e6e776f
   2fc38:	436e6970 	.word	0x436e6970
   2fc3c:	69666e6f 	.word	0x69666e6f
   2fc40:	00002967 	.word	0x00002967
   2fc44:	685f6d61 	.word	0x685f6d61
   2fc48:	675f6c61 	.word	0x675f6c61
   2fc4c:	5f6f6970 	.word	0x5f6f6970
   2fc50:	636e6970 	.word	0x636e6970
   2fc54:	69666e6f 	.word	0x69666e6f
   2fc58:	6f6d2867 	.word	0x6f6d2867
   2fc5c:	656c7564 	.word	0x656c7564
   2fc60:	6f6f672e 	.word	0x6f6f672e
   2fc64:	69702e64 	.word	0x69702e64
   2fc68:	2a202c6e 	.word	0x2a202c6e
   2fc6c:	75646f6d 	.word	0x75646f6d
   2fc70:	672e656c 	.word	0x672e656c
   2fc74:	2e646f6f 	.word	0x2e646f6f
   2fc78:	436e6970 	.word	0x436e6970
   2fc7c:	69666e6f 	.word	0x69666e6f
   2fc80:	00002967 	.word	0x00002967
   2fc84:	61706143 	.word	0x61706143
   2fc88:	6f746963 	.word	0x6f746963
   2fc8c:	63207372 	.word	0x63207372
   2fc90:	67726168 	.word	0x67726168
   2fc94:	000a6465 	.word	0x000a6465
   2fc98:	61706143 	.word	0x61706143
   2fc9c:	6f746963 	.word	0x6f746963
   2fca0:	68632072 	.word	0x68632072
   2fca4:	69677261 	.word	0x69677261
   2fca8:	2e2e676e 	.word	0x2e2e676e
   2fcac:	00000a2e 	.word	0x00000a2e
   2fcb0:	72732f2e 	.word	0x72732f2e
   2fcb4:	72612f63 	.word	0x72612f63
   2fcb8:	696d6574 	.word	0x696d6574
   2fcbc:	72612f73 	.word	0x72612f73
   2fcc0:	696d6574 	.word	0x696d6574
   2fcc4:	61755f73 	.word	0x61755f73
   2fcc8:	632e7472 	.word	0x632e7472
   2fccc:	00000000 	.word	0x00000000
   2fcd0:	685f6d61 	.word	0x685f6d61
   2fcd4:	755f6c61 	.word	0x755f6c61
   2fcd8:	5f747261 	.word	0x5f747261
   2fcdc:	74696e69 	.word	0x74696e69
   2fce0:	696c6169 	.word	0x696c6169
   2fce4:	7528657a 	.word	0x7528657a
   2fce8:	2d747261 	.word	0x2d747261
   2fcec:	646f6d3e 	.word	0x646f6d3e
   2fcf0:	2c656c75 	.word	0x2c656c75
   2fcf4:	61752620 	.word	0x61752620
   2fcf8:	3e2d7472 	.word	0x3e2d7472
   2fcfc:	646e6168 	.word	0x646e6168
   2fd00:	0029656c 	.word	0x0029656c
   2fd04:	685f6d61 	.word	0x685f6d61
   2fd08:	755f6c61 	.word	0x755f6c61
   2fd0c:	5f747261 	.word	0x5f747261
   2fd10:	65776f70 	.word	0x65776f70
   2fd14:	6f635f72 	.word	0x6f635f72
   2fd18:	6f72746e 	.word	0x6f72746e
   2fd1c:	6175286c 	.word	0x6175286c
   2fd20:	3e2d7472 	.word	0x3e2d7472
   2fd24:	646e6168 	.word	0x646e6168
   2fd28:	202c656c 	.word	0x202c656c
   2fd2c:	485f4d41 	.word	0x485f4d41
   2fd30:	535f4c41 	.word	0x535f4c41
   2fd34:	54435359 	.word	0x54435359
   2fd38:	575f4c52 	.word	0x575f4c52
   2fd3c:	2c454b41 	.word	0x2c454b41
   2fd40:	6c616620 	.word	0x6c616620
   2fd44:	00296573 	.word	0x00296573
   2fd48:	685f6d61 	.word	0x685f6d61
   2fd4c:	755f6c61 	.word	0x755f6c61
   2fd50:	5f747261 	.word	0x5f747261
   2fd54:	666e6f63 	.word	0x666e6f63
   2fd58:	72756769 	.word	0x72756769
   2fd5c:	61752865 	.word	0x61752865
   2fd60:	3e2d7472 	.word	0x3e2d7472
   2fd64:	646e6168 	.word	0x646e6168
   2fd68:	202c656c 	.word	0x202c656c
   2fd6c:	72617526 	.word	0x72617526
   2fd70:	633e2d74 	.word	0x633e2d74
   2fd74:	69666e6f 	.word	0x69666e6f
   2fd78:	00002967 	.word	0x00002967
   2fd7c:	54524155 	.word	0x54524155
   2fd80:	61557820 	.word	0x61557820
   2fd84:	76457472 	.word	0x76457472
   2fd88:	48746e65 	.word	0x48746e65
   2fd8c:	6c646e61 	.word	0x6c646e61
   2fd90:	203a3a65 	.word	0x203a3a65
   2fd94:	4f525245 	.word	0x4f525245
   2fd98:	00000a52 	.word	0x00000a52
   2fd9c:	54524155 	.word	0x54524155
   2fda0:	61557820 	.word	0x61557820
   2fda4:	76457472 	.word	0x76457472
   2fda8:	48746e65 	.word	0x48746e65
   2fdac:	6c646e61 	.word	0x6c646e61
   2fdb0:	203a3a65 	.word	0x203a3a65
   2fdb4:	61657243 	.word	0x61657243
   2fdb8:	0a646574 	.word	0x0a646574
   2fdbc:	00000000 	.word	0x00000000
   2fdc0:	64697249 	.word	0x64697249
   2fdc4:	206d7569 	.word	0x206d7569
   2fdc8:	69203a3a 	.word	0x69203a3a
   2fdcc:	6974696e 	.word	0x6974696e
   2fdd0:	7a696c61 	.word	0x7a696c61
   2fdd4:	000a6465 	.word	0x000a6465
   2fdd8:	685f6d61 	.word	0x685f6d61
   2fddc:	755f6c61 	.word	0x755f6c61
   2fde0:	5f747261 	.word	0x5f747261
   2fde4:	665f7874 	.word	0x665f7874
   2fde8:	6873756c 	.word	0x6873756c
   2fdec:	72617528 	.word	0x72617528
   2fdf0:	683e2d74 	.word	0x683e2d74
   2fdf4:	6c646e61 	.word	0x6c646e61
   2fdf8:	00002965 	.word	0x00002965
   2fdfc:	685f6d61 	.word	0x685f6d61
   2fe00:	755f6c61 	.word	0x755f6c61
   2fe04:	5f747261 	.word	0x5f747261
   2fe08:	6e617274 	.word	0x6e617274
   2fe0c:	72656673 	.word	0x72656673
   2fe10:	72617528 	.word	0x72617528
   2fe14:	683e2d74 	.word	0x683e2d74
   2fe18:	6c646e61 	.word	0x6c646e61
   2fe1c:	26202c65 	.word	0x26202c65
   2fe20:	6e617274 	.word	0x6e617274
   2fe24:	72656673 	.word	0x72656673
   2fe28:	00000029 	.word	0x00000029
   2fe2c:	54524155 	.word	0x54524155
   2fe30:	203a3a20 	.word	0x203a3a20
   2fe34:	65636552 	.word	0x65636552
   2fe38:	20657669 	.word	0x20657669
   2fe3c:	6f727265 	.word	0x6f727265
   2fe40:	00000a72 	.word	0x00000a72
   2fe44:	72732f2e 	.word	0x72732f2e
   2fe48:	72612f63 	.word	0x72612f63
   2fe4c:	696d6574 	.word	0x696d6574
   2fe50:	72612f73 	.word	0x72612f73
   2fe54:	696d6574 	.word	0x696d6574
   2fe58:	62755f73 	.word	0x62755f73
   2fe5c:	5f786f6c 	.word	0x5f786f6c
   2fe60:	2e633269 	.word	0x2e633269
   2fe64:	00000063 	.word	0x00000063
   2fe68:	685f6d61 	.word	0x685f6d61
   2fe6c:	675f6c61 	.word	0x675f6c61
   2fe70:	5f6f6970 	.word	0x5f6f6970
   2fe74:	636e6970 	.word	0x636e6970
   2fe78:	69666e6f 	.word	0x69666e6f
   2fe7c:	6f6d2867 	.word	0x6f6d2867
   2fe80:	656c7564 	.word	0x656c7564
   2fe84:	7478652e 	.word	0x7478652e
   2fe88:	2e746e69 	.word	0x2e746e69
   2fe8c:	2c6e6970 	.word	0x2c6e6970
   2fe90:	6f6d2a20 	.word	0x6f6d2a20
   2fe94:	656c7564 	.word	0x656c7564
   2fe98:	7478652e 	.word	0x7478652e
   2fe9c:	2e746e69 	.word	0x2e746e69
   2fea0:	436e6970 	.word	0x436e6970
   2fea4:	69666e6f 	.word	0x69666e6f
   2fea8:	00002967 	.word	0x00002967
   2feac:	685f6d61 	.word	0x685f6d61
   2feb0:	675f6c61 	.word	0x675f6c61
   2feb4:	5f6f6970 	.word	0x5f6f6970
   2feb8:	636e6970 	.word	0x636e6970
   2febc:	69666e6f 	.word	0x69666e6f
   2fec0:	4d412867 	.word	0x4d412867
   2fec4:	5053425f 	.word	0x5053425f
   2fec8:	4950475f 	.word	0x4950475f
   2fecc:	4f495f4f 	.word	0x4f495f4f
   2fed0:	535f314d 	.word	0x535f314d
   2fed4:	202c4c43 	.word	0x202c4c43
   2fed8:	4d415f67 	.word	0x4d415f67
   2fedc:	5053425f 	.word	0x5053425f
   2fee0:	4950475f 	.word	0x4950475f
   2fee4:	4f495f4f 	.word	0x4f495f4f
   2fee8:	535f314d 	.word	0x535f314d
   2feec:	00294c43 	.word	0x00294c43
   2fef0:	685f6d61 	.word	0x685f6d61
   2fef4:	675f6c61 	.word	0x675f6c61
   2fef8:	5f6f6970 	.word	0x5f6f6970
   2fefc:	636e6970 	.word	0x636e6970
   2ff00:	69666e6f 	.word	0x69666e6f
   2ff04:	4d412867 	.word	0x4d412867
   2ff08:	5053425f 	.word	0x5053425f
   2ff0c:	4950475f 	.word	0x4950475f
   2ff10:	4f495f4f 	.word	0x4f495f4f
   2ff14:	535f314d 	.word	0x535f314d
   2ff18:	202c4144 	.word	0x202c4144
   2ff1c:	4d415f67 	.word	0x4d415f67
   2ff20:	5053425f 	.word	0x5053425f
   2ff24:	4950475f 	.word	0x4950475f
   2ff28:	4f495f4f 	.word	0x4f495f4f
   2ff2c:	535f314d 	.word	0x535f314d
   2ff30:	00294144 	.word	0x00294144
   2ff34:	6174530a 	.word	0x6174530a
   2ff38:	69206b63 	.word	0x69206b63
   2ff3c:	6675736e 	.word	0x6675736e
   2ff40:	69636966 	.word	0x69636966
   2ff44:	20746e65 	.word	0x20746e65
   2ff48:	65657266 	.word	0x65657266
   2ff4c:	6d656d20 	.word	0x6d656d20
   2ff50:	0a79726f 	.word	0x0a79726f
   2ff54:	00000000 	.word	0x00000000
   2ff58:	6174530a 	.word	0x6174530a
   2ff5c:	6f206b63 	.word	0x6f206b63
   2ff60:	66726576 	.word	0x66726576
   2ff64:	0a776f6c 	.word	0x0a776f6c
   2ff68:	00000000 	.word	0x00000000
   2ff6c:	206e614a 	.word	0x206e614a
   2ff70:	32203232 	.word	0x32203232
   2ff74:	00353230 	.word	0x00353230
   2ff78:	434c0a0a 	.word	0x434c0a0a
   2ff7c:	72502050 	.word	0x72502050
   2ff80:	6c69666f 	.word	0x6c69666f
   2ff84:	49207265 	.word	0x49207265
   2ff88:	726f666e 	.word	0x726f666e
   2ff8c:	6974616d 	.word	0x6974616d
   2ff90:	000a6e6f 	.word	0x000a6e6f
   2ff94:	73795309 	.word	0x73795309
   2ff98:	206d6574 	.word	0x206d6574
   2ff9c:	3a094449 	.word	0x3a094449
   2ffa0:	0a752520 	.word	0x0a752520
   2ffa4:	00000000 	.word	0x00000000
   2ffa8:	50434c09 	.word	0x50434c09
   2ffac:	72694620 	.word	0x72694620
   2ffb0:	7261776d 	.word	0x7261776d
   2ffb4:	203a0965 	.word	0x203a0965
   2ffb8:	252e7525 	.word	0x252e7525
   2ffbc:	75252e75 	.word	0x75252e75
   2ffc0:	7665642d 	.word	0x7665642d
   2ffc4:	0000000a 	.word	0x0000000a
   2ffc8:	72694609 	.word	0x72694609
   2ffcc:	7261776d 	.word	0x7261776d
   2ffd0:	61442065 	.word	0x61442065
   2ffd4:	3a096574 	.word	0x3a096574
   2ffd8:	2e752520 	.word	0x2e752520
   2ffdc:	252e7525 	.word	0x252e7525
   2ffe0:	00000a75 	.word	0x00000a75
   2ffe4:	303a3431 	.word	0x303a3431
   2ffe8:	35353a34 	.word	0x35353a34
   2ffec:	00000000 	.word	0x00000000
   2fff0:	72694609 	.word	0x72694609
   2fff4:	7261776d 	.word	0x7261776d
   2fff8:	69542065 	.word	0x69542065
   2fffc:	3a09656d 	.word	0x3a09656d
   30000:	0a732520 	.word	0x0a732520
   30004:	00000000 	.word	0x00000000
   30008:	50434c09 	.word	0x50434c09
   3000c:	72615620 	.word	0x72615620
   30010:	746e6169 	.word	0x746e6169
   30014:	25203a09 	.word	0x25203a09
   30018:	00000a75 	.word	0x00000a75
   3001c:	50434c09 	.word	0x50434c09
   30020:	72655320 	.word	0x72655320
   30024:	096c6169 	.word	0x096c6169
   30028:	6325203a 	.word	0x6325203a
   3002c:	75257525 	.word	0x75257525
   30030:	0000000a 	.word	0x0000000a
   30034:	50434c09 	.word	0x50434c09
   30038:	79685020 	.word	0x79685020
   3003c:	61636973 	.word	0x61636973
   30040:	6170206c 	.word	0x6170206c
   30044:	656d6172 	.word	0x656d6172
   30048:	73726574 	.word	0x73726574
   3004c:	0000000a 	.word	0x0000000a
   30050:	69747345 	.word	0x69747345
   30054:	6574616d 	.word	0x6574616d
   30058:	614d2064 	.word	0x614d2064
   3005c:	3a097373 	.word	0x3a097373
   30060:	332e2520 	.word	0x332e2520
   30064:	676b2066 	.word	0x676b2066
   30068:	2e25202c 	.word	0x2e25202c
   3006c:	6c206633 	.word	0x6c206633
   30070:	000a7362 	.word	0x000a7362
   30074:	696e694d 	.word	0x696e694d
   30078:	206d756d 	.word	0x206d756d
   3007c:	756c6f56 	.word	0x756c6f56
   30080:	3a09656d 	.word	0x3a09656d
   30084:	332e2520 	.word	0x332e2520
   30088:	c26d2066 	.word	0xc26d2066
   3008c:	25202cb3 	.word	0x25202cb3
   30090:	2066332e 	.word	0x2066332e
   30094:	b3c26e69 	.word	0xb3c26e69
   30098:	0000000a 	.word	0x0000000a
   3009c:	6978614d 	.word	0x6978614d
   300a0:	206d756d 	.word	0x206d756d
   300a4:	736e6544 	.word	0x736e6544
   300a8:	09797469 	.word	0x09797469
   300ac:	2e25203a 	.word	0x2e25203a
   300b0:	6b206633 	.word	0x6b206633
   300b4:	c26d2f67 	.word	0xc26d2f67
   300b8:	25202cb3 	.word	0x25202cb3
   300bc:	2066332e 	.word	0x2066332e
   300c0:	2f73626c 	.word	0x2f73626c
   300c4:	b3c26e69 	.word	0xb3c26e69
   300c8:	0000000a 	.word	0x0000000a
   300cc:	706f7473 	.word	0x706f7473
   300d0:	0000000d 	.word	0x0000000d
   300d4:	3a203953 	.word	0x3a203953
   300d8:	6d615320 	.word	0x6d615320
   300dc:	6e696c70 	.word	0x6e696c70
   300e0:	74532067 	.word	0x74532067
   300e4:	6570706f 	.word	0x6570706f
   300e8:	52202c64 	.word	0x52202c64
   300ec:	0a534f54 	.word	0x0a534f54
   300f0:	00000000 	.word	0x00000000
   300f4:	3a203953 	.word	0x3a203953
   300f8:	6d615320 	.word	0x6d615320
   300fc:	6e696c70 	.word	0x6e696c70
   30100:	69642067 	.word	0x69642067
   30104:	6f6e2064 	.word	0x6f6e2064
   30108:	74732074 	.word	0x74732074
   3010c:	202c706f 	.word	0x202c706f
   30110:	534f5452 	.word	0x534f5452
   30114:	0000000a 	.word	0x0000000a
   30118:	0d726576 	.word	0x0d726576
   3011c:	00000000 	.word	0x00000000
   30120:	0000003d 	.word	0x0000003d
   30124:	54203953 	.word	0x54203953
   30128:	65706d65 	.word	0x65706d65
   3012c:	75746172 	.word	0x75746172
   30130:	53206572 	.word	0x53206572
   30134:	6f736e65 	.word	0x6f736e65
   30138:	00000a72 	.word	0x00000a72
   3013c:	44494d09 	.word	0x44494d09
   30140:	00203a09 	.word	0x00203a09
   30144:	09304309 	.word	0x09304309
   30148:	2e25203a 	.word	0x2e25203a
   3014c:	000a6637 	.word	0x000a6637
   30150:	09314309 	.word	0x09314309
   30154:	2e25203a 	.word	0x2e25203a
   30158:	000a6637 	.word	0x000a6637
   3015c:	09324309 	.word	0x09324309
   30160:	2e25203a 	.word	0x2e25203a
   30164:	000a6637 	.word	0x000a6637
   30168:	09334309 	.word	0x09334309
   3016c:	2e25203a 	.word	0x2e25203a
   30170:	000a6637 	.word	0x000a6637
   30174:	09305209 	.word	0x09305209
   30178:	2e25203a 	.word	0x2e25203a
   3017c:	000a6637 	.word	0x000a6637
   30180:	65764109 	.word	0x65764109
   30184:	65676172 	.word	0x65676172
   30188:	25203a09 	.word	0x25203a09
   3018c:	00000a75 	.word	0x00000a75
   30190:	44495509 	.word	0x44495509
   30194:	00203a09 	.word	0x00203a09
   30198:	20574609 	.word	0x20574609
   3019c:	09726556 	.word	0x09726556
   301a0:	0000203a 	.word	0x0000203a
   301a4:	61745309 	.word	0x61745309
   301a8:	09737574 	.word	0x09737574
   301ac:	0000203a 	.word	0x0000203a
   301b0:	3a203953 	.word	0x3a203953
   301b4:	6d6f5320 	.word	0x6d6f5320
   301b8:	69687465 	.word	0x69687465
   301bc:	7720676e 	.word	0x7720676e
   301c0:	20746e65 	.word	0x20746e65
   301c4:	6e6f7277 	.word	0x6e6f7277
   301c8:	00000a67 	.word	0x00000a67
   301cc:	3a203953 	.word	0x3a203953
   301d0:	6d615320 	.word	0x6d615320
   301d4:	6e696c70 	.word	0x6e696c70
   301d8:	74532067 	.word	0x74532067
   301dc:	6570706f 	.word	0x6570706f
   301e0:	00000a64 	.word	0x00000a64
   301e4:	3a203953 	.word	0x3a203953
   301e8:	6d615320 	.word	0x6d615320
   301ec:	6e696c70 	.word	0x6e696c70
   301f0:	69642067 	.word	0x69642067
   301f4:	6f6e2064 	.word	0x6f6e2064
   301f8:	74732074 	.word	0x74732074
   301fc:	000a706f 	.word	0x000a706f
   30200:	54203953 	.word	0x54203953
   30204:	65706d65 	.word	0x65706d65
   30208:	75746172 	.word	0x75746172
   3020c:	53206572 	.word	0x53206572
   30210:	6f736e65 	.word	0x6f736e65
   30214:	73692072 	.word	0x73692072
   30218:	696e6920 	.word	0x696e6920
   3021c:	6c616974 	.word	0x6c616974
   30220:	64657a69 	.word	0x64657a69
   30224:	00000a0a 	.word	0x00000a0a
   30228:	706d6173 	.word	0x706d6173
   3022c:	000d656c 	.word	0x000d656c
   30230:	586c394b 	.word	0x586c394b
   30234:	52203a3a 	.word	0x52203a3a
   30238:	69656365 	.word	0x69656365
   3023c:	3a646576 	.word	0x3a646576
   30240:	52524520 	.word	0x52524520
   30244:	2820524f 	.word	0x2820524f
   30248:	20296425 	.word	0x20296425
   3024c:	6b207461 	.word	0x6b207461
   30250:	656c6c65 	.word	0x656c6c65
   30254:	00000a72 	.word	0x00000a72
   30258:	4c394b0a 	.word	0x4c394b0a
   3025c:	72502058 	.word	0x72502058
   30260:	75737365 	.word	0x75737365
   30264:	53206572 	.word	0x53206572
   30268:	6f736e65 	.word	0x6f736e65
   3026c:	00000a72 	.word	0x00000a72
   30270:	72694609 	.word	0x72694609
   30274:	7261776d 	.word	0x7261776d
   30278:	65562065 	.word	0x65562065
   3027c:	203a0972 	.word	0x203a0972
   30280:	00000000 	.word	0x00000000
   30284:	6553090a 	.word	0x6553090a
   30288:	6c616972 	.word	0x6c616972
   3028c:	6d754e20 	.word	0x6d754e20
   30290:	09726562 	.word	0x09726562
   30294:	0000203a 	.word	0x0000203a
   30298:	002e7525 	.word	0x002e7525
   3029c:	65725009 	.word	0x65725009
   302a0:	72757373 	.word	0x72757373
   302a4:	203a0965 	.word	0x203a0965
   302a8:	00000000 	.word	0x00000000
   302ac:	352e3025 	.word	0x352e3025
   302b0:	61622066 	.word	0x61622066
   302b4:	00000072 	.word	0x00000072
   302b8:	6554090a 	.word	0x6554090a
   302bc:	7265706d 	.word	0x7265706d
   302c0:	72757461 	.word	0x72757461
   302c4:	203a0965 	.word	0x203a0965
   302c8:	00000000 	.word	0x00000000
   302cc:	332e3025 	.word	0x332e3025
   302d0:	b0c22066 	.word	0xb0c22066
   302d4:	25202c43 	.word	0x25202c43
   302d8:	66332e30 	.word	0x66332e30
   302dc:	46b0c220 	.word	0x46b0c220
   302e0:	00000000 	.word	0x00000000
   302e4:	7250090a 	.word	0x7250090a
   302e8:	75737365 	.word	0x75737365
   302ec:	3a096572 	.word	0x3a096572
   302f0:	00000020 	.word	0x00000020
   302f4:	70206425 	.word	0x70206425
   302f8:	61637361 	.word	0x61637361
   302fc:	0000006c 	.word	0x0000006c
   30300:	786c394b 	.word	0x786c394b
   30304:	65725020 	.word	0x65725020
   30308:	72757373 	.word	0x72757373
   3030c:	65532065 	.word	0x65532065
   30310:	726f736e 	.word	0x726f736e
   30314:	20736920 	.word	0x20736920
   30318:	74696e69 	.word	0x74696e69
   3031c:	696c6169 	.word	0x696c6169
   30320:	0a64657a 	.word	0x0a64657a
   30324:	0000000a 	.word	0x0000000a
   30328:	20435452 	.word	0x20435452
   3032c:	45203a3a 	.word	0x45203a3a
   30330:	524f5252 	.word	0x524f5252
   30334:	6168202c 	.word	0x6168202c
   30338:	69745f6c 	.word	0x69745f6c
   3033c:	000a656d 	.word	0x000a656d
   30340:	4354520a 	.word	0x4354520a
   30344:	6d695420 	.word	0x6d695420
   30348:	000a7265 	.word	0x000a7265
   3034c:	2a2a2a2a 	.word	0x2a2a2a2a
   30350:	2a2a2a2a 	.word	0x2a2a2a2a
   30354:	2a2a2a2a 	.word	0x2a2a2a2a
   30358:	2a2a2a2a 	.word	0x2a2a2a2a
   3035c:	2a2a2a2a 	.word	0x2a2a2a2a
   30360:	2a2a2a2a 	.word	0x2a2a2a2a
   30364:	2a2a2a2a 	.word	0x2a2a2a2a
   30368:	2a2a2a2a 	.word	0x2a2a2a2a
   3036c:	2a2a2a2a 	.word	0x2a2a2a2a
   30370:	0a2a2a2a 	.word	0x0a2a2a2a
   30374:	00000000 	.word	0x00000000
   30378:	636f6c43 	.word	0x636f6c43
   3037c:	7473206b 	.word	0x7473206b
   30380:	65747261 	.word	0x65747261
   30384:	6e6f2064 	.word	0x6e6f2064
   30388:	32302520 	.word	0x32302520
   3038c:	30252e64 	.word	0x30252e64
   30390:	322e6432 	.word	0x322e6432
   30394:	32302530 	.word	0x32302530
   30398:	74612064 	.word	0x74612064
   3039c:	32302520 	.word	0x32302520
   303a0:	30253a64 	.word	0x30253a64
   303a4:	253a6432 	.word	0x253a6432
   303a8:	20643230 	.word	0x20643230
   303ac:	636f6c28 	.word	0x636f6c28
   303b0:	0a296c61 	.word	0x0a296c61
   303b4:	0000000a 	.word	0x0000000a
   303b8:	756e614a 	.word	0x756e614a
   303bc:	00797261 	.word	0x00797261
   303c0:	72626546 	.word	0x72626546
   303c4:	79726175 	.word	0x79726175
   303c8:	00000000 	.word	0x00000000
   303cc:	6372614d 	.word	0x6372614d
   303d0:	00000068 	.word	0x00000068
   303d4:	69727041 	.word	0x69727041
   303d8:	0000006c 	.word	0x0000006c
   303dc:	0079614d 	.word	0x0079614d
   303e0:	656e754a 	.word	0x656e754a
   303e4:	00000000 	.word	0x00000000
   303e8:	796c754a 	.word	0x796c754a
   303ec:	00000000 	.word	0x00000000
   303f0:	75677541 	.word	0x75677541
   303f4:	00007473 	.word	0x00007473
   303f8:	74706553 	.word	0x74706553
   303fc:	65626d65 	.word	0x65626d65
   30400:	00000072 	.word	0x00000072
   30404:	6f74634f 	.word	0x6f74634f
   30408:	00726562 	.word	0x00726562
   3040c:	65766f4e 	.word	0x65766f4e
   30410:	7265626d 	.word	0x7265626d
   30414:	00000000 	.word	0x00000000
   30418:	65636544 	.word	0x65636544
   3041c:	7265626d 	.word	0x7265626d
   30420:	00000000 	.word	0x00000000
   30424:	646e7553 	.word	0x646e7553
   30428:	00007961 	.word	0x00007961
   3042c:	646e6f4d 	.word	0x646e6f4d
   30430:	00007961 	.word	0x00007961
   30434:	73657554 	.word	0x73657554
   30438:	00796164 	.word	0x00796164
   3043c:	6e646557 	.word	0x6e646557
   30440:	61647365 	.word	0x61647365
   30444:	00000079 	.word	0x00000079
   30448:	72756854 	.word	0x72756854
   3044c:	79616473 	.word	0x79616473
   30450:	00000000 	.word	0x00000000
   30454:	64697246 	.word	0x64697246
   30458:	00007961 	.word	0x00007961
   3045c:	75746153 	.word	0x75746153
   30460:	79616472 	.word	0x79616472
   30464:	00000000 	.word	0x00000000
   30468:	00002e2e 	.word	0x00002e2e
   3046c:	5f50434c 	.word	0x5f50434c
   30470:	5f474f4c 	.word	0x5f474f4c
   30474:	00000000 	.word	0x00000000
   30478:	30257325 	.word	0x30257325
   3047c:	00006434 	.word	0x00006434
   30480:	203c3c0a 	.word	0x203c3c0a
   30484:	2050434c 	.word	0x2050434c
   30488:	20676f4c 	.word	0x20676f4c
   3048c:	656c6966 	.word	0x656c6966
   30490:	20732520 	.word	0x20732520
   30494:	6e696562 	.word	0x6e696562
   30498:	72632067 	.word	0x72632067
   3049c:	65746165 	.word	0x65746165
   304a0:	3e3e2064 	.word	0x3e3e2064
   304a4:	0000000a 	.word	0x0000000a
   304a8:	00004b4f 	.word	0x00004b4f
   304ac:	6c696146 	.word	0x6c696146
   304b0:	00006465 	.word	0x00006465
   304b4:	00435455 	.word	0x00435455
   304b8:	61636f6c 	.word	0x61636f6c
   304bc:	0000006c 	.word	0x0000006c
   304c0:	2d657270 	.word	0x2d657270
   304c4:	6c706564 	.word	0x6c706564
   304c8:	6d5f796f 	.word	0x6d5f796f
   304cc:	0065646f 	.word	0x0065646f
   304d0:	5f736470 	.word	0x5f736470
   304d4:	64323025 	.word	0x64323025
   304d8:	3230252e 	.word	0x3230252e
   304dc:	30322e64 	.word	0x30322e64
   304e0:	64323025 	.word	0x64323025
   304e4:	7478742e 	.word	0x7478742e
   304e8:	00000000 	.word	0x00000000
   304ec:	2a2a2a0a 	.word	0x2a2a2a0a
   304f0:	2a2a2a2a 	.word	0x2a2a2a2a
   304f4:	2a2a2a2a 	.word	0x2a2a2a2a
   304f8:	2a2a2a2a 	.word	0x2a2a2a2a
   304fc:	2a2a2a2a 	.word	0x2a2a2a2a
   30500:	2a2a2a2a 	.word	0x2a2a2a2a
   30504:	2a2a2a2a 	.word	0x2a2a2a2a
   30508:	0a2a2a2a 	.word	0x0a2a2a2a
   3050c:	00000000 	.word	0x00000000
   30510:	2050434c 	.word	0x2050434c
   30514:	74737953 	.word	0x74737953
   30518:	43206d65 	.word	0x43206d65
   3051c:	6b636568 	.word	0x6b636568
   30520:	666e6920 	.word	0x666e6920
   30524:	616d726f 	.word	0x616d726f
   30528:	6e6f6974 	.word	0x6e6f6974
   3052c:	0000000a 	.word	0x0000000a
   30530:	63656843 	.word	0x63656843
   30534:	203a206b 	.word	0x203a206b
   30538:	540a7325 	.word	0x540a7325
   3053c:	20656d69 	.word	0x20656d69
   30540:	3025203a 	.word	0x3025203a
   30544:	253a6432 	.word	0x253a6432
   30548:	3a643230 	.word	0x3a643230
   3054c:	64323025 	.word	0x64323025
   30550:	73252820 	.word	0x73252820
   30554:	61440a29 	.word	0x61440a29
   30558:	3a206574 	.word	0x3a206574
   3055c:	32302520 	.word	0x32302520
   30560:	30252e64 	.word	0x30252e64
   30564:	322e6432 	.word	0x322e6432
   30568:	32302530 	.word	0x32302530
   3056c:	614c0a64 	.word	0x614c0a64
   30570:	75746974 	.word	0x75746974
   30574:	3a206564 	.word	0x3a206564
   30578:	372e2520 	.word	0x372e2520
   3057c:	6f4c0a66 	.word	0x6f4c0a66
   30580:	7469676e 	.word	0x7469676e
   30584:	20656475 	.word	0x20656475
   30588:	2e25203a 	.word	0x2e25203a
   3058c:	410a6637 	.word	0x410a6637
   30590:	7469746c 	.word	0x7469746c
   30594:	20656475 	.word	0x20656475
   30598:	2e25203a 	.word	0x2e25203a
   3059c:	0a0a6637 	.word	0x0a0a6637
   305a0:	0000000a 	.word	0x0000000a
   305a4:	656c6966 	.word	0x656c6966
   305a8:	7a697320 	.word	0x7a697320
   305ac:	203d2065 	.word	0x203d2065
   305b0:	000a7525 	.word	0x000a7525
   305b4:	666f7270 	.word	0x666f7270
   305b8:	5f656c69 	.word	0x5f656c69
   305bc:	65646f6d 	.word	0x65646f6d
   305c0:	00000000 	.word	0x00000000
   305c4:	735f6425 	.word	0x735f6425
   305c8:	255f7370 	.word	0x255f7370
   305cc:	2e643230 	.word	0x2e643230
   305d0:	64323025 	.word	0x64323025
   305d4:	2530322e 	.word	0x2530322e
   305d8:	2e643230 	.word	0x2e643230
   305dc:	00747874 	.word	0x00747874
   305e0:	4e2e530a 	.word	0x4e2e530a
   305e4:	7c092e6f 	.word	0x7c092e6f
   305e8:	65725020 	.word	0x65725020
   305ec:	72757373 	.word	0x72757373
   305f0:	61622865 	.word	0x61622865
   305f4:	7c202972 	.word	0x7c202972
   305f8:	6d655420 	.word	0x6d655420
   305fc:	61726570 	.word	0x61726570
   30600:	65727574 	.word	0x65727574
   30604:	43b0c228 	.word	0x43b0c228
   30608:	207c2029 	.word	0x207c2029
   3060c:	656d6954 	.word	0x656d6954
   30610:	6174732d 	.word	0x6174732d
   30614:	0a09706d 	.word	0x0a09706d
   30618:	00000000 	.word	0x00000000
   3061c:	3d3d3d3d 	.word	0x3d3d3d3d
   30620:	3d3d3d3d 	.word	0x3d3d3d3d
   30624:	3d3d3d3d 	.word	0x3d3d3d3d
   30628:	3d3d3d3d 	.word	0x3d3d3d3d
   3062c:	3d3d3d3d 	.word	0x3d3d3d3d
   30630:	3d3d3d3d 	.word	0x3d3d3d3d
   30634:	3d3d3d3d 	.word	0x3d3d3d3d
   30638:	3d3d3d3d 	.word	0x3d3d3d3d
   3063c:	3d3d3d3d 	.word	0x3d3d3d3d
   30640:	3d3d3d3d 	.word	0x3d3d3d3d
   30644:	3d3d3d3d 	.word	0x3d3d3d3d
   30648:	3d3d3d3d 	.word	0x3d3d3d3d
   3064c:	3d3d3d3d 	.word	0x3d3d3d3d
   30650:	3d3d3d3d 	.word	0x3d3d3d3d
   30654:	3d3d3d3d 	.word	0x3d3d3d3d
   30658:	000a0a3d 	.word	0x000a0a3d
   3065c:	66207325 	.word	0x66207325
   30660:	20656c69 	.word	0x20656c69
   30664:	61657263 	.word	0x61657263
   30668:	0a646574 	.word	0x0a646574
   3066c:	00000000 	.word	0x00000000
   30670:	20097525 	.word	0x20097525
   30674:	342e2520 	.word	0x342e2520
   30678:	20200966 	.word	0x20200966
   3067c:	66342e25 	.word	0x66342e25
   30680:	25200909 	.word	0x25200909
   30684:	3a643230 	.word	0x3a643230
   30688:	64323025 	.word	0x64323025
   3068c:	3230253a 	.word	0x3230253a
   30690:	00000a64 	.word	0x00000a64
   30694:	6b726170 	.word	0x6b726170
   30698:	646f6d5f 	.word	0x646f6d5f
   3069c:	00000065 	.word	0x00000065
   306a0:	705f6425 	.word	0x705f6425
   306a4:	5f6b7261 	.word	0x5f6b7261
   306a8:	64323025 	.word	0x64323025
   306ac:	3230252e 	.word	0x3230252e
   306b0:	30322e64 	.word	0x30322e64
   306b4:	64323025 	.word	0x64323025
   306b8:	7478742e 	.word	0x7478742e
   306bc:	00000000 	.word	0x00000000
   306c0:	41544144 	.word	0x41544144
   306c4:	47474f4c 	.word	0x47474f4c
   306c8:	3a205245 	.word	0x3a205245
   306cc:	6552203a 	.word	0x6552203a
   306d0:	74746573 	.word	0x74746573
   306d4:	20676e69 	.word	0x20676e69
   306d8:	74736574 	.word	0x74736574
   306dc:	6f727020 	.word	0x6f727020
   306e0:	656c6966 	.word	0x656c6966
   306e4:	65727020 	.word	0x65727020
   306e8:	72757373 	.word	0x72757373
   306ec:	00000a65 	.word	0x00000a65
   306f0:	41544144 	.word	0x41544144
   306f4:	47474f4c 	.word	0x47474f4c
   306f8:	3a205245 	.word	0x3a205245
   306fc:	6552203a 	.word	0x6552203a
   30700:	6e696461 	.word	0x6e696461
   30704:	65742067 	.word	0x65742067
   30708:	70207473 	.word	0x70207473
   3070c:	69666f72 	.word	0x69666f72
   30710:	7020656c 	.word	0x7020656c
   30714:	73736572 	.word	0x73736572
   30718:	20657275 	.word	0x20657275
   3071c:	74696177 	.word	0x74696177
   30720:	656c7020 	.word	0x656c7020
   30724:	0a657361 	.word	0x0a657361
   30728:	00000000 	.word	0x00000000
   3072c:	74736574 	.word	0x74736574
   30730:	6f72705f 	.word	0x6f72705f
   30734:	656c6966 	.word	0x656c6966
   30738:	78742e32 	.word	0x78742e32
   3073c:	00000074 	.word	0x00000074
   30740:	41544144 	.word	0x41544144
   30744:	47474f4c 	.word	0x47474f4c
   30748:	3a205245 	.word	0x3a205245
   3074c:	5245203a 	.word	0x5245203a
   30750:	20524f52 	.word	0x20524f52
   30754:	6966203a 	.word	0x6966203a
   30758:	7320656c 	.word	0x7320656c
   3075c:	20657a69 	.word	0x20657a69
   30760:	7525203d 	.word	0x7525203d
   30764:	0000000a 	.word	0x0000000a
   30768:	41544144 	.word	0x41544144
   3076c:	47474f4c 	.word	0x47474f4c
   30770:	3a205245 	.word	0x3a205245
   30774:	6966203a 	.word	0x6966203a
   30778:	7320656c 	.word	0x7320656c
   3077c:	20657a69 	.word	0x20657a69
   30780:	7525203d 	.word	0x7525203d
   30784:	0000000a 	.word	0x0000000a
   30788:	41544144 	.word	0x41544144
   3078c:	47474f4c 	.word	0x47474f4c
   30790:	3a205245 	.word	0x3a205245
   30794:	6552203a 	.word	0x6552203a
   30798:	6e696461 	.word	0x6e696461
   3079c:	65742067 	.word	0x65742067
   307a0:	70207473 	.word	0x70207473
   307a4:	69666f72 	.word	0x69666f72
   307a8:	7020656c 	.word	0x7020656c
   307ac:	73736572 	.word	0x73736572
   307b0:	20657275 	.word	0x20657275
   307b4:	454e4f44 	.word	0x454e4f44
   307b8:	0000000a 	.word	0x0000000a
   307bc:	7461440a 	.word	0x7461440a
   307c0:	676f6c61 	.word	0x676f6c61
   307c4:	20726567 	.word	0x20726567
   307c8:	69697751 	.word	0x69697751
   307cc:	65442063 	.word	0x65442063
   307d0:	65636976 	.word	0x65636976
   307d4:	666e4920 	.word	0x666e4920
   307d8:	00000a6f 	.word	0x00000a6f
   307dc:	69766544 	.word	0x69766544
   307e0:	55206563 	.word	0x55206563
   307e4:	7571696e 	.word	0x7571696e
   307e8:	44492065 	.word	0x44492065
   307ec:	00203a09 	.word	0x00203a09
   307f0:	30257830 	.word	0x30257830
   307f4:	00005832 	.word	0x00005832
   307f8:	69766544 	.word	0x69766544
   307fc:	46206563 	.word	0x46206563
   30800:	65562057 	.word	0x65562057
   30804:	6f697372 	.word	0x6f697372
   30808:	203a096e 	.word	0x203a096e
   3080c:	00000000 	.word	0x00000000
   30810:	252e7525 	.word	0x252e7525
   30814:	00000075 	.word	0x00000075
   30818:	69766544 	.word	0x69766544
   3081c:	53206563 	.word	0x53206563
   30820:	75746174 	.word	0x75746174
   30824:	6e492073 	.word	0x6e492073
   30828:	3a096f66 	.word	0x3a096f66
   3082c:	00000020 	.word	0x00000020
   30830:	69204453 	.word	0x69204453
   30834:	2074696e 	.word	0x2074696e
   30838:	646f6f47 	.word	0x646f6f47
   3083c:	00000000 	.word	0x00000000
   30840:	69204453 	.word	0x69204453
   30844:	2074696e 	.word	0x2074696e
   30848:	20746f4e 	.word	0x20746f4e
   3084c:	646f6f47 	.word	0x646f6f47
   30850:	00000000 	.word	0x00000000
   30854:	72732f2e 	.word	0x72732f2e
   30858:	61642f63 	.word	0x61642f63
   3085c:	6f6c6174 	.word	0x6f6c6174
   30860:	72656767 	.word	0x72656767
   30864:	0000632e 	.word	0x0000632e
   30868:	685f6d61 	.word	0x685f6d61
   3086c:	675f6c61 	.word	0x675f6c61
   30870:	5f6f6970 	.word	0x5f6f6970
   30874:	636e6970 	.word	0x636e6970
   30878:	69666e6f 	.word	0x69666e6f
   3087c:	4d412867 	.word	0x4d412867
   30880:	5053425f 	.word	0x5053425f
   30884:	4950475f 	.word	0x4950475f
   30888:	4f495f4f 	.word	0x4f495f4f
   3088c:	535f344d 	.word	0x535f344d
   30890:	202c4c43 	.word	0x202c4c43
   30894:	4d415f67 	.word	0x4d415f67
   30898:	5053425f 	.word	0x5053425f
   3089c:	4950475f 	.word	0x4950475f
   308a0:	4f495f4f 	.word	0x4f495f4f
   308a4:	535f344d 	.word	0x535f344d
   308a8:	00294c43 	.word	0x00294c43
   308ac:	685f6d61 	.word	0x685f6d61
   308b0:	675f6c61 	.word	0x675f6c61
   308b4:	5f6f6970 	.word	0x5f6f6970
   308b8:	636e6970 	.word	0x636e6970
   308bc:	69666e6f 	.word	0x69666e6f
   308c0:	4d412867 	.word	0x4d412867
   308c4:	5053425f 	.word	0x5053425f
   308c8:	4950475f 	.word	0x4950475f
   308cc:	4f495f4f 	.word	0x4f495f4f
   308d0:	535f344d 	.word	0x535f344d
   308d4:	202c4144 	.word	0x202c4144
   308d8:	4d415f67 	.word	0x4d415f67
   308dc:	5053425f 	.word	0x5053425f
   308e0:	4950475f 	.word	0x4950475f
   308e4:	4f495f4f 	.word	0x4f495f4f
   308e8:	535f344d 	.word	0x535f344d
   308ec:	00294144 	.word	0x00294144
   308f0:	41544144 	.word	0x41544144
   308f4:	47474f4c 	.word	0x47474f4c
   308f8:	3a205245 	.word	0x3a205245
   308fc:	5245203a 	.word	0x5245203a
   30900:	20524f52 	.word	0x20524f52
   30904:	6e69203a 	.word	0x6e69203a
   30908:	2d207469 	.word	0x2d207469
   3090c:	6553203e 	.word	0x6553203e
   30910:	7463656c 	.word	0x7463656c
   30914:	65687420 	.word	0x65687420
   30918:	6d6f6920 	.word	0x6d6f6920
   3091c:	6d756e20 	.word	0x6d756e20
   30920:	20726562 	.word	0x20726562
   30924:	202c3128 	.word	0x202c3128
   30928:	000a2934 	.word	0x000a2934
   3092c:	7566202c 	.word	0x7566202c
   30930:	6974636e 	.word	0x6974636e
   30934:	203a6e6f 	.word	0x203a6e6f
   30938:	00000000 	.word	0x00000000
   3093c:	65737361 	.word	0x65737361
   30940:	6f697472 	.word	0x6f697472
   30944:	2522206e 	.word	0x2522206e
   30948:	66202273 	.word	0x66202273
   3094c:	656c6961 	.word	0x656c6961
   30950:	66203a64 	.word	0x66203a64
   30954:	20656c69 	.word	0x20656c69
   30958:	22732522 	.word	0x22732522
   3095c:	696c202c 	.word	0x696c202c
   30960:	2520656e 	.word	0x2520656e
   30964:	25732564 	.word	0x25732564
   30968:	00000a73 	.word	0x00000a73
   3096c:	0000002e 	.word	0x0000002e
   30970:	0000666e 	.word	0x0000666e
   30974:	74696e69 	.word	0x74696e69
   30978:	00000079 	.word	0x00000079
   3097c:	00006e61 	.word	0x00006e61
   30980:	33323130 	.word	0x33323130
   30984:	37363534 	.word	0x37363534
   30988:	42413938 	.word	0x42413938
   3098c:	46454443 	.word	0x46454443
   30990:	00000000 	.word	0x00000000
   30994:	33323130 	.word	0x33323130
   30998:	37363534 	.word	0x37363534
   3099c:	62613938 	.word	0x62613938
   309a0:	66656463 	.word	0x66656463
   309a4:	00000000 	.word	0x00000000
   309a8:	6c756e28 	.word	0x6c756e28
   309ac:	0000296c 	.word	0x0000296c
   309b0:	435f434c 	.word	0x435f434c
   309b4:	414c4c4f 	.word	0x414c4c4f
   309b8:	00004554 	.word	0x00004554
   309bc:	435f434c 	.word	0x435f434c
   309c0:	45505954 	.word	0x45505954
   309c4:	00000000 	.word	0x00000000
   309c8:	4d5f434c 	.word	0x4d5f434c
   309cc:	54454e4f 	.word	0x54454e4f
   309d0:	00595241 	.word	0x00595241
   309d4:	4e5f434c 	.word	0x4e5f434c
   309d8:	52454d55 	.word	0x52454d55
   309dc:	00004349 	.word	0x00004349
   309e0:	545f434c 	.word	0x545f434c
   309e4:	00454d49 	.word	0x00454d49
   309e8:	4d5f434c 	.word	0x4d5f434c
   309ec:	41535345 	.word	0x41535345
   309f0:	00534547 	.word	0x00534547
   309f4:	6c6c6142 	.word	0x6c6c6142
   309f8:	7320636f 	.word	0x7320636f
   309fc:	65636375 	.word	0x65636375
   30a00:	64656465 	.word	0x64656465
   30a04:	00000000 	.word	0x00000000
   30a08:	775f5f2f 	.word	0x775f5f2f
   30a0c:	6d72612f 	.word	0x6d72612f
   30a10:	6e6f6e2d 	.word	0x6e6f6e2d
   30a14:	61652d65 	.word	0x61652d65
   30a18:	672d6962 	.word	0x672d6962
   30a1c:	782d6363 	.word	0x782d6363
   30a20:	6b636170 	.word	0x6b636170
   30a24:	6d72612f 	.word	0x6d72612f
   30a28:	6e6f6e2d 	.word	0x6e6f6e2d
   30a2c:	61652d65 	.word	0x61652d65
   30a30:	672d6962 	.word	0x672d6962
   30a34:	782d6363 	.word	0x782d6363
   30a38:	6b636170 	.word	0x6b636170
   30a3c:	6975622f 	.word	0x6975622f
   30a40:	612d646c 	.word	0x612d646c
   30a44:	74657373 	.word	0x74657373
   30a48:	75622f73 	.word	0x75622f73
   30a4c:	2f646c69 	.word	0x2f646c69
   30a50:	336e6977 	.word	0x336e6977
   30a54:	36782d32 	.word	0x36782d32
   30a58:	6f732f34 	.word	0x6f732f34
   30a5c:	65637275 	.word	0x65637275
   30a60:	656e2f73 	.word	0x656e2f73
   30a64:	62696c77 	.word	0x62696c77
   30a68:	6779632d 	.word	0x6779632d
   30a6c:	2f6e6977 	.word	0x2f6e6977
   30a70:	6c77656e 	.word	0x6c77656e
   30a74:	6c2f6269 	.word	0x6c2f6269
   30a78:	2f636269 	.word	0x2f636269
   30a7c:	6c647473 	.word	0x6c647473
   30a80:	672f6269 	.word	0x672f6269
   30a84:	616f7464 	.word	0x616f7464
   30a88:	7465672d 	.word	0x7465672d
   30a8c:	2e786568 	.word	0x2e786568
   30a90:	00000063 	.word	0x00000063
   30a94:	775f5f2f 	.word	0x775f5f2f
   30a98:	6d72612f 	.word	0x6d72612f
   30a9c:	6e6f6e2d 	.word	0x6e6f6e2d
   30aa0:	61652d65 	.word	0x61652d65
   30aa4:	672d6962 	.word	0x672d6962
   30aa8:	782d6363 	.word	0x782d6363
   30aac:	6b636170 	.word	0x6b636170
   30ab0:	6d72612f 	.word	0x6d72612f
   30ab4:	6e6f6e2d 	.word	0x6e6f6e2d
   30ab8:	61652d65 	.word	0x61652d65
   30abc:	672d6962 	.word	0x672d6962
   30ac0:	782d6363 	.word	0x782d6363
   30ac4:	6b636170 	.word	0x6b636170
   30ac8:	6975622f 	.word	0x6975622f
   30acc:	612d646c 	.word	0x612d646c
   30ad0:	74657373 	.word	0x74657373
   30ad4:	75622f73 	.word	0x75622f73
   30ad8:	2f646c69 	.word	0x2f646c69
   30adc:	336e6977 	.word	0x336e6977
   30ae0:	36782d32 	.word	0x36782d32
   30ae4:	6f732f34 	.word	0x6f732f34
   30ae8:	65637275 	.word	0x65637275
   30aec:	656e2f73 	.word	0x656e2f73
   30af0:	62696c77 	.word	0x62696c77
   30af4:	6779632d 	.word	0x6779632d
   30af8:	2f6e6977 	.word	0x2f6e6977
   30afc:	6c77656e 	.word	0x6c77656e
   30b00:	6c2f6269 	.word	0x6c2f6269
   30b04:	2f636269 	.word	0x2f636269
   30b08:	6c647473 	.word	0x6c647473
   30b0c:	6d2f6269 	.word	0x6d2f6269
   30b10:	63657270 	.word	0x63657270
   30b14:	0000632e 	.word	0x0000632e
   30b18:	00464e49 	.word	0x00464e49
   30b1c:	00666e69 	.word	0x00666e69
   30b20:	004e414e 	.word	0x004e414e
   30b24:	006e616e 	.word	0x006e616e
   30b28:	69666e49 	.word	0x69666e49
   30b2c:	7974696e 	.word	0x7974696e
   30b30:	00000000 	.word	0x00000000
   30b34:	004e614e 	.word	0x004e614e
   30b38:	775f5f2f 	.word	0x775f5f2f
   30b3c:	6d72612f 	.word	0x6d72612f
   30b40:	6e6f6e2d 	.word	0x6e6f6e2d
   30b44:	61652d65 	.word	0x61652d65
   30b48:	672d6962 	.word	0x672d6962
   30b4c:	782d6363 	.word	0x782d6363
   30b50:	6b636170 	.word	0x6b636170
   30b54:	6d72612f 	.word	0x6d72612f
   30b58:	6e6f6e2d 	.word	0x6e6f6e2d
   30b5c:	61652d65 	.word	0x61652d65
   30b60:	672d6962 	.word	0x672d6962
   30b64:	782d6363 	.word	0x782d6363
   30b68:	6b636170 	.word	0x6b636170
   30b6c:	6975622f 	.word	0x6975622f
   30b70:	612d646c 	.word	0x612d646c
   30b74:	74657373 	.word	0x74657373
   30b78:	75622f73 	.word	0x75622f73
   30b7c:	2f646c69 	.word	0x2f646c69
   30b80:	336e6977 	.word	0x336e6977
   30b84:	36782d32 	.word	0x36782d32
   30b88:	6f732f34 	.word	0x6f732f34
   30b8c:	65637275 	.word	0x65637275
   30b90:	656e2f73 	.word	0x656e2f73
   30b94:	62696c77 	.word	0x62696c77
   30b98:	6779632d 	.word	0x6779632d
   30b9c:	2f6e6977 	.word	0x2f6e6977
   30ba0:	6c77656e 	.word	0x6c77656e
   30ba4:	6c2f6269 	.word	0x6c2f6269
   30ba8:	2f636269 	.word	0x2f636269
   30bac:	6c647473 	.word	0x6c647473
   30bb0:	642f6269 	.word	0x642f6269
   30bb4:	2e616f74 	.word	0x2e616f74
   30bb8:	00000063 	.word	0x00000063
   30bbc:	6d65733a 	.word	0x6d65733a
   30bc0:	736f6869 	.word	0x736f6869
   30bc4:	676e6974 	.word	0x676e6974
   30bc8:	6165662d 	.word	0x6165662d
   30bcc:	65727574 	.word	0x65727574
   30bd0:	00000073 	.word	0x00000073

00030bd4 <am_cattr>:
	...
   30bdc:	20202000 00002020 00000000 00000000     .     ..........
	...
   30bf4:	80008020 80808080 00008080 00808000      ...............
   30c04:	98989898 98989898 00009898 00000000     ................
   30c14:	95959580 85959595 85858585 85858585     ................
   30c24:	85858585 85858585 00858585 80800000     ................
   30c34:	93939380 83939393 83838383 83838383     ................
   30c44:	83838383 83838383 80838383 00808000     ................
	...

00030cd4 <g_iMonthOffsets>:
   30cd4:	00000004 00000000 00000000 00000003     ................
   30ce4:	00000005 00000001 00000003 00000006     ................
   30cf4:	00000002 00000004 00000000 00000002     ................

00030d04 <g_iDaysPerMonth>:
   30d04:	0000001f 0000001c 0000001f 0000001e     ................
   30d14:	0000001f 0000001e 0000001f 0000001f     ................
   30d24:	0000001e 0000001f 0000001e 0000001f     ................

00030d34 <__FUNCTION__.0>:
   30d34:	3158414d 30333834 696e755f 6974696e     MAX14830_uniniti
   30d44:	7a696c61 00000065                       alize...

00030d4c <__FUNCTION__.2>:
   30d4c:	3158414d 30333834 696e695f 6c616974     MAX14830_initial
   30d5c:	00657a69                                ize.

00030d60 <__func__.0>:
   30d60:	6b736174 766f6d5f 69705f65 6e6f7473     task_move_piston
   30d70:	5f6f745f 756c6f76 0000656d              _to_volume..

00030d7c <__func__.1>:
   30d7c:	6b736174 766f6d5f 69705f65 6e6f7473     task_move_piston
   30d8c:	5f6f745f 676e656c 00006874              _to_length..

00030d98 <__func__.2>:
   30d98:	6b736174 766f6d5f 69705f65 6e6f7473     task_move_piston
   30da8:	5f6f745f 6c6c7566 00000000              _to_full....

00030db4 <__func__.3>:
   30db4:	6b736174 766f6d5f 69705f65 6e6f7473     task_move_piston
   30dc4:	5f6f745f 6f72657a 00000000              _to_zero....

00030dd0 <__func__.0>:
   30dd0:	6b736174 7370675f 00000000              task_gps....

00030ddc <__func__.1>:
   30ddc:	6b736174 6d65745f 61726570 65727574     task_temperature
   30dec:	00000000                                ....

00030df0 <__func__.2>:
   30df0:	6b736174 7065645f 00006874              task_depth..

00030dfc <__FUNCTION__.0>:
   30dfc:	65747261 5f73696d 30363969 695f6e33     artemis_i9603n_i
   30e0c:	6974696e 7a696c61 00000065              nitialize...

00030e18 <__FUNCTION__.0>:
   30e18:	65747261 5f73696d 5f6d6f69 6e696e75     artemis_iom_unin
   30e28:	61697469 657a696c 00000000              itialize....

00030e34 <__FUNCTION__.1>:
   30e34:	65747261 5f73696d 5f6d6f69 74696e69     artemis_iom_init
   30e44:	696c6169 0000657a                       ialize..

00030e4c <__FUNCTION__.2>:
   30e4c:	65747261 5f73696d 5f75636d 74696e69     artemis_mcu_init
   30e5c:	696c6169 0000657a                       ialize..

00030e64 <__FUNCTION__.0>:
   30e64:	65747261 5f73696d 74736970 695f6e6f     artemis_piston_i
   30e74:	695f6332 6974696e 7a696c61 00000065     2c_initialize...

00030e84 <__FUNCTION__.0>:
   30e84:	65747261 5f73696d 695f6373 6974696e     artemis_sc_initi
   30e94:	7a696c61 00000065                       alize...

00030e9c <__FUNCTION__.0>:
   30e9c:	65747261 5f73696d 74726175 6e65735f     artemis_uart_sen
   30eac:	00000064                                d...

00030eb0 <__FUNCTION__.1>:
   30eb0:	65747261 5f73696d 74726175 756c665f     artemis_uart_flu
   30ec0:	00006873                                sh..

00030ec4 <__FUNCTION__.3>:
   30ec4:	65747261 5f73696d 74726175 696e695f     artemis_uart_ini
   30ed4:	6c616974 00657a69                       tialize.

00030edc <__FUNCTION__.0>:
   30edc:	65747261 5f73696d 6f6c6275 32695f78     artemis_ublox_i2
   30eec:	6e695f63 61697469 657a696c 00000000     c_initialize....

00030efc <__FUNCTION__.2>:
   30efc:	61746164 67676f6c 695f7265 0074696e     datalogger_init.

00030f0c <g_sBspUartConfig>:
   30f0c:	000e1000 00000060 00000000 00000000     ....`...........
   30f1c:	00000000 00000024 00000000 00000000     ....$...........
	...

00030f34 <g_AM_BSP_GPIO_IOM4_SDA>:
   30f34:	00040844                                D...

00030f38 <g_AM_BSP_GPIO_IOM4_SCL>:
   30f38:	00040b44                                D...

00030f3c <g_AM_BSP_GPIO_IOM3_SCK>:
   30f3c:	00030305                                ....

00030f40 <g_AM_BSP_GPIO_IOM3_MOSI>:
   30f40:	00030305                                ....

00030f44 <g_AM_BSP_GPIO_IOM3_MISO>:
   30f44:	00030005                                ....

00030f48 <g_AM_BSP_GPIO_IOM3_CS>:
   30f48:	00000403                                ....

00030f4c <g_AM_BSP_GPIO_IOM2_SDA>:
   30f4c:	00020b44                                D...

00030f50 <g_AM_BSP_GPIO_IOM2_SCL>:
   30f50:	00020b44                                D...

00030f54 <g_AM_BSP_GPIO_IOM1_SDA>:
   30f54:	00010b40                                @...

00030f58 <g_AM_BSP_GPIO_IOM1_SCL>:
   30f58:	00010b40                                @...

00030f5c <g_AM_BSP_GPIO_PWR_CTRL_EN>:
   30f5c:	00000403                                ....

00030f60 <g_AM_BSP_GPIO_I2C_1_PWR>:
   30f60:	00000703                                ....

00030f64 <g_AM_BSP_GPIO_COM3_POWER_PIN>:
   30f64:	00000803                                ....

00030f68 <g_AM_BSP_GPIO_COM0_POWER_PIN>:
   30f68:	00000b03                                ....

00030f6c <g_AM_BSP_GPIO_S2U_NIRQ>:
   30f6c:	00003023                                #0..

00030f70 <g_AM_BSP_GPIO_S2U_NRESET>:
   30f70:	00000403                                ....

00030f74 <g_AM_BSP_GPIO_S2U_ON>:
   30f74:	00000403                                ....

00030f78 <g_AM_BSP_GPIO_PRES_ON>:
   30f78:	00000803                                ....

00030f7c <g_AM_BSP_GPIO_GPS_EXTINT>:
   30f7c:	00000403                                ....

00030f80 <g_AM_BSP_GPIO_GPS_ON>:
   30f80:	00000403                                ....

00030f84 <g_AM_BSP_GPIO_IRIDIUM_UART_RX>:
   30f84:	00000002                                ....

00030f88 <g_AM_BSP_GPIO_IRIDIUM_UART_TX>:
   30f88:	00000002                                ....

00030f8c <g_AM_BSP_GPIO_IRIDIUM_NET_AVAIL>:
   30f8c:	00001003                                ....

00030f90 <g_AM_BSP_GPIO_IRIDIUM_RING_IND>:
   30f90:	00001003                                ....

00030f94 <g_AM_BSP_GPIO_IRIDIUM_ON>:
   30f94:	00000403                                ....

00030f98 <g_AM_BSP_GPIO_CONSOLE_UART_RX>:
   30f98:	00000000                                ....

00030f9c <g_AM_BSP_GPIO_CONSOLE_UART_TX>:
   30f9c:	00000000                                ....

00030fa0 <g_AM_BSP_GPIO_SC_ON>:
   30fa0:	00000703                                ....

00030fa4 <g_AM_BSP_GPIO_SC_PGOOD>:
   30fa4:	00001303                                ....

00030fa8 <g_AM_BSP_GPIO_SC_NSHDN>:
   30fa8:	00000703                                ....

00030fac <g_AM_BSP_GPIO_LED_BLUE>:
   30fac:	00000403                                ....

00030fb0 <g_AM_BSP_GPIO_LED_RED>:
   30fb0:	00000403                                ....

00030fb4 <g_AM_BSP_GPIO_LED_GREEN>:
   30fb4:	00000403                                ....

00030fb8 <am_hal_cachectrl_defaults>:
   30fb8:	00000308                                ....

00030fbc <g_AM_HAL_GPIO_DISABLE>:
   30fbc:	00000003                                ....

00030fc0 <g_AM_HAL_GPIO_OUTPUT>:
   30fc0:	00000403                                ....

00030fc4 <g_ui8Bit76Capabilities>:
   30fc4:	02800101 80010180 80800101 80808080     ................
   30fd4:	80808080 80808008 01800180 80808080     ................
   30fe4:	80808080 01800402 01010401 80808080     ................
   30ff4:	00000101                                ....

00030ff8 <g_ui8Inpen>:
   30ff8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   31008:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   31018:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   31028:	00003130                                01..

0003102c <g_ui8NCEtable>:
   3102c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   3103c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   3104c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   3105c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   3106c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   3107c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   3108c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   3109c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   310ac:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   310bc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   310cc:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   310dc:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   310ec:	32221202 43231303                       .."2..#C

000310f4 <g_ui8nCEpins>:
   310f4:	02070707 00080802 01020202 01010101     ................
   31104:	01010101 01010101 01010101 01010101     ................
   31114:	01010101 08010101 01010008 01010101     ................
   31124:	00000101                                ....

00031128 <g_am_hal_mcuctrl_flash_size>:
   31128:	00004000 00008000 00010000 00020000     .@..............
   31138:	00040000 00080000 00100000 00200000     .............. .
   31148:	00180000 00000000 00000000 00000000     ................
	...

00031168 <g_am_hal_mcuctrl_sram_size>:
   31168:	00004000 00008000 00010000 00020000     .@..............
   31178:	00040000 00080000 00100000 00060000     ................
   31188:	000c0000 00000000 00000000 00000000     ................
	...

000311a8 <am_hal_pwrctrl_peripheral_control>:
	...
   311b4:	00000001 00000004 00000004 00000002     ................
   311c4:	00000008 00000008 00000004 00000008     ................
   311d4:	00000008 00000008 00000008 00000008     ................
   311e4:	00000010 00000010 00000010 00000020     ............ ...
   311f4:	00000010 00000010 00000040 00000010     ........@.......
   31204:	00000010 00000080 00000004 00000004     ................
   31214:	00000100 00000004 00000004 00000200     ................
   31224:	00000020 00000020 00000400 00000004      ... ...........
   31234:	00000004 00000800 00000040 00000040     ........@...@...
   31244:	00001000 00000080 00000080 00002000     ............. ..
   31254:	00000100 00000100                       ........

0003125c <CSWTCH.20>:
   3125c:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.

0003126c <gAmHalCmdQReg>:
   3126c:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   3127c:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   3128c:	00000004 00000002 50005294 50005298     .........R.P.R.P
   3129c:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   312ac:	5000529c 00000001 00000004 00000002     .R.P............
   312bc:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   312cc:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   312dc:	00000004 00000002 50007294 50007298     .........r.P.r.P
   312ec:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   312fc:	5000729c 00000001 00000004 00000002     .r.P............
   3130c:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   3131c:	500082a8 00008000 5000829c 00000001     ...P.......P....
   3132c:	00000004 00000002 50009294 50009298     ...........P...P
   3133c:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   3134c:	5000929c 00000001 00000004 00000002     ...P............
   3135c:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   3136c:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   3137c:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   3138c:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   3139c:	5000c250 00000001 00000004 00000002     P..P............

000313ac <fpinan.0>:
   313ac:	00000034 fffffbce 000003cb 00000001     4...............
   313bc:	00000000                                ....

000313c0 <fpi.1>:
   313c0:	00000035 fffffbce 000003cb 00000001     5...............
	...

000313d8 <tinytens>:
   313d8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   313e8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   313f8:	64ac6f43 11680628                       Co.d(.h.

00031400 <zeroes.0>:
   31400:	30303030 30303030 30303030 30303030     0000000000000000

00031410 <blanks.1>:
   31410:	20202020 20202020 20202020 20202020                     

00031420 <__hexdig>:
	...
   31450:	13121110 17161514 00001918 00000000     ................
   31460:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   31480:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

00031520 <p05.0>:
   31520:	00000005 00000019 0000007d 00000000     ........}.......

00031530 <__mprec_bigtens>:
   31530:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   31540:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   31550:	7f73bf3c 75154fdd                       <.s..O.u

00031558 <__mprec_tens>:
   31558:	00000000 3ff00000 00000000 40240000     .......?......$@
   31568:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   31578:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   31588:	00000000 412e8480 00000000 416312d0     .......A......cA
   31598:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   315a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   315b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   315c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   315d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   315e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   315f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   31608:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   31618:	79d99db4 44ea7843                       ...yCx.D

00031620 <_ctype_>:
   31620:	20202000 20202020 28282020 20282828     .         ((((( 
   31630:	20202020 20202020 20202020 20202020                     
   31640:	10108820 10101010 10101010 10101010      ...............
   31650:	04040410 04040404 10040404 10101010     ................
   31660:	41411010 41414141 01010101 01010101     ..AAAAAA........
   31670:	01010101 01010101 01010101 10101010     ................
   31680:	42421010 42424242 02020202 02020202     ..BBBBBB........
   31690:	02020202 02020202 02020202 10101010     ................
   316a0:	00000020 00000000 00000000 00000000      ...............
	...

00031724 <zeroes.0>:
   31724:	30303030 30303030 30303030 30303030     0000000000000000

00031734 <blanks.1>:
   31734:	20202020 20202020 20202020 20202020                     
   31744:	00000000                                ....

00031748 <tiny>:
   31748:	c2f8f359 01a56e1f                       Y....n..

00031750 <one>:
   31750:	00000000 3ff00000                       .......?
