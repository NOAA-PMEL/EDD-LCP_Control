###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         20/Oct/2021  10:22:07
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\buffer_c.c
#    Command line      =
#        -f C:\Users\casari\AppData\Local\Temp\2\EW9737.tmp
#        (C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\buffer_c.c
#        -D iar -D AM_PART_APOLLO3 -D AM_PACKAGE_BGA -D AM_FREERTOS -D
#        AM_DEBUG_PRINTF -D AM_UTIL_FAULTISR_PRINT -lcN
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin
#        --diag_suppress Pa050 -o
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --no_path_in_file_macros -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\third_party\FreeRTOSv10.1.1\Source\include\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\CMSIS\AmbiqMicro\Include\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\devices\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\utils\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\RTOS\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\artemis\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\bsp\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\mcu\apollo3\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\CMSIS\ARM\Include\\ -I
#        $PROJ_DIR\src\RTOS\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\mcu\apollo3\hal\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\app\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\sys\\ -Ol)
#    Locale            =  C
#    List file         =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin\buffer_c.lst
#    Object file       =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin\buffer_c.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\buffer_c.c
      1          /** @file BufferC.c
      2           *  @brief Character circular buffer library
      3           *
      4           *  @author Matt Casari, matthew.casari@noaa.gov
      5           *  @date Dec 4, 2015
      6           *  @version 0.0.1
      7           *
      8           *  @copyright National Oceanic and Atmospheric Administration
      9           *  @copyright Pacific Marine Environmental Lab
     10           *  @copyright Environmental Development Division
     11           *
     12           *  @note
     13           *
     14           *  @bug  No known bugs
     15           */
     16          
     17          #include "buffer_c.h"
     18          
     19          /*******************************************************************************
     20          *					STATIC FUNCTIONS PROTOTYPES
     21          *******************************************************************************/
     22          STATIC uint16_t BufferC_Scan(sCircularBufferC_t *buf,char val);
     23          STATIC void BufferC_Size(sCircularBufferC_t *buf);
     24          STATIC uint16_t BufferC_NextIndex(uint16_t idx);
     25          STATIC uint16_t BufferC_PrevIndex(uint16_t idx);
     26          /*******************************************************************************
     27          *					GLOBAL FUNCTIONS
     28          *******************************************************************************/
     29          void BufferC_Clear(sCircularBufferC_t *buf)
     30          {
     31                  buf->EndlineFlag = false;
     32          	buf->read = 0;
     33          	buf->write = 0;
     34          	memset(buf,0,ACTUAL_BUFFER_C_SIZE);
     35          
     36          
     37          	return;
     38          }
     39          uint8_t BufferC_Get_Size(sCircularBufferC_t *buf)
     40          {
     41            return buf->size;
     42          }
     43          
     44          eBufferCStatus_t BufferC_putc(sCircularBufferC_t *buf, char val){
     45          	eBufferCStatus_t result = BUFFER_C_ERROR;
     46          	
     47          	/** Determine the index to write to */
     48          	uint16_t NextWrite = BufferC_NextIndex(buf->write);
     49          	
     50          	/** If the next index is equal to the read index, the buffer is full */
     51          	if(NextWrite == buf->read){
     52          		result = BUFFER_C_FULL;
     53          	} else {
     54          		/** Write the value to the buffer */
     55          		buf->buffer[buf->write] = val;
     56          		/** Update the index to the next value */
     57          		buf->write = NextWrite;
     58          		/** Update the buffer size */
     59          		BufferC_Size(buf);
     60          		/** Update the result */
     61          		result = BUFFER_C_OK;
     62          	}
     63                  if(val == '\n')
     64                  {
     65                   buf->EndlineFlag = true; 
     66                  }
     67          	return result;
     68          }
     69          
     70          eBufferCStatus_t BufferC_getc(sCircularBufferC_t *buf, char *value){
     71          	eBufferCStatus_t result = BUFFER_C_ERROR;
     72          
     73          	/** If buffer read index is not == to write index, then there is data */
     74          	/** otherwise it is empty */
     75          	if(buf->read != buf->write){
     76          		/** Read the buffer Value */
     77          		*value = buf->buffer[buf->read];
     78          		/** Clear the current buffer value */
     79          		buf->buffer[buf->read] = 0;
     80          		/** Update the Index */
     81          		buf->read = BufferC_NextIndex(buf->read);
     82          		/** Update the buffer size */
     83          		BufferC_Size(buf);
     84          		/** Update the result */
     85          		result = BUFFER_C_OK;
     86          
     87          	} else {
     88          		result = BUFFER_C_EMPTY;
     89          	}
     90          	return result;
     91          }
     92          
     93          
     94          eBufferCStatus_t BufferC_Backspace(sCircularBufferC_t *buf){
     95          	eBufferCStatus_t result = BUFFER_C_ERROR;
     96          
     97          	if(buf->write == buf->read){
     98          		result = BUFFER_C_EMPTY;
     99          	} else {
    100          		buf->write = BufferC_PrevIndex(buf->write);
    101          		buf->buffer[buf->write] = 0;
    102          		BufferC_Size(buf);
    103          		result = BUFFER_C_OK;
    104          	}
    105          
    106          	return result;
    107          }
    108          
    109          
    110          
    111          
    112          eBufferCStatus_t BufferC_puts(sCircularBufferC_t *buf, char *str, uint16_t len){
    113          	eBufferCStatus_t result = BUFFER_C_ERROR;
    114          
    115          	uint16_t i;
    116          
    117          	if(len >= (BUFFER_C_SIZE - buf->size)) {
    118          		result = BUFFER_C_STRING_TOO_LONG;
    119          	} else {
    120          		
    121          		for(i=0;i<len;i++){
    122          			result = BufferC_putc(buf,str[i]);
    123          		}
    124          	}
    125          	return result;
    126          }
    127          
    128          uint16_t BufferC_gets(sCircularBufferC_t *buf, 
    129                                        char *str, 
    130                                        uint16_t maxLen){
    131          //	eBufferCStatus_t result = BUFFER_C_ERROR;
    132          	uint16_t len = BufferC_Get_Size(buf);
    133          	uint16_t i;
    134          	
    135              
    136              if(len > 0)
    137              {
    138                if(len > maxLen)
    139                {
    140                  len = maxLen;
    141                }
    142                for(i=0;i<len;i++)
    143                {
    144                  BufferC_getc(buf, str++);
    145                }
    146              }
    147          //	if(len == 0){
    148          //		result = BUFFER_C_NO_STRING ;
    149          //	}else if(len >= maxLen){
    150          //		result = BUFFER_C_STRING_TOO_LONG;
    151          //	} else {
    152          //		for(i=0;i<len;i++){
    153          //			BufferC_getc(buf,str++);
    154          //		}
    155          //                *str = 0;
    156          //		result = BUFFER_C_OK;
    157          //	}
    158          	return len;
    159          }
    160          
    161          
    162          void BufferC_remove_leading_whitespace( sCircularBufferC_t *buf)
    163          {
    164            char temp;
    165            uint16_t r_len, n_len;
    166            while(true)
    167            {
    168              if(buf->size == 0)
    169              {
    170                break;
    171              }
    172              r_len = BufferC_Scan(buf, '\r');
    173              n_len = BufferC_Scan(buf, '\n');
    174              
    175              if(r_len != 1 && n_len != 1)
    176              {
    177                break;
    178              }
    179              else
    180              {
    181                BufferC_getc(buf, &temp);
    182              }  
    183            }
    184          }
    185          
    186          /*******************************************************************************
    187          *					STATIC FUNCTIONS 
    188          *******************************************************************************/
    189          /** @brief Scan buffer for value
    190           *
    191           * Scans the buffer for a specified value, returns the number of characters from
    192           * start of string through location of specified value.
    193           *
    194           * @param *buf Pointer to the Circular Buffer
    195           * @param val Value to scan for
    196           *
    197           * @return len Length of string
    198           */
    199          STATIC uint16_t BufferC_Scan(sCircularBufferC_t *buf,char val){
    200          	uint16_t CountIdx = 0;
    201          	uint16_t ReadIdx = buf->read;
    202          	uint16_t WriteIdx = buf->write;
    203          
    204          	while(ReadIdx != WriteIdx){
    205          		CountIdx++;
    206          		if(buf->buffer[ReadIdx] == val){
    207          			break;
    208          		}
    209          		ReadIdx = BufferC_NextIndex(ReadIdx);
    210          		
    211          	}
    212          
    213          	if(ReadIdx == WriteIdx){
    214          		CountIdx = 0;
    215          	}
    216          	
    217          	return CountIdx;
    218          
    219           }
    220          
    221          
    222          /** @brief Compute the buffer size
    223           *
    224           * Computes the size of the allocated buffer and saves it
    225           * in the structure
    226           *
    227           * @param *buf Pointer to the Circular Buffer
    228           *
    229           * @return None
    230           */
    231          STATIC void BufferC_Size(sCircularBufferC_t *buf){
    232          	if(buf->write == buf->read){
    233          	  buf->size = 0;
    234          	} else if(buf->write > buf->read){
    235          	  buf->size = (buf->write - buf->read);
    236          	} else {
    237          	  buf->size = BUFFER_C_SIZE - buf->read + buf->write + 1;
    238          	}
    239            }
    240            
    241          
    242          /** @brief Compute the next index
    243           *
    244           * Computes the next index value for the buffer 
    245           *
    246           * @param idx Index to increment
    247           *
    248           * @return Compensated Index
    249           */
    250          STATIC uint16_t BufferC_NextIndex(uint16_t idx){
    251          	
    252          	if(++idx == ACTUAL_BUFFER_C_SIZE){
    253          		idx= 0;
    254          	}
    255          	return idx;
    256            }
    257          
    258          /** @brief Compute the previous index
    259           *
    260           * Computes the previous index value for the buffer 
    261           *
    262           * @param idx Index to decrement
    263           *
    264           * @return Compensated Index
    265           */
    266          STATIC uint16_t BufferC_PrevIndex(uint16_t idx){
    267          	if(idx == 0){
    268          		idx = ACTUAL_BUFFER_C_SIZE -1;
    269          	} else {
    270          		idx--;
    271          	}
    272          	return idx;
    273          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BufferC_Backspace
         8   -> BufferC_PrevIndex
         8   -> BufferC_Size
       8   BufferC_Clear
         8   -> __aeabi_memset
       0   BufferC_Get_Size
       0   BufferC_NextIndex
       0   BufferC_PrevIndex
      24   BufferC_Scan
        24   -> BufferC_NextIndex
       0   BufferC_Size
       8   BufferC_getc
         8   -> BufferC_NextIndex
         8   -> BufferC_Size
      24   BufferC_gets
        24   -> BufferC_Get_Size
        24   -> BufferC_getc
      16   BufferC_putc
        16   -> BufferC_NextIndex
        16   -> BufferC_Size
      24   BufferC_puts
        24   -> BufferC_putc
      16   BufferC_remove_leading_whitespace
        16   -> BufferC_Scan
        16   -> BufferC_getc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      54  BufferC_Backspace
      36  BufferC_Clear
       8  BufferC_Get_Size
      20  BufferC_NextIndex
      20  BufferC_PrevIndex
      68  BufferC_Scan
      68  BufferC_Size
      62  BufferC_getc
      72  BufferC_gets
      66  BufferC_putc
      64  BufferC_puts
      56  BufferC_remove_leading_whitespace

 
 594 bytes in section .text
 
 594 bytes of CODE memory

Errors: none
Warnings: none
