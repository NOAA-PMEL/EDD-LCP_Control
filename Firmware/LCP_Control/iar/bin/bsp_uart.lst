###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         20/Oct/2021  10:22:07
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\bsp\bsp_uart.c
#    Command line      =
#        -f C:\Users\casari\AppData\Local\Temp\2\EW9736.tmp
#        (C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\bsp\bsp_uart.c
#        -D iar -D AM_PART_APOLLO3 -D AM_PACKAGE_BGA -D AM_FREERTOS -D
#        AM_DEBUG_PRINTF -D AM_UTIL_FAULTISR_PRINT -lcN
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin
#        --diag_suppress Pa050 -o
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --no_path_in_file_macros -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\third_party\FreeRTOSv10.1.1\Source\include\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\CMSIS\AmbiqMicro\Include\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\devices\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\utils\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\RTOS\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\artemis\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\bsp\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\mcu\apollo3\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\CMSIS\ARM\Include\\ -I
#        $PROJ_DIR\src\RTOS\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\mcu\apollo3\hal\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\app\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\sys\\ -Ol)
#    Locale            =  C
#    List file         =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin\bsp_uart.lst
#    Object file       =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin\bsp_uart.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\bsp\bsp_uart.c
      1          #include "am_bsp.h"
      2          #include "am_util.h"
      3          //#include "MAX14830.h"
      4          
      5          #include "bsp_uart.h"
      6          #include "artemis_max14830.h"
      7          
      8          
      9          #define MAX_UART_PACKET_SIZE        ( 256 )
     10          uint8_t g_pui8UARTTXBuffer[MAX_UART_PACKET_SIZE];
     11          void *g_pvLOG;
     12          static am_hal_uart_config_t sUartConfig =
     13              {
     14                  //
     15                  // Standard UART settings: 115200-8-N-1
     16                  //
     17                  .ui32BaudRate    = 115200,
     18                  .ui32DataBits    = AM_HAL_UART_DATA_BITS_8,
     19                  .ui32Parity      = AM_HAL_UART_PARITY_NONE,
     20                  .ui32StopBits    = AM_HAL_UART_ONE_STOP_BIT,
     21                  .ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE,
     22          
     23                  //
     24                  // Set TX and RX FIFOs to interrupt at three-quarters full.
     25                  //
     26                  .ui32FifoLevels = (AM_HAL_UART_TX_FIFO_3_4 |
     27                                     AM_HAL_UART_RX_FIFO_3_4),
     28          
     29                  //
     30                  // This code will use the standard interrupt handling for UART TX, but
     31                  // we will have a custom routine for UART RX.
     32                  //
     33                  .pui8TxBuffer = g_pui8UARTTXBuffer,
     34                  .ui32TxBufferSize = sizeof(g_pui8UARTTXBuffer),
     35                  .pui8RxBuffer = 0,
     36                  .ui32RxBufferSize = 0,
     37              };
     38          
     39          void bsp_uart_init(void)
     40          {
     41              /** Init All MAX1430 COM ports */
     42              artemis_max14830_init();
     43              
     44          
     45              /** Init all HAL COM ports */
     46              am_hal_uart_initialize(0, &g_pvLOG);
     47              am_hal_uart_power_control(g_pvLOG, AM_HAL_SYSCTRL_WAKE, false);
     48              am_hal_uart_configure(g_pvLOG, &sUartConfig);
     49              am_hal_gpio_pinconfig(AM_BSP_GPIO_CONSOLE_UART_TX, g_AM_BSP_GPIO_CONSOLE_UART_TX);
     50              am_hal_gpio_pinconfig(AM_BSP_GPIO_CONSOLE_UART_RX, g_AM_BSP_GPIO_CONSOLE_UART_RX);
     51              
     52              
     53              /** Init the MAX14830 GPIO Outputs */
     54              artemis_max14830_gpio_configure_output(1, 0);
     55              artemis_max14830_gpio_configure_output(2, 0);
     56          //    artemis_max14830_gpio_configure_output(3, 0);
     57              artemis_max14830_gpio_set(1);
     58          //    artemis_max14830_gpio_clear(1);
     59              artemis_max14830_gpio_set(2);
     60          //    artemis_max14830_gpio_clear(2);
     61          //    artemis_max14830_gpio_set(3);
     62          //    artemis_max14830_gpio_clear(3);
     63          
     64              /** Start the RTOS tasks? */
     65          }
     66          
     67          void bsp_uart_enable(e_uart_t port)
     68          {
     69              switch(port)
     70              {
     71                  case BSP_UART_COM0:
     72                      artemis_max14830_enable(MAX14830_COM_PORT0);
     73                      break;
     74                  case BSP_UART_COM1:
     75                      artemis_max14830_enable(MAX14830_COM_PORT1);
     76                      break;
     77                  case BSP_UART_COM2:
     78                      artemis_max14830_enable(MAX14830_COM_PORT2);
     79                      break;
     80                  case BSP_UART_COM3:
     81                      artemis_max14830_enable(MAX14830_COM_PORT3);
     82                      break;
     83                  case BSP_UART_LOG:
     84          //            sUartConfig.ui32BaudRate = baudrate;
     85          //            am_hal_uart_configure(g_pvLOG, &sUartConfig);
     86                      break;
     87                  case BSP_UART_DEBUG:
     88                      break;
     89                  default:
     90                      break;
     91              }
     92          }
     93          
     94          void bsp_uart_diable(e_uart_t port)
     95          {
     96              switch(port)
     97              {
     98                  case BSP_UART_COM0:
     99                      artemis_max14830_disable(MAX14830_COM_PORT0);
    100                      break;
    101                  case BSP_UART_COM1:
    102                      artemis_max14830_disable(MAX14830_COM_PORT1);
    103                      break;
    104                  case BSP_UART_COM2:
    105                      artemis_max14830_disable(MAX14830_COM_PORT2);
    106                      break;
    107                  case BSP_UART_COM3:
    108                      artemis_max14830_disable(MAX14830_COM_PORT3);
    109                      break;
    110                  case BSP_UART_LOG:
    111          //            sUartConfig.ui32BaudRate = baudrate;
    112          //            am_hal_uart_configure(g_pvLOG, &sUartConfig);
    113                      break;
    114                  case BSP_UART_DEBUG:
    115                      break;
    116                  default:
    117                      break;
    118              }
    119          }
    120          
    121          void bsp_uart_low_power(e_uart_t port)
    122          {
    123              switch(port)
    124              {
    125                  case BSP_UART_COM0:
    126                      break;
    127                  case BSP_UART_COM1:
    128                      break;
    129                  case BSP_UART_COM2:
    130                      break;
    131                  case BSP_UART_COM3:
    132                      break;
    133                  case BSP_UART_LOG:
    134          //            sUartConfig.ui32BaudRate = baudrate;
    135          //            am_hal_uart_power_control(g_pvLOG, AM_HAL_SYSCTRL_DEEPSLEEP, true);
    136                      break;
    137                  case BSP_UART_DEBUG:
    138                      break;
    139                  default:
    140                      break;
    141              }
    142          }
    143          
    144          void bsp_uart_set_baudrate(e_uart_t port, uint32_t baudrate )
    145          {
    146              switch(port)
    147              {
    148                  case BSP_UART_COM0:
    149                      artemis_max14830_Set_baudrate(MAX14830_COM_PORT0, (eMAX14830_Baudrate_t)baudrate);
    150                      break;
    151                  case BSP_UART_COM1:
    152                      artemis_max14830_Set_baudrate(MAX14830_COM_PORT1, (eMAX14830_Baudrate_t)baudrate);
    153                      break;
    154                  case BSP_UART_COM2:
    155                      artemis_max14830_Set_baudrate(MAX14830_COM_PORT2, (eMAX14830_Baudrate_t)baudrate);
    156                      break;
    157                  case BSP_UART_COM3:
    158                      artemis_max14830_Set_baudrate(MAX14830_COM_PORT3, (eMAX14830_Baudrate_t)baudrate);
    159                      break;
    160                  case BSP_UART_LOG:
    161                      sUartConfig.ui32BaudRate = baudrate;
    162                      am_hal_uart_configure(g_pvLOG, &sUartConfig);
    163                      break;
    164                  case BSP_UART_DEBUG:
    165                      break;
    166                  default:
    167                      break;
    168              }
    169          }
    170          
    171          void bsp_uart_putc(e_uart_t port, char c)
    172          {
    173              uint32_t numTx = 0;
    174              am_hal_uart_transfer_t tx = {
    175                          .ui32Direction = AM_HAL_UART_WRITE,
    176                          .pui8Data = (uint8_t*)&c,
    177                          .ui32NumBytes = 1,
    178                          .ui32TimeoutMs = 0,
    179                          .pui32BytesTransferred = &numTx,
    180                      };
    181              switch(port)
    182              {
    183                  case BSP_UART_COM0:
    184                      artemis_max14830_UART_Write(MAX14830_COM_PORT0, &c, 1);
    185                      break;
    186                  case BSP_UART_COM1:
    187                      artemis_max14830_UART_Write(MAX14830_COM_PORT1, &c, 1);
    188                      break;
    189                  case BSP_UART_COM2:
    190                      artemis_max14830_UART_Write(MAX14830_COM_PORT2, &c, 1);
    191                      break;
    192                  case BSP_UART_COM3:
    193                      artemis_max14830_UART_Write(MAX14830_COM_PORT3, &c, 1);
    194                      break;
    195                  case BSP_UART_LOG:
    196                      
    197                      
    198                      am_hal_uart_transfer(g_pvLOG, &tx);
    199                      break;
    200                  case BSP_UART_DEBUG:
    201                      break;
    202                  default:
    203                      break;
    204              }
    205          }
    206          
    207          void bsp_uart_puts(e_uart_t port, char *pStr, uint32_t len)
    208          {
    209              uint32_t numTx = 0;
    210              am_hal_uart_transfer_t tx = {
    211                  .ui32Direction = AM_HAL_UART_WRITE,
    212                  .pui8Data = (uint8_t*) pStr,
    213                  .ui32NumBytes = len,
    214                  .ui32TimeoutMs = 0,
    215                  .pui32BytesTransferred = &numTx
    216              };
    217              switch(port)
    218              {
    219                  case BSP_UART_COM0:
    220                      artemis_max14830_UART_Write(MAX14830_COM_PORT0, pStr, len);
    221                      break;
    222                  case BSP_UART_COM1:
    223                      artemis_max14830_UART_Write(MAX14830_COM_PORT1, pStr, len);
    224                      break;
    225                  case BSP_UART_COM2:
    226                      artemis_max14830_UART_Write(MAX14830_COM_PORT2, pStr, len);
    227                      break;
    228                  case BSP_UART_COM3:
    229                      artemis_max14830_UART_Write(MAX14830_COM_PORT3, pStr, len);
    230                      break;
    231                  case BSP_UART_LOG:
    232                      
    233                      am_hal_uart_transfer(g_pvLOG, &tx);
    234                      break;
    235                  case BSP_UART_DEBUG:
    236                      break;
    237                  default:
    238                      break;
    239              }
    240          }
    241          
    242          char bsp_uart_getc(e_uart_t port)
    243          {
    244              char c = NULL;
    245              uint32_t numTx = 0;
    246              am_hal_uart_transfer_t tx = {
    247                  .ui32Direction = AM_HAL_UART_READ,
    248                  .pui8Data = (uint8_t*)&c,
    249                  .ui32NumBytes = 1,
    250                  .ui32TimeoutMs = 0,
    251                  .pui32BytesTransferred = &numTx
    252              };
    253              switch(port)
    254              {
    255                  case BSP_UART_COM0:
    256                      artemis_max14830_UART_Read(MAX14830_COM_PORT0, &c, 1);
    257                      break;
    258                  case BSP_UART_COM1:
    259                      artemis_max14830_UART_Read(MAX14830_COM_PORT1, &c, 1);
    260                      break;
    261                  case BSP_UART_COM2:
    262                      artemis_max14830_UART_Read(MAX14830_COM_PORT2, &c, 1);
    263                      break;
    264                  case BSP_UART_COM3:
    265                      artemis_max14830_UART_Read(MAX14830_COM_PORT3, &c, 1);
    266                      break;
    267                  case BSP_UART_LOG:
    268                      
    269                      am_hal_uart_transfer(g_pvLOG, &tx);
    270                      break;
    271                  case BSP_UART_DEBUG:
    272                      break;
    273                  default:
    274                      break;
    275              }
    276          
    277              return (char) c;
    278          }
    279          
    280          uint32_t bsp_uart_gets(e_uart_t port, char *pStr, uint32_t len)
    281          {
    282              uint32_t rxLen = 0;
    283              am_hal_uart_transfer_t tx = {
    284                  .ui32Direction = AM_HAL_UART_READ,
    285                  .pui8Data = (uint8_t*)pStr,
    286                  .ui32NumBytes = 1,
    287                  .ui32TimeoutMs = 0,
    288                  .pui32BytesTransferred = &rxLen
    289              };
    290              char c = NULL;
    291              switch(port)
    292              {
    293                  case BSP_UART_COM0:
    294                      rxLen = artemis_max14830_UART_Read(MAX14830_COM_PORT0, pStr, len);
    295                      break;
    296                  case BSP_UART_COM1:
    297                      rxLen = artemis_max14830_UART_Read(MAX14830_COM_PORT1, pStr, len);
    298                      break;
    299                  case BSP_UART_COM2:
    300                      rxLen = artemis_max14830_UART_Read(MAX14830_COM_PORT2, pStr, len);
    301                      break;
    302                  case BSP_UART_COM3:
    303                      rxLen = artemis_max14830_UART_Read(MAX14830_COM_PORT3, pStr, len);
    304                      break;
    305                  case BSP_UART_LOG:
    306                      
    307                      am_hal_uart_transfer(g_pvLOG, &tx);
    308                      break;
    309                  case BSP_UART_DEBUG:
    310                      break;
    311                  default:
    312                      break;
    313              }
    314          
    315              return c;
    316          }
    317          
    318          
    319          void BSP_UART_Test(void)
    320          {
    321            char data[256];
    322            
    323            artemis_max14830_UART_Read(MAX14830_COM_PORT0, data, 256);
    324            
    325          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     264   BSP_UART_Test
       264   -> artemis_max14830_UART_Read
       8   bsp_uart_diable
         8   -> artemis_max14830_disable
       8   bsp_uart_enable
         8   -> artemis_max14830_enable
      40   bsp_uart_getc
        40   -> __aeabi_memcpy4
        40   -> am_hal_uart_transfer
        40   -> artemis_max14830_UART_Read
      48   bsp_uart_gets
        48   -> __aeabi_memcpy4
        48   -> am_hal_uart_transfer
        48   -> artemis_max14830_UART_Read
       8   bsp_uart_init
         8   -> am_hal_gpio_pinconfig
         8   -> am_hal_uart_configure
         8   -> am_hal_uart_initialize
         8   -> am_hal_uart_power_control
         8   -> artemis_max14830_gpio_configure_output
         8   -> artemis_max14830_gpio_set
         8   -> artemis_max14830_init
       0   bsp_uart_low_power
      40   bsp_uart_putc
        40   -> __aeabi_memcpy4
        40   -> am_hal_uart_transfer
        40   -> artemis_max14830_UART_Write
      40   bsp_uart_puts
        40   -> __aeabi_memclr4
        40   -> am_hal_uart_transfer
        40   -> artemis_max14830_UART_Write
       8   bsp_uart_set_baudrate
         8   -> am_hal_uart_configure
         8   -> artemis_max14830_Set_baudrate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
      20  ?_0
      20  ?_1
      20  ?_2
      20  ?_3
      20  BSP_UART_Test
      68  bsp_uart_diable
      68  bsp_uart_enable
     132  bsp_uart_getc
     138  bsp_uart_gets
      92  bsp_uart_init
      42  bsp_uart_low_power
     122  bsp_uart_putc
     124  bsp_uart_puts
      82  bsp_uart_set_baudrate
     256  g_pui8UARTTXBuffer
       4  g_pvLOG
      40  sUartConfig

 
 260 bytes in section .bss
  40 bytes in section .data
  80 bytes in section .rodata
 916 bytes in section .text
 
 916 bytes of CODE  memory
  80 bytes of CONST memory
 300 bytes of DATA  memory

Errors: none
Warnings: 2
