###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         20/Oct/2021  10:22:08
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\LED.c
#    Command line                 =
#        -f C:\Users\casari\AppData\Local\Temp\2\EW99B0.tmp
#        (C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\LED.c -D
#        iar -D AM_PART_APOLLO3 -D AM_PACKAGE_BGA -D AM_FREERTOS -D
#        AM_DEBUG_PRINTF -D AM_UTIL_FAULTISR_PRINT -lcN
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin
#        --diag_suppress Pa050 -o
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --no_path_in_file_macros -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\third_party\FreeRTOSv10.1.1\Source\include\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\CMSIS\AmbiqMicro\Include\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\devices\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\utils\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\RTOS\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\artemis\\
#        -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\..\src\bsp\\
#        -I C:\Tools\Ambiq\AmbiqSuite-R2.5.1\mcu\apollo3\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\CMSIS\ARM\Include\\ -I
#        $PROJ_DIR\src\RTOS\\ -I
#        C:\Tools\Ambiq\AmbiqSuite-R2.5.1\mcu\apollo3\hal\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\app\\ -I
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\sys\\ -Ol)
#    Locale                       =  C
#    List file                    =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin\LED.lst
#    Object file                  =
#        C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\iar\bin\LED.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\version-control\EDD-LCP_Control\Firmware\LCP_Control\src\LED.c
      1          //#include "freertos_lowpower.h"
      2          #include "FreeRTOS.h"
      3          #include "main.h"
      4          #include <assert.h>
      5          //#include "LED.h"
      6          //#include "am_devices_led.h"
      7          //#include "am_bsp_pins.h"
      8          
      9          
     10          
     11          const am_devices_led_t LED[3] = {
     12            {
     13              .ui32GPIONumber   = AM_BSP_GPIO_LED_GREEN,
     14              .ui32Polarity     = AM_DEVICES_LED_ON_LOW,
     15            },
     16            {
     17              .ui32GPIONumber   = AM_BSP_GPIO_LED_RED,
     18              .ui32Polarity     = AM_DEVICES_LED_ON_LOW
     19            },
     20            {
     21              .ui32GPIONumber   = AM_BSP_GPIO_LED_BLUE,
     22              .ui32Polarity     = AM_DEVICES_LED_ON_LOW
     23            }   
     24            
     25          };
     26          const am_devices_led_t *psLED = &LED[0];
     27          
     28          TaskHandle_t green_led_task_handle;
     29          TaskHandle_t blue_led_task_handle;
     30          
     31          SemaphoreHandle_t xLedMutex = NULL;
     32          StaticSemaphore_t xLedSemaphoreBuffer;
     33          
     34          const TickType_t xDelay1ms = pdMS_TO_TICKS( 1UL );
     35          const TickType_t xDelay5ms = pdMS_TO_TICKS( 5UL );
     36          const TickType_t xDelay10ms = pdMS_TO_TICKS( 10UL );
     37          const TickType_t xDelay50ms = pdMS_TO_TICKS( 50UL );
     38          const TickType_t xDelay100ms = pdMS_TO_TICKS( 100UL );
     39          const TickType_t xDelay250ms = pdMS_TO_TICKS( 250UL );
     40          const TickType_t xDelay500ms = pdMS_TO_TICKS( 500UL );
     41          
     42          SemaphoreHandle_t xSemaphore = NULL;
     43          
     44          
     45          void LED_Init(void)
     46          {
     47            
     48              /** Create the Mutex */
     49              xLedMutex = xSemaphoreCreateMutex( );
     50              configASSERT(xLedMutex);
     51              
     52              /** Initialize the LED Array */
     53              am_devices_led_array_init((am_devices_led_t*)psLED, 3);
     54              
     55              /** Enable the interrupts */
     56              am_hal_interrupt_master_enable();
     57              
     58              
     59              /** Toggle the LEDs ON for the heck of it*/
     60              LED_Toggle(LED_GREEN);
     61              LED_Toggle(LED_BLUE);
     62              
     63              /** Mutex is ready */
     64              xSemaphoreGive(xLedMutex);
     65              
     66          }   
     67          
     68          
     69          void LED_Toggle(eLED_t led)
     70          {
     71          
     72            uint8_t led_num = 0;
     73            switch(led)
     74            {
     75            case LED_RED:
     76              led_num = 1;
     77              break;
     78            case LED_GREEN:
     79              led_num = 0;
     80              break;
     81            case LED_BLUE:
     82              led_num = 2;
     83              break;
     84            default:
     85              break;
     86            }  
     87          
     88            am_devices_led_toggle((am_devices_led_t*)psLED, led_num);
     89            
     90          }
     91          
     92          void LED_Off(eLED_t led)
     93          {
     94            uint8_t led_num = 0;
     95            switch(led)
     96            {
     97            case LED_RED:
     98              led_num = 1;
     99              break;
    100            case LED_GREEN:
    101              led_num = 0;
    102              break;
    103            case LED_BLUE:
    104              led_num = 2;
    105              break;
    106            default:
    107              break;
    108            }  
    109          
    110            am_devices_led_off((am_devices_led_t*)psLED, led_num);
    111          }
    112          
    113          
    114          void GreenLedTask(void *pvParameters)
    115          {
    116              uint32_t time_ms = (uint32_t) pvParameters;
    117              TickType_t xLastWakeTime;
    118              xLastWakeTime = xTaskGetTickCount();
    119              while(true)
    120              {
    121                vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( time_ms));
    122                if(xSemaphoreTake(xLedMutex, xDelay5ms) == pdPASS)
    123                {
    124                  LED_Toggle(LED_GREEN);
    125                  xSemaphoreGive(xLedMutex);
    126                } else {
    127                  
    128                }
    129                
    130              }  
    131          }
    132          
    133          
    134          void BlueLedTask(void *pvParameters)
    135          {
    136            
    137              uint32_t time_ms = (uint32_t) pvParameters;
    138              TickType_t xLastWakeTime;
    139              xLastWakeTime = xTaskGetTickCount();
    140              while(true)
    141              {
    142                vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS( time_ms ));
    143                if(xSemaphoreTake(xLedMutex, xDelay5ms) == pdPASS)
    144                {
    145                  LED_Toggle(LED_BLUE);
    146                  xSemaphoreGive(xLedMutex);
    147                } else {
    148                  
    149                }
    150                
    151              }  
    152          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BlueLedTask
        16   -> LED_Toggle
        16   -> vTaskDelayUntil
        16   -> xQueueGenericSend
        16   -> xQueueSemaphoreTake
        16   -> xTaskGetTickCount
      16   GreenLedTask
        16   -> LED_Toggle
        16   -> vTaskDelayUntil
        16   -> xQueueGenericSend
        16   -> xQueueSemaphoreTake
        16   -> xTaskGetTickCount
       8   LED_Init
         8   -> LED_Toggle
         8   -> am_devices_led_array_init
         8   -> am_hal_interrupt_master_enable
         8   -> xQueueCreateMutex
         8   -> xQueueGenericSend
       8   LED_Off
         8   -> am_devices_led_off
       8   LED_Toggle
         8   -> am_devices_led_toggle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
      68  BlueLedTask
      68  GreenLedTask
      24  LED
      60  LED_Init
      42  LED_Off
      42  LED_Toggle
       4  blue_led_task_handle
       4  green_led_task_handle
       4  psLED
       4  xDelay100ms
       4  xDelay10ms
       4  xDelay1ms
       4  xDelay250ms
       4  xDelay500ms
       4  xDelay50ms
       4  xDelay5ms
       4  xLedMutex
      72  xLedSemaphoreBuffer
       4  xSemaphore

 
  88 bytes in section .bss
   4 bytes in section .data
  52 bytes in section .rodata
 292 bytes in section .text
 
 292 bytes of CODE  memory
  52 bytes of CONST memory
  92 bytes of DATA  memory

Errors: none
Warnings: none
